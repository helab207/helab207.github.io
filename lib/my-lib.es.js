var Of = Object.defineProperty;
var Uf = (i, e, t) => e in i ? Of(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t;
var I = (i, e, t) => (Uf(i, typeof e != "symbol" ? e + "" : e, t), t);
const Ff = [
  // { sequenceName: 'PerceptuallyUniformSequential', sequenceCmapList: [] },
  {
    sequenceName: "Sequential",
    sequenceCmapList: [
      "Greys",
      "Purples",
      "Blues",
      "Greens",
      "Oranges",
      "Reds",
      "YlOrBr",
      "YlOrRd",
      "OrRd",
      "PuRd",
      "RdPu",
      "BuPu",
      "GnBu",
      "PuBu",
      "YlGnBu",
      "PuBuGn",
      "BuGn",
      "YlGn"
    ]
  },
  {
    sequenceName: "Sequential2",
    sequenceCmapList: [
      "gray",
      "bone",
      "pink",
      "spring",
      "summer",
      "autumn",
      "winter",
      "cool",
      "hot",
      "afmhot",
      "gist_heat",
      "copper"
    ]
  },
  {
    sequenceName: "Diverging",
    sequenceCmapList: [
      "PiYG",
      "PRGn",
      "BrBG",
      "PuOr",
      "RdGy",
      "RdBu",
      "RdYlBu",
      "RdYlGn",
      "Spectral",
      "coolwarm",
      "bwr",
      "seismic"
    ]
  },
  {
    sequenceName: "Cyclic",
    sequenceCmapList: ["hsv"]
  },
  {
    sequenceName: "Qualitative",
    sequenceCmapList: [
      "Pastel1",
      "Pastel2",
      "Paired",
      "Accent",
      "Dark2",
      "Set1",
      "Set2",
      "Set3"
    ]
  },
  {
    sequenceName: "Miscellaneous",
    sequenceCmapList: [
      "flag",
      "prism",
      "ocean",
      "gist_earth",
      "terrain",
      "gist_stern",
      "gnuplot",
      "gnuplot2",
      "CMRmap",
      "cubehelix",
      "brg",
      "gist_rainbow",
      "rainbow",
      "jet",
      "nipy_spectral",
      "gist_ncar"
    ]
  }
], zf = [
  [0, [0.329, 0.188, 0.02]],
  [2e-3, [0.329, 0.188, 0.02]],
  [4e-3, [0.338, 0.193, 0.02]],
  [6e-3, [0.338, 0.193, 0.02]],
  [8e-3, [0.347, 0.198, 0.021]],
  [0.01, [0.347, 0.198, 0.021]],
  [0.012, [0.355, 0.203, 0.022]],
  [0.014, [0.355, 0.203, 0.022]],
  [0.016, [0.364, 0.209, 0.023]],
  [0.018, [0.364, 0.209, 0.023]],
  [0.02, [0.372, 0.214, 0.023]],
  [0.022, [0.372, 0.214, 0.023]],
  [0.023, [0.381, 0.219, 0.024]],
  [0.025, [0.381, 0.219, 0.024]],
  [0.027, [0.39, 0.224, 0.025]],
  [0.029, [0.39, 0.224, 0.025]],
  [0.031, [0.398, 0.229, 0.026]],
  [0.033, [0.398, 0.229, 0.026]],
  [0.035, [0.407, 0.234, 0.027]],
  [0.037, [0.407, 0.234, 0.027]],
  [0.039, [0.416, 0.239, 0.027]],
  [0.041, [0.416, 0.239, 0.027]],
  [0.043, [0.424, 0.244, 0.028]],
  [0.045, [0.424, 0.244, 0.028]],
  [0.047, [0.433, 0.249, 0.029]],
  [0.049, [0.433, 0.249, 0.029]],
  [0.051, [0.441, 0.254, 0.03]],
  [0.053, [0.441, 0.254, 0.03]],
  [0.055, [0.45, 0.259, 0.03]],
  [0.057, [0.45, 0.259, 0.03]],
  [0.059, [0.459, 0.264, 0.031]],
  [0.061, [0.459, 0.264, 0.031]],
  [0.063, [0.467, 0.269, 0.032]],
  [0.065, [0.467, 0.269, 0.032]],
  [0.067, [0.476, 0.275, 0.033]],
  [0.068, [0.476, 0.275, 0.033]],
  [0.07, [0.484, 0.28, 0.033]],
  [0.072, [0.484, 0.28, 0.033]],
  [0.074, [0.493, 0.285, 0.034]],
  [0.076, [0.493, 0.285, 0.034]],
  [0.078, [0.502, 0.29, 0.035]],
  [0.08, [0.502, 0.29, 0.035]],
  [0.082, [0.51, 0.295, 0.036]],
  [0.084, [0.51, 0.295, 0.036]],
  [0.086, [0.519, 0.3, 0.037]],
  [0.088, [0.519, 0.3, 0.037]],
  [0.09, [0.527, 0.305, 0.037]],
  [0.092, [0.527, 0.305, 0.037]],
  [0.094, [0.536, 0.31, 0.038]],
  [0.096, [0.536, 0.31, 0.038]],
  [0.098, [0.545, 0.315, 0.039]],
  [0.1, [0.545, 0.315, 0.039]],
  [0.102, [0.553, 0.321, 0.042]],
  [0.104, [0.553, 0.321, 0.042]],
  [0.106, [0.561, 0.329, 0.047]],
  [0.108, [0.561, 0.329, 0.047]],
  [0.11, [0.569, 0.336, 0.053]],
  [0.112, [0.569, 0.336, 0.053]],
  [0.114, [0.576, 0.343, 0.058]],
  [0.115, [0.576, 0.343, 0.058]],
  [0.117, [0.584, 0.351, 0.063]],
  [0.119, [0.584, 0.351, 0.063]],
  [0.121, [0.592, 0.358, 0.069]],
  [0.123, [0.592, 0.358, 0.069]],
  [0.125, [0.6, 0.366, 0.074]],
  [0.127, [0.6, 0.366, 0.074]],
  [0.129, [0.608, 0.373, 0.08]],
  [0.131, [0.608, 0.373, 0.08]],
  [0.133, [0.616, 0.38, 0.085]],
  [0.135, [0.616, 0.38, 0.085]],
  [0.137, [0.624, 0.388, 0.09]],
  [0.139, [0.624, 0.388, 0.09]],
  [0.141, [0.631, 0.395, 0.096]],
  [0.143, [0.631, 0.395, 0.096]],
  [0.145, [0.639, 0.403, 0.101]],
  [0.147, [0.639, 0.403, 0.101]],
  [0.149, [0.647, 0.41, 0.106]],
  [0.151, [0.647, 0.41, 0.106]],
  [0.153, [0.655, 0.417, 0.112]],
  [0.155, [0.655, 0.417, 0.112]],
  [0.157, [0.663, 0.425, 0.117]],
  [0.159, [0.663, 0.425, 0.117]],
  [0.16, [0.671, 0.432, 0.123]],
  [0.162, [0.671, 0.432, 0.123]],
  [0.164, [0.678, 0.439, 0.128]],
  [0.166, [0.678, 0.439, 0.128]],
  [0.168, [0.686, 0.447, 0.133]],
  [0.17, [0.686, 0.447, 0.133]],
  [0.172, [0.694, 0.454, 0.139]],
  [0.174, [0.694, 0.454, 0.139]],
  [0.176, [0.702, 0.462, 0.144]],
  [0.178, [0.702, 0.462, 0.144]],
  [0.18, [0.71, 0.469, 0.15]],
  [0.182, [0.71, 0.469, 0.15]],
  [0.184, [0.718, 0.476, 0.155]],
  [0.186, [0.718, 0.476, 0.155]],
  [0.188, [0.725, 0.484, 0.16]],
  [0.19, [0.725, 0.484, 0.16]],
  [0.192, [0.733, 0.491, 0.166]],
  [0.194, [0.733, 0.491, 0.166]],
  [0.196, [0.741, 0.499, 0.171]],
  [0.198, [0.741, 0.499, 0.171]],
  [0.2, [0.749, 0.506, 0.176]],
  [0.202, [0.749, 0.506, 0.176]],
  [0.204, [0.754, 0.516, 0.189]],
  [0.205, [0.754, 0.516, 0.189]],
  [0.207, [0.759, 0.526, 0.201]],
  [0.209, [0.759, 0.526, 0.201]],
  [0.211, [0.764, 0.536, 0.213]],
  [0.213, [0.764, 0.536, 0.213]],
  [0.215, [0.769, 0.546, 0.226]],
  [0.217, [0.769, 0.546, 0.226]],
  [0.219, [0.774, 0.556, 0.238]],
  [0.221, [0.774, 0.556, 0.238]],
  [0.223, [0.779, 0.566, 0.25]],
  [0.225, [0.779, 0.566, 0.25]],
  [0.227, [0.783, 0.576, 0.263]],
  [0.229, [0.783, 0.576, 0.263]],
  [0.231, [0.788, 0.586, 0.275]],
  [0.233, [0.788, 0.586, 0.275]],
  [0.235, [0.793, 0.596, 0.287]],
  [0.237, [0.793, 0.596, 0.287]],
  [0.239, [0.798, 0.606, 0.3]],
  [0.241, [0.798, 0.606, 0.3]],
  [0.243, [0.803, 0.616, 0.312]],
  [0.245, [0.803, 0.616, 0.312]],
  [0.247, [0.808, 0.626, 0.324]],
  [0.249, [0.808, 0.626, 0.324]],
  [0.25, [0.813, 0.636, 0.336]],
  [0.252, [0.813, 0.636, 0.336]],
  [0.254, [0.818, 0.646, 0.349]],
  [0.256, [0.818, 0.646, 0.349]],
  [0.258, [0.823, 0.656, 0.361]],
  [0.26, [0.823, 0.656, 0.361]],
  [0.262, [0.828, 0.666, 0.373]],
  [0.264, [0.828, 0.666, 0.373]],
  [0.266, [0.833, 0.676, 0.386]],
  [0.268, [0.833, 0.676, 0.386]],
  [0.27, [0.838, 0.686, 0.398]],
  [0.272, [0.838, 0.686, 0.398]],
  [0.274, [0.843, 0.696, 0.41]],
  [0.276, [0.843, 0.696, 0.41]],
  [0.278, [0.847, 0.706, 0.423]],
  [0.28, [0.847, 0.706, 0.423]],
  [0.282, [0.852, 0.716, 0.435]],
  [0.284, [0.852, 0.716, 0.435]],
  [0.286, [0.857, 0.726, 0.447]],
  [0.288, [0.857, 0.726, 0.447]],
  [0.29, [0.862, 0.736, 0.459]],
  [0.292, [0.862, 0.736, 0.459]],
  [0.294, [0.867, 0.746, 0.472]],
  [0.295, [0.867, 0.746, 0.472]],
  [0.297, [0.872, 0.756, 0.484]],
  [0.299, [0.872, 0.756, 0.484]],
  [0.301, [0.876, 0.764, 0.496]],
  [0.303, [0.876, 0.764, 0.496]],
  [0.305, [0.88, 0.77, 0.506]],
  [0.307, [0.88, 0.77, 0.506]],
  [0.309, [0.883, 0.775, 0.517]],
  [0.311, [0.883, 0.775, 0.517]],
  [0.313, [0.887, 0.781, 0.528]],
  [0.315, [0.887, 0.781, 0.528]],
  [0.317, [0.89, 0.787, 0.539]],
  [0.319, [0.89, 0.787, 0.539]],
  [0.321, [0.894, 0.793, 0.549]],
  [0.323, [0.894, 0.793, 0.549]],
  [0.325, [0.898, 0.799, 0.56]],
  [0.327, [0.898, 0.799, 0.56]],
  [0.329, [0.901, 0.805, 0.571]],
  [0.331, [0.901, 0.805, 0.571]],
  [0.333, [0.905, 0.81, 0.582]],
  [0.335, [0.905, 0.81, 0.582]],
  [0.337, [0.908, 0.816, 0.592]],
  [0.339, [0.908, 0.816, 0.592]],
  [0.341, [0.912, 0.822, 0.603]],
  [0.342, [0.912, 0.822, 0.603]],
  [0.344, [0.915, 0.828, 0.614]],
  [0.346, [0.915, 0.828, 0.614]],
  [0.348, [0.919, 0.834, 0.625]],
  [0.35, [0.919, 0.834, 0.625]],
  [0.352, [0.922, 0.84, 0.636]],
  [0.354, [0.922, 0.84, 0.636]],
  [0.356, [0.926, 0.846, 0.646]],
  [0.358, [0.926, 0.846, 0.646]],
  [0.36, [0.929, 0.851, 0.657]],
  [0.362, [0.929, 0.851, 0.657]],
  [0.364, [0.933, 0.857, 0.668]],
  [0.366, [0.933, 0.857, 0.668]],
  [0.368, [0.936, 0.863, 0.679]],
  [0.37, [0.936, 0.863, 0.679]],
  [0.372, [0.94, 0.869, 0.689]],
  [0.374, [0.94, 0.869, 0.689]],
  [0.376, [0.943, 0.875, 0.7]],
  [0.378, [0.943, 0.875, 0.7]],
  [0.38, [0.947, 0.881, 0.711]],
  [0.382, [0.947, 0.881, 0.711]],
  [0.384, [0.951, 0.886, 0.722]],
  [0.386, [0.951, 0.886, 0.722]],
  [0.387, [0.954, 0.892, 0.732]],
  [0.389, [0.954, 0.892, 0.732]],
  [0.391, [0.958, 0.898, 0.743]],
  [0.393, [0.958, 0.898, 0.743]],
  [0.395, [0.961, 0.904, 0.754]],
  [0.397, [0.961, 0.904, 0.754]],
  [0.399, [0.965, 0.91, 0.765]],
  [0.401, [0.965, 0.91, 0.765]],
  [0.403, [0.965, 0.912, 0.772]],
  [0.405, [0.965, 0.912, 0.772]],
  [0.407, [0.964, 0.914, 0.78]],
  [0.409, [0.964, 0.914, 0.78]],
  [0.411, [0.964, 0.916, 0.788]],
  [0.413, [0.964, 0.916, 0.788]],
  [0.415, [0.964, 0.918, 0.795]],
  [0.417, [0.964, 0.918, 0.795]],
  [0.419, [0.964, 0.92, 0.803]],
  [0.421, [0.964, 0.92, 0.803]],
  [0.423, [0.964, 0.922, 0.811]],
  [0.425, [0.964, 0.922, 0.811]],
  [0.427, [0.964, 0.924, 0.819]],
  [0.429, [0.964, 0.924, 0.819]],
  [0.431, [0.963, 0.926, 0.826]],
  [0.432, [0.963, 0.926, 0.826]],
  [0.434, [0.963, 0.928, 0.834]],
  [0.436, [0.963, 0.928, 0.834]],
  [0.438, [0.963, 0.93, 0.842]],
  [0.44, [0.963, 0.93, 0.842]],
  [0.442, [0.963, 0.932, 0.849]],
  [0.444, [0.963, 0.932, 0.849]],
  [0.446, [0.963, 0.934, 0.857]],
  [0.448, [0.963, 0.934, 0.857]],
  [0.45, [0.963, 0.936, 0.865]],
  [0.452, [0.963, 0.936, 0.865]],
  [0.454, [0.963, 0.938, 0.872]],
  [0.456, [0.963, 0.938, 0.872]],
  [0.458, [0.962, 0.94, 0.88]],
  [0.46, [0.962, 0.94, 0.88]],
  [0.462, [0.962, 0.942, 0.888]],
  [0.464, [0.962, 0.942, 0.888]],
  [0.466, [0.962, 0.944, 0.895]],
  [0.468, [0.962, 0.944, 0.895]],
  [0.47, [0.962, 0.946, 0.903]],
  [0.472, [0.962, 0.946, 0.903]],
  [0.474, [0.962, 0.948, 0.911]],
  [0.476, [0.962, 0.948, 0.911]],
  [0.477, [0.962, 0.95, 0.918]],
  [0.479, [0.962, 0.95, 0.918]],
  [0.481, [0.961, 0.952, 0.926]],
  [0.483, [0.961, 0.952, 0.926]],
  [0.485, [0.961, 0.954, 0.934]],
  [0.487, [0.961, 0.954, 0.934]],
  [0.489, [0.961, 0.956, 0.942]],
  [0.491, [0.961, 0.956, 0.942]],
  [0.493, [0.961, 0.958, 0.949]],
  [0.495, [0.961, 0.958, 0.949]],
  [0.497, [0.961, 0.96, 0.957]],
  [0.499, [0.961, 0.96, 0.957]],
  [0.501, [0.957, 0.96, 0.96]],
  [0.503, [0.957, 0.96, 0.96]],
  [0.505, [0.95, 0.958, 0.957]],
  [0.507, [0.95, 0.958, 0.957]],
  [0.509, [0.943, 0.957, 0.955]],
  [0.511, [0.943, 0.957, 0.955]],
  [0.513, [0.936, 0.955, 0.952]],
  [0.515, [0.936, 0.955, 0.952]],
  [0.517, [0.929, 0.953, 0.95]],
  [0.519, [0.929, 0.953, 0.95]],
  [0.521, [0.922, 0.951, 0.947]],
  [0.523, [0.922, 0.951, 0.947]],
  [0.524, [0.915, 0.95, 0.945]],
  [0.526, [0.915, 0.95, 0.945]],
  [0.528, [0.908, 0.948, 0.942]],
  [0.53, [0.908, 0.948, 0.942]],
  [0.532, [0.901, 0.946, 0.94]],
  [0.534, [0.901, 0.946, 0.94]],
  [0.536, [0.894, 0.945, 0.937]],
  [0.538, [0.894, 0.945, 0.937]],
  [0.54, [0.887, 0.943, 0.935]],
  [0.542, [0.887, 0.943, 0.935]],
  [0.544, [0.879, 0.941, 0.932]],
  [0.546, [0.879, 0.941, 0.932]],
  [0.548, [0.872, 0.94, 0.93]],
  [0.55, [0.872, 0.94, 0.93]],
  [0.552, [0.865, 0.938, 0.928]],
  [0.554, [0.865, 0.938, 0.928]],
  [0.556, [0.858, 0.936, 0.925]],
  [0.558, [0.858, 0.936, 0.925]],
  [0.56, [0.851, 0.935, 0.923]],
  [0.562, [0.851, 0.935, 0.923]],
  [0.564, [0.844, 0.933, 0.92]],
  [0.566, [0.844, 0.933, 0.92]],
  [0.568, [0.837, 0.931, 0.918]],
  [0.569, [0.837, 0.931, 0.918]],
  [0.571, [0.83, 0.929, 0.915]],
  [0.573, [0.83, 0.929, 0.915]],
  [0.575, [0.823, 0.928, 0.913]],
  [0.577, [0.823, 0.928, 0.913]],
  [0.579, [0.816, 0.926, 0.91]],
  [0.581, [0.816, 0.926, 0.91]],
  [0.583, [0.809, 0.924, 0.908]],
  [0.585, [0.809, 0.924, 0.908]],
  [0.587, [0.802, 0.923, 0.905]],
  [0.589, [0.802, 0.923, 0.905]],
  [0.591, [0.795, 0.921, 0.903]],
  [0.593, [0.795, 0.921, 0.903]],
  [0.595, [0.787, 0.919, 0.9]],
  [0.597, [0.787, 0.919, 0.9]],
  [0.599, [0.78, 0.918, 0.898]],
  [0.601, [0.78, 0.918, 0.898]],
  [0.603, [0.769, 0.913, 0.893]],
  [0.605, [0.769, 0.913, 0.893]],
  [0.607, [0.759, 0.909, 0.887]],
  [0.609, [0.759, 0.909, 0.887]],
  [0.611, [0.748, 0.904, 0.881]],
  [0.613, [0.748, 0.904, 0.881]],
  [0.614, [0.737, 0.9, 0.876]],
  [0.616, [0.737, 0.9, 0.876]],
  [0.618, [0.726, 0.895, 0.87]],
  [0.62, [0.726, 0.895, 0.87]],
  [0.622, [0.715, 0.891, 0.865]],
  [0.624, [0.715, 0.891, 0.865]],
  [0.626, [0.704, 0.886, 0.859]],
  [0.628, [0.704, 0.886, 0.859]],
  [0.63, [0.693, 0.882, 0.854]],
  [0.632, [0.693, 0.882, 0.854]],
  [0.634, [0.682, 0.878, 0.848]],
  [0.636, [0.682, 0.878, 0.848]],
  [0.638, [0.671, 0.873, 0.843]],
  [0.64, [0.671, 0.873, 0.843]],
  [0.642, [0.66, 0.869, 0.837]],
  [0.644, [0.66, 0.869, 0.837]],
  [0.646, [0.649, 0.864, 0.832]],
  [0.648, [0.649, 0.864, 0.832]],
  [0.65, [0.638, 0.86, 0.826]],
  [0.652, [0.638, 0.86, 0.826]],
  [0.654, [0.628, 0.855, 0.821]],
  [0.656, [0.628, 0.855, 0.821]],
  [0.658, [0.617, 0.851, 0.815]],
  [0.659, [0.617, 0.851, 0.815]],
  [0.661, [0.606, 0.846, 0.809]],
  [0.663, [0.606, 0.846, 0.809]],
  [0.665, [0.595, 0.842, 0.804]],
  [0.667, [0.595, 0.842, 0.804]],
  [0.669, [0.584, 0.837, 0.798]],
  [0.671, [0.584, 0.837, 0.798]],
  [0.673, [0.573, 0.833, 0.793]],
  [0.675, [0.573, 0.833, 0.793]],
  [0.677, [0.562, 0.828, 0.787]],
  [0.679, [0.562, 0.828, 0.787]],
  [0.681, [0.551, 0.824, 0.782]],
  [0.683, [0.551, 0.824, 0.782]],
  [0.685, [0.54, 0.82, 0.776]],
  [0.687, [0.54, 0.82, 0.776]],
  [0.689, [0.529, 0.815, 0.771]],
  [0.691, [0.529, 0.815, 0.771]],
  [0.693, [0.518, 0.811, 0.765]],
  [0.695, [0.518, 0.811, 0.765]],
  [0.697, [0.507, 0.806, 0.76]],
  [0.699, [0.507, 0.806, 0.76]],
  [0.701, [0.496, 0.8, 0.753]],
  [0.703, [0.496, 0.8, 0.753]],
  [0.705, [0.485, 0.791, 0.745]],
  [0.706, [0.485, 0.791, 0.745]],
  [0.708, [0.473, 0.783, 0.738]],
  [0.71, [0.473, 0.783, 0.738]],
  [0.712, [0.462, 0.775, 0.73]],
  [0.714, [0.462, 0.775, 0.73]],
  [0.716, [0.45, 0.767, 0.722]],
  [0.718, [0.45, 0.767, 0.722]],
  [0.72, [0.439, 0.758, 0.715]],
  [0.722, [0.439, 0.758, 0.715]],
  [0.724, [0.427, 0.75, 0.707]],
  [0.726, [0.427, 0.75, 0.707]],
  [0.728, [0.415, 0.742, 0.699]],
  [0.73, [0.415, 0.742, 0.699]],
  [0.732, [0.404, 0.733, 0.692]],
  [0.734, [0.404, 0.733, 0.692]],
  [0.736, [0.392, 0.725, 0.684]],
  [0.738, [0.392, 0.725, 0.684]],
  [0.74, [0.381, 0.717, 0.676]],
  [0.742, [0.381, 0.717, 0.676]],
  [0.744, [0.369, 0.708, 0.668]],
  [0.746, [0.369, 0.708, 0.668]],
  [0.748, [0.358, 0.7, 0.661]],
  [0.75, [0.358, 0.7, 0.661]],
  [0.751, [0.346, 0.692, 0.653]],
  [0.753, [0.346, 0.692, 0.653]],
  [0.755, [0.335, 0.684, 0.645]],
  [0.757, [0.335, 0.684, 0.645]],
  [0.759, [0.323, 0.675, 0.638]],
  [0.761, [0.323, 0.675, 0.638]],
  [0.763, [0.312, 0.667, 0.63]],
  [0.765, [0.312, 0.667, 0.63]],
  [0.767, [0.3, 0.659, 0.622]],
  [0.769, [0.3, 0.659, 0.622]],
  [0.771, [0.289, 0.65, 0.615]],
  [0.773, [0.289, 0.65, 0.615]],
  [0.775, [0.277, 0.642, 0.607]],
  [0.777, [0.277, 0.642, 0.607]],
  [0.779, [0.266, 0.634, 0.599]],
  [0.781, [0.266, 0.634, 0.599]],
  [0.783, [0.254, 0.625, 0.592]],
  [0.785, [0.254, 0.625, 0.592]],
  [0.787, [0.242, 0.617, 0.584]],
  [0.789, [0.242, 0.617, 0.584]],
  [0.791, [0.231, 0.609, 0.576]],
  [0.793, [0.231, 0.609, 0.576]],
  [0.795, [0.219, 0.6, 0.568]],
  [0.796, [0.219, 0.6, 0.568]],
  [0.798, [0.208, 0.592, 0.561]],
  [0.8, [0.208, 0.592, 0.561]],
  [0.802, [0.2, 0.585, 0.553]],
  [0.804, [0.2, 0.585, 0.553]],
  [0.806, [0.192, 0.577, 0.546]],
  [0.808, [0.192, 0.577, 0.546]],
  [0.81, [0.184, 0.57, 0.538]],
  [0.812, [0.184, 0.57, 0.538]],
  [0.814, [0.176, 0.562, 0.531]],
  [0.816, [0.176, 0.562, 0.531]],
  [0.818, [0.168, 0.554, 0.523]],
  [0.82, [0.168, 0.554, 0.523]],
  [0.822, [0.16, 0.547, 0.516]],
  [0.824, [0.16, 0.547, 0.516]],
  [0.826, [0.152, 0.539, 0.508]],
  [0.828, [0.152, 0.539, 0.508]],
  [0.83, [0.144, 0.532, 0.5]],
  [0.832, [0.144, 0.532, 0.5]],
  [0.834, [0.136, 0.524, 0.493]],
  [0.836, [0.136, 0.524, 0.493]],
  [0.838, [0.128, 0.517, 0.485]],
  [0.84, [0.128, 0.517, 0.485]],
  [0.841, [0.12, 0.509, 0.478]],
  [0.843, [0.12, 0.509, 0.478]],
  [0.845, [0.112, 0.502, 0.47]],
  [0.847, [0.112, 0.502, 0.47]],
  [0.849, [0.104, 0.494, 0.463]],
  [0.851, [0.104, 0.494, 0.463]],
  [0.853, [0.096, 0.487, 0.455]],
  [0.855, [0.096, 0.487, 0.455]],
  [0.857, [0.088, 0.479, 0.448]],
  [0.859, [0.088, 0.479, 0.448]],
  [0.861, [0.08, 0.472, 0.44]],
  [0.863, [0.08, 0.472, 0.44]],
  [0.865, [0.072, 0.464, 0.433]],
  [0.867, [0.072, 0.464, 0.433]],
  [0.869, [0.064, 0.457, 0.425]],
  [0.871, [0.064, 0.457, 0.425]],
  [0.873, [0.056, 0.449, 0.418]],
  [0.875, [0.056, 0.449, 0.418]],
  [0.877, [0.048, 0.441, 0.41]],
  [0.879, [0.048, 0.441, 0.41]],
  [0.881, [0.04, 0.434, 0.403]],
  [0.883, [0.04, 0.434, 0.403]],
  [0.885, [0.032, 0.426, 0.395]],
  [0.886, [0.032, 0.426, 0.395]],
  [0.888, [0.024, 0.419, 0.387]],
  [0.89, [0.024, 0.419, 0.387]],
  [0.892, [0.016, 0.411, 0.38]],
  [0.894, [0.016, 0.411, 0.38]],
  [0.896, [8e-3, 0.404, 0.372]],
  [0.898, [8e-3, 0.404, 0.372]],
  [0.9, [4e-3, 0.397, 0.365]],
  [0.902, [4e-3, 0.397, 0.365]],
  [0.904, [4e-3, 0.39, 0.358]],
  [0.906, [4e-3, 0.39, 0.358]],
  [0.908, [4e-3, 0.384, 0.351]],
  [0.91, [4e-3, 0.384, 0.351]],
  [0.912, [3e-3, 0.377, 0.344]],
  [0.914, [3e-3, 0.377, 0.344]],
  [0.916, [3e-3, 0.371, 0.337]],
  [0.918, [3e-3, 0.371, 0.337]],
  [0.92, [3e-3, 0.364, 0.33]],
  [0.922, [3e-3, 0.364, 0.33]],
  [0.924, [3e-3, 0.358, 0.323]],
  [0.926, [3e-3, 0.358, 0.323]],
  [0.928, [3e-3, 0.352, 0.316]],
  [0.93, [3e-3, 0.352, 0.316]],
  [0.932, [3e-3, 0.345, 0.308]],
  [0.933, [3e-3, 0.345, 0.308]],
  [0.935, [2e-3, 0.339, 0.301]],
  [0.937, [2e-3, 0.339, 0.301]],
  [0.939, [2e-3, 0.332, 0.294]],
  [0.941, [2e-3, 0.332, 0.294]],
  [0.943, [2e-3, 0.326, 0.287]],
  [0.945, [2e-3, 0.326, 0.287]],
  [0.947, [2e-3, 0.319, 0.28]],
  [0.949, [2e-3, 0.319, 0.28]],
  [0.951, [2e-3, 0.313, 0.273]],
  [0.953, [2e-3, 0.313, 0.273]],
  [0.955, [2e-3, 0.306, 0.266]],
  [0.957, [2e-3, 0.306, 0.266]],
  [0.959, [2e-3, 0.3, 0.259]],
  [0.961, [2e-3, 0.3, 0.259]],
  [0.963, [1e-3, 0.293, 0.252]],
  [0.965, [1e-3, 0.293, 0.252]],
  [0.967, [1e-3, 0.287, 0.245]],
  [0.969, [1e-3, 0.287, 0.245]],
  [0.971, [1e-3, 0.281, 0.238]],
  [0.973, [1e-3, 0.281, 0.238]],
  [0.975, [1e-3, 0.274, 0.231]],
  [0.977, [1e-3, 0.274, 0.231]],
  [0.978, [1e-3, 0.268, 0.224]],
  [0.98, [1e-3, 0.268, 0.224]],
  [0.982, [1e-3, 0.261, 0.217]],
  [0.984, [1e-3, 0.261, 0.217]],
  [0.986, [0, 0.255, 0.209]],
  [0.988, [0, 0.255, 0.209]],
  [0.99, [0, 0.248, 0.202]],
  [0.992, [0, 0.248, 0.202]],
  [0.994, [0, 0.242, 0.195]],
  [0.996, [0, 0.242, 0.195]],
  [0.998, [0, 0.235, 0.188]],
  [1, [0, 0.235, 0.188]]
], kf = [
  [0, [0.251, 0, 0.294]],
  [2e-3, [0.251, 0, 0.294]],
  [4e-3, [0.259, 6e-3, 0.303]],
  [6e-3, [0.259, 6e-3, 0.303]],
  [8e-3, [0.268, 0.013, 0.311]],
  [0.01, [0.268, 0.013, 0.311]],
  [0.012, [0.276, 0.019, 0.32]],
  [0.014, [0.276, 0.019, 0.32]],
  [0.016, [0.284, 0.026, 0.329]],
  [0.018, [0.284, 0.026, 0.329]],
  [0.02, [0.293, 0.032, 0.337]],
  [0.022, [0.293, 0.032, 0.337]],
  [0.023, [0.301, 0.039, 0.346]],
  [0.025, [0.301, 0.039, 0.346]],
  [0.027, [0.309, 0.045, 0.354]],
  [0.029, [0.309, 0.045, 0.354]],
  [0.031, [0.317, 0.052, 0.363]],
  [0.033, [0.317, 0.052, 0.363]],
  [0.035, [0.326, 0.058, 0.372]],
  [0.037, [0.326, 0.058, 0.372]],
  [0.039, [0.334, 0.065, 0.38]],
  [0.041, [0.334, 0.065, 0.38]],
  [0.043, [0.342, 0.071, 0.389]],
  [0.045, [0.342, 0.071, 0.389]],
  [0.047, [0.351, 0.078, 0.397]],
  [0.049, [0.351, 0.078, 0.397]],
  [0.051, [0.359, 0.084, 0.406]],
  [0.053, [0.359, 0.084, 0.406]],
  [0.055, [0.367, 0.09, 0.415]],
  [0.057, [0.367, 0.09, 0.415]],
  [0.059, [0.376, 0.097, 0.423]],
  [0.061, [0.376, 0.097, 0.423]],
  [0.063, [0.384, 0.103, 0.432]],
  [0.065, [0.384, 0.103, 0.432]],
  [0.067, [0.392, 0.11, 0.441]],
  [0.068, [0.392, 0.11, 0.441]],
  [0.07, [0.4, 0.116, 0.449]],
  [0.072, [0.4, 0.116, 0.449]],
  [0.074, [0.409, 0.123, 0.458]],
  [0.076, [0.409, 0.123, 0.458]],
  [0.078, [0.417, 0.129, 0.466]],
  [0.08, [0.417, 0.129, 0.466]],
  [0.082, [0.425, 0.136, 0.475]],
  [0.084, [0.425, 0.136, 0.475]],
  [0.086, [0.434, 0.142, 0.484]],
  [0.088, [0.434, 0.142, 0.484]],
  [0.09, [0.442, 0.149, 0.492]],
  [0.092, [0.442, 0.149, 0.492]],
  [0.094, [0.45, 0.155, 0.501]],
  [0.096, [0.45, 0.155, 0.501]],
  [0.098, [0.459, 0.161, 0.509]],
  [0.1, [0.459, 0.161, 0.509]],
  [0.102, [0.465, 0.17, 0.517]],
  [0.104, [0.465, 0.17, 0.517]],
  [0.106, [0.471, 0.181, 0.523]],
  [0.108, [0.471, 0.181, 0.523]],
  [0.11, [0.476, 0.192, 0.529]],
  [0.112, [0.476, 0.192, 0.529]],
  [0.114, [0.482, 0.202, 0.535]],
  [0.115, [0.482, 0.202, 0.535]],
  [0.117, [0.487, 0.213, 0.541]],
  [0.119, [0.487, 0.213, 0.541]],
  [0.121, [0.492, 0.224, 0.548]],
  [0.123, [0.492, 0.224, 0.548]],
  [0.125, [0.498, 0.235, 0.554]],
  [0.127, [0.498, 0.235, 0.554]],
  [0.129, [0.503, 0.245, 0.56]],
  [0.131, [0.503, 0.245, 0.56]],
  [0.133, [0.508, 0.256, 0.566]],
  [0.135, [0.508, 0.256, 0.566]],
  [0.137, [0.514, 0.267, 0.572]],
  [0.139, [0.514, 0.267, 0.572]],
  [0.141, [0.519, 0.278, 0.578]],
  [0.143, [0.519, 0.278, 0.578]],
  [0.145, [0.525, 0.289, 0.584]],
  [0.147, [0.525, 0.289, 0.584]],
  [0.149, [0.53, 0.299, 0.591]],
  [0.151, [0.53, 0.299, 0.591]],
  [0.153, [0.535, 0.31, 0.597]],
  [0.155, [0.535, 0.31, 0.597]],
  [0.157, [0.541, 0.321, 0.603]],
  [0.159, [0.541, 0.321, 0.603]],
  [0.16, [0.546, 0.332, 0.609]],
  [0.162, [0.546, 0.332, 0.609]],
  [0.164, [0.552, 0.342, 0.615]],
  [0.166, [0.552, 0.342, 0.615]],
  [0.168, [0.557, 0.353, 0.621]],
  [0.17, [0.557, 0.353, 0.621]],
  [0.172, [0.562, 0.364, 0.628]],
  [0.174, [0.562, 0.364, 0.628]],
  [0.176, [0.568, 0.375, 0.634]],
  [0.178, [0.568, 0.375, 0.634]],
  [0.18, [0.573, 0.385, 0.64]],
  [0.182, [0.573, 0.385, 0.64]],
  [0.184, [0.578, 0.396, 0.646]],
  [0.186, [0.578, 0.396, 0.646]],
  [0.188, [0.584, 0.407, 0.652]],
  [0.19, [0.584, 0.407, 0.652]],
  [0.192, [0.589, 0.418, 0.658]],
  [0.194, [0.589, 0.418, 0.658]],
  [0.196, [0.595, 0.428, 0.664]],
  [0.198, [0.595, 0.428, 0.664]],
  [0.2, [0.6, 0.439, 0.671]],
  [0.202, [0.6, 0.439, 0.671]],
  [0.204, [0.606, 0.447, 0.676]],
  [0.205, [0.606, 0.447, 0.676]],
  [0.207, [0.613, 0.456, 0.682]],
  [0.209, [0.613, 0.456, 0.682]],
  [0.211, [0.619, 0.464, 0.687]],
  [0.213, [0.619, 0.464, 0.687]],
  [0.215, [0.625, 0.472, 0.693]],
  [0.217, [0.625, 0.472, 0.693]],
  [0.219, [0.632, 0.48, 0.698]],
  [0.221, [0.632, 0.48, 0.698]],
  [0.223, [0.638, 0.488, 0.704]],
  [0.225, [0.638, 0.488, 0.704]],
  [0.227, [0.644, 0.496, 0.709]],
  [0.229, [0.644, 0.496, 0.709]],
  [0.231, [0.65, 0.504, 0.715]],
  [0.233, [0.65, 0.504, 0.715]],
  [0.235, [0.657, 0.513, 0.72]],
  [0.237, [0.657, 0.513, 0.72]],
  [0.239, [0.663, 0.521, 0.726]],
  [0.241, [0.663, 0.521, 0.726]],
  [0.243, [0.669, 0.529, 0.731]],
  [0.245, [0.669, 0.529, 0.731]],
  [0.247, [0.676, 0.537, 0.737]],
  [0.249, [0.676, 0.537, 0.737]],
  [0.25, [0.682, 0.545, 0.743]],
  [0.252, [0.682, 0.545, 0.743]],
  [0.254, [0.688, 0.553, 0.748]],
  [0.256, [0.688, 0.553, 0.748]],
  [0.258, [0.695, 0.561, 0.754]],
  [0.26, [0.695, 0.561, 0.754]],
  [0.262, [0.701, 0.57, 0.759]],
  [0.264, [0.701, 0.57, 0.759]],
  [0.266, [0.707, 0.578, 0.765]],
  [0.268, [0.707, 0.578, 0.765]],
  [0.27, [0.713, 0.586, 0.77]],
  [0.272, [0.713, 0.586, 0.77]],
  [0.274, [0.72, 0.594, 0.776]],
  [0.276, [0.72, 0.594, 0.776]],
  [0.278, [0.726, 0.602, 0.781]],
  [0.28, [0.726, 0.602, 0.781]],
  [0.282, [0.732, 0.61, 0.787]],
  [0.284, [0.732, 0.61, 0.787]],
  [0.286, [0.739, 0.619, 0.792]],
  [0.288, [0.739, 0.619, 0.792]],
  [0.29, [0.745, 0.627, 0.798]],
  [0.292, [0.745, 0.627, 0.798]],
  [0.294, [0.751, 0.635, 0.803]],
  [0.295, [0.751, 0.635, 0.803]],
  [0.297, [0.758, 0.643, 0.809]],
  [0.299, [0.758, 0.643, 0.809]],
  [0.301, [0.764, 0.651, 0.814]],
  [0.303, [0.764, 0.651, 0.814]],
  [0.305, [0.769, 0.658, 0.818]],
  [0.307, [0.769, 0.658, 0.818]],
  [0.309, [0.775, 0.665, 0.821]],
  [0.311, [0.775, 0.665, 0.821]],
  [0.313, [0.781, 0.672, 0.825]],
  [0.315, [0.781, 0.672, 0.825]],
  [0.317, [0.786, 0.68, 0.829]],
  [0.319, [0.786, 0.68, 0.829]],
  [0.321, [0.792, 0.687, 0.833]],
  [0.323, [0.792, 0.687, 0.833]],
  [0.325, [0.798, 0.694, 0.837]],
  [0.327, [0.798, 0.694, 0.837]],
  [0.329, [0.803, 0.701, 0.841]],
  [0.331, [0.803, 0.701, 0.841]],
  [0.333, [0.809, 0.708, 0.844]],
  [0.335, [0.809, 0.708, 0.844]],
  [0.337, [0.815, 0.716, 0.848]],
  [0.339, [0.815, 0.716, 0.848]],
  [0.341, [0.821, 0.723, 0.852]],
  [0.342, [0.821, 0.723, 0.852]],
  [0.344, [0.826, 0.73, 0.856]],
  [0.346, [0.826, 0.73, 0.856]],
  [0.348, [0.832, 0.737, 0.86]],
  [0.35, [0.832, 0.737, 0.86]],
  [0.352, [0.838, 0.745, 0.864]],
  [0.354, [0.838, 0.745, 0.864]],
  [0.356, [0.843, 0.752, 0.868]],
  [0.358, [0.843, 0.752, 0.868]],
  [0.36, [0.849, 0.759, 0.871]],
  [0.362, [0.849, 0.759, 0.871]],
  [0.364, [0.855, 0.766, 0.875]],
  [0.366, [0.855, 0.766, 0.875]],
  [0.368, [0.86, 0.774, 0.879]],
  [0.37, [0.86, 0.774, 0.879]],
  [0.372, [0.866, 0.781, 0.883]],
  [0.374, [0.866, 0.781, 0.883]],
  [0.376, [0.872, 0.788, 0.887]],
  [0.378, [0.872, 0.788, 0.887]],
  [0.38, [0.877, 0.795, 0.891]],
  [0.382, [0.877, 0.795, 0.891]],
  [0.384, [0.883, 0.802, 0.894]],
  [0.386, [0.883, 0.802, 0.894]],
  [0.387, [0.889, 0.81, 0.898]],
  [0.389, [0.889, 0.81, 0.898]],
  [0.391, [0.895, 0.817, 0.902]],
  [0.393, [0.895, 0.817, 0.902]],
  [0.395, [0.9, 0.824, 0.906]],
  [0.397, [0.9, 0.824, 0.906]],
  [0.399, [0.906, 0.831, 0.91]],
  [0.401, [0.906, 0.831, 0.91]],
  [0.403, [0.908, 0.837, 0.912]],
  [0.405, [0.908, 0.837, 0.912]],
  [0.407, [0.911, 0.842, 0.914]],
  [0.409, [0.911, 0.842, 0.914]],
  [0.411, [0.913, 0.848, 0.917]],
  [0.413, [0.913, 0.848, 0.917]],
  [0.415, [0.916, 0.853, 0.919]],
  [0.417, [0.916, 0.853, 0.919]],
  [0.419, [0.918, 0.858, 0.921]],
  [0.421, [0.918, 0.858, 0.921]],
  [0.423, [0.921, 0.864, 0.924]],
  [0.425, [0.921, 0.864, 0.924]],
  [0.427, [0.923, 0.869, 0.926]],
  [0.429, [0.923, 0.869, 0.926]],
  [0.431, [0.926, 0.874, 0.928]],
  [0.432, [0.926, 0.874, 0.928]],
  [0.434, [0.928, 0.88, 0.931]],
  [0.436, [0.928, 0.88, 0.931]],
  [0.438, [0.93, 0.885, 0.933]],
  [0.44, [0.93, 0.885, 0.933]],
  [0.442, [0.933, 0.891, 0.935]],
  [0.444, [0.933, 0.891, 0.935]],
  [0.446, [0.935, 0.896, 0.937]],
  [0.448, [0.935, 0.896, 0.937]],
  [0.45, [0.938, 0.901, 0.94]],
  [0.452, [0.938, 0.901, 0.94]],
  [0.454, [0.94, 0.907, 0.942]],
  [0.456, [0.94, 0.907, 0.942]],
  [0.458, [0.943, 0.912, 0.944]],
  [0.46, [0.943, 0.912, 0.944]],
  [0.462, [0.945, 0.917, 0.947]],
  [0.464, [0.945, 0.917, 0.947]],
  [0.466, [0.948, 0.923, 0.949]],
  [0.468, [0.948, 0.923, 0.949]],
  [0.47, [0.95, 0.928, 0.951]],
  [0.472, [0.95, 0.928, 0.951]],
  [0.474, [0.953, 0.934, 0.954]],
  [0.476, [0.953, 0.934, 0.954]],
  [0.477, [0.955, 0.939, 0.956]],
  [0.479, [0.955, 0.939, 0.956]],
  [0.481, [0.958, 0.944, 0.958]],
  [0.483, [0.958, 0.944, 0.958]],
  [0.485, [0.96, 0.95, 0.961]],
  [0.487, [0.96, 0.95, 0.961]],
  [0.489, [0.962, 0.955, 0.963]],
  [0.491, [0.962, 0.955, 0.963]],
  [0.493, [0.965, 0.961, 0.965]],
  [0.495, [0.965, 0.961, 0.965]],
  [0.497, [0.967, 0.966, 0.967]],
  [0.499, [0.967, 0.966, 0.967]],
  [0.501, [0.966, 0.968, 0.966]],
  [0.503, [0.966, 0.968, 0.966]],
  [0.505, [0.962, 0.967, 0.96]],
  [0.507, [0.962, 0.967, 0.96]],
  [0.509, [0.957, 0.966, 0.955]],
  [0.511, [0.957, 0.966, 0.955]],
  [0.513, [0.952, 0.965, 0.949]],
  [0.515, [0.952, 0.965, 0.949]],
  [0.517, [0.948, 0.964, 0.944]],
  [0.519, [0.948, 0.964, 0.944]],
  [0.521, [0.943, 0.963, 0.938]],
  [0.523, [0.943, 0.963, 0.938]],
  [0.524, [0.939, 0.962, 0.933]],
  [0.526, [0.939, 0.962, 0.933]],
  [0.528, [0.934, 0.961, 0.927]],
  [0.53, [0.934, 0.961, 0.927]],
  [0.532, [0.929, 0.959, 0.922]],
  [0.534, [0.929, 0.959, 0.922]],
  [0.536, [0.925, 0.958, 0.916]],
  [0.538, [0.925, 0.958, 0.916]],
  [0.54, [0.92, 0.957, 0.91]],
  [0.542, [0.92, 0.957, 0.91]],
  [0.544, [0.916, 0.956, 0.905]],
  [0.546, [0.916, 0.956, 0.905]],
  [0.548, [0.911, 0.955, 0.899]],
  [0.55, [0.911, 0.955, 0.899]],
  [0.552, [0.906, 0.954, 0.894]],
  [0.554, [0.906, 0.954, 0.894]],
  [0.556, [0.902, 0.953, 0.888]],
  [0.558, [0.902, 0.953, 0.888]],
  [0.56, [0.897, 0.952, 0.883]],
  [0.562, [0.897, 0.952, 0.883]],
  [0.564, [0.893, 0.951, 0.877]],
  [0.566, [0.893, 0.951, 0.877]],
  [0.568, [0.888, 0.95, 0.872]],
  [0.569, [0.888, 0.95, 0.872]],
  [0.571, [0.883, 0.949, 0.866]],
  [0.573, [0.883, 0.949, 0.866]],
  [0.575, [0.879, 0.948, 0.861]],
  [0.577, [0.879, 0.948, 0.861]],
  [0.579, [0.874, 0.947, 0.855]],
  [0.581, [0.874, 0.947, 0.855]],
  [0.583, [0.869, 0.945, 0.85]],
  [0.585, [0.869, 0.945, 0.85]],
  [0.587, [0.865, 0.944, 0.844]],
  [0.589, [0.865, 0.944, 0.844]],
  [0.591, [0.86, 0.943, 0.839]],
  [0.593, [0.86, 0.943, 0.839]],
  [0.595, [0.856, 0.942, 0.833]],
  [0.597, [0.856, 0.942, 0.833]],
  [0.599, [0.851, 0.941, 0.827]],
  [0.601, [0.851, 0.941, 0.827]],
  [0.603, [0.843, 0.938, 0.82]],
  [0.605, [0.843, 0.938, 0.82]],
  [0.607, [0.835, 0.935, 0.812]],
  [0.609, [0.835, 0.935, 0.812]],
  [0.611, [0.827, 0.931, 0.804]],
  [0.613, [0.827, 0.931, 0.804]],
  [0.614, [0.82, 0.928, 0.796]],
  [0.616, [0.82, 0.928, 0.796]],
  [0.618, [0.812, 0.925, 0.788]],
  [0.62, [0.812, 0.925, 0.788]],
  [0.622, [0.804, 0.922, 0.78]],
  [0.624, [0.804, 0.922, 0.78]],
  [0.626, [0.796, 0.919, 0.773]],
  [0.628, [0.796, 0.919, 0.773]],
  [0.63, [0.788, 0.915, 0.765]],
  [0.632, [0.788, 0.915, 0.765]],
  [0.634, [0.78, 0.912, 0.757]],
  [0.636, [0.78, 0.912, 0.757]],
  [0.638, [0.773, 0.909, 0.749]],
  [0.64, [0.773, 0.909, 0.749]],
  [0.642, [0.765, 0.906, 0.741]],
  [0.644, [0.765, 0.906, 0.741]],
  [0.646, [0.757, 0.902, 0.733]],
  [0.648, [0.757, 0.902, 0.733]],
  [0.65, [0.749, 0.899, 0.725]],
  [0.652, [0.749, 0.899, 0.725]],
  [0.654, [0.741, 0.896, 0.718]],
  [0.656, [0.741, 0.896, 0.718]],
  [0.658, [0.733, 0.893, 0.71]],
  [0.659, [0.733, 0.893, 0.71]],
  [0.661, [0.725, 0.89, 0.702]],
  [0.663, [0.725, 0.89, 0.702]],
  [0.665, [0.718, 0.886, 0.694]],
  [0.667, [0.718, 0.886, 0.694]],
  [0.669, [0.71, 0.883, 0.686]],
  [0.671, [0.71, 0.883, 0.686]],
  [0.673, [0.702, 0.88, 0.678]],
  [0.675, [0.702, 0.88, 0.678]],
  [0.677, [0.694, 0.877, 0.671]],
  [0.679, [0.694, 0.877, 0.671]],
  [0.681, [0.686, 0.873, 0.663]],
  [0.683, [0.686, 0.873, 0.663]],
  [0.685, [0.678, 0.87, 0.655]],
  [0.687, [0.678, 0.87, 0.655]],
  [0.689, [0.671, 0.867, 0.647]],
  [0.691, [0.671, 0.867, 0.647]],
  [0.693, [0.663, 0.864, 0.639]],
  [0.695, [0.663, 0.864, 0.639]],
  [0.697, [0.655, 0.86, 0.631]],
  [0.699, [0.655, 0.86, 0.631]],
  [0.701, [0.645, 0.855, 0.623]],
  [0.703, [0.645, 0.855, 0.623]],
  [0.705, [0.633, 0.848, 0.613]],
  [0.706, [0.633, 0.848, 0.613]],
  [0.708, [0.622, 0.842, 0.603]],
  [0.71, [0.622, 0.842, 0.603]],
  [0.712, [0.61, 0.835, 0.594]],
  [0.714, [0.61, 0.835, 0.594]],
  [0.716, [0.598, 0.828, 0.584]],
  [0.718, [0.598, 0.828, 0.584]],
  [0.72, [0.587, 0.821, 0.574]],
  [0.722, [0.587, 0.821, 0.574]],
  [0.724, [0.575, 0.814, 0.564]],
  [0.726, [0.575, 0.814, 0.564]],
  [0.728, [0.563, 0.807, 0.555]],
  [0.73, [0.563, 0.807, 0.555]],
  [0.732, [0.552, 0.8, 0.545]],
  [0.734, [0.552, 0.8, 0.545]],
  [0.736, [0.54, 0.793, 0.535]],
  [0.738, [0.54, 0.793, 0.535]],
  [0.74, [0.528, 0.786, 0.526]],
  [0.742, [0.528, 0.786, 0.526]],
  [0.744, [0.517, 0.779, 0.516]],
  [0.746, [0.517, 0.779, 0.516]],
  [0.748, [0.505, 0.772, 0.506]],
  [0.75, [0.505, 0.772, 0.506]],
  [0.751, [0.493, 0.765, 0.497]],
  [0.753, [0.493, 0.765, 0.497]],
  [0.755, [0.482, 0.758, 0.487]],
  [0.757, [0.482, 0.758, 0.487]],
  [0.759, [0.47, 0.752, 0.477]],
  [0.761, [0.47, 0.752, 0.477]],
  [0.763, [0.458, 0.745, 0.468]],
  [0.765, [0.458, 0.745, 0.468]],
  [0.767, [0.446, 0.738, 0.458]],
  [0.769, [0.446, 0.738, 0.458]],
  [0.771, [0.435, 0.731, 0.448]],
  [0.773, [0.435, 0.731, 0.448]],
  [0.775, [0.423, 0.724, 0.439]],
  [0.777, [0.423, 0.724, 0.439]],
  [0.779, [0.411, 0.717, 0.429]],
  [0.781, [0.411, 0.717, 0.429]],
  [0.783, [0.4, 0.71, 0.419]],
  [0.785, [0.4, 0.71, 0.419]],
  [0.787, [0.388, 0.703, 0.409]],
  [0.789, [0.388, 0.703, 0.409]],
  [0.791, [0.376, 0.696, 0.4]],
  [0.793, [0.376, 0.696, 0.4]],
  [0.795, [0.365, 0.689, 0.39]],
  [0.796, [0.365, 0.689, 0.39]],
  [0.798, [0.353, 0.682, 0.38]],
  [0.8, [0.353, 0.682, 0.38]],
  [0.802, [0.343, 0.674, 0.374]],
  [0.804, [0.343, 0.674, 0.374]],
  [0.806, [0.334, 0.666, 0.367]],
  [0.808, [0.334, 0.666, 0.367]],
  [0.81, [0.324, 0.657, 0.361]],
  [0.812, [0.324, 0.657, 0.361]],
  [0.814, [0.314, 0.649, 0.355]],
  [0.816, [0.314, 0.649, 0.355]],
  [0.818, [0.304, 0.641, 0.348]],
  [0.82, [0.304, 0.641, 0.348]],
  [0.822, [0.295, 0.633, 0.342]],
  [0.824, [0.295, 0.633, 0.342]],
  [0.826, [0.285, 0.624, 0.335]],
  [0.828, [0.285, 0.624, 0.335]],
  [0.83, [0.275, 0.616, 0.329]],
  [0.832, [0.275, 0.616, 0.329]],
  [0.834, [0.266, 0.608, 0.322]],
  [0.836, [0.266, 0.608, 0.322]],
  [0.838, [0.256, 0.599, 0.316]],
  [0.84, [0.256, 0.599, 0.316]],
  [0.841, [0.246, 0.591, 0.309]],
  [0.843, [0.246, 0.591, 0.309]],
  [0.845, [0.237, 0.583, 0.303]],
  [0.847, [0.237, 0.583, 0.303]],
  [0.849, [0.227, 0.574, 0.296]],
  [0.851, [0.227, 0.574, 0.296]],
  [0.853, [0.217, 0.566, 0.29]],
  [0.855, [0.217, 0.566, 0.29]],
  [0.857, [0.208, 0.558, 0.284]],
  [0.859, [0.208, 0.558, 0.284]],
  [0.861, [0.198, 0.549, 0.277]],
  [0.863, [0.198, 0.549, 0.277]],
  [0.865, [0.188, 0.541, 0.271]],
  [0.867, [0.188, 0.541, 0.271]],
  [0.869, [0.179, 0.533, 0.264]],
  [0.871, [0.179, 0.533, 0.264]],
  [0.873, [0.169, 0.525, 0.258]],
  [0.875, [0.169, 0.525, 0.258]],
  [0.877, [0.159, 0.516, 0.251]],
  [0.879, [0.159, 0.516, 0.251]],
  [0.881, [0.149, 0.508, 0.245]],
  [0.883, [0.149, 0.508, 0.245]],
  [0.885, [0.14, 0.5, 0.238]],
  [0.886, [0.14, 0.5, 0.238]],
  [0.888, [0.13, 0.491, 0.232]],
  [0.89, [0.13, 0.491, 0.232]],
  [0.892, [0.12, 0.483, 0.225]],
  [0.894, [0.12, 0.483, 0.225]],
  [0.896, [0.111, 0.475, 0.219]],
  [0.898, [0.111, 0.475, 0.219]],
  [0.9, [0.104, 0.467, 0.214]],
  [0.902, [0.104, 0.467, 0.214]],
  [0.904, [0.1, 0.459, 0.209]],
  [0.906, [0.1, 0.459, 0.209]],
  [0.908, [0.096, 0.451, 0.205]],
  [0.91, [0.096, 0.451, 0.205]],
  [0.912, [0.091, 0.443, 0.201]],
  [0.914, [0.091, 0.443, 0.201]],
  [0.916, [0.087, 0.435, 0.196]],
  [0.918, [0.087, 0.435, 0.196]],
  [0.92, [0.083, 0.427, 0.192]],
  [0.922, [0.083, 0.427, 0.192]],
  [0.924, [0.079, 0.419, 0.188]],
  [0.926, [0.079, 0.419, 0.188]],
  [0.928, [0.075, 0.411, 0.183]],
  [0.93, [0.075, 0.411, 0.183]],
  [0.932, [0.071, 0.403, 0.179]],
  [0.933, [0.071, 0.403, 0.179]],
  [0.935, [0.066, 0.395, 0.175]],
  [0.937, [0.066, 0.395, 0.175]],
  [0.939, [0.062, 0.387, 0.17]],
  [0.941, [0.062, 0.387, 0.17]],
  [0.943, [0.058, 0.379, 0.166]],
  [0.945, [0.058, 0.379, 0.166]],
  [0.947, [0.054, 0.371, 0.162]],
  [0.949, [0.054, 0.371, 0.162]],
  [0.951, [0.05, 0.363, 0.158]],
  [0.953, [0.05, 0.363, 0.158]],
  [0.955, [0.046, 0.355, 0.153]],
  [0.957, [0.046, 0.355, 0.153]],
  [0.959, [0.042, 0.347, 0.149]],
  [0.961, [0.042, 0.347, 0.149]],
  [0.963, [0.037, 0.339, 0.145]],
  [0.965, [0.037, 0.339, 0.145]],
  [0.967, [0.033, 0.331, 0.14]],
  [0.969, [0.033, 0.331, 0.14]],
  [0.971, [0.029, 0.323, 0.136]],
  [0.973, [0.029, 0.323, 0.136]],
  [0.975, [0.025, 0.315, 0.132]],
  [0.977, [0.025, 0.315, 0.132]],
  [0.978, [0.021, 0.307, 0.127]],
  [0.98, [0.021, 0.307, 0.127]],
  [0.982, [0.017, 0.299, 0.123]],
  [0.984, [0.017, 0.299, 0.123]],
  [0.986, [0.012, 0.291, 0.119]],
  [0.988, [0.012, 0.291, 0.119]],
  [0.99, [8e-3, 0.283, 0.114]],
  [0.992, [8e-3, 0.283, 0.114]],
  [0.994, [4e-3, 0.275, 0.11]],
  [0.996, [4e-3, 0.275, 0.11]],
  [0.998, [0, 0.267, 0.106]],
  [1, [0, 0.267, 0.106]]
], Bf = [
  [0, [0.557, 4e-3, 0.322]],
  [2e-3, [0.557, 4e-3, 0.322]],
  [4e-3, [0.565, 8e-3, 0.328]],
  [6e-3, [0.565, 8e-3, 0.328]],
  [8e-3, [0.574, 0.012, 0.335]],
  [0.01, [0.574, 0.012, 0.335]],
  [0.012, [0.582, 0.016, 0.341]],
  [0.014, [0.582, 0.016, 0.341]],
  [0.016, [0.591, 0.02, 0.348]],
  [0.018, [0.591, 0.02, 0.348]],
  [0.02, [0.599, 0.024, 0.355]],
  [0.022, [0.599, 0.024, 0.355]],
  [0.023, [0.608, 0.028, 0.361]],
  [0.025, [0.608, 0.028, 0.361]],
  [0.027, [0.616, 0.032, 0.368]],
  [0.029, [0.616, 0.032, 0.368]],
  [0.031, [0.625, 0.036, 0.374]],
  [0.033, [0.625, 0.036, 0.374]],
  [0.035, [0.633, 0.04, 0.381]],
  [0.037, [0.633, 0.04, 0.381]],
  [0.039, [0.641, 0.044, 0.388]],
  [0.041, [0.641, 0.044, 0.388]],
  [0.043, [0.65, 0.048, 0.394]],
  [0.045, [0.65, 0.048, 0.394]],
  [0.047, [0.658, 0.052, 0.401]],
  [0.049, [0.658, 0.052, 0.401]],
  [0.051, [0.667, 0.056, 0.408]],
  [0.053, [0.667, 0.056, 0.408]],
  [0.055, [0.675, 0.06, 0.414]],
  [0.057, [0.675, 0.06, 0.414]],
  [0.059, [0.684, 0.064, 0.421]],
  [0.061, [0.684, 0.064, 0.421]],
  [0.063, [0.692, 0.068, 0.427]],
  [0.065, [0.692, 0.068, 0.427]],
  [0.067, [0.701, 0.072, 0.434]],
  [0.068, [0.701, 0.072, 0.434]],
  [0.07, [0.709, 0.076, 0.441]],
  [0.072, [0.709, 0.076, 0.441]],
  [0.074, [0.718, 0.08, 0.447]],
  [0.076, [0.718, 0.08, 0.447]],
  [0.078, [0.726, 0.084, 0.454]],
  [0.08, [0.726, 0.084, 0.454]],
  [0.082, [0.734, 0.088, 0.46]],
  [0.084, [0.734, 0.088, 0.46]],
  [0.086, [0.743, 0.092, 0.467]],
  [0.088, [0.743, 0.092, 0.467]],
  [0.09, [0.751, 0.096, 0.474]],
  [0.092, [0.751, 0.096, 0.474]],
  [0.094, [0.76, 0.1, 0.48]],
  [0.096, [0.76, 0.1, 0.48]],
  [0.098, [0.768, 0.104, 0.487]],
  [0.1, [0.768, 0.104, 0.487]],
  [0.102, [0.774, 0.113, 0.494]],
  [0.104, [0.774, 0.113, 0.494]],
  [0.106, [0.778, 0.127, 0.501]],
  [0.108, [0.778, 0.127, 0.501]],
  [0.11, [0.782, 0.141, 0.509]],
  [0.112, [0.782, 0.141, 0.509]],
  [0.114, [0.786, 0.155, 0.517]],
  [0.115, [0.786, 0.155, 0.517]],
  [0.117, [0.79, 0.17, 0.524]],
  [0.119, [0.79, 0.17, 0.524]],
  [0.121, [0.794, 0.184, 0.532]],
  [0.123, [0.794, 0.184, 0.532]],
  [0.125, [0.798, 0.198, 0.539]],
  [0.127, [0.798, 0.198, 0.539]],
  [0.129, [0.801, 0.212, 0.547]],
  [0.131, [0.801, 0.212, 0.547]],
  [0.133, [0.805, 0.226, 0.554]],
  [0.135, [0.805, 0.226, 0.554]],
  [0.137, [0.809, 0.24, 0.562]],
  [0.139, [0.809, 0.24, 0.562]],
  [0.141, [0.813, 0.254, 0.569]],
  [0.143, [0.813, 0.254, 0.569]],
  [0.145, [0.817, 0.269, 0.577]],
  [0.147, [0.817, 0.269, 0.577]],
  [0.149, [0.821, 0.283, 0.584]],
  [0.151, [0.821, 0.283, 0.584]],
  [0.153, [0.824, 0.297, 0.592]],
  [0.155, [0.824, 0.297, 0.592]],
  [0.157, [0.828, 0.311, 0.599]],
  [0.159, [0.828, 0.311, 0.599]],
  [0.16, [0.832, 0.325, 0.607]],
  [0.162, [0.832, 0.325, 0.607]],
  [0.164, [0.836, 0.339, 0.615]],
  [0.166, [0.836, 0.339, 0.615]],
  [0.168, [0.84, 0.353, 0.622]],
  [0.17, [0.84, 0.353, 0.622]],
  [0.172, [0.844, 0.368, 0.63]],
  [0.174, [0.844, 0.368, 0.63]],
  [0.176, [0.848, 0.382, 0.637]],
  [0.178, [0.848, 0.382, 0.637]],
  [0.18, [0.851, 0.396, 0.645]],
  [0.182, [0.851, 0.396, 0.645]],
  [0.184, [0.855, 0.41, 0.652]],
  [0.186, [0.855, 0.41, 0.652]],
  [0.188, [0.859, 0.424, 0.66]],
  [0.19, [0.859, 0.424, 0.66]],
  [0.192, [0.863, 0.438, 0.667]],
  [0.194, [0.863, 0.438, 0.667]],
  [0.196, [0.867, 0.453, 0.675]],
  [0.198, [0.867, 0.453, 0.675]],
  [0.2, [0.871, 0.467, 0.682]],
  [0.202, [0.871, 0.467, 0.682]],
  [0.204, [0.874, 0.476, 0.689]],
  [0.205, [0.874, 0.476, 0.689]],
  [0.207, [0.876, 0.486, 0.696]],
  [0.209, [0.876, 0.486, 0.696]],
  [0.211, [0.879, 0.496, 0.703]],
  [0.213, [0.879, 0.496, 0.703]],
  [0.215, [0.882, 0.505, 0.709]],
  [0.217, [0.882, 0.505, 0.709]],
  [0.219, [0.885, 0.515, 0.716]],
  [0.221, [0.885, 0.515, 0.716]],
  [0.223, [0.888, 0.525, 0.723]],
  [0.225, [0.888, 0.525, 0.723]],
  [0.227, [0.891, 0.534, 0.73]],
  [0.229, [0.891, 0.534, 0.73]],
  [0.231, [0.894, 0.544, 0.736]],
  [0.233, [0.894, 0.544, 0.736]],
  [0.235, [0.897, 0.554, 0.743]],
  [0.237, [0.897, 0.554, 0.743]],
  [0.239, [0.9, 0.564, 0.75]],
  [0.241, [0.9, 0.564, 0.75]],
  [0.243, [0.903, 0.573, 0.757]],
  [0.245, [0.903, 0.573, 0.757]],
  [0.247, [0.906, 0.583, 0.764]],
  [0.249, [0.906, 0.583, 0.764]],
  [0.25, [0.909, 0.593, 0.77]],
  [0.252, [0.909, 0.593, 0.77]],
  [0.254, [0.911, 0.602, 0.777]],
  [0.256, [0.911, 0.602, 0.777]],
  [0.258, [0.914, 0.612, 0.784]],
  [0.26, [0.914, 0.612, 0.784]],
  [0.262, [0.917, 0.622, 0.791]],
  [0.264, [0.917, 0.622, 0.791]],
  [0.266, [0.92, 0.631, 0.797]],
  [0.268, [0.92, 0.631, 0.797]],
  [0.27, [0.923, 0.641, 0.804]],
  [0.272, [0.923, 0.641, 0.804]],
  [0.274, [0.926, 0.651, 0.811]],
  [0.276, [0.926, 0.651, 0.811]],
  [0.278, [0.929, 0.66, 0.818]],
  [0.28, [0.929, 0.66, 0.818]],
  [0.282, [0.932, 0.67, 0.824]],
  [0.284, [0.932, 0.67, 0.824]],
  [0.286, [0.935, 0.68, 0.831]],
  [0.288, [0.935, 0.68, 0.831]],
  [0.29, [0.938, 0.69, 0.838]],
  [0.292, [0.938, 0.69, 0.838]],
  [0.294, [0.941, 0.699, 0.845]],
  [0.295, [0.941, 0.699, 0.845]],
  [0.297, [0.944, 0.709, 0.852]],
  [0.299, [0.944, 0.709, 0.852]],
  [0.301, [0.946, 0.717, 0.857]],
  [0.303, [0.946, 0.717, 0.857]],
  [0.305, [0.948, 0.723, 0.86]],
  [0.307, [0.948, 0.723, 0.86]],
  [0.309, [0.95, 0.73, 0.863]],
  [0.311, [0.95, 0.73, 0.863]],
  [0.313, [0.952, 0.736, 0.866]],
  [0.315, [0.952, 0.736, 0.866]],
  [0.317, [0.953, 0.743, 0.869]],
  [0.319, [0.953, 0.743, 0.869]],
  [0.321, [0.955, 0.749, 0.873]],
  [0.323, [0.955, 0.749, 0.873]],
  [0.325, [0.957, 0.756, 0.876]],
  [0.327, [0.957, 0.756, 0.876]],
  [0.329, [0.959, 0.762, 0.879]],
  [0.331, [0.959, 0.762, 0.879]],
  [0.333, [0.961, 0.769, 0.882]],
  [0.335, [0.961, 0.769, 0.882]],
  [0.337, [0.963, 0.775, 0.886]],
  [0.339, [0.963, 0.775, 0.886]],
  [0.341, [0.964, 0.782, 0.889]],
  [0.342, [0.964, 0.782, 0.889]],
  [0.344, [0.966, 0.788, 0.892]],
  [0.346, [0.966, 0.788, 0.892]],
  [0.348, [0.968, 0.794, 0.895]],
  [0.35, [0.968, 0.794, 0.895]],
  [0.352, [0.97, 0.801, 0.899]],
  [0.354, [0.97, 0.801, 0.899]],
  [0.356, [0.972, 0.807, 0.902]],
  [0.358, [0.972, 0.807, 0.902]],
  [0.36, [0.974, 0.814, 0.905]],
  [0.362, [0.974, 0.814, 0.905]],
  [0.364, [0.976, 0.82, 0.908]],
  [0.366, [0.976, 0.82, 0.908]],
  [0.368, [0.977, 0.827, 0.911]],
  [0.37, [0.977, 0.827, 0.911]],
  [0.372, [0.979, 0.833, 0.915]],
  [0.374, [0.979, 0.833, 0.915]],
  [0.376, [0.981, 0.84, 0.918]],
  [0.378, [0.981, 0.84, 0.918]],
  [0.38, [0.983, 0.846, 0.921]],
  [0.382, [0.983, 0.846, 0.921]],
  [0.384, [0.985, 0.853, 0.924]],
  [0.386, [0.985, 0.853, 0.924]],
  [0.387, [0.987, 0.859, 0.928]],
  [0.389, [0.987, 0.859, 0.928]],
  [0.391, [0.988, 0.866, 0.931]],
  [0.393, [0.988, 0.866, 0.931]],
  [0.395, [0.99, 0.872, 0.934]],
  [0.397, [0.99, 0.872, 0.934]],
  [0.399, [0.992, 0.878, 0.937]],
  [0.401, [0.992, 0.878, 0.937]],
  [0.403, [0.991, 0.882, 0.938]],
  [0.405, [0.991, 0.882, 0.938]],
  [0.407, [0.99, 0.886, 0.94]],
  [0.409, [0.99, 0.886, 0.94]],
  [0.411, [0.989, 0.889, 0.941]],
  [0.413, [0.989, 0.889, 0.941]],
  [0.415, [0.988, 0.893, 0.942]],
  [0.417, [0.988, 0.893, 0.942]],
  [0.419, [0.988, 0.896, 0.943]],
  [0.421, [0.988, 0.896, 0.943]],
  [0.423, [0.987, 0.9, 0.945]],
  [0.425, [0.987, 0.9, 0.945]],
  [0.427, [0.986, 0.903, 0.946]],
  [0.429, [0.986, 0.903, 0.946]],
  [0.431, [0.985, 0.907, 0.947]],
  [0.432, [0.985, 0.907, 0.947]],
  [0.434, [0.984, 0.91, 0.948]],
  [0.436, [0.984, 0.91, 0.948]],
  [0.438, [0.983, 0.914, 0.95]],
  [0.44, [0.983, 0.914, 0.95]],
  [0.442, [0.982, 0.917, 0.951]],
  [0.444, [0.982, 0.917, 0.951]],
  [0.446, [0.981, 0.921, 0.952]],
  [0.448, [0.981, 0.921, 0.952]],
  [0.45, [0.98, 0.924, 0.953]],
  [0.452, [0.98, 0.924, 0.953]],
  [0.454, [0.979, 0.928, 0.954]],
  [0.456, [0.979, 0.928, 0.954]],
  [0.458, [0.978, 0.931, 0.956]],
  [0.46, [0.978, 0.931, 0.956]],
  [0.462, [0.977, 0.935, 0.957]],
  [0.464, [0.977, 0.935, 0.957]],
  [0.466, [0.976, 0.939, 0.958]],
  [0.468, [0.976, 0.939, 0.958]],
  [0.47, [0.976, 0.942, 0.959]],
  [0.472, [0.976, 0.942, 0.959]],
  [0.474, [0.975, 0.946, 0.961]],
  [0.476, [0.975, 0.946, 0.961]],
  [0.477, [0.974, 0.949, 0.962]],
  [0.479, [0.974, 0.949, 0.962]],
  [0.481, [0.973, 0.953, 0.963]],
  [0.483, [0.973, 0.953, 0.963]],
  [0.485, [0.972, 0.956, 0.964]],
  [0.487, [0.972, 0.956, 0.964]],
  [0.489, [0.971, 0.96, 0.966]],
  [0.491, [0.971, 0.96, 0.966]],
  [0.493, [0.97, 0.963, 0.967]],
  [0.495, [0.97, 0.963, 0.967]],
  [0.497, [0.969, 0.967, 0.968]],
  [0.499, [0.969, 0.967, 0.968]],
  [0.501, [0.967, 0.968, 0.966]],
  [0.503, [0.967, 0.968, 0.966]],
  [0.505, [0.965, 0.968, 0.96]],
  [0.507, [0.965, 0.968, 0.96]],
  [0.509, [0.962, 0.968, 0.954]],
  [0.511, [0.962, 0.968, 0.954]],
  [0.513, [0.959, 0.968, 0.948]],
  [0.515, [0.959, 0.968, 0.948]],
  [0.517, [0.957, 0.967, 0.942]],
  [0.519, [0.957, 0.967, 0.942]],
  [0.521, [0.954, 0.967, 0.936]],
  [0.523, [0.954, 0.967, 0.936]],
  [0.524, [0.952, 0.967, 0.93]],
  [0.526, [0.952, 0.967, 0.93]],
  [0.528, [0.949, 0.966, 0.924]],
  [0.53, [0.949, 0.966, 0.924]],
  [0.532, [0.946, 0.966, 0.918]],
  [0.534, [0.946, 0.966, 0.918]],
  [0.536, [0.944, 0.966, 0.912]],
  [0.538, [0.944, 0.966, 0.912]],
  [0.54, [0.941, 0.965, 0.906]],
  [0.542, [0.941, 0.965, 0.906]],
  [0.544, [0.939, 0.965, 0.9]],
  [0.546, [0.939, 0.965, 0.9]],
  [0.548, [0.936, 0.965, 0.894]],
  [0.55, [0.936, 0.965, 0.894]],
  [0.552, [0.933, 0.964, 0.888]],
  [0.554, [0.933, 0.964, 0.888]],
  [0.556, [0.931, 0.964, 0.882]],
  [0.558, [0.931, 0.964, 0.882]],
  [0.56, [0.928, 0.964, 0.876]],
  [0.562, [0.928, 0.964, 0.876]],
  [0.564, [0.925, 0.964, 0.87]],
  [0.566, [0.925, 0.964, 0.87]],
  [0.568, [0.923, 0.963, 0.864]],
  [0.569, [0.923, 0.963, 0.864]],
  [0.571, [0.92, 0.963, 0.858]],
  [0.573, [0.92, 0.963, 0.858]],
  [0.575, [0.918, 0.963, 0.852]],
  [0.577, [0.918, 0.963, 0.852]],
  [0.579, [0.915, 0.962, 0.846]],
  [0.581, [0.915, 0.962, 0.846]],
  [0.583, [0.912, 0.962, 0.84]],
  [0.585, [0.912, 0.962, 0.84]],
  [0.587, [0.91, 0.962, 0.834]],
  [0.589, [0.91, 0.962, 0.834]],
  [0.591, [0.907, 0.961, 0.828]],
  [0.593, [0.907, 0.961, 0.828]],
  [0.595, [0.905, 0.961, 0.822]],
  [0.597, [0.905, 0.961, 0.822]],
  [0.599, [0.902, 0.961, 0.816]],
  [0.601, [0.902, 0.961, 0.816]],
  [0.603, [0.895, 0.958, 0.804]],
  [0.605, [0.895, 0.958, 0.804]],
  [0.607, [0.888, 0.955, 0.793]],
  [0.609, [0.888, 0.955, 0.793]],
  [0.611, [0.881, 0.952, 0.782]],
  [0.613, [0.881, 0.952, 0.782]],
  [0.614, [0.874, 0.948, 0.77]],
  [0.616, [0.874, 0.948, 0.77]],
  [0.618, [0.867, 0.945, 0.759]],
  [0.62, [0.867, 0.945, 0.759]],
  [0.622, [0.86, 0.942, 0.747]],
  [0.624, [0.86, 0.942, 0.747]],
  [0.626, [0.852, 0.939, 0.736]],
  [0.628, [0.852, 0.939, 0.736]],
  [0.63, [0.845, 0.936, 0.725]],
  [0.632, [0.845, 0.936, 0.725]],
  [0.634, [0.838, 0.933, 0.713]],
  [0.636, [0.838, 0.933, 0.713]],
  [0.638, [0.831, 0.93, 0.702]],
  [0.64, [0.831, 0.93, 0.702]],
  [0.642, [0.824, 0.927, 0.691]],
  [0.644, [0.824, 0.927, 0.691]],
  [0.646, [0.817, 0.924, 0.679]],
  [0.648, [0.817, 0.924, 0.679]],
  [0.65, [0.81, 0.921, 0.668]],
  [0.652, [0.81, 0.921, 0.668]],
  [0.654, [0.803, 0.918, 0.656]],
  [0.656, [0.803, 0.918, 0.656]],
  [0.658, [0.796, 0.915, 0.645]],
  [0.659, [0.796, 0.915, 0.645]],
  [0.661, [0.789, 0.912, 0.634]],
  [0.663, [0.789, 0.912, 0.634]],
  [0.665, [0.782, 0.908, 0.622]],
  [0.667, [0.782, 0.908, 0.622]],
  [0.669, [0.775, 0.905, 0.611]],
  [0.671, [0.775, 0.905, 0.611]],
  [0.673, [0.768, 0.902, 0.599]],
  [0.675, [0.768, 0.902, 0.599]],
  [0.677, [0.76, 0.899, 0.588]],
  [0.679, [0.76, 0.899, 0.588]],
  [0.681, [0.753, 0.896, 0.577]],
  [0.683, [0.753, 0.896, 0.577]],
  [0.685, [0.746, 0.893, 0.565]],
  [0.687, [0.746, 0.893, 0.565]],
  [0.689, [0.739, 0.89, 0.554]],
  [0.691, [0.739, 0.89, 0.554]],
  [0.693, [0.732, 0.887, 0.543]],
  [0.695, [0.732, 0.887, 0.543]],
  [0.697, [0.725, 0.884, 0.531]],
  [0.699, [0.725, 0.884, 0.531]],
  [0.701, [0.717, 0.88, 0.52]],
  [0.703, [0.717, 0.88, 0.52]],
  [0.705, [0.708, 0.874, 0.51]],
  [0.706, [0.708, 0.874, 0.51]],
  [0.708, [0.7, 0.868, 0.499]],
  [0.71, [0.7, 0.868, 0.499]],
  [0.712, [0.691, 0.862, 0.488]],
  [0.714, [0.691, 0.862, 0.488]],
  [0.716, [0.682, 0.857, 0.478]],
  [0.718, [0.682, 0.857, 0.478]],
  [0.72, [0.673, 0.851, 0.467]],
  [0.722, [0.673, 0.851, 0.467]],
  [0.724, [0.665, 0.845, 0.457]],
  [0.726, [0.665, 0.845, 0.457]],
  [0.728, [0.656, 0.84, 0.446]],
  [0.73, [0.656, 0.84, 0.446]],
  [0.732, [0.647, 0.834, 0.435]],
  [0.734, [0.647, 0.834, 0.435]],
  [0.736, [0.638, 0.828, 0.425]],
  [0.738, [0.638, 0.828, 0.425]],
  [0.74, [0.63, 0.823, 0.414]],
  [0.742, [0.63, 0.823, 0.414]],
  [0.744, [0.621, 0.817, 0.403]],
  [0.746, [0.621, 0.817, 0.403]],
  [0.748, [0.612, 0.811, 0.393]],
  [0.75, [0.612, 0.811, 0.393]],
  [0.751, [0.603, 0.806, 0.382]],
  [0.753, [0.603, 0.806, 0.382]],
  [0.755, [0.594, 0.8, 0.372]],
  [0.757, [0.594, 0.8, 0.372]],
  [0.759, [0.586, 0.794, 0.361]],
  [0.761, [0.586, 0.794, 0.361]],
  [0.763, [0.577, 0.788, 0.35]],
  [0.765, [0.577, 0.788, 0.35]],
  [0.767, [0.568, 0.783, 0.34]],
  [0.769, [0.568, 0.783, 0.34]],
  [0.771, [0.559, 0.777, 0.329]],
  [0.773, [0.559, 0.777, 0.329]],
  [0.775, [0.551, 0.771, 0.319]],
  [0.777, [0.551, 0.771, 0.319]],
  [0.779, [0.542, 0.766, 0.308]],
  [0.781, [0.542, 0.766, 0.308]],
  [0.783, [0.533, 0.76, 0.297]],
  [0.785, [0.533, 0.76, 0.297]],
  [0.787, [0.524, 0.754, 0.287]],
  [0.789, [0.524, 0.754, 0.287]],
  [0.791, [0.516, 0.749, 0.276]],
  [0.793, [0.516, 0.749, 0.276]],
  [0.795, [0.507, 0.743, 0.266]],
  [0.796, [0.507, 0.743, 0.266]],
  [0.798, [0.498, 0.737, 0.255]],
  [0.8, [0.498, 0.737, 0.255]],
  [0.802, [0.49, 0.731, 0.25]],
  [0.804, [0.49, 0.731, 0.25]],
  [0.806, [0.483, 0.724, 0.245]],
  [0.808, [0.483, 0.724, 0.245]],
  [0.81, [0.475, 0.718, 0.24]],
  [0.812, [0.475, 0.718, 0.24]],
  [0.814, [0.467, 0.711, 0.235]],
  [0.816, [0.467, 0.711, 0.235]],
  [0.818, [0.46, 0.705, 0.23]],
  [0.82, [0.46, 0.705, 0.23]],
  [0.822, [0.452, 0.699, 0.225]],
  [0.824, [0.452, 0.699, 0.225]],
  [0.826, [0.444, 0.692, 0.22]],
  [0.828, [0.444, 0.692, 0.22]],
  [0.83, [0.437, 0.686, 0.216]],
  [0.832, [0.437, 0.686, 0.216]],
  [0.834, [0.429, 0.679, 0.211]],
  [0.836, [0.429, 0.679, 0.211]],
  [0.838, [0.421, 0.673, 0.206]],
  [0.84, [0.421, 0.673, 0.206]],
  [0.841, [0.413, 0.666, 0.201]],
  [0.843, [0.413, 0.666, 0.201]],
  [0.845, [0.406, 0.66, 0.196]],
  [0.847, [0.406, 0.66, 0.196]],
  [0.849, [0.398, 0.653, 0.191]],
  [0.851, [0.398, 0.653, 0.191]],
  [0.853, [0.39, 0.647, 0.186]],
  [0.855, [0.39, 0.647, 0.186]],
  [0.857, [0.383, 0.64, 0.181]],
  [0.859, [0.383, 0.64, 0.181]],
  [0.861, [0.375, 0.634, 0.176]],
  [0.863, [0.375, 0.634, 0.176]],
  [0.865, [0.367, 0.627, 0.171]],
  [0.867, [0.367, 0.627, 0.171]],
  [0.869, [0.36, 0.621, 0.166]],
  [0.871, [0.36, 0.621, 0.166]],
  [0.873, [0.352, 0.615, 0.161]],
  [0.875, [0.352, 0.615, 0.161]],
  [0.877, [0.344, 0.608, 0.156]],
  [0.879, [0.344, 0.608, 0.156]],
  [0.881, [0.337, 0.602, 0.152]],
  [0.883, [0.337, 0.602, 0.152]],
  [0.885, [0.329, 0.595, 0.147]],
  [0.886, [0.329, 0.595, 0.147]],
  [0.888, [0.321, 0.589, 0.142]],
  [0.89, [0.321, 0.589, 0.142]],
  [0.892, [0.313, 0.582, 0.137]],
  [0.894, [0.313, 0.582, 0.137]],
  [0.896, [0.306, 0.576, 0.132]],
  [0.898, [0.306, 0.576, 0.132]],
  [0.9, [0.299, 0.569, 0.129]],
  [0.902, [0.299, 0.569, 0.129]],
  [0.904, [0.293, 0.562, 0.128]],
  [0.906, [0.293, 0.562, 0.128]],
  [0.908, [0.287, 0.555, 0.126]],
  [0.91, [0.287, 0.555, 0.126]],
  [0.912, [0.282, 0.548, 0.125]],
  [0.914, [0.282, 0.548, 0.125]],
  [0.916, [0.276, 0.541, 0.124]],
  [0.918, [0.276, 0.541, 0.124]],
  [0.92, [0.27, 0.534, 0.123]],
  [0.922, [0.27, 0.534, 0.123]],
  [0.924, [0.264, 0.527, 0.121]],
  [0.926, [0.264, 0.527, 0.121]],
  [0.928, [0.258, 0.519, 0.12]],
  [0.93, [0.258, 0.519, 0.12]],
  [0.932, [0.252, 0.512, 0.119]],
  [0.933, [0.252, 0.512, 0.119]],
  [0.935, [0.246, 0.505, 0.118]],
  [0.937, [0.246, 0.505, 0.118]],
  [0.939, [0.241, 0.498, 0.116]],
  [0.941, [0.241, 0.498, 0.116]],
  [0.943, [0.235, 0.491, 0.115]],
  [0.945, [0.235, 0.491, 0.115]],
  [0.947, [0.229, 0.484, 0.114]],
  [0.949, [0.229, 0.484, 0.114]],
  [0.951, [0.223, 0.477, 0.113]],
  [0.953, [0.223, 0.477, 0.113]],
  [0.955, [0.217, 0.47, 0.112]],
  [0.957, [0.217, 0.47, 0.112]],
  [0.959, [0.211, 0.463, 0.11]],
  [0.961, [0.211, 0.463, 0.11]],
  [0.963, [0.206, 0.456, 0.109]],
  [0.965, [0.206, 0.456, 0.109]],
  [0.967, [0.2, 0.449, 0.108]],
  [0.969, [0.2, 0.449, 0.108]],
  [0.971, [0.194, 0.442, 0.107]],
  [0.973, [0.194, 0.442, 0.107]],
  [0.975, [0.188, 0.435, 0.105]],
  [0.977, [0.188, 0.435, 0.105]],
  [0.978, [0.182, 0.428, 0.104]],
  [0.98, [0.182, 0.428, 0.104]],
  [0.982, [0.176, 0.42, 0.103]],
  [0.984, [0.176, 0.42, 0.103]],
  [0.986, [0.17, 0.413, 0.102]],
  [0.988, [0.17, 0.413, 0.102]],
  [0.99, [0.165, 0.406, 0.1]],
  [0.992, [0.165, 0.406, 0.1]],
  [0.994, [0.159, 0.399, 0.099]],
  [0.996, [0.159, 0.399, 0.099]],
  [0.998, [0.153, 0.392, 0.098]],
  [1, [0.153, 0.392, 0.098]]
], Vf = [
  [0, [0.498, 0.231, 0.031]],
  [2e-3, [0.498, 0.231, 0.031]],
  [4e-3, [0.506, 0.236, 0.031]],
  [6e-3, [0.506, 0.236, 0.031]],
  [8e-3, [0.514, 0.24, 0.031]],
  [0.01, [0.514, 0.24, 0.031]],
  [0.012, [0.522, 0.245, 0.03]],
  [0.014, [0.522, 0.245, 0.03]],
  [0.016, [0.53, 0.249, 0.03]],
  [0.018, [0.53, 0.249, 0.03]],
  [0.02, [0.538, 0.254, 0.03]],
  [0.022, [0.538, 0.254, 0.03]],
  [0.023, [0.546, 0.258, 0.03]],
  [0.025, [0.546, 0.258, 0.03]],
  [0.027, [0.554, 0.263, 0.029]],
  [0.029, [0.554, 0.263, 0.029]],
  [0.031, [0.562, 0.267, 0.029]],
  [0.033, [0.562, 0.267, 0.029]],
  [0.035, [0.57, 0.272, 0.029]],
  [0.037, [0.57, 0.272, 0.029]],
  [0.039, [0.578, 0.276, 0.028]],
  [0.041, [0.578, 0.276, 0.028]],
  [0.043, [0.586, 0.28, 0.028]],
  [0.045, [0.586, 0.28, 0.028]],
  [0.047, [0.594, 0.285, 0.028]],
  [0.049, [0.594, 0.285, 0.028]],
  [0.051, [0.602, 0.289, 0.027]],
  [0.053, [0.602, 0.289, 0.027]],
  [0.055, [0.61, 0.294, 0.027]],
  [0.057, [0.61, 0.294, 0.027]],
  [0.059, [0.618, 0.298, 0.027]],
  [0.061, [0.618, 0.298, 0.027]],
  [0.063, [0.626, 0.303, 0.026]],
  [0.065, [0.626, 0.303, 0.026]],
  [0.067, [0.634, 0.307, 0.026]],
  [0.068, [0.634, 0.307, 0.026]],
  [0.07, [0.642, 0.312, 0.026]],
  [0.072, [0.642, 0.312, 0.026]],
  [0.074, [0.65, 0.316, 0.026]],
  [0.076, [0.65, 0.316, 0.026]],
  [0.078, [0.658, 0.321, 0.025]],
  [0.08, [0.658, 0.321, 0.025]],
  [0.082, [0.666, 0.325, 0.025]],
  [0.084, [0.666, 0.325, 0.025]],
  [0.086, [0.674, 0.329, 0.025]],
  [0.088, [0.674, 0.329, 0.025]],
  [0.09, [0.682, 0.334, 0.024]],
  [0.092, [0.682, 0.334, 0.024]],
  [0.094, [0.69, 0.338, 0.024]],
  [0.096, [0.69, 0.338, 0.024]],
  [0.098, [0.698, 0.343, 0.024]],
  [0.1, [0.698, 0.343, 0.024]],
  [0.102, [0.705, 0.348, 0.025]],
  [0.104, [0.705, 0.348, 0.025]],
  [0.106, [0.712, 0.355, 0.027]],
  [0.108, [0.712, 0.355, 0.027]],
  [0.11, [0.719, 0.361, 0.029]],
  [0.112, [0.719, 0.361, 0.029]],
  [0.114, [0.726, 0.368, 0.031]],
  [0.115, [0.726, 0.368, 0.031]],
  [0.117, [0.733, 0.374, 0.033]],
  [0.119, [0.733, 0.374, 0.033]],
  [0.121, [0.74, 0.381, 0.035]],
  [0.123, [0.74, 0.381, 0.035]],
  [0.125, [0.747, 0.387, 0.038]],
  [0.127, [0.747, 0.387, 0.038]],
  [0.129, [0.754, 0.394, 0.04]],
  [0.131, [0.754, 0.394, 0.04]],
  [0.133, [0.761, 0.4, 0.042]],
  [0.135, [0.761, 0.4, 0.042]],
  [0.137, [0.768, 0.406, 0.044]],
  [0.139, [0.768, 0.406, 0.044]],
  [0.141, [0.775, 0.413, 0.046]],
  [0.143, [0.775, 0.413, 0.046]],
  [0.145, [0.782, 0.419, 0.048]],
  [0.147, [0.782, 0.419, 0.048]],
  [0.149, [0.788, 0.426, 0.05]],
  [0.151, [0.788, 0.426, 0.05]],
  [0.153, [0.795, 0.432, 0.053]],
  [0.155, [0.795, 0.432, 0.053]],
  [0.157, [0.802, 0.439, 0.055]],
  [0.159, [0.802, 0.439, 0.055]],
  [0.16, [0.809, 0.445, 0.057]],
  [0.162, [0.809, 0.445, 0.057]],
  [0.164, [0.816, 0.452, 0.059]],
  [0.166, [0.816, 0.452, 0.059]],
  [0.168, [0.823, 0.458, 0.061]],
  [0.17, [0.823, 0.458, 0.061]],
  [0.172, [0.83, 0.465, 0.063]],
  [0.174, [0.83, 0.465, 0.063]],
  [0.176, [0.837, 0.471, 0.066]],
  [0.178, [0.837, 0.471, 0.066]],
  [0.18, [0.844, 0.478, 0.068]],
  [0.182, [0.844, 0.478, 0.068]],
  [0.184, [0.851, 0.484, 0.07]],
  [0.186, [0.851, 0.484, 0.07]],
  [0.188, [0.858, 0.49, 0.072]],
  [0.19, [0.858, 0.49, 0.072]],
  [0.192, [0.865, 0.497, 0.074]],
  [0.194, [0.865, 0.497, 0.074]],
  [0.196, [0.872, 0.503, 0.076]],
  [0.198, [0.872, 0.503, 0.076]],
  [0.2, [0.878, 0.51, 0.078]],
  [0.202, [0.878, 0.51, 0.078]],
  [0.204, [0.883, 0.518, 0.091]],
  [0.205, [0.883, 0.518, 0.091]],
  [0.207, [0.887, 0.526, 0.103]],
  [0.209, [0.887, 0.526, 0.103]],
  [0.211, [0.892, 0.535, 0.115]],
  [0.213, [0.892, 0.535, 0.115]],
  [0.215, [0.896, 0.543, 0.127]],
  [0.217, [0.896, 0.543, 0.127]],
  [0.219, [0.901, 0.551, 0.139]],
  [0.221, [0.901, 0.551, 0.139]],
  [0.223, [0.905, 0.56, 0.151]],
  [0.225, [0.905, 0.56, 0.151]],
  [0.227, [0.91, 0.568, 0.163]],
  [0.229, [0.91, 0.568, 0.163]],
  [0.231, [0.914, 0.576, 0.176]],
  [0.233, [0.914, 0.576, 0.176]],
  [0.235, [0.919, 0.585, 0.188]],
  [0.237, [0.919, 0.585, 0.188]],
  [0.239, [0.923, 0.593, 0.2]],
  [0.241, [0.923, 0.593, 0.2]],
  [0.243, [0.927, 0.601, 0.212]],
  [0.245, [0.927, 0.601, 0.212]],
  [0.247, [0.932, 0.609, 0.224]],
  [0.249, [0.932, 0.609, 0.224]],
  [0.25, [0.936, 0.618, 0.236]],
  [0.252, [0.936, 0.618, 0.236]],
  [0.254, [0.941, 0.626, 0.249]],
  [0.256, [0.941, 0.626, 0.249]],
  [0.258, [0.945, 0.634, 0.261]],
  [0.26, [0.945, 0.634, 0.261]],
  [0.262, [0.95, 0.643, 0.273]],
  [0.264, [0.95, 0.643, 0.273]],
  [0.266, [0.954, 0.651, 0.285]],
  [0.268, [0.954, 0.651, 0.285]],
  [0.27, [0.959, 0.659, 0.297]],
  [0.272, [0.959, 0.659, 0.297]],
  [0.274, [0.963, 0.668, 0.309]],
  [0.276, [0.963, 0.668, 0.309]],
  [0.278, [0.968, 0.676, 0.321]],
  [0.28, [0.968, 0.676, 0.321]],
  [0.282, [0.972, 0.684, 0.334]],
  [0.284, [0.972, 0.684, 0.334]],
  [0.286, [0.977, 0.693, 0.346]],
  [0.288, [0.977, 0.693, 0.346]],
  [0.29, [0.981, 0.701, 0.358]],
  [0.292, [0.981, 0.701, 0.358]],
  [0.294, [0.985, 0.709, 0.37]],
  [0.295, [0.985, 0.709, 0.37]],
  [0.297, [0.99, 0.717, 0.382]],
  [0.299, [0.99, 0.717, 0.382]],
  [0.301, [0.992, 0.725, 0.395]],
  [0.303, [0.992, 0.725, 0.395]],
  [0.305, [0.992, 0.731, 0.407]],
  [0.307, [0.992, 0.731, 0.407]],
  [0.309, [0.993, 0.737, 0.42]],
  [0.311, [0.993, 0.737, 0.42]],
  [0.313, [0.993, 0.743, 0.433]],
  [0.315, [0.993, 0.743, 0.433]],
  [0.317, [0.993, 0.749, 0.446]],
  [0.319, [0.993, 0.749, 0.446]],
  [0.321, [0.993, 0.755, 0.458]],
  [0.323, [0.993, 0.755, 0.458]],
  [0.325, [0.993, 0.762, 0.471]],
  [0.327, [0.993, 0.762, 0.471]],
  [0.329, [0.993, 0.768, 0.484]],
  [0.331, [0.993, 0.768, 0.484]],
  [0.333, [0.993, 0.774, 0.497]],
  [0.335, [0.993, 0.774, 0.497]],
  [0.337, [0.994, 0.78, 0.509]],
  [0.339, [0.994, 0.78, 0.509]],
  [0.341, [0.994, 0.786, 0.522]],
  [0.342, [0.994, 0.786, 0.522]],
  [0.344, [0.994, 0.792, 0.535]],
  [0.346, [0.994, 0.792, 0.535]],
  [0.348, [0.994, 0.798, 0.548]],
  [0.35, [0.994, 0.798, 0.548]],
  [0.352, [0.994, 0.805, 0.561]],
  [0.354, [0.994, 0.805, 0.561]],
  [0.356, [0.994, 0.811, 0.573]],
  [0.358, [0.994, 0.811, 0.573]],
  [0.36, [0.995, 0.817, 0.586]],
  [0.362, [0.995, 0.817, 0.586]],
  [0.364, [0.995, 0.823, 0.599]],
  [0.366, [0.995, 0.823, 0.599]],
  [0.368, [0.995, 0.829, 0.612]],
  [0.37, [0.995, 0.829, 0.612]],
  [0.372, [0.995, 0.835, 0.624]],
  [0.374, [0.995, 0.835, 0.624]],
  [0.376, [0.995, 0.842, 0.637]],
  [0.378, [0.995, 0.842, 0.637]],
  [0.38, [0.995, 0.848, 0.65]],
  [0.382, [0.995, 0.848, 0.65]],
  [0.384, [0.995, 0.854, 0.663]],
  [0.386, [0.995, 0.854, 0.663]],
  [0.387, [0.996, 0.86, 0.675]],
  [0.389, [0.996, 0.86, 0.675]],
  [0.391, [0.996, 0.866, 0.688]],
  [0.393, [0.996, 0.866, 0.688]],
  [0.395, [0.996, 0.872, 0.701]],
  [0.397, [0.996, 0.872, 0.701]],
  [0.399, [0.996, 0.878, 0.714]],
  [0.401, [0.996, 0.878, 0.714]],
  [0.403, [0.995, 0.882, 0.724]],
  [0.405, [0.995, 0.882, 0.724]],
  [0.407, [0.994, 0.886, 0.734]],
  [0.409, [0.994, 0.886, 0.734]],
  [0.411, [0.993, 0.889, 0.744]],
  [0.413, [0.993, 0.889, 0.744]],
  [0.415, [0.992, 0.893, 0.754]],
  [0.417, [0.992, 0.893, 0.754]],
  [0.419, [0.991, 0.896, 0.764]],
  [0.421, [0.991, 0.896, 0.764]],
  [0.423, [0.99, 0.9, 0.774]],
  [0.425, [0.99, 0.9, 0.774]],
  [0.427, [0.989, 0.903, 0.784]],
  [0.429, [0.989, 0.903, 0.784]],
  [0.431, [0.987, 0.907, 0.794]],
  [0.432, [0.987, 0.907, 0.794]],
  [0.434, [0.986, 0.91, 0.804]],
  [0.436, [0.986, 0.91, 0.804]],
  [0.438, [0.985, 0.914, 0.814]],
  [0.44, [0.985, 0.914, 0.814]],
  [0.442, [0.984, 0.917, 0.824]],
  [0.444, [0.984, 0.917, 0.824]],
  [0.446, [0.983, 0.921, 0.834]],
  [0.448, [0.983, 0.921, 0.834]],
  [0.45, [0.982, 0.924, 0.844]],
  [0.452, [0.982, 0.924, 0.844]],
  [0.454, [0.981, 0.928, 0.854]],
  [0.456, [0.981, 0.928, 0.854]],
  [0.458, [0.98, 0.931, 0.864]],
  [0.46, [0.98, 0.931, 0.864]],
  [0.462, [0.979, 0.935, 0.874]],
  [0.464, [0.979, 0.935, 0.874]],
  [0.466, [0.978, 0.939, 0.884]],
  [0.468, [0.978, 0.939, 0.884]],
  [0.47, [0.977, 0.942, 0.894]],
  [0.472, [0.977, 0.942, 0.894]],
  [0.474, [0.976, 0.946, 0.904]],
  [0.476, [0.976, 0.946, 0.904]],
  [0.477, [0.975, 0.949, 0.914]],
  [0.479, [0.975, 0.949, 0.914]],
  [0.481, [0.973, 0.953, 0.924]],
  [0.483, [0.973, 0.953, 0.924]],
  [0.485, [0.972, 0.956, 0.934]],
  [0.487, [0.972, 0.956, 0.934]],
  [0.489, [0.971, 0.96, 0.944]],
  [0.491, [0.971, 0.96, 0.944]],
  [0.493, [0.97, 0.963, 0.954]],
  [0.495, [0.97, 0.963, 0.954]],
  [0.497, [0.969, 0.967, 0.964]],
  [0.499, [0.969, 0.967, 0.964]],
  [0.501, [0.966, 0.966, 0.968]],
  [0.503, [0.966, 0.966, 0.968]],
  [0.505, [0.961, 0.962, 0.966]],
  [0.507, [0.961, 0.962, 0.966]],
  [0.509, [0.957, 0.957, 0.964]],
  [0.511, [0.957, 0.957, 0.964]],
  [0.513, [0.952, 0.953, 0.962]],
  [0.515, [0.952, 0.953, 0.962]],
  [0.517, [0.947, 0.949, 0.96]],
  [0.519, [0.947, 0.949, 0.96]],
  [0.521, [0.942, 0.944, 0.958]],
  [0.523, [0.942, 0.944, 0.958]],
  [0.524, [0.938, 0.94, 0.957]],
  [0.526, [0.938, 0.94, 0.957]],
  [0.528, [0.933, 0.935, 0.955]],
  [0.53, [0.933, 0.935, 0.955]],
  [0.532, [0.928, 0.931, 0.953]],
  [0.534, [0.928, 0.931, 0.953]],
  [0.536, [0.923, 0.926, 0.951]],
  [0.538, [0.923, 0.926, 0.951]],
  [0.54, [0.919, 0.922, 0.949]],
  [0.542, [0.919, 0.922, 0.949]],
  [0.544, [0.914, 0.917, 0.947]],
  [0.546, [0.914, 0.917, 0.947]],
  [0.548, [0.909, 0.913, 0.946]],
  [0.55, [0.909, 0.913, 0.946]],
  [0.552, [0.904, 0.908, 0.944]],
  [0.554, [0.904, 0.908, 0.944]],
  [0.556, [0.9, 0.904, 0.942]],
  [0.558, [0.9, 0.904, 0.942]],
  [0.56, [0.895, 0.9, 0.94]],
  [0.562, [0.895, 0.9, 0.94]],
  [0.564, [0.89, 0.895, 0.938]],
  [0.566, [0.89, 0.895, 0.938]],
  [0.568, [0.885, 0.891, 0.936]],
  [0.569, [0.885, 0.891, 0.936]],
  [0.571, [0.88, 0.886, 0.934]],
  [0.573, [0.88, 0.886, 0.934]],
  [0.575, [0.876, 0.882, 0.933]],
  [0.577, [0.876, 0.882, 0.933]],
  [0.579, [0.871, 0.877, 0.931]],
  [0.581, [0.871, 0.877, 0.931]],
  [0.583, [0.866, 0.873, 0.929]],
  [0.585, [0.866, 0.873, 0.929]],
  [0.587, [0.861, 0.868, 0.927]],
  [0.589, [0.861, 0.868, 0.927]],
  [0.591, [0.857, 0.864, 0.925]],
  [0.593, [0.857, 0.864, 0.925]],
  [0.595, [0.852, 0.859, 0.923]],
  [0.597, [0.852, 0.859, 0.923]],
  [0.599, [0.847, 0.855, 0.922]],
  [0.601, [0.847, 0.855, 0.922]],
  [0.603, [0.841, 0.848, 0.918]],
  [0.605, [0.841, 0.848, 0.918]],
  [0.607, [0.835, 0.84, 0.914]],
  [0.609, [0.835, 0.84, 0.914]],
  [0.611, [0.83, 0.833, 0.91]],
  [0.613, [0.83, 0.833, 0.91]],
  [0.614, [0.824, 0.826, 0.906]],
  [0.616, [0.824, 0.826, 0.906]],
  [0.618, [0.818, 0.819, 0.902]],
  [0.62, [0.818, 0.819, 0.902]],
  [0.622, [0.812, 0.812, 0.899]],
  [0.624, [0.812, 0.812, 0.899]],
  [0.626, [0.806, 0.804, 0.895]],
  [0.628, [0.806, 0.804, 0.895]],
  [0.63, [0.8, 0.797, 0.891]],
  [0.632, [0.8, 0.797, 0.891]],
  [0.634, [0.794, 0.79, 0.887]],
  [0.636, [0.794, 0.79, 0.887]],
  [0.638, [0.789, 0.783, 0.883]],
  [0.64, [0.789, 0.783, 0.883]],
  [0.642, [0.783, 0.775, 0.879]],
  [0.644, [0.783, 0.775, 0.879]],
  [0.646, [0.777, 0.768, 0.875]],
  [0.648, [0.777, 0.768, 0.875]],
  [0.65, [0.771, 0.761, 0.872]],
  [0.652, [0.771, 0.761, 0.872]],
  [0.654, [0.765, 0.754, 0.868]],
  [0.656, [0.765, 0.754, 0.868]],
  [0.658, [0.759, 0.746, 0.864]],
  [0.659, [0.759, 0.746, 0.864]],
  [0.661, [0.754, 0.739, 0.86]],
  [0.663, [0.754, 0.739, 0.86]],
  [0.665, [0.748, 0.732, 0.856]],
  [0.667, [0.748, 0.732, 0.856]],
  [0.669, [0.742, 0.725, 0.852]],
  [0.671, [0.742, 0.725, 0.852]],
  [0.673, [0.736, 0.718, 0.849]],
  [0.675, [0.736, 0.718, 0.849]],
  [0.677, [0.73, 0.71, 0.845]],
  [0.679, [0.73, 0.71, 0.845]],
  [0.681, [0.724, 0.703, 0.841]],
  [0.683, [0.724, 0.703, 0.841]],
  [0.685, [0.718, 0.696, 0.837]],
  [0.687, [0.718, 0.696, 0.837]],
  [0.689, [0.713, 0.689, 0.833]],
  [0.691, [0.713, 0.689, 0.833]],
  [0.693, [0.707, 0.681, 0.829]],
  [0.695, [0.707, 0.681, 0.829]],
  [0.697, [0.701, 0.674, 0.825]],
  [0.699, [0.701, 0.674, 0.825]],
  [0.701, [0.694, 0.666, 0.821]],
  [0.703, [0.694, 0.666, 0.821]],
  [0.705, [0.687, 0.658, 0.815]],
  [0.706, [0.687, 0.658, 0.815]],
  [0.708, [0.679, 0.649, 0.809]],
  [0.71, [0.679, 0.649, 0.809]],
  [0.712, [0.671, 0.64, 0.803]],
  [0.714, [0.671, 0.64, 0.803]],
  [0.716, [0.663, 0.632, 0.797]],
  [0.718, [0.663, 0.632, 0.797]],
  [0.72, [0.656, 0.623, 0.791]],
  [0.722, [0.656, 0.623, 0.791]],
  [0.724, [0.648, 0.615, 0.786]],
  [0.726, [0.648, 0.615, 0.786]],
  [0.728, [0.64, 0.606, 0.78]],
  [0.73, [0.64, 0.606, 0.78]],
  [0.732, [0.633, 0.597, 0.774]],
  [0.734, [0.633, 0.597, 0.774]],
  [0.736, [0.625, 0.589, 0.768]],
  [0.738, [0.625, 0.589, 0.768]],
  [0.74, [0.617, 0.58, 0.762]],
  [0.742, [0.617, 0.58, 0.762]],
  [0.744, [0.61, 0.572, 0.756]],
  [0.746, [0.61, 0.572, 0.756]],
  [0.748, [0.602, 0.563, 0.75]],
  [0.75, [0.602, 0.563, 0.75]],
  [0.751, [0.594, 0.554, 0.745]],
  [0.753, [0.594, 0.554, 0.745]],
  [0.755, [0.587, 0.546, 0.739]],
  [0.757, [0.587, 0.546, 0.739]],
  [0.759, [0.579, 0.537, 0.733]],
  [0.761, [0.579, 0.537, 0.733]],
  [0.763, [0.571, 0.528, 0.727]],
  [0.765, [0.571, 0.528, 0.727]],
  [0.767, [0.563, 0.52, 0.721]],
  [0.769, [0.563, 0.52, 0.721]],
  [0.771, [0.556, 0.511, 0.715]],
  [0.773, [0.556, 0.511, 0.715]],
  [0.775, [0.548, 0.503, 0.71]],
  [0.777, [0.548, 0.503, 0.71]],
  [0.779, [0.54, 0.494, 0.704]],
  [0.781, [0.54, 0.494, 0.704]],
  [0.783, [0.533, 0.485, 0.698]],
  [0.785, [0.533, 0.485, 0.698]],
  [0.787, [0.525, 0.477, 0.692]],
  [0.789, [0.525, 0.477, 0.692]],
  [0.791, [0.517, 0.468, 0.686]],
  [0.793, [0.517, 0.468, 0.686]],
  [0.795, [0.51, 0.46, 0.68]],
  [0.796, [0.51, 0.46, 0.68]],
  [0.798, [0.502, 0.451, 0.675]],
  [0.8, [0.502, 0.451, 0.675]],
  [0.802, [0.495, 0.439, 0.669]],
  [0.804, [0.495, 0.439, 0.669]],
  [0.806, [0.488, 0.428, 0.663]],
  [0.808, [0.488, 0.428, 0.663]],
  [0.81, [0.482, 0.416, 0.658]],
  [0.812, [0.482, 0.416, 0.658]],
  [0.814, [0.475, 0.404, 0.652]],
  [0.816, [0.475, 0.404, 0.652]],
  [0.818, [0.468, 0.393, 0.647]],
  [0.82, [0.468, 0.393, 0.647]],
  [0.822, [0.461, 0.381, 0.641]],
  [0.824, [0.461, 0.381, 0.641]],
  [0.826, [0.455, 0.369, 0.636]],
  [0.828, [0.455, 0.369, 0.636]],
  [0.83, [0.448, 0.357, 0.63]],
  [0.832, [0.448, 0.357, 0.63]],
  [0.834, [0.441, 0.346, 0.625]],
  [0.836, [0.441, 0.346, 0.625]],
  [0.838, [0.434, 0.334, 0.619]],
  [0.84, [0.434, 0.334, 0.619]],
  [0.841, [0.428, 0.322, 0.614]],
  [0.843, [0.428, 0.322, 0.614]],
  [0.845, [0.421, 0.311, 0.608]],
  [0.847, [0.421, 0.311, 0.608]],
  [0.849, [0.414, 0.299, 0.603]],
  [0.851, [0.414, 0.299, 0.603]],
  [0.853, [0.407, 0.287, 0.597]],
  [0.855, [0.407, 0.287, 0.597]],
  [0.857, [0.4, 0.276, 0.591]],
  [0.859, [0.4, 0.276, 0.591]],
  [0.861, [0.394, 0.264, 0.586]],
  [0.863, [0.394, 0.264, 0.586]],
  [0.865, [0.387, 0.252, 0.58]],
  [0.867, [0.387, 0.252, 0.58]],
  [0.869, [0.38, 0.241, 0.575]],
  [0.871, [0.38, 0.241, 0.575]],
  [0.873, [0.373, 0.229, 0.569]],
  [0.875, [0.373, 0.229, 0.569]],
  [0.877, [0.367, 0.217, 0.564]],
  [0.879, [0.367, 0.217, 0.564]],
  [0.881, [0.36, 0.206, 0.558]],
  [0.883, [0.36, 0.206, 0.558]],
  [0.885, [0.353, 0.194, 0.553]],
  [0.886, [0.353, 0.194, 0.553]],
  [0.888, [0.346, 0.182, 0.547]],
  [0.89, [0.346, 0.182, 0.547]],
  [0.892, [0.34, 0.17, 0.542]],
  [0.894, [0.34, 0.17, 0.542]],
  [0.896, [0.333, 0.159, 0.536]],
  [0.898, [0.333, 0.159, 0.536]],
  [0.9, [0.326, 0.15, 0.529]],
  [0.902, [0.326, 0.15, 0.529]],
  [0.904, [0.32, 0.144, 0.519]],
  [0.906, [0.32, 0.144, 0.519]],
  [0.908, [0.314, 0.138, 0.51]],
  [0.91, [0.314, 0.138, 0.51]],
  [0.912, [0.308, 0.132, 0.5]],
  [0.914, [0.308, 0.132, 0.5]],
  [0.916, [0.302, 0.126, 0.491]],
  [0.918, [0.302, 0.126, 0.491]],
  [0.92, [0.296, 0.12, 0.482]],
  [0.922, [0.296, 0.12, 0.482]],
  [0.924, [0.29, 0.114, 0.472]],
  [0.926, [0.29, 0.114, 0.472]],
  [0.928, [0.284, 0.108, 0.463]],
  [0.93, [0.284, 0.108, 0.463]],
  [0.932, [0.278, 0.102, 0.454]],
  [0.933, [0.278, 0.102, 0.454]],
  [0.935, [0.272, 0.096, 0.444]],
  [0.937, [0.272, 0.096, 0.444]],
  [0.939, [0.266, 0.09, 0.435]],
  [0.941, [0.266, 0.09, 0.435]],
  [0.943, [0.26, 0.084, 0.425]],
  [0.945, [0.26, 0.084, 0.425]],
  [0.947, [0.254, 0.078, 0.416]],
  [0.949, [0.254, 0.078, 0.416]],
  [0.951, [0.248, 0.072, 0.407]],
  [0.953, [0.248, 0.072, 0.407]],
  [0.955, [0.242, 0.066, 0.397]],
  [0.957, [0.242, 0.066, 0.397]],
  [0.959, [0.236, 0.06, 0.388]],
  [0.961, [0.236, 0.06, 0.388]],
  [0.963, [0.23, 0.054, 0.379]],
  [0.965, [0.23, 0.054, 0.379]],
  [0.967, [0.224, 0.048, 0.369]],
  [0.969, [0.224, 0.048, 0.369]],
  [0.971, [0.218, 0.042, 0.36]],
  [0.973, [0.218, 0.042, 0.36]],
  [0.975, [0.212, 0.036, 0.35]],
  [0.977, [0.212, 0.036, 0.35]],
  [0.978, [0.206, 0.03, 0.341]],
  [0.98, [0.206, 0.03, 0.341]],
  [0.982, [0.2, 0.024, 0.332]],
  [0.984, [0.2, 0.024, 0.332]],
  [0.986, [0.194, 0.018, 0.322]],
  [0.988, [0.194, 0.018, 0.322]],
  [0.99, [0.188, 0.012, 0.313]],
  [0.992, [0.188, 0.012, 0.313]],
  [0.994, [0.182, 6e-3, 0.303]],
  [0.996, [0.182, 6e-3, 0.303]],
  [0.998, [0.176, 0, 0.294]],
  [1, [0.176, 0, 0.294]]
], Hf = [
  [0, [0.404, 0, 0.122]],
  [2e-3, [0.404, 0, 0.122]],
  [4e-3, [0.415, 4e-3, 0.123]],
  [6e-3, [0.415, 4e-3, 0.123]],
  [8e-3, [0.427, 7e-3, 0.125]],
  [0.01, [0.427, 7e-3, 0.125]],
  [0.012, [0.439, 0.011, 0.127]],
  [0.014, [0.439, 0.011, 0.127]],
  [0.016, [0.45, 0.015, 0.129]],
  [0.018, [0.45, 0.015, 0.129]],
  [0.02, [0.462, 0.018, 0.131]],
  [0.022, [0.462, 0.018, 0.131]],
  [0.023, [0.473, 0.022, 0.133]],
  [0.025, [0.473, 0.022, 0.133]],
  [0.027, [0.485, 0.026, 0.134]],
  [0.029, [0.485, 0.026, 0.134]],
  [0.031, [0.496, 0.03, 0.136]],
  [0.033, [0.496, 0.03, 0.136]],
  [0.035, [0.508, 0.033, 0.138]],
  [0.037, [0.508, 0.033, 0.138]],
  [0.039, [0.519, 0.037, 0.14]],
  [0.041, [0.519, 0.037, 0.14]],
  [0.043, [0.531, 0.041, 0.142]],
  [0.045, [0.531, 0.041, 0.142]],
  [0.047, [0.542, 0.044, 0.144]],
  [0.049, [0.542, 0.044, 0.144]],
  [0.051, [0.554, 0.048, 0.146]],
  [0.053, [0.554, 0.048, 0.146]],
  [0.055, [0.565, 0.052, 0.147]],
  [0.057, [0.565, 0.052, 0.147]],
  [0.059, [0.577, 0.055, 0.149]],
  [0.061, [0.577, 0.055, 0.149]],
  [0.063, [0.588, 0.059, 0.151]],
  [0.065, [0.588, 0.059, 0.151]],
  [0.067, [0.6, 0.063, 0.153]],
  [0.068, [0.6, 0.063, 0.153]],
  [0.07, [0.612, 0.066, 0.155]],
  [0.072, [0.612, 0.066, 0.155]],
  [0.074, [0.623, 0.07, 0.157]],
  [0.076, [0.623, 0.07, 0.157]],
  [0.078, [0.635, 0.074, 0.158]],
  [0.08, [0.635, 0.074, 0.158]],
  [0.082, [0.646, 0.078, 0.16]],
  [0.084, [0.646, 0.078, 0.16]],
  [0.086, [0.658, 0.081, 0.162]],
  [0.088, [0.658, 0.081, 0.162]],
  [0.09, [0.669, 0.085, 0.164]],
  [0.092, [0.669, 0.085, 0.164]],
  [0.094, [0.681, 0.089, 0.166]],
  [0.096, [0.681, 0.089, 0.166]],
  [0.098, [0.692, 0.092, 0.168]],
  [0.1, [0.692, 0.092, 0.168]],
  [0.102, [0.701, 0.1, 0.171]],
  [0.104, [0.701, 0.1, 0.171]],
  [0.106, [0.706, 0.111, 0.176]],
  [0.108, [0.706, 0.111, 0.176]],
  [0.11, [0.712, 0.122, 0.182]],
  [0.112, [0.712, 0.122, 0.182]],
  [0.114, [0.717, 0.133, 0.187]],
  [0.115, [0.717, 0.133, 0.187]],
  [0.117, [0.723, 0.144, 0.192]],
  [0.119, [0.723, 0.144, 0.192]],
  [0.121, [0.728, 0.155, 0.197]],
  [0.123, [0.728, 0.155, 0.197]],
  [0.125, [0.734, 0.166, 0.203]],
  [0.127, [0.734, 0.166, 0.203]],
  [0.129, [0.74, 0.177, 0.208]],
  [0.131, [0.74, 0.177, 0.208]],
  [0.133, [0.745, 0.188, 0.213]],
  [0.135, [0.745, 0.188, 0.213]],
  [0.137, [0.751, 0.199, 0.218]],
  [0.139, [0.751, 0.199, 0.218]],
  [0.141, [0.756, 0.21, 0.224]],
  [0.143, [0.756, 0.21, 0.224]],
  [0.145, [0.762, 0.221, 0.229]],
  [0.147, [0.762, 0.221, 0.229]],
  [0.149, [0.767, 0.233, 0.234]],
  [0.151, [0.767, 0.233, 0.234]],
  [0.153, [0.773, 0.244, 0.239]],
  [0.155, [0.773, 0.244, 0.239]],
  [0.157, [0.778, 0.255, 0.244]],
  [0.159, [0.778, 0.255, 0.244]],
  [0.16, [0.784, 0.266, 0.25]],
  [0.162, [0.784, 0.266, 0.25]],
  [0.164, [0.789, 0.277, 0.255]],
  [0.166, [0.789, 0.277, 0.255]],
  [0.168, [0.795, 0.288, 0.26]],
  [0.17, [0.795, 0.288, 0.26]],
  [0.172, [0.8, 0.299, 0.265]],
  [0.174, [0.8, 0.299, 0.265]],
  [0.176, [0.806, 0.31, 0.271]],
  [0.178, [0.806, 0.31, 0.271]],
  [0.18, [0.812, 0.321, 0.276]],
  [0.182, [0.812, 0.321, 0.276]],
  [0.184, [0.817, 0.332, 0.281]],
  [0.186, [0.817, 0.332, 0.281]],
  [0.188, [0.823, 0.343, 0.286]],
  [0.19, [0.823, 0.343, 0.286]],
  [0.192, [0.828, 0.354, 0.292]],
  [0.194, [0.828, 0.354, 0.292]],
  [0.196, [0.834, 0.365, 0.297]],
  [0.198, [0.834, 0.365, 0.297]],
  [0.2, [0.839, 0.376, 0.302]],
  [0.202, [0.839, 0.376, 0.302]],
  [0.204, [0.844, 0.387, 0.31]],
  [0.205, [0.844, 0.387, 0.31]],
  [0.207, [0.848, 0.398, 0.318]],
  [0.209, [0.848, 0.398, 0.318]],
  [0.211, [0.853, 0.408, 0.326]],
  [0.213, [0.853, 0.408, 0.326]],
  [0.215, [0.858, 0.419, 0.335]],
  [0.217, [0.858, 0.419, 0.335]],
  [0.219, [0.862, 0.43, 0.343]],
  [0.221, [0.862, 0.43, 0.343]],
  [0.223, [0.867, 0.44, 0.351]],
  [0.225, [0.867, 0.44, 0.351]],
  [0.227, [0.872, 0.451, 0.359]],
  [0.229, [0.872, 0.451, 0.359]],
  [0.231, [0.876, 0.461, 0.367]],
  [0.233, [0.876, 0.461, 0.367]],
  [0.235, [0.881, 0.472, 0.375]],
  [0.237, [0.881, 0.472, 0.375]],
  [0.239, [0.885, 0.483, 0.383]],
  [0.241, [0.885, 0.483, 0.383]],
  [0.243, [0.89, 0.493, 0.392]],
  [0.245, [0.89, 0.493, 0.392]],
  [0.247, [0.895, 0.504, 0.4]],
  [0.249, [0.895, 0.504, 0.4]],
  [0.25, [0.899, 0.514, 0.408]],
  [0.252, [0.899, 0.514, 0.408]],
  [0.254, [0.904, 0.525, 0.416]],
  [0.256, [0.904, 0.525, 0.416]],
  [0.258, [0.908, 0.536, 0.424]],
  [0.26, [0.908, 0.536, 0.424]],
  [0.262, [0.913, 0.546, 0.432]],
  [0.264, [0.913, 0.546, 0.432]],
  [0.266, [0.918, 0.557, 0.441]],
  [0.268, [0.918, 0.557, 0.441]],
  [0.27, [0.922, 0.567, 0.449]],
  [0.272, [0.922, 0.567, 0.449]],
  [0.274, [0.927, 0.578, 0.457]],
  [0.276, [0.927, 0.578, 0.457]],
  [0.278, [0.931, 0.589, 0.465]],
  [0.28, [0.931, 0.589, 0.465]],
  [0.282, [0.936, 0.599, 0.473]],
  [0.284, [0.936, 0.599, 0.473]],
  [0.286, [0.941, 0.61, 0.481]],
  [0.288, [0.941, 0.61, 0.481]],
  [0.29, [0.945, 0.621, 0.489]],
  [0.292, [0.945, 0.621, 0.489]],
  [0.294, [0.95, 0.631, 0.498]],
  [0.295, [0.95, 0.631, 0.498]],
  [0.297, [0.955, 0.642, 0.506]],
  [0.299, [0.955, 0.642, 0.506]],
  [0.301, [0.958, 0.651, 0.515]],
  [0.303, [0.958, 0.651, 0.515]],
  [0.305, [0.959, 0.66, 0.526]],
  [0.307, [0.959, 0.66, 0.526]],
  [0.309, [0.96, 0.668, 0.536]],
  [0.311, [0.96, 0.668, 0.536]],
  [0.313, [0.962, 0.676, 0.547]],
  [0.315, [0.962, 0.676, 0.547]],
  [0.317, [0.963, 0.684, 0.558]],
  [0.319, [0.963, 0.684, 0.558]],
  [0.321, [0.964, 0.693, 0.568]],
  [0.323, [0.964, 0.693, 0.568]],
  [0.325, [0.966, 0.701, 0.579]],
  [0.327, [0.966, 0.701, 0.579]],
  [0.329, [0.967, 0.709, 0.589]],
  [0.331, [0.967, 0.709, 0.589]],
  [0.333, [0.969, 0.718, 0.6]],
  [0.335, [0.969, 0.718, 0.6]],
  [0.337, [0.97, 0.726, 0.611]],
  [0.339, [0.97, 0.726, 0.611]],
  [0.341, [0.971, 0.734, 0.621]],
  [0.342, [0.971, 0.734, 0.621]],
  [0.344, [0.973, 0.743, 0.632]],
  [0.346, [0.973, 0.743, 0.632]],
  [0.348, [0.974, 0.751, 0.642]],
  [0.35, [0.974, 0.751, 0.642]],
  [0.352, [0.976, 0.759, 0.653]],
  [0.354, [0.976, 0.759, 0.653]],
  [0.356, [0.977, 0.767, 0.664]],
  [0.358, [0.977, 0.767, 0.664]],
  [0.36, [0.978, 0.776, 0.674]],
  [0.362, [0.978, 0.776, 0.674]],
  [0.364, [0.98, 0.784, 0.685]],
  [0.366, [0.98, 0.784, 0.685]],
  [0.368, [0.981, 0.792, 0.696]],
  [0.37, [0.981, 0.792, 0.696]],
  [0.372, [0.982, 0.801, 0.706]],
  [0.374, [0.982, 0.801, 0.706]],
  [0.376, [0.984, 0.809, 0.717]],
  [0.378, [0.984, 0.809, 0.717]],
  [0.38, [0.985, 0.817, 0.727]],
  [0.382, [0.985, 0.817, 0.727]],
  [0.384, [0.987, 0.826, 0.738]],
  [0.386, [0.987, 0.826, 0.738]],
  [0.387, [0.988, 0.834, 0.749]],
  [0.389, [0.988, 0.834, 0.749]],
  [0.391, [0.989, 0.842, 0.759]],
  [0.393, [0.989, 0.842, 0.759]],
  [0.395, [0.991, 0.851, 0.77]],
  [0.397, [0.991, 0.851, 0.77]],
  [0.399, [0.992, 0.859, 0.78]],
  [0.401, [0.992, 0.859, 0.78]],
  [0.403, [0.991, 0.863, 0.788]],
  [0.405, [0.991, 0.863, 0.788]],
  [0.407, [0.99, 0.867, 0.795]],
  [0.409, [0.99, 0.867, 0.795]],
  [0.411, [0.989, 0.872, 0.803]],
  [0.413, [0.989, 0.872, 0.803]],
  [0.415, [0.988, 0.876, 0.81]],
  [0.417, [0.988, 0.876, 0.81]],
  [0.419, [0.988, 0.88, 0.817]],
  [0.421, [0.988, 0.88, 0.817]],
  [0.423, [0.987, 0.885, 0.825]],
  [0.425, [0.987, 0.885, 0.825]],
  [0.427, [0.986, 0.889, 0.832]],
  [0.429, [0.986, 0.889, 0.832]],
  [0.431, [0.985, 0.893, 0.839]],
  [0.432, [0.985, 0.893, 0.839]],
  [0.434, [0.984, 0.898, 0.847]],
  [0.436, [0.984, 0.898, 0.847]],
  [0.438, [0.983, 0.902, 0.854]],
  [0.44, [0.983, 0.902, 0.854]],
  [0.442, [0.982, 0.906, 0.862]],
  [0.444, [0.982, 0.906, 0.862]],
  [0.446, [0.981, 0.91, 0.869]],
  [0.448, [0.981, 0.91, 0.869]],
  [0.45, [0.98, 0.915, 0.876]],
  [0.452, [0.98, 0.915, 0.876]],
  [0.454, [0.979, 0.919, 0.884]],
  [0.456, [0.979, 0.919, 0.884]],
  [0.458, [0.978, 0.923, 0.891]],
  [0.46, [0.978, 0.923, 0.891]],
  [0.462, [0.977, 0.928, 0.899]],
  [0.464, [0.977, 0.928, 0.899]],
  [0.466, [0.976, 0.932, 0.906]],
  [0.468, [0.976, 0.932, 0.906]],
  [0.47, [0.976, 0.936, 0.913]],
  [0.472, [0.976, 0.936, 0.913]],
  [0.474, [0.975, 0.941, 0.921]],
  [0.476, [0.975, 0.941, 0.921]],
  [0.477, [0.974, 0.945, 0.928]],
  [0.479, [0.974, 0.945, 0.928]],
  [0.481, [0.973, 0.949, 0.935]],
  [0.483, [0.973, 0.949, 0.935]],
  [0.485, [0.972, 0.954, 0.943]],
  [0.487, [0.972, 0.954, 0.943]],
  [0.489, [0.971, 0.958, 0.95]],
  [0.491, [0.971, 0.958, 0.95]],
  [0.493, [0.97, 0.962, 0.958]],
  [0.495, [0.97, 0.962, 0.958]],
  [0.497, [0.969, 0.966, 0.965]],
  [0.499, [0.969, 0.966, 0.965]],
  [0.501, [0.966, 0.967, 0.968]],
  [0.503, [0.966, 0.967, 0.968]],
  [0.505, [0.96, 0.964, 0.967]],
  [0.507, [0.96, 0.964, 0.967]],
  [0.509, [0.954, 0.962, 0.966]],
  [0.511, [0.954, 0.962, 0.966]],
  [0.513, [0.948, 0.959, 0.965]],
  [0.515, [0.948, 0.959, 0.965]],
  [0.517, [0.942, 0.956, 0.964]],
  [0.519, [0.942, 0.956, 0.964]],
  [0.521, [0.936, 0.953, 0.963]],
  [0.523, [0.936, 0.953, 0.963]],
  [0.524, [0.931, 0.951, 0.962]],
  [0.526, [0.931, 0.951, 0.962]],
  [0.528, [0.925, 0.948, 0.961]],
  [0.53, [0.925, 0.948, 0.961]],
  [0.532, [0.919, 0.945, 0.959]],
  [0.534, [0.919, 0.945, 0.959]],
  [0.536, [0.913, 0.942, 0.958]],
  [0.538, [0.913, 0.942, 0.958]],
  [0.54, [0.907, 0.94, 0.957]],
  [0.542, [0.907, 0.94, 0.957]],
  [0.544, [0.901, 0.937, 0.956]],
  [0.546, [0.901, 0.937, 0.956]],
  [0.548, [0.896, 0.934, 0.955]],
  [0.55, [0.896, 0.934, 0.955]],
  [0.552, [0.89, 0.931, 0.954]],
  [0.554, [0.89, 0.931, 0.954]],
  [0.556, [0.884, 0.928, 0.953]],
  [0.558, [0.884, 0.928, 0.953]],
  [0.56, [0.878, 0.926, 0.952]],
  [0.562, [0.878, 0.926, 0.952]],
  [0.564, [0.872, 0.923, 0.951]],
  [0.566, [0.872, 0.923, 0.951]],
  [0.568, [0.866, 0.92, 0.95]],
  [0.569, [0.866, 0.92, 0.95]],
  [0.571, [0.861, 0.917, 0.949]],
  [0.573, [0.861, 0.917, 0.949]],
  [0.575, [0.855, 0.915, 0.948]],
  [0.577, [0.855, 0.915, 0.948]],
  [0.579, [0.849, 0.912, 0.947]],
  [0.581, [0.849, 0.912, 0.947]],
  [0.583, [0.843, 0.909, 0.945]],
  [0.585, [0.843, 0.909, 0.945]],
  [0.587, [0.837, 0.906, 0.944]],
  [0.589, [0.837, 0.906, 0.944]],
  [0.591, [0.831, 0.904, 0.943]],
  [0.593, [0.831, 0.904, 0.943]],
  [0.595, [0.825, 0.901, 0.942]],
  [0.597, [0.825, 0.901, 0.942]],
  [0.599, [0.82, 0.898, 0.941]],
  [0.601, [0.82, 0.898, 0.941]],
  [0.603, [0.81, 0.893, 0.938]],
  [0.605, [0.81, 0.893, 0.938]],
  [0.607, [0.8, 0.888, 0.936]],
  [0.609, [0.8, 0.888, 0.936]],
  [0.611, [0.791, 0.883, 0.933]],
  [0.613, [0.791, 0.883, 0.933]],
  [0.614, [0.781, 0.878, 0.93]],
  [0.616, [0.781, 0.878, 0.93]],
  [0.618, [0.771, 0.873, 0.927]],
  [0.62, [0.771, 0.873, 0.927]],
  [0.622, [0.761, 0.869, 0.925]],
  [0.624, [0.761, 0.869, 0.925]],
  [0.626, [0.752, 0.864, 0.922]],
  [0.628, [0.752, 0.864, 0.922]],
  [0.63, [0.742, 0.859, 0.919]],
  [0.632, [0.742, 0.859, 0.919]],
  [0.634, [0.732, 0.854, 0.916]],
  [0.636, [0.732, 0.854, 0.916]],
  [0.638, [0.723, 0.849, 0.913]],
  [0.64, [0.723, 0.849, 0.913]],
  [0.642, [0.713, 0.844, 0.911]],
  [0.644, [0.713, 0.844, 0.911]],
  [0.646, [0.703, 0.839, 0.908]],
  [0.648, [0.703, 0.839, 0.908]],
  [0.65, [0.694, 0.834, 0.905]],
  [0.652, [0.694, 0.834, 0.905]],
  [0.654, [0.684, 0.829, 0.902]],
  [0.656, [0.684, 0.829, 0.902]],
  [0.658, [0.674, 0.824, 0.9]],
  [0.659, [0.674, 0.824, 0.9]],
  [0.661, [0.665, 0.819, 0.897]],
  [0.663, [0.665, 0.819, 0.897]],
  [0.665, [0.655, 0.814, 0.894]],
  [0.667, [0.655, 0.814, 0.894]],
  [0.669, [0.645, 0.809, 0.891]],
  [0.671, [0.645, 0.809, 0.891]],
  [0.673, [0.636, 0.805, 0.889]],
  [0.675, [0.636, 0.805, 0.889]],
  [0.677, [0.626, 0.8, 0.886]],
  [0.679, [0.626, 0.8, 0.886]],
  [0.681, [0.616, 0.795, 0.883]],
  [0.683, [0.616, 0.795, 0.883]],
  [0.685, [0.606, 0.79, 0.88]],
  [0.687, [0.606, 0.79, 0.88]],
  [0.689, [0.597, 0.785, 0.878]],
  [0.691, [0.597, 0.785, 0.878]],
  [0.693, [0.587, 0.78, 0.875]],
  [0.695, [0.587, 0.78, 0.875]],
  [0.697, [0.577, 0.775, 0.872]],
  [0.699, [0.577, 0.775, 0.872]],
  [0.701, [0.566, 0.769, 0.869]],
  [0.703, [0.566, 0.769, 0.869]],
  [0.705, [0.554, 0.761, 0.864]],
  [0.706, [0.554, 0.761, 0.864]],
  [0.708, [0.542, 0.753, 0.86]],
  [0.71, [0.542, 0.753, 0.86]],
  [0.712, [0.53, 0.746, 0.856]],
  [0.714, [0.53, 0.746, 0.856]],
  [0.716, [0.518, 0.738, 0.852]],
  [0.718, [0.518, 0.738, 0.852]],
  [0.72, [0.506, 0.73, 0.848]],
  [0.722, [0.506, 0.73, 0.848]],
  [0.724, [0.494, 0.723, 0.844]],
  [0.726, [0.494, 0.723, 0.844]],
  [0.728, [0.481, 0.715, 0.839]],
  [0.73, [0.481, 0.715, 0.839]],
  [0.732, [0.469, 0.707, 0.835]],
  [0.734, [0.469, 0.707, 0.835]],
  [0.736, [0.457, 0.7, 0.831]],
  [0.738, [0.457, 0.7, 0.831]],
  [0.74, [0.445, 0.692, 0.827]],
  [0.742, [0.445, 0.692, 0.827]],
  [0.744, [0.433, 0.684, 0.823]],
  [0.746, [0.433, 0.684, 0.823]],
  [0.748, [0.421, 0.676, 0.819]],
  [0.75, [0.421, 0.676, 0.819]],
  [0.751, [0.409, 0.669, 0.815]],
  [0.753, [0.409, 0.669, 0.815]],
  [0.755, [0.396, 0.661, 0.81]],
  [0.757, [0.396, 0.661, 0.81]],
  [0.759, [0.384, 0.653, 0.806]],
  [0.761, [0.384, 0.653, 0.806]],
  [0.763, [0.372, 0.646, 0.802]],
  [0.765, [0.372, 0.646, 0.802]],
  [0.767, [0.36, 0.638, 0.798]],
  [0.769, [0.36, 0.638, 0.798]],
  [0.771, [0.348, 0.63, 0.794]],
  [0.773, [0.348, 0.63, 0.794]],
  [0.775, [0.336, 0.623, 0.79]],
  [0.777, [0.336, 0.623, 0.79]],
  [0.779, [0.323, 0.615, 0.785]],
  [0.781, [0.323, 0.615, 0.785]],
  [0.783, [0.311, 0.607, 0.781]],
  [0.785, [0.311, 0.607, 0.781]],
  [0.787, [0.299, 0.6, 0.777]],
  [0.789, [0.299, 0.6, 0.777]],
  [0.791, [0.287, 0.592, 0.773]],
  [0.793, [0.287, 0.592, 0.773]],
  [0.795, [0.275, 0.584, 0.769]],
  [0.796, [0.275, 0.584, 0.769]],
  [0.798, [0.263, 0.576, 0.765]],
  [0.8, [0.263, 0.576, 0.765]],
  [0.802, [0.258, 0.57, 0.761]],
  [0.804, [0.258, 0.57, 0.761]],
  [0.806, [0.252, 0.563, 0.758]],
  [0.808, [0.252, 0.563, 0.758]],
  [0.81, [0.247, 0.556, 0.754]],
  [0.812, [0.247, 0.556, 0.754]],
  [0.814, [0.242, 0.549, 0.751]],
  [0.816, [0.242, 0.549, 0.751]],
  [0.818, [0.237, 0.542, 0.747]],
  [0.82, [0.237, 0.542, 0.747]],
  [0.822, [0.231, 0.535, 0.743]],
  [0.824, [0.231, 0.535, 0.743]],
  [0.826, [0.226, 0.528, 0.74]],
  [0.828, [0.226, 0.528, 0.74]],
  [0.83, [0.221, 0.521, 0.736]],
  [0.832, [0.221, 0.521, 0.736]],
  [0.834, [0.216, 0.514, 0.733]],
  [0.836, [0.216, 0.514, 0.733]],
  [0.838, [0.21, 0.507, 0.729]],
  [0.84, [0.21, 0.507, 0.729]],
  [0.841, [0.205, 0.5, 0.726]],
  [0.843, [0.205, 0.5, 0.726]],
  [0.845, [0.2, 0.493, 0.722]],
  [0.847, [0.2, 0.493, 0.722]],
  [0.849, [0.195, 0.487, 0.719]],
  [0.851, [0.195, 0.487, 0.719]],
  [0.853, [0.19, 0.48, 0.715]],
  [0.855, [0.19, 0.48, 0.715]],
  [0.857, [0.184, 0.473, 0.712]],
  [0.859, [0.184, 0.473, 0.712]],
  [0.861, [0.179, 0.466, 0.708]],
  [0.863, [0.179, 0.466, 0.708]],
  [0.865, [0.174, 0.459, 0.705]],
  [0.867, [0.174, 0.459, 0.705]],
  [0.869, [0.169, 0.452, 0.701]],
  [0.871, [0.169, 0.452, 0.701]],
  [0.873, [0.163, 0.445, 0.698]],
  [0.875, [0.163, 0.445, 0.698]],
  [0.877, [0.158, 0.438, 0.694]],
  [0.879, [0.158, 0.438, 0.694]],
  [0.881, [0.153, 0.431, 0.69]],
  [0.883, [0.153, 0.431, 0.69]],
  [0.885, [0.148, 0.424, 0.687]],
  [0.886, [0.148, 0.424, 0.687]],
  [0.888, [0.142, 0.417, 0.683]],
  [0.89, [0.142, 0.417, 0.683]],
  [0.892, [0.137, 0.41, 0.68]],
  [0.894, [0.137, 0.41, 0.68]],
  [0.896, [0.132, 0.403, 0.676]],
  [0.898, [0.132, 0.403, 0.676]],
  [0.9, [0.127, 0.396, 0.669]],
  [0.902, [0.127, 0.396, 0.669]],
  [0.904, [0.123, 0.388, 0.657]],
  [0.906, [0.123, 0.388, 0.657]],
  [0.908, [0.119, 0.379, 0.646]],
  [0.91, [0.119, 0.379, 0.646]],
  [0.912, [0.114, 0.371, 0.634]],
  [0.914, [0.114, 0.371, 0.634]],
  [0.916, [0.11, 0.363, 0.623]],
  [0.918, [0.11, 0.363, 0.623]],
  [0.92, [0.106, 0.354, 0.611]],
  [0.922, [0.106, 0.354, 0.611]],
  [0.924, [0.101, 0.346, 0.6]],
  [0.926, [0.101, 0.346, 0.6]],
  [0.928, [0.097, 0.338, 0.588]],
  [0.93, [0.097, 0.338, 0.588]],
  [0.932, [0.093, 0.329, 0.576]],
  [0.933, [0.093, 0.329, 0.576]],
  [0.935, [0.089, 0.321, 0.565]],
  [0.937, [0.089, 0.321, 0.565]],
  [0.939, [0.084, 0.313, 0.553]],
  [0.941, [0.084, 0.313, 0.553]],
  [0.943, [0.08, 0.304, 0.542]],
  [0.945, [0.08, 0.304, 0.542]],
  [0.947, [0.076, 0.296, 0.53]],
  [0.949, [0.076, 0.296, 0.53]],
  [0.951, [0.071, 0.288, 0.519]],
  [0.953, [0.071, 0.288, 0.519]],
  [0.955, [0.067, 0.28, 0.507]],
  [0.957, [0.067, 0.28, 0.507]],
  [0.959, [0.063, 0.271, 0.496]],
  [0.961, [0.063, 0.271, 0.496]],
  [0.963, [0.058, 0.263, 0.484]],
  [0.965, [0.058, 0.263, 0.484]],
  [0.967, [0.054, 0.255, 0.473]],
  [0.969, [0.054, 0.255, 0.473]],
  [0.971, [0.05, 0.246, 0.461]],
  [0.973, [0.05, 0.246, 0.461]],
  [0.975, [0.045, 0.238, 0.45]],
  [0.977, [0.045, 0.238, 0.45]],
  [0.978, [0.041, 0.23, 0.438]],
  [0.98, [0.041, 0.23, 0.438]],
  [0.982, [0.037, 0.221, 0.427]],
  [0.984, [0.037, 0.221, 0.427]],
  [0.986, [0.033, 0.213, 0.415]],
  [0.988, [0.033, 0.213, 0.415]],
  [0.99, [0.028, 0.205, 0.403]],
  [0.992, [0.028, 0.205, 0.403]],
  [0.994, [0.024, 0.197, 0.392]],
  [0.996, [0.024, 0.197, 0.392]],
  [0.998, [0.02, 0.188, 0.38]],
  [1, [0.02, 0.188, 0.38]]
], Gf = [
  [0, [0.404, 0, 0.122]],
  [2e-3, [0.404, 0, 0.122]],
  [4e-3, [0.415, 4e-3, 0.123]],
  [6e-3, [0.415, 4e-3, 0.123]],
  [8e-3, [0.427, 7e-3, 0.125]],
  [0.01, [0.427, 7e-3, 0.125]],
  [0.012, [0.439, 0.011, 0.127]],
  [0.014, [0.439, 0.011, 0.127]],
  [0.016, [0.45, 0.015, 0.129]],
  [0.018, [0.45, 0.015, 0.129]],
  [0.02, [0.462, 0.018, 0.131]],
  [0.022, [0.462, 0.018, 0.131]],
  [0.023, [0.473, 0.022, 0.133]],
  [0.025, [0.473, 0.022, 0.133]],
  [0.027, [0.485, 0.026, 0.134]],
  [0.029, [0.485, 0.026, 0.134]],
  [0.031, [0.496, 0.03, 0.136]],
  [0.033, [0.496, 0.03, 0.136]],
  [0.035, [0.508, 0.033, 0.138]],
  [0.037, [0.508, 0.033, 0.138]],
  [0.039, [0.519, 0.037, 0.14]],
  [0.041, [0.519, 0.037, 0.14]],
  [0.043, [0.531, 0.041, 0.142]],
  [0.045, [0.531, 0.041, 0.142]],
  [0.047, [0.542, 0.044, 0.144]],
  [0.049, [0.542, 0.044, 0.144]],
  [0.051, [0.554, 0.048, 0.146]],
  [0.053, [0.554, 0.048, 0.146]],
  [0.055, [0.565, 0.052, 0.147]],
  [0.057, [0.565, 0.052, 0.147]],
  [0.059, [0.577, 0.055, 0.149]],
  [0.061, [0.577, 0.055, 0.149]],
  [0.063, [0.588, 0.059, 0.151]],
  [0.065, [0.588, 0.059, 0.151]],
  [0.067, [0.6, 0.063, 0.153]],
  [0.068, [0.6, 0.063, 0.153]],
  [0.07, [0.612, 0.066, 0.155]],
  [0.072, [0.612, 0.066, 0.155]],
  [0.074, [0.623, 0.07, 0.157]],
  [0.076, [0.623, 0.07, 0.157]],
  [0.078, [0.635, 0.074, 0.158]],
  [0.08, [0.635, 0.074, 0.158]],
  [0.082, [0.646, 0.078, 0.16]],
  [0.084, [0.646, 0.078, 0.16]],
  [0.086, [0.658, 0.081, 0.162]],
  [0.088, [0.658, 0.081, 0.162]],
  [0.09, [0.669, 0.085, 0.164]],
  [0.092, [0.669, 0.085, 0.164]],
  [0.094, [0.681, 0.089, 0.166]],
  [0.096, [0.681, 0.089, 0.166]],
  [0.098, [0.692, 0.092, 0.168]],
  [0.1, [0.692, 0.092, 0.168]],
  [0.102, [0.701, 0.1, 0.171]],
  [0.104, [0.701, 0.1, 0.171]],
  [0.106, [0.706, 0.111, 0.176]],
  [0.108, [0.706, 0.111, 0.176]],
  [0.11, [0.712, 0.122, 0.182]],
  [0.112, [0.712, 0.122, 0.182]],
  [0.114, [0.717, 0.133, 0.187]],
  [0.115, [0.717, 0.133, 0.187]],
  [0.117, [0.723, 0.144, 0.192]],
  [0.119, [0.723, 0.144, 0.192]],
  [0.121, [0.728, 0.155, 0.197]],
  [0.123, [0.728, 0.155, 0.197]],
  [0.125, [0.734, 0.166, 0.203]],
  [0.127, [0.734, 0.166, 0.203]],
  [0.129, [0.74, 0.177, 0.208]],
  [0.131, [0.74, 0.177, 0.208]],
  [0.133, [0.745, 0.188, 0.213]],
  [0.135, [0.745, 0.188, 0.213]],
  [0.137, [0.751, 0.199, 0.218]],
  [0.139, [0.751, 0.199, 0.218]],
  [0.141, [0.756, 0.21, 0.224]],
  [0.143, [0.756, 0.21, 0.224]],
  [0.145, [0.762, 0.221, 0.229]],
  [0.147, [0.762, 0.221, 0.229]],
  [0.149, [0.767, 0.233, 0.234]],
  [0.151, [0.767, 0.233, 0.234]],
  [0.153, [0.773, 0.244, 0.239]],
  [0.155, [0.773, 0.244, 0.239]],
  [0.157, [0.778, 0.255, 0.244]],
  [0.159, [0.778, 0.255, 0.244]],
  [0.16, [0.784, 0.266, 0.25]],
  [0.162, [0.784, 0.266, 0.25]],
  [0.164, [0.789, 0.277, 0.255]],
  [0.166, [0.789, 0.277, 0.255]],
  [0.168, [0.795, 0.288, 0.26]],
  [0.17, [0.795, 0.288, 0.26]],
  [0.172, [0.8, 0.299, 0.265]],
  [0.174, [0.8, 0.299, 0.265]],
  [0.176, [0.806, 0.31, 0.271]],
  [0.178, [0.806, 0.31, 0.271]],
  [0.18, [0.812, 0.321, 0.276]],
  [0.182, [0.812, 0.321, 0.276]],
  [0.184, [0.817, 0.332, 0.281]],
  [0.186, [0.817, 0.332, 0.281]],
  [0.188, [0.823, 0.343, 0.286]],
  [0.19, [0.823, 0.343, 0.286]],
  [0.192, [0.828, 0.354, 0.292]],
  [0.194, [0.828, 0.354, 0.292]],
  [0.196, [0.834, 0.365, 0.297]],
  [0.198, [0.834, 0.365, 0.297]],
  [0.2, [0.839, 0.376, 0.302]],
  [0.202, [0.839, 0.376, 0.302]],
  [0.204, [0.844, 0.387, 0.31]],
  [0.205, [0.844, 0.387, 0.31]],
  [0.207, [0.848, 0.398, 0.318]],
  [0.209, [0.848, 0.398, 0.318]],
  [0.211, [0.853, 0.408, 0.326]],
  [0.213, [0.853, 0.408, 0.326]],
  [0.215, [0.858, 0.419, 0.335]],
  [0.217, [0.858, 0.419, 0.335]],
  [0.219, [0.862, 0.43, 0.343]],
  [0.221, [0.862, 0.43, 0.343]],
  [0.223, [0.867, 0.44, 0.351]],
  [0.225, [0.867, 0.44, 0.351]],
  [0.227, [0.872, 0.451, 0.359]],
  [0.229, [0.872, 0.451, 0.359]],
  [0.231, [0.876, 0.461, 0.367]],
  [0.233, [0.876, 0.461, 0.367]],
  [0.235, [0.881, 0.472, 0.375]],
  [0.237, [0.881, 0.472, 0.375]],
  [0.239, [0.885, 0.483, 0.383]],
  [0.241, [0.885, 0.483, 0.383]],
  [0.243, [0.89, 0.493, 0.392]],
  [0.245, [0.89, 0.493, 0.392]],
  [0.247, [0.895, 0.504, 0.4]],
  [0.249, [0.895, 0.504, 0.4]],
  [0.25, [0.899, 0.514, 0.408]],
  [0.252, [0.899, 0.514, 0.408]],
  [0.254, [0.904, 0.525, 0.416]],
  [0.256, [0.904, 0.525, 0.416]],
  [0.258, [0.908, 0.536, 0.424]],
  [0.26, [0.908, 0.536, 0.424]],
  [0.262, [0.913, 0.546, 0.432]],
  [0.264, [0.913, 0.546, 0.432]],
  [0.266, [0.918, 0.557, 0.441]],
  [0.268, [0.918, 0.557, 0.441]],
  [0.27, [0.922, 0.567, 0.449]],
  [0.272, [0.922, 0.567, 0.449]],
  [0.274, [0.927, 0.578, 0.457]],
  [0.276, [0.927, 0.578, 0.457]],
  [0.278, [0.931, 0.589, 0.465]],
  [0.28, [0.931, 0.589, 0.465]],
  [0.282, [0.936, 0.599, 0.473]],
  [0.284, [0.936, 0.599, 0.473]],
  [0.286, [0.941, 0.61, 0.481]],
  [0.288, [0.941, 0.61, 0.481]],
  [0.29, [0.945, 0.621, 0.489]],
  [0.292, [0.945, 0.621, 0.489]],
  [0.294, [0.95, 0.631, 0.498]],
  [0.295, [0.95, 0.631, 0.498]],
  [0.297, [0.955, 0.642, 0.506]],
  [0.299, [0.955, 0.642, 0.506]],
  [0.301, [0.958, 0.651, 0.515]],
  [0.303, [0.958, 0.651, 0.515]],
  [0.305, [0.959, 0.66, 0.526]],
  [0.307, [0.959, 0.66, 0.526]],
  [0.309, [0.96, 0.668, 0.536]],
  [0.311, [0.96, 0.668, 0.536]],
  [0.313, [0.962, 0.676, 0.547]],
  [0.315, [0.962, 0.676, 0.547]],
  [0.317, [0.963, 0.684, 0.558]],
  [0.319, [0.963, 0.684, 0.558]],
  [0.321, [0.964, 0.693, 0.568]],
  [0.323, [0.964, 0.693, 0.568]],
  [0.325, [0.966, 0.701, 0.579]],
  [0.327, [0.966, 0.701, 0.579]],
  [0.329, [0.967, 0.709, 0.589]],
  [0.331, [0.967, 0.709, 0.589]],
  [0.333, [0.969, 0.718, 0.6]],
  [0.335, [0.969, 0.718, 0.6]],
  [0.337, [0.97, 0.726, 0.611]],
  [0.339, [0.97, 0.726, 0.611]],
  [0.341, [0.971, 0.734, 0.621]],
  [0.342, [0.971, 0.734, 0.621]],
  [0.344, [0.973, 0.743, 0.632]],
  [0.346, [0.973, 0.743, 0.632]],
  [0.348, [0.974, 0.751, 0.642]],
  [0.35, [0.974, 0.751, 0.642]],
  [0.352, [0.976, 0.759, 0.653]],
  [0.354, [0.976, 0.759, 0.653]],
  [0.356, [0.977, 0.767, 0.664]],
  [0.358, [0.977, 0.767, 0.664]],
  [0.36, [0.978, 0.776, 0.674]],
  [0.362, [0.978, 0.776, 0.674]],
  [0.364, [0.98, 0.784, 0.685]],
  [0.366, [0.98, 0.784, 0.685]],
  [0.368, [0.981, 0.792, 0.696]],
  [0.37, [0.981, 0.792, 0.696]],
  [0.372, [0.982, 0.801, 0.706]],
  [0.374, [0.982, 0.801, 0.706]],
  [0.376, [0.984, 0.809, 0.717]],
  [0.378, [0.984, 0.809, 0.717]],
  [0.38, [0.985, 0.817, 0.727]],
  [0.382, [0.985, 0.817, 0.727]],
  [0.384, [0.987, 0.826, 0.738]],
  [0.386, [0.987, 0.826, 0.738]],
  [0.387, [0.988, 0.834, 0.749]],
  [0.389, [0.988, 0.834, 0.749]],
  [0.391, [0.989, 0.842, 0.759]],
  [0.393, [0.989, 0.842, 0.759]],
  [0.395, [0.991, 0.851, 0.77]],
  [0.397, [0.991, 0.851, 0.77]],
  [0.399, [0.992, 0.859, 0.78]],
  [0.401, [0.992, 0.859, 0.78]],
  [0.403, [0.992, 0.864, 0.789]],
  [0.405, [0.992, 0.864, 0.789]],
  [0.407, [0.993, 0.87, 0.798]],
  [0.409, [0.993, 0.87, 0.798]],
  [0.411, [0.993, 0.875, 0.806]],
  [0.413, [0.993, 0.875, 0.806]],
  [0.415, [0.993, 0.881, 0.815]],
  [0.417, [0.993, 0.881, 0.815]],
  [0.419, [0.994, 0.887, 0.823]],
  [0.421, [0.994, 0.887, 0.823]],
  [0.423, [0.994, 0.892, 0.832]],
  [0.425, [0.994, 0.892, 0.832]],
  [0.427, [0.994, 0.898, 0.841]],
  [0.429, [0.994, 0.898, 0.841]],
  [0.431, [0.995, 0.903, 0.849]],
  [0.432, [0.995, 0.903, 0.849]],
  [0.434, [0.995, 0.909, 0.858]],
  [0.436, [0.995, 0.909, 0.858]],
  [0.438, [0.995, 0.914, 0.867]],
  [0.44, [0.995, 0.914, 0.867]],
  [0.442, [0.996, 0.92, 0.875]],
  [0.444, [0.996, 0.92, 0.875]],
  [0.446, [0.996, 0.925, 0.884]],
  [0.448, [0.996, 0.925, 0.884]],
  [0.45, [0.996, 0.931, 0.892]],
  [0.452, [0.996, 0.931, 0.892]],
  [0.454, [0.996, 0.936, 0.901]],
  [0.456, [0.996, 0.936, 0.901]],
  [0.458, [0.997, 0.942, 0.91]],
  [0.46, [0.997, 0.942, 0.91]],
  [0.462, [0.997, 0.947, 0.918]],
  [0.464, [0.997, 0.947, 0.918]],
  [0.466, [0.997, 0.953, 0.927]],
  [0.468, [0.997, 0.953, 0.927]],
  [0.47, [0.998, 0.958, 0.935]],
  [0.472, [0.998, 0.958, 0.935]],
  [0.474, [0.998, 0.964, 0.944]],
  [0.476, [0.998, 0.964, 0.944]],
  [0.477, [0.998, 0.97, 0.953]],
  [0.479, [0.998, 0.97, 0.953]],
  [0.481, [0.999, 0.975, 0.961]],
  [0.483, [0.999, 0.975, 0.961]],
  [0.485, [0.999, 0.981, 0.97]],
  [0.487, [0.999, 0.981, 0.97]],
  [0.489, [0.999, 0.986, 0.978]],
  [0.491, [0.999, 0.986, 0.978]],
  [0.493, [1, 0.992, 0.987]],
  [0.495, [1, 0.992, 0.987]],
  [0.497, [1, 0.997, 0.996]],
  [0.499, [1, 0.997, 0.996]],
  [0.501, [0.998, 0.998, 0.998]],
  [0.503, [0.998, 0.998, 0.998]],
  [0.505, [0.993, 0.993, 0.993]],
  [0.507, [0.993, 0.993, 0.993]],
  [0.509, [0.988, 0.988, 0.988]],
  [0.511, [0.988, 0.988, 0.988]],
  [0.513, [0.983, 0.983, 0.983]],
  [0.515, [0.983, 0.983, 0.983]],
  [0.517, [0.979, 0.979, 0.979]],
  [0.519, [0.979, 0.979, 0.979]],
  [0.521, [0.974, 0.974, 0.974]],
  [0.523, [0.974, 0.974, 0.974]],
  [0.524, [0.969, 0.969, 0.969]],
  [0.526, [0.969, 0.969, 0.969]],
  [0.528, [0.964, 0.964, 0.964]],
  [0.53, [0.964, 0.964, 0.964]],
  [0.532, [0.959, 0.959, 0.959]],
  [0.534, [0.959, 0.959, 0.959]],
  [0.536, [0.955, 0.955, 0.955]],
  [0.538, [0.955, 0.955, 0.955]],
  [0.54, [0.95, 0.95, 0.95]],
  [0.542, [0.95, 0.95, 0.95]],
  [0.544, [0.945, 0.945, 0.945]],
  [0.546, [0.945, 0.945, 0.945]],
  [0.548, [0.94, 0.94, 0.94]],
  [0.55, [0.94, 0.94, 0.94]],
  [0.552, [0.936, 0.936, 0.936]],
  [0.554, [0.936, 0.936, 0.936]],
  [0.556, [0.931, 0.931, 0.931]],
  [0.558, [0.931, 0.931, 0.931]],
  [0.56, [0.926, 0.926, 0.926]],
  [0.562, [0.926, 0.926, 0.926]],
  [0.564, [0.921, 0.921, 0.921]],
  [0.566, [0.921, 0.921, 0.921]],
  [0.568, [0.917, 0.917, 0.917]],
  [0.569, [0.917, 0.917, 0.917]],
  [0.571, [0.912, 0.912, 0.912]],
  [0.573, [0.912, 0.912, 0.912]],
  [0.575, [0.907, 0.907, 0.907]],
  [0.577, [0.907, 0.907, 0.907]],
  [0.579, [0.902, 0.902, 0.902]],
  [0.581, [0.902, 0.902, 0.902]],
  [0.583, [0.898, 0.898, 0.898]],
  [0.585, [0.898, 0.898, 0.898]],
  [0.587, [0.893, 0.893, 0.893]],
  [0.589, [0.893, 0.893, 0.893]],
  [0.591, [0.888, 0.888, 0.888]],
  [0.593, [0.888, 0.888, 0.888]],
  [0.595, [0.883, 0.883, 0.883]],
  [0.597, [0.883, 0.883, 0.883]],
  [0.599, [0.878, 0.878, 0.878]],
  [0.601, [0.878, 0.878, 0.878]],
  [0.603, [0.873, 0.873, 0.873]],
  [0.605, [0.873, 0.873, 0.873]],
  [0.607, [0.867, 0.867, 0.867]],
  [0.609, [0.867, 0.867, 0.867]],
  [0.611, [0.861, 0.861, 0.861]],
  [0.613, [0.861, 0.861, 0.861]],
  [0.614, [0.855, 0.855, 0.855]],
  [0.616, [0.855, 0.855, 0.855]],
  [0.618, [0.849, 0.849, 0.849]],
  [0.62, [0.849, 0.849, 0.849]],
  [0.622, [0.843, 0.843, 0.843]],
  [0.624, [0.843, 0.843, 0.843]],
  [0.626, [0.838, 0.838, 0.838]],
  [0.628, [0.838, 0.838, 0.838]],
  [0.63, [0.832, 0.832, 0.832]],
  [0.632, [0.832, 0.832, 0.832]],
  [0.634, [0.826, 0.826, 0.826]],
  [0.636, [0.826, 0.826, 0.826]],
  [0.638, [0.82, 0.82, 0.82]],
  [0.64, [0.82, 0.82, 0.82]],
  [0.642, [0.814, 0.814, 0.814]],
  [0.644, [0.814, 0.814, 0.814]],
  [0.646, [0.808, 0.808, 0.808]],
  [0.648, [0.808, 0.808, 0.808]],
  [0.65, [0.802, 0.802, 0.802]],
  [0.652, [0.802, 0.802, 0.802]],
  [0.654, [0.797, 0.797, 0.797]],
  [0.656, [0.797, 0.797, 0.797]],
  [0.658, [0.791, 0.791, 0.791]],
  [0.659, [0.791, 0.791, 0.791]],
  [0.661, [0.785, 0.785, 0.785]],
  [0.663, [0.785, 0.785, 0.785]],
  [0.665, [0.779, 0.779, 0.779]],
  [0.667, [0.779, 0.779, 0.779]],
  [0.669, [0.773, 0.773, 0.773]],
  [0.671, [0.773, 0.773, 0.773]],
  [0.673, [0.767, 0.767, 0.767]],
  [0.675, [0.767, 0.767, 0.767]],
  [0.677, [0.762, 0.762, 0.762]],
  [0.679, [0.762, 0.762, 0.762]],
  [0.681, [0.756, 0.756, 0.756]],
  [0.683, [0.756, 0.756, 0.756]],
  [0.685, [0.75, 0.75, 0.75]],
  [0.687, [0.75, 0.75, 0.75]],
  [0.689, [0.744, 0.744, 0.744]],
  [0.691, [0.744, 0.744, 0.744]],
  [0.693, [0.738, 0.738, 0.738]],
  [0.695, [0.738, 0.738, 0.738]],
  [0.697, [0.732, 0.732, 0.732]],
  [0.699, [0.732, 0.732, 0.732]],
  [0.701, [0.725, 0.725, 0.725]],
  [0.703, [0.725, 0.725, 0.725]],
  [0.705, [0.718, 0.718, 0.718]],
  [0.706, [0.718, 0.718, 0.718]],
  [0.708, [0.71, 0.71, 0.71]],
  [0.71, [0.71, 0.71, 0.71]],
  [0.712, [0.702, 0.702, 0.702]],
  [0.714, [0.702, 0.702, 0.702]],
  [0.716, [0.694, 0.694, 0.694]],
  [0.718, [0.694, 0.694, 0.694]],
  [0.72, [0.686, 0.686, 0.686]],
  [0.722, [0.686, 0.686, 0.686]],
  [0.724, [0.678, 0.678, 0.678]],
  [0.726, [0.678, 0.678, 0.678]],
  [0.728, [0.671, 0.671, 0.671]],
  [0.73, [0.671, 0.671, 0.671]],
  [0.732, [0.663, 0.663, 0.663]],
  [0.734, [0.663, 0.663, 0.663]],
  [0.736, [0.655, 0.655, 0.655]],
  [0.738, [0.655, 0.655, 0.655]],
  [0.74, [0.647, 0.647, 0.647]],
  [0.742, [0.647, 0.647, 0.647]],
  [0.744, [0.639, 0.639, 0.639]],
  [0.746, [0.639, 0.639, 0.639]],
  [0.748, [0.631, 0.631, 0.631]],
  [0.75, [0.631, 0.631, 0.631]],
  [0.751, [0.624, 0.624, 0.624]],
  [0.753, [0.624, 0.624, 0.624]],
  [0.755, [0.616, 0.616, 0.616]],
  [0.757, [0.616, 0.616, 0.616]],
  [0.759, [0.608, 0.608, 0.608]],
  [0.761, [0.608, 0.608, 0.608]],
  [0.763, [0.6, 0.6, 0.6]],
  [0.765, [0.6, 0.6, 0.6]],
  [0.767, [0.592, 0.592, 0.592]],
  [0.769, [0.592, 0.592, 0.592]],
  [0.771, [0.584, 0.584, 0.584]],
  [0.773, [0.584, 0.584, 0.584]],
  [0.775, [0.576, 0.576, 0.576]],
  [0.777, [0.576, 0.576, 0.576]],
  [0.779, [0.569, 0.569, 0.569]],
  [0.781, [0.569, 0.569, 0.569]],
  [0.783, [0.561, 0.561, 0.561]],
  [0.785, [0.561, 0.561, 0.561]],
  [0.787, [0.553, 0.553, 0.553]],
  [0.789, [0.553, 0.553, 0.553]],
  [0.791, [0.545, 0.545, 0.545]],
  [0.793, [0.545, 0.545, 0.545]],
  [0.795, [0.537, 0.537, 0.537]],
  [0.796, [0.537, 0.537, 0.537]],
  [0.798, [0.529, 0.529, 0.529]],
  [0.8, [0.529, 0.529, 0.529]],
  [0.802, [0.52, 0.52, 0.52]],
  [0.804, [0.52, 0.52, 0.52]],
  [0.806, [0.512, 0.512, 0.512]],
  [0.808, [0.512, 0.512, 0.512]],
  [0.81, [0.503, 0.503, 0.503]],
  [0.812, [0.503, 0.503, 0.503]],
  [0.814, [0.494, 0.494, 0.494]],
  [0.816, [0.494, 0.494, 0.494]],
  [0.818, [0.485, 0.485, 0.485]],
  [0.82, [0.485, 0.485, 0.485]],
  [0.822, [0.476, 0.476, 0.476]],
  [0.824, [0.476, 0.476, 0.476]],
  [0.826, [0.467, 0.467, 0.467]],
  [0.828, [0.467, 0.467, 0.467]],
  [0.83, [0.458, 0.458, 0.458]],
  [0.832, [0.458, 0.458, 0.458]],
  [0.834, [0.449, 0.449, 0.449]],
  [0.836, [0.449, 0.449, 0.449]],
  [0.838, [0.44, 0.44, 0.44]],
  [0.84, [0.44, 0.44, 0.44]],
  [0.841, [0.431, 0.431, 0.431]],
  [0.843, [0.431, 0.431, 0.431]],
  [0.845, [0.422, 0.422, 0.422]],
  [0.847, [0.422, 0.422, 0.422]],
  [0.849, [0.413, 0.413, 0.413]],
  [0.851, [0.413, 0.413, 0.413]],
  [0.853, [0.405, 0.405, 0.405]],
  [0.855, [0.405, 0.405, 0.405]],
  [0.857, [0.396, 0.396, 0.396]],
  [0.859, [0.396, 0.396, 0.396]],
  [0.861, [0.387, 0.387, 0.387]],
  [0.863, [0.387, 0.387, 0.387]],
  [0.865, [0.378, 0.378, 0.378]],
  [0.867, [0.378, 0.378, 0.378]],
  [0.869, [0.369, 0.369, 0.369]],
  [0.871, [0.369, 0.369, 0.369]],
  [0.873, [0.36, 0.36, 0.36]],
  [0.875, [0.36, 0.36, 0.36]],
  [0.877, [0.351, 0.351, 0.351]],
  [0.879, [0.351, 0.351, 0.351]],
  [0.881, [0.342, 0.342, 0.342]],
  [0.883, [0.342, 0.342, 0.342]],
  [0.885, [0.333, 0.333, 0.333]],
  [0.886, [0.333, 0.333, 0.333]],
  [0.888, [0.324, 0.324, 0.324]],
  [0.89, [0.324, 0.324, 0.324]],
  [0.892, [0.315, 0.315, 0.315]],
  [0.894, [0.315, 0.315, 0.315]],
  [0.896, [0.306, 0.306, 0.306]],
  [0.898, [0.306, 0.306, 0.306]],
  [0.9, [0.298, 0.298, 0.298]],
  [0.902, [0.298, 0.298, 0.298]],
  [0.904, [0.29, 0.29, 0.29]],
  [0.906, [0.29, 0.29, 0.29]],
  [0.908, [0.282, 0.282, 0.282]],
  [0.91, [0.282, 0.282, 0.282]],
  [0.912, [0.275, 0.275, 0.275]],
  [0.914, [0.275, 0.275, 0.275]],
  [0.916, [0.267, 0.267, 0.267]],
  [0.918, [0.267, 0.267, 0.267]],
  [0.92, [0.259, 0.259, 0.259]],
  [0.922, [0.259, 0.259, 0.259]],
  [0.924, [0.251, 0.251, 0.251]],
  [0.926, [0.251, 0.251, 0.251]],
  [0.928, [0.243, 0.243, 0.243]],
  [0.93, [0.243, 0.243, 0.243]],
  [0.932, [0.235, 0.235, 0.235]],
  [0.933, [0.235, 0.235, 0.235]],
  [0.935, [0.227, 0.227, 0.227]],
  [0.937, [0.227, 0.227, 0.227]],
  [0.939, [0.22, 0.22, 0.22]],
  [0.941, [0.22, 0.22, 0.22]],
  [0.943, [0.212, 0.212, 0.212]],
  [0.945, [0.212, 0.212, 0.212]],
  [0.947, [0.204, 0.204, 0.204]],
  [0.949, [0.204, 0.204, 0.204]],
  [0.951, [0.196, 0.196, 0.196]],
  [0.953, [0.196, 0.196, 0.196]],
  [0.955, [0.188, 0.188, 0.188]],
  [0.957, [0.188, 0.188, 0.188]],
  [0.959, [0.18, 0.18, 0.18]],
  [0.961, [0.18, 0.18, 0.18]],
  [0.963, [0.173, 0.173, 0.173]],
  [0.965, [0.173, 0.173, 0.173]],
  [0.967, [0.165, 0.165, 0.165]],
  [0.969, [0.165, 0.165, 0.165]],
  [0.971, [0.157, 0.157, 0.157]],
  [0.973, [0.157, 0.157, 0.157]],
  [0.975, [0.149, 0.149, 0.149]],
  [0.977, [0.149, 0.149, 0.149]],
  [0.978, [0.141, 0.141, 0.141]],
  [0.98, [0.141, 0.141, 0.141]],
  [0.982, [0.133, 0.133, 0.133]],
  [0.984, [0.133, 0.133, 0.133]],
  [0.986, [0.125, 0.125, 0.125]],
  [0.988, [0.125, 0.125, 0.125]],
  [0.99, [0.118, 0.118, 0.118]],
  [0.992, [0.118, 0.118, 0.118]],
  [0.994, [0.11, 0.11, 0.11]],
  [0.996, [0.11, 0.11, 0.11]],
  [0.998, [0.102, 0.102, 0.102]],
  [1, [0.102, 0.102, 0.102]]
], Wf = [
  [0, [0.647, 0, 0.149]],
  [2e-3, [0.647, 0, 0.149]],
  [4e-3, [0.655, 7e-3, 0.149]],
  [6e-3, [0.655, 7e-3, 0.149]],
  [8e-3, [0.662, 0.015, 0.149]],
  [0.01, [0.662, 0.015, 0.149]],
  [0.012, [0.67, 0.022, 0.149]],
  [0.014, [0.67, 0.022, 0.149]],
  [0.016, [0.678, 0.03, 0.15]],
  [0.018, [0.678, 0.03, 0.15]],
  [0.02, [0.686, 0.037, 0.15]],
  [0.022, [0.686, 0.037, 0.15]],
  [0.023, [0.693, 0.044, 0.15]],
  [0.025, [0.693, 0.044, 0.15]],
  [0.027, [0.701, 0.052, 0.15]],
  [0.029, [0.701, 0.052, 0.15]],
  [0.031, [0.709, 0.059, 0.15]],
  [0.033, [0.709, 0.059, 0.15]],
  [0.035, [0.716, 0.066, 0.15]],
  [0.037, [0.716, 0.066, 0.15]],
  [0.039, [0.724, 0.074, 0.151]],
  [0.041, [0.724, 0.074, 0.151]],
  [0.043, [0.732, 0.081, 0.151]],
  [0.045, [0.732, 0.081, 0.151]],
  [0.047, [0.739, 0.089, 0.151]],
  [0.049, [0.739, 0.089, 0.151]],
  [0.051, [0.747, 0.096, 0.151]],
  [0.053, [0.747, 0.096, 0.151]],
  [0.055, [0.755, 0.103, 0.151]],
  [0.057, [0.755, 0.103, 0.151]],
  [0.059, [0.762, 0.111, 0.151]],
  [0.061, [0.762, 0.111, 0.151]],
  [0.063, [0.77, 0.118, 0.151]],
  [0.065, [0.77, 0.118, 0.151]],
  [0.067, [0.778, 0.125, 0.152]],
  [0.068, [0.778, 0.125, 0.152]],
  [0.07, [0.785, 0.133, 0.152]],
  [0.072, [0.785, 0.133, 0.152]],
  [0.074, [0.793, 0.14, 0.152]],
  [0.076, [0.793, 0.14, 0.152]],
  [0.078, [0.801, 0.148, 0.152]],
  [0.08, [0.801, 0.148, 0.152]],
  [0.082, [0.809, 0.155, 0.152]],
  [0.084, [0.809, 0.155, 0.152]],
  [0.086, [0.816, 0.162, 0.152]],
  [0.088, [0.816, 0.162, 0.152]],
  [0.09, [0.824, 0.17, 0.153]],
  [0.092, [0.824, 0.17, 0.153]],
  [0.094, [0.832, 0.177, 0.153]],
  [0.096, [0.832, 0.177, 0.153]],
  [0.098, [0.839, 0.185, 0.153]],
  [0.1, [0.839, 0.185, 0.153]],
  [0.102, [0.845, 0.193, 0.155]],
  [0.104, [0.845, 0.193, 0.155]],
  [0.106, [0.85, 0.202, 0.159]],
  [0.108, [0.85, 0.202, 0.159]],
  [0.11, [0.854, 0.212, 0.164]],
  [0.112, [0.854, 0.212, 0.164]],
  [0.114, [0.859, 0.221, 0.168]],
  [0.115, [0.859, 0.221, 0.168]],
  [0.117, [0.863, 0.23, 0.172]],
  [0.119, [0.863, 0.23, 0.172]],
  [0.121, [0.868, 0.24, 0.177]],
  [0.123, [0.868, 0.24, 0.177]],
  [0.125, [0.872, 0.249, 0.181]],
  [0.127, [0.872, 0.249, 0.181]],
  [0.129, [0.877, 0.259, 0.185]],
  [0.131, [0.877, 0.259, 0.185]],
  [0.133, [0.881, 0.268, 0.19]],
  [0.135, [0.881, 0.268, 0.19]],
  [0.137, [0.886, 0.277, 0.194]],
  [0.139, [0.886, 0.277, 0.194]],
  [0.141, [0.89, 0.287, 0.198]],
  [0.143, [0.89, 0.287, 0.198]],
  [0.145, [0.894, 0.296, 0.202]],
  [0.147, [0.894, 0.296, 0.202]],
  [0.149, [0.899, 0.305, 0.207]],
  [0.151, [0.899, 0.305, 0.207]],
  [0.153, [0.903, 0.315, 0.211]],
  [0.155, [0.903, 0.315, 0.211]],
  [0.157, [0.908, 0.324, 0.215]],
  [0.159, [0.908, 0.324, 0.215]],
  [0.16, [0.912, 0.334, 0.22]],
  [0.162, [0.912, 0.334, 0.22]],
  [0.164, [0.917, 0.343, 0.224]],
  [0.166, [0.917, 0.343, 0.224]],
  [0.168, [0.921, 0.352, 0.228]],
  [0.17, [0.921, 0.352, 0.228]],
  [0.172, [0.926, 0.362, 0.233]],
  [0.174, [0.926, 0.362, 0.233]],
  [0.176, [0.93, 0.371, 0.237]],
  [0.178, [0.93, 0.371, 0.237]],
  [0.18, [0.935, 0.381, 0.241]],
  [0.182, [0.935, 0.381, 0.241]],
  [0.184, [0.939, 0.39, 0.246]],
  [0.186, [0.939, 0.39, 0.246]],
  [0.188, [0.943, 0.399, 0.25]],
  [0.19, [0.943, 0.399, 0.25]],
  [0.192, [0.948, 0.409, 0.254]],
  [0.194, [0.948, 0.409, 0.254]],
  [0.196, [0.952, 0.418, 0.258]],
  [0.198, [0.952, 0.418, 0.258]],
  [0.2, [0.957, 0.427, 0.263]],
  [0.202, [0.957, 0.427, 0.263]],
  [0.204, [0.958, 0.437, 0.267]],
  [0.205, [0.958, 0.437, 0.267]],
  [0.207, [0.96, 0.447, 0.272]],
  [0.209, [0.96, 0.447, 0.272]],
  [0.211, [0.961, 0.457, 0.277]],
  [0.213, [0.961, 0.457, 0.277]],
  [0.215, [0.962, 0.467, 0.281]],
  [0.217, [0.962, 0.467, 0.281]],
  [0.219, [0.964, 0.477, 0.286]],
  [0.221, [0.964, 0.477, 0.286]],
  [0.223, [0.965, 0.487, 0.29]],
  [0.225, [0.965, 0.487, 0.29]],
  [0.227, [0.967, 0.497, 0.295]],
  [0.229, [0.967, 0.497, 0.295]],
  [0.231, [0.968, 0.507, 0.3]],
  [0.233, [0.968, 0.507, 0.3]],
  [0.235, [0.969, 0.517, 0.304]],
  [0.237, [0.969, 0.517, 0.304]],
  [0.239, [0.971, 0.527, 0.309]],
  [0.241, [0.971, 0.527, 0.309]],
  [0.243, [0.972, 0.537, 0.313]],
  [0.245, [0.972, 0.537, 0.313]],
  [0.247, [0.973, 0.547, 0.318]],
  [0.249, [0.973, 0.547, 0.318]],
  [0.25, [0.975, 0.557, 0.323]],
  [0.252, [0.975, 0.557, 0.323]],
  [0.254, [0.976, 0.567, 0.327]],
  [0.256, [0.976, 0.567, 0.327]],
  [0.258, [0.978, 0.577, 0.332]],
  [0.26, [0.978, 0.577, 0.332]],
  [0.262, [0.979, 0.587, 0.337]],
  [0.264, [0.979, 0.587, 0.337]],
  [0.266, [0.98, 0.597, 0.341]],
  [0.268, [0.98, 0.597, 0.341]],
  [0.27, [0.982, 0.607, 0.346]],
  [0.272, [0.982, 0.607, 0.346]],
  [0.274, [0.983, 0.617, 0.35]],
  [0.276, [0.983, 0.617, 0.35]],
  [0.278, [0.985, 0.627, 0.355]],
  [0.28, [0.985, 0.627, 0.355]],
  [0.282, [0.986, 0.637, 0.36]],
  [0.284, [0.986, 0.637, 0.36]],
  [0.286, [0.987, 0.647, 0.364]],
  [0.288, [0.987, 0.647, 0.364]],
  [0.29, [0.989, 0.657, 0.369]],
  [0.292, [0.989, 0.657, 0.369]],
  [0.294, [0.99, 0.667, 0.373]],
  [0.295, [0.99, 0.667, 0.373]],
  [0.297, [0.991, 0.677, 0.378]],
  [0.299, [0.991, 0.677, 0.378]],
  [0.301, [0.992, 0.686, 0.384]],
  [0.303, [0.992, 0.686, 0.384]],
  [0.305, [0.992, 0.694, 0.391]],
  [0.307, [0.992, 0.694, 0.391]],
  [0.309, [0.993, 0.702, 0.398]],
  [0.311, [0.993, 0.702, 0.398]],
  [0.313, [0.993, 0.709, 0.406]],
  [0.315, [0.993, 0.709, 0.406]],
  [0.317, [0.993, 0.717, 0.413]],
  [0.319, [0.993, 0.717, 0.413]],
  [0.321, [0.993, 0.725, 0.42]],
  [0.323, [0.993, 0.725, 0.42]],
  [0.325, [0.993, 0.732, 0.427]],
  [0.327, [0.993, 0.732, 0.427]],
  [0.329, [0.993, 0.74, 0.435]],
  [0.331, [0.993, 0.74, 0.435]],
  [0.333, [0.993, 0.748, 0.442]],
  [0.335, [0.993, 0.748, 0.442]],
  [0.337, [0.994, 0.755, 0.449]],
  [0.339, [0.994, 0.755, 0.449]],
  [0.341, [0.994, 0.763, 0.456]],
  [0.342, [0.994, 0.763, 0.456]],
  [0.344, [0.994, 0.771, 0.464]],
  [0.346, [0.994, 0.771, 0.464]],
  [0.348, [0.994, 0.778, 0.471]],
  [0.35, [0.994, 0.778, 0.471]],
  [0.352, [0.994, 0.786, 0.478]],
  [0.354, [0.994, 0.786, 0.478]],
  [0.356, [0.994, 0.794, 0.485]],
  [0.358, [0.994, 0.794, 0.485]],
  [0.36, [0.995, 0.802, 0.492]],
  [0.362, [0.995, 0.802, 0.492]],
  [0.364, [0.995, 0.809, 0.5]],
  [0.366, [0.995, 0.809, 0.5]],
  [0.368, [0.995, 0.817, 0.507]],
  [0.37, [0.995, 0.817, 0.507]],
  [0.372, [0.995, 0.825, 0.514]],
  [0.374, [0.995, 0.825, 0.514]],
  [0.376, [0.995, 0.832, 0.521]],
  [0.378, [0.995, 0.832, 0.521]],
  [0.38, [0.995, 0.84, 0.529]],
  [0.382, [0.995, 0.84, 0.529]],
  [0.384, [0.995, 0.848, 0.536]],
  [0.386, [0.995, 0.848, 0.536]],
  [0.387, [0.996, 0.855, 0.543]],
  [0.389, [0.996, 0.855, 0.543]],
  [0.391, [0.996, 0.863, 0.55]],
  [0.393, [0.996, 0.863, 0.55]],
  [0.395, [0.996, 0.871, 0.557]],
  [0.397, [0.996, 0.871, 0.557]],
  [0.399, [0.996, 0.878, 0.565]],
  [0.401, [0.996, 0.878, 0.565]],
  [0.403, [0.996, 0.883, 0.572]],
  [0.405, [0.996, 0.883, 0.572]],
  [0.407, [0.996, 0.888, 0.579]],
  [0.409, [0.996, 0.888, 0.579]],
  [0.411, [0.997, 0.893, 0.586]],
  [0.413, [0.997, 0.893, 0.586]],
  [0.415, [0.997, 0.898, 0.594]],
  [0.417, [0.997, 0.898, 0.594]],
  [0.419, [0.997, 0.902, 0.601]],
  [0.421, [0.997, 0.902, 0.601]],
  [0.423, [0.997, 0.907, 0.608]],
  [0.425, [0.997, 0.907, 0.608]],
  [0.427, [0.997, 0.912, 0.615]],
  [0.429, [0.997, 0.912, 0.615]],
  [0.431, [0.997, 0.917, 0.623]],
  [0.432, [0.997, 0.917, 0.623]],
  [0.434, [0.997, 0.921, 0.63]],
  [0.436, [0.997, 0.921, 0.63]],
  [0.438, [0.998, 0.926, 0.637]],
  [0.44, [0.998, 0.926, 0.637]],
  [0.442, [0.998, 0.931, 0.644]],
  [0.444, [0.998, 0.931, 0.644]],
  [0.446, [0.998, 0.936, 0.651]],
  [0.448, [0.998, 0.936, 0.651]],
  [0.45, [0.998, 0.94, 0.659]],
  [0.452, [0.998, 0.94, 0.659]],
  [0.454, [0.998, 0.945, 0.666]],
  [0.456, [0.998, 0.945, 0.666]],
  [0.458, [0.998, 0.95, 0.673]],
  [0.46, [0.998, 0.95, 0.673]],
  [0.462, [0.999, 0.955, 0.68]],
  [0.464, [0.999, 0.955, 0.68]],
  [0.466, [0.999, 0.959, 0.688]],
  [0.468, [0.999, 0.959, 0.688]],
  [0.47, [0.999, 0.964, 0.695]],
  [0.472, [0.999, 0.964, 0.695]],
  [0.474, [0.999, 0.969, 0.702]],
  [0.476, [0.999, 0.969, 0.702]],
  [0.477, [0.999, 0.974, 0.709]],
  [0.479, [0.999, 0.974, 0.709]],
  [0.481, [0.999, 0.979, 0.716]],
  [0.483, [0.999, 0.979, 0.716]],
  [0.485, [0.999, 0.983, 0.724]],
  [0.487, [0.999, 0.983, 0.724]],
  [0.489, [1, 0.988, 0.731]],
  [0.491, [1, 0.988, 0.731]],
  [0.493, [1, 0.993, 0.738]],
  [0.495, [1, 0.993, 0.738]],
  [0.497, [1, 0.998, 0.745]],
  [0.499, [1, 0.998, 0.745]],
  [0.501, [0.998, 0.999, 0.753]],
  [0.503, [0.998, 0.999, 0.753]],
  [0.505, [0.993, 0.997, 0.762]],
  [0.507, [0.993, 0.997, 0.762]],
  [0.509, [0.988, 0.995, 0.771]],
  [0.511, [0.988, 0.995, 0.771]],
  [0.513, [0.983, 0.994, 0.78]],
  [0.515, [0.983, 0.994, 0.78]],
  [0.517, [0.979, 0.992, 0.788]],
  [0.519, [0.979, 0.992, 0.788]],
  [0.521, [0.974, 0.99, 0.797]],
  [0.523, [0.974, 0.99, 0.797]],
  [0.524, [0.969, 0.988, 0.806]],
  [0.526, [0.969, 0.988, 0.806]],
  [0.528, [0.964, 0.986, 0.815]],
  [0.53, [0.964, 0.986, 0.815]],
  [0.532, [0.959, 0.984, 0.824]],
  [0.534, [0.959, 0.984, 0.824]],
  [0.536, [0.955, 0.982, 0.832]],
  [0.538, [0.955, 0.982, 0.832]],
  [0.54, [0.95, 0.981, 0.841]],
  [0.542, [0.95, 0.981, 0.841]],
  [0.544, [0.945, 0.979, 0.85]],
  [0.546, [0.945, 0.979, 0.85]],
  [0.548, [0.94, 0.977, 0.859]],
  [0.55, [0.94, 0.977, 0.859]],
  [0.552, [0.936, 0.975, 0.867]],
  [0.554, [0.936, 0.975, 0.867]],
  [0.556, [0.931, 0.973, 0.876]],
  [0.558, [0.931, 0.973, 0.876]],
  [0.56, [0.926, 0.971, 0.885]],
  [0.562, [0.926, 0.971, 0.885]],
  [0.564, [0.921, 0.97, 0.894]],
  [0.566, [0.921, 0.97, 0.894]],
  [0.568, [0.917, 0.968, 0.902]],
  [0.569, [0.917, 0.968, 0.902]],
  [0.571, [0.912, 0.966, 0.911]],
  [0.573, [0.912, 0.966, 0.911]],
  [0.575, [0.907, 0.964, 0.92]],
  [0.577, [0.907, 0.964, 0.92]],
  [0.579, [0.902, 0.962, 0.929]],
  [0.581, [0.902, 0.962, 0.929]],
  [0.583, [0.898, 0.96, 0.937]],
  [0.585, [0.898, 0.96, 0.937]],
  [0.587, [0.893, 0.958, 0.946]],
  [0.589, [0.893, 0.958, 0.946]],
  [0.591, [0.888, 0.957, 0.955]],
  [0.593, [0.888, 0.957, 0.955]],
  [0.595, [0.883, 0.955, 0.964]],
  [0.597, [0.883, 0.955, 0.964]],
  [0.599, [0.878, 0.953, 0.973]],
  [0.601, [0.878, 0.953, 0.973]],
  [0.603, [0.87, 0.949, 0.97]],
  [0.605, [0.87, 0.949, 0.97]],
  [0.607, [0.862, 0.945, 0.968]],
  [0.609, [0.862, 0.945, 0.968]],
  [0.611, [0.854, 0.941, 0.966]],
  [0.613, [0.854, 0.941, 0.966]],
  [0.614, [0.846, 0.937, 0.963]],
  [0.616, [0.846, 0.937, 0.963]],
  [0.618, [0.838, 0.933, 0.961]],
  [0.62, [0.838, 0.933, 0.961]],
  [0.622, [0.83, 0.929, 0.959]],
  [0.624, [0.83, 0.929, 0.959]],
  [0.626, [0.821, 0.925, 0.956]],
  [0.628, [0.821, 0.925, 0.956]],
  [0.63, [0.813, 0.921, 0.954]],
  [0.632, [0.813, 0.921, 0.954]],
  [0.634, [0.805, 0.917, 0.952]],
  [0.636, [0.805, 0.917, 0.952]],
  [0.638, [0.797, 0.913, 0.949]],
  [0.64, [0.797, 0.913, 0.949]],
  [0.642, [0.789, 0.909, 0.947]],
  [0.644, [0.789, 0.909, 0.947]],
  [0.646, [0.781, 0.905, 0.945]],
  [0.648, [0.781, 0.905, 0.945]],
  [0.65, [0.772, 0.901, 0.943]],
  [0.652, [0.772, 0.901, 0.943]],
  [0.654, [0.764, 0.897, 0.94]],
  [0.656, [0.764, 0.897, 0.94]],
  [0.658, [0.756, 0.893, 0.938]],
  [0.659, [0.756, 0.893, 0.938]],
  [0.661, [0.748, 0.889, 0.936]],
  [0.663, [0.748, 0.889, 0.936]],
  [0.665, [0.74, 0.885, 0.933]],
  [0.667, [0.74, 0.885, 0.933]],
  [0.669, [0.732, 0.881, 0.931]],
  [0.671, [0.732, 0.881, 0.931]],
  [0.673, [0.724, 0.877, 0.929]],
  [0.675, [0.724, 0.877, 0.929]],
  [0.677, [0.715, 0.873, 0.926]],
  [0.679, [0.715, 0.873, 0.926]],
  [0.681, [0.707, 0.869, 0.924]],
  [0.683, [0.707, 0.869, 0.924]],
  [0.685, [0.699, 0.865, 0.922]],
  [0.687, [0.699, 0.865, 0.922]],
  [0.689, [0.691, 0.861, 0.919]],
  [0.691, [0.691, 0.861, 0.919]],
  [0.693, [0.683, 0.857, 0.917]],
  [0.695, [0.683, 0.857, 0.917]],
  [0.697, [0.675, 0.853, 0.915]],
  [0.699, [0.675, 0.853, 0.915]],
  [0.701, [0.666, 0.848, 0.912]],
  [0.703, [0.666, 0.848, 0.912]],
  [0.705, [0.658, 0.841, 0.908]],
  [0.706, [0.658, 0.841, 0.908]],
  [0.708, [0.649, 0.834, 0.904]],
  [0.71, [0.649, 0.834, 0.904]],
  [0.712, [0.641, 0.827, 0.901]],
  [0.714, [0.641, 0.827, 0.901]],
  [0.716, [0.633, 0.821, 0.897]],
  [0.718, [0.633, 0.821, 0.897]],
  [0.72, [0.624, 0.814, 0.893]],
  [0.722, [0.624, 0.814, 0.893]],
  [0.724, [0.616, 0.807, 0.89]],
  [0.726, [0.616, 0.807, 0.89]],
  [0.728, [0.607, 0.8, 0.886]],
  [0.73, [0.607, 0.8, 0.886]],
  [0.732, [0.599, 0.793, 0.882]],
  [0.734, [0.599, 0.793, 0.882]],
  [0.736, [0.59, 0.787, 0.879]],
  [0.738, [0.59, 0.787, 0.879]],
  [0.74, [0.582, 0.78, 0.875]],
  [0.742, [0.582, 0.78, 0.875]],
  [0.744, [0.573, 0.773, 0.871]],
  [0.746, [0.573, 0.773, 0.871]],
  [0.748, [0.565, 0.766, 0.868]],
  [0.75, [0.565, 0.766, 0.868]],
  [0.751, [0.556, 0.76, 0.864]],
  [0.753, [0.556, 0.76, 0.864]],
  [0.755, [0.548, 0.753, 0.86]],
  [0.757, [0.548, 0.753, 0.86]],
  [0.759, [0.539, 0.746, 0.857]],
  [0.761, [0.539, 0.746, 0.857]],
  [0.763, [0.531, 0.739, 0.853]],
  [0.765, [0.531, 0.739, 0.853]],
  [0.767, [0.523, 0.733, 0.849]],
  [0.769, [0.523, 0.733, 0.849]],
  [0.771, [0.514, 0.726, 0.845]],
  [0.773, [0.514, 0.726, 0.845]],
  [0.775, [0.506, 0.719, 0.842]],
  [0.777, [0.506, 0.719, 0.842]],
  [0.779, [0.497, 0.712, 0.838]],
  [0.781, [0.497, 0.712, 0.838]],
  [0.783, [0.489, 0.705, 0.834]],
  [0.785, [0.489, 0.705, 0.834]],
  [0.787, [0.48, 0.699, 0.831]],
  [0.789, [0.48, 0.699, 0.831]],
  [0.791, [0.472, 0.692, 0.827]],
  [0.793, [0.472, 0.692, 0.827]],
  [0.795, [0.463, 0.685, 0.823]],
  [0.796, [0.463, 0.685, 0.823]],
  [0.798, [0.455, 0.678, 0.82]],
  [0.8, [0.455, 0.678, 0.82]],
  [0.802, [0.448, 0.67, 0.815]],
  [0.804, [0.448, 0.67, 0.815]],
  [0.806, [0.44, 0.661, 0.811]],
  [0.808, [0.44, 0.661, 0.811]],
  [0.81, [0.433, 0.653, 0.806]],
  [0.812, [0.433, 0.653, 0.806]],
  [0.814, [0.426, 0.644, 0.802]],
  [0.816, [0.426, 0.644, 0.802]],
  [0.818, [0.419, 0.635, 0.797]],
  [0.82, [0.419, 0.635, 0.797]],
  [0.822, [0.412, 0.627, 0.793]],
  [0.824, [0.412, 0.627, 0.793]],
  [0.826, [0.404, 0.618, 0.788]],
  [0.828, [0.404, 0.618, 0.788]],
  [0.83, [0.397, 0.61, 0.784]],
  [0.832, [0.397, 0.61, 0.784]],
  [0.834, [0.39, 0.601, 0.779]],
  [0.836, [0.39, 0.601, 0.779]],
  [0.838, [0.383, 0.592, 0.775]],
  [0.84, [0.383, 0.592, 0.775]],
  [0.841, [0.375, 0.584, 0.771]],
  [0.843, [0.375, 0.584, 0.771]],
  [0.845, [0.368, 0.575, 0.766]],
  [0.847, [0.368, 0.575, 0.766]],
  [0.849, [0.361, 0.566, 0.762]],
  [0.851, [0.361, 0.566, 0.762]],
  [0.853, [0.354, 0.558, 0.757]],
  [0.855, [0.354, 0.558, 0.757]],
  [0.857, [0.346, 0.549, 0.753]],
  [0.859, [0.346, 0.549, 0.753]],
  [0.861, [0.339, 0.541, 0.748]],
  [0.863, [0.339, 0.541, 0.748]],
  [0.865, [0.332, 0.532, 0.744]],
  [0.867, [0.332, 0.532, 0.744]],
  [0.869, [0.325, 0.523, 0.739]],
  [0.871, [0.325, 0.523, 0.739]],
  [0.873, [0.318, 0.515, 0.735]],
  [0.875, [0.318, 0.515, 0.735]],
  [0.877, [0.31, 0.506, 0.73]],
  [0.879, [0.31, 0.506, 0.73]],
  [0.881, [0.303, 0.498, 0.726]],
  [0.883, [0.303, 0.498, 0.726]],
  [0.885, [0.296, 0.489, 0.721]],
  [0.886, [0.296, 0.489, 0.721]],
  [0.888, [0.289, 0.48, 0.717]],
  [0.89, [0.289, 0.48, 0.717]],
  [0.892, [0.281, 0.472, 0.713]],
  [0.894, [0.281, 0.472, 0.713]],
  [0.896, [0.274, 0.463, 0.708]],
  [0.898, [0.274, 0.463, 0.708]],
  [0.9, [0.269, 0.454, 0.703]],
  [0.902, [0.269, 0.454, 0.703]],
  [0.904, [0.266, 0.444, 0.699]],
  [0.906, [0.266, 0.444, 0.699]],
  [0.908, [0.263, 0.435, 0.694]],
  [0.91, [0.263, 0.435, 0.694]],
  [0.912, [0.26, 0.425, 0.689]],
  [0.914, [0.26, 0.425, 0.689]],
  [0.916, [0.257, 0.415, 0.684]],
  [0.918, [0.257, 0.415, 0.684]],
  [0.92, [0.254, 0.406, 0.68]],
  [0.922, [0.254, 0.406, 0.68]],
  [0.924, [0.251, 0.396, 0.675]],
  [0.926, [0.251, 0.396, 0.675]],
  [0.928, [0.248, 0.386, 0.67]],
  [0.93, [0.248, 0.386, 0.67]],
  [0.932, [0.244, 0.376, 0.665]],
  [0.933, [0.244, 0.376, 0.665]],
  [0.935, [0.241, 0.367, 0.661]],
  [0.937, [0.241, 0.367, 0.661]],
  [0.939, [0.238, 0.357, 0.656]],
  [0.941, [0.238, 0.357, 0.656]],
  [0.943, [0.235, 0.347, 0.651]],
  [0.945, [0.235, 0.347, 0.651]],
  [0.947, [0.232, 0.338, 0.646]],
  [0.949, [0.232, 0.338, 0.646]],
  [0.951, [0.229, 0.328, 0.642]],
  [0.953, [0.229, 0.328, 0.642]],
  [0.955, [0.226, 0.318, 0.637]],
  [0.957, [0.226, 0.318, 0.637]],
  [0.959, [0.223, 0.309, 0.632]],
  [0.961, [0.223, 0.309, 0.632]],
  [0.963, [0.22, 0.299, 0.627]],
  [0.965, [0.22, 0.299, 0.627]],
  [0.967, [0.217, 0.289, 0.622]],
  [0.969, [0.217, 0.289, 0.622]],
  [0.971, [0.214, 0.28, 0.618]],
  [0.973, [0.214, 0.28, 0.618]],
  [0.975, [0.211, 0.27, 0.613]],
  [0.977, [0.211, 0.27, 0.613]],
  [0.978, [0.208, 0.26, 0.608]],
  [0.98, [0.208, 0.26, 0.608]],
  [0.982, [0.204, 0.251, 0.603]],
  [0.984, [0.204, 0.251, 0.603]],
  [0.986, [0.201, 0.241, 0.599]],
  [0.988, [0.201, 0.241, 0.599]],
  [0.99, [0.198, 0.231, 0.594]],
  [0.992, [0.198, 0.231, 0.594]],
  [0.994, [0.195, 0.221, 0.589]],
  [0.996, [0.195, 0.221, 0.589]],
  [0.998, [0.192, 0.212, 0.584]],
  [1, [0.192, 0.212, 0.584]]
], Xf = [
  [0, [0.647, 0, 0.149]],
  [2e-3, [0.647, 0, 0.149]],
  [4e-3, [0.655, 7e-3, 0.149]],
  [6e-3, [0.655, 7e-3, 0.149]],
  [8e-3, [0.662, 0.015, 0.149]],
  [0.01, [0.662, 0.015, 0.149]],
  [0.012, [0.67, 0.022, 0.149]],
  [0.014, [0.67, 0.022, 0.149]],
  [0.016, [0.678, 0.03, 0.15]],
  [0.018, [0.678, 0.03, 0.15]],
  [0.02, [0.686, 0.037, 0.15]],
  [0.022, [0.686, 0.037, 0.15]],
  [0.023, [0.693, 0.044, 0.15]],
  [0.025, [0.693, 0.044, 0.15]],
  [0.027, [0.701, 0.052, 0.15]],
  [0.029, [0.701, 0.052, 0.15]],
  [0.031, [0.709, 0.059, 0.15]],
  [0.033, [0.709, 0.059, 0.15]],
  [0.035, [0.716, 0.066, 0.15]],
  [0.037, [0.716, 0.066, 0.15]],
  [0.039, [0.724, 0.074, 0.151]],
  [0.041, [0.724, 0.074, 0.151]],
  [0.043, [0.732, 0.081, 0.151]],
  [0.045, [0.732, 0.081, 0.151]],
  [0.047, [0.739, 0.089, 0.151]],
  [0.049, [0.739, 0.089, 0.151]],
  [0.051, [0.747, 0.096, 0.151]],
  [0.053, [0.747, 0.096, 0.151]],
  [0.055, [0.755, 0.103, 0.151]],
  [0.057, [0.755, 0.103, 0.151]],
  [0.059, [0.762, 0.111, 0.151]],
  [0.061, [0.762, 0.111, 0.151]],
  [0.063, [0.77, 0.118, 0.151]],
  [0.065, [0.77, 0.118, 0.151]],
  [0.067, [0.778, 0.125, 0.152]],
  [0.068, [0.778, 0.125, 0.152]],
  [0.07, [0.785, 0.133, 0.152]],
  [0.072, [0.785, 0.133, 0.152]],
  [0.074, [0.793, 0.14, 0.152]],
  [0.076, [0.793, 0.14, 0.152]],
  [0.078, [0.801, 0.148, 0.152]],
  [0.08, [0.801, 0.148, 0.152]],
  [0.082, [0.809, 0.155, 0.152]],
  [0.084, [0.809, 0.155, 0.152]],
  [0.086, [0.816, 0.162, 0.152]],
  [0.088, [0.816, 0.162, 0.152]],
  [0.09, [0.824, 0.17, 0.153]],
  [0.092, [0.824, 0.17, 0.153]],
  [0.094, [0.832, 0.177, 0.153]],
  [0.096, [0.832, 0.177, 0.153]],
  [0.098, [0.839, 0.185, 0.153]],
  [0.1, [0.839, 0.185, 0.153]],
  [0.102, [0.845, 0.193, 0.155]],
  [0.104, [0.845, 0.193, 0.155]],
  [0.106, [0.85, 0.202, 0.159]],
  [0.108, [0.85, 0.202, 0.159]],
  [0.11, [0.854, 0.212, 0.164]],
  [0.112, [0.854, 0.212, 0.164]],
  [0.114, [0.859, 0.221, 0.168]],
  [0.115, [0.859, 0.221, 0.168]],
  [0.117, [0.863, 0.23, 0.172]],
  [0.119, [0.863, 0.23, 0.172]],
  [0.121, [0.868, 0.24, 0.177]],
  [0.123, [0.868, 0.24, 0.177]],
  [0.125, [0.872, 0.249, 0.181]],
  [0.127, [0.872, 0.249, 0.181]],
  [0.129, [0.877, 0.259, 0.185]],
  [0.131, [0.877, 0.259, 0.185]],
  [0.133, [0.881, 0.268, 0.19]],
  [0.135, [0.881, 0.268, 0.19]],
  [0.137, [0.886, 0.277, 0.194]],
  [0.139, [0.886, 0.277, 0.194]],
  [0.141, [0.89, 0.287, 0.198]],
  [0.143, [0.89, 0.287, 0.198]],
  [0.145, [0.894, 0.296, 0.202]],
  [0.147, [0.894, 0.296, 0.202]],
  [0.149, [0.899, 0.305, 0.207]],
  [0.151, [0.899, 0.305, 0.207]],
  [0.153, [0.903, 0.315, 0.211]],
  [0.155, [0.903, 0.315, 0.211]],
  [0.157, [0.908, 0.324, 0.215]],
  [0.159, [0.908, 0.324, 0.215]],
  [0.16, [0.912, 0.334, 0.22]],
  [0.162, [0.912, 0.334, 0.22]],
  [0.164, [0.917, 0.343, 0.224]],
  [0.166, [0.917, 0.343, 0.224]],
  [0.168, [0.921, 0.352, 0.228]],
  [0.17, [0.921, 0.352, 0.228]],
  [0.172, [0.926, 0.362, 0.233]],
  [0.174, [0.926, 0.362, 0.233]],
  [0.176, [0.93, 0.371, 0.237]],
  [0.178, [0.93, 0.371, 0.237]],
  [0.18, [0.935, 0.381, 0.241]],
  [0.182, [0.935, 0.381, 0.241]],
  [0.184, [0.939, 0.39, 0.246]],
  [0.186, [0.939, 0.39, 0.246]],
  [0.188, [0.943, 0.399, 0.25]],
  [0.19, [0.943, 0.399, 0.25]],
  [0.192, [0.948, 0.409, 0.254]],
  [0.194, [0.948, 0.409, 0.254]],
  [0.196, [0.952, 0.418, 0.258]],
  [0.198, [0.952, 0.418, 0.258]],
  [0.2, [0.957, 0.427, 0.263]],
  [0.202, [0.957, 0.427, 0.263]],
  [0.204, [0.958, 0.437, 0.267]],
  [0.205, [0.958, 0.437, 0.267]],
  [0.207, [0.96, 0.447, 0.272]],
  [0.209, [0.96, 0.447, 0.272]],
  [0.211, [0.961, 0.457, 0.277]],
  [0.213, [0.961, 0.457, 0.277]],
  [0.215, [0.962, 0.467, 0.281]],
  [0.217, [0.962, 0.467, 0.281]],
  [0.219, [0.964, 0.477, 0.286]],
  [0.221, [0.964, 0.477, 0.286]],
  [0.223, [0.965, 0.487, 0.29]],
  [0.225, [0.965, 0.487, 0.29]],
  [0.227, [0.967, 0.497, 0.295]],
  [0.229, [0.967, 0.497, 0.295]],
  [0.231, [0.968, 0.507, 0.3]],
  [0.233, [0.968, 0.507, 0.3]],
  [0.235, [0.969, 0.517, 0.304]],
  [0.237, [0.969, 0.517, 0.304]],
  [0.239, [0.971, 0.527, 0.309]],
  [0.241, [0.971, 0.527, 0.309]],
  [0.243, [0.972, 0.537, 0.313]],
  [0.245, [0.972, 0.537, 0.313]],
  [0.247, [0.973, 0.547, 0.318]],
  [0.249, [0.973, 0.547, 0.318]],
  [0.25, [0.975, 0.557, 0.323]],
  [0.252, [0.975, 0.557, 0.323]],
  [0.254, [0.976, 0.567, 0.327]],
  [0.256, [0.976, 0.567, 0.327]],
  [0.258, [0.978, 0.577, 0.332]],
  [0.26, [0.978, 0.577, 0.332]],
  [0.262, [0.979, 0.587, 0.337]],
  [0.264, [0.979, 0.587, 0.337]],
  [0.266, [0.98, 0.597, 0.341]],
  [0.268, [0.98, 0.597, 0.341]],
  [0.27, [0.982, 0.607, 0.346]],
  [0.272, [0.982, 0.607, 0.346]],
  [0.274, [0.983, 0.617, 0.35]],
  [0.276, [0.983, 0.617, 0.35]],
  [0.278, [0.985, 0.627, 0.355]],
  [0.28, [0.985, 0.627, 0.355]],
  [0.282, [0.986, 0.637, 0.36]],
  [0.284, [0.986, 0.637, 0.36]],
  [0.286, [0.987, 0.647, 0.364]],
  [0.288, [0.987, 0.647, 0.364]],
  [0.29, [0.989, 0.657, 0.369]],
  [0.292, [0.989, 0.657, 0.369]],
  [0.294, [0.99, 0.667, 0.373]],
  [0.295, [0.99, 0.667, 0.373]],
  [0.297, [0.991, 0.677, 0.378]],
  [0.299, [0.991, 0.677, 0.378]],
  [0.301, [0.992, 0.686, 0.384]],
  [0.303, [0.992, 0.686, 0.384]],
  [0.305, [0.992, 0.694, 0.39]],
  [0.307, [0.992, 0.694, 0.39]],
  [0.309, [0.993, 0.702, 0.397]],
  [0.311, [0.993, 0.702, 0.397]],
  [0.313, [0.993, 0.709, 0.403]],
  [0.315, [0.993, 0.709, 0.403]],
  [0.317, [0.993, 0.717, 0.409]],
  [0.319, [0.993, 0.717, 0.409]],
  [0.321, [0.993, 0.725, 0.416]],
  [0.323, [0.993, 0.725, 0.416]],
  [0.325, [0.993, 0.732, 0.422]],
  [0.327, [0.993, 0.732, 0.422]],
  [0.329, [0.993, 0.74, 0.429]],
  [0.331, [0.993, 0.74, 0.429]],
  [0.333, [0.993, 0.748, 0.435]],
  [0.335, [0.993, 0.748, 0.435]],
  [0.337, [0.994, 0.755, 0.442]],
  [0.339, [0.994, 0.755, 0.442]],
  [0.341, [0.994, 0.763, 0.448]],
  [0.342, [0.994, 0.763, 0.448]],
  [0.344, [0.994, 0.771, 0.455]],
  [0.346, [0.994, 0.771, 0.455]],
  [0.348, [0.994, 0.778, 0.461]],
  [0.35, [0.994, 0.778, 0.461]],
  [0.352, [0.994, 0.786, 0.468]],
  [0.354, [0.994, 0.786, 0.468]],
  [0.356, [0.994, 0.794, 0.474]],
  [0.358, [0.994, 0.794, 0.474]],
  [0.36, [0.995, 0.802, 0.481]],
  [0.362, [0.995, 0.802, 0.481]],
  [0.364, [0.995, 0.809, 0.487]],
  [0.366, [0.995, 0.809, 0.487]],
  [0.368, [0.995, 0.817, 0.493]],
  [0.37, [0.995, 0.817, 0.493]],
  [0.372, [0.995, 0.825, 0.5]],
  [0.374, [0.995, 0.825, 0.5]],
  [0.376, [0.995, 0.832, 0.506]],
  [0.378, [0.995, 0.832, 0.506]],
  [0.38, [0.995, 0.84, 0.513]],
  [0.382, [0.995, 0.84, 0.513]],
  [0.384, [0.995, 0.848, 0.519]],
  [0.386, [0.995, 0.848, 0.519]],
  [0.387, [0.996, 0.855, 0.526]],
  [0.389, [0.996, 0.855, 0.526]],
  [0.391, [0.996, 0.863, 0.532]],
  [0.393, [0.996, 0.863, 0.532]],
  [0.395, [0.996, 0.871, 0.539]],
  [0.397, [0.996, 0.871, 0.539]],
  [0.399, [0.996, 0.878, 0.545]],
  [0.401, [0.996, 0.878, 0.545]],
  [0.403, [0.996, 0.883, 0.553]],
  [0.405, [0.996, 0.883, 0.553]],
  [0.407, [0.996, 0.888, 0.561]],
  [0.409, [0.996, 0.888, 0.561]],
  [0.411, [0.997, 0.893, 0.569]],
  [0.413, [0.997, 0.893, 0.569]],
  [0.415, [0.997, 0.898, 0.577]],
  [0.417, [0.997, 0.898, 0.577]],
  [0.419, [0.997, 0.902, 0.585]],
  [0.421, [0.997, 0.902, 0.585]],
  [0.423, [0.997, 0.907, 0.593]],
  [0.425, [0.997, 0.907, 0.593]],
  [0.427, [0.997, 0.912, 0.601]],
  [0.429, [0.997, 0.912, 0.601]],
  [0.431, [0.997, 0.917, 0.609]],
  [0.432, [0.997, 0.917, 0.609]],
  [0.434, [0.997, 0.921, 0.617]],
  [0.436, [0.997, 0.921, 0.617]],
  [0.438, [0.998, 0.926, 0.625]],
  [0.44, [0.998, 0.926, 0.625]],
  [0.442, [0.998, 0.931, 0.633]],
  [0.444, [0.998, 0.931, 0.633]],
  [0.446, [0.998, 0.936, 0.641]],
  [0.448, [0.998, 0.936, 0.641]],
  [0.45, [0.998, 0.94, 0.649]],
  [0.452, [0.998, 0.94, 0.649]],
  [0.454, [0.998, 0.945, 0.657]],
  [0.456, [0.998, 0.945, 0.657]],
  [0.458, [0.998, 0.95, 0.665]],
  [0.46, [0.998, 0.95, 0.665]],
  [0.462, [0.999, 0.955, 0.673]],
  [0.464, [0.999, 0.955, 0.673]],
  [0.466, [0.999, 0.959, 0.681]],
  [0.468, [0.999, 0.959, 0.681]],
  [0.47, [0.999, 0.964, 0.689]],
  [0.472, [0.999, 0.964, 0.689]],
  [0.474, [0.999, 0.969, 0.697]],
  [0.476, [0.999, 0.969, 0.697]],
  [0.477, [0.999, 0.974, 0.705]],
  [0.479, [0.999, 0.974, 0.705]],
  [0.481, [0.999, 0.979, 0.713]],
  [0.483, [0.999, 0.979, 0.713]],
  [0.485, [0.999, 0.983, 0.721]],
  [0.487, [0.999, 0.983, 0.721]],
  [0.489, [1, 0.988, 0.729]],
  [0.491, [1, 0.988, 0.729]],
  [0.493, [1, 0.993, 0.737]],
  [0.495, [1, 0.993, 0.737]],
  [0.497, [1, 0.998, 0.745]],
  [0.499, [1, 0.998, 0.745]],
  [0.501, [0.997, 0.999, 0.745]],
  [0.503, [0.997, 0.999, 0.745]],
  [0.505, [0.991, 0.996, 0.737]],
  [0.507, [0.991, 0.996, 0.737]],
  [0.509, [0.985, 0.994, 0.729]],
  [0.511, [0.985, 0.994, 0.729]],
  [0.513, [0.98, 0.991, 0.721]],
  [0.515, [0.98, 0.991, 0.721]],
  [0.517, [0.974, 0.989, 0.713]],
  [0.519, [0.974, 0.989, 0.713]],
  [0.521, [0.968, 0.986, 0.705]],
  [0.523, [0.968, 0.986, 0.705]],
  [0.524, [0.962, 0.984, 0.697]],
  [0.526, [0.962, 0.984, 0.697]],
  [0.528, [0.956, 0.982, 0.689]],
  [0.53, [0.956, 0.982, 0.689]],
  [0.532, [0.95, 0.979, 0.681]],
  [0.534, [0.95, 0.979, 0.681]],
  [0.536, [0.944, 0.977, 0.673]],
  [0.538, [0.944, 0.977, 0.673]],
  [0.54, [0.939, 0.974, 0.665]],
  [0.542, [0.939, 0.974, 0.665]],
  [0.544, [0.933, 0.972, 0.657]],
  [0.546, [0.933, 0.972, 0.657]],
  [0.548, [0.927, 0.969, 0.649]],
  [0.55, [0.927, 0.969, 0.649]],
  [0.552, [0.921, 0.967, 0.641]],
  [0.554, [0.921, 0.967, 0.641]],
  [0.556, [0.915, 0.964, 0.633]],
  [0.558, [0.915, 0.964, 0.633]],
  [0.56, [0.909, 0.962, 0.625]],
  [0.562, [0.909, 0.962, 0.625]],
  [0.564, [0.904, 0.959, 0.617]],
  [0.566, [0.904, 0.959, 0.617]],
  [0.568, [0.898, 0.957, 0.609]],
  [0.569, [0.898, 0.957, 0.609]],
  [0.571, [0.892, 0.954, 0.601]],
  [0.573, [0.892, 0.954, 0.601]],
  [0.575, [0.886, 0.952, 0.593]],
  [0.577, [0.886, 0.952, 0.593]],
  [0.579, [0.88, 0.95, 0.585]],
  [0.581, [0.88, 0.95, 0.585]],
  [0.583, [0.874, 0.947, 0.577]],
  [0.585, [0.874, 0.947, 0.577]],
  [0.587, [0.869, 0.945, 0.569]],
  [0.589, [0.869, 0.945, 0.569]],
  [0.591, [0.863, 0.942, 0.561]],
  [0.593, [0.863, 0.942, 0.561]],
  [0.595, [0.857, 0.94, 0.553]],
  [0.597, [0.857, 0.94, 0.553]],
  [0.599, [0.851, 0.937, 0.545]],
  [0.601, [0.851, 0.937, 0.545]],
  [0.603, [0.843, 0.934, 0.54]],
  [0.605, [0.843, 0.934, 0.54]],
  [0.607, [0.835, 0.93, 0.535]],
  [0.609, [0.835, 0.93, 0.535]],
  [0.611, [0.827, 0.927, 0.53]],
  [0.613, [0.827, 0.927, 0.53]],
  [0.614, [0.82, 0.924, 0.525]],
  [0.616, [0.82, 0.924, 0.525]],
  [0.618, [0.812, 0.92, 0.52]],
  [0.62, [0.812, 0.92, 0.52]],
  [0.622, [0.804, 0.917, 0.515]],
  [0.624, [0.804, 0.917, 0.515]],
  [0.626, [0.796, 0.914, 0.51]],
  [0.628, [0.796, 0.914, 0.51]],
  [0.63, [0.788, 0.91, 0.504]],
  [0.632, [0.788, 0.91, 0.504]],
  [0.634, [0.78, 0.907, 0.499]],
  [0.636, [0.78, 0.907, 0.499]],
  [0.638, [0.773, 0.903, 0.494]],
  [0.64, [0.773, 0.903, 0.494]],
  [0.642, [0.765, 0.9, 0.489]],
  [0.644, [0.765, 0.9, 0.489]],
  [0.646, [0.757, 0.897, 0.484]],
  [0.648, [0.757, 0.897, 0.484]],
  [0.65, [0.749, 0.893, 0.479]],
  [0.652, [0.749, 0.893, 0.479]],
  [0.654, [0.741, 0.89, 0.474]],
  [0.656, [0.741, 0.89, 0.474]],
  [0.658, [0.733, 0.887, 0.469]],
  [0.659, [0.733, 0.887, 0.469]],
  [0.661, [0.725, 0.883, 0.464]],
  [0.663, [0.725, 0.883, 0.464]],
  [0.665, [0.718, 0.88, 0.459]],
  [0.667, [0.718, 0.88, 0.459]],
  [0.669, [0.71, 0.876, 0.454]],
  [0.671, [0.71, 0.876, 0.454]],
  [0.673, [0.702, 0.873, 0.449]],
  [0.675, [0.702, 0.873, 0.449]],
  [0.677, [0.694, 0.87, 0.444]],
  [0.679, [0.694, 0.87, 0.444]],
  [0.681, [0.686, 0.866, 0.439]],
  [0.683, [0.686, 0.866, 0.439]],
  [0.685, [0.678, 0.863, 0.433]],
  [0.687, [0.678, 0.863, 0.433]],
  [0.689, [0.671, 0.859, 0.428]],
  [0.691, [0.671, 0.859, 0.428]],
  [0.693, [0.663, 0.856, 0.423]],
  [0.695, [0.663, 0.856, 0.423]],
  [0.697, [0.655, 0.853, 0.418]],
  [0.699, [0.655, 0.853, 0.418]],
  [0.701, [0.646, 0.849, 0.415]],
  [0.703, [0.646, 0.849, 0.415]],
  [0.705, [0.636, 0.845, 0.414]],
  [0.706, [0.636, 0.845, 0.414]],
  [0.708, [0.626, 0.84, 0.413]],
  [0.71, [0.626, 0.84, 0.413]],
  [0.712, [0.617, 0.836, 0.412]],
  [0.714, [0.617, 0.836, 0.412]],
  [0.716, [0.607, 0.832, 0.411]],
  [0.718, [0.607, 0.832, 0.411]],
  [0.72, [0.597, 0.827, 0.41]],
  [0.722, [0.597, 0.827, 0.41]],
  [0.724, [0.587, 0.823, 0.409]],
  [0.726, [0.587, 0.823, 0.409]],
  [0.728, [0.577, 0.819, 0.408]],
  [0.73, [0.577, 0.819, 0.408]],
  [0.732, [0.567, 0.814, 0.407]],
  [0.734, [0.567, 0.814, 0.407]],
  [0.736, [0.557, 0.81, 0.405]],
  [0.738, [0.557, 0.81, 0.405]],
  [0.74, [0.548, 0.806, 0.404]],
  [0.742, [0.548, 0.806, 0.404]],
  [0.744, [0.538, 0.801, 0.403]],
  [0.746, [0.538, 0.801, 0.403]],
  [0.748, [0.528, 0.797, 0.402]],
  [0.75, [0.528, 0.797, 0.402]],
  [0.751, [0.518, 0.793, 0.401]],
  [0.753, [0.518, 0.793, 0.401]],
  [0.755, [0.508, 0.789, 0.4]],
  [0.757, [0.508, 0.789, 0.4]],
  [0.759, [0.498, 0.784, 0.399]],
  [0.761, [0.498, 0.784, 0.399]],
  [0.763, [0.489, 0.78, 0.398]],
  [0.765, [0.489, 0.78, 0.398]],
  [0.767, [0.479, 0.776, 0.397]],
  [0.769, [0.479, 0.776, 0.397]],
  [0.771, [0.469, 0.771, 0.396]],
  [0.773, [0.469, 0.771, 0.396]],
  [0.775, [0.459, 0.767, 0.395]],
  [0.777, [0.459, 0.767, 0.395]],
  [0.779, [0.449, 0.763, 0.394]],
  [0.781, [0.449, 0.763, 0.394]],
  [0.783, [0.439, 0.758, 0.393]],
  [0.785, [0.439, 0.758, 0.393]],
  [0.787, [0.43, 0.754, 0.391]],
  [0.789, [0.43, 0.754, 0.391]],
  [0.791, [0.42, 0.75, 0.39]],
  [0.793, [0.42, 0.75, 0.39]],
  [0.795, [0.41, 0.745, 0.389]],
  [0.796, [0.41, 0.745, 0.389]],
  [0.798, [0.4, 0.741, 0.388]],
  [0.8, [0.4, 0.741, 0.388]],
  [0.802, [0.388, 0.735, 0.385]],
  [0.804, [0.388, 0.735, 0.385]],
  [0.806, [0.377, 0.73, 0.382]],
  [0.808, [0.377, 0.73, 0.382]],
  [0.81, [0.365, 0.724, 0.379]],
  [0.812, [0.365, 0.724, 0.379]],
  [0.814, [0.353, 0.718, 0.377]],
  [0.816, [0.353, 0.718, 0.377]],
  [0.818, [0.342, 0.713, 0.374]],
  [0.82, [0.342, 0.713, 0.374]],
  [0.822, [0.33, 0.707, 0.371]],
  [0.824, [0.33, 0.707, 0.371]],
  [0.826, [0.318, 0.701, 0.368]],
  [0.828, [0.318, 0.701, 0.368]],
  [0.83, [0.306, 0.696, 0.365]],
  [0.832, [0.306, 0.696, 0.365]],
  [0.834, [0.295, 0.69, 0.362]],
  [0.836, [0.295, 0.69, 0.362]],
  [0.838, [0.283, 0.684, 0.359]],
  [0.84, [0.283, 0.684, 0.359]],
  [0.841, [0.271, 0.679, 0.356]],
  [0.843, [0.271, 0.679, 0.356]],
  [0.845, [0.26, 0.673, 0.353]],
  [0.847, [0.26, 0.673, 0.353]],
  [0.849, [0.248, 0.667, 0.35]],
  [0.851, [0.248, 0.667, 0.35]],
  [0.853, [0.236, 0.662, 0.347]],
  [0.855, [0.236, 0.662, 0.347]],
  [0.857, [0.225, 0.656, 0.344]],
  [0.859, [0.225, 0.656, 0.344]],
  [0.861, [0.213, 0.65, 0.341]],
  [0.863, [0.213, 0.65, 0.341]],
  [0.865, [0.201, 0.644, 0.339]],
  [0.867, [0.201, 0.644, 0.339]],
  [0.869, [0.19, 0.639, 0.336]],
  [0.871, [0.19, 0.639, 0.336]],
  [0.873, [0.178, 0.633, 0.333]],
  [0.875, [0.178, 0.633, 0.333]],
  [0.877, [0.166, 0.627, 0.33]],
  [0.879, [0.166, 0.627, 0.33]],
  [0.881, [0.155, 0.622, 0.327]],
  [0.883, [0.155, 0.622, 0.327]],
  [0.885, [0.143, 0.616, 0.324]],
  [0.886, [0.143, 0.616, 0.324]],
  [0.888, [0.131, 0.61, 0.321]],
  [0.89, [0.131, 0.61, 0.321]],
  [0.892, [0.119, 0.605, 0.318]],
  [0.894, [0.119, 0.605, 0.318]],
  [0.896, [0.108, 0.599, 0.315]],
  [0.898, [0.108, 0.599, 0.315]],
  [0.9, [0.1, 0.592, 0.312]],
  [0.902, [0.1, 0.592, 0.312]],
  [0.904, [0.096, 0.585, 0.308]],
  [0.906, [0.096, 0.585, 0.308]],
  [0.908, [0.092, 0.578, 0.304]],
  [0.91, [0.092, 0.578, 0.304]],
  [0.912, [0.088, 0.57, 0.3]],
  [0.914, [0.088, 0.57, 0.3]],
  [0.916, [0.084, 0.563, 0.296]],
  [0.918, [0.084, 0.563, 0.296]],
  [0.92, [0.08, 0.555, 0.293]],
  [0.922, [0.08, 0.555, 0.293]],
  [0.924, [0.076, 0.548, 0.289]],
  [0.926, [0.076, 0.548, 0.289]],
  [0.928, [0.072, 0.541, 0.285]],
  [0.93, [0.072, 0.541, 0.285]],
  [0.932, [0.068, 0.533, 0.281]],
  [0.933, [0.068, 0.533, 0.281]],
  [0.935, [0.064, 0.526, 0.277]],
  [0.937, [0.064, 0.526, 0.277]],
  [0.939, [0.06, 0.519, 0.273]],
  [0.941, [0.06, 0.519, 0.273]],
  [0.943, [0.056, 0.511, 0.27]],
  [0.945, [0.056, 0.511, 0.27]],
  [0.947, [0.052, 0.504, 0.266]],
  [0.949, [0.052, 0.504, 0.266]],
  [0.951, [0.048, 0.496, 0.262]],
  [0.953, [0.048, 0.496, 0.262]],
  [0.955, [0.044, 0.489, 0.258]],
  [0.957, [0.044, 0.489, 0.258]],
  [0.959, [0.04, 0.482, 0.254]],
  [0.961, [0.04, 0.482, 0.254]],
  [0.963, [0.036, 0.474, 0.25]],
  [0.965, [0.036, 0.474, 0.25]],
  [0.967, [0.032, 0.467, 0.246]],
  [0.969, [0.032, 0.467, 0.246]],
  [0.971, [0.028, 0.46, 0.243]],
  [0.973, [0.028, 0.46, 0.243]],
  [0.975, [0.024, 0.452, 0.239]],
  [0.977, [0.024, 0.452, 0.239]],
  [0.978, [0.02, 0.445, 0.235]],
  [0.98, [0.02, 0.445, 0.235]],
  [0.982, [0.016, 0.437, 0.231]],
  [0.984, [0.016, 0.437, 0.231]],
  [0.986, [0.012, 0.43, 0.227]],
  [0.988, [0.012, 0.43, 0.227]],
  [0.99, [8e-3, 0.423, 0.223]],
  [0.992, [8e-3, 0.423, 0.223]],
  [0.994, [4e-3, 0.415, 0.22]],
  [0.996, [4e-3, 0.415, 0.22]],
  [0.998, [0, 0.408, 0.216]],
  [1, [0, 0.408, 0.216]]
], Yf = [
  [0, [0.62, 4e-3, 0.259]],
  [2e-3, [0.62, 4e-3, 0.259]],
  [4e-3, [0.628, 0.013, 0.261]],
  [6e-3, [0.628, 0.013, 0.261]],
  [8e-3, [0.637, 0.023, 0.263]],
  [0.01, [0.637, 0.023, 0.263]],
  [0.012, [0.645, 0.032, 0.265]],
  [0.014, [0.645, 0.032, 0.265]],
  [0.016, [0.653, 0.041, 0.267]],
  [0.018, [0.653, 0.041, 0.267]],
  [0.02, [0.662, 0.051, 0.269]],
  [0.022, [0.662, 0.051, 0.269]],
  [0.023, [0.67, 0.06, 0.271]],
  [0.025, [0.67, 0.06, 0.271]],
  [0.027, [0.679, 0.07, 0.273]],
  [0.029, [0.679, 0.07, 0.273]],
  [0.031, [0.687, 0.079, 0.275]],
  [0.033, [0.687, 0.079, 0.275]],
  [0.035, [0.696, 0.088, 0.277]],
  [0.037, [0.696, 0.088, 0.277]],
  [0.039, [0.704, 0.098, 0.279]],
  [0.041, [0.704, 0.098, 0.279]],
  [0.043, [0.713, 0.107, 0.281]],
  [0.045, [0.713, 0.107, 0.281]],
  [0.047, [0.721, 0.116, 0.283]],
  [0.049, [0.721, 0.116, 0.283]],
  [0.051, [0.73, 0.126, 0.285]],
  [0.053, [0.73, 0.126, 0.285]],
  [0.055, [0.738, 0.135, 0.287]],
  [0.057, [0.738, 0.135, 0.287]],
  [0.059, [0.746, 0.145, 0.289]],
  [0.061, [0.746, 0.145, 0.289]],
  [0.063, [0.755, 0.154, 0.291]],
  [0.065, [0.755, 0.154, 0.291]],
  [0.067, [0.763, 0.163, 0.293]],
  [0.068, [0.763, 0.163, 0.293]],
  [0.07, [0.772, 0.173, 0.295]],
  [0.072, [0.772, 0.173, 0.295]],
  [0.074, [0.78, 0.182, 0.297]],
  [0.076, [0.78, 0.182, 0.297]],
  [0.078, [0.789, 0.192, 0.299]],
  [0.08, [0.789, 0.192, 0.299]],
  [0.082, [0.797, 0.201, 0.301]],
  [0.084, [0.797, 0.201, 0.301]],
  [0.086, [0.806, 0.21, 0.303]],
  [0.088, [0.806, 0.21, 0.303]],
  [0.09, [0.814, 0.22, 0.305]],
  [0.092, [0.814, 0.22, 0.305]],
  [0.094, [0.823, 0.229, 0.307]],
  [0.096, [0.823, 0.229, 0.307]],
  [0.098, [0.831, 0.238, 0.309]],
  [0.1, [0.831, 0.238, 0.309]],
  [0.102, [0.838, 0.247, 0.309]],
  [0.104, [0.838, 0.247, 0.309]],
  [0.106, [0.842, 0.254, 0.307]],
  [0.108, [0.842, 0.254, 0.307]],
  [0.11, [0.847, 0.261, 0.305]],
  [0.112, [0.847, 0.261, 0.305]],
  [0.114, [0.852, 0.268, 0.303]],
  [0.115, [0.852, 0.268, 0.303]],
  [0.117, [0.857, 0.276, 0.301]],
  [0.119, [0.857, 0.276, 0.301]],
  [0.121, [0.862, 0.283, 0.3]],
  [0.123, [0.862, 0.283, 0.3]],
  [0.125, [0.866, 0.29, 0.298]],
  [0.127, [0.866, 0.29, 0.298]],
  [0.129, [0.871, 0.297, 0.296]],
  [0.131, [0.871, 0.297, 0.296]],
  [0.133, [0.876, 0.305, 0.294]],
  [0.135, [0.876, 0.305, 0.294]],
  [0.137, [0.881, 0.312, 0.292]],
  [0.139, [0.881, 0.312, 0.292]],
  [0.141, [0.885, 0.319, 0.29]],
  [0.143, [0.885, 0.319, 0.29]],
  [0.145, [0.89, 0.326, 0.289]],
  [0.147, [0.89, 0.326, 0.289]],
  [0.149, [0.895, 0.333, 0.287]],
  [0.151, [0.895, 0.333, 0.287]],
  [0.153, [0.9, 0.341, 0.285]],
  [0.155, [0.9, 0.341, 0.285]],
  [0.157, [0.904, 0.348, 0.283]],
  [0.159, [0.904, 0.348, 0.283]],
  [0.16, [0.909, 0.355, 0.281]],
  [0.162, [0.909, 0.355, 0.281]],
  [0.164, [0.914, 0.362, 0.279]],
  [0.166, [0.914, 0.362, 0.279]],
  [0.168, [0.919, 0.37, 0.278]],
  [0.17, [0.919, 0.37, 0.278]],
  [0.172, [0.923, 0.377, 0.276]],
  [0.174, [0.923, 0.377, 0.276]],
  [0.176, [0.928, 0.384, 0.274]],
  [0.178, [0.928, 0.384, 0.274]],
  [0.18, [0.933, 0.391, 0.272]],
  [0.182, [0.933, 0.391, 0.272]],
  [0.184, [0.938, 0.399, 0.27]],
  [0.186, [0.938, 0.399, 0.27]],
  [0.188, [0.943, 0.406, 0.268]],
  [0.19, [0.943, 0.406, 0.268]],
  [0.192, [0.947, 0.413, 0.266]],
  [0.194, [0.947, 0.413, 0.266]],
  [0.196, [0.952, 0.42, 0.265]],
  [0.198, [0.952, 0.42, 0.265]],
  [0.2, [0.957, 0.427, 0.263]],
  [0.202, [0.957, 0.427, 0.263]],
  [0.204, [0.958, 0.437, 0.267]],
  [0.205, [0.958, 0.437, 0.267]],
  [0.207, [0.96, 0.447, 0.272]],
  [0.209, [0.96, 0.447, 0.272]],
  [0.211, [0.961, 0.457, 0.277]],
  [0.213, [0.961, 0.457, 0.277]],
  [0.215, [0.962, 0.467, 0.281]],
  [0.217, [0.962, 0.467, 0.281]],
  [0.219, [0.964, 0.477, 0.286]],
  [0.221, [0.964, 0.477, 0.286]],
  [0.223, [0.965, 0.487, 0.29]],
  [0.225, [0.965, 0.487, 0.29]],
  [0.227, [0.967, 0.497, 0.295]],
  [0.229, [0.967, 0.497, 0.295]],
  [0.231, [0.968, 0.507, 0.3]],
  [0.233, [0.968, 0.507, 0.3]],
  [0.235, [0.969, 0.517, 0.304]],
  [0.237, [0.969, 0.517, 0.304]],
  [0.239, [0.971, 0.527, 0.309]],
  [0.241, [0.971, 0.527, 0.309]],
  [0.243, [0.972, 0.537, 0.313]],
  [0.245, [0.972, 0.537, 0.313]],
  [0.247, [0.973, 0.547, 0.318]],
  [0.249, [0.973, 0.547, 0.318]],
  [0.25, [0.975, 0.557, 0.323]],
  [0.252, [0.975, 0.557, 0.323]],
  [0.254, [0.976, 0.567, 0.327]],
  [0.256, [0.976, 0.567, 0.327]],
  [0.258, [0.978, 0.577, 0.332]],
  [0.26, [0.978, 0.577, 0.332]],
  [0.262, [0.979, 0.587, 0.337]],
  [0.264, [0.979, 0.587, 0.337]],
  [0.266, [0.98, 0.597, 0.341]],
  [0.268, [0.98, 0.597, 0.341]],
  [0.27, [0.982, 0.607, 0.346]],
  [0.272, [0.982, 0.607, 0.346]],
  [0.274, [0.983, 0.617, 0.35]],
  [0.276, [0.983, 0.617, 0.35]],
  [0.278, [0.985, 0.627, 0.355]],
  [0.28, [0.985, 0.627, 0.355]],
  [0.282, [0.986, 0.637, 0.36]],
  [0.284, [0.986, 0.637, 0.36]],
  [0.286, [0.987, 0.647, 0.364]],
  [0.288, [0.987, 0.647, 0.364]],
  [0.29, [0.989, 0.657, 0.369]],
  [0.292, [0.989, 0.657, 0.369]],
  [0.294, [0.99, 0.667, 0.373]],
  [0.295, [0.99, 0.667, 0.373]],
  [0.297, [0.991, 0.677, 0.378]],
  [0.299, [0.991, 0.677, 0.378]],
  [0.301, [0.992, 0.686, 0.384]],
  [0.303, [0.992, 0.686, 0.384]],
  [0.305, [0.992, 0.694, 0.39]],
  [0.307, [0.992, 0.694, 0.39]],
  [0.309, [0.993, 0.702, 0.397]],
  [0.311, [0.993, 0.702, 0.397]],
  [0.313, [0.993, 0.709, 0.403]],
  [0.315, [0.993, 0.709, 0.403]],
  [0.317, [0.993, 0.717, 0.409]],
  [0.319, [0.993, 0.717, 0.409]],
  [0.321, [0.993, 0.725, 0.416]],
  [0.323, [0.993, 0.725, 0.416]],
  [0.325, [0.993, 0.732, 0.422]],
  [0.327, [0.993, 0.732, 0.422]],
  [0.329, [0.993, 0.74, 0.429]],
  [0.331, [0.993, 0.74, 0.429]],
  [0.333, [0.993, 0.748, 0.435]],
  [0.335, [0.993, 0.748, 0.435]],
  [0.337, [0.994, 0.755, 0.442]],
  [0.339, [0.994, 0.755, 0.442]],
  [0.341, [0.994, 0.763, 0.448]],
  [0.342, [0.994, 0.763, 0.448]],
  [0.344, [0.994, 0.771, 0.455]],
  [0.346, [0.994, 0.771, 0.455]],
  [0.348, [0.994, 0.778, 0.461]],
  [0.35, [0.994, 0.778, 0.461]],
  [0.352, [0.994, 0.786, 0.468]],
  [0.354, [0.994, 0.786, 0.468]],
  [0.356, [0.994, 0.794, 0.474]],
  [0.358, [0.994, 0.794, 0.474]],
  [0.36, [0.995, 0.802, 0.481]],
  [0.362, [0.995, 0.802, 0.481]],
  [0.364, [0.995, 0.809, 0.487]],
  [0.366, [0.995, 0.809, 0.487]],
  [0.368, [0.995, 0.817, 0.493]],
  [0.37, [0.995, 0.817, 0.493]],
  [0.372, [0.995, 0.825, 0.5]],
  [0.374, [0.995, 0.825, 0.5]],
  [0.376, [0.995, 0.832, 0.506]],
  [0.378, [0.995, 0.832, 0.506]],
  [0.38, [0.995, 0.84, 0.513]],
  [0.382, [0.995, 0.84, 0.513]],
  [0.384, [0.995, 0.848, 0.519]],
  [0.386, [0.995, 0.848, 0.519]],
  [0.387, [0.996, 0.855, 0.526]],
  [0.389, [0.996, 0.855, 0.526]],
  [0.391, [0.996, 0.863, 0.532]],
  [0.393, [0.996, 0.863, 0.532]],
  [0.395, [0.996, 0.871, 0.539]],
  [0.397, [0.996, 0.871, 0.539]],
  [0.399, [0.996, 0.878, 0.545]],
  [0.401, [0.996, 0.878, 0.545]],
  [0.403, [0.996, 0.883, 0.553]],
  [0.405, [0.996, 0.883, 0.553]],
  [0.407, [0.996, 0.888, 0.561]],
  [0.409, [0.996, 0.888, 0.561]],
  [0.411, [0.997, 0.893, 0.569]],
  [0.413, [0.997, 0.893, 0.569]],
  [0.415, [0.997, 0.898, 0.577]],
  [0.417, [0.997, 0.898, 0.577]],
  [0.419, [0.997, 0.902, 0.585]],
  [0.421, [0.997, 0.902, 0.585]],
  [0.423, [0.997, 0.907, 0.593]],
  [0.425, [0.997, 0.907, 0.593]],
  [0.427, [0.997, 0.912, 0.601]],
  [0.429, [0.997, 0.912, 0.601]],
  [0.431, [0.997, 0.917, 0.609]],
  [0.432, [0.997, 0.917, 0.609]],
  [0.434, [0.997, 0.921, 0.617]],
  [0.436, [0.997, 0.921, 0.617]],
  [0.438, [0.998, 0.926, 0.625]],
  [0.44, [0.998, 0.926, 0.625]],
  [0.442, [0.998, 0.931, 0.633]],
  [0.444, [0.998, 0.931, 0.633]],
  [0.446, [0.998, 0.936, 0.641]],
  [0.448, [0.998, 0.936, 0.641]],
  [0.45, [0.998, 0.94, 0.649]],
  [0.452, [0.998, 0.94, 0.649]],
  [0.454, [0.998, 0.945, 0.657]],
  [0.456, [0.998, 0.945, 0.657]],
  [0.458, [0.998, 0.95, 0.665]],
  [0.46, [0.998, 0.95, 0.665]],
  [0.462, [0.999, 0.955, 0.673]],
  [0.464, [0.999, 0.955, 0.673]],
  [0.466, [0.999, 0.959, 0.681]],
  [0.468, [0.999, 0.959, 0.681]],
  [0.47, [0.999, 0.964, 0.689]],
  [0.472, [0.999, 0.964, 0.689]],
  [0.474, [0.999, 0.969, 0.697]],
  [0.476, [0.999, 0.969, 0.697]],
  [0.477, [0.999, 0.974, 0.705]],
  [0.479, [0.999, 0.974, 0.705]],
  [0.481, [0.999, 0.979, 0.713]],
  [0.483, [0.999, 0.979, 0.713]],
  [0.485, [0.999, 0.983, 0.721]],
  [0.487, [0.999, 0.983, 0.721]],
  [0.489, [1, 0.988, 0.729]],
  [0.491, [1, 0.988, 0.729]],
  [0.493, [1, 0.993, 0.737]],
  [0.495, [1, 0.993, 0.737]],
  [0.497, [1, 0.998, 0.745]],
  [0.499, [1, 0.998, 0.745]],
  [0.501, [0.998, 0.999, 0.746]],
  [0.503, [0.998, 0.999, 0.746]],
  [0.505, [0.994, 0.998, 0.74]],
  [0.507, [0.994, 0.998, 0.74]],
  [0.509, [0.99, 0.996, 0.734]],
  [0.511, [0.99, 0.996, 0.734]],
  [0.513, [0.987, 0.995, 0.728]],
  [0.515, [0.987, 0.995, 0.728]],
  [0.517, [0.983, 0.993, 0.722]],
  [0.519, [0.983, 0.993, 0.722]],
  [0.521, [0.979, 0.992, 0.716]],
  [0.523, [0.979, 0.992, 0.716]],
  [0.524, [0.975, 0.99, 0.71]],
  [0.526, [0.975, 0.99, 0.71]],
  [0.528, [0.971, 0.988, 0.704]],
  [0.53, [0.971, 0.988, 0.704]],
  [0.532, [0.967, 0.987, 0.698]],
  [0.534, [0.967, 0.987, 0.698]],
  [0.536, [0.963, 0.985, 0.692]],
  [0.538, [0.963, 0.985, 0.692]],
  [0.54, [0.96, 0.984, 0.686]],
  [0.542, [0.96, 0.984, 0.686]],
  [0.544, [0.956, 0.982, 0.68]],
  [0.546, [0.956, 0.982, 0.68]],
  [0.548, [0.952, 0.981, 0.674]],
  [0.55, [0.952, 0.981, 0.674]],
  [0.552, [0.948, 0.979, 0.668]],
  [0.554, [0.948, 0.979, 0.668]],
  [0.556, [0.944, 0.978, 0.662]],
  [0.558, [0.944, 0.978, 0.662]],
  [0.56, [0.94, 0.976, 0.656]],
  [0.562, [0.94, 0.976, 0.656]],
  [0.564, [0.937, 0.975, 0.65]],
  [0.566, [0.937, 0.975, 0.65]],
  [0.568, [0.933, 0.973, 0.644]],
  [0.569, [0.933, 0.973, 0.644]],
  [0.571, [0.929, 0.972, 0.638]],
  [0.573, [0.929, 0.972, 0.638]],
  [0.575, [0.925, 0.97, 0.632]],
  [0.577, [0.925, 0.97, 0.632]],
  [0.579, [0.921, 0.968, 0.626]],
  [0.581, [0.921, 0.968, 0.626]],
  [0.583, [0.917, 0.967, 0.62]],
  [0.585, [0.917, 0.967, 0.62]],
  [0.587, [0.913, 0.965, 0.614]],
  [0.589, [0.913, 0.965, 0.614]],
  [0.591, [0.91, 0.964, 0.608]],
  [0.593, [0.91, 0.964, 0.608]],
  [0.595, [0.906, 0.962, 0.602]],
  [0.597, [0.906, 0.962, 0.602]],
  [0.599, [0.902, 0.961, 0.596]],
  [0.601, [0.902, 0.961, 0.596]],
  [0.603, [0.893, 0.957, 0.598]],
  [0.605, [0.893, 0.957, 0.598]],
  [0.607, [0.884, 0.953, 0.6]],
  [0.609, [0.884, 0.953, 0.6]],
  [0.611, [0.875, 0.95, 0.602]],
  [0.613, [0.875, 0.95, 0.602]],
  [0.614, [0.866, 0.946, 0.603]],
  [0.616, [0.866, 0.946, 0.603]],
  [0.618, [0.857, 0.942, 0.605]],
  [0.62, [0.857, 0.942, 0.605]],
  [0.622, [0.848, 0.939, 0.607]],
  [0.624, [0.848, 0.939, 0.607]],
  [0.626, [0.838, 0.935, 0.609]],
  [0.628, [0.838, 0.935, 0.609]],
  [0.63, [0.829, 0.931, 0.611]],
  [0.632, [0.829, 0.931, 0.611]],
  [0.634, [0.82, 0.928, 0.613]],
  [0.636, [0.82, 0.928, 0.613]],
  [0.638, [0.811, 0.924, 0.615]],
  [0.64, [0.811, 0.924, 0.615]],
  [0.642, [0.802, 0.92, 0.616]],
  [0.644, [0.802, 0.92, 0.616]],
  [0.646, [0.793, 0.916, 0.618]],
  [0.648, [0.793, 0.916, 0.618]],
  [0.65, [0.784, 0.913, 0.62]],
  [0.652, [0.784, 0.913, 0.62]],
  [0.654, [0.775, 0.909, 0.622]],
  [0.656, [0.775, 0.909, 0.622]],
  [0.658, [0.766, 0.905, 0.624]],
  [0.659, [0.766, 0.905, 0.624]],
  [0.661, [0.757, 0.902, 0.626]],
  [0.663, [0.757, 0.902, 0.626]],
  [0.665, [0.748, 0.898, 0.627]],
  [0.667, [0.748, 0.898, 0.627]],
  [0.669, [0.739, 0.894, 0.629]],
  [0.671, [0.739, 0.894, 0.629]],
  [0.673, [0.73, 0.891, 0.631]],
  [0.675, [0.73, 0.891, 0.631]],
  [0.677, [0.72, 0.887, 0.633]],
  [0.679, [0.72, 0.887, 0.633]],
  [0.681, [0.711, 0.883, 0.635]],
  [0.683, [0.711, 0.883, 0.635]],
  [0.685, [0.702, 0.88, 0.637]],
  [0.687, [0.702, 0.88, 0.637]],
  [0.689, [0.693, 0.876, 0.639]],
  [0.691, [0.693, 0.876, 0.639]],
  [0.693, [0.684, 0.872, 0.64]],
  [0.695, [0.684, 0.872, 0.64]],
  [0.697, [0.675, 0.869, 0.642]],
  [0.699, [0.675, 0.869, 0.642]],
  [0.701, [0.665, 0.865, 0.643]],
  [0.703, [0.665, 0.865, 0.643]],
  [0.705, [0.655, 0.86, 0.643]],
  [0.706, [0.655, 0.86, 0.643]],
  [0.708, [0.644, 0.856, 0.644]],
  [0.71, [0.644, 0.856, 0.644]],
  [0.712, [0.633, 0.852, 0.644]],
  [0.714, [0.633, 0.852, 0.644]],
  [0.716, [0.623, 0.848, 0.644]],
  [0.718, [0.623, 0.848, 0.644]],
  [0.72, [0.612, 0.844, 0.644]],
  [0.722, [0.612, 0.844, 0.644]],
  [0.724, [0.602, 0.84, 0.644]],
  [0.726, [0.602, 0.84, 0.644]],
  [0.728, [0.591, 0.836, 0.644]],
  [0.73, [0.591, 0.836, 0.644]],
  [0.732, [0.58, 0.831, 0.644]],
  [0.734, [0.58, 0.831, 0.644]],
  [0.736, [0.57, 0.827, 0.645]],
  [0.738, [0.57, 0.827, 0.645]],
  [0.74, [0.559, 0.823, 0.645]],
  [0.742, [0.559, 0.823, 0.645]],
  [0.744, [0.549, 0.819, 0.645]],
  [0.746, [0.549, 0.819, 0.645]],
  [0.748, [0.538, 0.815, 0.645]],
  [0.75, [0.538, 0.815, 0.645]],
  [0.751, [0.527, 0.811, 0.645]],
  [0.753, [0.527, 0.811, 0.645]],
  [0.755, [0.517, 0.806, 0.645]],
  [0.757, [0.517, 0.806, 0.645]],
  [0.759, [0.506, 0.802, 0.646]],
  [0.761, [0.506, 0.802, 0.646]],
  [0.763, [0.496, 0.798, 0.646]],
  [0.765, [0.496, 0.798, 0.646]],
  [0.767, [0.485, 0.794, 0.646]],
  [0.769, [0.485, 0.794, 0.646]],
  [0.771, [0.474, 0.79, 0.646]],
  [0.773, [0.474, 0.79, 0.646]],
  [0.775, [0.464, 0.786, 0.646]],
  [0.777, [0.464, 0.786, 0.646]],
  [0.779, [0.453, 0.782, 0.646]],
  [0.781, [0.453, 0.782, 0.646]],
  [0.783, [0.442, 0.777, 0.646]],
  [0.785, [0.442, 0.777, 0.646]],
  [0.787, [0.432, 0.773, 0.647]],
  [0.789, [0.432, 0.773, 0.647]],
  [0.791, [0.421, 0.769, 0.647]],
  [0.793, [0.421, 0.769, 0.647]],
  [0.795, [0.411, 0.765, 0.647]],
  [0.796, [0.411, 0.765, 0.647]],
  [0.798, [0.4, 0.761, 0.647]],
  [0.8, [0.4, 0.761, 0.647]],
  [0.802, [0.392, 0.752, 0.651]],
  [0.804, [0.392, 0.752, 0.651]],
  [0.806, [0.384, 0.743, 0.654]],
  [0.808, [0.384, 0.743, 0.654]],
  [0.81, [0.376, 0.734, 0.658]],
  [0.812, [0.376, 0.734, 0.658]],
  [0.814, [0.368, 0.725, 0.662]],
  [0.816, [0.368, 0.725, 0.662]],
  [0.818, [0.36, 0.716, 0.666]],
  [0.82, [0.36, 0.716, 0.666]],
  [0.822, [0.352, 0.707, 0.669]],
  [0.824, [0.352, 0.707, 0.669]],
  [0.826, [0.344, 0.698, 0.673]],
  [0.828, [0.344, 0.698, 0.673]],
  [0.83, [0.336, 0.689, 0.677]],
  [0.832, [0.336, 0.689, 0.677]],
  [0.834, [0.328, 0.681, 0.68]],
  [0.836, [0.328, 0.681, 0.68]],
  [0.838, [0.32, 0.672, 0.684]],
  [0.84, [0.32, 0.672, 0.684]],
  [0.841, [0.312, 0.663, 0.688]],
  [0.843, [0.312, 0.663, 0.688]],
  [0.845, [0.304, 0.654, 0.691]],
  [0.847, [0.304, 0.654, 0.691]],
  [0.849, [0.296, 0.645, 0.695]],
  [0.851, [0.296, 0.645, 0.695]],
  [0.853, [0.288, 0.636, 0.699]],
  [0.855, [0.288, 0.636, 0.699]],
  [0.857, [0.28, 0.627, 0.702]],
  [0.859, [0.28, 0.627, 0.702]],
  [0.861, [0.272, 0.618, 0.706]],
  [0.863, [0.272, 0.618, 0.706]],
  [0.865, [0.264, 0.609, 0.71]],
  [0.867, [0.264, 0.609, 0.71]],
  [0.869, [0.256, 0.6, 0.713]],
  [0.871, [0.256, 0.6, 0.713]],
  [0.873, [0.248, 0.591, 0.717]],
  [0.875, [0.248, 0.591, 0.717]],
  [0.877, [0.24, 0.582, 0.721]],
  [0.879, [0.24, 0.582, 0.721]],
  [0.881, [0.232, 0.573, 0.725]],
  [0.883, [0.232, 0.573, 0.725]],
  [0.885, [0.224, 0.565, 0.728]],
  [0.886, [0.224, 0.565, 0.728]],
  [0.888, [0.216, 0.556, 0.732]],
  [0.89, [0.216, 0.556, 0.732]],
  [0.892, [0.208, 0.547, 0.736]],
  [0.894, [0.208, 0.547, 0.736]],
  [0.896, [0.2, 0.538, 0.739]],
  [0.898, [0.2, 0.538, 0.739]],
  [0.9, [0.199, 0.529, 0.739]],
  [0.902, [0.199, 0.529, 0.739]],
  [0.904, [0.206, 0.52, 0.735]],
  [0.906, [0.206, 0.52, 0.735]],
  [0.908, [0.213, 0.511, 0.731]],
  [0.91, [0.213, 0.511, 0.731]],
  [0.912, [0.22, 0.503, 0.727]],
  [0.914, [0.22, 0.503, 0.727]],
  [0.916, [0.227, 0.494, 0.722]],
  [0.918, [0.227, 0.494, 0.722]],
  [0.92, [0.233, 0.485, 0.718]],
  [0.922, [0.233, 0.485, 0.718]],
  [0.924, [0.24, 0.476, 0.714]],
  [0.926, [0.24, 0.476, 0.714]],
  [0.928, [0.247, 0.468, 0.71]],
  [0.93, [0.247, 0.468, 0.71]],
  [0.932, [0.254, 0.459, 0.706]],
  [0.933, [0.254, 0.459, 0.706]],
  [0.935, [0.26, 0.45, 0.702]],
  [0.937, [0.26, 0.45, 0.702]],
  [0.939, [0.267, 0.441, 0.698]],
  [0.941, [0.267, 0.441, 0.698]],
  [0.943, [0.274, 0.433, 0.693]],
  [0.945, [0.274, 0.433, 0.693]],
  [0.947, [0.281, 0.424, 0.689]],
  [0.949, [0.281, 0.424, 0.689]],
  [0.951, [0.287, 0.415, 0.685]],
  [0.953, [0.287, 0.415, 0.685]],
  [0.955, [0.294, 0.406, 0.681]],
  [0.957, [0.294, 0.406, 0.681]],
  [0.959, [0.301, 0.397, 0.677]],
  [0.961, [0.301, 0.397, 0.677]],
  [0.963, [0.308, 0.389, 0.673]],
  [0.965, [0.308, 0.389, 0.673]],
  [0.967, [0.314, 0.38, 0.669]],
  [0.969, [0.314, 0.38, 0.669]],
  [0.971, [0.321, 0.371, 0.664]],
  [0.973, [0.321, 0.371, 0.664]],
  [0.975, [0.328, 0.362, 0.66]],
  [0.977, [0.328, 0.362, 0.66]],
  [0.978, [0.335, 0.354, 0.656]],
  [0.98, [0.335, 0.354, 0.656]],
  [0.982, [0.342, 0.345, 0.652]],
  [0.984, [0.342, 0.345, 0.652]],
  [0.986, [0.348, 0.336, 0.648]],
  [0.988, [0.348, 0.336, 0.648]],
  [0.99, [0.355, 0.327, 0.644]],
  [0.992, [0.355, 0.327, 0.644]],
  [0.994, [0.362, 0.319, 0.639]],
  [0.996, [0.362, 0.319, 0.639]],
  [0.998, [0.369, 0.31, 0.635]],
  [1, [0.369, 0.31, 0.635]]
], Zf = [
  [0, [0, 0, 1]],
  [2e-3, [0, 0, 1]],
  [4e-3, [8e-3, 8e-3, 1]],
  [6e-3, [8e-3, 8e-3, 1]],
  [8e-3, [0.016, 0.016, 1]],
  [0.01, [0.016, 0.016, 1]],
  [0.012, [0.024, 0.024, 1]],
  [0.014, [0.024, 0.024, 1]],
  [0.016, [0.031, 0.031, 1]],
  [0.018, [0.031, 0.031, 1]],
  [0.02, [0.039, 0.039, 1]],
  [0.022, [0.039, 0.039, 1]],
  [0.023, [0.047, 0.047, 1]],
  [0.025, [0.047, 0.047, 1]],
  [0.027, [0.055, 0.055, 1]],
  [0.029, [0.055, 0.055, 1]],
  [0.031, [0.063, 0.063, 1]],
  [0.033, [0.063, 0.063, 1]],
  [0.035, [0.071, 0.071, 1]],
  [0.037, [0.071, 0.071, 1]],
  [0.039, [0.078, 0.078, 1]],
  [0.041, [0.078, 0.078, 1]],
  [0.043, [0.086, 0.086, 1]],
  [0.045, [0.086, 0.086, 1]],
  [0.047, [0.094, 0.094, 1]],
  [0.049, [0.094, 0.094, 1]],
  [0.051, [0.102, 0.102, 1]],
  [0.053, [0.102, 0.102, 1]],
  [0.055, [0.11, 0.11, 1]],
  [0.057, [0.11, 0.11, 1]],
  [0.059, [0.118, 0.118, 1]],
  [0.061, [0.118, 0.118, 1]],
  [0.063, [0.125, 0.125, 1]],
  [0.065, [0.125, 0.125, 1]],
  [0.067, [0.133, 0.133, 1]],
  [0.068, [0.133, 0.133, 1]],
  [0.07, [0.141, 0.141, 1]],
  [0.072, [0.141, 0.141, 1]],
  [0.074, [0.149, 0.149, 1]],
  [0.076, [0.149, 0.149, 1]],
  [0.078, [0.157, 0.157, 1]],
  [0.08, [0.157, 0.157, 1]],
  [0.082, [0.165, 0.165, 1]],
  [0.084, [0.165, 0.165, 1]],
  [0.086, [0.173, 0.173, 1]],
  [0.088, [0.173, 0.173, 1]],
  [0.09, [0.18, 0.18, 1]],
  [0.092, [0.18, 0.18, 1]],
  [0.094, [0.188, 0.188, 1]],
  [0.096, [0.188, 0.188, 1]],
  [0.098, [0.196, 0.196, 1]],
  [0.1, [0.196, 0.196, 1]],
  [0.102, [0.204, 0.204, 1]],
  [0.104, [0.204, 0.204, 1]],
  [0.106, [0.212, 0.212, 1]],
  [0.108, [0.212, 0.212, 1]],
  [0.11, [0.22, 0.22, 1]],
  [0.112, [0.22, 0.22, 1]],
  [0.114, [0.227, 0.227, 1]],
  [0.115, [0.227, 0.227, 1]],
  [0.117, [0.235, 0.235, 1]],
  [0.119, [0.235, 0.235, 1]],
  [0.121, [0.243, 0.243, 1]],
  [0.123, [0.243, 0.243, 1]],
  [0.125, [0.251, 0.251, 1]],
  [0.127, [0.251, 0.251, 1]],
  [0.129, [0.259, 0.259, 1]],
  [0.131, [0.259, 0.259, 1]],
  [0.133, [0.267, 0.267, 1]],
  [0.135, [0.267, 0.267, 1]],
  [0.137, [0.275, 0.275, 1]],
  [0.139, [0.275, 0.275, 1]],
  [0.141, [0.282, 0.282, 1]],
  [0.143, [0.282, 0.282, 1]],
  [0.145, [0.29, 0.29, 1]],
  [0.147, [0.29, 0.29, 1]],
  [0.149, [0.298, 0.298, 1]],
  [0.151, [0.298, 0.298, 1]],
  [0.153, [0.306, 0.306, 1]],
  [0.155, [0.306, 0.306, 1]],
  [0.157, [0.314, 0.314, 1]],
  [0.159, [0.314, 0.314, 1]],
  [0.16, [0.322, 0.322, 1]],
  [0.162, [0.322, 0.322, 1]],
  [0.164, [0.329, 0.329, 1]],
  [0.166, [0.329, 0.329, 1]],
  [0.168, [0.337, 0.337, 1]],
  [0.17, [0.337, 0.337, 1]],
  [0.172, [0.345, 0.345, 1]],
  [0.174, [0.345, 0.345, 1]],
  [0.176, [0.353, 0.353, 1]],
  [0.178, [0.353, 0.353, 1]],
  [0.18, [0.361, 0.361, 1]],
  [0.182, [0.361, 0.361, 1]],
  [0.184, [0.369, 0.369, 1]],
  [0.186, [0.369, 0.369, 1]],
  [0.188, [0.376, 0.376, 1]],
  [0.19, [0.376, 0.376, 1]],
  [0.192, [0.384, 0.384, 1]],
  [0.194, [0.384, 0.384, 1]],
  [0.196, [0.392, 0.392, 1]],
  [0.198, [0.392, 0.392, 1]],
  [0.2, [0.4, 0.4, 1]],
  [0.202, [0.4, 0.4, 1]],
  [0.204, [0.408, 0.408, 1]],
  [0.205, [0.408, 0.408, 1]],
  [0.207, [0.416, 0.416, 1]],
  [0.209, [0.416, 0.416, 1]],
  [0.211, [0.424, 0.424, 1]],
  [0.213, [0.424, 0.424, 1]],
  [0.215, [0.431, 0.431, 1]],
  [0.217, [0.431, 0.431, 1]],
  [0.219, [0.439, 0.439, 1]],
  [0.221, [0.439, 0.439, 1]],
  [0.223, [0.447, 0.447, 1]],
  [0.225, [0.447, 0.447, 1]],
  [0.227, [0.455, 0.455, 1]],
  [0.229, [0.455, 0.455, 1]],
  [0.231, [0.463, 0.463, 1]],
  [0.233, [0.463, 0.463, 1]],
  [0.235, [0.471, 0.471, 1]],
  [0.237, [0.471, 0.471, 1]],
  [0.239, [0.478, 0.478, 1]],
  [0.241, [0.478, 0.478, 1]],
  [0.243, [0.486, 0.486, 1]],
  [0.245, [0.486, 0.486, 1]],
  [0.247, [0.494, 0.494, 1]],
  [0.249, [0.494, 0.494, 1]],
  [0.25, [0.502, 0.502, 1]],
  [0.252, [0.502, 0.502, 1]],
  [0.254, [0.51, 0.51, 1]],
  [0.256, [0.51, 0.51, 1]],
  [0.258, [0.518, 0.518, 1]],
  [0.26, [0.518, 0.518, 1]],
  [0.262, [0.525, 0.525, 1]],
  [0.264, [0.525, 0.525, 1]],
  [0.266, [0.533, 0.533, 1]],
  [0.268, [0.533, 0.533, 1]],
  [0.27, [0.541, 0.541, 1]],
  [0.272, [0.541, 0.541, 1]],
  [0.274, [0.549, 0.549, 1]],
  [0.276, [0.549, 0.549, 1]],
  [0.278, [0.557, 0.557, 1]],
  [0.28, [0.557, 0.557, 1]],
  [0.282, [0.565, 0.565, 1]],
  [0.284, [0.565, 0.565, 1]],
  [0.286, [0.573, 0.573, 1]],
  [0.288, [0.573, 0.573, 1]],
  [0.29, [0.58, 0.58, 1]],
  [0.292, [0.58, 0.58, 1]],
  [0.294, [0.588, 0.588, 1]],
  [0.295, [0.588, 0.588, 1]],
  [0.297, [0.596, 0.596, 1]],
  [0.299, [0.596, 0.596, 1]],
  [0.301, [0.604, 0.604, 1]],
  [0.303, [0.604, 0.604, 1]],
  [0.305, [0.612, 0.612, 1]],
  [0.307, [0.612, 0.612, 1]],
  [0.309, [0.62, 0.62, 1]],
  [0.311, [0.62, 0.62, 1]],
  [0.313, [0.627, 0.627, 1]],
  [0.315, [0.627, 0.627, 1]],
  [0.317, [0.635, 0.635, 1]],
  [0.319, [0.635, 0.635, 1]],
  [0.321, [0.643, 0.643, 1]],
  [0.323, [0.643, 0.643, 1]],
  [0.325, [0.651, 0.651, 1]],
  [0.327, [0.651, 0.651, 1]],
  [0.329, [0.659, 0.659, 1]],
  [0.331, [0.659, 0.659, 1]],
  [0.333, [0.667, 0.667, 1]],
  [0.335, [0.667, 0.667, 1]],
  [0.337, [0.675, 0.675, 1]],
  [0.339, [0.675, 0.675, 1]],
  [0.341, [0.682, 0.682, 1]],
  [0.342, [0.682, 0.682, 1]],
  [0.344, [0.69, 0.69, 1]],
  [0.346, [0.69, 0.69, 1]],
  [0.348, [0.698, 0.698, 1]],
  [0.35, [0.698, 0.698, 1]],
  [0.352, [0.706, 0.706, 1]],
  [0.354, [0.706, 0.706, 1]],
  [0.356, [0.714, 0.714, 1]],
  [0.358, [0.714, 0.714, 1]],
  [0.36, [0.722, 0.722, 1]],
  [0.362, [0.722, 0.722, 1]],
  [0.364, [0.729, 0.729, 1]],
  [0.366, [0.729, 0.729, 1]],
  [0.368, [0.737, 0.737, 1]],
  [0.37, [0.737, 0.737, 1]],
  [0.372, [0.745, 0.745, 1]],
  [0.374, [0.745, 0.745, 1]],
  [0.376, [0.753, 0.753, 1]],
  [0.378, [0.753, 0.753, 1]],
  [0.38, [0.761, 0.761, 1]],
  [0.382, [0.761, 0.761, 1]],
  [0.384, [0.769, 0.769, 1]],
  [0.386, [0.769, 0.769, 1]],
  [0.387, [0.776, 0.776, 1]],
  [0.389, [0.776, 0.776, 1]],
  [0.391, [0.784, 0.784, 1]],
  [0.393, [0.784, 0.784, 1]],
  [0.395, [0.792, 0.792, 1]],
  [0.397, [0.792, 0.792, 1]],
  [0.399, [0.8, 0.8, 1]],
  [0.401, [0.8, 0.8, 1]],
  [0.403, [0.808, 0.808, 1]],
  [0.405, [0.808, 0.808, 1]],
  [0.407, [0.816, 0.816, 1]],
  [0.409, [0.816, 0.816, 1]],
  [0.411, [0.824, 0.824, 1]],
  [0.413, [0.824, 0.824, 1]],
  [0.415, [0.831, 0.831, 1]],
  [0.417, [0.831, 0.831, 1]],
  [0.419, [0.839, 0.839, 1]],
  [0.421, [0.839, 0.839, 1]],
  [0.423, [0.847, 0.847, 1]],
  [0.425, [0.847, 0.847, 1]],
  [0.427, [0.855, 0.855, 1]],
  [0.429, [0.855, 0.855, 1]],
  [0.431, [0.863, 0.863, 1]],
  [0.432, [0.863, 0.863, 1]],
  [0.434, [0.871, 0.871, 1]],
  [0.436, [0.871, 0.871, 1]],
  [0.438, [0.878, 0.878, 1]],
  [0.44, [0.878, 0.878, 1]],
  [0.442, [0.886, 0.886, 1]],
  [0.444, [0.886, 0.886, 1]],
  [0.446, [0.894, 0.894, 1]],
  [0.448, [0.894, 0.894, 1]],
  [0.45, [0.902, 0.902, 1]],
  [0.452, [0.902, 0.902, 1]],
  [0.454, [0.91, 0.91, 1]],
  [0.456, [0.91, 0.91, 1]],
  [0.458, [0.918, 0.918, 1]],
  [0.46, [0.918, 0.918, 1]],
  [0.462, [0.925, 0.925, 1]],
  [0.464, [0.925, 0.925, 1]],
  [0.466, [0.933, 0.933, 1]],
  [0.468, [0.933, 0.933, 1]],
  [0.47, [0.941, 0.941, 1]],
  [0.472, [0.941, 0.941, 1]],
  [0.474, [0.949, 0.949, 1]],
  [0.476, [0.949, 0.949, 1]],
  [0.477, [0.957, 0.957, 1]],
  [0.479, [0.957, 0.957, 1]],
  [0.481, [0.965, 0.965, 1]],
  [0.483, [0.965, 0.965, 1]],
  [0.485, [0.973, 0.973, 1]],
  [0.487, [0.973, 0.973, 1]],
  [0.489, [0.98, 0.98, 1]],
  [0.491, [0.98, 0.98, 1]],
  [0.493, [0.988, 0.988, 1]],
  [0.495, [0.988, 0.988, 1]],
  [0.497, [0.996, 0.996, 1]],
  [0.499, [0.996, 0.996, 1]],
  [0.501, [1, 0.996, 0.996]],
  [0.503, [1, 0.996, 0.996]],
  [0.505, [1, 0.988, 0.988]],
  [0.507, [1, 0.988, 0.988]],
  [0.509, [1, 0.98, 0.98]],
  [0.511, [1, 0.98, 0.98]],
  [0.513, [1, 0.973, 0.973]],
  [0.515, [1, 0.973, 0.973]],
  [0.517, [1, 0.965, 0.965]],
  [0.519, [1, 0.965, 0.965]],
  [0.521, [1, 0.957, 0.957]],
  [0.523, [1, 0.957, 0.957]],
  [0.524, [1, 0.949, 0.949]],
  [0.526, [1, 0.949, 0.949]],
  [0.528, [1, 0.941, 0.941]],
  [0.53, [1, 0.941, 0.941]],
  [0.532, [1, 0.933, 0.933]],
  [0.534, [1, 0.933, 0.933]],
  [0.536, [1, 0.925, 0.925]],
  [0.538, [1, 0.925, 0.925]],
  [0.54, [1, 0.918, 0.918]],
  [0.542, [1, 0.918, 0.918]],
  [0.544, [1, 0.91, 0.91]],
  [0.546, [1, 0.91, 0.91]],
  [0.548, [1, 0.902, 0.902]],
  [0.55, [1, 0.902, 0.902]],
  [0.552, [1, 0.894, 0.894]],
  [0.554, [1, 0.894, 0.894]],
  [0.556, [1, 0.886, 0.886]],
  [0.558, [1, 0.886, 0.886]],
  [0.56, [1, 0.878, 0.878]],
  [0.562, [1, 0.878, 0.878]],
  [0.564, [1, 0.871, 0.871]],
  [0.566, [1, 0.871, 0.871]],
  [0.568, [1, 0.863, 0.863]],
  [0.569, [1, 0.863, 0.863]],
  [0.571, [1, 0.855, 0.855]],
  [0.573, [1, 0.855, 0.855]],
  [0.575, [1, 0.847, 0.847]],
  [0.577, [1, 0.847, 0.847]],
  [0.579, [1, 0.839, 0.839]],
  [0.581, [1, 0.839, 0.839]],
  [0.583, [1, 0.831, 0.831]],
  [0.585, [1, 0.831, 0.831]],
  [0.587, [1, 0.824, 0.824]],
  [0.589, [1, 0.824, 0.824]],
  [0.591, [1, 0.816, 0.816]],
  [0.593, [1, 0.816, 0.816]],
  [0.595, [1, 0.808, 0.808]],
  [0.597, [1, 0.808, 0.808]],
  [0.599, [1, 0.8, 0.8]],
  [0.601, [1, 0.8, 0.8]],
  [0.603, [1, 0.792, 0.792]],
  [0.605, [1, 0.792, 0.792]],
  [0.607, [1, 0.784, 0.784]],
  [0.609, [1, 0.784, 0.784]],
  [0.611, [1, 0.776, 0.776]],
  [0.613, [1, 0.776, 0.776]],
  [0.614, [1, 0.769, 0.769]],
  [0.616, [1, 0.769, 0.769]],
  [0.618, [1, 0.761, 0.761]],
  [0.62, [1, 0.761, 0.761]],
  [0.622, [1, 0.753, 0.753]],
  [0.624, [1, 0.753, 0.753]],
  [0.626, [1, 0.745, 0.745]],
  [0.628, [1, 0.745, 0.745]],
  [0.63, [1, 0.737, 0.737]],
  [0.632, [1, 0.737, 0.737]],
  [0.634, [1, 0.729, 0.729]],
  [0.636, [1, 0.729, 0.729]],
  [0.638, [1, 0.722, 0.722]],
  [0.64, [1, 0.722, 0.722]],
  [0.642, [1, 0.714, 0.714]],
  [0.644, [1, 0.714, 0.714]],
  [0.646, [1, 0.706, 0.706]],
  [0.648, [1, 0.706, 0.706]],
  [0.65, [1, 0.698, 0.698]],
  [0.652, [1, 0.698, 0.698]],
  [0.654, [1, 0.69, 0.69]],
  [0.656, [1, 0.69, 0.69]],
  [0.658, [1, 0.682, 0.682]],
  [0.659, [1, 0.682, 0.682]],
  [0.661, [1, 0.675, 0.675]],
  [0.663, [1, 0.675, 0.675]],
  [0.665, [1, 0.667, 0.667]],
  [0.667, [1, 0.667, 0.667]],
  [0.669, [1, 0.659, 0.659]],
  [0.671, [1, 0.659, 0.659]],
  [0.673, [1, 0.651, 0.651]],
  [0.675, [1, 0.651, 0.651]],
  [0.677, [1, 0.643, 0.643]],
  [0.679, [1, 0.643, 0.643]],
  [0.681, [1, 0.635, 0.635]],
  [0.683, [1, 0.635, 0.635]],
  [0.685, [1, 0.627, 0.627]],
  [0.687, [1, 0.627, 0.627]],
  [0.689, [1, 0.62, 0.62]],
  [0.691, [1, 0.62, 0.62]],
  [0.693, [1, 0.612, 0.612]],
  [0.695, [1, 0.612, 0.612]],
  [0.697, [1, 0.604, 0.604]],
  [0.699, [1, 0.604, 0.604]],
  [0.701, [1, 0.596, 0.596]],
  [0.703, [1, 0.596, 0.596]],
  [0.705, [1, 0.588, 0.588]],
  [0.706, [1, 0.588, 0.588]],
  [0.708, [1, 0.58, 0.58]],
  [0.71, [1, 0.58, 0.58]],
  [0.712, [1, 0.573, 0.573]],
  [0.714, [1, 0.573, 0.573]],
  [0.716, [1, 0.565, 0.565]],
  [0.718, [1, 0.565, 0.565]],
  [0.72, [1, 0.557, 0.557]],
  [0.722, [1, 0.557, 0.557]],
  [0.724, [1, 0.549, 0.549]],
  [0.726, [1, 0.549, 0.549]],
  [0.728, [1, 0.541, 0.541]],
  [0.73, [1, 0.541, 0.541]],
  [0.732, [1, 0.533, 0.533]],
  [0.734, [1, 0.533, 0.533]],
  [0.736, [1, 0.525, 0.525]],
  [0.738, [1, 0.525, 0.525]],
  [0.74, [1, 0.518, 0.518]],
  [0.742, [1, 0.518, 0.518]],
  [0.744, [1, 0.51, 0.51]],
  [0.746, [1, 0.51, 0.51]],
  [0.748, [1, 0.502, 0.502]],
  [0.75, [1, 0.502, 0.502]],
  [0.751, [1, 0.494, 0.494]],
  [0.753, [1, 0.494, 0.494]],
  [0.755, [1, 0.486, 0.486]],
  [0.757, [1, 0.486, 0.486]],
  [0.759, [1, 0.478, 0.478]],
  [0.761, [1, 0.478, 0.478]],
  [0.763, [1, 0.471, 0.471]],
  [0.765, [1, 0.471, 0.471]],
  [0.767, [1, 0.463, 0.463]],
  [0.769, [1, 0.463, 0.463]],
  [0.771, [1, 0.455, 0.455]],
  [0.773, [1, 0.455, 0.455]],
  [0.775, [1, 0.447, 0.447]],
  [0.777, [1, 0.447, 0.447]],
  [0.779, [1, 0.439, 0.439]],
  [0.781, [1, 0.439, 0.439]],
  [0.783, [1, 0.431, 0.431]],
  [0.785, [1, 0.431, 0.431]],
  [0.787, [1, 0.424, 0.424]],
  [0.789, [1, 0.424, 0.424]],
  [0.791, [1, 0.416, 0.416]],
  [0.793, [1, 0.416, 0.416]],
  [0.795, [1, 0.408, 0.408]],
  [0.796, [1, 0.408, 0.408]],
  [0.798, [1, 0.4, 0.4]],
  [0.8, [1, 0.4, 0.4]],
  [0.802, [1, 0.392, 0.392]],
  [0.804, [1, 0.392, 0.392]],
  [0.806, [1, 0.384, 0.384]],
  [0.808, [1, 0.384, 0.384]],
  [0.81, [1, 0.376, 0.376]],
  [0.812, [1, 0.376, 0.376]],
  [0.814, [1, 0.369, 0.369]],
  [0.816, [1, 0.369, 0.369]],
  [0.818, [1, 0.361, 0.361]],
  [0.82, [1, 0.361, 0.361]],
  [0.822, [1, 0.353, 0.353]],
  [0.824, [1, 0.353, 0.353]],
  [0.826, [1, 0.345, 0.345]],
  [0.828, [1, 0.345, 0.345]],
  [0.83, [1, 0.337, 0.337]],
  [0.832, [1, 0.337, 0.337]],
  [0.834, [1, 0.329, 0.329]],
  [0.836, [1, 0.329, 0.329]],
  [0.838, [1, 0.322, 0.322]],
  [0.84, [1, 0.322, 0.322]],
  [0.841, [1, 0.314, 0.314]],
  [0.843, [1, 0.314, 0.314]],
  [0.845, [1, 0.306, 0.306]],
  [0.847, [1, 0.306, 0.306]],
  [0.849, [1, 0.298, 0.298]],
  [0.851, [1, 0.298, 0.298]],
  [0.853, [1, 0.29, 0.29]],
  [0.855, [1, 0.29, 0.29]],
  [0.857, [1, 0.282, 0.282]],
  [0.859, [1, 0.282, 0.282]],
  [0.861, [1, 0.275, 0.275]],
  [0.863, [1, 0.275, 0.275]],
  [0.865, [1, 0.267, 0.267]],
  [0.867, [1, 0.267, 0.267]],
  [0.869, [1, 0.259, 0.259]],
  [0.871, [1, 0.259, 0.259]],
  [0.873, [1, 0.251, 0.251]],
  [0.875, [1, 0.251, 0.251]],
  [0.877, [1, 0.243, 0.243]],
  [0.879, [1, 0.243, 0.243]],
  [0.881, [1, 0.235, 0.235]],
  [0.883, [1, 0.235, 0.235]],
  [0.885, [1, 0.227, 0.227]],
  [0.886, [1, 0.227, 0.227]],
  [0.888, [1, 0.22, 0.22]],
  [0.89, [1, 0.22, 0.22]],
  [0.892, [1, 0.212, 0.212]],
  [0.894, [1, 0.212, 0.212]],
  [0.896, [1, 0.204, 0.204]],
  [0.898, [1, 0.204, 0.204]],
  [0.9, [1, 0.196, 0.196]],
  [0.902, [1, 0.196, 0.196]],
  [0.904, [1, 0.188, 0.188]],
  [0.906, [1, 0.188, 0.188]],
  [0.908, [1, 0.18, 0.18]],
  [0.91, [1, 0.18, 0.18]],
  [0.912, [1, 0.173, 0.173]],
  [0.914, [1, 0.173, 0.173]],
  [0.916, [1, 0.165, 0.165]],
  [0.918, [1, 0.165, 0.165]],
  [0.92, [1, 0.157, 0.157]],
  [0.922, [1, 0.157, 0.157]],
  [0.924, [1, 0.149, 0.149]],
  [0.926, [1, 0.149, 0.149]],
  [0.928, [1, 0.141, 0.141]],
  [0.93, [1, 0.141, 0.141]],
  [0.932, [1, 0.133, 0.133]],
  [0.933, [1, 0.133, 0.133]],
  [0.935, [1, 0.125, 0.125]],
  [0.937, [1, 0.125, 0.125]],
  [0.939, [1, 0.118, 0.118]],
  [0.941, [1, 0.118, 0.118]],
  [0.943, [1, 0.11, 0.11]],
  [0.945, [1, 0.11, 0.11]],
  [0.947, [1, 0.102, 0.102]],
  [0.949, [1, 0.102, 0.102]],
  [0.951, [1, 0.094, 0.094]],
  [0.953, [1, 0.094, 0.094]],
  [0.955, [1, 0.086, 0.086]],
  [0.957, [1, 0.086, 0.086]],
  [0.959, [1, 0.078, 0.078]],
  [0.961, [1, 0.078, 0.078]],
  [0.963, [1, 0.071, 0.071]],
  [0.965, [1, 0.071, 0.071]],
  [0.967, [1, 0.063, 0.063]],
  [0.969, [1, 0.063, 0.063]],
  [0.971, [1, 0.055, 0.055]],
  [0.973, [1, 0.055, 0.055]],
  [0.975, [1, 0.047, 0.047]],
  [0.977, [1, 0.047, 0.047]],
  [0.978, [1, 0.039, 0.039]],
  [0.98, [1, 0.039, 0.039]],
  [0.982, [1, 0.031, 0.031]],
  [0.984, [1, 0.031, 0.031]],
  [0.986, [1, 0.024, 0.024]],
  [0.988, [1, 0.024, 0.024]],
  [0.99, [1, 0.016, 0.016]],
  [0.992, [1, 0.016, 0.016]],
  [0.994, [1, 8e-3, 8e-3]],
  [0.996, [1, 8e-3, 8e-3]],
  [0.998, [1, 0, 0]],
  [1, [1, 0, 0]]
], qf = [
  [0, [0.23, 0.299, 0.754]],
  [2e-3, [0.23, 0.299, 0.754]],
  [4e-3, [0.234, 0.306, 0.76]],
  [6e-3, [0.234, 0.306, 0.76]],
  [8e-3, [0.239, 0.312, 0.766]],
  [0.01, [0.239, 0.312, 0.766]],
  [0.012, [0.244, 0.319, 0.772]],
  [0.014, [0.244, 0.319, 0.772]],
  [0.016, [0.248, 0.326, 0.778]],
  [0.018, [0.248, 0.326, 0.778]],
  [0.02, [0.253, 0.333, 0.784]],
  [0.022, [0.253, 0.333, 0.784]],
  [0.023, [0.257, 0.34, 0.79]],
  [0.025, [0.257, 0.34, 0.79]],
  [0.027, [0.262, 0.346, 0.796]],
  [0.029, [0.262, 0.346, 0.796]],
  [0.031, [0.266, 0.353, 0.802]],
  [0.033, [0.266, 0.353, 0.802]],
  [0.035, [0.271, 0.36, 0.807]],
  [0.037, [0.271, 0.36, 0.807]],
  [0.039, [0.276, 0.367, 0.813]],
  [0.041, [0.276, 0.367, 0.813]],
  [0.043, [0.281, 0.373, 0.818]],
  [0.045, [0.281, 0.373, 0.818]],
  [0.047, [0.285, 0.38, 0.823]],
  [0.049, [0.285, 0.38, 0.823]],
  [0.051, [0.29, 0.387, 0.829]],
  [0.053, [0.29, 0.387, 0.829]],
  [0.055, [0.295, 0.394, 0.834]],
  [0.057, [0.295, 0.394, 0.834]],
  [0.059, [0.299, 0.4, 0.84]],
  [0.061, [0.299, 0.4, 0.84]],
  [0.063, [0.304, 0.407, 0.845]],
  [0.065, [0.304, 0.407, 0.845]],
  [0.067, [0.309, 0.413, 0.85]],
  [0.068, [0.309, 0.413, 0.85]],
  [0.07, [0.314, 0.42, 0.855]],
  [0.072, [0.314, 0.42, 0.855]],
  [0.074, [0.319, 0.427, 0.86]],
  [0.076, [0.319, 0.427, 0.86]],
  [0.078, [0.324, 0.433, 0.865]],
  [0.08, [0.324, 0.433, 0.865]],
  [0.082, [0.329, 0.44, 0.87]],
  [0.084, [0.329, 0.44, 0.87]],
  [0.086, [0.333, 0.446, 0.874]],
  [0.088, [0.333, 0.446, 0.874]],
  [0.09, [0.338, 0.453, 0.879]],
  [0.092, [0.338, 0.453, 0.879]],
  [0.094, [0.343, 0.459, 0.884]],
  [0.096, [0.343, 0.459, 0.884]],
  [0.098, [0.348, 0.466, 0.888]],
  [0.1, [0.348, 0.466, 0.888]],
  [0.102, [0.353, 0.472, 0.893]],
  [0.104, [0.353, 0.472, 0.893]],
  [0.106, [0.358, 0.478, 0.897]],
  [0.108, [0.358, 0.478, 0.897]],
  [0.11, [0.363, 0.485, 0.901]],
  [0.112, [0.363, 0.485, 0.901]],
  [0.114, [0.369, 0.491, 0.905]],
  [0.115, [0.369, 0.491, 0.905]],
  [0.117, [0.374, 0.497, 0.909]],
  [0.119, [0.374, 0.497, 0.909]],
  [0.121, [0.379, 0.504, 0.914]],
  [0.123, [0.379, 0.504, 0.914]],
  [0.125, [0.384, 0.51, 0.918]],
  [0.127, [0.384, 0.51, 0.918]],
  [0.129, [0.389, 0.516, 0.921]],
  [0.131, [0.389, 0.516, 0.921]],
  [0.133, [0.394, 0.522, 0.925]],
  [0.135, [0.394, 0.522, 0.925]],
  [0.137, [0.399, 0.529, 0.928]],
  [0.139, [0.399, 0.529, 0.928]],
  [0.141, [0.404, 0.535, 0.932]],
  [0.143, [0.404, 0.535, 0.932]],
  [0.145, [0.41, 0.541, 0.936]],
  [0.147, [0.41, 0.541, 0.936]],
  [0.149, [0.415, 0.547, 0.939]],
  [0.151, [0.415, 0.547, 0.939]],
  [0.153, [0.42, 0.553, 0.943]],
  [0.155, [0.42, 0.553, 0.943]],
  [0.157, [0.425, 0.559, 0.946]],
  [0.159, [0.425, 0.559, 0.946]],
  [0.16, [0.431, 0.565, 0.949]],
  [0.162, [0.431, 0.565, 0.949]],
  [0.164, [0.436, 0.571, 0.952]],
  [0.166, [0.436, 0.571, 0.952]],
  [0.168, [0.441, 0.577, 0.955]],
  [0.17, [0.441, 0.577, 0.955]],
  [0.172, [0.446, 0.582, 0.957]],
  [0.174, [0.446, 0.582, 0.957]],
  [0.176, [0.452, 0.588, 0.96]],
  [0.178, [0.452, 0.588, 0.96]],
  [0.18, [0.457, 0.594, 0.963]],
  [0.182, [0.457, 0.594, 0.963]],
  [0.184, [0.462, 0.6, 0.966]],
  [0.186, [0.462, 0.6, 0.966]],
  [0.188, [0.468, 0.606, 0.969]],
  [0.19, [0.468, 0.606, 0.969]],
  [0.192, [0.473, 0.611, 0.971]],
  [0.194, [0.473, 0.611, 0.971]],
  [0.196, [0.478, 0.617, 0.973]],
  [0.198, [0.478, 0.617, 0.973]],
  [0.2, [0.484, 0.622, 0.975]],
  [0.202, [0.484, 0.622, 0.975]],
  [0.204, [0.489, 0.628, 0.977]],
  [0.205, [0.489, 0.628, 0.977]],
  [0.207, [0.495, 0.633, 0.979]],
  [0.209, [0.495, 0.633, 0.979]],
  [0.211, [0.5, 0.639, 0.981]],
  [0.213, [0.5, 0.639, 0.981]],
  [0.215, [0.505, 0.644, 0.983]],
  [0.217, [0.505, 0.644, 0.983]],
  [0.219, [0.511, 0.649, 0.985]],
  [0.221, [0.511, 0.649, 0.985]],
  [0.223, [0.516, 0.654, 0.986]],
  [0.225, [0.516, 0.654, 0.986]],
  [0.227, [0.522, 0.66, 0.988]],
  [0.229, [0.522, 0.66, 0.988]],
  [0.231, [0.527, 0.665, 0.989]],
  [0.233, [0.527, 0.665, 0.989]],
  [0.235, [0.533, 0.67, 0.99]],
  [0.237, [0.533, 0.67, 0.99]],
  [0.239, [0.538, 0.675, 0.992]],
  [0.241, [0.538, 0.675, 0.992]],
  [0.243, [0.543, 0.68, 0.993]],
  [0.245, [0.543, 0.68, 0.993]],
  [0.247, [0.549, 0.685, 0.994]],
  [0.249, [0.549, 0.685, 0.994]],
  [0.25, [0.554, 0.69, 0.996]],
  [0.252, [0.554, 0.69, 0.996]],
  [0.254, [0.56, 0.695, 0.996]],
  [0.256, [0.56, 0.695, 0.996]],
  [0.258, [0.565, 0.699, 0.997]],
  [0.26, [0.565, 0.699, 0.997]],
  [0.262, [0.571, 0.704, 0.997]],
  [0.264, [0.571, 0.704, 0.997]],
  [0.266, [0.576, 0.709, 0.998]],
  [0.268, [0.576, 0.709, 0.998]],
  [0.27, [0.581, 0.713, 0.998]],
  [0.272, [0.581, 0.713, 0.998]],
  [0.274, [0.587, 0.718, 0.999]],
  [0.276, [0.587, 0.718, 0.999]],
  [0.278, [0.592, 0.723, 0.999]],
  [0.28, [0.592, 0.723, 0.999]],
  [0.282, [0.598, 0.727, 1]],
  [0.284, [0.598, 0.727, 1]],
  [0.286, [0.603, 0.732, 1]],
  [0.288, [0.603, 0.732, 1]],
  [0.29, [0.609, 0.736, 0.999]],
  [0.292, [0.609, 0.736, 0.999]],
  [0.294, [0.614, 0.74, 0.999]],
  [0.295, [0.614, 0.74, 0.999]],
  [0.297, [0.619, 0.744, 0.999]],
  [0.299, [0.619, 0.744, 0.999]],
  [0.301, [0.625, 0.748, 0.999]],
  [0.303, [0.625, 0.748, 0.999]],
  [0.305, [0.63, 0.753, 0.999]],
  [0.307, [0.63, 0.753, 0.999]],
  [0.309, [0.635, 0.757, 0.998]],
  [0.311, [0.635, 0.757, 0.998]],
  [0.313, [0.641, 0.761, 0.998]],
  [0.315, [0.641, 0.761, 0.998]],
  [0.317, [0.646, 0.764, 0.997]],
  [0.319, [0.646, 0.764, 0.997]],
  [0.321, [0.651, 0.768, 0.996]],
  [0.323, [0.651, 0.768, 0.996]],
  [0.325, [0.657, 0.772, 0.995]],
  [0.327, [0.657, 0.772, 0.995]],
  [0.329, [0.662, 0.775, 0.994]],
  [0.331, [0.662, 0.775, 0.994]],
  [0.333, [0.667, 0.779, 0.993]],
  [0.335, [0.667, 0.779, 0.993]],
  [0.337, [0.673, 0.783, 0.992]],
  [0.339, [0.673, 0.783, 0.992]],
  [0.341, [0.678, 0.787, 0.991]],
  [0.342, [0.678, 0.787, 0.991]],
  [0.344, [0.683, 0.79, 0.99]],
  [0.346, [0.683, 0.79, 0.99]],
  [0.348, [0.688, 0.793, 0.988]],
  [0.35, [0.688, 0.793, 0.988]],
  [0.352, [0.693, 0.796, 0.986]],
  [0.354, [0.693, 0.796, 0.986]],
  [0.356, [0.698, 0.799, 0.985]],
  [0.358, [0.698, 0.799, 0.985]],
  [0.36, [0.704, 0.803, 0.983]],
  [0.362, [0.704, 0.803, 0.983]],
  [0.364, [0.709, 0.806, 0.981]],
  [0.366, [0.709, 0.806, 0.981]],
  [0.368, [0.714, 0.809, 0.979]],
  [0.37, [0.714, 0.809, 0.979]],
  [0.372, [0.719, 0.812, 0.978]],
  [0.374, [0.719, 0.812, 0.978]],
  [0.376, [0.724, 0.815, 0.976]],
  [0.378, [0.724, 0.815, 0.976]],
  [0.38, [0.729, 0.817, 0.973]],
  [0.382, [0.729, 0.817, 0.973]],
  [0.384, [0.734, 0.82, 0.971]],
  [0.386, [0.734, 0.82, 0.971]],
  [0.387, [0.739, 0.823, 0.968]],
  [0.389, [0.739, 0.823, 0.968]],
  [0.391, [0.744, 0.825, 0.966]],
  [0.393, [0.744, 0.825, 0.966]],
  [0.395, [0.749, 0.828, 0.963]],
  [0.397, [0.749, 0.828, 0.963]],
  [0.399, [0.754, 0.83, 0.961]],
  [0.401, [0.754, 0.83, 0.961]],
  [0.403, [0.759, 0.833, 0.958]],
  [0.405, [0.759, 0.833, 0.958]],
  [0.407, [0.763, 0.835, 0.956]],
  [0.409, [0.763, 0.835, 0.956]],
  [0.411, [0.768, 0.837, 0.952]],
  [0.413, [0.768, 0.837, 0.952]],
  [0.415, [0.773, 0.839, 0.949]],
  [0.417, [0.773, 0.839, 0.949]],
  [0.419, [0.777, 0.841, 0.946]],
  [0.421, [0.777, 0.841, 0.946]],
  [0.423, [0.782, 0.843, 0.943]],
  [0.425, [0.782, 0.843, 0.943]],
  [0.427, [0.787, 0.845, 0.94]],
  [0.429, [0.787, 0.845, 0.94]],
  [0.431, [0.791, 0.847, 0.937]],
  [0.432, [0.791, 0.847, 0.937]],
  [0.434, [0.796, 0.849, 0.933]],
  [0.436, [0.796, 0.849, 0.933]],
  [0.438, [0.801, 0.85, 0.93]],
  [0.44, [0.801, 0.85, 0.93]],
  [0.442, [0.805, 0.852, 0.926]],
  [0.444, [0.805, 0.852, 0.926]],
  [0.446, [0.809, 0.853, 0.922]],
  [0.448, [0.809, 0.853, 0.922]],
  [0.45, [0.814, 0.854, 0.918]],
  [0.452, [0.814, 0.854, 0.918]],
  [0.454, [0.818, 0.856, 0.915]],
  [0.456, [0.818, 0.856, 0.915]],
  [0.458, [0.822, 0.857, 0.911]],
  [0.46, [0.822, 0.857, 0.911]],
  [0.462, [0.827, 0.858, 0.907]],
  [0.464, [0.827, 0.858, 0.907]],
  [0.466, [0.831, 0.86, 0.903]],
  [0.468, [0.831, 0.86, 0.903]],
  [0.47, [0.835, 0.861, 0.899]],
  [0.472, [0.835, 0.861, 0.899]],
  [0.474, [0.839, 0.861, 0.894]],
  [0.476, [0.839, 0.861, 0.894]],
  [0.477, [0.843, 0.862, 0.89]],
  [0.479, [0.843, 0.862, 0.89]],
  [0.481, [0.847, 0.862, 0.886]],
  [0.483, [0.847, 0.862, 0.886]],
  [0.485, [0.851, 0.863, 0.881]],
  [0.487, [0.851, 0.863, 0.881]],
  [0.489, [0.855, 0.864, 0.877]],
  [0.491, [0.855, 0.864, 0.877]],
  [0.493, [0.859, 0.864, 0.872]],
  [0.495, [0.859, 0.864, 0.872]],
  [0.497, [0.863, 0.865, 0.868]],
  [0.499, [0.863, 0.865, 0.868]],
  [0.501, [0.867, 0.864, 0.863]],
  [0.503, [0.867, 0.864, 0.863]],
  [0.505, [0.871, 0.862, 0.857]],
  [0.507, [0.871, 0.862, 0.857]],
  [0.509, [0.876, 0.86, 0.851]],
  [0.511, [0.876, 0.86, 0.851]],
  [0.513, [0.88, 0.858, 0.846]],
  [0.515, [0.88, 0.858, 0.846]],
  [0.517, [0.884, 0.856, 0.84]],
  [0.519, [0.884, 0.856, 0.84]],
  [0.521, [0.888, 0.854, 0.835]],
  [0.523, [0.888, 0.854, 0.835]],
  [0.524, [0.892, 0.852, 0.829]],
  [0.526, [0.892, 0.852, 0.829]],
  [0.528, [0.896, 0.85, 0.823]],
  [0.53, [0.896, 0.85, 0.823]],
  [0.532, [0.9, 0.848, 0.818]],
  [0.534, [0.9, 0.848, 0.818]],
  [0.536, [0.903, 0.845, 0.812]],
  [0.538, [0.903, 0.845, 0.812]],
  [0.54, [0.906, 0.842, 0.806]],
  [0.542, [0.906, 0.842, 0.806]],
  [0.544, [0.909, 0.839, 0.8]],
  [0.546, [0.909, 0.839, 0.8]],
  [0.548, [0.913, 0.837, 0.795]],
  [0.55, [0.913, 0.837, 0.795]],
  [0.552, [0.916, 0.834, 0.789]],
  [0.554, [0.916, 0.834, 0.789]],
  [0.556, [0.919, 0.831, 0.783]],
  [0.558, [0.919, 0.831, 0.783]],
  [0.56, [0.923, 0.829, 0.777]],
  [0.562, [0.923, 0.829, 0.777]],
  [0.564, [0.926, 0.826, 0.771]],
  [0.566, [0.926, 0.826, 0.771]],
  [0.568, [0.928, 0.822, 0.765]],
  [0.569, [0.928, 0.822, 0.765]],
  [0.571, [0.931, 0.819, 0.759]],
  [0.573, [0.931, 0.819, 0.759]],
  [0.575, [0.933, 0.816, 0.753]],
  [0.577, [0.933, 0.816, 0.753]],
  [0.579, [0.936, 0.812, 0.747]],
  [0.581, [0.936, 0.812, 0.747]],
  [0.583, [0.938, 0.809, 0.741]],
  [0.585, [0.938, 0.809, 0.741]],
  [0.587, [0.941, 0.806, 0.735]],
  [0.589, [0.941, 0.806, 0.735]],
  [0.591, [0.943, 0.802, 0.729]],
  [0.593, [0.943, 0.802, 0.729]],
  [0.595, [0.946, 0.799, 0.723]],
  [0.597, [0.946, 0.799, 0.723]],
  [0.599, [0.947, 0.795, 0.717]],
  [0.601, [0.947, 0.795, 0.717]],
  [0.603, [0.949, 0.791, 0.711]],
  [0.605, [0.949, 0.791, 0.711]],
  [0.607, [0.951, 0.787, 0.705]],
  [0.609, [0.951, 0.787, 0.705]],
  [0.611, [0.953, 0.783, 0.699]],
  [0.613, [0.953, 0.783, 0.699]],
  [0.614, [0.955, 0.779, 0.693]],
  [0.616, [0.955, 0.779, 0.693]],
  [0.618, [0.956, 0.775, 0.686]],
  [0.62, [0.956, 0.775, 0.686]],
  [0.622, [0.958, 0.771, 0.68]],
  [0.624, [0.958, 0.771, 0.68]],
  [0.626, [0.96, 0.767, 0.674]],
  [0.628, [0.96, 0.767, 0.674]],
  [0.63, [0.961, 0.763, 0.668]],
  [0.632, [0.961, 0.763, 0.668]],
  [0.634, [0.962, 0.758, 0.662]],
  [0.636, [0.962, 0.758, 0.662]],
  [0.638, [0.963, 0.754, 0.656]],
  [0.64, [0.963, 0.754, 0.656]],
  [0.642, [0.964, 0.749, 0.649]],
  [0.644, [0.964, 0.749, 0.649]],
  [0.646, [0.965, 0.745, 0.643]],
  [0.648, [0.965, 0.745, 0.643]],
  [0.65, [0.966, 0.74, 0.637]],
  [0.652, [0.966, 0.74, 0.637]],
  [0.654, [0.967, 0.736, 0.631]],
  [0.656, [0.967, 0.736, 0.631]],
  [0.658, [0.968, 0.731, 0.625]],
  [0.659, [0.968, 0.731, 0.625]],
  [0.661, [0.968, 0.726, 0.618]],
  [0.663, [0.968, 0.726, 0.618]],
  [0.665, [0.968, 0.721, 0.612]],
  [0.667, [0.968, 0.721, 0.612]],
  [0.669, [0.969, 0.716, 0.606]],
  [0.671, [0.969, 0.716, 0.606]],
  [0.673, [0.969, 0.711, 0.6]],
  [0.675, [0.969, 0.711, 0.6]],
  [0.677, [0.969, 0.706, 0.594]],
  [0.679, [0.969, 0.706, 0.594]],
  [0.681, [0.97, 0.701, 0.588]],
  [0.683, [0.97, 0.701, 0.588]],
  [0.685, [0.97, 0.696, 0.581]],
  [0.687, [0.97, 0.696, 0.581]],
  [0.689, [0.97, 0.69, 0.575]],
  [0.691, [0.97, 0.69, 0.575]],
  [0.693, [0.969, 0.685, 0.569]],
  [0.695, [0.969, 0.685, 0.569]],
  [0.697, [0.969, 0.679, 0.563]],
  [0.699, [0.969, 0.679, 0.563]],
  [0.701, [0.968, 0.674, 0.557]],
  [0.703, [0.968, 0.674, 0.557]],
  [0.705, [0.968, 0.668, 0.55]],
  [0.706, [0.968, 0.668, 0.55]],
  [0.708, [0.968, 0.663, 0.544]],
  [0.71, [0.968, 0.663, 0.544]],
  [0.712, [0.967, 0.657, 0.538]],
  [0.714, [0.967, 0.657, 0.538]],
  [0.716, [0.967, 0.652, 0.532]],
  [0.718, [0.967, 0.652, 0.532]],
  [0.72, [0.966, 0.646, 0.526]],
  [0.722, [0.966, 0.646, 0.526]],
  [0.724, [0.965, 0.64, 0.52]],
  [0.726, [0.965, 0.64, 0.52]],
  [0.728, [0.964, 0.634, 0.514]],
  [0.73, [0.964, 0.634, 0.514]],
  [0.732, [0.963, 0.628, 0.508]],
  [0.734, [0.963, 0.628, 0.508]],
  [0.736, [0.962, 0.622, 0.502]],
  [0.738, [0.962, 0.622, 0.502]],
  [0.74, [0.96, 0.616, 0.495]],
  [0.742, [0.96, 0.616, 0.495]],
  [0.744, [0.959, 0.61, 0.489]],
  [0.746, [0.959, 0.61, 0.489]],
  [0.748, [0.958, 0.604, 0.483]],
  [0.75, [0.958, 0.604, 0.483]],
  [0.751, [0.957, 0.598, 0.477]],
  [0.753, [0.957, 0.598, 0.477]],
  [0.755, [0.955, 0.592, 0.471]],
  [0.757, [0.955, 0.592, 0.471]],
  [0.759, [0.953, 0.585, 0.465]],
  [0.761, [0.953, 0.585, 0.465]],
  [0.763, [0.951, 0.579, 0.459]],
  [0.765, [0.951, 0.579, 0.459]],
  [0.767, [0.949, 0.572, 0.453]],
  [0.769, [0.949, 0.572, 0.453]],
  [0.771, [0.948, 0.566, 0.447]],
  [0.773, [0.948, 0.566, 0.447]],
  [0.775, [0.946, 0.56, 0.442]],
  [0.777, [0.946, 0.56, 0.442]],
  [0.779, [0.944, 0.553, 0.436]],
  [0.781, [0.944, 0.553, 0.436]],
  [0.783, [0.942, 0.546, 0.43]],
  [0.785, [0.942, 0.546, 0.43]],
  [0.787, [0.939, 0.54, 0.424]],
  [0.789, [0.939, 0.54, 0.424]],
  [0.791, [0.937, 0.533, 0.418]],
  [0.793, [0.937, 0.533, 0.418]],
  [0.795, [0.934, 0.526, 0.412]],
  [0.796, [0.934, 0.526, 0.412]],
  [0.798, [0.932, 0.519, 0.406]],
  [0.8, [0.932, 0.519, 0.406]],
  [0.802, [0.929, 0.512, 0.401]],
  [0.804, [0.929, 0.512, 0.401]],
  [0.806, [0.927, 0.505, 0.395]],
  [0.808, [0.927, 0.505, 0.395]],
  [0.81, [0.924, 0.499, 0.389]],
  [0.812, [0.924, 0.499, 0.389]],
  [0.814, [0.921, 0.491, 0.383]],
  [0.816, [0.921, 0.491, 0.383]],
  [0.818, [0.918, 0.484, 0.378]],
  [0.82, [0.918, 0.484, 0.378]],
  [0.822, [0.915, 0.477, 0.372]],
  [0.824, [0.915, 0.477, 0.372]],
  [0.826, [0.912, 0.47, 0.367]],
  [0.828, [0.912, 0.47, 0.367]],
  [0.83, [0.909, 0.462, 0.361]],
  [0.832, [0.909, 0.462, 0.361]],
  [0.834, [0.906, 0.455, 0.355]],
  [0.836, [0.906, 0.455, 0.355]],
  [0.838, [0.903, 0.448, 0.35]],
  [0.84, [0.903, 0.448, 0.35]],
  [0.841, [0.9, 0.441, 0.344]],
  [0.843, [0.9, 0.441, 0.344]],
  [0.845, [0.896, 0.433, 0.339]],
  [0.847, [0.896, 0.433, 0.339]],
  [0.849, [0.892, 0.425, 0.333]],
  [0.851, [0.892, 0.425, 0.333]],
  [0.853, [0.888, 0.418, 0.328]],
  [0.855, [0.888, 0.418, 0.328]],
  [0.857, [0.885, 0.41, 0.323]],
  [0.859, [0.885, 0.41, 0.323]],
  [0.861, [0.881, 0.402, 0.317]],
  [0.863, [0.881, 0.402, 0.317]],
  [0.865, [0.877, 0.395, 0.312]],
  [0.867, [0.877, 0.395, 0.312]],
  [0.869, [0.873, 0.387, 0.306]],
  [0.871, [0.873, 0.387, 0.306]],
  [0.873, [0.87, 0.379, 0.301]],
  [0.875, [0.87, 0.379, 0.301]],
  [0.877, [0.865, 0.371, 0.296]],
  [0.879, [0.865, 0.371, 0.296]],
  [0.881, [0.861, 0.363, 0.291]],
  [0.883, [0.861, 0.363, 0.291]],
  [0.885, [0.857, 0.355, 0.285]],
  [0.886, [0.857, 0.355, 0.285]],
  [0.888, [0.852, 0.346, 0.28]],
  [0.89, [0.852, 0.346, 0.28]],
  [0.892, [0.848, 0.338, 0.275]],
  [0.894, [0.848, 0.338, 0.275]],
  [0.896, [0.844, 0.33, 0.27]],
  [0.898, [0.844, 0.33, 0.27]],
  [0.9, [0.839, 0.322, 0.265]],
  [0.902, [0.839, 0.322, 0.265]],
  [0.904, [0.835, 0.314, 0.26]],
  [0.906, [0.835, 0.314, 0.26]],
  [0.908, [0.83, 0.305, 0.255]],
  [0.91, [0.83, 0.305, 0.255]],
  [0.912, [0.825, 0.296, 0.25]],
  [0.914, [0.825, 0.296, 0.25]],
  [0.916, [0.82, 0.287, 0.245]],
  [0.918, [0.82, 0.287, 0.245]],
  [0.92, [0.816, 0.278, 0.24]],
  [0.922, [0.816, 0.278, 0.24]],
  [0.924, [0.811, 0.269, 0.235]],
  [0.926, [0.811, 0.269, 0.235]],
  [0.928, [0.806, 0.26, 0.231]],
  [0.93, [0.806, 0.26, 0.231]],
  [0.932, [0.801, 0.251, 0.226]],
  [0.933, [0.801, 0.251, 0.226]],
  [0.935, [0.796, 0.242, 0.221]],
  [0.937, [0.796, 0.242, 0.221]],
  [0.939, [0.791, 0.231, 0.216]],
  [0.941, [0.791, 0.231, 0.216]],
  [0.943, [0.785, 0.221, 0.212]],
  [0.945, [0.785, 0.221, 0.212]],
  [0.947, [0.78, 0.21, 0.207]],
  [0.949, [0.78, 0.21, 0.207]],
  [0.951, [0.774, 0.2, 0.203]],
  [0.953, [0.774, 0.2, 0.203]],
  [0.955, [0.769, 0.189, 0.198]],
  [0.957, [0.769, 0.189, 0.198]],
  [0.959, [0.764, 0.179, 0.193]],
  [0.961, [0.764, 0.179, 0.193]],
  [0.963, [0.758, 0.168, 0.189]],
  [0.965, [0.758, 0.168, 0.189]],
  [0.967, [0.753, 0.158, 0.184]],
  [0.969, [0.753, 0.158, 0.184]],
  [0.971, [0.747, 0.14, 0.18]],
  [0.973, [0.747, 0.14, 0.18]],
  [0.975, [0.741, 0.122, 0.176]],
  [0.977, [0.741, 0.122, 0.176]],
  [0.978, [0.735, 0.104, 0.171]],
  [0.98, [0.735, 0.104, 0.171]],
  [0.982, [0.729, 0.087, 0.167]],
  [0.984, [0.729, 0.087, 0.167]],
  [0.986, [0.723, 0.069, 0.163]],
  [0.988, [0.723, 0.069, 0.163]],
  [0.99, [0.717, 0.051, 0.159]],
  [0.992, [0.717, 0.051, 0.159]],
  [0.994, [0.712, 0.033, 0.154]],
  [0.996, [0.712, 0.033, 0.154]],
  [0.998, [0.706, 0.016, 0.15]],
  [1, [0.706, 0.016, 0.15]]
], $f = [
  [0, [0, 0, 0.3]],
  [2e-3, [0, 0, 0.3]],
  [4e-3, [0, 0, 0.311]],
  [6e-3, [0, 0, 0.311]],
  [8e-3, [0, 0, 0.322]],
  [0.01, [0, 0, 0.322]],
  [0.012, [0, 0, 0.333]],
  [0.014, [0, 0, 0.333]],
  [0.016, [0, 0, 0.344]],
  [0.018, [0, 0, 0.344]],
  [0.02, [0, 0, 0.355]],
  [0.022, [0, 0, 0.355]],
  [0.023, [0, 0, 0.366]],
  [0.025, [0, 0, 0.366]],
  [0.027, [0, 0, 0.377]],
  [0.029, [0, 0, 0.377]],
  [0.031, [0, 0, 0.388]],
  [0.033, [0, 0, 0.388]],
  [0.035, [0, 0, 0.399]],
  [0.037, [0, 0, 0.399]],
  [0.039, [0, 0, 0.41]],
  [0.041, [0, 0, 0.41]],
  [0.043, [0, 0, 0.421]],
  [0.045, [0, 0, 0.421]],
  [0.047, [0, 0, 0.432]],
  [0.049, [0, 0, 0.432]],
  [0.051, [0, 0, 0.443]],
  [0.053, [0, 0, 0.443]],
  [0.055, [0, 0, 0.454]],
  [0.057, [0, 0, 0.454]],
  [0.059, [0, 0, 0.465]],
  [0.061, [0, 0, 0.465]],
  [0.063, [0, 0, 0.476]],
  [0.065, [0, 0, 0.476]],
  [0.067, [0, 0, 0.487]],
  [0.068, [0, 0, 0.487]],
  [0.07, [0, 0, 0.498]],
  [0.072, [0, 0, 0.498]],
  [0.074, [0, 0, 0.509]],
  [0.076, [0, 0, 0.509]],
  [0.078, [0, 0, 0.52]],
  [0.08, [0, 0, 0.52]],
  [0.082, [0, 0, 0.531]],
  [0.084, [0, 0, 0.531]],
  [0.086, [0, 0, 0.542]],
  [0.088, [0, 0, 0.542]],
  [0.09, [0, 0, 0.553]],
  [0.092, [0, 0, 0.553]],
  [0.094, [0, 0, 0.564]],
  [0.096, [0, 0, 0.564]],
  [0.098, [0, 0, 0.575]],
  [0.1, [0, 0, 0.575]],
  [0.102, [0, 0, 0.585]],
  [0.104, [0, 0, 0.585]],
  [0.106, [0, 0, 0.596]],
  [0.108, [0, 0, 0.596]],
  [0.11, [0, 0, 0.607]],
  [0.112, [0, 0, 0.607]],
  [0.114, [0, 0, 0.618]],
  [0.115, [0, 0, 0.618]],
  [0.117, [0, 0, 0.629]],
  [0.119, [0, 0, 0.629]],
  [0.121, [0, 0, 0.64]],
  [0.123, [0, 0, 0.64]],
  [0.125, [0, 0, 0.651]],
  [0.127, [0, 0, 0.651]],
  [0.129, [0, 0, 0.662]],
  [0.131, [0, 0, 0.662]],
  [0.133, [0, 0, 0.673]],
  [0.135, [0, 0, 0.673]],
  [0.137, [0, 0, 0.684]],
  [0.139, [0, 0, 0.684]],
  [0.141, [0, 0, 0.695]],
  [0.143, [0, 0, 0.695]],
  [0.145, [0, 0, 0.706]],
  [0.147, [0, 0, 0.706]],
  [0.149, [0, 0, 0.717]],
  [0.151, [0, 0, 0.717]],
  [0.153, [0, 0, 0.728]],
  [0.155, [0, 0, 0.728]],
  [0.157, [0, 0, 0.739]],
  [0.159, [0, 0, 0.739]],
  [0.16, [0, 0, 0.75]],
  [0.162, [0, 0, 0.75]],
  [0.164, [0, 0, 0.761]],
  [0.166, [0, 0, 0.761]],
  [0.168, [0, 0, 0.772]],
  [0.17, [0, 0, 0.772]],
  [0.172, [0, 0, 0.783]],
  [0.174, [0, 0, 0.783]],
  [0.176, [0, 0, 0.794]],
  [0.178, [0, 0, 0.794]],
  [0.18, [0, 0, 0.805]],
  [0.182, [0, 0, 0.805]],
  [0.184, [0, 0, 0.816]],
  [0.186, [0, 0, 0.816]],
  [0.188, [0, 0, 0.827]],
  [0.19, [0, 0, 0.827]],
  [0.192, [0, 0, 0.838]],
  [0.194, [0, 0, 0.838]],
  [0.196, [0, 0, 0.849]],
  [0.198, [0, 0, 0.849]],
  [0.2, [0, 0, 0.86]],
  [0.202, [0, 0, 0.86]],
  [0.204, [0, 0, 0.871]],
  [0.205, [0, 0, 0.871]],
  [0.207, [0, 0, 0.882]],
  [0.209, [0, 0, 0.882]],
  [0.211, [0, 0, 0.893]],
  [0.213, [0, 0, 0.893]],
  [0.215, [0, 0, 0.904]],
  [0.217, [0, 0, 0.904]],
  [0.219, [0, 0, 0.915]],
  [0.221, [0, 0, 0.915]],
  [0.223, [0, 0, 0.926]],
  [0.225, [0, 0, 0.926]],
  [0.227, [0, 0, 0.937]],
  [0.229, [0, 0, 0.937]],
  [0.231, [0, 0, 0.948]],
  [0.233, [0, 0, 0.948]],
  [0.235, [0, 0, 0.959]],
  [0.237, [0, 0, 0.959]],
  [0.239, [0, 0, 0.97]],
  [0.241, [0, 0, 0.97]],
  [0.243, [0, 0, 0.981]],
  [0.245, [0, 0, 0.981]],
  [0.247, [0, 0, 0.992]],
  [0.249, [0, 0, 0.992]],
  [0.25, [4e-3, 4e-3, 1]],
  [0.252, [4e-3, 4e-3, 1]],
  [0.254, [0.02, 0.02, 1]],
  [0.256, [0.02, 0.02, 1]],
  [0.258, [0.035, 0.035, 1]],
  [0.26, [0.035, 0.035, 1]],
  [0.262, [0.051, 0.051, 1]],
  [0.264, [0.051, 0.051, 1]],
  [0.266, [0.067, 0.067, 1]],
  [0.268, [0.067, 0.067, 1]],
  [0.27, [0.082, 0.082, 1]],
  [0.272, [0.082, 0.082, 1]],
  [0.274, [0.098, 0.098, 1]],
  [0.276, [0.098, 0.098, 1]],
  [0.278, [0.114, 0.114, 1]],
  [0.28, [0.114, 0.114, 1]],
  [0.282, [0.129, 0.129, 1]],
  [0.284, [0.129, 0.129, 1]],
  [0.286, [0.145, 0.145, 1]],
  [0.288, [0.145, 0.145, 1]],
  [0.29, [0.161, 0.161, 1]],
  [0.292, [0.161, 0.161, 1]],
  [0.294, [0.176, 0.176, 1]],
  [0.295, [0.176, 0.176, 1]],
  [0.297, [0.192, 0.192, 1]],
  [0.299, [0.192, 0.192, 1]],
  [0.301, [0.208, 0.208, 1]],
  [0.303, [0.208, 0.208, 1]],
  [0.305, [0.224, 0.224, 1]],
  [0.307, [0.224, 0.224, 1]],
  [0.309, [0.239, 0.239, 1]],
  [0.311, [0.239, 0.239, 1]],
  [0.313, [0.255, 0.255, 1]],
  [0.315, [0.255, 0.255, 1]],
  [0.317, [0.271, 0.271, 1]],
  [0.319, [0.271, 0.271, 1]],
  [0.321, [0.286, 0.286, 1]],
  [0.323, [0.286, 0.286, 1]],
  [0.325, [0.302, 0.302, 1]],
  [0.327, [0.302, 0.302, 1]],
  [0.329, [0.318, 0.318, 1]],
  [0.331, [0.318, 0.318, 1]],
  [0.333, [0.333, 0.333, 1]],
  [0.335, [0.333, 0.333, 1]],
  [0.337, [0.349, 0.349, 1]],
  [0.339, [0.349, 0.349, 1]],
  [0.341, [0.365, 0.365, 1]],
  [0.342, [0.365, 0.365, 1]],
  [0.344, [0.38, 0.38, 1]],
  [0.346, [0.38, 0.38, 1]],
  [0.348, [0.396, 0.396, 1]],
  [0.35, [0.396, 0.396, 1]],
  [0.352, [0.412, 0.412, 1]],
  [0.354, [0.412, 0.412, 1]],
  [0.356, [0.427, 0.427, 1]],
  [0.358, [0.427, 0.427, 1]],
  [0.36, [0.443, 0.443, 1]],
  [0.362, [0.443, 0.443, 1]],
  [0.364, [0.459, 0.459, 1]],
  [0.366, [0.459, 0.459, 1]],
  [0.368, [0.475, 0.475, 1]],
  [0.37, [0.475, 0.475, 1]],
  [0.372, [0.49, 0.49, 1]],
  [0.374, [0.49, 0.49, 1]],
  [0.376, [0.506, 0.506, 1]],
  [0.378, [0.506, 0.506, 1]],
  [0.38, [0.522, 0.522, 1]],
  [0.382, [0.522, 0.522, 1]],
  [0.384, [0.537, 0.537, 1]],
  [0.386, [0.537, 0.537, 1]],
  [0.387, [0.553, 0.553, 1]],
  [0.389, [0.553, 0.553, 1]],
  [0.391, [0.569, 0.569, 1]],
  [0.393, [0.569, 0.569, 1]],
  [0.395, [0.584, 0.584, 1]],
  [0.397, [0.584, 0.584, 1]],
  [0.399, [0.6, 0.6, 1]],
  [0.401, [0.6, 0.6, 1]],
  [0.403, [0.616, 0.616, 1]],
  [0.405, [0.616, 0.616, 1]],
  [0.407, [0.631, 0.631, 1]],
  [0.409, [0.631, 0.631, 1]],
  [0.411, [0.647, 0.647, 1]],
  [0.413, [0.647, 0.647, 1]],
  [0.415, [0.663, 0.663, 1]],
  [0.417, [0.663, 0.663, 1]],
  [0.419, [0.678, 0.678, 1]],
  [0.421, [0.678, 0.678, 1]],
  [0.423, [0.694, 0.694, 1]],
  [0.425, [0.694, 0.694, 1]],
  [0.427, [0.71, 0.71, 1]],
  [0.429, [0.71, 0.71, 1]],
  [0.431, [0.725, 0.725, 1]],
  [0.432, [0.725, 0.725, 1]],
  [0.434, [0.741, 0.741, 1]],
  [0.436, [0.741, 0.741, 1]],
  [0.438, [0.757, 0.757, 1]],
  [0.44, [0.757, 0.757, 1]],
  [0.442, [0.773, 0.773, 1]],
  [0.444, [0.773, 0.773, 1]],
  [0.446, [0.788, 0.788, 1]],
  [0.448, [0.788, 0.788, 1]],
  [0.45, [0.804, 0.804, 1]],
  [0.452, [0.804, 0.804, 1]],
  [0.454, [0.82, 0.82, 1]],
  [0.456, [0.82, 0.82, 1]],
  [0.458, [0.835, 0.835, 1]],
  [0.46, [0.835, 0.835, 1]],
  [0.462, [0.851, 0.851, 1]],
  [0.464, [0.851, 0.851, 1]],
  [0.466, [0.867, 0.867, 1]],
  [0.468, [0.867, 0.867, 1]],
  [0.47, [0.882, 0.882, 1]],
  [0.472, [0.882, 0.882, 1]],
  [0.474, [0.898, 0.898, 1]],
  [0.476, [0.898, 0.898, 1]],
  [0.477, [0.914, 0.914, 1]],
  [0.479, [0.914, 0.914, 1]],
  [0.481, [0.929, 0.929, 1]],
  [0.483, [0.929, 0.929, 1]],
  [0.485, [0.945, 0.945, 1]],
  [0.487, [0.945, 0.945, 1]],
  [0.489, [0.961, 0.961, 1]],
  [0.491, [0.961, 0.961, 1]],
  [0.493, [0.976, 0.976, 1]],
  [0.495, [0.976, 0.976, 1]],
  [0.497, [0.992, 0.992, 1]],
  [0.499, [0.992, 0.992, 1]],
  [0.501, [1, 0.992, 0.992]],
  [0.503, [1, 0.992, 0.992]],
  [0.505, [1, 0.976, 0.976]],
  [0.507, [1, 0.976, 0.976]],
  [0.509, [1, 0.961, 0.961]],
  [0.511, [1, 0.961, 0.961]],
  [0.513, [1, 0.945, 0.945]],
  [0.515, [1, 0.945, 0.945]],
  [0.517, [1, 0.929, 0.929]],
  [0.519, [1, 0.929, 0.929]],
  [0.521, [1, 0.914, 0.914]],
  [0.523, [1, 0.914, 0.914]],
  [0.524, [1, 0.898, 0.898]],
  [0.526, [1, 0.898, 0.898]],
  [0.528, [1, 0.882, 0.882]],
  [0.53, [1, 0.882, 0.882]],
  [0.532, [1, 0.867, 0.867]],
  [0.534, [1, 0.867, 0.867]],
  [0.536, [1, 0.851, 0.851]],
  [0.538, [1, 0.851, 0.851]],
  [0.54, [1, 0.835, 0.835]],
  [0.542, [1, 0.835, 0.835]],
  [0.544, [1, 0.82, 0.82]],
  [0.546, [1, 0.82, 0.82]],
  [0.548, [1, 0.804, 0.804]],
  [0.55, [1, 0.804, 0.804]],
  [0.552, [1, 0.788, 0.788]],
  [0.554, [1, 0.788, 0.788]],
  [0.556, [1, 0.773, 0.773]],
  [0.558, [1, 0.773, 0.773]],
  [0.56, [1, 0.757, 0.757]],
  [0.562, [1, 0.757, 0.757]],
  [0.564, [1, 0.741, 0.741]],
  [0.566, [1, 0.741, 0.741]],
  [0.568, [1, 0.725, 0.725]],
  [0.569, [1, 0.725, 0.725]],
  [0.571, [1, 0.71, 0.71]],
  [0.573, [1, 0.71, 0.71]],
  [0.575, [1, 0.694, 0.694]],
  [0.577, [1, 0.694, 0.694]],
  [0.579, [1, 0.678, 0.678]],
  [0.581, [1, 0.678, 0.678]],
  [0.583, [1, 0.663, 0.663]],
  [0.585, [1, 0.663, 0.663]],
  [0.587, [1, 0.647, 0.647]],
  [0.589, [1, 0.647, 0.647]],
  [0.591, [1, 0.631, 0.631]],
  [0.593, [1, 0.631, 0.631]],
  [0.595, [1, 0.616, 0.616]],
  [0.597, [1, 0.616, 0.616]],
  [0.599, [1, 0.6, 0.6]],
  [0.601, [1, 0.6, 0.6]],
  [0.603, [1, 0.584, 0.584]],
  [0.605, [1, 0.584, 0.584]],
  [0.607, [1, 0.569, 0.569]],
  [0.609, [1, 0.569, 0.569]],
  [0.611, [1, 0.553, 0.553]],
  [0.613, [1, 0.553, 0.553]],
  [0.614, [1, 0.537, 0.537]],
  [0.616, [1, 0.537, 0.537]],
  [0.618, [1, 0.522, 0.522]],
  [0.62, [1, 0.522, 0.522]],
  [0.622, [1, 0.506, 0.506]],
  [0.624, [1, 0.506, 0.506]],
  [0.626, [1, 0.49, 0.49]],
  [0.628, [1, 0.49, 0.49]],
  [0.63, [1, 0.475, 0.475]],
  [0.632, [1, 0.475, 0.475]],
  [0.634, [1, 0.459, 0.459]],
  [0.636, [1, 0.459, 0.459]],
  [0.638, [1, 0.443, 0.443]],
  [0.64, [1, 0.443, 0.443]],
  [0.642, [1, 0.427, 0.427]],
  [0.644, [1, 0.427, 0.427]],
  [0.646, [1, 0.412, 0.412]],
  [0.648, [1, 0.412, 0.412]],
  [0.65, [1, 0.396, 0.396]],
  [0.652, [1, 0.396, 0.396]],
  [0.654, [1, 0.38, 0.38]],
  [0.656, [1, 0.38, 0.38]],
  [0.658, [1, 0.365, 0.365]],
  [0.659, [1, 0.365, 0.365]],
  [0.661, [1, 0.349, 0.349]],
  [0.663, [1, 0.349, 0.349]],
  [0.665, [1, 0.333, 0.333]],
  [0.667, [1, 0.333, 0.333]],
  [0.669, [1, 0.318, 0.318]],
  [0.671, [1, 0.318, 0.318]],
  [0.673, [1, 0.302, 0.302]],
  [0.675, [1, 0.302, 0.302]],
  [0.677, [1, 0.286, 0.286]],
  [0.679, [1, 0.286, 0.286]],
  [0.681, [1, 0.271, 0.271]],
  [0.683, [1, 0.271, 0.271]],
  [0.685, [1, 0.255, 0.255]],
  [0.687, [1, 0.255, 0.255]],
  [0.689, [1, 0.239, 0.239]],
  [0.691, [1, 0.239, 0.239]],
  [0.693, [1, 0.224, 0.224]],
  [0.695, [1, 0.224, 0.224]],
  [0.697, [1, 0.208, 0.208]],
  [0.699, [1, 0.208, 0.208]],
  [0.701, [1, 0.192, 0.192]],
  [0.703, [1, 0.192, 0.192]],
  [0.705, [1, 0.176, 0.176]],
  [0.706, [1, 0.176, 0.176]],
  [0.708, [1, 0.161, 0.161]],
  [0.71, [1, 0.161, 0.161]],
  [0.712, [1, 0.145, 0.145]],
  [0.714, [1, 0.145, 0.145]],
  [0.716, [1, 0.129, 0.129]],
  [0.718, [1, 0.129, 0.129]],
  [0.72, [1, 0.114, 0.114]],
  [0.722, [1, 0.114, 0.114]],
  [0.724, [1, 0.098, 0.098]],
  [0.726, [1, 0.098, 0.098]],
  [0.728, [1, 0.082, 0.082]],
  [0.73, [1, 0.082, 0.082]],
  [0.732, [1, 0.067, 0.067]],
  [0.734, [1, 0.067, 0.067]],
  [0.736, [1, 0.051, 0.051]],
  [0.738, [1, 0.051, 0.051]],
  [0.74, [1, 0.035, 0.035]],
  [0.742, [1, 0.035, 0.035]],
  [0.744, [1, 0.02, 0.02]],
  [0.746, [1, 0.02, 0.02]],
  [0.748, [1, 4e-3, 4e-3]],
  [0.75, [1, 4e-3, 4e-3]],
  [0.751, [0.994, 0, 0]],
  [0.753, [0.994, 0, 0]],
  [0.755, [0.986, 0, 0]],
  [0.757, [0.986, 0, 0]],
  [0.759, [0.978, 0, 0]],
  [0.761, [0.978, 0, 0]],
  [0.763, [0.971, 0, 0]],
  [0.765, [0.971, 0, 0]],
  [0.767, [0.963, 0, 0]],
  [0.769, [0.963, 0, 0]],
  [0.771, [0.955, 0, 0]],
  [0.773, [0.955, 0, 0]],
  [0.775, [0.947, 0, 0]],
  [0.777, [0.947, 0, 0]],
  [0.779, [0.939, 0, 0]],
  [0.781, [0.939, 0, 0]],
  [0.783, [0.931, 0, 0]],
  [0.785, [0.931, 0, 0]],
  [0.787, [0.924, 0, 0]],
  [0.789, [0.924, 0, 0]],
  [0.791, [0.916, 0, 0]],
  [0.793, [0.916, 0, 0]],
  [0.795, [0.908, 0, 0]],
  [0.796, [0.908, 0, 0]],
  [0.798, [0.9, 0, 0]],
  [0.8, [0.9, 0, 0]],
  [0.802, [0.892, 0, 0]],
  [0.804, [0.892, 0, 0]],
  [0.806, [0.884, 0, 0]],
  [0.808, [0.884, 0, 0]],
  [0.81, [0.876, 0, 0]],
  [0.812, [0.876, 0, 0]],
  [0.814, [0.869, 0, 0]],
  [0.816, [0.869, 0, 0]],
  [0.818, [0.861, 0, 0]],
  [0.82, [0.861, 0, 0]],
  [0.822, [0.853, 0, 0]],
  [0.824, [0.853, 0, 0]],
  [0.826, [0.845, 0, 0]],
  [0.828, [0.845, 0, 0]],
  [0.83, [0.837, 0, 0]],
  [0.832, [0.837, 0, 0]],
  [0.834, [0.829, 0, 0]],
  [0.836, [0.829, 0, 0]],
  [0.838, [0.822, 0, 0]],
  [0.84, [0.822, 0, 0]],
  [0.841, [0.814, 0, 0]],
  [0.843, [0.814, 0, 0]],
  [0.845, [0.806, 0, 0]],
  [0.847, [0.806, 0, 0]],
  [0.849, [0.798, 0, 0]],
  [0.851, [0.798, 0, 0]],
  [0.853, [0.79, 0, 0]],
  [0.855, [0.79, 0, 0]],
  [0.857, [0.782, 0, 0]],
  [0.859, [0.782, 0, 0]],
  [0.861, [0.775, 0, 0]],
  [0.863, [0.775, 0, 0]],
  [0.865, [0.767, 0, 0]],
  [0.867, [0.767, 0, 0]],
  [0.869, [0.759, 0, 0]],
  [0.871, [0.759, 0, 0]],
  [0.873, [0.751, 0, 0]],
  [0.875, [0.751, 0, 0]],
  [0.877, [0.743, 0, 0]],
  [0.879, [0.743, 0, 0]],
  [0.881, [0.735, 0, 0]],
  [0.883, [0.735, 0, 0]],
  [0.885, [0.727, 0, 0]],
  [0.886, [0.727, 0, 0]],
  [0.888, [0.72, 0, 0]],
  [0.89, [0.72, 0, 0]],
  [0.892, [0.712, 0, 0]],
  [0.894, [0.712, 0, 0]],
  [0.896, [0.704, 0, 0]],
  [0.898, [0.704, 0, 0]],
  [0.9, [0.696, 0, 0]],
  [0.902, [0.696, 0, 0]],
  [0.904, [0.688, 0, 0]],
  [0.906, [0.688, 0, 0]],
  [0.908, [0.68, 0, 0]],
  [0.91, [0.68, 0, 0]],
  [0.912, [0.673, 0, 0]],
  [0.914, [0.673, 0, 0]],
  [0.916, [0.665, 0, 0]],
  [0.918, [0.665, 0, 0]],
  [0.92, [0.657, 0, 0]],
  [0.922, [0.657, 0, 0]],
  [0.924, [0.649, 0, 0]],
  [0.926, [0.649, 0, 0]],
  [0.928, [0.641, 0, 0]],
  [0.93, [0.641, 0, 0]],
  [0.932, [0.633, 0, 0]],
  [0.933, [0.633, 0, 0]],
  [0.935, [0.625, 0, 0]],
  [0.937, [0.625, 0, 0]],
  [0.939, [0.618, 0, 0]],
  [0.941, [0.618, 0, 0]],
  [0.943, [0.61, 0, 0]],
  [0.945, [0.61, 0, 0]],
  [0.947, [0.602, 0, 0]],
  [0.949, [0.602, 0, 0]],
  [0.951, [0.594, 0, 0]],
  [0.953, [0.594, 0, 0]],
  [0.955, [0.586, 0, 0]],
  [0.957, [0.586, 0, 0]],
  [0.959, [0.578, 0, 0]],
  [0.961, [0.578, 0, 0]],
  [0.963, [0.571, 0, 0]],
  [0.965, [0.571, 0, 0]],
  [0.967, [0.563, 0, 0]],
  [0.969, [0.563, 0, 0]],
  [0.971, [0.555, 0, 0]],
  [0.973, [0.555, 0, 0]],
  [0.975, [0.547, 0, 0]],
  [0.977, [0.547, 0, 0]],
  [0.978, [0.539, 0, 0]],
  [0.98, [0.539, 0, 0]],
  [0.982, [0.531, 0, 0]],
  [0.984, [0.531, 0, 0]],
  [0.986, [0.524, 0, 0]],
  [0.988, [0.524, 0, 0]],
  [0.99, [0.516, 0, 0]],
  [0.992, [0.516, 0, 0]],
  [0.994, [0.508, 0, 0]],
  [0.996, [0.508, 0, 0]],
  [0.998, [0.5, 0, 0]],
  [1, [0.5, 0, 0]]
], jf = [
  [0, [0.498, 0.788, 0.498]],
  [2e-3, [0.498, 0.788, 0.498]],
  [4e-3, [0.505, 0.785, 0.507]],
  [6e-3, [0.505, 0.785, 0.507]],
  [8e-3, [0.512, 0.782, 0.516]],
  [0.01, [0.512, 0.782, 0.516]],
  [0.012, [0.518, 0.78, 0.525]],
  [0.014, [0.518, 0.78, 0.525]],
  [0.016, [0.525, 0.777, 0.535]],
  [0.018, [0.525, 0.777, 0.535]],
  [0.02, [0.532, 0.774, 0.544]],
  [0.022, [0.532, 0.774, 0.544]],
  [0.023, [0.539, 0.771, 0.553]],
  [0.025, [0.539, 0.771, 0.553]],
  [0.027, [0.546, 0.768, 0.562]],
  [0.029, [0.546, 0.768, 0.562]],
  [0.031, [0.552, 0.765, 0.571]],
  [0.033, [0.552, 0.765, 0.571]],
  [0.035, [0.559, 0.762, 0.58]],
  [0.037, [0.559, 0.762, 0.58]],
  [0.039, [0.566, 0.759, 0.59]],
  [0.041, [0.566, 0.759, 0.59]],
  [0.043, [0.573, 0.756, 0.599]],
  [0.045, [0.573, 0.756, 0.599]],
  [0.047, [0.579, 0.753, 0.608]],
  [0.049, [0.579, 0.753, 0.608]],
  [0.051, [0.586, 0.75, 0.617]],
  [0.053, [0.586, 0.75, 0.617]],
  [0.055, [0.593, 0.748, 0.626]],
  [0.057, [0.593, 0.748, 0.626]],
  [0.059, [0.6, 0.745, 0.635]],
  [0.061, [0.6, 0.745, 0.635]],
  [0.063, [0.607, 0.742, 0.644]],
  [0.065, [0.607, 0.742, 0.644]],
  [0.067, [0.613, 0.739, 0.654]],
  [0.068, [0.613, 0.739, 0.654]],
  [0.07, [0.62, 0.736, 0.663]],
  [0.072, [0.62, 0.736, 0.663]],
  [0.074, [0.627, 0.733, 0.672]],
  [0.076, [0.627, 0.733, 0.672]],
  [0.078, [0.634, 0.73, 0.681]],
  [0.08, [0.634, 0.73, 0.681]],
  [0.082, [0.64, 0.727, 0.69]],
  [0.084, [0.64, 0.727, 0.69]],
  [0.086, [0.647, 0.724, 0.699]],
  [0.088, [0.647, 0.724, 0.699]],
  [0.09, [0.654, 0.721, 0.708]],
  [0.092, [0.654, 0.721, 0.708]],
  [0.094, [0.661, 0.718, 0.718]],
  [0.096, [0.661, 0.718, 0.718]],
  [0.098, [0.668, 0.716, 0.727]],
  [0.1, [0.668, 0.716, 0.727]],
  [0.102, [0.674, 0.713, 0.736]],
  [0.104, [0.674, 0.713, 0.736]],
  [0.106, [0.681, 0.71, 0.745]],
  [0.108, [0.681, 0.71, 0.745]],
  [0.11, [0.688, 0.707, 0.754]],
  [0.112, [0.688, 0.707, 0.754]],
  [0.114, [0.695, 0.704, 0.763]],
  [0.115, [0.695, 0.704, 0.763]],
  [0.117, [0.701, 0.701, 0.773]],
  [0.119, [0.701, 0.701, 0.773]],
  [0.121, [0.708, 0.698, 0.782]],
  [0.123, [0.708, 0.698, 0.782]],
  [0.125, [0.715, 0.695, 0.791]],
  [0.127, [0.715, 0.695, 0.791]],
  [0.129, [0.722, 0.692, 0.8]],
  [0.131, [0.722, 0.692, 0.8]],
  [0.133, [0.729, 0.689, 0.809]],
  [0.135, [0.729, 0.689, 0.809]],
  [0.137, [0.735, 0.687, 0.818]],
  [0.139, [0.735, 0.687, 0.818]],
  [0.141, [0.742, 0.684, 0.827]],
  [0.143, [0.742, 0.684, 0.827]],
  [0.145, [0.749, 0.683, 0.827]],
  [0.147, [0.749, 0.683, 0.827]],
  [0.149, [0.756, 0.685, 0.818]],
  [0.151, [0.756, 0.685, 0.818]],
  [0.153, [0.763, 0.687, 0.81]],
  [0.155, [0.763, 0.687, 0.81]],
  [0.157, [0.769, 0.689, 0.801]],
  [0.159, [0.769, 0.689, 0.801]],
  [0.16, [0.776, 0.691, 0.793]],
  [0.162, [0.776, 0.691, 0.793]],
  [0.164, [0.783, 0.693, 0.785]],
  [0.166, [0.783, 0.693, 0.785]],
  [0.168, [0.79, 0.695, 0.776]],
  [0.17, [0.79, 0.695, 0.776]],
  [0.172, [0.796, 0.697, 0.768]],
  [0.174, [0.796, 0.697, 0.768]],
  [0.176, [0.803, 0.699, 0.759]],
  [0.178, [0.803, 0.699, 0.759]],
  [0.18, [0.81, 0.701, 0.751]],
  [0.182, [0.81, 0.701, 0.751]],
  [0.184, [0.817, 0.703, 0.743]],
  [0.186, [0.817, 0.703, 0.743]],
  [0.188, [0.824, 0.705, 0.734]],
  [0.19, [0.824, 0.705, 0.734]],
  [0.192, [0.83, 0.707, 0.726]],
  [0.194, [0.83, 0.707, 0.726]],
  [0.196, [0.837, 0.709, 0.717]],
  [0.198, [0.837, 0.709, 0.717]],
  [0.2, [0.844, 0.711, 0.709]],
  [0.202, [0.844, 0.711, 0.709]],
  [0.204, [0.851, 0.713, 0.701]],
  [0.205, [0.851, 0.713, 0.701]],
  [0.207, [0.857, 0.714, 0.692]],
  [0.209, [0.857, 0.714, 0.692]],
  [0.211, [0.864, 0.716, 0.684]],
  [0.213, [0.864, 0.716, 0.684]],
  [0.215, [0.871, 0.718, 0.675]],
  [0.217, [0.871, 0.718, 0.675]],
  [0.219, [0.878, 0.72, 0.667]],
  [0.221, [0.878, 0.72, 0.667]],
  [0.223, [0.885, 0.722, 0.659]],
  [0.225, [0.885, 0.722, 0.659]],
  [0.227, [0.891, 0.724, 0.65]],
  [0.229, [0.891, 0.724, 0.65]],
  [0.231, [0.898, 0.726, 0.642]],
  [0.233, [0.898, 0.726, 0.642]],
  [0.235, [0.905, 0.728, 0.633]],
  [0.237, [0.905, 0.728, 0.633]],
  [0.239, [0.912, 0.73, 0.625]],
  [0.241, [0.912, 0.73, 0.625]],
  [0.243, [0.919, 0.732, 0.617]],
  [0.245, [0.919, 0.732, 0.617]],
  [0.247, [0.925, 0.734, 0.608]],
  [0.249, [0.925, 0.734, 0.608]],
  [0.25, [0.932, 0.736, 0.6]],
  [0.252, [0.932, 0.736, 0.6]],
  [0.254, [0.939, 0.738, 0.591]],
  [0.256, [0.939, 0.738, 0.591]],
  [0.258, [0.946, 0.74, 0.583]],
  [0.26, [0.946, 0.74, 0.583]],
  [0.262, [0.952, 0.742, 0.575]],
  [0.264, [0.952, 0.742, 0.575]],
  [0.266, [0.959, 0.744, 0.566]],
  [0.268, [0.959, 0.744, 0.566]],
  [0.27, [0.966, 0.745, 0.558]],
  [0.272, [0.966, 0.745, 0.558]],
  [0.274, [0.973, 0.747, 0.549]],
  [0.276, [0.973, 0.747, 0.549]],
  [0.278, [0.98, 0.749, 0.541]],
  [0.28, [0.98, 0.749, 0.541]],
  [0.282, [0.986, 0.751, 0.533]],
  [0.284, [0.986, 0.751, 0.533]],
  [0.286, [0.992, 0.754, 0.526]],
  [0.288, [0.992, 0.754, 0.526]],
  [0.29, [0.992, 0.761, 0.528]],
  [0.292, [0.992, 0.761, 0.528]],
  [0.294, [0.993, 0.767, 0.53]],
  [0.295, [0.993, 0.767, 0.53]],
  [0.297, [0.993, 0.774, 0.532]],
  [0.299, [0.993, 0.774, 0.532]],
  [0.301, [0.993, 0.781, 0.534]],
  [0.303, [0.993, 0.781, 0.534]],
  [0.305, [0.993, 0.788, 0.536]],
  [0.307, [0.993, 0.788, 0.536]],
  [0.309, [0.993, 0.795, 0.538]],
  [0.311, [0.993, 0.795, 0.538]],
  [0.313, [0.994, 0.801, 0.54]],
  [0.315, [0.994, 0.801, 0.54]],
  [0.317, [0.994, 0.808, 0.542]],
  [0.319, [0.994, 0.808, 0.542]],
  [0.321, [0.994, 0.815, 0.544]],
  [0.323, [0.994, 0.815, 0.544]],
  [0.325, [0.994, 0.822, 0.546]],
  [0.327, [0.994, 0.822, 0.546]],
  [0.329, [0.995, 0.829, 0.548]],
  [0.331, [0.995, 0.829, 0.548]],
  [0.333, [0.995, 0.835, 0.55]],
  [0.335, [0.995, 0.835, 0.55]],
  [0.337, [0.995, 0.842, 0.552]],
  [0.339, [0.995, 0.842, 0.552]],
  [0.341, [0.995, 0.849, 0.554]],
  [0.342, [0.995, 0.849, 0.554]],
  [0.344, [0.995, 0.856, 0.556]],
  [0.346, [0.995, 0.856, 0.556]],
  [0.348, [0.996, 0.862, 0.559]],
  [0.35, [0.996, 0.862, 0.559]],
  [0.352, [0.996, 0.869, 0.561]],
  [0.354, [0.996, 0.869, 0.561]],
  [0.356, [0.996, 0.876, 0.563]],
  [0.358, [0.996, 0.876, 0.563]],
  [0.36, [0.996, 0.883, 0.565]],
  [0.362, [0.996, 0.883, 0.565]],
  [0.364, [0.996, 0.89, 0.567]],
  [0.366, [0.996, 0.89, 0.567]],
  [0.368, [0.997, 0.896, 0.569]],
  [0.37, [0.997, 0.896, 0.569]],
  [0.372, [0.997, 0.903, 0.571]],
  [0.374, [0.997, 0.903, 0.571]],
  [0.376, [0.997, 0.91, 0.573]],
  [0.378, [0.997, 0.91, 0.573]],
  [0.38, [0.997, 0.917, 0.575]],
  [0.382, [0.997, 0.917, 0.575]],
  [0.384, [0.998, 0.923, 0.577]],
  [0.386, [0.998, 0.923, 0.577]],
  [0.387, [0.998, 0.93, 0.579]],
  [0.389, [0.998, 0.93, 0.579]],
  [0.391, [0.998, 0.937, 0.581]],
  [0.393, [0.998, 0.937, 0.581]],
  [0.395, [0.998, 0.944, 0.583]],
  [0.397, [0.998, 0.944, 0.583]],
  [0.399, [0.998, 0.951, 0.585]],
  [0.401, [0.998, 0.951, 0.585]],
  [0.403, [0.999, 0.957, 0.587]],
  [0.405, [0.999, 0.957, 0.587]],
  [0.407, [0.999, 0.964, 0.589]],
  [0.409, [0.999, 0.964, 0.589]],
  [0.411, [0.999, 0.971, 0.591]],
  [0.413, [0.999, 0.971, 0.591]],
  [0.415, [0.999, 0.978, 0.593]],
  [0.417, [0.999, 0.978, 0.593]],
  [0.419, [1, 0.984, 0.595]],
  [0.421, [1, 0.984, 0.595]],
  [0.423, [1, 0.991, 0.597]],
  [0.425, [1, 0.991, 0.597]],
  [0.427, [1, 0.998, 0.599]],
  [0.429, [1, 0.998, 0.599]],
  [0.431, [0.985, 0.989, 0.602]],
  [0.432, [0.985, 0.989, 0.602]],
  [0.434, [0.963, 0.973, 0.604]],
  [0.436, [0.963, 0.973, 0.604]],
  [0.438, [0.942, 0.957, 0.607]],
  [0.44, [0.942, 0.957, 0.607]],
  [0.442, [0.92, 0.941, 0.609]],
  [0.444, [0.92, 0.941, 0.609]],
  [0.446, [0.899, 0.925, 0.612]],
  [0.448, [0.899, 0.925, 0.612]],
  [0.45, [0.878, 0.91, 0.614]],
  [0.452, [0.878, 0.91, 0.614]],
  [0.454, [0.856, 0.894, 0.617]],
  [0.456, [0.856, 0.894, 0.617]],
  [0.458, [0.835, 0.878, 0.619]],
  [0.46, [0.835, 0.878, 0.619]],
  [0.462, [0.813, 0.862, 0.622]],
  [0.464, [0.813, 0.862, 0.622]],
  [0.466, [0.792, 0.846, 0.624]],
  [0.468, [0.792, 0.846, 0.624]],
  [0.47, [0.77, 0.83, 0.627]],
  [0.472, [0.77, 0.83, 0.627]],
  [0.474, [0.749, 0.815, 0.629]],
  [0.476, [0.749, 0.815, 0.629]],
  [0.477, [0.728, 0.799, 0.631]],
  [0.479, [0.728, 0.799, 0.631]],
  [0.481, [0.706, 0.783, 0.634]],
  [0.483, [0.706, 0.783, 0.634]],
  [0.485, [0.685, 0.767, 0.636]],
  [0.487, [0.685, 0.767, 0.636]],
  [0.489, [0.663, 0.751, 0.639]],
  [0.491, [0.663, 0.751, 0.639]],
  [0.493, [0.642, 0.736, 0.641]],
  [0.495, [0.642, 0.736, 0.641]],
  [0.497, [0.621, 0.72, 0.644]],
  [0.499, [0.621, 0.72, 0.644]],
  [0.501, [0.599, 0.704, 0.646]],
  [0.503, [0.599, 0.704, 0.646]],
  [0.505, [0.578, 0.688, 0.649]],
  [0.507, [0.578, 0.688, 0.649]],
  [0.509, [0.556, 0.672, 0.651]],
  [0.511, [0.556, 0.672, 0.651]],
  [0.513, [0.535, 0.656, 0.654]],
  [0.515, [0.535, 0.656, 0.654]],
  [0.517, [0.513, 0.641, 0.656]],
  [0.519, [0.513, 0.641, 0.656]],
  [0.521, [0.492, 0.625, 0.659]],
  [0.523, [0.492, 0.625, 0.659]],
  [0.524, [0.471, 0.609, 0.661]],
  [0.526, [0.471, 0.609, 0.661]],
  [0.528, [0.449, 0.593, 0.664]],
  [0.53, [0.449, 0.593, 0.664]],
  [0.532, [0.428, 0.577, 0.666]],
  [0.534, [0.428, 0.577, 0.666]],
  [0.536, [0.406, 0.561, 0.669]],
  [0.538, [0.406, 0.561, 0.669]],
  [0.54, [0.385, 0.546, 0.671]],
  [0.542, [0.385, 0.546, 0.671]],
  [0.544, [0.363, 0.53, 0.674]],
  [0.546, [0.363, 0.53, 0.674]],
  [0.548, [0.342, 0.514, 0.676]],
  [0.55, [0.342, 0.514, 0.676]],
  [0.552, [0.321, 0.498, 0.679]],
  [0.554, [0.321, 0.498, 0.679]],
  [0.556, [0.299, 0.482, 0.681]],
  [0.558, [0.299, 0.482, 0.681]],
  [0.56, [0.278, 0.466, 0.683]],
  [0.562, [0.278, 0.466, 0.683]],
  [0.564, [0.256, 0.451, 0.686]],
  [0.566, [0.256, 0.451, 0.686]],
  [0.568, [0.235, 0.435, 0.688]],
  [0.569, [0.235, 0.435, 0.688]],
  [0.571, [0.225, 0.42, 0.689]],
  [0.573, [0.225, 0.42, 0.689]],
  [0.575, [0.245, 0.409, 0.683]],
  [0.577, [0.245, 0.409, 0.683]],
  [0.579, [0.265, 0.397, 0.678]],
  [0.581, [0.265, 0.397, 0.678]],
  [0.583, [0.285, 0.386, 0.673]],
  [0.585, [0.285, 0.386, 0.673]],
  [0.587, [0.304, 0.375, 0.668]],
  [0.589, [0.304, 0.375, 0.668]],
  [0.591, [0.324, 0.363, 0.662]],
  [0.593, [0.324, 0.363, 0.662]],
  [0.595, [0.344, 0.352, 0.657]],
  [0.597, [0.344, 0.352, 0.657]],
  [0.599, [0.364, 0.34, 0.652]],
  [0.601, [0.364, 0.34, 0.652]],
  [0.603, [0.384, 0.329, 0.646]],
  [0.605, [0.384, 0.329, 0.646]],
  [0.607, [0.404, 0.318, 0.641]],
  [0.609, [0.404, 0.318, 0.641]],
  [0.611, [0.423, 0.306, 0.636]],
  [0.613, [0.423, 0.306, 0.636]],
  [0.614, [0.443, 0.295, 0.631]],
  [0.616, [0.443, 0.295, 0.631]],
  [0.618, [0.463, 0.283, 0.625]],
  [0.62, [0.463, 0.283, 0.625]],
  [0.622, [0.483, 0.272, 0.62]],
  [0.624, [0.483, 0.272, 0.62]],
  [0.626, [0.503, 0.261, 0.615]],
  [0.628, [0.503, 0.261, 0.615]],
  [0.63, [0.522, 0.249, 0.61]],
  [0.632, [0.522, 0.249, 0.61]],
  [0.634, [0.542, 0.238, 0.604]],
  [0.636, [0.542, 0.238, 0.604]],
  [0.638, [0.562, 0.226, 0.599]],
  [0.64, [0.562, 0.226, 0.599]],
  [0.642, [0.582, 0.215, 0.594]],
  [0.644, [0.582, 0.215, 0.594]],
  [0.646, [0.602, 0.203, 0.588]],
  [0.648, [0.602, 0.203, 0.588]],
  [0.65, [0.621, 0.192, 0.583]],
  [0.652, [0.621, 0.192, 0.583]],
  [0.654, [0.641, 0.181, 0.578]],
  [0.656, [0.641, 0.181, 0.578]],
  [0.658, [0.661, 0.169, 0.573]],
  [0.659, [0.661, 0.169, 0.573]],
  [0.661, [0.681, 0.158, 0.567]],
  [0.663, [0.681, 0.158, 0.567]],
  [0.665, [0.701, 0.146, 0.562]],
  [0.667, [0.701, 0.146, 0.562]],
  [0.669, [0.72, 0.135, 0.557]],
  [0.671, [0.72, 0.135, 0.557]],
  [0.673, [0.74, 0.124, 0.552]],
  [0.675, [0.74, 0.124, 0.552]],
  [0.677, [0.76, 0.112, 0.546]],
  [0.679, [0.76, 0.112, 0.546]],
  [0.681, [0.78, 0.101, 0.541]],
  [0.683, [0.78, 0.101, 0.541]],
  [0.685, [0.8, 0.089, 0.536]],
  [0.687, [0.8, 0.089, 0.536]],
  [0.689, [0.82, 0.078, 0.53]],
  [0.691, [0.82, 0.078, 0.53]],
  [0.693, [0.839, 0.067, 0.525]],
  [0.695, [0.839, 0.067, 0.525]],
  [0.697, [0.859, 0.055, 0.52]],
  [0.699, [0.859, 0.055, 0.52]],
  [0.701, [0.879, 0.044, 0.515]],
  [0.703, [0.879, 0.044, 0.515]],
  [0.705, [0.899, 0.032, 0.509]],
  [0.706, [0.899, 0.032, 0.509]],
  [0.708, [0.919, 0.021, 0.504]],
  [0.71, [0.919, 0.021, 0.504]],
  [0.712, [0.938, 9e-3, 0.499]],
  [0.714, [0.938, 9e-3, 0.499]],
  [0.716, [0.937, 0.016, 0.488]],
  [0.718, [0.937, 0.016, 0.488]],
  [0.72, [0.931, 0.026, 0.477]],
  [0.722, [0.931, 0.026, 0.477]],
  [0.724, [0.926, 0.035, 0.466]],
  [0.726, [0.926, 0.035, 0.466]],
  [0.728, [0.921, 0.045, 0.455]],
  [0.73, [0.921, 0.045, 0.455]],
  [0.732, [0.916, 0.054, 0.444]],
  [0.734, [0.916, 0.054, 0.444]],
  [0.736, [0.91, 0.064, 0.432]],
  [0.738, [0.91, 0.064, 0.432]],
  [0.74, [0.905, 0.074, 0.421]],
  [0.742, [0.905, 0.074, 0.421]],
  [0.744, [0.9, 0.083, 0.41]],
  [0.746, [0.9, 0.083, 0.41]],
  [0.748, [0.894, 0.093, 0.399]],
  [0.75, [0.894, 0.093, 0.399]],
  [0.751, [0.889, 0.102, 0.388]],
  [0.753, [0.889, 0.102, 0.388]],
  [0.755, [0.884, 0.112, 0.376]],
  [0.757, [0.884, 0.112, 0.376]],
  [0.759, [0.879, 0.121, 0.365]],
  [0.761, [0.879, 0.121, 0.365]],
  [0.763, [0.873, 0.131, 0.354]],
  [0.765, [0.873, 0.131, 0.354]],
  [0.767, [0.868, 0.141, 0.343]],
  [0.769, [0.868, 0.141, 0.343]],
  [0.771, [0.863, 0.15, 0.332]],
  [0.773, [0.863, 0.15, 0.332]],
  [0.775, [0.858, 0.16, 0.321]],
  [0.777, [0.858, 0.16, 0.321]],
  [0.779, [0.852, 0.169, 0.309]],
  [0.781, [0.852, 0.169, 0.309]],
  [0.783, [0.847, 0.179, 0.298]],
  [0.785, [0.847, 0.179, 0.298]],
  [0.787, [0.842, 0.189, 0.287]],
  [0.789, [0.842, 0.189, 0.287]],
  [0.791, [0.836, 0.198, 0.276]],
  [0.793, [0.836, 0.198, 0.276]],
  [0.795, [0.831, 0.208, 0.265]],
  [0.796, [0.831, 0.208, 0.265]],
  [0.798, [0.826, 0.217, 0.253]],
  [0.8, [0.826, 0.217, 0.253]],
  [0.802, [0.821, 0.227, 0.242]],
  [0.804, [0.821, 0.227, 0.242]],
  [0.806, [0.815, 0.236, 0.231]],
  [0.808, [0.815, 0.236, 0.231]],
  [0.81, [0.81, 0.246, 0.22]],
  [0.812, [0.81, 0.246, 0.22]],
  [0.814, [0.805, 0.256, 0.209]],
  [0.816, [0.805, 0.256, 0.209]],
  [0.818, [0.8, 0.265, 0.197]],
  [0.82, [0.8, 0.265, 0.197]],
  [0.822, [0.794, 0.275, 0.186]],
  [0.824, [0.794, 0.275, 0.186]],
  [0.826, [0.789, 0.284, 0.175]],
  [0.828, [0.789, 0.284, 0.175]],
  [0.83, [0.784, 0.294, 0.164]],
  [0.832, [0.784, 0.294, 0.164]],
  [0.834, [0.778, 0.303, 0.153]],
  [0.836, [0.778, 0.303, 0.153]],
  [0.838, [0.773, 0.313, 0.141]],
  [0.84, [0.773, 0.313, 0.141]],
  [0.841, [0.768, 0.323, 0.13]],
  [0.843, [0.768, 0.323, 0.13]],
  [0.845, [0.763, 0.332, 0.119]],
  [0.847, [0.763, 0.332, 0.119]],
  [0.849, [0.757, 0.342, 0.108]],
  [0.851, [0.757, 0.342, 0.108]],
  [0.853, [0.752, 0.351, 0.097]],
  [0.855, [0.752, 0.351, 0.097]],
  [0.857, [0.745, 0.357, 0.094]],
  [0.859, [0.745, 0.357, 0.094]],
  [0.861, [0.735, 0.359, 0.102]],
  [0.863, [0.735, 0.359, 0.102]],
  [0.865, [0.726, 0.36, 0.111]],
  [0.867, [0.726, 0.36, 0.111]],
  [0.869, [0.716, 0.361, 0.119]],
  [0.871, [0.716, 0.361, 0.119]],
  [0.873, [0.707, 0.362, 0.128]],
  [0.875, [0.707, 0.362, 0.128]],
  [0.877, [0.697, 0.363, 0.136]],
  [0.879, [0.697, 0.363, 0.136]],
  [0.881, [0.687, 0.364, 0.145]],
  [0.883, [0.687, 0.364, 0.145]],
  [0.885, [0.678, 0.366, 0.153]],
  [0.886, [0.678, 0.366, 0.153]],
  [0.888, [0.668, 0.367, 0.162]],
  [0.89, [0.668, 0.367, 0.162]],
  [0.892, [0.659, 0.368, 0.17]],
  [0.894, [0.659, 0.368, 0.17]],
  [0.896, [0.649, 0.369, 0.179]],
  [0.898, [0.649, 0.369, 0.179]],
  [0.9, [0.64, 0.37, 0.187]],
  [0.902, [0.64, 0.37, 0.187]],
  [0.904, [0.63, 0.372, 0.196]],
  [0.906, [0.63, 0.372, 0.196]],
  [0.908, [0.62, 0.373, 0.204]],
  [0.91, [0.62, 0.373, 0.204]],
  [0.912, [0.611, 0.374, 0.213]],
  [0.914, [0.611, 0.374, 0.213]],
  [0.916, [0.601, 0.375, 0.221]],
  [0.918, [0.601, 0.375, 0.221]],
  [0.92, [0.592, 0.376, 0.23]],
  [0.922, [0.592, 0.376, 0.23]],
  [0.924, [0.582, 0.378, 0.238]],
  [0.926, [0.582, 0.378, 0.238]],
  [0.928, [0.572, 0.379, 0.247]],
  [0.93, [0.572, 0.379, 0.247]],
  [0.932, [0.563, 0.38, 0.255]],
  [0.933, [0.563, 0.38, 0.255]],
  [0.935, [0.553, 0.381, 0.264]],
  [0.937, [0.553, 0.381, 0.264]],
  [0.939, [0.544, 0.382, 0.272]],
  [0.941, [0.544, 0.382, 0.272]],
  [0.943, [0.534, 0.383, 0.281]],
  [0.945, [0.534, 0.383, 0.281]],
  [0.947, [0.525, 0.385, 0.289]],
  [0.949, [0.525, 0.385, 0.289]],
  [0.951, [0.515, 0.386, 0.298]],
  [0.953, [0.515, 0.386, 0.298]],
  [0.955, [0.505, 0.387, 0.306]],
  [0.957, [0.505, 0.387, 0.306]],
  [0.959, [0.496, 0.388, 0.315]],
  [0.961, [0.496, 0.388, 0.315]],
  [0.963, [0.486, 0.389, 0.323]],
  [0.965, [0.486, 0.389, 0.323]],
  [0.967, [0.477, 0.391, 0.332]],
  [0.969, [0.477, 0.391, 0.332]],
  [0.971, [0.467, 0.392, 0.34]],
  [0.973, [0.467, 0.392, 0.34]],
  [0.975, [0.457, 0.393, 0.349]],
  [0.977, [0.457, 0.393, 0.349]],
  [0.978, [0.448, 0.394, 0.357]],
  [0.98, [0.448, 0.394, 0.357]],
  [0.982, [0.438, 0.395, 0.366]],
  [0.984, [0.438, 0.395, 0.366]],
  [0.986, [0.429, 0.396, 0.374]],
  [0.988, [0.429, 0.396, 0.374]],
  [0.99, [0.419, 0.398, 0.383]],
  [0.992, [0.419, 0.398, 0.383]],
  [0.994, [0.41, 0.399, 0.391]],
  [0.996, [0.41, 0.399, 0.391]],
  [0.998, [0.4, 0.4, 0.4]],
  [1, [0.4, 0.4, 0.4]]
], Jf = [
  [0, [0.106, 0.62, 0.467]],
  [2e-3, [0.106, 0.62, 0.467]],
  [4e-3, [0.126, 0.613, 0.454]],
  [6e-3, [0.126, 0.613, 0.454]],
  [8e-3, [0.147, 0.606, 0.441]],
  [0.01, [0.147, 0.606, 0.441]],
  [0.012, [0.167, 0.599, 0.429]],
  [0.014, [0.167, 0.599, 0.429]],
  [0.016, [0.188, 0.592, 0.416]],
  [0.018, [0.188, 0.592, 0.416]],
  [0.02, [0.208, 0.586, 0.404]],
  [0.022, [0.208, 0.586, 0.404]],
  [0.023, [0.229, 0.579, 0.391]],
  [0.025, [0.229, 0.579, 0.391]],
  [0.027, [0.249, 0.572, 0.379]],
  [0.029, [0.249, 0.572, 0.379]],
  [0.031, [0.27, 0.565, 0.366]],
  [0.033, [0.27, 0.565, 0.366]],
  [0.035, [0.29, 0.559, 0.353]],
  [0.037, [0.29, 0.559, 0.353]],
  [0.039, [0.31, 0.552, 0.341]],
  [0.041, [0.31, 0.552, 0.341]],
  [0.043, [0.331, 0.545, 0.328]],
  [0.045, [0.331, 0.545, 0.328]],
  [0.047, [0.351, 0.538, 0.316]],
  [0.049, [0.351, 0.538, 0.316]],
  [0.051, [0.372, 0.531, 0.303]],
  [0.053, [0.372, 0.531, 0.303]],
  [0.055, [0.392, 0.525, 0.29]],
  [0.057, [0.392, 0.525, 0.29]],
  [0.059, [0.413, 0.518, 0.278]],
  [0.061, [0.413, 0.518, 0.278]],
  [0.063, [0.433, 0.511, 0.265]],
  [0.065, [0.433, 0.511, 0.265]],
  [0.067, [0.454, 0.504, 0.253]],
  [0.068, [0.454, 0.504, 0.253]],
  [0.07, [0.474, 0.498, 0.24]],
  [0.072, [0.474, 0.498, 0.24]],
  [0.074, [0.495, 0.491, 0.227]],
  [0.076, [0.495, 0.491, 0.227]],
  [0.078, [0.515, 0.484, 0.215]],
  [0.08, [0.515, 0.484, 0.215]],
  [0.082, [0.535, 0.477, 0.202]],
  [0.084, [0.535, 0.477, 0.202]],
  [0.086, [0.556, 0.47, 0.19]],
  [0.088, [0.556, 0.47, 0.19]],
  [0.09, [0.576, 0.464, 0.177]],
  [0.092, [0.576, 0.464, 0.177]],
  [0.094, [0.597, 0.457, 0.164]],
  [0.096, [0.597, 0.457, 0.164]],
  [0.098, [0.617, 0.45, 0.152]],
  [0.1, [0.617, 0.45, 0.152]],
  [0.102, [0.638, 0.443, 0.139]],
  [0.104, [0.638, 0.443, 0.139]],
  [0.106, [0.658, 0.436, 0.127]],
  [0.108, [0.658, 0.436, 0.127]],
  [0.11, [0.679, 0.43, 0.114]],
  [0.112, [0.679, 0.43, 0.114]],
  [0.114, [0.699, 0.423, 0.101]],
  [0.115, [0.699, 0.423, 0.101]],
  [0.117, [0.719, 0.416, 0.089]],
  [0.119, [0.719, 0.416, 0.089]],
  [0.121, [0.74, 0.409, 0.076]],
  [0.123, [0.74, 0.409, 0.076]],
  [0.125, [0.76, 0.403, 0.064]],
  [0.127, [0.76, 0.403, 0.064]],
  [0.129, [0.781, 0.396, 0.051]],
  [0.131, [0.781, 0.396, 0.051]],
  [0.133, [0.801, 0.389, 0.038]],
  [0.135, [0.801, 0.389, 0.038]],
  [0.137, [0.822, 0.382, 0.026]],
  [0.139, [0.822, 0.382, 0.026]],
  [0.141, [0.842, 0.375, 0.013]],
  [0.143, [0.842, 0.375, 0.013]],
  [0.145, [0.845, 0.374, 0.019]],
  [0.147, [0.845, 0.374, 0.019]],
  [0.149, [0.834, 0.375, 0.038]],
  [0.151, [0.834, 0.375, 0.038]],
  [0.153, [0.823, 0.377, 0.057]],
  [0.155, [0.823, 0.377, 0.057]],
  [0.157, [0.813, 0.379, 0.076]],
  [0.159, [0.813, 0.379, 0.076]],
  [0.16, [0.802, 0.381, 0.095]],
  [0.162, [0.802, 0.381, 0.095]],
  [0.164, [0.791, 0.383, 0.114]],
  [0.166, [0.791, 0.383, 0.114]],
  [0.168, [0.78, 0.385, 0.133]],
  [0.17, [0.78, 0.385, 0.133]],
  [0.172, [0.769, 0.386, 0.152]],
  [0.174, [0.769, 0.386, 0.152]],
  [0.176, [0.759, 0.388, 0.171]],
  [0.178, [0.759, 0.388, 0.171]],
  [0.18, [0.748, 0.39, 0.19]],
  [0.182, [0.748, 0.39, 0.19]],
  [0.184, [0.737, 0.392, 0.209]],
  [0.186, [0.737, 0.392, 0.209]],
  [0.188, [0.726, 0.394, 0.228]],
  [0.19, [0.726, 0.394, 0.228]],
  [0.192, [0.716, 0.396, 0.247]],
  [0.194, [0.716, 0.396, 0.247]],
  [0.196, [0.705, 0.397, 0.266]],
  [0.198, [0.705, 0.397, 0.266]],
  [0.2, [0.694, 0.399, 0.285]],
  [0.202, [0.694, 0.399, 0.285]],
  [0.204, [0.683, 0.401, 0.305]],
  [0.205, [0.683, 0.401, 0.305]],
  [0.207, [0.673, 0.403, 0.324]],
  [0.209, [0.673, 0.403, 0.324]],
  [0.211, [0.662, 0.405, 0.343]],
  [0.213, [0.662, 0.405, 0.343]],
  [0.215, [0.651, 0.407, 0.362]],
  [0.217, [0.651, 0.407, 0.362]],
  [0.219, [0.64, 0.408, 0.381]],
  [0.221, [0.64, 0.408, 0.381]],
  [0.223, [0.63, 0.41, 0.4]],
  [0.225, [0.63, 0.41, 0.4]],
  [0.227, [0.619, 0.412, 0.419]],
  [0.229, [0.619, 0.412, 0.419]],
  [0.231, [0.608, 0.414, 0.438]],
  [0.233, [0.608, 0.414, 0.438]],
  [0.235, [0.597, 0.416, 0.457]],
  [0.237, [0.597, 0.416, 0.457]],
  [0.239, [0.586, 0.418, 0.476]],
  [0.241, [0.586, 0.418, 0.476]],
  [0.243, [0.576, 0.419, 0.495]],
  [0.245, [0.576, 0.419, 0.495]],
  [0.247, [0.565, 0.421, 0.514]],
  [0.249, [0.565, 0.421, 0.514]],
  [0.25, [0.554, 0.423, 0.533]],
  [0.252, [0.554, 0.423, 0.533]],
  [0.254, [0.543, 0.425, 0.552]],
  [0.256, [0.543, 0.425, 0.552]],
  [0.258, [0.533, 0.427, 0.571]],
  [0.26, [0.533, 0.427, 0.571]],
  [0.262, [0.522, 0.428, 0.59]],
  [0.264, [0.522, 0.428, 0.59]],
  [0.266, [0.511, 0.43, 0.609]],
  [0.268, [0.511, 0.43, 0.609]],
  [0.27, [0.5, 0.432, 0.628]],
  [0.272, [0.5, 0.432, 0.628]],
  [0.274, [0.49, 0.434, 0.648]],
  [0.276, [0.49, 0.434, 0.648]],
  [0.278, [0.479, 0.436, 0.667]],
  [0.28, [0.479, 0.436, 0.667]],
  [0.282, [0.468, 0.438, 0.686]],
  [0.284, [0.468, 0.438, 0.686]],
  [0.286, [0.461, 0.438, 0.701]],
  [0.288, [0.461, 0.438, 0.701]],
  [0.29, [0.473, 0.43, 0.697]],
  [0.292, [0.473, 0.43, 0.697]],
  [0.294, [0.485, 0.423, 0.693]],
  [0.295, [0.485, 0.423, 0.693]],
  [0.297, [0.497, 0.415, 0.688]],
  [0.299, [0.497, 0.415, 0.688]],
  [0.301, [0.51, 0.408, 0.684]],
  [0.303, [0.51, 0.408, 0.684]],
  [0.305, [0.522, 0.4, 0.679]],
  [0.307, [0.522, 0.4, 0.679]],
  [0.309, [0.534, 0.392, 0.675]],
  [0.311, [0.534, 0.392, 0.675]],
  [0.313, [0.546, 0.385, 0.67]],
  [0.315, [0.546, 0.385, 0.67]],
  [0.317, [0.559, 0.377, 0.666]],
  [0.319, [0.559, 0.377, 0.666]],
  [0.321, [0.571, 0.369, 0.662]],
  [0.323, [0.571, 0.369, 0.662]],
  [0.325, [0.583, 0.362, 0.657]],
  [0.327, [0.583, 0.362, 0.657]],
  [0.329, [0.596, 0.354, 0.653]],
  [0.331, [0.596, 0.354, 0.653]],
  [0.333, [0.608, 0.346, 0.648]],
  [0.335, [0.608, 0.346, 0.648]],
  [0.337, [0.62, 0.339, 0.644]],
  [0.339, [0.62, 0.339, 0.644]],
  [0.341, [0.632, 0.331, 0.64]],
  [0.342, [0.632, 0.331, 0.64]],
  [0.344, [0.645, 0.323, 0.635]],
  [0.346, [0.645, 0.323, 0.635]],
  [0.348, [0.657, 0.316, 0.631]],
  [0.35, [0.657, 0.316, 0.631]],
  [0.352, [0.669, 0.308, 0.626]],
  [0.354, [0.669, 0.308, 0.626]],
  [0.356, [0.681, 0.301, 0.622]],
  [0.358, [0.681, 0.301, 0.622]],
  [0.36, [0.694, 0.293, 0.617]],
  [0.362, [0.694, 0.293, 0.617]],
  [0.364, [0.706, 0.285, 0.613]],
  [0.366, [0.706, 0.285, 0.613]],
  [0.368, [0.718, 0.278, 0.609]],
  [0.37, [0.718, 0.278, 0.609]],
  [0.372, [0.731, 0.27, 0.604]],
  [0.374, [0.731, 0.27, 0.604]],
  [0.376, [0.743, 0.262, 0.6]],
  [0.378, [0.743, 0.262, 0.6]],
  [0.38, [0.755, 0.255, 0.595]],
  [0.382, [0.755, 0.255, 0.595]],
  [0.384, [0.767, 0.247, 0.591]],
  [0.386, [0.767, 0.247, 0.591]],
  [0.387, [0.78, 0.239, 0.587]],
  [0.389, [0.78, 0.239, 0.587]],
  [0.391, [0.792, 0.232, 0.582]],
  [0.393, [0.792, 0.232, 0.582]],
  [0.395, [0.804, 0.224, 0.578]],
  [0.397, [0.804, 0.224, 0.578]],
  [0.399, [0.816, 0.216, 0.573]],
  [0.401, [0.816, 0.216, 0.573]],
  [0.403, [0.829, 0.209, 0.569]],
  [0.405, [0.829, 0.209, 0.569]],
  [0.407, [0.841, 0.201, 0.565]],
  [0.409, [0.841, 0.201, 0.565]],
  [0.411, [0.853, 0.194, 0.56]],
  [0.413, [0.853, 0.194, 0.56]],
  [0.415, [0.866, 0.186, 0.556]],
  [0.417, [0.866, 0.186, 0.556]],
  [0.419, [0.878, 0.178, 0.551]],
  [0.421, [0.878, 0.178, 0.551]],
  [0.423, [0.89, 0.171, 0.547]],
  [0.425, [0.89, 0.171, 0.547]],
  [0.427, [0.902, 0.163, 0.542]],
  [0.429, [0.902, 0.163, 0.542]],
  [0.431, [0.896, 0.17, 0.533]],
  [0.432, [0.896, 0.17, 0.533]],
  [0.434, [0.882, 0.184, 0.521]],
  [0.436, [0.882, 0.184, 0.521]],
  [0.438, [0.868, 0.197, 0.51]],
  [0.44, [0.868, 0.197, 0.51]],
  [0.442, [0.854, 0.211, 0.498]],
  [0.444, [0.854, 0.211, 0.498]],
  [0.446, [0.84, 0.224, 0.486]],
  [0.448, [0.84, 0.224, 0.486]],
  [0.45, [0.827, 0.238, 0.475]],
  [0.452, [0.827, 0.238, 0.475]],
  [0.454, [0.813, 0.251, 0.463]],
  [0.456, [0.813, 0.251, 0.463]],
  [0.458, [0.799, 0.265, 0.451]],
  [0.46, [0.799, 0.265, 0.451]],
  [0.462, [0.785, 0.278, 0.44]],
  [0.464, [0.785, 0.278, 0.44]],
  [0.466, [0.771, 0.292, 0.428]],
  [0.468, [0.771, 0.292, 0.428]],
  [0.47, [0.757, 0.305, 0.417]],
  [0.472, [0.757, 0.305, 0.417]],
  [0.474, [0.743, 0.318, 0.405]],
  [0.476, [0.743, 0.318, 0.405]],
  [0.477, [0.729, 0.332, 0.393]],
  [0.479, [0.729, 0.332, 0.393]],
  [0.481, [0.715, 0.345, 0.382]],
  [0.483, [0.715, 0.345, 0.382]],
  [0.485, [0.702, 0.359, 0.37]],
  [0.487, [0.702, 0.359, 0.37]],
  [0.489, [0.688, 0.372, 0.358]],
  [0.491, [0.688, 0.372, 0.358]],
  [0.493, [0.674, 0.386, 0.347]],
  [0.495, [0.674, 0.386, 0.347]],
  [0.497, [0.66, 0.399, 0.335]],
  [0.499, [0.66, 0.399, 0.335]],
  [0.501, [0.646, 0.413, 0.324]],
  [0.503, [0.646, 0.413, 0.324]],
  [0.505, [0.632, 0.426, 0.312]],
  [0.507, [0.632, 0.426, 0.312]],
  [0.509, [0.618, 0.44, 0.3]],
  [0.511, [0.618, 0.44, 0.3]],
  [0.513, [0.604, 0.453, 0.289]],
  [0.515, [0.604, 0.453, 0.289]],
  [0.517, [0.59, 0.466, 0.277]],
  [0.519, [0.59, 0.466, 0.277]],
  [0.521, [0.577, 0.48, 0.265]],
  [0.523, [0.577, 0.48, 0.265]],
  [0.524, [0.563, 0.493, 0.254]],
  [0.526, [0.563, 0.493, 0.254]],
  [0.528, [0.549, 0.507, 0.242]],
  [0.53, [0.549, 0.507, 0.242]],
  [0.532, [0.535, 0.52, 0.231]],
  [0.534, [0.535, 0.52, 0.231]],
  [0.536, [0.521, 0.534, 0.219]],
  [0.538, [0.521, 0.534, 0.219]],
  [0.54, [0.507, 0.547, 0.207]],
  [0.542, [0.507, 0.547, 0.207]],
  [0.544, [0.493, 0.561, 0.196]],
  [0.546, [0.493, 0.561, 0.196]],
  [0.548, [0.479, 0.574, 0.184]],
  [0.55, [0.479, 0.574, 0.184]],
  [0.552, [0.465, 0.588, 0.172]],
  [0.554, [0.465, 0.588, 0.172]],
  [0.556, [0.452, 0.601, 0.161]],
  [0.558, [0.452, 0.601, 0.161]],
  [0.56, [0.438, 0.614, 0.149]],
  [0.562, [0.438, 0.614, 0.149]],
  [0.564, [0.424, 0.628, 0.138]],
  [0.566, [0.424, 0.628, 0.138]],
  [0.568, [0.41, 0.641, 0.126]],
  [0.569, [0.41, 0.641, 0.126]],
  [0.571, [0.404, 0.651, 0.117]],
  [0.573, [0.404, 0.651, 0.117]],
  [0.575, [0.418, 0.652, 0.114]],
  [0.577, [0.418, 0.652, 0.114]],
  [0.579, [0.431, 0.652, 0.111]],
  [0.581, [0.431, 0.652, 0.111]],
  [0.583, [0.445, 0.653, 0.108]],
  [0.585, [0.445, 0.653, 0.108]],
  [0.587, [0.459, 0.653, 0.105]],
  [0.589, [0.459, 0.653, 0.105]],
  [0.591, [0.473, 0.654, 0.102]],
  [0.593, [0.473, 0.654, 0.102]],
  [0.595, [0.487, 0.654, 0.099]],
  [0.597, [0.487, 0.654, 0.099]],
  [0.599, [0.5, 0.655, 0.096]],
  [0.601, [0.5, 0.655, 0.096]],
  [0.603, [0.514, 0.655, 0.093]],
  [0.605, [0.514, 0.655, 0.093]],
  [0.607, [0.528, 0.656, 0.09]],
  [0.609, [0.528, 0.656, 0.09]],
  [0.611, [0.542, 0.657, 0.087]],
  [0.613, [0.542, 0.657, 0.087]],
  [0.614, [0.556, 0.657, 0.084]],
  [0.616, [0.556, 0.657, 0.084]],
  [0.618, [0.569, 0.658, 0.081]],
  [0.62, [0.569, 0.658, 0.081]],
  [0.622, [0.583, 0.658, 0.078]],
  [0.624, [0.583, 0.658, 0.078]],
  [0.626, [0.597, 0.659, 0.075]],
  [0.628, [0.597, 0.659, 0.075]],
  [0.63, [0.611, 0.659, 0.072]],
  [0.632, [0.611, 0.659, 0.072]],
  [0.634, [0.624, 0.66, 0.069]],
  [0.636, [0.624, 0.66, 0.069]],
  [0.638, [0.638, 0.66, 0.066]],
  [0.64, [0.638, 0.66, 0.066]],
  [0.642, [0.652, 0.661, 0.063]],
  [0.644, [0.652, 0.661, 0.063]],
  [0.646, [0.666, 0.661, 0.06]],
  [0.648, [0.666, 0.661, 0.06]],
  [0.65, [0.68, 0.662, 0.057]],
  [0.652, [0.68, 0.662, 0.057]],
  [0.654, [0.693, 0.662, 0.053]],
  [0.656, [0.693, 0.662, 0.053]],
  [0.658, [0.707, 0.663, 0.05]],
  [0.659, [0.707, 0.663, 0.05]],
  [0.661, [0.721, 0.664, 0.047]],
  [0.663, [0.721, 0.664, 0.047]],
  [0.665, [0.735, 0.664, 0.044]],
  [0.667, [0.735, 0.664, 0.044]],
  [0.669, [0.748, 0.665, 0.041]],
  [0.671, [0.748, 0.665, 0.041]],
  [0.673, [0.762, 0.665, 0.038]],
  [0.675, [0.762, 0.665, 0.038]],
  [0.677, [0.776, 0.666, 0.035]],
  [0.679, [0.776, 0.666, 0.035]],
  [0.681, [0.79, 0.666, 0.032]],
  [0.683, [0.79, 0.666, 0.032]],
  [0.685, [0.804, 0.667, 0.029]],
  [0.687, [0.804, 0.667, 0.029]],
  [0.689, [0.817, 0.667, 0.026]],
  [0.691, [0.817, 0.667, 0.026]],
  [0.693, [0.831, 0.668, 0.023]],
  [0.695, [0.831, 0.668, 0.023]],
  [0.697, [0.845, 0.668, 0.02]],
  [0.699, [0.845, 0.668, 0.02]],
  [0.701, [0.859, 0.669, 0.017]],
  [0.703, [0.859, 0.669, 0.017]],
  [0.705, [0.872, 0.669, 0.014]],
  [0.706, [0.872, 0.669, 0.014]],
  [0.708, [0.886, 0.67, 0.011]],
  [0.71, [0.886, 0.67, 0.011]],
  [0.712, [0.9, 0.671, 8e-3]],
  [0.714, [0.9, 0.671, 8e-3]],
  [0.716, [0.896, 0.666, 0.01]],
  [0.718, [0.896, 0.666, 0.01]],
  [0.72, [0.889, 0.66, 0.013]],
  [0.722, [0.889, 0.66, 0.013]],
  [0.724, [0.882, 0.654, 0.016]],
  [0.726, [0.882, 0.654, 0.016]],
  [0.728, [0.875, 0.649, 0.019]],
  [0.73, [0.875, 0.649, 0.019]],
  [0.732, [0.868, 0.643, 0.022]],
  [0.734, [0.868, 0.643, 0.022]],
  [0.736, [0.862, 0.637, 0.025]],
  [0.738, [0.862, 0.637, 0.025]],
  [0.74, [0.855, 0.631, 0.028]],
  [0.742, [0.855, 0.631, 0.028]],
  [0.744, [0.848, 0.626, 0.031]],
  [0.746, [0.848, 0.626, 0.031]],
  [0.748, [0.841, 0.62, 0.034]],
  [0.75, [0.841, 0.62, 0.034]],
  [0.751, [0.834, 0.614, 0.036]],
  [0.753, [0.834, 0.614, 0.036]],
  [0.755, [0.827, 0.609, 0.039]],
  [0.757, [0.827, 0.609, 0.039]],
  [0.759, [0.82, 0.603, 0.042]],
  [0.761, [0.82, 0.603, 0.042]],
  [0.763, [0.813, 0.597, 0.045]],
  [0.765, [0.813, 0.597, 0.045]],
  [0.767, [0.806, 0.592, 0.048]],
  [0.769, [0.806, 0.592, 0.048]],
  [0.771, [0.8, 0.586, 0.051]],
  [0.773, [0.8, 0.586, 0.051]],
  [0.775, [0.793, 0.58, 0.054]],
  [0.777, [0.793, 0.58, 0.054]],
  [0.779, [0.786, 0.574, 0.057]],
  [0.781, [0.786, 0.574, 0.057]],
  [0.783, [0.779, 0.569, 0.06]],
  [0.785, [0.779, 0.569, 0.06]],
  [0.787, [0.772, 0.563, 0.063]],
  [0.789, [0.772, 0.563, 0.063]],
  [0.791, [0.765, 0.557, 0.066]],
  [0.793, [0.765, 0.557, 0.066]],
  [0.795, [0.758, 0.552, 0.068]],
  [0.796, [0.758, 0.552, 0.068]],
  [0.798, [0.751, 0.546, 0.071]],
  [0.8, [0.751, 0.546, 0.071]],
  [0.802, [0.744, 0.54, 0.074]],
  [0.804, [0.744, 0.54, 0.074]],
  [0.806, [0.738, 0.534, 0.077]],
  [0.808, [0.738, 0.534, 0.077]],
  [0.81, [0.731, 0.529, 0.08]],
  [0.812, [0.731, 0.529, 0.08]],
  [0.814, [0.724, 0.523, 0.083]],
  [0.816, [0.724, 0.523, 0.083]],
  [0.818, [0.717, 0.517, 0.086]],
  [0.82, [0.717, 0.517, 0.086]],
  [0.822, [0.71, 0.512, 0.089]],
  [0.824, [0.71, 0.512, 0.089]],
  [0.826, [0.703, 0.506, 0.092]],
  [0.828, [0.703, 0.506, 0.092]],
  [0.83, [0.696, 0.5, 0.095]],
  [0.832, [0.696, 0.5, 0.095]],
  [0.834, [0.689, 0.495, 0.098]],
  [0.836, [0.689, 0.495, 0.098]],
  [0.838, [0.682, 0.489, 0.1]],
  [0.84, [0.682, 0.489, 0.1]],
  [0.841, [0.676, 0.483, 0.103]],
  [0.843, [0.676, 0.483, 0.103]],
  [0.845, [0.669, 0.477, 0.106]],
  [0.847, [0.669, 0.477, 0.106]],
  [0.849, [0.662, 0.472, 0.109]],
  [0.851, [0.662, 0.472, 0.109]],
  [0.853, [0.655, 0.466, 0.112]],
  [0.855, [0.655, 0.466, 0.112]],
  [0.857, [0.648, 0.462, 0.117]],
  [0.859, [0.648, 0.462, 0.117]],
  [0.861, [0.641, 0.46, 0.125]],
  [0.863, [0.641, 0.46, 0.125]],
  [0.865, [0.634, 0.459, 0.133]],
  [0.867, [0.634, 0.459, 0.133]],
  [0.869, [0.627, 0.457, 0.141]],
  [0.871, [0.627, 0.457, 0.141]],
  [0.873, [0.62, 0.455, 0.149]],
  [0.875, [0.62, 0.455, 0.149]],
  [0.877, [0.614, 0.453, 0.156]],
  [0.879, [0.614, 0.453, 0.156]],
  [0.881, [0.607, 0.452, 0.164]],
  [0.883, [0.607, 0.452, 0.164]],
  [0.885, [0.6, 0.45, 0.172]],
  [0.886, [0.6, 0.45, 0.172]],
  [0.888, [0.593, 0.448, 0.18]],
  [0.89, [0.593, 0.448, 0.18]],
  [0.892, [0.586, 0.447, 0.188]],
  [0.894, [0.586, 0.447, 0.188]],
  [0.896, [0.579, 0.445, 0.196]],
  [0.898, [0.579, 0.445, 0.196]],
  [0.9, [0.572, 0.443, 0.204]],
  [0.902, [0.572, 0.443, 0.204]],
  [0.904, [0.565, 0.441, 0.211]],
  [0.906, [0.565, 0.441, 0.211]],
  [0.908, [0.558, 0.44, 0.219]],
  [0.91, [0.558, 0.44, 0.219]],
  [0.912, [0.552, 0.438, 0.227]],
  [0.914, [0.552, 0.438, 0.227]],
  [0.916, [0.545, 0.436, 0.235]],
  [0.918, [0.545, 0.436, 0.235]],
  [0.92, [0.538, 0.434, 0.243]],
  [0.922, [0.538, 0.434, 0.243]],
  [0.924, [0.531, 0.433, 0.251]],
  [0.926, [0.531, 0.433, 0.251]],
  [0.928, [0.524, 0.431, 0.259]],
  [0.93, [0.524, 0.431, 0.259]],
  [0.932, [0.517, 0.429, 0.266]],
  [0.933, [0.517, 0.429, 0.266]],
  [0.935, [0.51, 0.428, 0.274]],
  [0.937, [0.51, 0.428, 0.274]],
  [0.939, [0.503, 0.426, 0.282]],
  [0.941, [0.503, 0.426, 0.282]],
  [0.943, [0.496, 0.424, 0.29]],
  [0.945, [0.496, 0.424, 0.29]],
  [0.947, [0.49, 0.422, 0.298]],
  [0.949, [0.49, 0.422, 0.298]],
  [0.951, [0.483, 0.421, 0.306]],
  [0.953, [0.483, 0.421, 0.306]],
  [0.955, [0.476, 0.419, 0.314]],
  [0.957, [0.476, 0.419, 0.314]],
  [0.959, [0.469, 0.417, 0.321]],
  [0.961, [0.469, 0.417, 0.321]],
  [0.963, [0.462, 0.416, 0.329]],
  [0.965, [0.462, 0.416, 0.329]],
  [0.967, [0.455, 0.414, 0.337]],
  [0.969, [0.455, 0.414, 0.337]],
  [0.971, [0.448, 0.412, 0.345]],
  [0.973, [0.448, 0.412, 0.345]],
  [0.975, [0.441, 0.41, 0.353]],
  [0.977, [0.441, 0.41, 0.353]],
  [0.978, [0.434, 0.409, 0.361]],
  [0.98, [0.434, 0.409, 0.361]],
  [0.982, [0.428, 0.407, 0.369]],
  [0.984, [0.428, 0.407, 0.369]],
  [0.986, [0.421, 0.405, 0.376]],
  [0.988, [0.421, 0.405, 0.376]],
  [0.99, [0.414, 0.403, 0.384]],
  [0.992, [0.414, 0.403, 0.384]],
  [0.994, [0.407, 0.402, 0.392]],
  [0.996, [0.407, 0.402, 0.392]],
  [0.998, [0.4, 0.4, 0.4]],
  [1, [0.4, 0.4, 0.4]]
], Kf = [
  [0, [0.651, 0.808, 0.89]],
  [2e-3, [0.651, 0.808, 0.89]],
  [4e-3, [0.628, 0.793, 0.882]],
  [6e-3, [0.628, 0.793, 0.882]],
  [8e-3, [0.605, 0.779, 0.874]],
  [0.01, [0.605, 0.779, 0.874]],
  [0.012, [0.582, 0.764, 0.866]],
  [0.014, [0.582, 0.764, 0.866]],
  [0.016, [0.56, 0.75, 0.858]],
  [0.018, [0.56, 0.75, 0.858]],
  [0.02, [0.537, 0.735, 0.85]],
  [0.022, [0.537, 0.735, 0.85]],
  [0.023, [0.514, 0.721, 0.842]],
  [0.025, [0.514, 0.721, 0.842]],
  [0.027, [0.491, 0.706, 0.835]],
  [0.029, [0.491, 0.706, 0.835]],
  [0.031, [0.468, 0.691, 0.827]],
  [0.033, [0.468, 0.691, 0.827]],
  [0.035, [0.445, 0.677, 0.819]],
  [0.037, [0.445, 0.677, 0.819]],
  [0.039, [0.423, 0.662, 0.811]],
  [0.041, [0.423, 0.662, 0.811]],
  [0.043, [0.4, 0.648, 0.803]],
  [0.045, [0.4, 0.648, 0.803]],
  [0.047, [0.377, 0.633, 0.795]],
  [0.049, [0.377, 0.633, 0.795]],
  [0.051, [0.354, 0.619, 0.787]],
  [0.053, [0.354, 0.619, 0.787]],
  [0.055, [0.331, 0.604, 0.779]],
  [0.057, [0.331, 0.604, 0.779]],
  [0.059, [0.308, 0.59, 0.771]],
  [0.061, [0.308, 0.59, 0.771]],
  [0.063, [0.286, 0.575, 0.763]],
  [0.065, [0.286, 0.575, 0.763]],
  [0.067, [0.263, 0.561, 0.755]],
  [0.068, [0.263, 0.561, 0.755]],
  [0.07, [0.24, 0.546, 0.747]],
  [0.072, [0.24, 0.546, 0.747]],
  [0.074, [0.217, 0.531, 0.739]],
  [0.076, [0.217, 0.531, 0.739]],
  [0.078, [0.194, 0.517, 0.731]],
  [0.08, [0.194, 0.517, 0.731]],
  [0.082, [0.171, 0.502, 0.723]],
  [0.084, [0.171, 0.502, 0.723]],
  [0.086, [0.149, 0.488, 0.715]],
  [0.088, [0.149, 0.488, 0.715]],
  [0.09, [0.126, 0.473, 0.707]],
  [0.092, [0.126, 0.473, 0.707]],
  [0.094, [0.142, 0.485, 0.7]],
  [0.096, [0.142, 0.485, 0.7]],
  [0.098, [0.167, 0.502, 0.693]],
  [0.1, [0.167, 0.502, 0.693]],
  [0.102, [0.192, 0.52, 0.686]],
  [0.104, [0.192, 0.52, 0.686]],
  [0.106, [0.217, 0.537, 0.679]],
  [0.108, [0.217, 0.537, 0.679]],
  [0.11, [0.241, 0.555, 0.672]],
  [0.112, [0.241, 0.555, 0.672]],
  [0.114, [0.266, 0.572, 0.665]],
  [0.115, [0.266, 0.572, 0.665]],
  [0.117, [0.291, 0.589, 0.657]],
  [0.119, [0.291, 0.589, 0.657]],
  [0.121, [0.316, 0.607, 0.65]],
  [0.123, [0.316, 0.607, 0.65]],
  [0.125, [0.341, 0.624, 0.643]],
  [0.127, [0.341, 0.624, 0.643]],
  [0.129, [0.366, 0.642, 0.636]],
  [0.131, [0.366, 0.642, 0.636]],
  [0.133, [0.391, 0.659, 0.629]],
  [0.135, [0.391, 0.659, 0.629]],
  [0.137, [0.415, 0.677, 0.622]],
  [0.139, [0.415, 0.677, 0.622]],
  [0.141, [0.44, 0.694, 0.615]],
  [0.143, [0.44, 0.694, 0.615]],
  [0.145, [0.465, 0.711, 0.608]],
  [0.147, [0.465, 0.711, 0.608]],
  [0.149, [0.49, 0.729, 0.601]],
  [0.151, [0.49, 0.729, 0.601]],
  [0.153, [0.515, 0.746, 0.593]],
  [0.155, [0.515, 0.746, 0.593]],
  [0.157, [0.54, 0.764, 0.586]],
  [0.159, [0.54, 0.764, 0.586]],
  [0.16, [0.565, 0.781, 0.579]],
  [0.162, [0.565, 0.781, 0.579]],
  [0.164, [0.59, 0.798, 0.572]],
  [0.166, [0.59, 0.798, 0.572]],
  [0.168, [0.614, 0.816, 0.565]],
  [0.17, [0.614, 0.816, 0.565]],
  [0.172, [0.639, 0.833, 0.558]],
  [0.174, [0.639, 0.833, 0.558]],
  [0.176, [0.664, 0.851, 0.551]],
  [0.178, [0.664, 0.851, 0.551]],
  [0.18, [0.689, 0.868, 0.544]],
  [0.182, [0.689, 0.868, 0.544]],
  [0.184, [0.684, 0.868, 0.531]],
  [0.186, [0.684, 0.868, 0.531]],
  [0.188, [0.663, 0.857, 0.515]],
  [0.19, [0.663, 0.857, 0.515]],
  [0.192, [0.641, 0.846, 0.499]],
  [0.194, [0.641, 0.846, 0.499]],
  [0.196, [0.62, 0.836, 0.483]],
  [0.198, [0.62, 0.836, 0.483]],
  [0.2, [0.598, 0.825, 0.467]],
  [0.202, [0.598, 0.825, 0.467]],
  [0.204, [0.577, 0.814, 0.452]],
  [0.205, [0.577, 0.814, 0.452]],
  [0.207, [0.555, 0.804, 0.436]],
  [0.209, [0.555, 0.804, 0.436]],
  [0.211, [0.534, 0.793, 0.42]],
  [0.213, [0.534, 0.793, 0.42]],
  [0.215, [0.512, 0.782, 0.404]],
  [0.217, [0.512, 0.782, 0.404]],
  [0.219, [0.491, 0.772, 0.388]],
  [0.221, [0.491, 0.772, 0.388]],
  [0.223, [0.47, 0.761, 0.372]],
  [0.225, [0.47, 0.761, 0.372]],
  [0.227, [0.448, 0.75, 0.356]],
  [0.229, [0.448, 0.75, 0.356]],
  [0.231, [0.427, 0.74, 0.34]],
  [0.233, [0.427, 0.74, 0.34]],
  [0.235, [0.405, 0.729, 0.324]],
  [0.237, [0.405, 0.729, 0.324]],
  [0.239, [0.384, 0.719, 0.308]],
  [0.241, [0.384, 0.719, 0.308]],
  [0.243, [0.362, 0.708, 0.293]],
  [0.245, [0.362, 0.708, 0.293]],
  [0.247, [0.341, 0.697, 0.277]],
  [0.249, [0.341, 0.697, 0.277]],
  [0.25, [0.319, 0.687, 0.261]],
  [0.252, [0.319, 0.687, 0.261]],
  [0.254, [0.298, 0.676, 0.245]],
  [0.256, [0.298, 0.676, 0.245]],
  [0.258, [0.276, 0.665, 0.229]],
  [0.26, [0.276, 0.665, 0.229]],
  [0.262, [0.255, 0.655, 0.213]],
  [0.264, [0.255, 0.655, 0.213]],
  [0.266, [0.233, 0.644, 0.197]],
  [0.268, [0.233, 0.644, 0.197]],
  [0.27, [0.212, 0.633, 0.181]],
  [0.272, [0.212, 0.633, 0.181]],
  [0.274, [0.215, 0.627, 0.181]],
  [0.276, [0.215, 0.627, 0.181]],
  [0.278, [0.249, 0.626, 0.199]],
  [0.28, [0.249, 0.626, 0.199]],
  [0.282, [0.283, 0.625, 0.218]],
  [0.284, [0.283, 0.625, 0.218]],
  [0.286, [0.317, 0.624, 0.236]],
  [0.288, [0.317, 0.624, 0.236]],
  [0.29, [0.351, 0.623, 0.255]],
  [0.292, [0.351, 0.623, 0.255]],
  [0.294, [0.385, 0.622, 0.273]],
  [0.295, [0.385, 0.622, 0.273]],
  [0.297, [0.418, 0.621, 0.292]],
  [0.299, [0.418, 0.621, 0.292]],
  [0.301, [0.452, 0.62, 0.31]],
  [0.303, [0.452, 0.62, 0.31]],
  [0.305, [0.486, 0.619, 0.328]],
  [0.307, [0.486, 0.619, 0.328]],
  [0.309, [0.52, 0.618, 0.347]],
  [0.311, [0.52, 0.618, 0.347]],
  [0.313, [0.554, 0.617, 0.365]],
  [0.315, [0.554, 0.617, 0.365]],
  [0.317, [0.588, 0.616, 0.384]],
  [0.319, [0.588, 0.616, 0.384]],
  [0.321, [0.621, 0.615, 0.402]],
  [0.323, [0.621, 0.615, 0.402]],
  [0.325, [0.655, 0.614, 0.421]],
  [0.327, [0.655, 0.614, 0.421]],
  [0.329, [0.689, 0.613, 0.439]],
  [0.331, [0.689, 0.613, 0.439]],
  [0.333, [0.723, 0.612, 0.458]],
  [0.335, [0.723, 0.612, 0.458]],
  [0.337, [0.757, 0.611, 0.476]],
  [0.339, [0.757, 0.611, 0.476]],
  [0.341, [0.791, 0.61, 0.494]],
  [0.342, [0.791, 0.61, 0.494]],
  [0.344, [0.824, 0.609, 0.513]],
  [0.346, [0.824, 0.609, 0.513]],
  [0.348, [0.858, 0.608, 0.531]],
  [0.35, [0.858, 0.608, 0.531]],
  [0.352, [0.892, 0.607, 0.55]],
  [0.354, [0.892, 0.607, 0.55]],
  [0.356, [0.926, 0.606, 0.568]],
  [0.358, [0.926, 0.606, 0.568]],
  [0.36, [0.96, 0.605, 0.587]],
  [0.362, [0.96, 0.605, 0.587]],
  [0.364, [0.983, 0.598, 0.594]],
  [0.366, [0.983, 0.598, 0.594]],
  [0.368, [0.979, 0.576, 0.573]],
  [0.37, [0.979, 0.576, 0.573]],
  [0.372, [0.975, 0.555, 0.552]],
  [0.374, [0.975, 0.555, 0.552]],
  [0.376, [0.971, 0.533, 0.531]],
  [0.378, [0.971, 0.533, 0.531]],
  [0.38, [0.967, 0.511, 0.51]],
  [0.382, [0.967, 0.511, 0.51]],
  [0.384, [0.963, 0.49, 0.489]],
  [0.386, [0.963, 0.49, 0.489]],
  [0.387, [0.959, 0.468, 0.467]],
  [0.389, [0.959, 0.468, 0.467]],
  [0.391, [0.955, 0.446, 0.446]],
  [0.393, [0.955, 0.446, 0.446]],
  [0.395, [0.951, 0.425, 0.425]],
  [0.397, [0.951, 0.425, 0.425]],
  [0.399, [0.947, 0.403, 0.404]],
  [0.401, [0.947, 0.403, 0.404]],
  [0.403, [0.943, 0.381, 0.383]],
  [0.405, [0.943, 0.381, 0.383]],
  [0.407, [0.939, 0.36, 0.362]],
  [0.409, [0.939, 0.36, 0.362]],
  [0.411, [0.934, 0.338, 0.34]],
  [0.413, [0.934, 0.338, 0.34]],
  [0.415, [0.93, 0.317, 0.319]],
  [0.417, [0.93, 0.317, 0.319]],
  [0.419, [0.926, 0.295, 0.298]],
  [0.421, [0.926, 0.295, 0.298]],
  [0.423, [0.922, 0.273, 0.277]],
  [0.425, [0.922, 0.273, 0.277]],
  [0.427, [0.918, 0.252, 0.256]],
  [0.429, [0.918, 0.252, 0.256]],
  [0.431, [0.914, 0.23, 0.235]],
  [0.432, [0.914, 0.23, 0.235]],
  [0.434, [0.91, 0.208, 0.214]],
  [0.436, [0.91, 0.208, 0.214]],
  [0.438, [0.906, 0.187, 0.192]],
  [0.44, [0.906, 0.187, 0.192]],
  [0.442, [0.902, 0.165, 0.171]],
  [0.444, [0.902, 0.165, 0.171]],
  [0.446, [0.898, 0.143, 0.15]],
  [0.448, [0.898, 0.143, 0.15]],
  [0.45, [0.894, 0.122, 0.129]],
  [0.452, [0.894, 0.122, 0.129]],
  [0.454, [0.891, 0.104, 0.111]],
  [0.456, [0.891, 0.104, 0.111]],
  [0.458, [0.895, 0.132, 0.125]],
  [0.46, [0.895, 0.132, 0.125]],
  [0.462, [0.899, 0.16, 0.139]],
  [0.464, [0.899, 0.16, 0.139]],
  [0.466, [0.904, 0.188, 0.153]],
  [0.468, [0.904, 0.188, 0.153]],
  [0.47, [0.908, 0.216, 0.167]],
  [0.472, [0.908, 0.216, 0.167]],
  [0.474, [0.913, 0.244, 0.181]],
  [0.476, [0.913, 0.244, 0.181]],
  [0.477, [0.917, 0.272, 0.195]],
  [0.479, [0.917, 0.272, 0.195]],
  [0.481, [0.921, 0.3, 0.209]],
  [0.483, [0.921, 0.3, 0.209]],
  [0.485, [0.926, 0.328, 0.223]],
  [0.487, [0.926, 0.328, 0.223]],
  [0.489, [0.93, 0.356, 0.237]],
  [0.491, [0.93, 0.356, 0.237]],
  [0.493, [0.935, 0.384, 0.251]],
  [0.495, [0.935, 0.384, 0.251]],
  [0.497, [0.939, 0.412, 0.266]],
  [0.499, [0.939, 0.412, 0.266]],
  [0.501, [0.943, 0.439, 0.28]],
  [0.503, [0.943, 0.439, 0.28]],
  [0.505, [0.948, 0.467, 0.294]],
  [0.507, [0.948, 0.467, 0.294]],
  [0.509, [0.952, 0.495, 0.308]],
  [0.511, [0.952, 0.495, 0.308]],
  [0.513, [0.957, 0.523, 0.322]],
  [0.515, [0.957, 0.523, 0.322]],
  [0.517, [0.961, 0.551, 0.336]],
  [0.519, [0.961, 0.551, 0.336]],
  [0.521, [0.965, 0.579, 0.35]],
  [0.523, [0.965, 0.579, 0.35]],
  [0.524, [0.97, 0.607, 0.364]],
  [0.526, [0.97, 0.607, 0.364]],
  [0.528, [0.974, 0.635, 0.378]],
  [0.53, [0.974, 0.635, 0.378]],
  [0.532, [0.979, 0.663, 0.392]],
  [0.534, [0.979, 0.663, 0.392]],
  [0.536, [0.983, 0.691, 0.406]],
  [0.538, [0.983, 0.691, 0.406]],
  [0.54, [0.987, 0.719, 0.42]],
  [0.542, [0.987, 0.719, 0.42]],
  [0.544, [0.992, 0.746, 0.434]],
  [0.546, [0.992, 0.746, 0.434]],
  [0.548, [0.992, 0.739, 0.418]],
  [0.55, [0.992, 0.739, 0.418]],
  [0.552, [0.993, 0.728, 0.399]],
  [0.554, [0.993, 0.728, 0.399]],
  [0.556, [0.993, 0.718, 0.381]],
  [0.558, [0.993, 0.718, 0.381]],
  [0.56, [0.993, 0.707, 0.362]],
  [0.562, [0.993, 0.707, 0.362]],
  [0.564, [0.994, 0.696, 0.343]],
  [0.566, [0.994, 0.696, 0.343]],
  [0.568, [0.994, 0.685, 0.324]],
  [0.569, [0.994, 0.685, 0.324]],
  [0.571, [0.994, 0.674, 0.306]],
  [0.573, [0.994, 0.674, 0.306]],
  [0.575, [0.995, 0.663, 0.287]],
  [0.577, [0.995, 0.663, 0.287]],
  [0.579, [0.995, 0.653, 0.268]],
  [0.581, [0.995, 0.653, 0.268]],
  [0.583, [0.996, 0.642, 0.249]],
  [0.585, [0.996, 0.642, 0.249]],
  [0.587, [0.996, 0.631, 0.23]],
  [0.589, [0.996, 0.631, 0.23]],
  [0.591, [0.996, 0.62, 0.212]],
  [0.593, [0.996, 0.62, 0.212]],
  [0.595, [0.997, 0.609, 0.193]],
  [0.597, [0.997, 0.609, 0.193]],
  [0.599, [0.997, 0.598, 0.174]],
  [0.601, [0.997, 0.598, 0.174]],
  [0.603, [0.997, 0.588, 0.155]],
  [0.605, [0.997, 0.588, 0.155]],
  [0.607, [0.998, 0.577, 0.137]],
  [0.609, [0.998, 0.577, 0.137]],
  [0.611, [0.998, 0.566, 0.118]],
  [0.613, [0.998, 0.566, 0.118]],
  [0.614, [0.998, 0.555, 0.099]],
  [0.616, [0.998, 0.555, 0.099]],
  [0.618, [0.999, 0.544, 0.08]],
  [0.62, [0.999, 0.544, 0.08]],
  [0.622, [0.999, 0.533, 0.061]],
  [0.624, [0.999, 0.533, 0.061]],
  [0.626, [0.999, 0.523, 0.043]],
  [0.628, [0.999, 0.523, 0.043]],
  [0.63, [1, 0.512, 0.024]],
  [0.632, [1, 0.512, 0.024]],
  [0.634, [1, 0.501, 5e-3]],
  [0.636, [1, 0.501, 5e-3]],
  [0.638, [0.993, 0.504, 0.026]],
  [0.64, [0.993, 0.504, 0.026]],
  [0.642, [0.985, 0.513, 0.063]],
  [0.644, [0.985, 0.513, 0.063]],
  [0.646, [0.976, 0.522, 0.099]],
  [0.648, [0.976, 0.522, 0.099]],
  [0.65, [0.967, 0.53, 0.135]],
  [0.652, [0.967, 0.53, 0.135]],
  [0.654, [0.958, 0.539, 0.171]],
  [0.656, [0.958, 0.539, 0.171]],
  [0.658, [0.949, 0.547, 0.207]],
  [0.659, [0.949, 0.547, 0.207]],
  [0.661, [0.94, 0.556, 0.244]],
  [0.663, [0.94, 0.556, 0.244]],
  [0.665, [0.931, 0.565, 0.28]],
  [0.667, [0.931, 0.565, 0.28]],
  [0.669, [0.922, 0.573, 0.316]],
  [0.671, [0.922, 0.573, 0.316]],
  [0.673, [0.913, 0.582, 0.352]],
  [0.675, [0.913, 0.582, 0.352]],
  [0.677, [0.904, 0.591, 0.388]],
  [0.679, [0.904, 0.591, 0.388]],
  [0.681, [0.895, 0.599, 0.425]],
  [0.683, [0.895, 0.599, 0.425]],
  [0.685, [0.886, 0.608, 0.461]],
  [0.687, [0.886, 0.608, 0.461]],
  [0.689, [0.877, 0.616, 0.497]],
  [0.691, [0.877, 0.616, 0.497]],
  [0.693, [0.868, 0.625, 0.533]],
  [0.695, [0.868, 0.625, 0.533]],
  [0.697, [0.859, 0.634, 0.569]],
  [0.699, [0.859, 0.634, 0.569]],
  [0.701, [0.85, 0.642, 0.606]],
  [0.703, [0.85, 0.642, 0.606]],
  [0.705, [0.841, 0.651, 0.642]],
  [0.706, [0.841, 0.651, 0.642]],
  [0.708, [0.832, 0.66, 0.678]],
  [0.71, [0.832, 0.66, 0.678]],
  [0.712, [0.823, 0.668, 0.714]],
  [0.714, [0.823, 0.668, 0.714]],
  [0.716, [0.814, 0.677, 0.75]],
  [0.718, [0.814, 0.677, 0.75]],
  [0.72, [0.805, 0.685, 0.787]],
  [0.722, [0.805, 0.685, 0.787]],
  [0.724, [0.796, 0.694, 0.823]],
  [0.726, [0.796, 0.694, 0.823]],
  [0.728, [0.783, 0.687, 0.834]],
  [0.73, [0.783, 0.687, 0.834]],
  [0.732, [0.767, 0.667, 0.824]],
  [0.734, [0.767, 0.667, 0.824]],
  [0.736, [0.751, 0.648, 0.813]],
  [0.738, [0.751, 0.648, 0.813]],
  [0.74, [0.735, 0.628, 0.803]],
  [0.742, [0.735, 0.628, 0.803]],
  [0.744, [0.718, 0.608, 0.793]],
  [0.746, [0.718, 0.608, 0.793]],
  [0.748, [0.702, 0.588, 0.783]],
  [0.75, [0.702, 0.588, 0.783]],
  [0.751, [0.686, 0.568, 0.773]],
  [0.753, [0.686, 0.568, 0.773]],
  [0.755, [0.67, 0.549, 0.763]],
  [0.757, [0.67, 0.549, 0.763]],
  [0.759, [0.653, 0.529, 0.752]],
  [0.761, [0.653, 0.529, 0.752]],
  [0.763, [0.637, 0.509, 0.742]],
  [0.765, [0.637, 0.509, 0.742]],
  [0.767, [0.621, 0.489, 0.732]],
  [0.769, [0.621, 0.489, 0.732]],
  [0.771, [0.605, 0.47, 0.722]],
  [0.773, [0.605, 0.47, 0.722]],
  [0.775, [0.588, 0.45, 0.712]],
  [0.777, [0.588, 0.45, 0.712]],
  [0.779, [0.572, 0.43, 0.702]],
  [0.781, [0.572, 0.43, 0.702]],
  [0.783, [0.556, 0.41, 0.692]],
  [0.785, [0.556, 0.41, 0.692]],
  [0.787, [0.54, 0.39, 0.681]],
  [0.789, [0.54, 0.39, 0.681]],
  [0.791, [0.523, 0.371, 0.671]],
  [0.793, [0.523, 0.371, 0.671]],
  [0.795, [0.507, 0.351, 0.661]],
  [0.796, [0.507, 0.351, 0.661]],
  [0.798, [0.491, 0.331, 0.651]],
  [0.8, [0.491, 0.331, 0.651]],
  [0.802, [0.475, 0.311, 0.641]],
  [0.804, [0.475, 0.311, 0.641]],
  [0.806, [0.459, 0.291, 0.631]],
  [0.808, [0.459, 0.291, 0.631]],
  [0.81, [0.442, 0.272, 0.621]],
  [0.812, [0.442, 0.272, 0.621]],
  [0.814, [0.426, 0.252, 0.61]],
  [0.816, [0.426, 0.252, 0.61]],
  [0.818, [0.425, 0.251, 0.604]],
  [0.82, [0.425, 0.251, 0.604]],
  [0.822, [0.45, 0.284, 0.604]],
  [0.824, [0.45, 0.284, 0.604]],
  [0.826, [0.475, 0.317, 0.604]],
  [0.828, [0.475, 0.317, 0.604]],
  [0.83, [0.5, 0.35, 0.603]],
  [0.832, [0.5, 0.35, 0.603]],
  [0.834, [0.526, 0.382, 0.603]],
  [0.836, [0.526, 0.382, 0.603]],
  [0.838, [0.551, 0.415, 0.603]],
  [0.84, [0.551, 0.415, 0.603]],
  [0.841, [0.576, 0.448, 0.603]],
  [0.843, [0.576, 0.448, 0.603]],
  [0.845, [0.601, 0.481, 0.603]],
  [0.847, [0.601, 0.481, 0.603]],
  [0.849, [0.626, 0.514, 0.603]],
  [0.851, [0.626, 0.514, 0.603]],
  [0.853, [0.652, 0.547, 0.602]],
  [0.855, [0.652, 0.547, 0.602]],
  [0.857, [0.677, 0.579, 0.602]],
  [0.859, [0.677, 0.579, 0.602]],
  [0.861, [0.702, 0.612, 0.602]],
  [0.863, [0.702, 0.612, 0.602]],
  [0.865, [0.727, 0.645, 0.602]],
  [0.867, [0.727, 0.645, 0.602]],
  [0.869, [0.753, 0.678, 0.602]],
  [0.871, [0.753, 0.678, 0.602]],
  [0.873, [0.778, 0.711, 0.601]],
  [0.875, [0.778, 0.711, 0.601]],
  [0.877, [0.803, 0.743, 0.601]],
  [0.879, [0.803, 0.743, 0.601]],
  [0.881, [0.828, 0.776, 0.601]],
  [0.883, [0.828, 0.776, 0.601]],
  [0.885, [0.853, 0.809, 0.601]],
  [0.886, [0.853, 0.809, 0.601]],
  [0.888, [0.879, 0.842, 0.601]],
  [0.89, [0.879, 0.842, 0.601]],
  [0.892, [0.904, 0.875, 0.601]],
  [0.894, [0.904, 0.875, 0.601]],
  [0.896, [0.929, 0.908, 0.6]],
  [0.898, [0.929, 0.908, 0.6]],
  [0.9, [0.954, 0.94, 0.6]],
  [0.902, [0.954, 0.94, 0.6]],
  [0.904, [0.979, 0.973, 0.6]],
  [0.906, [0.979, 0.973, 0.6]],
  [0.908, [0.998, 0.995, 0.597]],
  [0.91, [0.998, 0.995, 0.597]],
  [0.912, [0.984, 0.967, 0.577]],
  [0.914, [0.984, 0.967, 0.577]],
  [0.916, [0.971, 0.939, 0.558]],
  [0.918, [0.971, 0.939, 0.558]],
  [0.92, [0.958, 0.911, 0.539]],
  [0.922, [0.958, 0.911, 0.539]],
  [0.924, [0.945, 0.883, 0.52]],
  [0.926, [0.945, 0.883, 0.52]],
  [0.928, [0.932, 0.854, 0.501]],
  [0.93, [0.932, 0.854, 0.501]],
  [0.932, [0.918, 0.826, 0.482]],
  [0.933, [0.918, 0.826, 0.482]],
  [0.935, [0.905, 0.798, 0.463]],
  [0.937, [0.905, 0.798, 0.463]],
  [0.939, [0.892, 0.77, 0.444]],
  [0.941, [0.892, 0.77, 0.444]],
  [0.943, [0.879, 0.742, 0.424]],
  [0.945, [0.879, 0.742, 0.424]],
  [0.947, [0.866, 0.714, 0.405]],
  [0.949, [0.866, 0.714, 0.405]],
  [0.951, [0.852, 0.686, 0.386]],
  [0.953, [0.852, 0.686, 0.386]],
  [0.955, [0.839, 0.658, 0.367]],
  [0.957, [0.839, 0.658, 0.367]],
  [0.959, [0.826, 0.63, 0.348]],
  [0.961, [0.826, 0.63, 0.348]],
  [0.963, [0.813, 0.602, 0.329]],
  [0.965, [0.813, 0.602, 0.329]],
  [0.967, [0.8, 0.574, 0.31]],
  [0.969, [0.8, 0.574, 0.31]],
  [0.971, [0.786, 0.546, 0.291]],
  [0.973, [0.786, 0.546, 0.291]],
  [0.975, [0.773, 0.518, 0.272]],
  [0.977, [0.773, 0.518, 0.272]],
  [0.978, [0.76, 0.489, 0.252]],
  [0.98, [0.76, 0.489, 0.252]],
  [0.982, [0.747, 0.461, 0.233]],
  [0.984, [0.747, 0.461, 0.233]],
  [0.986, [0.734, 0.433, 0.214]],
  [0.988, [0.734, 0.433, 0.214]],
  [0.99, [0.721, 0.405, 0.195]],
  [0.992, [0.721, 0.405, 0.195]],
  [0.994, [0.707, 0.377, 0.176]],
  [0.996, [0.707, 0.377, 0.176]],
  [0.998, [0.694, 0.349, 0.157]],
  [1, [0.694, 0.349, 0.157]]
], Qf = [
  [0, [0.984, 0.706, 0.682]],
  [2e-3, [0.984, 0.706, 0.682]],
  [4e-3, [0.975, 0.709, 0.689]],
  [6e-3, [0.975, 0.709, 0.689]],
  [8e-3, [0.967, 0.712, 0.695]],
  [0.01, [0.967, 0.712, 0.695]],
  [0.012, [0.958, 0.715, 0.702]],
  [0.014, [0.958, 0.715, 0.702]],
  [0.016, [0.949, 0.718, 0.708]],
  [0.018, [0.949, 0.718, 0.708]],
  [0.02, [0.94, 0.721, 0.715]],
  [0.022, [0.94, 0.721, 0.715]],
  [0.023, [0.931, 0.724, 0.721]],
  [0.025, [0.931, 0.724, 0.721]],
  [0.027, [0.922, 0.727, 0.728]],
  [0.029, [0.922, 0.727, 0.728]],
  [0.031, [0.913, 0.73, 0.735]],
  [0.033, [0.913, 0.73, 0.735]],
  [0.035, [0.905, 0.734, 0.741]],
  [0.037, [0.905, 0.734, 0.741]],
  [0.039, [0.896, 0.737, 0.748]],
  [0.041, [0.896, 0.737, 0.748]],
  [0.043, [0.887, 0.74, 0.754]],
  [0.045, [0.887, 0.74, 0.754]],
  [0.047, [0.878, 0.743, 0.761]],
  [0.049, [0.878, 0.743, 0.761]],
  [0.051, [0.869, 0.746, 0.767]],
  [0.053, [0.869, 0.746, 0.767]],
  [0.055, [0.86, 0.749, 0.774]],
  [0.057, [0.86, 0.749, 0.774]],
  [0.059, [0.851, 0.752, 0.78]],
  [0.061, [0.851, 0.752, 0.78]],
  [0.063, [0.843, 0.755, 0.787]],
  [0.065, [0.843, 0.755, 0.787]],
  [0.067, [0.834, 0.758, 0.793]],
  [0.068, [0.834, 0.758, 0.793]],
  [0.07, [0.825, 0.761, 0.8]],
  [0.072, [0.825, 0.761, 0.8]],
  [0.074, [0.816, 0.764, 0.806]],
  [0.076, [0.816, 0.764, 0.806]],
  [0.078, [0.807, 0.767, 0.813]],
  [0.08, [0.807, 0.767, 0.813]],
  [0.082, [0.798, 0.77, 0.819]],
  [0.084, [0.798, 0.77, 0.819]],
  [0.086, [0.789, 0.774, 0.826]],
  [0.088, [0.789, 0.774, 0.826]],
  [0.09, [0.781, 0.777, 0.832]],
  [0.092, [0.781, 0.777, 0.832]],
  [0.094, [0.772, 0.78, 0.839]],
  [0.096, [0.772, 0.78, 0.839]],
  [0.098, [0.763, 0.783, 0.845]],
  [0.1, [0.763, 0.783, 0.845]],
  [0.102, [0.754, 0.786, 0.852]],
  [0.104, [0.754, 0.786, 0.852]],
  [0.106, [0.745, 0.789, 0.858]],
  [0.108, [0.745, 0.789, 0.858]],
  [0.11, [0.736, 0.792, 0.865]],
  [0.112, [0.736, 0.792, 0.865]],
  [0.114, [0.727, 0.795, 0.871]],
  [0.115, [0.727, 0.795, 0.871]],
  [0.117, [0.719, 0.798, 0.878]],
  [0.119, [0.719, 0.798, 0.878]],
  [0.121, [0.71, 0.801, 0.884]],
  [0.123, [0.71, 0.801, 0.884]],
  [0.125, [0.702, 0.804, 0.89]],
  [0.127, [0.702, 0.804, 0.89]],
  [0.129, [0.705, 0.808, 0.886]],
  [0.131, [0.705, 0.808, 0.886]],
  [0.133, [0.708, 0.812, 0.882]],
  [0.135, [0.708, 0.812, 0.882]],
  [0.137, [0.712, 0.815, 0.879]],
  [0.139, [0.712, 0.815, 0.879]],
  [0.141, [0.715, 0.819, 0.875]],
  [0.143, [0.715, 0.819, 0.875]],
  [0.145, [0.718, 0.823, 0.871]],
  [0.147, [0.718, 0.823, 0.871]],
  [0.149, [0.721, 0.827, 0.868]],
  [0.151, [0.721, 0.827, 0.868]],
  [0.153, [0.724, 0.83, 0.864]],
  [0.155, [0.724, 0.83, 0.864]],
  [0.157, [0.727, 0.834, 0.86]],
  [0.159, [0.727, 0.834, 0.86]],
  [0.16, [0.73, 0.838, 0.857]],
  [0.162, [0.73, 0.838, 0.857]],
  [0.164, [0.733, 0.841, 0.853]],
  [0.166, [0.733, 0.841, 0.853]],
  [0.168, [0.736, 0.845, 0.849]],
  [0.17, [0.736, 0.845, 0.849]],
  [0.172, [0.739, 0.849, 0.845]],
  [0.174, [0.739, 0.849, 0.845]],
  [0.176, [0.742, 0.852, 0.842]],
  [0.178, [0.742, 0.852, 0.842]],
  [0.18, [0.745, 0.856, 0.838]],
  [0.182, [0.745, 0.856, 0.838]],
  [0.184, [0.748, 0.86, 0.834]],
  [0.186, [0.748, 0.86, 0.834]],
  [0.188, [0.752, 0.863, 0.831]],
  [0.19, [0.752, 0.863, 0.831]],
  [0.192, [0.755, 0.867, 0.827]],
  [0.194, [0.755, 0.867, 0.827]],
  [0.196, [0.758, 0.871, 0.823]],
  [0.198, [0.758, 0.871, 0.823]],
  [0.2, [0.761, 0.875, 0.82]],
  [0.202, [0.761, 0.875, 0.82]],
  [0.204, [0.764, 0.878, 0.816]],
  [0.205, [0.764, 0.878, 0.816]],
  [0.207, [0.767, 0.882, 0.812]],
  [0.209, [0.767, 0.882, 0.812]],
  [0.211, [0.77, 0.886, 0.809]],
  [0.213, [0.77, 0.886, 0.809]],
  [0.215, [0.773, 0.889, 0.805]],
  [0.217, [0.773, 0.889, 0.805]],
  [0.219, [0.776, 0.893, 0.801]],
  [0.221, [0.776, 0.893, 0.801]],
  [0.223, [0.779, 0.897, 0.797]],
  [0.225, [0.779, 0.897, 0.797]],
  [0.227, [0.782, 0.9, 0.794]],
  [0.229, [0.782, 0.9, 0.794]],
  [0.231, [0.785, 0.904, 0.79]],
  [0.233, [0.785, 0.904, 0.79]],
  [0.235, [0.788, 0.908, 0.786]],
  [0.237, [0.788, 0.908, 0.786]],
  [0.239, [0.792, 0.911, 0.783]],
  [0.241, [0.792, 0.911, 0.783]],
  [0.243, [0.795, 0.915, 0.779]],
  [0.245, [0.795, 0.915, 0.779]],
  [0.247, [0.798, 0.919, 0.775]],
  [0.249, [0.798, 0.919, 0.775]],
  [0.25, [0.801, 0.921, 0.774]],
  [0.252, [0.801, 0.921, 0.774]],
  [0.254, [0.803, 0.917, 0.777]],
  [0.256, [0.803, 0.917, 0.777]],
  [0.258, [0.805, 0.913, 0.781]],
  [0.26, [0.805, 0.913, 0.781]],
  [0.262, [0.807, 0.909, 0.785]],
  [0.264, [0.807, 0.909, 0.785]],
  [0.266, [0.809, 0.905, 0.789]],
  [0.268, [0.809, 0.905, 0.789]],
  [0.27, [0.812, 0.901, 0.793]],
  [0.272, [0.812, 0.901, 0.793]],
  [0.274, [0.814, 0.897, 0.796]],
  [0.276, [0.814, 0.897, 0.796]],
  [0.278, [0.816, 0.893, 0.8]],
  [0.28, [0.816, 0.893, 0.8]],
  [0.282, [0.818, 0.889, 0.804]],
  [0.284, [0.818, 0.889, 0.804]],
  [0.286, [0.82, 0.885, 0.808]],
  [0.288, [0.82, 0.885, 0.808]],
  [0.29, [0.823, 0.881, 0.812]],
  [0.292, [0.823, 0.881, 0.812]],
  [0.294, [0.825, 0.877, 0.815]],
  [0.295, [0.825, 0.877, 0.815]],
  [0.297, [0.827, 0.873, 0.819]],
  [0.299, [0.827, 0.873, 0.819]],
  [0.301, [0.829, 0.869, 0.823]],
  [0.303, [0.829, 0.869, 0.823]],
  [0.305, [0.832, 0.865, 0.827]],
  [0.307, [0.832, 0.865, 0.827]],
  [0.309, [0.834, 0.862, 0.831]],
  [0.311, [0.834, 0.862, 0.831]],
  [0.313, [0.836, 0.858, 0.835]],
  [0.315, [0.836, 0.858, 0.835]],
  [0.317, [0.838, 0.854, 0.838]],
  [0.319, [0.838, 0.854, 0.838]],
  [0.321, [0.84, 0.85, 0.842]],
  [0.323, [0.84, 0.85, 0.842]],
  [0.325, [0.843, 0.846, 0.846]],
  [0.327, [0.843, 0.846, 0.846]],
  [0.329, [0.845, 0.842, 0.85]],
  [0.331, [0.845, 0.842, 0.85]],
  [0.333, [0.847, 0.838, 0.854]],
  [0.335, [0.847, 0.838, 0.854]],
  [0.337, [0.849, 0.834, 0.857]],
  [0.339, [0.849, 0.834, 0.857]],
  [0.341, [0.851, 0.83, 0.861]],
  [0.342, [0.851, 0.83, 0.861]],
  [0.344, [0.854, 0.826, 0.865]],
  [0.346, [0.854, 0.826, 0.865]],
  [0.348, [0.856, 0.822, 0.869]],
  [0.35, [0.856, 0.822, 0.869]],
  [0.352, [0.858, 0.818, 0.873]],
  [0.354, [0.858, 0.818, 0.873]],
  [0.356, [0.86, 0.814, 0.876]],
  [0.358, [0.86, 0.814, 0.876]],
  [0.36, [0.863, 0.81, 0.88]],
  [0.362, [0.863, 0.81, 0.88]],
  [0.364, [0.865, 0.806, 0.884]],
  [0.366, [0.865, 0.806, 0.884]],
  [0.368, [0.867, 0.802, 0.888]],
  [0.37, [0.867, 0.802, 0.888]],
  [0.372, [0.869, 0.799, 0.892]],
  [0.374, [0.869, 0.799, 0.892]],
  [0.376, [0.872, 0.797, 0.891]],
  [0.378, [0.872, 0.797, 0.891]],
  [0.38, [0.876, 0.798, 0.884]],
  [0.382, [0.876, 0.798, 0.884]],
  [0.384, [0.88, 0.8, 0.876]],
  [0.386, [0.88, 0.8, 0.876]],
  [0.387, [0.884, 0.802, 0.868]],
  [0.389, [0.884, 0.802, 0.868]],
  [0.391, [0.888, 0.804, 0.861]],
  [0.393, [0.888, 0.804, 0.861]],
  [0.395, [0.892, 0.805, 0.853]],
  [0.397, [0.892, 0.805, 0.853]],
  [0.399, [0.896, 0.807, 0.845]],
  [0.401, [0.896, 0.807, 0.845]],
  [0.403, [0.9, 0.809, 0.838]],
  [0.405, [0.9, 0.809, 0.838]],
  [0.407, [0.904, 0.811, 0.83]],
  [0.409, [0.904, 0.811, 0.83]],
  [0.411, [0.907, 0.812, 0.823]],
  [0.413, [0.907, 0.812, 0.823]],
  [0.415, [0.911, 0.814, 0.815]],
  [0.417, [0.911, 0.814, 0.815]],
  [0.419, [0.915, 0.816, 0.807]],
  [0.421, [0.915, 0.816, 0.807]],
  [0.423, [0.919, 0.817, 0.8]],
  [0.425, [0.919, 0.817, 0.8]],
  [0.427, [0.923, 0.819, 0.792]],
  [0.429, [0.923, 0.819, 0.792]],
  [0.431, [0.927, 0.821, 0.784]],
  [0.432, [0.927, 0.821, 0.784]],
  [0.434, [0.931, 0.823, 0.777]],
  [0.436, [0.931, 0.823, 0.777]],
  [0.438, [0.935, 0.824, 0.769]],
  [0.44, [0.935, 0.824, 0.769]],
  [0.442, [0.939, 0.826, 0.762]],
  [0.444, [0.939, 0.826, 0.762]],
  [0.446, [0.943, 0.828, 0.754]],
  [0.448, [0.943, 0.828, 0.754]],
  [0.45, [0.947, 0.829, 0.746]],
  [0.452, [0.947, 0.829, 0.746]],
  [0.454, [0.951, 0.831, 0.739]],
  [0.456, [0.951, 0.831, 0.739]],
  [0.458, [0.955, 0.833, 0.731]],
  [0.46, [0.955, 0.833, 0.731]],
  [0.462, [0.959, 0.835, 0.723]],
  [0.464, [0.959, 0.835, 0.723]],
  [0.466, [0.963, 0.836, 0.716]],
  [0.468, [0.963, 0.836, 0.716]],
  [0.47, [0.967, 0.838, 0.708]],
  [0.472, [0.967, 0.838, 0.708]],
  [0.474, [0.97, 0.84, 0.701]],
  [0.476, [0.97, 0.84, 0.701]],
  [0.477, [0.974, 0.842, 0.693]],
  [0.479, [0.974, 0.842, 0.693]],
  [0.481, [0.978, 0.843, 0.685]],
  [0.483, [0.978, 0.843, 0.685]],
  [0.485, [0.982, 0.845, 0.678]],
  [0.487, [0.982, 0.845, 0.678]],
  [0.489, [0.986, 0.847, 0.67]],
  [0.491, [0.986, 0.847, 0.67]],
  [0.493, [0.99, 0.848, 0.662]],
  [0.495, [0.99, 0.848, 0.662]],
  [0.497, [0.994, 0.85, 0.655]],
  [0.499, [0.994, 0.85, 0.655]],
  [0.501, [0.996, 0.853, 0.653]],
  [0.503, [0.996, 0.853, 0.653]],
  [0.505, [0.996, 0.858, 0.658]],
  [0.507, [0.996, 0.858, 0.658]],
  [0.509, [0.996, 0.863, 0.663]],
  [0.511, [0.996, 0.863, 0.663]],
  [0.513, [0.997, 0.867, 0.667]],
  [0.515, [0.997, 0.867, 0.667]],
  [0.517, [0.997, 0.872, 0.672]],
  [0.519, [0.997, 0.872, 0.672]],
  [0.521, [0.997, 0.877, 0.677]],
  [0.523, [0.997, 0.877, 0.677]],
  [0.524, [0.997, 0.881, 0.681]],
  [0.526, [0.997, 0.881, 0.681]],
  [0.528, [0.997, 0.886, 0.686]],
  [0.53, [0.997, 0.886, 0.686]],
  [0.532, [0.997, 0.891, 0.691]],
  [0.534, [0.997, 0.891, 0.691]],
  [0.536, [0.997, 0.895, 0.695]],
  [0.538, [0.997, 0.895, 0.695]],
  [0.54, [0.997, 0.9, 0.7]],
  [0.542, [0.997, 0.9, 0.7]],
  [0.544, [0.997, 0.905, 0.705]],
  [0.546, [0.997, 0.905, 0.705]],
  [0.548, [0.998, 0.909, 0.709]],
  [0.55, [0.998, 0.909, 0.709]],
  [0.552, [0.998, 0.914, 0.714]],
  [0.554, [0.998, 0.914, 0.714]],
  [0.556, [0.998, 0.919, 0.719]],
  [0.558, [0.998, 0.919, 0.719]],
  [0.56, [0.998, 0.923, 0.723]],
  [0.562, [0.998, 0.923, 0.723]],
  [0.564, [0.998, 0.928, 0.728]],
  [0.566, [0.998, 0.928, 0.728]],
  [0.568, [0.998, 0.933, 0.733]],
  [0.569, [0.998, 0.933, 0.733]],
  [0.571, [0.998, 0.937, 0.737]],
  [0.573, [0.998, 0.937, 0.737]],
  [0.575, [0.998, 0.942, 0.742]],
  [0.577, [0.998, 0.942, 0.742]],
  [0.579, [0.999, 0.947, 0.747]],
  [0.581, [0.999, 0.947, 0.747]],
  [0.583, [0.999, 0.951, 0.751]],
  [0.585, [0.999, 0.951, 0.751]],
  [0.587, [0.999, 0.956, 0.756]],
  [0.589, [0.999, 0.956, 0.756]],
  [0.591, [0.999, 0.961, 0.761]],
  [0.593, [0.999, 0.961, 0.761]],
  [0.595, [0.999, 0.966, 0.766]],
  [0.597, [0.999, 0.966, 0.766]],
  [0.599, [0.999, 0.97, 0.77]],
  [0.601, [0.999, 0.97, 0.77]],
  [0.603, [0.999, 0.975, 0.775]],
  [0.605, [0.999, 0.975, 0.775]],
  [0.607, [0.999, 0.98, 0.78]],
  [0.609, [0.999, 0.98, 0.78]],
  [0.611, [1, 0.984, 0.784]],
  [0.613, [1, 0.984, 0.784]],
  [0.614, [1, 0.989, 0.789]],
  [0.616, [1, 0.989, 0.789]],
  [0.618, [1, 0.994, 0.794]],
  [0.62, [1, 0.994, 0.794]],
  [0.622, [1, 0.998, 0.798]],
  [0.624, [1, 0.998, 0.798]],
  [0.626, [0.998, 0.997, 0.799]],
  [0.628, [0.998, 0.997, 0.799]],
  [0.63, [0.995, 0.992, 0.797]],
  [0.632, [0.995, 0.992, 0.797]],
  [0.634, [0.992, 0.987, 0.795]],
  [0.636, [0.992, 0.987, 0.795]],
  [0.638, [0.988, 0.983, 0.793]],
  [0.64, [0.988, 0.983, 0.793]],
  [0.642, [0.985, 0.978, 0.791]],
  [0.644, [0.985, 0.978, 0.791]],
  [0.646, [0.982, 0.973, 0.79]],
  [0.648, [0.982, 0.973, 0.79]],
  [0.65, [0.979, 0.968, 0.788]],
  [0.652, [0.979, 0.968, 0.788]],
  [0.654, [0.976, 0.963, 0.786]],
  [0.656, [0.976, 0.963, 0.786]],
  [0.658, [0.972, 0.959, 0.784]],
  [0.659, [0.972, 0.959, 0.784]],
  [0.661, [0.969, 0.954, 0.782]],
  [0.663, [0.969, 0.954, 0.782]],
  [0.665, [0.966, 0.949, 0.78]],
  [0.667, [0.966, 0.949, 0.78]],
  [0.669, [0.963, 0.944, 0.779]],
  [0.671, [0.963, 0.944, 0.779]],
  [0.673, [0.96, 0.939, 0.777]],
  [0.675, [0.96, 0.939, 0.777]],
  [0.677, [0.956, 0.935, 0.775]],
  [0.679, [0.956, 0.935, 0.775]],
  [0.681, [0.953, 0.93, 0.773]],
  [0.683, [0.953, 0.93, 0.773]],
  [0.685, [0.95, 0.925, 0.771]],
  [0.687, [0.95, 0.925, 0.771]],
  [0.689, [0.947, 0.92, 0.769]],
  [0.691, [0.947, 0.92, 0.769]],
  [0.693, [0.944, 0.915, 0.767]],
  [0.695, [0.944, 0.915, 0.767]],
  [0.697, [0.94, 0.911, 0.766]],
  [0.699, [0.94, 0.911, 0.766]],
  [0.701, [0.937, 0.906, 0.764]],
  [0.703, [0.937, 0.906, 0.764]],
  [0.705, [0.934, 0.901, 0.762]],
  [0.706, [0.934, 0.901, 0.762]],
  [0.708, [0.931, 0.896, 0.76]],
  [0.71, [0.931, 0.896, 0.76]],
  [0.712, [0.928, 0.891, 0.758]],
  [0.714, [0.928, 0.891, 0.758]],
  [0.716, [0.924, 0.887, 0.756]],
  [0.718, [0.924, 0.887, 0.756]],
  [0.72, [0.921, 0.882, 0.755]],
  [0.722, [0.921, 0.882, 0.755]],
  [0.724, [0.918, 0.877, 0.753]],
  [0.726, [0.918, 0.877, 0.753]],
  [0.728, [0.915, 0.872, 0.751]],
  [0.73, [0.915, 0.872, 0.751]],
  [0.732, [0.912, 0.867, 0.749]],
  [0.734, [0.912, 0.867, 0.749]],
  [0.736, [0.908, 0.863, 0.747]],
  [0.738, [0.908, 0.863, 0.747]],
  [0.74, [0.905, 0.858, 0.745]],
  [0.742, [0.905, 0.858, 0.745]],
  [0.744, [0.902, 0.853, 0.743]],
  [0.746, [0.902, 0.853, 0.743]],
  [0.748, [0.899, 0.848, 0.742]],
  [0.75, [0.899, 0.848, 0.742]],
  [0.751, [0.9, 0.847, 0.746]],
  [0.753, [0.9, 0.847, 0.746]],
  [0.755, [0.903, 0.847, 0.751]],
  [0.757, [0.903, 0.847, 0.751]],
  [0.759, [0.906, 0.848, 0.757]],
  [0.761, [0.906, 0.848, 0.757]],
  [0.763, [0.909, 0.848, 0.763]],
  [0.765, [0.909, 0.848, 0.763]],
  [0.767, [0.912, 0.848, 0.769]],
  [0.769, [0.912, 0.848, 0.769]],
  [0.771, [0.915, 0.848, 0.774]],
  [0.773, [0.915, 0.848, 0.774]],
  [0.775, [0.918, 0.849, 0.78]],
  [0.777, [0.918, 0.849, 0.78]],
  [0.779, [0.921, 0.849, 0.786]],
  [0.781, [0.921, 0.849, 0.786]],
  [0.783, [0.924, 0.849, 0.792]],
  [0.785, [0.924, 0.849, 0.792]],
  [0.787, [0.927, 0.849, 0.798]],
  [0.789, [0.927, 0.849, 0.798]],
  [0.791, [0.93, 0.85, 0.803]],
  [0.793, [0.93, 0.85, 0.803]],
  [0.795, [0.933, 0.85, 0.809]],
  [0.796, [0.933, 0.85, 0.809]],
  [0.798, [0.936, 0.85, 0.815]],
  [0.8, [0.936, 0.85, 0.815]],
  [0.802, [0.939, 0.85, 0.821]],
  [0.804, [0.939, 0.85, 0.821]],
  [0.806, [0.942, 0.851, 0.826]],
  [0.808, [0.942, 0.851, 0.826]],
  [0.81, [0.945, 0.851, 0.832]],
  [0.812, [0.945, 0.851, 0.832]],
  [0.814, [0.947, 0.851, 0.838]],
  [0.816, [0.947, 0.851, 0.838]],
  [0.818, [0.95, 0.851, 0.844]],
  [0.82, [0.95, 0.851, 0.844]],
  [0.822, [0.953, 0.852, 0.85]],
  [0.824, [0.953, 0.852, 0.85]],
  [0.826, [0.956, 0.852, 0.855]],
  [0.828, [0.956, 0.852, 0.855]],
  [0.83, [0.959, 0.852, 0.861]],
  [0.832, [0.959, 0.852, 0.861]],
  [0.834, [0.962, 0.852, 0.867]],
  [0.836, [0.962, 0.852, 0.867]],
  [0.838, [0.965, 0.853, 0.873]],
  [0.84, [0.965, 0.853, 0.873]],
  [0.841, [0.968, 0.853, 0.879]],
  [0.843, [0.968, 0.853, 0.879]],
  [0.845, [0.971, 0.853, 0.884]],
  [0.847, [0.971, 0.853, 0.884]],
  [0.849, [0.974, 0.853, 0.89]],
  [0.851, [0.974, 0.853, 0.89]],
  [0.853, [0.977, 0.854, 0.896]],
  [0.855, [0.977, 0.854, 0.896]],
  [0.857, [0.98, 0.854, 0.902]],
  [0.859, [0.98, 0.854, 0.902]],
  [0.861, [0.983, 0.854, 0.907]],
  [0.863, [0.983, 0.854, 0.907]],
  [0.865, [0.986, 0.854, 0.913]],
  [0.867, [0.986, 0.854, 0.913]],
  [0.869, [0.989, 0.855, 0.919]],
  [0.871, [0.989, 0.855, 0.919]],
  [0.873, [0.992, 0.855, 0.925]],
  [0.875, [0.992, 0.855, 0.925]],
  [0.877, [0.991, 0.857, 0.926]],
  [0.879, [0.991, 0.857, 0.926]],
  [0.881, [0.99, 0.86, 0.927]],
  [0.883, [0.99, 0.86, 0.927]],
  [0.885, [0.988, 0.863, 0.928]],
  [0.886, [0.988, 0.863, 0.928]],
  [0.888, [0.987, 0.866, 0.928]],
  [0.89, [0.987, 0.866, 0.928]],
  [0.892, [0.986, 0.869, 0.929]],
  [0.894, [0.986, 0.869, 0.929]],
  [0.896, [0.984, 0.872, 0.93]],
  [0.898, [0.984, 0.872, 0.93]],
  [0.9, [0.983, 0.875, 0.931]],
  [0.902, [0.983, 0.875, 0.931]],
  [0.904, [0.981, 0.878, 0.931]],
  [0.906, [0.981, 0.878, 0.931]],
  [0.908, [0.98, 0.881, 0.932]],
  [0.91, [0.98, 0.881, 0.932]],
  [0.912, [0.979, 0.884, 0.933]],
  [0.914, [0.979, 0.884, 0.933]],
  [0.916, [0.977, 0.887, 0.934]],
  [0.918, [0.977, 0.887, 0.934]],
  [0.92, [0.976, 0.89, 0.934]],
  [0.922, [0.976, 0.89, 0.934]],
  [0.924, [0.975, 0.893, 0.935]],
  [0.926, [0.975, 0.893, 0.935]],
  [0.928, [0.973, 0.896, 0.936]],
  [0.93, [0.973, 0.896, 0.936]],
  [0.932, [0.972, 0.899, 0.936]],
  [0.933, [0.972, 0.899, 0.936]],
  [0.935, [0.971, 0.902, 0.937]],
  [0.937, [0.971, 0.902, 0.937]],
  [0.939, [0.969, 0.905, 0.938]],
  [0.941, [0.969, 0.905, 0.938]],
  [0.943, [0.968, 0.908, 0.939]],
  [0.945, [0.968, 0.908, 0.939]],
  [0.947, [0.967, 0.911, 0.939]],
  [0.949, [0.967, 0.911, 0.939]],
  [0.951, [0.965, 0.914, 0.94]],
  [0.953, [0.965, 0.914, 0.94]],
  [0.955, [0.964, 0.917, 0.941]],
  [0.957, [0.964, 0.917, 0.941]],
  [0.959, [0.963, 0.919, 0.942]],
  [0.961, [0.963, 0.919, 0.942]],
  [0.963, [0.961, 0.922, 0.942]],
  [0.965, [0.961, 0.922, 0.942]],
  [0.967, [0.96, 0.925, 0.943]],
  [0.969, [0.96, 0.925, 0.943]],
  [0.971, [0.958, 0.928, 0.944]],
  [0.973, [0.958, 0.928, 0.944]],
  [0.975, [0.957, 0.931, 0.945]],
  [0.977, [0.957, 0.931, 0.945]],
  [0.978, [0.956, 0.934, 0.945]],
  [0.98, [0.956, 0.934, 0.945]],
  [0.982, [0.954, 0.937, 0.946]],
  [0.984, [0.954, 0.937, 0.946]],
  [0.986, [0.953, 0.94, 0.947]],
  [0.988, [0.953, 0.94, 0.947]],
  [0.99, [0.952, 0.943, 0.948]],
  [0.992, [0.952, 0.943, 0.948]],
  [0.994, [0.95, 0.946, 0.948]],
  [0.996, [0.95, 0.946, 0.948]],
  [0.998, [0.949, 0.949, 0.949]],
  [1, [0.949, 0.949, 0.949]]
], ep = [
  [0, [0.702, 0.886, 0.804]],
  [2e-3, [0.702, 0.886, 0.804]],
  [4e-3, [0.71, 0.884, 0.8]],
  [6e-3, [0.71, 0.884, 0.8]],
  [8e-3, [0.718, 0.882, 0.797]],
  [0.01, [0.718, 0.882, 0.797]],
  [0.012, [0.726, 0.879, 0.793]],
  [0.014, [0.726, 0.879, 0.793]],
  [0.016, [0.734, 0.877, 0.79]],
  [0.018, [0.734, 0.877, 0.79]],
  [0.02, [0.742, 0.875, 0.786]],
  [0.022, [0.742, 0.875, 0.786]],
  [0.023, [0.75, 0.873, 0.783]],
  [0.025, [0.75, 0.873, 0.783]],
  [0.027, [0.758, 0.87, 0.779]],
  [0.029, [0.758, 0.87, 0.779]],
  [0.031, [0.766, 0.868, 0.776]],
  [0.033, [0.766, 0.868, 0.776]],
  [0.035, [0.774, 0.866, 0.772]],
  [0.037, [0.774, 0.866, 0.772]],
  [0.039, [0.782, 0.864, 0.768]],
  [0.041, [0.782, 0.864, 0.768]],
  [0.043, [0.79, 0.861, 0.765]],
  [0.045, [0.79, 0.861, 0.765]],
  [0.047, [0.798, 0.859, 0.761]],
  [0.049, [0.798, 0.859, 0.761]],
  [0.051, [0.806, 0.857, 0.758]],
  [0.053, [0.806, 0.857, 0.758]],
  [0.055, [0.813, 0.855, 0.754]],
  [0.057, [0.813, 0.855, 0.754]],
  [0.059, [0.821, 0.852, 0.751]],
  [0.061, [0.821, 0.852, 0.751]],
  [0.063, [0.829, 0.85, 0.747]],
  [0.065, [0.829, 0.85, 0.747]],
  [0.067, [0.837, 0.848, 0.744]],
  [0.068, [0.837, 0.848, 0.744]],
  [0.07, [0.845, 0.846, 0.74]],
  [0.072, [0.845, 0.846, 0.74]],
  [0.074, [0.853, 0.843, 0.736]],
  [0.076, [0.853, 0.843, 0.736]],
  [0.078, [0.861, 0.841, 0.733]],
  [0.08, [0.861, 0.841, 0.733]],
  [0.082, [0.869, 0.839, 0.729]],
  [0.084, [0.869, 0.839, 0.729]],
  [0.086, [0.877, 0.837, 0.726]],
  [0.088, [0.877, 0.837, 0.726]],
  [0.09, [0.885, 0.834, 0.722]],
  [0.092, [0.885, 0.834, 0.722]],
  [0.094, [0.893, 0.832, 0.719]],
  [0.096, [0.893, 0.832, 0.719]],
  [0.098, [0.901, 0.83, 0.715]],
  [0.1, [0.901, 0.83, 0.715]],
  [0.102, [0.909, 0.827, 0.712]],
  [0.104, [0.909, 0.827, 0.712]],
  [0.106, [0.917, 0.825, 0.708]],
  [0.108, [0.917, 0.825, 0.708]],
  [0.11, [0.925, 0.823, 0.704]],
  [0.112, [0.925, 0.823, 0.704]],
  [0.114, [0.933, 0.821, 0.701]],
  [0.115, [0.933, 0.821, 0.701]],
  [0.117, [0.941, 0.818, 0.697]],
  [0.119, [0.941, 0.818, 0.697]],
  [0.121, [0.949, 0.816, 0.694]],
  [0.123, [0.949, 0.816, 0.694]],
  [0.125, [0.957, 0.814, 0.69]],
  [0.127, [0.957, 0.814, 0.69]],
  [0.129, [0.965, 0.812, 0.687]],
  [0.131, [0.965, 0.812, 0.687]],
  [0.133, [0.973, 0.809, 0.683]],
  [0.135, [0.973, 0.809, 0.683]],
  [0.137, [0.981, 0.807, 0.68]],
  [0.139, [0.981, 0.807, 0.68]],
  [0.141, [0.989, 0.805, 0.676]],
  [0.143, [0.989, 0.805, 0.676]],
  [0.145, [0.989, 0.804, 0.678]],
  [0.147, [0.989, 0.804, 0.678]],
  [0.149, [0.984, 0.805, 0.685]],
  [0.151, [0.984, 0.805, 0.685]],
  [0.153, [0.978, 0.806, 0.691]],
  [0.155, [0.978, 0.806, 0.691]],
  [0.157, [0.973, 0.807, 0.698]],
  [0.159, [0.973, 0.807, 0.698]],
  [0.16, [0.968, 0.808, 0.704]],
  [0.162, [0.968, 0.808, 0.704]],
  [0.164, [0.962, 0.809, 0.71]],
  [0.166, [0.962, 0.809, 0.71]],
  [0.168, [0.957, 0.81, 0.717]],
  [0.17, [0.957, 0.81, 0.717]],
  [0.172, [0.951, 0.81, 0.723]],
  [0.174, [0.951, 0.81, 0.723]],
  [0.176, [0.946, 0.811, 0.73]],
  [0.178, [0.946, 0.811, 0.73]],
  [0.18, [0.941, 0.812, 0.736]],
  [0.182, [0.941, 0.812, 0.736]],
  [0.184, [0.935, 0.813, 0.743]],
  [0.186, [0.935, 0.813, 0.743]],
  [0.188, [0.93, 0.814, 0.749]],
  [0.19, [0.93, 0.814, 0.749]],
  [0.192, [0.924, 0.815, 0.756]],
  [0.194, [0.924, 0.815, 0.756]],
  [0.196, [0.919, 0.816, 0.762]],
  [0.198, [0.919, 0.816, 0.762]],
  [0.2, [0.914, 0.816, 0.769]],
  [0.202, [0.914, 0.816, 0.769]],
  [0.204, [0.908, 0.817, 0.775]],
  [0.205, [0.908, 0.817, 0.775]],
  [0.207, [0.903, 0.818, 0.782]],
  [0.209, [0.903, 0.818, 0.782]],
  [0.211, [0.898, 0.819, 0.788]],
  [0.213, [0.898, 0.819, 0.788]],
  [0.215, [0.892, 0.82, 0.794]],
  [0.217, [0.892, 0.82, 0.794]],
  [0.219, [0.887, 0.821, 0.801]],
  [0.221, [0.887, 0.821, 0.801]],
  [0.223, [0.881, 0.822, 0.807]],
  [0.225, [0.881, 0.822, 0.807]],
  [0.227, [0.876, 0.822, 0.814]],
  [0.229, [0.876, 0.822, 0.814]],
  [0.231, [0.871, 0.823, 0.82]],
  [0.233, [0.871, 0.823, 0.82]],
  [0.235, [0.865, 0.824, 0.827]],
  [0.237, [0.865, 0.824, 0.827]],
  [0.239, [0.86, 0.825, 0.833]],
  [0.241, [0.86, 0.825, 0.833]],
  [0.243, [0.855, 0.826, 0.84]],
  [0.245, [0.855, 0.826, 0.84]],
  [0.247, [0.849, 0.827, 0.846]],
  [0.249, [0.849, 0.827, 0.846]],
  [0.25, [0.844, 0.828, 0.853]],
  [0.252, [0.844, 0.828, 0.853]],
  [0.254, [0.838, 0.829, 0.859]],
  [0.256, [0.838, 0.829, 0.859]],
  [0.258, [0.833, 0.829, 0.866]],
  [0.26, [0.833, 0.829, 0.866]],
  [0.262, [0.828, 0.83, 0.872]],
  [0.264, [0.828, 0.83, 0.872]],
  [0.266, [0.822, 0.831, 0.878]],
  [0.268, [0.822, 0.831, 0.878]],
  [0.27, [0.817, 0.832, 0.885]],
  [0.272, [0.817, 0.832, 0.885]],
  [0.274, [0.811, 0.833, 0.891]],
  [0.276, [0.811, 0.833, 0.891]],
  [0.278, [0.806, 0.834, 0.898]],
  [0.28, [0.806, 0.834, 0.898]],
  [0.282, [0.801, 0.835, 0.904]],
  [0.284, [0.801, 0.835, 0.904]],
  [0.286, [0.797, 0.835, 0.91]],
  [0.288, [0.797, 0.835, 0.91]],
  [0.29, [0.801, 0.834, 0.909]],
  [0.292, [0.801, 0.834, 0.909]],
  [0.294, [0.806, 0.833, 0.909]],
  [0.295, [0.806, 0.833, 0.909]],
  [0.297, [0.81, 0.832, 0.908]],
  [0.299, [0.81, 0.832, 0.908]],
  [0.301, [0.814, 0.83, 0.908]],
  [0.303, [0.814, 0.83, 0.908]],
  [0.305, [0.819, 0.829, 0.908]],
  [0.307, [0.819, 0.829, 0.908]],
  [0.309, [0.823, 0.828, 0.907]],
  [0.311, [0.823, 0.828, 0.907]],
  [0.313, [0.828, 0.827, 0.907]],
  [0.315, [0.828, 0.827, 0.907]],
  [0.317, [0.832, 0.826, 0.906]],
  [0.319, [0.832, 0.826, 0.906]],
  [0.321, [0.836, 0.824, 0.906]],
  [0.323, [0.836, 0.824, 0.906]],
  [0.325, [0.841, 0.823, 0.905]],
  [0.327, [0.841, 0.823, 0.905]],
  [0.329, [0.845, 0.822, 0.905]],
  [0.331, [0.845, 0.822, 0.905]],
  [0.333, [0.85, 0.821, 0.905]],
  [0.335, [0.85, 0.821, 0.905]],
  [0.337, [0.854, 0.82, 0.904]],
  [0.339, [0.854, 0.82, 0.904]],
  [0.341, [0.859, 0.819, 0.904]],
  [0.342, [0.859, 0.819, 0.904]],
  [0.344, [0.863, 0.817, 0.903]],
  [0.346, [0.863, 0.817, 0.903]],
  [0.348, [0.867, 0.816, 0.903]],
  [0.35, [0.867, 0.816, 0.903]],
  [0.352, [0.872, 0.815, 0.902]],
  [0.354, [0.872, 0.815, 0.902]],
  [0.356, [0.876, 0.814, 0.902]],
  [0.358, [0.876, 0.814, 0.902]],
  [0.36, [0.881, 0.813, 0.902]],
  [0.362, [0.881, 0.813, 0.902]],
  [0.364, [0.885, 0.811, 0.901]],
  [0.366, [0.885, 0.811, 0.901]],
  [0.368, [0.889, 0.81, 0.901]],
  [0.37, [0.889, 0.81, 0.901]],
  [0.372, [0.894, 0.809, 0.9]],
  [0.374, [0.894, 0.809, 0.9]],
  [0.376, [0.898, 0.808, 0.9]],
  [0.378, [0.898, 0.808, 0.9]],
  [0.38, [0.903, 0.807, 0.899]],
  [0.382, [0.903, 0.807, 0.899]],
  [0.384, [0.907, 0.806, 0.899]],
  [0.386, [0.907, 0.806, 0.899]],
  [0.387, [0.911, 0.804, 0.899]],
  [0.389, [0.911, 0.804, 0.899]],
  [0.391, [0.916, 0.803, 0.898]],
  [0.393, [0.916, 0.803, 0.898]],
  [0.395, [0.92, 0.802, 0.898]],
  [0.397, [0.92, 0.802, 0.898]],
  [0.399, [0.925, 0.801, 0.897]],
  [0.401, [0.925, 0.801, 0.897]],
  [0.403, [0.929, 0.8, 0.897]],
  [0.405, [0.929, 0.8, 0.897]],
  [0.407, [0.934, 0.798, 0.896]],
  [0.409, [0.934, 0.798, 0.896]],
  [0.411, [0.938, 0.797, 0.896]],
  [0.413, [0.938, 0.797, 0.896]],
  [0.415, [0.942, 0.796, 0.896]],
  [0.417, [0.942, 0.796, 0.896]],
  [0.419, [0.947, 0.795, 0.895]],
  [0.421, [0.947, 0.795, 0.895]],
  [0.423, [0.951, 0.794, 0.895]],
  [0.425, [0.951, 0.794, 0.895]],
  [0.427, [0.956, 0.792, 0.894]],
  [0.429, [0.956, 0.792, 0.894]],
  [0.431, [0.956, 0.795, 0.892]],
  [0.432, [0.956, 0.795, 0.892]],
  [0.434, [0.954, 0.8, 0.889]],
  [0.436, [0.954, 0.8, 0.889]],
  [0.438, [0.953, 0.805, 0.886]],
  [0.44, [0.953, 0.805, 0.886]],
  [0.442, [0.951, 0.809, 0.883]],
  [0.444, [0.951, 0.809, 0.883]],
  [0.446, [0.95, 0.814, 0.88]],
  [0.448, [0.95, 0.814, 0.88]],
  [0.45, [0.948, 0.819, 0.878]],
  [0.452, [0.948, 0.819, 0.878]],
  [0.454, [0.947, 0.823, 0.875]],
  [0.456, [0.947, 0.823, 0.875]],
  [0.458, [0.945, 0.828, 0.872]],
  [0.46, [0.945, 0.828, 0.872]],
  [0.462, [0.944, 0.832, 0.869]],
  [0.464, [0.944, 0.832, 0.869]],
  [0.466, [0.942, 0.837, 0.866]],
  [0.468, [0.942, 0.837, 0.866]],
  [0.47, [0.941, 0.842, 0.863]],
  [0.472, [0.941, 0.842, 0.863]],
  [0.474, [0.939, 0.846, 0.86]],
  [0.476, [0.939, 0.846, 0.86]],
  [0.477, [0.938, 0.851, 0.857]],
  [0.479, [0.938, 0.851, 0.857]],
  [0.481, [0.936, 0.856, 0.854]],
  [0.483, [0.936, 0.856, 0.854]],
  [0.485, [0.935, 0.86, 0.851]],
  [0.487, [0.935, 0.86, 0.851]],
  [0.489, [0.933, 0.865, 0.848]],
  [0.491, [0.933, 0.865, 0.848]],
  [0.493, [0.932, 0.87, 0.846]],
  [0.495, [0.932, 0.87, 0.846]],
  [0.497, [0.93, 0.874, 0.843]],
  [0.499, [0.93, 0.874, 0.843]],
  [0.501, [0.929, 0.879, 0.84]],
  [0.503, [0.929, 0.879, 0.84]],
  [0.505, [0.927, 0.883, 0.837]],
  [0.507, [0.927, 0.883, 0.837]],
  [0.509, [0.926, 0.888, 0.834]],
  [0.511, [0.926, 0.888, 0.834]],
  [0.513, [0.924, 0.893, 0.831]],
  [0.515, [0.924, 0.893, 0.831]],
  [0.517, [0.923, 0.897, 0.828]],
  [0.519, [0.923, 0.897, 0.828]],
  [0.521, [0.921, 0.902, 0.825]],
  [0.523, [0.921, 0.902, 0.825]],
  [0.524, [0.92, 0.907, 0.822]],
  [0.526, [0.92, 0.907, 0.822]],
  [0.528, [0.918, 0.911, 0.819]],
  [0.53, [0.918, 0.911, 0.819]],
  [0.532, [0.917, 0.916, 0.816]],
  [0.534, [0.917, 0.916, 0.816]],
  [0.536, [0.915, 0.92, 0.814]],
  [0.538, [0.915, 0.92, 0.814]],
  [0.54, [0.914, 0.925, 0.811]],
  [0.542, [0.914, 0.925, 0.811]],
  [0.544, [0.912, 0.93, 0.808]],
  [0.546, [0.912, 0.93, 0.808]],
  [0.548, [0.911, 0.934, 0.805]],
  [0.55, [0.911, 0.934, 0.805]],
  [0.552, [0.909, 0.939, 0.802]],
  [0.554, [0.909, 0.939, 0.802]],
  [0.556, [0.908, 0.944, 0.799]],
  [0.558, [0.908, 0.944, 0.799]],
  [0.56, [0.906, 0.948, 0.796]],
  [0.562, [0.906, 0.948, 0.796]],
  [0.564, [0.905, 0.953, 0.793]],
  [0.566, [0.905, 0.953, 0.793]],
  [0.568, [0.903, 0.957, 0.79]],
  [0.569, [0.903, 0.957, 0.79]],
  [0.571, [0.903, 0.961, 0.787]],
  [0.573, [0.903, 0.961, 0.787]],
  [0.575, [0.905, 0.96, 0.784]],
  [0.577, [0.905, 0.96, 0.784]],
  [0.579, [0.908, 0.96, 0.782]],
  [0.581, [0.908, 0.96, 0.782]],
  [0.583, [0.911, 0.96, 0.779]],
  [0.585, [0.911, 0.96, 0.779]],
  [0.587, [0.913, 0.959, 0.776]],
  [0.589, [0.913, 0.959, 0.776]],
  [0.591, [0.916, 0.959, 0.773]],
  [0.593, [0.916, 0.959, 0.773]],
  [0.595, [0.919, 0.959, 0.77]],
  [0.597, [0.919, 0.959, 0.77]],
  [0.599, [0.922, 0.958, 0.767]],
  [0.601, [0.922, 0.958, 0.767]],
  [0.603, [0.924, 0.958, 0.764]],
  [0.605, [0.924, 0.958, 0.764]],
  [0.607, [0.927, 0.958, 0.761]],
  [0.609, [0.927, 0.958, 0.761]],
  [0.611, [0.93, 0.957, 0.758]],
  [0.613, [0.93, 0.957, 0.758]],
  [0.614, [0.932, 0.957, 0.755]],
  [0.616, [0.932, 0.957, 0.755]],
  [0.618, [0.935, 0.957, 0.753]],
  [0.62, [0.935, 0.957, 0.753]],
  [0.622, [0.938, 0.956, 0.75]],
  [0.624, [0.938, 0.956, 0.75]],
  [0.626, [0.94, 0.956, 0.747]],
  [0.628, [0.94, 0.956, 0.747]],
  [0.63, [0.943, 0.956, 0.744]],
  [0.632, [0.943, 0.956, 0.744]],
  [0.634, [0.946, 0.956, 0.741]],
  [0.636, [0.946, 0.956, 0.741]],
  [0.638, [0.948, 0.955, 0.738]],
  [0.64, [0.948, 0.955, 0.738]],
  [0.642, [0.951, 0.955, 0.735]],
  [0.644, [0.951, 0.955, 0.735]],
  [0.646, [0.954, 0.955, 0.732]],
  [0.648, [0.954, 0.955, 0.732]],
  [0.65, [0.957, 0.954, 0.729]],
  [0.652, [0.957, 0.954, 0.729]],
  [0.654, [0.959, 0.954, 0.726]],
  [0.656, [0.959, 0.954, 0.726]],
  [0.658, [0.962, 0.954, 0.723]],
  [0.659, [0.962, 0.954, 0.723]],
  [0.661, [0.965, 0.953, 0.721]],
  [0.663, [0.965, 0.953, 0.721]],
  [0.665, [0.967, 0.953, 0.718]],
  [0.667, [0.967, 0.953, 0.718]],
  [0.669, [0.97, 0.953, 0.715]],
  [0.671, [0.97, 0.953, 0.715]],
  [0.673, [0.973, 0.952, 0.712]],
  [0.675, [0.973, 0.952, 0.712]],
  [0.677, [0.975, 0.952, 0.709]],
  [0.679, [0.975, 0.952, 0.709]],
  [0.681, [0.978, 0.952, 0.706]],
  [0.683, [0.978, 0.952, 0.706]],
  [0.685, [0.981, 0.951, 0.703]],
  [0.687, [0.981, 0.951, 0.703]],
  [0.689, [0.983, 0.951, 0.7]],
  [0.691, [0.983, 0.951, 0.7]],
  [0.693, [0.986, 0.951, 0.697]],
  [0.695, [0.986, 0.951, 0.697]],
  [0.697, [0.989, 0.95, 0.694]],
  [0.699, [0.989, 0.95, 0.694]],
  [0.701, [0.992, 0.95, 0.691]],
  [0.703, [0.992, 0.95, 0.691]],
  [0.705, [0.994, 0.95, 0.689]],
  [0.706, [0.994, 0.95, 0.689]],
  [0.708, [0.997, 0.949, 0.686]],
  [0.71, [0.997, 0.949, 0.686]],
  [0.712, [1, 0.949, 0.683]],
  [0.714, [1, 0.949, 0.683]],
  [0.716, [0.999, 0.948, 0.685]],
  [0.718, [0.999, 0.948, 0.685]],
  [0.72, [0.997, 0.946, 0.688]],
  [0.722, [0.997, 0.946, 0.688]],
  [0.724, [0.996, 0.944, 0.692]],
  [0.726, [0.996, 0.944, 0.692]],
  [0.728, [0.994, 0.942, 0.695]],
  [0.73, [0.994, 0.942, 0.695]],
  [0.732, [0.993, 0.941, 0.698]],
  [0.734, [0.993, 0.941, 0.698]],
  [0.736, [0.991, 0.939, 0.701]],
  [0.738, [0.991, 0.939, 0.701]],
  [0.74, [0.99, 0.937, 0.704]],
  [0.742, [0.99, 0.937, 0.704]],
  [0.744, [0.988, 0.935, 0.708]],
  [0.746, [0.988, 0.935, 0.708]],
  [0.748, [0.987, 0.934, 0.711]],
  [0.75, [0.987, 0.934, 0.711]],
  [0.751, [0.985, 0.932, 0.714]],
  [0.753, [0.985, 0.932, 0.714]],
  [0.755, [0.984, 0.93, 0.717]],
  [0.757, [0.984, 0.93, 0.717]],
  [0.759, [0.982, 0.929, 0.721]],
  [0.761, [0.982, 0.929, 0.721]],
  [0.763, [0.981, 0.927, 0.724]],
  [0.765, [0.981, 0.927, 0.724]],
  [0.767, [0.979, 0.925, 0.727]],
  [0.769, [0.979, 0.925, 0.727]],
  [0.771, [0.978, 0.923, 0.73]],
  [0.773, [0.978, 0.923, 0.73]],
  [0.775, [0.976, 0.922, 0.734]],
  [0.777, [0.976, 0.922, 0.734]],
  [0.779, [0.975, 0.92, 0.737]],
  [0.781, [0.975, 0.92, 0.737]],
  [0.783, [0.973, 0.918, 0.74]],
  [0.785, [0.973, 0.918, 0.74]],
  [0.787, [0.972, 0.917, 0.743]],
  [0.789, [0.972, 0.917, 0.743]],
  [0.791, [0.97, 0.915, 0.746]],
  [0.793, [0.97, 0.915, 0.746]],
  [0.795, [0.969, 0.913, 0.75]],
  [0.796, [0.969, 0.913, 0.75]],
  [0.798, [0.967, 0.911, 0.753]],
  [0.8, [0.967, 0.911, 0.753]],
  [0.802, [0.966, 0.91, 0.756]],
  [0.804, [0.966, 0.91, 0.756]],
  [0.806, [0.964, 0.908, 0.759]],
  [0.808, [0.964, 0.908, 0.759]],
  [0.81, [0.963, 0.906, 0.763]],
  [0.812, [0.963, 0.906, 0.763]],
  [0.814, [0.961, 0.904, 0.766]],
  [0.816, [0.961, 0.904, 0.766]],
  [0.818, [0.96, 0.903, 0.769]],
  [0.82, [0.96, 0.903, 0.769]],
  [0.822, [0.958, 0.901, 0.772]],
  [0.824, [0.958, 0.901, 0.772]],
  [0.826, [0.957, 0.899, 0.776]],
  [0.828, [0.957, 0.899, 0.776]],
  [0.83, [0.955, 0.898, 0.779]],
  [0.832, [0.955, 0.898, 0.779]],
  [0.834, [0.953, 0.896, 0.782]],
  [0.836, [0.953, 0.896, 0.782]],
  [0.838, [0.952, 0.894, 0.785]],
  [0.84, [0.952, 0.894, 0.785]],
  [0.841, [0.95, 0.892, 0.788]],
  [0.843, [0.95, 0.892, 0.788]],
  [0.845, [0.949, 0.891, 0.792]],
  [0.847, [0.949, 0.891, 0.792]],
  [0.849, [0.947, 0.889, 0.795]],
  [0.851, [0.947, 0.889, 0.795]],
  [0.853, [0.946, 0.887, 0.798]],
  [0.855, [0.946, 0.887, 0.798]],
  [0.857, [0.943, 0.885, 0.8]],
  [0.859, [0.943, 0.885, 0.8]],
  [0.861, [0.939, 0.883, 0.8]],
  [0.863, [0.939, 0.883, 0.8]],
  [0.865, [0.935, 0.881, 0.8]],
  [0.867, [0.935, 0.881, 0.8]],
  [0.869, [0.931, 0.878, 0.8]],
  [0.871, [0.931, 0.878, 0.8]],
  [0.873, [0.927, 0.876, 0.8]],
  [0.875, [0.927, 0.876, 0.8]],
  [0.877, [0.923, 0.873, 0.8]],
  [0.879, [0.923, 0.873, 0.8]],
  [0.881, [0.919, 0.871, 0.8]],
  [0.883, [0.919, 0.871, 0.8]],
  [0.885, [0.916, 0.869, 0.8]],
  [0.886, [0.916, 0.869, 0.8]],
  [0.888, [0.912, 0.866, 0.8]],
  [0.89, [0.912, 0.866, 0.8]],
  [0.892, [0.908, 0.864, 0.8]],
  [0.894, [0.908, 0.864, 0.8]],
  [0.896, [0.904, 0.862, 0.8]],
  [0.898, [0.904, 0.862, 0.8]],
  [0.9, [0.9, 0.859, 0.8]],
  [0.902, [0.9, 0.859, 0.8]],
  [0.904, [0.896, 0.857, 0.8]],
  [0.906, [0.896, 0.857, 0.8]],
  [0.908, [0.892, 0.854, 0.8]],
  [0.91, [0.892, 0.854, 0.8]],
  [0.912, [0.888, 0.852, 0.8]],
  [0.914, [0.888, 0.852, 0.8]],
  [0.916, [0.884, 0.85, 0.8]],
  [0.918, [0.884, 0.85, 0.8]],
  [0.92, [0.88, 0.847, 0.8]],
  [0.922, [0.88, 0.847, 0.8]],
  [0.924, [0.876, 0.845, 0.8]],
  [0.926, [0.876, 0.845, 0.8]],
  [0.928, [0.872, 0.843, 0.8]],
  [0.93, [0.872, 0.843, 0.8]],
  [0.932, [0.868, 0.84, 0.8]],
  [0.933, [0.868, 0.84, 0.8]],
  [0.935, [0.864, 0.838, 0.8]],
  [0.937, [0.864, 0.838, 0.8]],
  [0.939, [0.86, 0.836, 0.8]],
  [0.941, [0.86, 0.836, 0.8]],
  [0.943, [0.856, 0.833, 0.8]],
  [0.945, [0.856, 0.833, 0.8]],
  [0.947, [0.852, 0.831, 0.8]],
  [0.949, [0.852, 0.831, 0.8]],
  [0.951, [0.848, 0.828, 0.8]],
  [0.953, [0.848, 0.828, 0.8]],
  [0.955, [0.844, 0.826, 0.8]],
  [0.957, [0.844, 0.826, 0.8]],
  [0.959, [0.84, 0.824, 0.8]],
  [0.961, [0.84, 0.824, 0.8]],
  [0.963, [0.836, 0.821, 0.8]],
  [0.965, [0.836, 0.821, 0.8]],
  [0.967, [0.832, 0.819, 0.8]],
  [0.969, [0.832, 0.819, 0.8]],
  [0.971, [0.828, 0.817, 0.8]],
  [0.973, [0.828, 0.817, 0.8]],
  [0.975, [0.824, 0.814, 0.8]],
  [0.977, [0.824, 0.814, 0.8]],
  [0.978, [0.82, 0.812, 0.8]],
  [0.98, [0.82, 0.812, 0.8]],
  [0.982, [0.816, 0.809, 0.8]],
  [0.984, [0.816, 0.809, 0.8]],
  [0.986, [0.812, 0.807, 0.8]],
  [0.988, [0.812, 0.807, 0.8]],
  [0.99, [0.808, 0.805, 0.8]],
  [0.992, [0.808, 0.805, 0.8]],
  [0.994, [0.804, 0.802, 0.8]],
  [0.996, [0.804, 0.802, 0.8]],
  [0.998, [0.8, 0.8, 0.8]],
  [1, [0.8, 0.8, 0.8]]
], tp = [
  [0, [0.894, 0.102, 0.11]],
  [2e-3, [0.894, 0.102, 0.11]],
  [4e-3, [0.873, 0.114, 0.129]],
  [6e-3, [0.873, 0.114, 0.129]],
  [8e-3, [0.852, 0.127, 0.148]],
  [0.01, [0.852, 0.127, 0.148]],
  [0.012, [0.83, 0.139, 0.167]],
  [0.014, [0.83, 0.139, 0.167]],
  [0.016, [0.809, 0.151, 0.187]],
  [0.018, [0.809, 0.151, 0.187]],
  [0.02, [0.788, 0.163, 0.206]],
  [0.022, [0.788, 0.163, 0.206]],
  [0.023, [0.766, 0.176, 0.225]],
  [0.025, [0.766, 0.176, 0.225]],
  [0.027, [0.745, 0.188, 0.244]],
  [0.029, [0.745, 0.188, 0.244]],
  [0.031, [0.724, 0.2, 0.263]],
  [0.033, [0.724, 0.2, 0.263]],
  [0.035, [0.703, 0.213, 0.283]],
  [0.037, [0.703, 0.213, 0.283]],
  [0.039, [0.681, 0.225, 0.302]],
  [0.041, [0.681, 0.225, 0.302]],
  [0.043, [0.66, 0.237, 0.321]],
  [0.045, [0.66, 0.237, 0.321]],
  [0.047, [0.639, 0.25, 0.34]],
  [0.049, [0.639, 0.25, 0.34]],
  [0.051, [0.617, 0.262, 0.359]],
  [0.053, [0.617, 0.262, 0.359]],
  [0.055, [0.596, 0.274, 0.379]],
  [0.057, [0.596, 0.274, 0.379]],
  [0.059, [0.575, 0.287, 0.398]],
  [0.061, [0.575, 0.287, 0.398]],
  [0.063, [0.554, 0.299, 0.417]],
  [0.065, [0.554, 0.299, 0.417]],
  [0.067, [0.532, 0.311, 0.436]],
  [0.068, [0.532, 0.311, 0.436]],
  [0.07, [0.511, 0.323, 0.455]],
  [0.072, [0.511, 0.323, 0.455]],
  [0.074, [0.49, 0.336, 0.474]],
  [0.076, [0.49, 0.336, 0.474]],
  [0.078, [0.468, 0.348, 0.494]],
  [0.08, [0.468, 0.348, 0.494]],
  [0.082, [0.447, 0.36, 0.513]],
  [0.084, [0.447, 0.36, 0.513]],
  [0.086, [0.426, 0.373, 0.532]],
  [0.088, [0.426, 0.373, 0.532]],
  [0.09, [0.405, 0.385, 0.551]],
  [0.092, [0.405, 0.385, 0.551]],
  [0.094, [0.383, 0.397, 0.57]],
  [0.096, [0.383, 0.397, 0.57]],
  [0.098, [0.362, 0.41, 0.59]],
  [0.1, [0.362, 0.41, 0.59]],
  [0.102, [0.341, 0.422, 0.609]],
  [0.104, [0.341, 0.422, 0.609]],
  [0.106, [0.319, 0.434, 0.628]],
  [0.108, [0.319, 0.434, 0.628]],
  [0.11, [0.298, 0.446, 0.647]],
  [0.112, [0.298, 0.446, 0.647]],
  [0.114, [0.277, 0.459, 0.666]],
  [0.115, [0.277, 0.459, 0.666]],
  [0.117, [0.256, 0.471, 0.686]],
  [0.119, [0.256, 0.471, 0.686]],
  [0.121, [0.234, 0.483, 0.705]],
  [0.123, [0.234, 0.483, 0.705]],
  [0.125, [0.216, 0.495, 0.72]],
  [0.127, [0.216, 0.495, 0.72]],
  [0.129, [0.219, 0.501, 0.706]],
  [0.131, [0.219, 0.501, 0.706]],
  [0.133, [0.221, 0.507, 0.693]],
  [0.135, [0.221, 0.507, 0.693]],
  [0.137, [0.224, 0.513, 0.679]],
  [0.139, [0.224, 0.513, 0.679]],
  [0.141, [0.227, 0.519, 0.666]],
  [0.143, [0.227, 0.519, 0.666]],
  [0.145, [0.23, 0.525, 0.652]],
  [0.147, [0.23, 0.525, 0.652]],
  [0.149, [0.232, 0.531, 0.639]],
  [0.151, [0.232, 0.531, 0.639]],
  [0.153, [0.235, 0.537, 0.625]],
  [0.155, [0.235, 0.537, 0.625]],
  [0.157, [0.238, 0.543, 0.612]],
  [0.159, [0.238, 0.543, 0.612]],
  [0.16, [0.24, 0.549, 0.598]],
  [0.162, [0.24, 0.549, 0.598]],
  [0.164, [0.243, 0.555, 0.585]],
  [0.166, [0.243, 0.555, 0.585]],
  [0.168, [0.246, 0.561, 0.571]],
  [0.17, [0.246, 0.561, 0.571]],
  [0.172, [0.249, 0.567, 0.557]],
  [0.174, [0.249, 0.567, 0.557]],
  [0.176, [0.251, 0.573, 0.544]],
  [0.178, [0.251, 0.573, 0.544]],
  [0.18, [0.254, 0.579, 0.53]],
  [0.182, [0.254, 0.579, 0.53]],
  [0.184, [0.257, 0.585, 0.517]],
  [0.186, [0.257, 0.585, 0.517]],
  [0.188, [0.259, 0.591, 0.503]],
  [0.19, [0.259, 0.591, 0.503]],
  [0.192, [0.262, 0.597, 0.49]],
  [0.194, [0.262, 0.597, 0.49]],
  [0.196, [0.265, 0.603, 0.476]],
  [0.198, [0.265, 0.603, 0.476]],
  [0.2, [0.267, 0.609, 0.463]],
  [0.202, [0.267, 0.609, 0.463]],
  [0.204, [0.27, 0.615, 0.449]],
  [0.205, [0.27, 0.615, 0.449]],
  [0.207, [0.273, 0.621, 0.436]],
  [0.209, [0.273, 0.621, 0.436]],
  [0.211, [0.276, 0.627, 0.422]],
  [0.213, [0.276, 0.627, 0.422]],
  [0.215, [0.278, 0.634, 0.409]],
  [0.217, [0.278, 0.634, 0.409]],
  [0.219, [0.281, 0.64, 0.395]],
  [0.221, [0.281, 0.64, 0.395]],
  [0.223, [0.284, 0.646, 0.382]],
  [0.225, [0.284, 0.646, 0.382]],
  [0.227, [0.286, 0.652, 0.368]],
  [0.229, [0.286, 0.652, 0.368]],
  [0.231, [0.289, 0.658, 0.354]],
  [0.233, [0.289, 0.658, 0.354]],
  [0.235, [0.292, 0.664, 0.341]],
  [0.237, [0.292, 0.664, 0.341]],
  [0.239, [0.295, 0.67, 0.327]],
  [0.241, [0.295, 0.67, 0.327]],
  [0.243, [0.297, 0.676, 0.314]],
  [0.245, [0.297, 0.676, 0.314]],
  [0.247, [0.3, 0.682, 0.3]],
  [0.249, [0.3, 0.682, 0.3]],
  [0.25, [0.304, 0.683, 0.293]],
  [0.252, [0.304, 0.683, 0.293]],
  [0.254, [0.313, 0.671, 0.304]],
  [0.256, [0.313, 0.671, 0.304]],
  [0.258, [0.323, 0.659, 0.315]],
  [0.26, [0.323, 0.659, 0.315]],
  [0.262, [0.332, 0.647, 0.326]],
  [0.264, [0.332, 0.647, 0.326]],
  [0.266, [0.341, 0.636, 0.337]],
  [0.268, [0.341, 0.636, 0.337]],
  [0.27, [0.35, 0.624, 0.348]],
  [0.272, [0.35, 0.624, 0.348]],
  [0.274, [0.36, 0.612, 0.359]],
  [0.276, [0.36, 0.612, 0.359]],
  [0.278, [0.369, 0.6, 0.37]],
  [0.28, [0.369, 0.6, 0.37]],
  [0.282, [0.378, 0.588, 0.381]],
  [0.284, [0.378, 0.588, 0.381]],
  [0.286, [0.387, 0.576, 0.391]],
  [0.288, [0.387, 0.576, 0.391]],
  [0.29, [0.397, 0.564, 0.402]],
  [0.292, [0.397, 0.564, 0.402]],
  [0.294, [0.406, 0.552, 0.413]],
  [0.295, [0.406, 0.552, 0.413]],
  [0.297, [0.415, 0.54, 0.424]],
  [0.299, [0.415, 0.54, 0.424]],
  [0.301, [0.424, 0.528, 0.435]],
  [0.303, [0.424, 0.528, 0.435]],
  [0.305, [0.433, 0.516, 0.446]],
  [0.307, [0.433, 0.516, 0.446]],
  [0.309, [0.443, 0.504, 0.457]],
  [0.311, [0.443, 0.504, 0.457]],
  [0.313, [0.452, 0.492, 0.468]],
  [0.315, [0.452, 0.492, 0.468]],
  [0.317, [0.461, 0.48, 0.479]],
  [0.319, [0.461, 0.48, 0.479]],
  [0.321, [0.47, 0.468, 0.49]],
  [0.323, [0.47, 0.468, 0.49]],
  [0.325, [0.48, 0.457, 0.501]],
  [0.327, [0.48, 0.457, 0.501]],
  [0.329, [0.489, 0.445, 0.512]],
  [0.331, [0.489, 0.445, 0.512]],
  [0.333, [0.498, 0.433, 0.523]],
  [0.335, [0.498, 0.433, 0.523]],
  [0.337, [0.507, 0.421, 0.534]],
  [0.339, [0.507, 0.421, 0.534]],
  [0.341, [0.516, 0.409, 0.545]],
  [0.342, [0.516, 0.409, 0.545]],
  [0.344, [0.526, 0.397, 0.556]],
  [0.346, [0.526, 0.397, 0.556]],
  [0.348, [0.535, 0.385, 0.567]],
  [0.35, [0.535, 0.385, 0.567]],
  [0.352, [0.544, 0.373, 0.578]],
  [0.354, [0.544, 0.373, 0.578]],
  [0.356, [0.553, 0.361, 0.589]],
  [0.358, [0.553, 0.361, 0.589]],
  [0.36, [0.563, 0.349, 0.6]],
  [0.362, [0.563, 0.349, 0.6]],
  [0.364, [0.572, 0.337, 0.61]],
  [0.366, [0.572, 0.337, 0.61]],
  [0.368, [0.581, 0.325, 0.621]],
  [0.37, [0.581, 0.325, 0.621]],
  [0.372, [0.59, 0.313, 0.632]],
  [0.374, [0.59, 0.313, 0.632]],
  [0.376, [0.601, 0.308, 0.632]],
  [0.378, [0.601, 0.308, 0.632]],
  [0.38, [0.614, 0.314, 0.612]],
  [0.382, [0.614, 0.314, 0.612]],
  [0.384, [0.626, 0.32, 0.592]],
  [0.386, [0.626, 0.32, 0.592]],
  [0.387, [0.639, 0.326, 0.572]],
  [0.389, [0.639, 0.326, 0.572]],
  [0.391, [0.652, 0.332, 0.551]],
  [0.393, [0.652, 0.332, 0.551]],
  [0.395, [0.664, 0.338, 0.531]],
  [0.397, [0.664, 0.338, 0.531]],
  [0.399, [0.677, 0.344, 0.511]],
  [0.401, [0.677, 0.344, 0.511]],
  [0.403, [0.69, 0.35, 0.491]],
  [0.405, [0.69, 0.35, 0.491]],
  [0.407, [0.702, 0.356, 0.471]],
  [0.409, [0.702, 0.356, 0.471]],
  [0.411, [0.715, 0.362, 0.451]],
  [0.413, [0.715, 0.362, 0.451]],
  [0.415, [0.728, 0.368, 0.431]],
  [0.417, [0.728, 0.368, 0.431]],
  [0.419, [0.74, 0.374, 0.411]],
  [0.421, [0.74, 0.374, 0.411]],
  [0.423, [0.753, 0.38, 0.391]],
  [0.425, [0.753, 0.38, 0.391]],
  [0.427, [0.766, 0.387, 0.371]],
  [0.429, [0.766, 0.387, 0.371]],
  [0.431, [0.778, 0.393, 0.351]],
  [0.432, [0.778, 0.393, 0.351]],
  [0.434, [0.791, 0.399, 0.331]],
  [0.436, [0.791, 0.399, 0.331]],
  [0.438, [0.804, 0.405, 0.311]],
  [0.44, [0.804, 0.405, 0.311]],
  [0.442, [0.816, 0.411, 0.291]],
  [0.444, [0.816, 0.411, 0.291]],
  [0.446, [0.829, 0.417, 0.271]],
  [0.448, [0.829, 0.417, 0.271]],
  [0.45, [0.842, 0.423, 0.251]],
  [0.452, [0.842, 0.423, 0.251]],
  [0.454, [0.854, 0.429, 0.231]],
  [0.456, [0.854, 0.429, 0.231]],
  [0.458, [0.867, 0.435, 0.211]],
  [0.46, [0.867, 0.435, 0.211]],
  [0.462, [0.88, 0.441, 0.191]],
  [0.464, [0.88, 0.441, 0.191]],
  [0.466, [0.892, 0.447, 0.17]],
  [0.468, [0.892, 0.447, 0.17]],
  [0.47, [0.905, 0.453, 0.15]],
  [0.472, [0.905, 0.453, 0.15]],
  [0.474, [0.918, 0.459, 0.13]],
  [0.476, [0.918, 0.459, 0.13]],
  [0.477, [0.93, 0.465, 0.11]],
  [0.479, [0.93, 0.465, 0.11]],
  [0.481, [0.943, 0.471, 0.09]],
  [0.483, [0.943, 0.471, 0.09]],
  [0.485, [0.956, 0.477, 0.07]],
  [0.487, [0.956, 0.477, 0.07]],
  [0.489, [0.968, 0.483, 0.05]],
  [0.491, [0.968, 0.483, 0.05]],
  [0.493, [0.981, 0.489, 0.03]],
  [0.495, [0.981, 0.489, 0.03]],
  [0.497, [0.994, 0.495, 0.01]],
  [0.499, [0.994, 0.495, 0.01]],
  [0.501, [1, 0.506, 3e-3]],
  [0.503, [1, 0.506, 3e-3]],
  [0.505, [1, 0.522, 9e-3]],
  [0.507, [1, 0.522, 9e-3]],
  [0.509, [1, 0.537, 0.016]],
  [0.511, [1, 0.537, 0.016]],
  [0.513, [1, 0.553, 0.022]],
  [0.515, [1, 0.553, 0.022]],
  [0.517, [1, 0.569, 0.028]],
  [0.519, [1, 0.569, 0.028]],
  [0.521, [1, 0.585, 0.035]],
  [0.523, [1, 0.585, 0.035]],
  [0.524, [1, 0.6, 0.041]],
  [0.526, [1, 0.6, 0.041]],
  [0.528, [1, 0.616, 0.047]],
  [0.53, [1, 0.616, 0.047]],
  [0.532, [1, 0.632, 0.053]],
  [0.534, [1, 0.632, 0.053]],
  [0.536, [1, 0.648, 0.06]],
  [0.538, [1, 0.648, 0.06]],
  [0.54, [1, 0.663, 0.066]],
  [0.542, [1, 0.663, 0.066]],
  [0.544, [1, 0.679, 0.072]],
  [0.546, [1, 0.679, 0.072]],
  [0.548, [1, 0.695, 0.078]],
  [0.55, [1, 0.695, 0.078]],
  [0.552, [1, 0.711, 0.085]],
  [0.554, [1, 0.711, 0.085]],
  [0.556, [1, 0.726, 0.091]],
  [0.558, [1, 0.726, 0.091]],
  [0.56, [1, 0.742, 0.097]],
  [0.562, [1, 0.742, 0.097]],
  [0.564, [1, 0.758, 0.104]],
  [0.566, [1, 0.758, 0.104]],
  [0.568, [1, 0.774, 0.11]],
  [0.569, [1, 0.774, 0.11]],
  [0.571, [1, 0.789, 0.116]],
  [0.573, [1, 0.789, 0.116]],
  [0.575, [1, 0.805, 0.122]],
  [0.577, [1, 0.805, 0.122]],
  [0.579, [1, 0.821, 0.129]],
  [0.581, [1, 0.821, 0.129]],
  [0.583, [1, 0.837, 0.135]],
  [0.585, [1, 0.837, 0.135]],
  [0.587, [1, 0.852, 0.141]],
  [0.589, [1, 0.852, 0.141]],
  [0.591, [1, 0.868, 0.147]],
  [0.593, [1, 0.868, 0.147]],
  [0.595, [1, 0.884, 0.154]],
  [0.597, [1, 0.884, 0.154]],
  [0.599, [1, 0.9, 0.16]],
  [0.601, [1, 0.9, 0.16]],
  [0.603, [1, 0.915, 0.166]],
  [0.605, [1, 0.915, 0.166]],
  [0.607, [1, 0.931, 0.173]],
  [0.609, [1, 0.931, 0.173]],
  [0.611, [1, 0.947, 0.179]],
  [0.613, [1, 0.947, 0.179]],
  [0.614, [1, 0.963, 0.185]],
  [0.616, [1, 0.963, 0.185]],
  [0.618, [1, 0.978, 0.191]],
  [0.62, [1, 0.978, 0.191]],
  [0.622, [1, 0.994, 0.198]],
  [0.624, [1, 0.994, 0.198]],
  [0.626, [0.993, 0.987, 0.199]],
  [0.628, [0.993, 0.987, 0.199]],
  [0.63, [0.982, 0.966, 0.198]],
  [0.632, [0.982, 0.966, 0.198]],
  [0.634, [0.971, 0.945, 0.196]],
  [0.636, [0.971, 0.945, 0.196]],
  [0.638, [0.96, 0.925, 0.195]],
  [0.64, [0.96, 0.925, 0.195]],
  [0.642, [0.949, 0.904, 0.194]],
  [0.644, [0.949, 0.904, 0.194]],
  [0.646, [0.938, 0.883, 0.192]],
  [0.648, [0.938, 0.883, 0.192]],
  [0.65, [0.927, 0.862, 0.191]],
  [0.652, [0.927, 0.862, 0.191]],
  [0.654, [0.917, 0.841, 0.19]],
  [0.656, [0.917, 0.841, 0.19]],
  [0.658, [0.906, 0.821, 0.188]],
  [0.659, [0.906, 0.821, 0.188]],
  [0.661, [0.895, 0.8, 0.187]],
  [0.663, [0.895, 0.8, 0.187]],
  [0.665, [0.884, 0.779, 0.186]],
  [0.667, [0.884, 0.779, 0.186]],
  [0.669, [0.873, 0.758, 0.184]],
  [0.671, [0.873, 0.758, 0.184]],
  [0.673, [0.862, 0.738, 0.183]],
  [0.675, [0.862, 0.738, 0.183]],
  [0.677, [0.851, 0.717, 0.182]],
  [0.679, [0.851, 0.717, 0.182]],
  [0.681, [0.84, 0.696, 0.18]],
  [0.683, [0.84, 0.696, 0.18]],
  [0.685, [0.829, 0.675, 0.179]],
  [0.687, [0.829, 0.675, 0.179]],
  [0.689, [0.818, 0.654, 0.178]],
  [0.691, [0.818, 0.654, 0.178]],
  [0.693, [0.807, 0.634, 0.176]],
  [0.695, [0.807, 0.634, 0.176]],
  [0.697, [0.796, 0.613, 0.175]],
  [0.699, [0.796, 0.613, 0.175]],
  [0.701, [0.785, 0.592, 0.173]],
  [0.703, [0.785, 0.592, 0.173]],
  [0.705, [0.774, 0.571, 0.172]],
  [0.706, [0.774, 0.571, 0.172]],
  [0.708, [0.763, 0.55, 0.171]],
  [0.71, [0.763, 0.55, 0.171]],
  [0.712, [0.752, 0.53, 0.169]],
  [0.714, [0.752, 0.53, 0.169]],
  [0.716, [0.741, 0.509, 0.168]],
  [0.718, [0.741, 0.509, 0.168]],
  [0.72, [0.73, 0.488, 0.167]],
  [0.722, [0.73, 0.488, 0.167]],
  [0.724, [0.719, 0.467, 0.165]],
  [0.726, [0.719, 0.467, 0.165]],
  [0.728, [0.708, 0.446, 0.164]],
  [0.73, [0.708, 0.446, 0.164]],
  [0.732, [0.698, 0.426, 0.163]],
  [0.734, [0.698, 0.426, 0.163]],
  [0.736, [0.687, 0.405, 0.161]],
  [0.738, [0.687, 0.405, 0.161]],
  [0.74, [0.676, 0.384, 0.16]],
  [0.742, [0.676, 0.384, 0.16]],
  [0.744, [0.665, 0.363, 0.159]],
  [0.746, [0.665, 0.363, 0.159]],
  [0.748, [0.654, 0.342, 0.157]],
  [0.75, [0.654, 0.342, 0.157]],
  [0.751, [0.658, 0.341, 0.171]],
  [0.753, [0.658, 0.341, 0.171]],
  [0.755, [0.668, 0.347, 0.189]],
  [0.757, [0.668, 0.347, 0.189]],
  [0.759, [0.678, 0.352, 0.208]],
  [0.761, [0.678, 0.352, 0.208]],
  [0.763, [0.688, 0.357, 0.227]],
  [0.765, [0.688, 0.357, 0.227]],
  [0.767, [0.698, 0.362, 0.245]],
  [0.769, [0.698, 0.362, 0.245]],
  [0.771, [0.708, 0.368, 0.264]],
  [0.773, [0.708, 0.368, 0.264]],
  [0.775, [0.718, 0.373, 0.282]],
  [0.777, [0.718, 0.373, 0.282]],
  [0.779, [0.728, 0.378, 0.301]],
  [0.781, [0.728, 0.378, 0.301]],
  [0.783, [0.738, 0.384, 0.319]],
  [0.785, [0.738, 0.384, 0.319]],
  [0.787, [0.748, 0.389, 0.338]],
  [0.789, [0.748, 0.389, 0.338]],
  [0.791, [0.758, 0.394, 0.357]],
  [0.793, [0.758, 0.394, 0.357]],
  [0.795, [0.768, 0.399, 0.375]],
  [0.796, [0.768, 0.399, 0.375]],
  [0.798, [0.778, 0.405, 0.394]],
  [0.8, [0.778, 0.405, 0.394]],
  [0.802, [0.788, 0.41, 0.412]],
  [0.804, [0.788, 0.41, 0.412]],
  [0.806, [0.798, 0.415, 0.431]],
  [0.808, [0.798, 0.415, 0.431]],
  [0.81, [0.808, 0.421, 0.449]],
  [0.812, [0.808, 0.421, 0.449]],
  [0.814, [0.818, 0.426, 0.468]],
  [0.816, [0.818, 0.426, 0.468]],
  [0.818, [0.828, 0.431, 0.487]],
  [0.82, [0.828, 0.431, 0.487]],
  [0.822, [0.838, 0.436, 0.505]],
  [0.824, [0.838, 0.436, 0.505]],
  [0.826, [0.848, 0.442, 0.524]],
  [0.828, [0.848, 0.442, 0.524]],
  [0.83, [0.858, 0.447, 0.542]],
  [0.832, [0.858, 0.447, 0.542]],
  [0.834, [0.868, 0.452, 0.561]],
  [0.836, [0.868, 0.452, 0.561]],
  [0.838, [0.878, 0.458, 0.58]],
  [0.84, [0.878, 0.458, 0.58]],
  [0.841, [0.888, 0.463, 0.598]],
  [0.843, [0.888, 0.463, 0.598]],
  [0.845, [0.898, 0.468, 0.617]],
  [0.847, [0.898, 0.468, 0.617]],
  [0.849, [0.908, 0.473, 0.635]],
  [0.851, [0.908, 0.473, 0.635]],
  [0.853, [0.918, 0.479, 0.654]],
  [0.855, [0.918, 0.479, 0.654]],
  [0.857, [0.928, 0.484, 0.672]],
  [0.859, [0.928, 0.484, 0.672]],
  [0.861, [0.937, 0.489, 0.691]],
  [0.863, [0.937, 0.489, 0.691]],
  [0.865, [0.947, 0.495, 0.71]],
  [0.867, [0.947, 0.495, 0.71]],
  [0.869, [0.957, 0.5, 0.728]],
  [0.871, [0.957, 0.5, 0.728]],
  [0.873, [0.967, 0.505, 0.747]],
  [0.875, [0.967, 0.505, 0.747]],
  [0.877, [0.959, 0.508, 0.745]],
  [0.879, [0.959, 0.508, 0.745]],
  [0.881, [0.947, 0.511, 0.74]],
  [0.883, [0.947, 0.511, 0.74]],
  [0.885, [0.935, 0.514, 0.736]],
  [0.886, [0.935, 0.514, 0.736]],
  [0.888, [0.924, 0.517, 0.731]],
  [0.89, [0.924, 0.517, 0.731]],
  [0.892, [0.912, 0.52, 0.726]],
  [0.894, [0.912, 0.52, 0.726]],
  [0.896, [0.901, 0.523, 0.722]],
  [0.898, [0.901, 0.523, 0.722]],
  [0.9, [0.889, 0.526, 0.717]],
  [0.902, [0.889, 0.526, 0.717]],
  [0.904, [0.878, 0.529, 0.712]],
  [0.906, [0.878, 0.529, 0.712]],
  [0.908, [0.866, 0.532, 0.708]],
  [0.91, [0.866, 0.532, 0.708]],
  [0.912, [0.854, 0.535, 0.703]],
  [0.914, [0.854, 0.535, 0.703]],
  [0.916, [0.843, 0.538, 0.698]],
  [0.918, [0.843, 0.538, 0.698]],
  [0.92, [0.831, 0.541, 0.694]],
  [0.922, [0.831, 0.541, 0.694]],
  [0.924, [0.82, 0.544, 0.689]],
  [0.926, [0.82, 0.544, 0.689]],
  [0.928, [0.808, 0.547, 0.684]],
  [0.93, [0.808, 0.547, 0.684]],
  [0.932, [0.797, 0.55, 0.679]],
  [0.933, [0.797, 0.55, 0.679]],
  [0.935, [0.785, 0.553, 0.675]],
  [0.937, [0.785, 0.553, 0.675]],
  [0.939, [0.773, 0.556, 0.67]],
  [0.941, [0.773, 0.556, 0.67]],
  [0.943, [0.762, 0.559, 0.665]],
  [0.945, [0.762, 0.559, 0.665]],
  [0.947, [0.75, 0.562, 0.661]],
  [0.949, [0.75, 0.562, 0.661]],
  [0.951, [0.739, 0.565, 0.656]],
  [0.953, [0.739, 0.565, 0.656]],
  [0.955, [0.727, 0.568, 0.651]],
  [0.957, [0.727, 0.568, 0.651]],
  [0.959, [0.716, 0.57, 0.647]],
  [0.961, [0.716, 0.57, 0.647]],
  [0.963, [0.704, 0.573, 0.642]],
  [0.965, [0.704, 0.573, 0.642]],
  [0.967, [0.693, 0.576, 0.637]],
  [0.969, [0.693, 0.576, 0.637]],
  [0.971, [0.681, 0.579, 0.633]],
  [0.973, [0.681, 0.579, 0.633]],
  [0.975, [0.669, 0.582, 0.628]],
  [0.977, [0.669, 0.582, 0.628]],
  [0.978, [0.658, 0.585, 0.623]],
  [0.98, [0.658, 0.585, 0.623]],
  [0.982, [0.646, 0.588, 0.619]],
  [0.984, [0.646, 0.588, 0.619]],
  [0.986, [0.635, 0.591, 0.614]],
  [0.988, [0.635, 0.591, 0.614]],
  [0.99, [0.623, 0.594, 0.609]],
  [0.992, [0.623, 0.594, 0.609]],
  [0.994, [0.612, 0.597, 0.605]],
  [0.996, [0.612, 0.597, 0.605]],
  [0.998, [0.6, 0.6, 0.6]],
  [1, [0.6, 0.6, 0.6]]
], np = [
  [0, [0.4, 0.761, 0.647]],
  [2e-3, [0.4, 0.761, 0.647]],
  [4e-3, [0.416, 0.755, 0.64]],
  [6e-3, [0.416, 0.755, 0.64]],
  [8e-3, [0.432, 0.749, 0.633]],
  [0.01, [0.432, 0.749, 0.633]],
  [0.012, [0.448, 0.744, 0.625]],
  [0.014, [0.448, 0.744, 0.625]],
  [0.016, [0.465, 0.738, 0.618]],
  [0.018, [0.465, 0.738, 0.618]],
  [0.02, [0.481, 0.732, 0.611]],
  [0.022, [0.481, 0.732, 0.611]],
  [0.023, [0.497, 0.727, 0.604]],
  [0.025, [0.497, 0.727, 0.604]],
  [0.027, [0.513, 0.721, 0.597]],
  [0.029, [0.513, 0.721, 0.597]],
  [0.031, [0.529, 0.715, 0.589]],
  [0.033, [0.529, 0.715, 0.589]],
  [0.035, [0.545, 0.709, 0.582]],
  [0.037, [0.545, 0.709, 0.582]],
  [0.039, [0.561, 0.704, 0.575]],
  [0.041, [0.561, 0.704, 0.575]],
  [0.043, [0.578, 0.698, 0.568]],
  [0.045, [0.578, 0.698, 0.568]],
  [0.047, [0.594, 0.692, 0.561]],
  [0.049, [0.594, 0.692, 0.561]],
  [0.051, [0.61, 0.687, 0.553]],
  [0.053, [0.61, 0.687, 0.553]],
  [0.055, [0.626, 0.681, 0.546]],
  [0.057, [0.626, 0.681, 0.546]],
  [0.059, [0.642, 0.675, 0.539]],
  [0.061, [0.642, 0.675, 0.539]],
  [0.063, [0.658, 0.669, 0.532]],
  [0.065, [0.658, 0.669, 0.532]],
  [0.067, [0.675, 0.664, 0.524]],
  [0.068, [0.675, 0.664, 0.524]],
  [0.07, [0.691, 0.658, 0.517]],
  [0.072, [0.691, 0.658, 0.517]],
  [0.074, [0.707, 0.652, 0.51]],
  [0.076, [0.707, 0.652, 0.51]],
  [0.078, [0.723, 0.647, 0.503]],
  [0.08, [0.723, 0.647, 0.503]],
  [0.082, [0.739, 0.641, 0.496]],
  [0.084, [0.739, 0.641, 0.496]],
  [0.086, [0.755, 0.635, 0.488]],
  [0.088, [0.755, 0.635, 0.488]],
  [0.09, [0.771, 0.63, 0.481]],
  [0.092, [0.771, 0.63, 0.481]],
  [0.094, [0.788, 0.624, 0.474]],
  [0.096, [0.788, 0.624, 0.474]],
  [0.098, [0.804, 0.618, 0.467]],
  [0.1, [0.804, 0.618, 0.467]],
  [0.102, [0.82, 0.612, 0.46]],
  [0.104, [0.82, 0.612, 0.46]],
  [0.106, [0.836, 0.607, 0.452]],
  [0.108, [0.836, 0.607, 0.452]],
  [0.11, [0.852, 0.601, 0.445]],
  [0.112, [0.852, 0.601, 0.445]],
  [0.114, [0.868, 0.595, 0.438]],
  [0.115, [0.868, 0.595, 0.438]],
  [0.117, [0.884, 0.59, 0.431]],
  [0.119, [0.884, 0.59, 0.431]],
  [0.121, [0.901, 0.584, 0.423]],
  [0.123, [0.901, 0.584, 0.423]],
  [0.125, [0.917, 0.578, 0.416]],
  [0.127, [0.917, 0.578, 0.416]],
  [0.129, [0.933, 0.573, 0.409]],
  [0.131, [0.933, 0.573, 0.409]],
  [0.133, [0.949, 0.567, 0.402]],
  [0.135, [0.949, 0.567, 0.402]],
  [0.137, [0.965, 0.561, 0.395]],
  [0.139, [0.965, 0.561, 0.395]],
  [0.141, [0.981, 0.555, 0.387]],
  [0.143, [0.981, 0.555, 0.387]],
  [0.145, [0.981, 0.554, 0.391]],
  [0.147, [0.981, 0.554, 0.391]],
  [0.149, [0.969, 0.556, 0.402]],
  [0.151, [0.969, 0.556, 0.402]],
  [0.153, [0.958, 0.558, 0.413]],
  [0.155, [0.958, 0.558, 0.413]],
  [0.157, [0.946, 0.56, 0.425]],
  [0.159, [0.946, 0.56, 0.425]],
  [0.16, [0.934, 0.562, 0.436]],
  [0.162, [0.934, 0.562, 0.436]],
  [0.164, [0.922, 0.564, 0.447]],
  [0.166, [0.922, 0.564, 0.447]],
  [0.168, [0.91, 0.566, 0.459]],
  [0.17, [0.91, 0.566, 0.459]],
  [0.172, [0.898, 0.568, 0.47]],
  [0.174, [0.898, 0.568, 0.47]],
  [0.176, [0.886, 0.57, 0.481]],
  [0.178, [0.886, 0.57, 0.481]],
  [0.18, [0.874, 0.573, 0.493]],
  [0.182, [0.874, 0.573, 0.493]],
  [0.184, [0.862, 0.575, 0.504]],
  [0.186, [0.862, 0.575, 0.504]],
  [0.188, [0.85, 0.577, 0.515]],
  [0.19, [0.85, 0.577, 0.515]],
  [0.192, [0.838, 0.579, 0.526]],
  [0.194, [0.838, 0.579, 0.526]],
  [0.196, [0.826, 0.581, 0.538]],
  [0.198, [0.826, 0.581, 0.538]],
  [0.2, [0.814, 0.583, 0.549]],
  [0.202, [0.814, 0.583, 0.549]],
  [0.204, [0.802, 0.585, 0.56]],
  [0.205, [0.802, 0.585, 0.56]],
  [0.207, [0.79, 0.587, 0.572]],
  [0.209, [0.79, 0.587, 0.572]],
  [0.211, [0.778, 0.589, 0.583]],
  [0.213, [0.778, 0.589, 0.583]],
  [0.215, [0.766, 0.591, 0.594]],
  [0.217, [0.766, 0.591, 0.594]],
  [0.219, [0.754, 0.593, 0.606]],
  [0.221, [0.754, 0.593, 0.606]],
  [0.223, [0.742, 0.595, 0.617]],
  [0.225, [0.742, 0.595, 0.617]],
  [0.227, [0.73, 0.597, 0.628]],
  [0.229, [0.73, 0.597, 0.628]],
  [0.231, [0.719, 0.599, 0.639]],
  [0.233, [0.719, 0.599, 0.639]],
  [0.235, [0.707, 0.601, 0.651]],
  [0.237, [0.707, 0.601, 0.651]],
  [0.239, [0.695, 0.603, 0.662]],
  [0.241, [0.695, 0.603, 0.662]],
  [0.243, [0.683, 0.605, 0.673]],
  [0.245, [0.683, 0.605, 0.673]],
  [0.247, [0.671, 0.607, 0.685]],
  [0.249, [0.671, 0.607, 0.685]],
  [0.25, [0.659, 0.609, 0.696]],
  [0.252, [0.659, 0.609, 0.696]],
  [0.254, [0.647, 0.611, 0.707]],
  [0.256, [0.647, 0.611, 0.707]],
  [0.258, [0.635, 0.613, 0.719]],
  [0.26, [0.635, 0.613, 0.719]],
  [0.262, [0.623, 0.615, 0.73]],
  [0.264, [0.623, 0.615, 0.73]],
  [0.266, [0.611, 0.618, 0.741]],
  [0.268, [0.611, 0.618, 0.741]],
  [0.27, [0.599, 0.62, 0.752]],
  [0.272, [0.599, 0.62, 0.752]],
  [0.274, [0.587, 0.622, 0.764]],
  [0.276, [0.587, 0.622, 0.764]],
  [0.278, [0.575, 0.624, 0.775]],
  [0.28, [0.575, 0.624, 0.775]],
  [0.282, [0.563, 0.626, 0.786]],
  [0.284, [0.563, 0.626, 0.786]],
  [0.286, [0.554, 0.627, 0.796]],
  [0.288, [0.554, 0.627, 0.796]],
  [0.29, [0.564, 0.625, 0.795]],
  [0.292, [0.564, 0.625, 0.795]],
  [0.294, [0.574, 0.622, 0.794]],
  [0.295, [0.574, 0.622, 0.794]],
  [0.297, [0.583, 0.62, 0.793]],
  [0.299, [0.583, 0.62, 0.793]],
  [0.301, [0.593, 0.618, 0.793]],
  [0.303, [0.593, 0.618, 0.793]],
  [0.305, [0.603, 0.615, 0.792]],
  [0.307, [0.603, 0.615, 0.792]],
  [0.309, [0.612, 0.613, 0.791]],
  [0.311, [0.612, 0.613, 0.791]],
  [0.313, [0.622, 0.611, 0.79]],
  [0.315, [0.622, 0.611, 0.79]],
  [0.317, [0.632, 0.608, 0.789]],
  [0.319, [0.632, 0.608, 0.789]],
  [0.321, [0.642, 0.606, 0.788]],
  [0.323, [0.642, 0.606, 0.788]],
  [0.325, [0.651, 0.603, 0.787]],
  [0.327, [0.651, 0.603, 0.787]],
  [0.329, [0.661, 0.601, 0.786]],
  [0.331, [0.661, 0.601, 0.786]],
  [0.333, [0.671, 0.599, 0.786]],
  [0.335, [0.671, 0.599, 0.786]],
  [0.337, [0.68, 0.596, 0.785]],
  [0.339, [0.68, 0.596, 0.785]],
  [0.341, [0.69, 0.594, 0.784]],
  [0.342, [0.69, 0.594, 0.784]],
  [0.344, [0.7, 0.592, 0.783]],
  [0.346, [0.7, 0.592, 0.783]],
  [0.348, [0.709, 0.589, 0.782]],
  [0.35, [0.709, 0.589, 0.782]],
  [0.352, [0.719, 0.587, 0.781]],
  [0.354, [0.719, 0.587, 0.781]],
  [0.356, [0.729, 0.584, 0.78]],
  [0.358, [0.729, 0.584, 0.78]],
  [0.36, [0.738, 0.582, 0.78]],
  [0.362, [0.738, 0.582, 0.78]],
  [0.364, [0.748, 0.58, 0.779]],
  [0.366, [0.748, 0.58, 0.779]],
  [0.368, [0.758, 0.577, 0.778]],
  [0.37, [0.758, 0.577, 0.778]],
  [0.372, [0.767, 0.575, 0.777]],
  [0.374, [0.767, 0.575, 0.777]],
  [0.376, [0.777, 0.573, 0.776]],
  [0.378, [0.777, 0.573, 0.776]],
  [0.38, [0.787, 0.57, 0.775]],
  [0.382, [0.787, 0.57, 0.775]],
  [0.384, [0.797, 0.568, 0.774]],
  [0.386, [0.797, 0.568, 0.774]],
  [0.387, [0.806, 0.566, 0.774]],
  [0.389, [0.806, 0.566, 0.774]],
  [0.391, [0.816, 0.563, 0.773]],
  [0.393, [0.816, 0.563, 0.773]],
  [0.395, [0.826, 0.561, 0.772]],
  [0.397, [0.826, 0.561, 0.772]],
  [0.399, [0.835, 0.558, 0.771]],
  [0.401, [0.835, 0.558, 0.771]],
  [0.403, [0.845, 0.556, 0.77]],
  [0.405, [0.845, 0.556, 0.77]],
  [0.407, [0.855, 0.554, 0.769]],
  [0.409, [0.855, 0.554, 0.769]],
  [0.411, [0.864, 0.551, 0.768]],
  [0.413, [0.864, 0.551, 0.768]],
  [0.415, [0.874, 0.549, 0.768]],
  [0.417, [0.874, 0.549, 0.768]],
  [0.419, [0.884, 0.547, 0.767]],
  [0.421, [0.884, 0.547, 0.767]],
  [0.423, [0.893, 0.544, 0.766]],
  [0.425, [0.893, 0.544, 0.766]],
  [0.427, [0.903, 0.542, 0.765]],
  [0.429, [0.903, 0.542, 0.765]],
  [0.431, [0.901, 0.547, 0.756]],
  [0.432, [0.901, 0.547, 0.756]],
  [0.434, [0.894, 0.556, 0.744]],
  [0.436, [0.894, 0.556, 0.744]],
  [0.438, [0.887, 0.564, 0.732]],
  [0.44, [0.887, 0.564, 0.732]],
  [0.442, [0.88, 0.572, 0.72]],
  [0.444, [0.88, 0.572, 0.72]],
  [0.446, [0.873, 0.581, 0.708]],
  [0.448, [0.873, 0.581, 0.708]],
  [0.45, [0.866, 0.589, 0.696]],
  [0.452, [0.866, 0.589, 0.696]],
  [0.454, [0.859, 0.598, 0.684]],
  [0.456, [0.859, 0.598, 0.684]],
  [0.458, [0.852, 0.606, 0.673]],
  [0.46, [0.852, 0.606, 0.673]],
  [0.462, [0.845, 0.614, 0.661]],
  [0.464, [0.845, 0.614, 0.661]],
  [0.466, [0.838, 0.623, 0.649]],
  [0.468, [0.838, 0.623, 0.649]],
  [0.47, [0.831, 0.631, 0.637]],
  [0.472, [0.831, 0.631, 0.637]],
  [0.474, [0.824, 0.64, 0.625]],
  [0.476, [0.824, 0.64, 0.625]],
  [0.477, [0.817, 0.648, 0.613]],
  [0.479, [0.817, 0.648, 0.613]],
  [0.481, [0.81, 0.656, 0.601]],
  [0.483, [0.81, 0.656, 0.601]],
  [0.485, [0.803, 0.665, 0.589]],
  [0.487, [0.803, 0.665, 0.589]],
  [0.489, [0.796, 0.673, 0.577]],
  [0.491, [0.796, 0.673, 0.577]],
  [0.493, [0.789, 0.682, 0.565]],
  [0.495, [0.789, 0.682, 0.565]],
  [0.497, [0.782, 0.69, 0.553]],
  [0.499, [0.782, 0.69, 0.553]],
  [0.501, [0.775, 0.698, 0.541]],
  [0.503, [0.775, 0.698, 0.541]],
  [0.505, [0.768, 0.707, 0.529]],
  [0.507, [0.768, 0.707, 0.529]],
  [0.509, [0.761, 0.715, 0.517]],
  [0.511, [0.761, 0.715, 0.517]],
  [0.513, [0.754, 0.724, 0.505]],
  [0.515, [0.754, 0.724, 0.505]],
  [0.517, [0.747, 0.732, 0.493]],
  [0.519, [0.747, 0.732, 0.493]],
  [0.521, [0.74, 0.74, 0.481]],
  [0.523, [0.74, 0.74, 0.481]],
  [0.524, [0.733, 0.749, 0.469]],
  [0.526, [0.733, 0.749, 0.469]],
  [0.528, [0.726, 0.757, 0.457]],
  [0.53, [0.726, 0.757, 0.457]],
  [0.532, [0.719, 0.765, 0.445]],
  [0.534, [0.719, 0.765, 0.445]],
  [0.536, [0.712, 0.774, 0.434]],
  [0.538, [0.712, 0.774, 0.434]],
  [0.54, [0.705, 0.782, 0.422]],
  [0.542, [0.705, 0.782, 0.422]],
  [0.544, [0.698, 0.791, 0.41]],
  [0.546, [0.698, 0.791, 0.41]],
  [0.548, [0.691, 0.799, 0.398]],
  [0.55, [0.691, 0.799, 0.398]],
  [0.552, [0.684, 0.807, 0.386]],
  [0.554, [0.684, 0.807, 0.386]],
  [0.556, [0.677, 0.816, 0.374]],
  [0.558, [0.677, 0.816, 0.374]],
  [0.56, [0.67, 0.824, 0.362]],
  [0.562, [0.67, 0.824, 0.362]],
  [0.564, [0.663, 0.833, 0.35]],
  [0.566, [0.663, 0.833, 0.35]],
  [0.568, [0.656, 0.841, 0.338]],
  [0.569, [0.656, 0.841, 0.338]],
  [0.571, [0.654, 0.847, 0.328]],
  [0.573, [0.654, 0.847, 0.328]],
  [0.575, [0.663, 0.847, 0.324]],
  [0.577, [0.663, 0.847, 0.324]],
  [0.579, [0.673, 0.847, 0.32]],
  [0.581, [0.673, 0.847, 0.32]],
  [0.583, [0.682, 0.847, 0.316]],
  [0.585, [0.682, 0.847, 0.316]],
  [0.587, [0.692, 0.848, 0.312]],
  [0.589, [0.692, 0.848, 0.312]],
  [0.591, [0.702, 0.848, 0.308]],
  [0.593, [0.702, 0.848, 0.308]],
  [0.595, [0.711, 0.848, 0.304]],
  [0.597, [0.711, 0.848, 0.304]],
  [0.599, [0.721, 0.848, 0.3]],
  [0.601, [0.721, 0.848, 0.3]],
  [0.603, [0.73, 0.848, 0.296]],
  [0.605, [0.73, 0.848, 0.296]],
  [0.607, [0.74, 0.848, 0.292]],
  [0.609, [0.74, 0.848, 0.292]],
  [0.611, [0.75, 0.848, 0.288]],
  [0.613, [0.75, 0.848, 0.288]],
  [0.614, [0.759, 0.848, 0.284]],
  [0.616, [0.759, 0.848, 0.284]],
  [0.618, [0.769, 0.848, 0.28]],
  [0.62, [0.769, 0.848, 0.28]],
  [0.622, [0.778, 0.848, 0.276]],
  [0.624, [0.778, 0.848, 0.276]],
  [0.626, [0.788, 0.849, 0.273]],
  [0.628, [0.788, 0.849, 0.273]],
  [0.63, [0.797, 0.849, 0.269]],
  [0.632, [0.797, 0.849, 0.269]],
  [0.634, [0.807, 0.849, 0.265]],
  [0.636, [0.807, 0.849, 0.265]],
  [0.638, [0.817, 0.849, 0.261]],
  [0.64, [0.817, 0.849, 0.261]],
  [0.642, [0.826, 0.849, 0.257]],
  [0.644, [0.826, 0.849, 0.257]],
  [0.646, [0.836, 0.849, 0.253]],
  [0.648, [0.836, 0.849, 0.253]],
  [0.65, [0.845, 0.849, 0.249]],
  [0.652, [0.845, 0.849, 0.249]],
  [0.654, [0.855, 0.849, 0.245]],
  [0.656, [0.855, 0.849, 0.245]],
  [0.658, [0.864, 0.849, 0.241]],
  [0.659, [0.864, 0.849, 0.241]],
  [0.661, [0.874, 0.85, 0.237]],
  [0.663, [0.874, 0.85, 0.237]],
  [0.665, [0.884, 0.85, 0.233]],
  [0.667, [0.884, 0.85, 0.233]],
  [0.669, [0.893, 0.85, 0.229]],
  [0.671, [0.893, 0.85, 0.229]],
  [0.673, [0.903, 0.85, 0.225]],
  [0.675, [0.903, 0.85, 0.225]],
  [0.677, [0.912, 0.85, 0.221]],
  [0.679, [0.912, 0.85, 0.221]],
  [0.681, [0.922, 0.85, 0.217]],
  [0.683, [0.922, 0.85, 0.217]],
  [0.685, [0.932, 0.85, 0.213]],
  [0.687, [0.932, 0.85, 0.213]],
  [0.689, [0.941, 0.85, 0.209]],
  [0.691, [0.941, 0.85, 0.209]],
  [0.693, [0.951, 0.85, 0.205]],
  [0.695, [0.951, 0.85, 0.205]],
  [0.697, [0.96, 0.851, 0.201]],
  [0.699, [0.96, 0.851, 0.201]],
  [0.701, [0.97, 0.851, 0.197]],
  [0.703, [0.97, 0.851, 0.197]],
  [0.705, [0.979, 0.851, 0.193]],
  [0.706, [0.979, 0.851, 0.193]],
  [0.708, [0.989, 0.851, 0.189]],
  [0.71, [0.989, 0.851, 0.189]],
  [0.712, [0.999, 0.851, 0.185]],
  [0.714, [0.999, 0.851, 0.185]],
  [0.716, [0.998, 0.849, 0.194]],
  [0.718, [0.998, 0.849, 0.194]],
  [0.72, [0.995, 0.847, 0.205]],
  [0.722, [0.995, 0.847, 0.205]],
  [0.724, [0.992, 0.845, 0.215]],
  [0.726, [0.992, 0.845, 0.215]],
  [0.728, [0.989, 0.842, 0.226]],
  [0.73, [0.989, 0.842, 0.226]],
  [0.732, [0.986, 0.84, 0.237]],
  [0.734, [0.986, 0.84, 0.237]],
  [0.736, [0.984, 0.838, 0.248]],
  [0.738, [0.984, 0.838, 0.248]],
  [0.74, [0.981, 0.835, 0.259]],
  [0.742, [0.981, 0.835, 0.259]],
  [0.744, [0.978, 0.833, 0.27]],
  [0.746, [0.978, 0.833, 0.27]],
  [0.748, [0.975, 0.831, 0.281]],
  [0.75, [0.975, 0.831, 0.281]],
  [0.751, [0.972, 0.829, 0.291]],
  [0.753, [0.972, 0.829, 0.291]],
  [0.755, [0.97, 0.826, 0.302]],
  [0.757, [0.97, 0.826, 0.302]],
  [0.759, [0.967, 0.824, 0.313]],
  [0.761, [0.967, 0.824, 0.313]],
  [0.763, [0.964, 0.822, 0.324]],
  [0.765, [0.964, 0.822, 0.324]],
  [0.767, [0.961, 0.82, 0.335]],
  [0.769, [0.961, 0.82, 0.335]],
  [0.771, [0.958, 0.817, 0.346]],
  [0.773, [0.958, 0.817, 0.346]],
  [0.775, [0.956, 0.815, 0.357]],
  [0.777, [0.956, 0.815, 0.357]],
  [0.779, [0.953, 0.813, 0.368]],
  [0.781, [0.953, 0.813, 0.368]],
  [0.783, [0.95, 0.811, 0.378]],
  [0.785, [0.95, 0.811, 0.378]],
  [0.787, [0.947, 0.808, 0.389]],
  [0.789, [0.947, 0.808, 0.389]],
  [0.791, [0.944, 0.806, 0.4]],
  [0.793, [0.944, 0.806, 0.4]],
  [0.795, [0.942, 0.804, 0.411]],
  [0.796, [0.942, 0.804, 0.411]],
  [0.798, [0.939, 0.802, 0.422]],
  [0.8, [0.939, 0.802, 0.422]],
  [0.802, [0.936, 0.799, 0.433]],
  [0.804, [0.936, 0.799, 0.433]],
  [0.806, [0.933, 0.797, 0.444]],
  [0.808, [0.933, 0.797, 0.444]],
  [0.81, [0.93, 0.795, 0.455]],
  [0.812, [0.93, 0.795, 0.455]],
  [0.814, [0.928, 0.793, 0.465]],
  [0.816, [0.928, 0.793, 0.465]],
  [0.818, [0.925, 0.79, 0.476]],
  [0.82, [0.925, 0.79, 0.476]],
  [0.822, [0.922, 0.788, 0.487]],
  [0.824, [0.922, 0.788, 0.487]],
  [0.826, [0.919, 0.786, 0.498]],
  [0.828, [0.919, 0.786, 0.498]],
  [0.83, [0.916, 0.783, 0.509]],
  [0.832, [0.916, 0.783, 0.509]],
  [0.834, [0.914, 0.781, 0.52]],
  [0.836, [0.914, 0.781, 0.52]],
  [0.838, [0.911, 0.779, 0.531]],
  [0.84, [0.911, 0.779, 0.531]],
  [0.841, [0.908, 0.777, 0.542]],
  [0.843, [0.908, 0.777, 0.542]],
  [0.845, [0.905, 0.774, 0.552]],
  [0.847, [0.905, 0.774, 0.552]],
  [0.849, [0.902, 0.772, 0.563]],
  [0.851, [0.902, 0.772, 0.563]],
  [0.853, [0.9, 0.77, 0.574]],
  [0.855, [0.9, 0.77, 0.574]],
  [0.857, [0.896, 0.768, 0.582]],
  [0.859, [0.896, 0.768, 0.582]],
  [0.861, [0.89, 0.766, 0.585]],
  [0.863, [0.89, 0.766, 0.585]],
  [0.865, [0.885, 0.764, 0.588]],
  [0.867, [0.885, 0.764, 0.588]],
  [0.869, [0.88, 0.762, 0.592]],
  [0.871, [0.88, 0.762, 0.592]],
  [0.873, [0.874, 0.761, 0.595]],
  [0.875, [0.874, 0.761, 0.595]],
  [0.877, [0.869, 0.759, 0.599]],
  [0.879, [0.869, 0.759, 0.599]],
  [0.881, [0.863, 0.757, 0.602]],
  [0.883, [0.863, 0.757, 0.602]],
  [0.885, [0.858, 0.755, 0.605]],
  [0.886, [0.858, 0.755, 0.605]],
  [0.888, [0.853, 0.753, 0.609]],
  [0.89, [0.853, 0.753, 0.609]],
  [0.892, [0.847, 0.751, 0.612]],
  [0.894, [0.847, 0.751, 0.612]],
  [0.896, [0.842, 0.75, 0.615]],
  [0.898, [0.842, 0.75, 0.615]],
  [0.9, [0.837, 0.748, 0.619]],
  [0.902, [0.837, 0.748, 0.619]],
  [0.904, [0.831, 0.746, 0.622]],
  [0.906, [0.831, 0.746, 0.622]],
  [0.908, [0.826, 0.744, 0.625]],
  [0.91, [0.826, 0.744, 0.625]],
  [0.912, [0.82, 0.742, 0.629]],
  [0.914, [0.82, 0.742, 0.629]],
  [0.916, [0.815, 0.74, 0.632]],
  [0.918, [0.815, 0.74, 0.632]],
  [0.92, [0.81, 0.739, 0.635]],
  [0.922, [0.81, 0.739, 0.635]],
  [0.924, [0.804, 0.737, 0.639]],
  [0.926, [0.804, 0.737, 0.639]],
  [0.928, [0.799, 0.735, 0.642]],
  [0.93, [0.799, 0.735, 0.642]],
  [0.932, [0.793, 0.733, 0.645]],
  [0.933, [0.793, 0.733, 0.645]],
  [0.935, [0.788, 0.731, 0.649]],
  [0.937, [0.788, 0.731, 0.649]],
  [0.939, [0.783, 0.729, 0.652]],
  [0.941, [0.783, 0.729, 0.652]],
  [0.943, [0.777, 0.728, 0.655]],
  [0.945, [0.777, 0.728, 0.655]],
  [0.947, [0.772, 0.726, 0.659]],
  [0.949, [0.772, 0.726, 0.659]],
  [0.951, [0.767, 0.724, 0.662]],
  [0.953, [0.767, 0.724, 0.662]],
  [0.955, [0.761, 0.722, 0.665]],
  [0.957, [0.761, 0.722, 0.665]],
  [0.959, [0.756, 0.72, 0.669]],
  [0.961, [0.756, 0.72, 0.669]],
  [0.963, [0.75, 0.718, 0.672]],
  [0.965, [0.75, 0.718, 0.672]],
  [0.967, [0.745, 0.717, 0.675]],
  [0.969, [0.745, 0.717, 0.675]],
  [0.971, [0.74, 0.715, 0.679]],
  [0.973, [0.74, 0.715, 0.679]],
  [0.975, [0.734, 0.713, 0.682]],
  [0.977, [0.734, 0.713, 0.682]],
  [0.978, [0.729, 0.711, 0.685]],
  [0.98, [0.729, 0.711, 0.685]],
  [0.982, [0.723, 0.709, 0.689]],
  [0.984, [0.723, 0.709, 0.689]],
  [0.986, [0.718, 0.707, 0.692]],
  [0.988, [0.718, 0.707, 0.692]],
  [0.99, [0.713, 0.706, 0.695]],
  [0.992, [0.713, 0.706, 0.695]],
  [0.994, [0.707, 0.704, 0.699]],
  [0.996, [0.707, 0.704, 0.699]],
  [0.998, [0.702, 0.702, 0.702]],
  [1, [0.702, 0.702, 0.702]]
], ip = [
  [0, [0.553, 0.827, 0.78]],
  [2e-3, [0.553, 0.827, 0.78]],
  [4e-3, [0.572, 0.835, 0.777]],
  [6e-3, [0.572, 0.835, 0.777]],
  [8e-3, [0.592, 0.842, 0.774]],
  [0.01, [0.592, 0.842, 0.774]],
  [0.012, [0.611, 0.85, 0.77]],
  [0.014, [0.611, 0.85, 0.77]],
  [0.016, [0.63, 0.857, 0.767]],
  [0.018, [0.63, 0.857, 0.767]],
  [0.02, [0.649, 0.865, 0.763]],
  [0.022, [0.649, 0.865, 0.763]],
  [0.023, [0.669, 0.872, 0.76]],
  [0.025, [0.669, 0.872, 0.76]],
  [0.027, [0.688, 0.88, 0.757]],
  [0.029, [0.688, 0.88, 0.757]],
  [0.031, [0.707, 0.887, 0.753]],
  [0.033, [0.707, 0.887, 0.753]],
  [0.035, [0.727, 0.894, 0.75]],
  [0.037, [0.727, 0.894, 0.75]],
  [0.039, [0.746, 0.902, 0.747]],
  [0.041, [0.746, 0.902, 0.747]],
  [0.043, [0.765, 0.909, 0.743]],
  [0.045, [0.765, 0.909, 0.743]],
  [0.047, [0.784, 0.917, 0.74]],
  [0.049, [0.784, 0.917, 0.74]],
  [0.051, [0.804, 0.924, 0.736]],
  [0.053, [0.804, 0.924, 0.736]],
  [0.055, [0.823, 0.932, 0.733]],
  [0.057, [0.823, 0.932, 0.733]],
  [0.059, [0.842, 0.939, 0.73]],
  [0.061, [0.842, 0.939, 0.73]],
  [0.063, [0.861, 0.947, 0.726]],
  [0.065, [0.861, 0.947, 0.726]],
  [0.067, [0.881, 0.954, 0.723]],
  [0.068, [0.881, 0.954, 0.723]],
  [0.07, [0.9, 0.961, 0.719]],
  [0.072, [0.9, 0.961, 0.719]],
  [0.074, [0.919, 0.969, 0.716]],
  [0.076, [0.919, 0.969, 0.716]],
  [0.078, [0.939, 0.976, 0.713]],
  [0.08, [0.939, 0.976, 0.713]],
  [0.082, [0.958, 0.984, 0.709]],
  [0.084, [0.958, 0.984, 0.709]],
  [0.086, [0.977, 0.991, 0.706]],
  [0.088, [0.977, 0.991, 0.706]],
  [0.09, [0.996, 0.999, 0.703]],
  [0.092, [0.996, 0.999, 0.703]],
  [0.094, [0.991, 0.99, 0.707]],
  [0.096, [0.991, 0.99, 0.707]],
  [0.098, [0.98, 0.979, 0.714]],
  [0.1, [0.98, 0.979, 0.714]],
  [0.102, [0.969, 0.967, 0.721]],
  [0.104, [0.969, 0.967, 0.721]],
  [0.106, [0.958, 0.955, 0.727]],
  [0.108, [0.958, 0.955, 0.727]],
  [0.11, [0.947, 0.944, 0.734]],
  [0.112, [0.947, 0.944, 0.734]],
  [0.114, [0.936, 0.932, 0.74]],
  [0.115, [0.936, 0.932, 0.74]],
  [0.117, [0.925, 0.92, 0.747]],
  [0.119, [0.925, 0.92, 0.747]],
  [0.121, [0.914, 0.909, 0.754]],
  [0.123, [0.914, 0.909, 0.754]],
  [0.125, [0.903, 0.897, 0.76]],
  [0.127, [0.903, 0.897, 0.76]],
  [0.129, [0.892, 0.885, 0.767]],
  [0.131, [0.892, 0.885, 0.767]],
  [0.133, [0.881, 0.874, 0.773]],
  [0.135, [0.881, 0.874, 0.773]],
  [0.137, [0.87, 0.862, 0.78]],
  [0.139, [0.87, 0.862, 0.78]],
  [0.141, [0.859, 0.85, 0.787]],
  [0.143, [0.859, 0.85, 0.787]],
  [0.145, [0.848, 0.839, 0.793]],
  [0.147, [0.848, 0.839, 0.793]],
  [0.149, [0.837, 0.827, 0.8]],
  [0.151, [0.837, 0.827, 0.8]],
  [0.153, [0.826, 0.815, 0.806]],
  [0.155, [0.826, 0.815, 0.806]],
  [0.157, [0.815, 0.804, 0.813]],
  [0.159, [0.815, 0.804, 0.813]],
  [0.16, [0.804, 0.792, 0.82]],
  [0.162, [0.804, 0.792, 0.82]],
  [0.164, [0.793, 0.78, 0.826]],
  [0.166, [0.793, 0.78, 0.826]],
  [0.168, [0.782, 0.769, 0.833]],
  [0.17, [0.782, 0.769, 0.833]],
  [0.172, [0.771, 0.757, 0.839]],
  [0.174, [0.771, 0.757, 0.839]],
  [0.176, [0.76, 0.745, 0.846]],
  [0.178, [0.76, 0.745, 0.846]],
  [0.18, [0.749, 0.734, 0.853]],
  [0.182, [0.749, 0.734, 0.853]],
  [0.184, [0.752, 0.723, 0.844]],
  [0.186, [0.752, 0.723, 0.844]],
  [0.188, [0.762, 0.713, 0.826]],
  [0.19, [0.762, 0.713, 0.826]],
  [0.192, [0.772, 0.704, 0.809]],
  [0.194, [0.772, 0.704, 0.809]],
  [0.196, [0.783, 0.694, 0.791]],
  [0.198, [0.783, 0.694, 0.791]],
  [0.2, [0.793, 0.684, 0.773]],
  [0.202, [0.793, 0.684, 0.773]],
  [0.204, [0.803, 0.674, 0.756]],
  [0.205, [0.803, 0.674, 0.756]],
  [0.207, [0.814, 0.664, 0.738]],
  [0.209, [0.814, 0.664, 0.738]],
  [0.211, [0.824, 0.654, 0.721]],
  [0.213, [0.824, 0.654, 0.721]],
  [0.215, [0.834, 0.645, 0.703]],
  [0.217, [0.834, 0.645, 0.703]],
  [0.219, [0.845, 0.635, 0.685]],
  [0.221, [0.845, 0.635, 0.685]],
  [0.223, [0.855, 0.625, 0.668]],
  [0.225, [0.855, 0.625, 0.668]],
  [0.227, [0.865, 0.615, 0.65]],
  [0.229, [0.865, 0.615, 0.65]],
  [0.231, [0.875, 0.605, 0.633]],
  [0.233, [0.875, 0.605, 0.633]],
  [0.235, [0.886, 0.596, 0.615]],
  [0.237, [0.886, 0.596, 0.615]],
  [0.239, [0.896, 0.586, 0.597]],
  [0.241, [0.896, 0.586, 0.597]],
  [0.243, [0.906, 0.576, 0.58]],
  [0.245, [0.906, 0.576, 0.58]],
  [0.247, [0.917, 0.566, 0.562]],
  [0.249, [0.917, 0.566, 0.562]],
  [0.25, [0.927, 0.556, 0.545]],
  [0.252, [0.927, 0.556, 0.545]],
  [0.254, [0.937, 0.547, 0.527]],
  [0.256, [0.937, 0.547, 0.527]],
  [0.258, [0.948, 0.537, 0.509]],
  [0.26, [0.948, 0.537, 0.509]],
  [0.262, [0.958, 0.527, 0.492]],
  [0.264, [0.958, 0.527, 0.492]],
  [0.266, [0.968, 0.517, 0.474]],
  [0.268, [0.968, 0.517, 0.474]],
  [0.27, [0.979, 0.507, 0.457]],
  [0.272, [0.979, 0.507, 0.457]],
  [0.274, [0.975, 0.506, 0.455]],
  [0.276, [0.975, 0.506, 0.455]],
  [0.278, [0.954, 0.514, 0.471]],
  [0.28, [0.954, 0.514, 0.471]],
  [0.282, [0.933, 0.522, 0.487]],
  [0.284, [0.933, 0.522, 0.487]],
  [0.286, [0.912, 0.531, 0.504]],
  [0.288, [0.912, 0.531, 0.504]],
  [0.29, [0.892, 0.539, 0.52]],
  [0.292, [0.892, 0.539, 0.52]],
  [0.294, [0.871, 0.547, 0.537]],
  [0.295, [0.871, 0.547, 0.537]],
  [0.297, [0.85, 0.555, 0.553]],
  [0.299, [0.85, 0.555, 0.553]],
  [0.301, [0.829, 0.564, 0.569]],
  [0.303, [0.829, 0.564, 0.569]],
  [0.305, [0.808, 0.572, 0.586]],
  [0.307, [0.808, 0.572, 0.586]],
  [0.309, [0.788, 0.58, 0.602]],
  [0.311, [0.788, 0.58, 0.602]],
  [0.313, [0.767, 0.589, 0.619]],
  [0.315, [0.767, 0.589, 0.619]],
  [0.317, [0.746, 0.597, 0.635]],
  [0.319, [0.746, 0.597, 0.635]],
  [0.321, [0.725, 0.605, 0.651]],
  [0.323, [0.725, 0.605, 0.651]],
  [0.325, [0.704, 0.613, 0.668]],
  [0.327, [0.704, 0.613, 0.668]],
  [0.329, [0.684, 0.622, 0.684]],
  [0.331, [0.684, 0.622, 0.684]],
  [0.333, [0.663, 0.63, 0.701]],
  [0.335, [0.663, 0.63, 0.701]],
  [0.337, [0.642, 0.638, 0.717]],
  [0.339, [0.642, 0.638, 0.717]],
  [0.341, [0.621, 0.647, 0.733]],
  [0.342, [0.621, 0.647, 0.733]],
  [0.344, [0.6, 0.655, 0.75]],
  [0.346, [0.6, 0.655, 0.75]],
  [0.348, [0.58, 0.663, 0.766]],
  [0.35, [0.58, 0.663, 0.766]],
  [0.352, [0.559, 0.672, 0.783]],
  [0.354, [0.559, 0.672, 0.783]],
  [0.356, [0.538, 0.68, 0.799]],
  [0.358, [0.538, 0.68, 0.799]],
  [0.36, [0.517, 0.688, 0.816]],
  [0.362, [0.517, 0.688, 0.816]],
  [0.364, [0.508, 0.694, 0.822]],
  [0.366, [0.508, 0.694, 0.822]],
  [0.368, [0.529, 0.695, 0.803]],
  [0.37, [0.529, 0.695, 0.803]],
  [0.372, [0.55, 0.695, 0.784]],
  [0.374, [0.55, 0.695, 0.784]],
  [0.376, [0.571, 0.696, 0.765]],
  [0.378, [0.571, 0.696, 0.765]],
  [0.38, [0.592, 0.696, 0.746]],
  [0.382, [0.592, 0.696, 0.746]],
  [0.384, [0.613, 0.697, 0.727]],
  [0.386, [0.613, 0.697, 0.727]],
  [0.387, [0.635, 0.697, 0.708]],
  [0.389, [0.635, 0.697, 0.708]],
  [0.391, [0.656, 0.698, 0.688]],
  [0.393, [0.656, 0.698, 0.688]],
  [0.395, [0.677, 0.698, 0.669]],
  [0.397, [0.677, 0.698, 0.669]],
  [0.399, [0.698, 0.699, 0.65]],
  [0.401, [0.698, 0.699, 0.65]],
  [0.403, [0.719, 0.699, 0.631]],
  [0.405, [0.719, 0.699, 0.631]],
  [0.407, [0.74, 0.7, 0.612]],
  [0.409, [0.74, 0.7, 0.612]],
  [0.411, [0.761, 0.7, 0.593]],
  [0.413, [0.761, 0.7, 0.593]],
  [0.415, [0.783, 0.701, 0.574]],
  [0.417, [0.783, 0.701, 0.574]],
  [0.419, [0.804, 0.701, 0.555]],
  [0.421, [0.804, 0.701, 0.555]],
  [0.423, [0.825, 0.702, 0.536]],
  [0.425, [0.825, 0.702, 0.536]],
  [0.427, [0.846, 0.702, 0.516]],
  [0.429, [0.846, 0.702, 0.516]],
  [0.431, [0.867, 0.703, 0.497]],
  [0.432, [0.867, 0.703, 0.497]],
  [0.434, [0.888, 0.703, 0.478]],
  [0.436, [0.888, 0.703, 0.478]],
  [0.438, [0.909, 0.704, 0.459]],
  [0.44, [0.909, 0.704, 0.459]],
  [0.442, [0.931, 0.704, 0.44]],
  [0.444, [0.931, 0.704, 0.44]],
  [0.446, [0.952, 0.705, 0.421]],
  [0.448, [0.952, 0.705, 0.421]],
  [0.45, [0.973, 0.705, 0.402]],
  [0.452, [0.973, 0.705, 0.402]],
  [0.454, [0.991, 0.707, 0.384]],
  [0.456, [0.991, 0.707, 0.384]],
  [0.458, [0.979, 0.714, 0.386]],
  [0.46, [0.979, 0.714, 0.386]],
  [0.462, [0.966, 0.721, 0.387]],
  [0.464, [0.966, 0.721, 0.387]],
  [0.466, [0.953, 0.728, 0.388]],
  [0.468, [0.953, 0.728, 0.388]],
  [0.47, [0.941, 0.735, 0.389]],
  [0.472, [0.941, 0.735, 0.389]],
  [0.474, [0.928, 0.742, 0.39]],
  [0.476, [0.928, 0.742, 0.39]],
  [0.477, [0.916, 0.749, 0.392]],
  [0.479, [0.916, 0.749, 0.392]],
  [0.481, [0.903, 0.756, 0.393]],
  [0.483, [0.903, 0.756, 0.393]],
  [0.485, [0.891, 0.763, 0.394]],
  [0.487, [0.891, 0.763, 0.394]],
  [0.489, [0.878, 0.77, 0.395]],
  [0.491, [0.878, 0.77, 0.395]],
  [0.493, [0.866, 0.778, 0.396]],
  [0.495, [0.866, 0.778, 0.396]],
  [0.497, [0.853, 0.785, 0.397]],
  [0.499, [0.853, 0.785, 0.397]],
  [0.501, [0.841, 0.792, 0.399]],
  [0.503, [0.841, 0.792, 0.399]],
  [0.505, [0.828, 0.799, 0.4]],
  [0.507, [0.828, 0.799, 0.4]],
  [0.509, [0.816, 0.806, 0.401]],
  [0.511, [0.816, 0.806, 0.401]],
  [0.513, [0.803, 0.813, 0.402]],
  [0.515, [0.803, 0.813, 0.402]],
  [0.517, [0.791, 0.82, 0.403]],
  [0.519, [0.791, 0.82, 0.403]],
  [0.521, [0.778, 0.827, 0.405]],
  [0.523, [0.778, 0.827, 0.405]],
  [0.524, [0.766, 0.834, 0.406]],
  [0.526, [0.766, 0.834, 0.406]],
  [0.528, [0.753, 0.842, 0.407]],
  [0.53, [0.753, 0.842, 0.407]],
  [0.532, [0.741, 0.849, 0.408]],
  [0.534, [0.741, 0.849, 0.408]],
  [0.536, [0.728, 0.856, 0.409]],
  [0.538, [0.728, 0.856, 0.409]],
  [0.54, [0.716, 0.863, 0.41]],
  [0.542, [0.716, 0.863, 0.41]],
  [0.544, [0.703, 0.87, 0.412]],
  [0.546, [0.703, 0.87, 0.412]],
  [0.548, [0.713, 0.868, 0.431]],
  [0.55, [0.713, 0.868, 0.431]],
  [0.552, [0.726, 0.865, 0.452]],
  [0.554, [0.726, 0.865, 0.452]],
  [0.556, [0.738, 0.862, 0.473]],
  [0.558, [0.738, 0.862, 0.473]],
  [0.56, [0.75, 0.859, 0.494]],
  [0.562, [0.75, 0.859, 0.494]],
  [0.564, [0.763, 0.856, 0.515]],
  [0.566, [0.763, 0.856, 0.515]],
  [0.568, [0.775, 0.854, 0.536]],
  [0.569, [0.775, 0.854, 0.536]],
  [0.571, [0.787, 0.851, 0.557]],
  [0.573, [0.787, 0.851, 0.557]],
  [0.575, [0.8, 0.848, 0.578]],
  [0.577, [0.8, 0.848, 0.578]],
  [0.579, [0.812, 0.845, 0.599]],
  [0.581, [0.812, 0.845, 0.599]],
  [0.583, [0.824, 0.842, 0.62]],
  [0.585, [0.824, 0.842, 0.62]],
  [0.587, [0.837, 0.839, 0.641]],
  [0.589, [0.837, 0.839, 0.641]],
  [0.591, [0.849, 0.836, 0.662]],
  [0.593, [0.849, 0.836, 0.662]],
  [0.595, [0.861, 0.833, 0.683]],
  [0.597, [0.861, 0.833, 0.683]],
  [0.599, [0.874, 0.831, 0.704]],
  [0.601, [0.874, 0.831, 0.704]],
  [0.603, [0.886, 0.828, 0.725]],
  [0.605, [0.886, 0.828, 0.725]],
  [0.607, [0.898, 0.825, 0.745]],
  [0.609, [0.898, 0.825, 0.745]],
  [0.611, [0.911, 0.822, 0.766]],
  [0.613, [0.911, 0.822, 0.766]],
  [0.614, [0.923, 0.819, 0.787]],
  [0.616, [0.923, 0.819, 0.787]],
  [0.618, [0.935, 0.816, 0.808]],
  [0.62, [0.935, 0.816, 0.808]],
  [0.622, [0.948, 0.813, 0.829]],
  [0.624, [0.948, 0.813, 0.829]],
  [0.626, [0.96, 0.81, 0.85]],
  [0.628, [0.96, 0.81, 0.85]],
  [0.63, [0.973, 0.808, 0.871]],
  [0.632, [0.973, 0.808, 0.871]],
  [0.634, [0.985, 0.805, 0.892]],
  [0.636, [0.985, 0.805, 0.892]],
  [0.638, [0.984, 0.805, 0.897]],
  [0.64, [0.984, 0.805, 0.897]],
  [0.642, [0.978, 0.807, 0.895]],
  [0.644, [0.978, 0.807, 0.895]],
  [0.646, [0.972, 0.809, 0.893]],
  [0.648, [0.972, 0.809, 0.893]],
  [0.65, [0.966, 0.811, 0.89]],
  [0.652, [0.966, 0.811, 0.89]],
  [0.654, [0.96, 0.814, 0.888]],
  [0.656, [0.96, 0.814, 0.888]],
  [0.658, [0.954, 0.816, 0.886]],
  [0.659, [0.954, 0.816, 0.886]],
  [0.661, [0.948, 0.818, 0.884]],
  [0.663, [0.948, 0.818, 0.884]],
  [0.665, [0.942, 0.82, 0.882]],
  [0.667, [0.942, 0.82, 0.882]],
  [0.669, [0.937, 0.822, 0.88]],
  [0.671, [0.937, 0.822, 0.88]],
  [0.673, [0.931, 0.824, 0.878]],
  [0.675, [0.931, 0.824, 0.878]],
  [0.677, [0.925, 0.826, 0.876]],
  [0.679, [0.925, 0.826, 0.876]],
  [0.681, [0.919, 0.828, 0.874]],
  [0.683, [0.919, 0.828, 0.874]],
  [0.685, [0.913, 0.83, 0.872]],
  [0.687, [0.913, 0.83, 0.872]],
  [0.689, [0.907, 0.832, 0.87]],
  [0.691, [0.907, 0.832, 0.87]],
  [0.693, [0.901, 0.834, 0.868]],
  [0.695, [0.901, 0.834, 0.868]],
  [0.697, [0.895, 0.836, 0.866]],
  [0.699, [0.895, 0.836, 0.866]],
  [0.701, [0.889, 0.838, 0.864]],
  [0.703, [0.889, 0.838, 0.864]],
  [0.705, [0.883, 0.84, 0.862]],
  [0.706, [0.883, 0.84, 0.862]],
  [0.708, [0.877, 0.842, 0.86]],
  [0.71, [0.877, 0.842, 0.86]],
  [0.712, [0.871, 0.844, 0.858]],
  [0.714, [0.871, 0.844, 0.858]],
  [0.716, [0.866, 0.846, 0.856]],
  [0.718, [0.866, 0.846, 0.856]],
  [0.72, [0.86, 0.848, 0.854]],
  [0.722, [0.86, 0.848, 0.854]],
  [0.724, [0.854, 0.85, 0.852]],
  [0.726, [0.854, 0.85, 0.852]],
  [0.728, [0.848, 0.843, 0.848]],
  [0.73, [0.848, 0.843, 0.848]],
  [0.732, [0.843, 0.828, 0.844]],
  [0.734, [0.843, 0.828, 0.844]],
  [0.736, [0.838, 0.813, 0.839]],
  [0.738, [0.838, 0.813, 0.839]],
  [0.74, [0.834, 0.798, 0.834]],
  [0.742, [0.834, 0.798, 0.834]],
  [0.744, [0.829, 0.783, 0.829]],
  [0.746, [0.829, 0.783, 0.829]],
  [0.748, [0.824, 0.767, 0.825]],
  [0.75, [0.824, 0.767, 0.825]],
  [0.751, [0.819, 0.752, 0.82]],
  [0.753, [0.819, 0.752, 0.82]],
  [0.755, [0.814, 0.737, 0.815]],
  [0.757, [0.814, 0.737, 0.815]],
  [0.759, [0.809, 0.722, 0.811]],
  [0.761, [0.809, 0.722, 0.811]],
  [0.763, [0.804, 0.707, 0.806]],
  [0.765, [0.804, 0.707, 0.806]],
  [0.767, [0.799, 0.692, 0.801]],
  [0.769, [0.799, 0.692, 0.801]],
  [0.771, [0.794, 0.677, 0.796]],
  [0.773, [0.794, 0.677, 0.796]],
  [0.775, [0.789, 0.662, 0.792]],
  [0.777, [0.789, 0.662, 0.792]],
  [0.779, [0.785, 0.647, 0.787]],
  [0.781, [0.785, 0.647, 0.787]],
  [0.783, [0.78, 0.632, 0.782]],
  [0.785, [0.78, 0.632, 0.782]],
  [0.787, [0.775, 0.617, 0.777]],
  [0.789, [0.775, 0.617, 0.777]],
  [0.791, [0.77, 0.602, 0.773]],
  [0.793, [0.77, 0.602, 0.773]],
  [0.795, [0.765, 0.587, 0.768]],
  [0.796, [0.765, 0.587, 0.768]],
  [0.798, [0.76, 0.572, 0.763]],
  [0.8, [0.76, 0.572, 0.763]],
  [0.802, [0.755, 0.557, 0.758]],
  [0.804, [0.755, 0.557, 0.758]],
  [0.806, [0.75, 0.542, 0.754]],
  [0.808, [0.75, 0.542, 0.754]],
  [0.81, [0.745, 0.527, 0.749]],
  [0.812, [0.745, 0.527, 0.749]],
  [0.814, [0.74, 0.512, 0.744]],
  [0.816, [0.74, 0.512, 0.744]],
  [0.818, [0.738, 0.509, 0.742]],
  [0.82, [0.738, 0.509, 0.742]],
  [0.822, [0.741, 0.527, 0.743]],
  [0.824, [0.741, 0.527, 0.743]],
  [0.826, [0.744, 0.545, 0.744]],
  [0.828, [0.744, 0.545, 0.744]],
  [0.83, [0.746, 0.563, 0.746]],
  [0.832, [0.746, 0.563, 0.746]],
  [0.834, [0.749, 0.581, 0.747]],
  [0.836, [0.749, 0.581, 0.747]],
  [0.838, [0.752, 0.599, 0.748]],
  [0.84, [0.752, 0.599, 0.748]],
  [0.841, [0.754, 0.617, 0.75]],
  [0.843, [0.754, 0.617, 0.75]],
  [0.845, [0.757, 0.635, 0.751]],
  [0.847, [0.757, 0.635, 0.751]],
  [0.849, [0.76, 0.653, 0.752]],
  [0.851, [0.76, 0.653, 0.752]],
  [0.853, [0.763, 0.671, 0.754]],
  [0.855, [0.763, 0.671, 0.754]],
  [0.857, [0.765, 0.69, 0.755]],
  [0.859, [0.765, 0.69, 0.755]],
  [0.861, [0.768, 0.708, 0.757]],
  [0.863, [0.768, 0.708, 0.757]],
  [0.865, [0.771, 0.726, 0.758]],
  [0.867, [0.771, 0.726, 0.758]],
  [0.869, [0.773, 0.744, 0.759]],
  [0.871, [0.773, 0.744, 0.759]],
  [0.873, [0.776, 0.762, 0.761]],
  [0.875, [0.776, 0.762, 0.761]],
  [0.877, [0.779, 0.78, 0.762]],
  [0.879, [0.779, 0.78, 0.762]],
  [0.881, [0.782, 0.798, 0.763]],
  [0.883, [0.782, 0.798, 0.763]],
  [0.885, [0.784, 0.816, 0.765]],
  [0.886, [0.784, 0.816, 0.765]],
  [0.888, [0.787, 0.834, 0.766]],
  [0.89, [0.787, 0.834, 0.766]],
  [0.892, [0.79, 0.852, 0.767]],
  [0.894, [0.79, 0.852, 0.767]],
  [0.896, [0.792, 0.871, 0.769]],
  [0.898, [0.792, 0.871, 0.769]],
  [0.9, [0.795, 0.889, 0.77]],
  [0.902, [0.795, 0.889, 0.77]],
  [0.904, [0.798, 0.907, 0.771]],
  [0.906, [0.798, 0.907, 0.771]],
  [0.908, [0.802, 0.922, 0.77]],
  [0.91, [0.802, 0.922, 0.77]],
  [0.912, [0.81, 0.922, 0.755]],
  [0.914, [0.81, 0.922, 0.755]],
  [0.916, [0.819, 0.922, 0.741]],
  [0.918, [0.819, 0.922, 0.741]],
  [0.92, [0.827, 0.923, 0.726]],
  [0.922, [0.827, 0.923, 0.726]],
  [0.924, [0.836, 0.923, 0.712]],
  [0.926, [0.836, 0.923, 0.712]],
  [0.928, [0.845, 0.923, 0.697]],
  [0.93, [0.845, 0.923, 0.697]],
  [0.932, [0.853, 0.924, 0.683]],
  [0.933, [0.853, 0.924, 0.683]],
  [0.935, [0.862, 0.924, 0.668]],
  [0.937, [0.862, 0.924, 0.668]],
  [0.939, [0.871, 0.924, 0.654]],
  [0.941, [0.871, 0.924, 0.654]],
  [0.943, [0.879, 0.925, 0.639]],
  [0.945, [0.879, 0.925, 0.639]],
  [0.947, [0.888, 0.925, 0.624]],
  [0.949, [0.888, 0.925, 0.624]],
  [0.951, [0.896, 0.925, 0.61]],
  [0.953, [0.896, 0.925, 0.61]],
  [0.955, [0.905, 0.926, 0.595]],
  [0.957, [0.905, 0.926, 0.595]],
  [0.959, [0.914, 0.926, 0.581]],
  [0.961, [0.914, 0.926, 0.581]],
  [0.963, [0.922, 0.926, 0.566]],
  [0.965, [0.922, 0.926, 0.566]],
  [0.967, [0.931, 0.927, 0.552]],
  [0.969, [0.931, 0.927, 0.552]],
  [0.971, [0.94, 0.927, 0.537]],
  [0.973, [0.94, 0.927, 0.537]],
  [0.975, [0.948, 0.927, 0.523]],
  [0.977, [0.948, 0.927, 0.523]],
  [0.978, [0.957, 0.928, 0.508]],
  [0.98, [0.957, 0.928, 0.508]],
  [0.982, [0.965, 0.928, 0.493]],
  [0.984, [0.965, 0.928, 0.493]],
  [0.986, [0.974, 0.928, 0.479]],
  [0.988, [0.974, 0.928, 0.479]],
  [0.99, [0.983, 0.929, 0.464]],
  [0.992, [0.983, 0.929, 0.464]],
  [0.994, [0.991, 0.929, 0.45]],
  [0.996, [0.991, 0.929, 0.45]],
  [0.998, [1, 0.929, 0.435]],
  [1, [1, 0.929, 0.435]]
], sp = [
  [0, [0.969, 0.984, 1]],
  [2e-3, [0.969, 0.984, 1]],
  [4e-3, [0.966, 0.982, 0.999]],
  [6e-3, [0.966, 0.982, 0.999]],
  [8e-3, [0.962, 0.98, 0.998]],
  [0.01, [0.962, 0.98, 0.998]],
  [0.012, [0.959, 0.978, 0.997]],
  [0.014, [0.959, 0.978, 0.997]],
  [0.016, [0.956, 0.976, 0.996]],
  [0.018, [0.956, 0.976, 0.996]],
  [0.02, [0.953, 0.974, 0.995]],
  [0.022, [0.953, 0.974, 0.995]],
  [0.023, [0.95, 0.973, 0.994]],
  [0.025, [0.95, 0.973, 0.994]],
  [0.027, [0.947, 0.971, 0.993]],
  [0.029, [0.947, 0.971, 0.993]],
  [0.031, [0.944, 0.969, 0.992]],
  [0.033, [0.944, 0.969, 0.992]],
  [0.035, [0.941, 0.967, 0.991]],
  [0.037, [0.941, 0.967, 0.991]],
  [0.039, [0.938, 0.965, 0.99]],
  [0.041, [0.938, 0.965, 0.99]],
  [0.043, [0.935, 0.963, 0.989]],
  [0.045, [0.935, 0.963, 0.989]],
  [0.047, [0.932, 0.961, 0.988]],
  [0.049, [0.932, 0.961, 0.988]],
  [0.051, [0.929, 0.959, 0.987]],
  [0.053, [0.929, 0.959, 0.987]],
  [0.055, [0.926, 0.957, 0.986]],
  [0.057, [0.926, 0.957, 0.986]],
  [0.059, [0.922, 0.955, 0.985]],
  [0.061, [0.922, 0.955, 0.985]],
  [0.063, [0.919, 0.953, 0.984]],
  [0.065, [0.919, 0.953, 0.984]],
  [0.067, [0.916, 0.951, 0.983]],
  [0.068, [0.916, 0.951, 0.983]],
  [0.07, [0.913, 0.949, 0.982]],
  [0.072, [0.913, 0.949, 0.982]],
  [0.074, [0.91, 0.947, 0.981]],
  [0.076, [0.91, 0.947, 0.981]],
  [0.078, [0.907, 0.945, 0.98]],
  [0.08, [0.907, 0.945, 0.98]],
  [0.082, [0.904, 0.943, 0.979]],
  [0.084, [0.904, 0.943, 0.979]],
  [0.086, [0.901, 0.941, 0.978]],
  [0.088, [0.901, 0.941, 0.978]],
  [0.09, [0.898, 0.939, 0.977]],
  [0.092, [0.898, 0.939, 0.977]],
  [0.094, [0.895, 0.937, 0.976]],
  [0.096, [0.895, 0.937, 0.976]],
  [0.098, [0.892, 0.935, 0.975]],
  [0.1, [0.892, 0.935, 0.975]],
  [0.102, [0.889, 0.933, 0.974]],
  [0.104, [0.889, 0.933, 0.974]],
  [0.106, [0.886, 0.931, 0.973]],
  [0.108, [0.886, 0.931, 0.973]],
  [0.11, [0.883, 0.929, 0.972]],
  [0.112, [0.883, 0.929, 0.972]],
  [0.114, [0.879, 0.927, 0.971]],
  [0.115, [0.879, 0.927, 0.971]],
  [0.117, [0.876, 0.925, 0.97]],
  [0.119, [0.876, 0.925, 0.97]],
  [0.121, [0.873, 0.923, 0.969]],
  [0.123, [0.873, 0.923, 0.969]],
  [0.125, [0.87, 0.921, 0.969]],
  [0.127, [0.87, 0.921, 0.969]],
  [0.129, [0.867, 0.919, 0.968]],
  [0.131, [0.867, 0.919, 0.968]],
  [0.133, [0.864, 0.917, 0.967]],
  [0.135, [0.864, 0.917, 0.967]],
  [0.137, [0.861, 0.915, 0.966]],
  [0.139, [0.861, 0.915, 0.966]],
  [0.141, [0.858, 0.913, 0.965]],
  [0.143, [0.858, 0.913, 0.965]],
  [0.145, [0.855, 0.911, 0.964]],
  [0.147, [0.855, 0.911, 0.964]],
  [0.149, [0.853, 0.91, 0.963]],
  [0.151, [0.853, 0.91, 0.963]],
  [0.153, [0.85, 0.908, 0.962]],
  [0.155, [0.85, 0.908, 0.962]],
  [0.157, [0.847, 0.906, 0.961]],
  [0.159, [0.847, 0.906, 0.961]],
  [0.16, [0.844, 0.904, 0.96]],
  [0.162, [0.844, 0.904, 0.96]],
  [0.164, [0.841, 0.902, 0.959]],
  [0.166, [0.841, 0.902, 0.959]],
  [0.168, [0.838, 0.9, 0.958]],
  [0.17, [0.838, 0.9, 0.958]],
  [0.172, [0.835, 0.898, 0.957]],
  [0.174, [0.835, 0.898, 0.957]],
  [0.176, [0.832, 0.896, 0.956]],
  [0.178, [0.832, 0.896, 0.956]],
  [0.18, [0.829, 0.894, 0.955]],
  [0.182, [0.829, 0.894, 0.955]],
  [0.184, [0.826, 0.892, 0.954]],
  [0.186, [0.826, 0.892, 0.954]],
  [0.188, [0.823, 0.89, 0.953]],
  [0.19, [0.823, 0.89, 0.953]],
  [0.192, [0.82, 0.888, 0.952]],
  [0.194, [0.82, 0.888, 0.952]],
  [0.196, [0.817, 0.886, 0.951]],
  [0.198, [0.817, 0.886, 0.951]],
  [0.2, [0.814, 0.884, 0.95]],
  [0.202, [0.814, 0.884, 0.95]],
  [0.204, [0.811, 0.882, 0.949]],
  [0.205, [0.811, 0.882, 0.949]],
  [0.207, [0.808, 0.88, 0.948]],
  [0.209, [0.808, 0.88, 0.948]],
  [0.211, [0.805, 0.878, 0.947]],
  [0.213, [0.805, 0.878, 0.947]],
  [0.215, [0.802, 0.876, 0.946]],
  [0.217, [0.802, 0.876, 0.946]],
  [0.219, [0.799, 0.874, 0.945]],
  [0.221, [0.799, 0.874, 0.945]],
  [0.223, [0.796, 0.872, 0.944]],
  [0.225, [0.796, 0.872, 0.944]],
  [0.227, [0.793, 0.87, 0.943]],
  [0.229, [0.793, 0.87, 0.943]],
  [0.231, [0.79, 0.868, 0.942]],
  [0.233, [0.79, 0.868, 0.942]],
  [0.235, [0.788, 0.866, 0.941]],
  [0.237, [0.788, 0.866, 0.941]],
  [0.239, [0.785, 0.864, 0.94]],
  [0.241, [0.785, 0.864, 0.94]],
  [0.243, [0.782, 0.862, 0.939]],
  [0.245, [0.782, 0.862, 0.939]],
  [0.247, [0.779, 0.86, 0.938]],
  [0.249, [0.779, 0.86, 0.938]],
  [0.25, [0.775, 0.858, 0.937]],
  [0.252, [0.775, 0.858, 0.937]],
  [0.254, [0.77, 0.856, 0.935]],
  [0.256, [0.77, 0.856, 0.935]],
  [0.258, [0.765, 0.854, 0.933]],
  [0.26, [0.765, 0.854, 0.933]],
  [0.262, [0.76, 0.852, 0.932]],
  [0.264, [0.76, 0.852, 0.932]],
  [0.266, [0.756, 0.85, 0.93]],
  [0.268, [0.756, 0.85, 0.93]],
  [0.27, [0.751, 0.848, 0.928]],
  [0.272, [0.751, 0.848, 0.928]],
  [0.274, [0.746, 0.846, 0.926]],
  [0.276, [0.746, 0.846, 0.926]],
  [0.278, [0.741, 0.844, 0.925]],
  [0.28, [0.741, 0.844, 0.925]],
  [0.282, [0.736, 0.842, 0.923]],
  [0.284, [0.736, 0.842, 0.923]],
  [0.286, [0.731, 0.839, 0.921]],
  [0.288, [0.731, 0.839, 0.921]],
  [0.29, [0.726, 0.837, 0.92]],
  [0.292, [0.726, 0.837, 0.92]],
  [0.294, [0.721, 0.835, 0.918]],
  [0.295, [0.721, 0.835, 0.918]],
  [0.297, [0.716, 0.833, 0.916]],
  [0.299, [0.716, 0.833, 0.916]],
  [0.301, [0.711, 0.831, 0.914]],
  [0.303, [0.711, 0.831, 0.914]],
  [0.305, [0.706, 0.829, 0.913]],
  [0.307, [0.706, 0.829, 0.913]],
  [0.309, [0.701, 0.827, 0.911]],
  [0.311, [0.701, 0.827, 0.911]],
  [0.313, [0.697, 0.825, 0.909]],
  [0.315, [0.697, 0.825, 0.909]],
  [0.317, [0.692, 0.823, 0.908]],
  [0.319, [0.692, 0.823, 0.908]],
  [0.321, [0.687, 0.821, 0.906]],
  [0.323, [0.687, 0.821, 0.906]],
  [0.325, [0.682, 0.819, 0.904]],
  [0.327, [0.682, 0.819, 0.904]],
  [0.329, [0.677, 0.816, 0.902]],
  [0.331, [0.677, 0.816, 0.902]],
  [0.333, [0.672, 0.814, 0.901]],
  [0.335, [0.672, 0.814, 0.901]],
  [0.337, [0.667, 0.812, 0.899]],
  [0.339, [0.667, 0.812, 0.899]],
  [0.341, [0.662, 0.81, 0.897]],
  [0.342, [0.662, 0.81, 0.897]],
  [0.344, [0.657, 0.808, 0.895]],
  [0.346, [0.657, 0.808, 0.895]],
  [0.348, [0.652, 0.806, 0.894]],
  [0.35, [0.652, 0.806, 0.894]],
  [0.352, [0.647, 0.804, 0.892]],
  [0.354, [0.647, 0.804, 0.892]],
  [0.356, [0.642, 0.802, 0.89]],
  [0.358, [0.642, 0.802, 0.89]],
  [0.36, [0.637, 0.8, 0.889]],
  [0.362, [0.637, 0.8, 0.889]],
  [0.364, [0.633, 0.798, 0.887]],
  [0.366, [0.633, 0.798, 0.887]],
  [0.368, [0.628, 0.796, 0.885]],
  [0.37, [0.628, 0.796, 0.885]],
  [0.372, [0.623, 0.793, 0.883]],
  [0.374, [0.623, 0.793, 0.883]],
  [0.376, [0.617, 0.791, 0.882]],
  [0.378, [0.617, 0.791, 0.882]],
  [0.38, [0.611, 0.787, 0.88]],
  [0.382, [0.611, 0.787, 0.88]],
  [0.384, [0.605, 0.784, 0.879]],
  [0.386, [0.605, 0.784, 0.879]],
  [0.387, [0.598, 0.781, 0.878]],
  [0.389, [0.598, 0.781, 0.878]],
  [0.391, [0.592, 0.777, 0.876]],
  [0.393, [0.592, 0.777, 0.876]],
  [0.395, [0.586, 0.774, 0.875]],
  [0.397, [0.586, 0.774, 0.875]],
  [0.399, [0.58, 0.77, 0.874]],
  [0.401, [0.58, 0.77, 0.874]],
  [0.403, [0.573, 0.767, 0.872]],
  [0.405, [0.573, 0.767, 0.872]],
  [0.407, [0.567, 0.763, 0.871]],
  [0.409, [0.567, 0.763, 0.871]],
  [0.411, [0.561, 0.76, 0.87]],
  [0.413, [0.561, 0.76, 0.87]],
  [0.415, [0.555, 0.756, 0.868]],
  [0.417, [0.555, 0.756, 0.868]],
  [0.419, [0.548, 0.753, 0.867]],
  [0.421, [0.548, 0.753, 0.867]],
  [0.423, [0.542, 0.75, 0.866]],
  [0.425, [0.542, 0.75, 0.866]],
  [0.427, [0.536, 0.746, 0.864]],
  [0.429, [0.536, 0.746, 0.864]],
  [0.431, [0.529, 0.743, 0.863]],
  [0.432, [0.529, 0.743, 0.863]],
  [0.434, [0.523, 0.739, 0.862]],
  [0.436, [0.523, 0.739, 0.862]],
  [0.438, [0.517, 0.736, 0.86]],
  [0.44, [0.517, 0.736, 0.86]],
  [0.442, [0.511, 0.732, 0.859]],
  [0.444, [0.511, 0.732, 0.859]],
  [0.446, [0.504, 0.729, 0.857]],
  [0.448, [0.504, 0.729, 0.857]],
  [0.45, [0.498, 0.725, 0.856]],
  [0.452, [0.498, 0.725, 0.856]],
  [0.454, [0.492, 0.722, 0.855]],
  [0.456, [0.492, 0.722, 0.855]],
  [0.458, [0.485, 0.719, 0.853]],
  [0.46, [0.485, 0.719, 0.853]],
  [0.462, [0.479, 0.715, 0.852]],
  [0.464, [0.479, 0.715, 0.852]],
  [0.466, [0.473, 0.712, 0.851]],
  [0.468, [0.473, 0.712, 0.851]],
  [0.47, [0.467, 0.708, 0.849]],
  [0.472, [0.467, 0.708, 0.849]],
  [0.474, [0.46, 0.705, 0.848]],
  [0.476, [0.46, 0.705, 0.848]],
  [0.477, [0.454, 0.701, 0.847]],
  [0.479, [0.454, 0.701, 0.847]],
  [0.481, [0.448, 0.698, 0.845]],
  [0.483, [0.448, 0.698, 0.845]],
  [0.485, [0.442, 0.694, 0.844]],
  [0.487, [0.442, 0.694, 0.844]],
  [0.489, [0.435, 0.691, 0.843]],
  [0.491, [0.435, 0.691, 0.843]],
  [0.493, [0.429, 0.688, 0.841]],
  [0.495, [0.429, 0.688, 0.841]],
  [0.497, [0.423, 0.684, 0.84]],
  [0.499, [0.423, 0.684, 0.84]],
  [0.501, [0.417, 0.681, 0.838]],
  [0.503, [0.417, 0.681, 0.838]],
  [0.505, [0.412, 0.677, 0.836]],
  [0.507, [0.412, 0.677, 0.836]],
  [0.509, [0.407, 0.674, 0.834]],
  [0.511, [0.407, 0.674, 0.834]],
  [0.513, [0.402, 0.67, 0.832]],
  [0.515, [0.402, 0.67, 0.832]],
  [0.517, [0.397, 0.667, 0.83]],
  [0.519, [0.397, 0.667, 0.83]],
  [0.521, [0.392, 0.663, 0.828]],
  [0.523, [0.392, 0.663, 0.828]],
  [0.524, [0.387, 0.66, 0.826]],
  [0.526, [0.387, 0.66, 0.826]],
  [0.528, [0.382, 0.657, 0.824]],
  [0.53, [0.382, 0.657, 0.824]],
  [0.532, [0.377, 0.653, 0.822]],
  [0.534, [0.377, 0.653, 0.822]],
  [0.536, [0.372, 0.65, 0.821]],
  [0.538, [0.372, 0.65, 0.821]],
  [0.54, [0.367, 0.646, 0.819]],
  [0.542, [0.367, 0.646, 0.819]],
  [0.544, [0.362, 0.643, 0.817]],
  [0.546, [0.362, 0.643, 0.817]],
  [0.548, [0.357, 0.639, 0.815]],
  [0.55, [0.357, 0.639, 0.815]],
  [0.552, [0.352, 0.636, 0.813]],
  [0.554, [0.352, 0.636, 0.813]],
  [0.556, [0.346, 0.632, 0.811]],
  [0.558, [0.346, 0.632, 0.811]],
  [0.56, [0.341, 0.629, 0.809]],
  [0.562, [0.341, 0.629, 0.809]],
  [0.564, [0.336, 0.626, 0.807]],
  [0.566, [0.336, 0.626, 0.807]],
  [0.568, [0.331, 0.622, 0.805]],
  [0.569, [0.331, 0.622, 0.805]],
  [0.571, [0.326, 0.619, 0.803]],
  [0.573, [0.326, 0.619, 0.803]],
  [0.575, [0.321, 0.615, 0.801]],
  [0.577, [0.321, 0.615, 0.801]],
  [0.579, [0.316, 0.612, 0.799]],
  [0.581, [0.316, 0.612, 0.799]],
  [0.583, [0.311, 0.608, 0.797]],
  [0.585, [0.311, 0.608, 0.797]],
  [0.587, [0.306, 0.605, 0.795]],
  [0.589, [0.306, 0.605, 0.795]],
  [0.591, [0.301, 0.601, 0.793]],
  [0.593, [0.301, 0.601, 0.793]],
  [0.595, [0.296, 0.598, 0.791]],
  [0.597, [0.296, 0.598, 0.791]],
  [0.599, [0.291, 0.595, 0.789]],
  [0.601, [0.291, 0.595, 0.789]],
  [0.603, [0.286, 0.591, 0.787]],
  [0.605, [0.286, 0.591, 0.787]],
  [0.607, [0.281, 0.588, 0.785]],
  [0.609, [0.281, 0.588, 0.785]],
  [0.611, [0.276, 0.584, 0.783]],
  [0.613, [0.276, 0.584, 0.783]],
  [0.614, [0.271, 0.581, 0.781]],
  [0.616, [0.271, 0.581, 0.781]],
  [0.618, [0.266, 0.577, 0.779]],
  [0.62, [0.266, 0.577, 0.779]],
  [0.622, [0.261, 0.574, 0.777]],
  [0.624, [0.261, 0.574, 0.777]],
  [0.626, [0.256, 0.57, 0.775]],
  [0.628, [0.256, 0.57, 0.775]],
  [0.63, [0.252, 0.566, 0.773]],
  [0.632, [0.252, 0.566, 0.773]],
  [0.634, [0.248, 0.562, 0.771]],
  [0.636, [0.248, 0.562, 0.771]],
  [0.638, [0.244, 0.558, 0.769]],
  [0.64, [0.244, 0.558, 0.769]],
  [0.642, [0.24, 0.554, 0.767]],
  [0.644, [0.24, 0.554, 0.767]],
  [0.646, [0.236, 0.55, 0.765]],
  [0.648, [0.236, 0.55, 0.765]],
  [0.65, [0.232, 0.546, 0.763]],
  [0.652, [0.232, 0.546, 0.763]],
  [0.654, [0.228, 0.542, 0.761]],
  [0.656, [0.228, 0.542, 0.761]],
  [0.658, [0.224, 0.538, 0.758]],
  [0.659, [0.224, 0.538, 0.758]],
  [0.661, [0.22, 0.533, 0.756]],
  [0.663, [0.22, 0.533, 0.756]],
  [0.665, [0.216, 0.529, 0.754]],
  [0.667, [0.216, 0.529, 0.754]],
  [0.669, [0.212, 0.525, 0.752]],
  [0.671, [0.212, 0.525, 0.752]],
  [0.673, [0.208, 0.521, 0.75]],
  [0.675, [0.208, 0.521, 0.75]],
  [0.677, [0.204, 0.517, 0.748]],
  [0.679, [0.204, 0.517, 0.748]],
  [0.681, [0.199, 0.513, 0.746]],
  [0.683, [0.199, 0.513, 0.746]],
  [0.685, [0.195, 0.509, 0.744]],
  [0.687, [0.195, 0.509, 0.744]],
  [0.689, [0.191, 0.505, 0.742]],
  [0.691, [0.191, 0.505, 0.742]],
  [0.693, [0.187, 0.501, 0.74]],
  [0.695, [0.187, 0.501, 0.74]],
  [0.697, [0.183, 0.497, 0.738]],
  [0.699, [0.183, 0.497, 0.738]],
  [0.701, [0.179, 0.493, 0.735]],
  [0.703, [0.179, 0.493, 0.735]],
  [0.705, [0.175, 0.489, 0.733]],
  [0.706, [0.175, 0.489, 0.733]],
  [0.708, [0.171, 0.485, 0.731]],
  [0.71, [0.171, 0.485, 0.731]],
  [0.712, [0.167, 0.481, 0.729]],
  [0.714, [0.167, 0.481, 0.729]],
  [0.716, [0.163, 0.477, 0.727]],
  [0.718, [0.163, 0.477, 0.727]],
  [0.72, [0.159, 0.473, 0.725]],
  [0.722, [0.159, 0.473, 0.725]],
  [0.724, [0.155, 0.469, 0.723]],
  [0.726, [0.155, 0.469, 0.723]],
  [0.728, [0.151, 0.464, 0.721]],
  [0.73, [0.151, 0.464, 0.721]],
  [0.732, [0.147, 0.46, 0.719]],
  [0.734, [0.147, 0.46, 0.719]],
  [0.736, [0.143, 0.456, 0.717]],
  [0.738, [0.143, 0.456, 0.717]],
  [0.74, [0.139, 0.452, 0.715]],
  [0.742, [0.139, 0.452, 0.715]],
  [0.744, [0.134, 0.448, 0.712]],
  [0.746, [0.134, 0.448, 0.712]],
  [0.748, [0.13, 0.444, 0.71]],
  [0.75, [0.13, 0.444, 0.71]],
  [0.751, [0.127, 0.44, 0.707]],
  [0.753, [0.127, 0.44, 0.707]],
  [0.755, [0.124, 0.436, 0.704]],
  [0.757, [0.124, 0.436, 0.704]],
  [0.759, [0.121, 0.432, 0.701]],
  [0.761, [0.121, 0.432, 0.701]],
  [0.763, [0.118, 0.428, 0.698]],
  [0.765, [0.118, 0.428, 0.698]],
  [0.767, [0.115, 0.424, 0.695]],
  [0.769, [0.115, 0.424, 0.695]],
  [0.771, [0.112, 0.42, 0.692]],
  [0.773, [0.112, 0.42, 0.692]],
  [0.775, [0.109, 0.417, 0.689]],
  [0.777, [0.109, 0.417, 0.689]],
  [0.779, [0.106, 0.413, 0.686]],
  [0.781, [0.106, 0.413, 0.686]],
  [0.783, [0.102, 0.409, 0.683]],
  [0.785, [0.102, 0.409, 0.683]],
  [0.787, [0.099, 0.405, 0.68]],
  [0.789, [0.099, 0.405, 0.68]],
  [0.791, [0.096, 0.401, 0.677]],
  [0.793, [0.096, 0.401, 0.677]],
  [0.795, [0.093, 0.397, 0.674]],
  [0.796, [0.093, 0.397, 0.674]],
  [0.798, [0.09, 0.393, 0.671]],
  [0.8, [0.09, 0.393, 0.671]],
  [0.802, [0.087, 0.389, 0.668]],
  [0.804, [0.087, 0.389, 0.668]],
  [0.806, [0.084, 0.385, 0.664]],
  [0.808, [0.084, 0.385, 0.664]],
  [0.81, [0.081, 0.381, 0.661]],
  [0.812, [0.081, 0.381, 0.661]],
  [0.814, [0.078, 0.377, 0.658]],
  [0.816, [0.078, 0.377, 0.658]],
  [0.818, [0.075, 0.373, 0.655]],
  [0.82, [0.075, 0.373, 0.655]],
  [0.822, [0.072, 0.369, 0.652]],
  [0.824, [0.072, 0.369, 0.652]],
  [0.826, [0.069, 0.365, 0.649]],
  [0.828, [0.069, 0.365, 0.649]],
  [0.83, [0.066, 0.361, 0.646]],
  [0.832, [0.066, 0.361, 0.646]],
  [0.834, [0.063, 0.358, 0.643]],
  [0.836, [0.063, 0.358, 0.643]],
  [0.838, [0.059, 0.354, 0.64]],
  [0.84, [0.059, 0.354, 0.64]],
  [0.841, [0.056, 0.35, 0.637]],
  [0.843, [0.056, 0.35, 0.637]],
  [0.845, [0.053, 0.346, 0.634]],
  [0.847, [0.053, 0.346, 0.634]],
  [0.849, [0.05, 0.342, 0.631]],
  [0.851, [0.05, 0.342, 0.631]],
  [0.853, [0.047, 0.338, 0.628]],
  [0.855, [0.047, 0.338, 0.628]],
  [0.857, [0.044, 0.334, 0.624]],
  [0.859, [0.044, 0.334, 0.624]],
  [0.861, [0.041, 0.33, 0.621]],
  [0.863, [0.041, 0.33, 0.621]],
  [0.865, [0.038, 0.326, 0.618]],
  [0.867, [0.038, 0.326, 0.618]],
  [0.869, [0.035, 0.322, 0.615]],
  [0.871, [0.035, 0.322, 0.615]],
  [0.873, [0.032, 0.318, 0.612]],
  [0.875, [0.032, 0.318, 0.612]],
  [0.877, [0.031, 0.314, 0.606]],
  [0.879, [0.031, 0.314, 0.606]],
  [0.881, [0.031, 0.31, 0.6]],
  [0.883, [0.031, 0.31, 0.6]],
  [0.885, [0.031, 0.306, 0.594]],
  [0.886, [0.031, 0.306, 0.594]],
  [0.888, [0.031, 0.302, 0.588]],
  [0.89, [0.031, 0.302, 0.588]],
  [0.892, [0.031, 0.298, 0.582]],
  [0.894, [0.031, 0.298, 0.582]],
  [0.896, [0.031, 0.294, 0.576]],
  [0.898, [0.031, 0.294, 0.576]],
  [0.9, [0.031, 0.29, 0.57]],
  [0.902, [0.031, 0.29, 0.57]],
  [0.904, [0.031, 0.286, 0.564]],
  [0.906, [0.031, 0.286, 0.564]],
  [0.908, [0.031, 0.282, 0.558]],
  [0.91, [0.031, 0.282, 0.558]],
  [0.912, [0.031, 0.278, 0.552]],
  [0.914, [0.031, 0.278, 0.552]],
  [0.916, [0.031, 0.273, 0.546]],
  [0.918, [0.031, 0.273, 0.546]],
  [0.92, [0.031, 0.269, 0.54]],
  [0.922, [0.031, 0.269, 0.54]],
  [0.924, [0.031, 0.265, 0.534]],
  [0.926, [0.031, 0.265, 0.534]],
  [0.928, [0.031, 0.261, 0.528]],
  [0.93, [0.031, 0.261, 0.528]],
  [0.932, [0.031, 0.257, 0.522]],
  [0.933, [0.031, 0.257, 0.522]],
  [0.935, [0.031, 0.253, 0.516]],
  [0.937, [0.031, 0.253, 0.516]],
  [0.939, [0.031, 0.249, 0.51]],
  [0.941, [0.031, 0.249, 0.51]],
  [0.943, [0.031, 0.245, 0.504]],
  [0.945, [0.031, 0.245, 0.504]],
  [0.947, [0.031, 0.241, 0.498]],
  [0.949, [0.031, 0.241, 0.498]],
  [0.951, [0.031, 0.237, 0.492]],
  [0.953, [0.031, 0.237, 0.492]],
  [0.955, [0.031, 0.233, 0.486]],
  [0.957, [0.031, 0.233, 0.486]],
  [0.959, [0.031, 0.229, 0.48]],
  [0.961, [0.031, 0.229, 0.48]],
  [0.963, [0.031, 0.225, 0.474]],
  [0.965, [0.031, 0.225, 0.474]],
  [0.967, [0.031, 0.221, 0.468]],
  [0.969, [0.031, 0.221, 0.468]],
  [0.971, [0.031, 0.217, 0.462]],
  [0.973, [0.031, 0.217, 0.462]],
  [0.975, [0.031, 0.213, 0.456]],
  [0.977, [0.031, 0.213, 0.456]],
  [0.978, [0.031, 0.209, 0.45]],
  [0.98, [0.031, 0.209, 0.45]],
  [0.982, [0.031, 0.204, 0.444]],
  [0.984, [0.031, 0.204, 0.444]],
  [0.986, [0.031, 0.2, 0.438]],
  [0.988, [0.031, 0.2, 0.438]],
  [0.99, [0.031, 0.196, 0.432]],
  [0.992, [0.031, 0.196, 0.432]],
  [0.994, [0.031, 0.192, 0.426]],
  [0.996, [0.031, 0.192, 0.426]],
  [0.998, [0.031, 0.188, 0.42]],
  [1, [0.031, 0.188, 0.42]]
], rp = [
  [0, [0.969, 0.988, 0.992]],
  [2e-3, [0.969, 0.988, 0.992]],
  [4e-3, [0.966, 0.987, 0.992]],
  [6e-3, [0.966, 0.987, 0.992]],
  [8e-3, [0.964, 0.987, 0.991]],
  [0.01, [0.964, 0.987, 0.991]],
  [0.012, [0.962, 0.986, 0.991]],
  [0.014, [0.962, 0.986, 0.991]],
  [0.016, [0.96, 0.985, 0.99]],
  [0.018, [0.96, 0.985, 0.99]],
  [0.02, [0.958, 0.984, 0.99]],
  [0.022, [0.958, 0.984, 0.99]],
  [0.023, [0.955, 0.983, 0.989]],
  [0.025, [0.955, 0.983, 0.989]],
  [0.027, [0.953, 0.982, 0.989]],
  [0.029, [0.953, 0.982, 0.989]],
  [0.031, [0.951, 0.981, 0.988]],
  [0.033, [0.951, 0.981, 0.988]],
  [0.035, [0.949, 0.98, 0.988]],
  [0.037, [0.949, 0.98, 0.988]],
  [0.039, [0.946, 0.98, 0.987]],
  [0.041, [0.946, 0.98, 0.987]],
  [0.043, [0.944, 0.979, 0.987]],
  [0.045, [0.944, 0.979, 0.987]],
  [0.047, [0.942, 0.978, 0.986]],
  [0.049, [0.942, 0.978, 0.986]],
  [0.051, [0.94, 0.977, 0.986]],
  [0.053, [0.94, 0.977, 0.986]],
  [0.055, [0.938, 0.976, 0.985]],
  [0.057, [0.938, 0.976, 0.985]],
  [0.059, [0.935, 0.975, 0.985]],
  [0.061, [0.935, 0.975, 0.985]],
  [0.063, [0.933, 0.974, 0.984]],
  [0.065, [0.933, 0.974, 0.984]],
  [0.067, [0.931, 0.974, 0.984]],
  [0.068, [0.931, 0.974, 0.984]],
  [0.07, [0.929, 0.973, 0.983]],
  [0.072, [0.929, 0.973, 0.983]],
  [0.074, [0.927, 0.972, 0.983]],
  [0.076, [0.927, 0.972, 0.983]],
  [0.078, [0.924, 0.971, 0.982]],
  [0.08, [0.924, 0.971, 0.982]],
  [0.082, [0.922, 0.97, 0.982]],
  [0.084, [0.922, 0.97, 0.982]],
  [0.086, [0.92, 0.969, 0.981]],
  [0.088, [0.92, 0.969, 0.981]],
  [0.09, [0.918, 0.968, 0.981]],
  [0.092, [0.918, 0.968, 0.981]],
  [0.094, [0.915, 0.968, 0.98]],
  [0.096, [0.915, 0.968, 0.98]],
  [0.098, [0.913, 0.967, 0.98]],
  [0.1, [0.913, 0.967, 0.98]],
  [0.102, [0.911, 0.966, 0.979]],
  [0.104, [0.911, 0.966, 0.979]],
  [0.106, [0.909, 0.965, 0.979]],
  [0.108, [0.909, 0.965, 0.979]],
  [0.11, [0.907, 0.964, 0.978]],
  [0.112, [0.907, 0.964, 0.978]],
  [0.114, [0.904, 0.963, 0.978]],
  [0.115, [0.904, 0.963, 0.978]],
  [0.117, [0.902, 0.962, 0.977]],
  [0.119, [0.902, 0.962, 0.977]],
  [0.121, [0.9, 0.962, 0.977]],
  [0.123, [0.9, 0.962, 0.977]],
  [0.125, [0.898, 0.961, 0.976]],
  [0.127, [0.898, 0.961, 0.976]],
  [0.129, [0.895, 0.96, 0.974]],
  [0.131, [0.895, 0.96, 0.974]],
  [0.133, [0.892, 0.958, 0.972]],
  [0.135, [0.892, 0.958, 0.972]],
  [0.137, [0.888, 0.957, 0.969]],
  [0.139, [0.888, 0.957, 0.969]],
  [0.141, [0.885, 0.956, 0.967]],
  [0.143, [0.885, 0.956, 0.967]],
  [0.145, [0.882, 0.955, 0.964]],
  [0.147, [0.882, 0.955, 0.964]],
  [0.149, [0.879, 0.954, 0.962]],
  [0.151, [0.879, 0.954, 0.962]],
  [0.153, [0.876, 0.953, 0.96]],
  [0.155, [0.876, 0.953, 0.96]],
  [0.157, [0.873, 0.952, 0.957]],
  [0.159, [0.873, 0.952, 0.957]],
  [0.16, [0.87, 0.951, 0.955]],
  [0.162, [0.87, 0.951, 0.955]],
  [0.164, [0.867, 0.95, 0.953]],
  [0.166, [0.867, 0.95, 0.953]],
  [0.168, [0.864, 0.948, 0.95]],
  [0.17, [0.864, 0.948, 0.95]],
  [0.172, [0.861, 0.947, 0.948]],
  [0.174, [0.861, 0.947, 0.948]],
  [0.176, [0.858, 0.946, 0.946]],
  [0.178, [0.858, 0.946, 0.946]],
  [0.18, [0.855, 0.945, 0.943]],
  [0.182, [0.855, 0.945, 0.943]],
  [0.184, [0.852, 0.944, 0.941]],
  [0.186, [0.852, 0.944, 0.941]],
  [0.188, [0.848, 0.943, 0.939]],
  [0.19, [0.848, 0.943, 0.939]],
  [0.192, [0.845, 0.942, 0.936]],
  [0.194, [0.845, 0.942, 0.936]],
  [0.196, [0.842, 0.941, 0.934]],
  [0.198, [0.842, 0.941, 0.934]],
  [0.2, [0.839, 0.94, 0.932]],
  [0.202, [0.839, 0.94, 0.932]],
  [0.204, [0.836, 0.939, 0.929]],
  [0.205, [0.836, 0.939, 0.929]],
  [0.207, [0.833, 0.937, 0.927]],
  [0.209, [0.833, 0.937, 0.927]],
  [0.211, [0.83, 0.936, 0.925]],
  [0.213, [0.83, 0.936, 0.925]],
  [0.215, [0.827, 0.935, 0.922]],
  [0.217, [0.827, 0.935, 0.922]],
  [0.219, [0.824, 0.934, 0.92]],
  [0.221, [0.824, 0.934, 0.92]],
  [0.223, [0.821, 0.933, 0.918]],
  [0.225, [0.821, 0.933, 0.918]],
  [0.227, [0.818, 0.932, 0.915]],
  [0.229, [0.818, 0.932, 0.915]],
  [0.231, [0.815, 0.931, 0.913]],
  [0.233, [0.815, 0.931, 0.913]],
  [0.235, [0.812, 0.93, 0.911]],
  [0.237, [0.812, 0.93, 0.911]],
  [0.239, [0.808, 0.929, 0.908]],
  [0.241, [0.808, 0.929, 0.908]],
  [0.243, [0.805, 0.927, 0.906]],
  [0.245, [0.805, 0.927, 0.906]],
  [0.247, [0.802, 0.926, 0.904]],
  [0.249, [0.802, 0.926, 0.904]],
  [0.25, [0.798, 0.925, 0.901]],
  [0.252, [0.798, 0.925, 0.901]],
  [0.254, [0.792, 0.922, 0.898]],
  [0.256, [0.792, 0.922, 0.898]],
  [0.258, [0.786, 0.92, 0.894]],
  [0.26, [0.786, 0.92, 0.894]],
  [0.262, [0.78, 0.917, 0.89]],
  [0.264, [0.78, 0.917, 0.89]],
  [0.266, [0.773, 0.915, 0.887]],
  [0.268, [0.773, 0.915, 0.887]],
  [0.27, [0.767, 0.913, 0.883]],
  [0.272, [0.767, 0.913, 0.883]],
  [0.274, [0.761, 0.91, 0.88]],
  [0.276, [0.761, 0.91, 0.88]],
  [0.278, [0.755, 0.908, 0.876]],
  [0.28, [0.755, 0.908, 0.876]],
  [0.282, [0.748, 0.905, 0.873]],
  [0.284, [0.748, 0.905, 0.873]],
  [0.286, [0.742, 0.903, 0.869]],
  [0.288, [0.742, 0.903, 0.869]],
  [0.29, [0.736, 0.9, 0.865]],
  [0.292, [0.736, 0.9, 0.865]],
  [0.294, [0.729, 0.898, 0.862]],
  [0.295, [0.729, 0.898, 0.862]],
  [0.297, [0.723, 0.895, 0.858]],
  [0.299, [0.723, 0.895, 0.858]],
  [0.301, [0.717, 0.893, 0.855]],
  [0.303, [0.717, 0.893, 0.855]],
  [0.305, [0.711, 0.89, 0.851]],
  [0.307, [0.711, 0.89, 0.851]],
  [0.309, [0.704, 0.888, 0.848]],
  [0.311, [0.704, 0.888, 0.848]],
  [0.313, [0.698, 0.886, 0.844]],
  [0.315, [0.698, 0.886, 0.844]],
  [0.317, [0.692, 0.883, 0.84]],
  [0.319, [0.692, 0.883, 0.84]],
  [0.321, [0.685, 0.881, 0.837]],
  [0.323, [0.685, 0.881, 0.837]],
  [0.325, [0.679, 0.878, 0.833]],
  [0.327, [0.679, 0.878, 0.833]],
  [0.329, [0.673, 0.876, 0.83]],
  [0.331, [0.673, 0.876, 0.83]],
  [0.333, [0.667, 0.873, 0.826]],
  [0.335, [0.667, 0.873, 0.826]],
  [0.337, [0.66, 0.871, 0.823]],
  [0.339, [0.66, 0.871, 0.823]],
  [0.341, [0.654, 0.868, 0.819]],
  [0.342, [0.654, 0.868, 0.819]],
  [0.344, [0.648, 0.866, 0.815]],
  [0.346, [0.648, 0.866, 0.815]],
  [0.348, [0.642, 0.863, 0.812]],
  [0.35, [0.642, 0.863, 0.812]],
  [0.352, [0.635, 0.861, 0.808]],
  [0.354, [0.635, 0.861, 0.808]],
  [0.356, [0.629, 0.858, 0.805]],
  [0.358, [0.629, 0.858, 0.805]],
  [0.36, [0.623, 0.856, 0.801]],
  [0.362, [0.623, 0.856, 0.801]],
  [0.364, [0.616, 0.854, 0.798]],
  [0.366, [0.616, 0.854, 0.798]],
  [0.368, [0.61, 0.851, 0.794]],
  [0.37, [0.61, 0.851, 0.794]],
  [0.372, [0.604, 0.849, 0.79]],
  [0.374, [0.604, 0.849, 0.79]],
  [0.376, [0.598, 0.846, 0.787]],
  [0.378, [0.598, 0.846, 0.787]],
  [0.38, [0.591, 0.843, 0.782]],
  [0.382, [0.591, 0.843, 0.782]],
  [0.384, [0.585, 0.841, 0.777]],
  [0.386, [0.585, 0.841, 0.777]],
  [0.387, [0.579, 0.838, 0.773]],
  [0.389, [0.579, 0.838, 0.773]],
  [0.391, [0.573, 0.835, 0.768]],
  [0.393, [0.573, 0.835, 0.768]],
  [0.395, [0.566, 0.833, 0.764]],
  [0.397, [0.566, 0.833, 0.764]],
  [0.399, [0.56, 0.83, 0.759]],
  [0.401, [0.56, 0.83, 0.759]],
  [0.403, [0.554, 0.827, 0.755]],
  [0.405, [0.554, 0.827, 0.755]],
  [0.407, [0.547, 0.824, 0.75]],
  [0.409, [0.547, 0.824, 0.75]],
  [0.411, [0.541, 0.822, 0.746]],
  [0.413, [0.541, 0.822, 0.746]],
  [0.415, [0.535, 0.819, 0.741]],
  [0.417, [0.535, 0.819, 0.741]],
  [0.419, [0.529, 0.816, 0.736]],
  [0.421, [0.529, 0.816, 0.736]],
  [0.423, [0.522, 0.814, 0.732]],
  [0.425, [0.522, 0.814, 0.732]],
  [0.427, [0.516, 0.811, 0.727]],
  [0.429, [0.516, 0.811, 0.727]],
  [0.431, [0.51, 0.808, 0.723]],
  [0.432, [0.51, 0.808, 0.723]],
  [0.434, [0.504, 0.805, 0.718]],
  [0.436, [0.504, 0.805, 0.718]],
  [0.438, [0.497, 0.803, 0.714]],
  [0.44, [0.497, 0.803, 0.714]],
  [0.442, [0.491, 0.8, 0.709]],
  [0.444, [0.491, 0.8, 0.709]],
  [0.446, [0.485, 0.797, 0.705]],
  [0.448, [0.485, 0.797, 0.705]],
  [0.45, [0.478, 0.795, 0.7]],
  [0.452, [0.478, 0.795, 0.7]],
  [0.454, [0.472, 0.792, 0.695]],
  [0.456, [0.472, 0.792, 0.695]],
  [0.458, [0.466, 0.789, 0.691]],
  [0.46, [0.466, 0.789, 0.691]],
  [0.462, [0.46, 0.786, 0.686]],
  [0.464, [0.46, 0.786, 0.686]],
  [0.466, [0.453, 0.784, 0.682]],
  [0.468, [0.453, 0.784, 0.682]],
  [0.47, [0.447, 0.781, 0.677]],
  [0.472, [0.447, 0.781, 0.677]],
  [0.474, [0.441, 0.778, 0.673]],
  [0.476, [0.441, 0.778, 0.673]],
  [0.477, [0.435, 0.776, 0.668]],
  [0.479, [0.435, 0.776, 0.668]],
  [0.481, [0.428, 0.773, 0.664]],
  [0.483, [0.428, 0.773, 0.664]],
  [0.485, [0.422, 0.77, 0.659]],
  [0.487, [0.422, 0.77, 0.659]],
  [0.489, [0.416, 0.768, 0.655]],
  [0.491, [0.416, 0.768, 0.655]],
  [0.493, [0.409, 0.765, 0.65]],
  [0.495, [0.409, 0.765, 0.65]],
  [0.497, [0.403, 0.762, 0.645]],
  [0.499, [0.403, 0.762, 0.645]],
  [0.501, [0.398, 0.76, 0.64]],
  [0.503, [0.398, 0.76, 0.64]],
  [0.505, [0.393, 0.757, 0.635]],
  [0.507, [0.393, 0.757, 0.635]],
  [0.509, [0.389, 0.755, 0.629]],
  [0.511, [0.389, 0.755, 0.629]],
  [0.513, [0.384, 0.752, 0.623]],
  [0.515, [0.384, 0.752, 0.623]],
  [0.517, [0.38, 0.75, 0.618]],
  [0.519, [0.38, 0.75, 0.618]],
  [0.521, [0.375, 0.747, 0.612]],
  [0.523, [0.375, 0.747, 0.612]],
  [0.524, [0.37, 0.745, 0.606]],
  [0.526, [0.37, 0.745, 0.606]],
  [0.528, [0.366, 0.742, 0.601]],
  [0.53, [0.366, 0.742, 0.601]],
  [0.532, [0.361, 0.74, 0.595]],
  [0.534, [0.361, 0.74, 0.595]],
  [0.536, [0.357, 0.737, 0.589]],
  [0.538, [0.357, 0.737, 0.589]],
  [0.54, [0.352, 0.735, 0.584]],
  [0.542, [0.352, 0.735, 0.584]],
  [0.544, [0.348, 0.732, 0.578]],
  [0.546, [0.348, 0.732, 0.578]],
  [0.548, [0.343, 0.73, 0.572]],
  [0.55, [0.343, 0.73, 0.572]],
  [0.552, [0.339, 0.728, 0.567]],
  [0.554, [0.339, 0.728, 0.567]],
  [0.556, [0.334, 0.725, 0.561]],
  [0.558, [0.334, 0.725, 0.561]],
  [0.56, [0.329, 0.723, 0.555]],
  [0.562, [0.329, 0.723, 0.555]],
  [0.564, [0.325, 0.72, 0.55]],
  [0.566, [0.325, 0.72, 0.55]],
  [0.568, [0.32, 0.718, 0.544]],
  [0.569, [0.32, 0.718, 0.544]],
  [0.571, [0.316, 0.715, 0.538]],
  [0.573, [0.316, 0.715, 0.538]],
  [0.575, [0.311, 0.713, 0.533]],
  [0.577, [0.311, 0.713, 0.533]],
  [0.579, [0.307, 0.71, 0.527]],
  [0.581, [0.307, 0.71, 0.527]],
  [0.583, [0.302, 0.708, 0.521]],
  [0.585, [0.302, 0.708, 0.521]],
  [0.587, [0.298, 0.705, 0.516]],
  [0.589, [0.298, 0.705, 0.516]],
  [0.591, [0.293, 0.703, 0.51]],
  [0.593, [0.293, 0.703, 0.51]],
  [0.595, [0.288, 0.7, 0.504]],
  [0.597, [0.288, 0.7, 0.504]],
  [0.599, [0.284, 0.698, 0.499]],
  [0.601, [0.284, 0.698, 0.499]],
  [0.603, [0.279, 0.696, 0.493]],
  [0.605, [0.279, 0.696, 0.493]],
  [0.607, [0.275, 0.693, 0.488]],
  [0.609, [0.275, 0.693, 0.488]],
  [0.611, [0.27, 0.691, 0.482]],
  [0.613, [0.27, 0.691, 0.482]],
  [0.614, [0.266, 0.688, 0.476]],
  [0.616, [0.266, 0.688, 0.476]],
  [0.618, [0.261, 0.686, 0.471]],
  [0.62, [0.261, 0.686, 0.471]],
  [0.622, [0.257, 0.683, 0.465]],
  [0.624, [0.257, 0.683, 0.465]],
  [0.626, [0.253, 0.68, 0.459]],
  [0.628, [0.253, 0.68, 0.459]],
  [0.63, [0.249, 0.675, 0.453]],
  [0.632, [0.249, 0.675, 0.453]],
  [0.634, [0.245, 0.671, 0.447]],
  [0.636, [0.245, 0.671, 0.447]],
  [0.638, [0.242, 0.667, 0.441]],
  [0.64, [0.242, 0.667, 0.441]],
  [0.642, [0.238, 0.662, 0.435]],
  [0.644, [0.238, 0.662, 0.435]],
  [0.646, [0.234, 0.658, 0.429]],
  [0.648, [0.234, 0.658, 0.429]],
  [0.65, [0.23, 0.654, 0.423]],
  [0.652, [0.23, 0.654, 0.423]],
  [0.654, [0.227, 0.65, 0.417]],
  [0.656, [0.227, 0.65, 0.417]],
  [0.658, [0.223, 0.645, 0.411]],
  [0.659, [0.223, 0.645, 0.411]],
  [0.661, [0.219, 0.641, 0.405]],
  [0.663, [0.219, 0.641, 0.405]],
  [0.665, [0.216, 0.637, 0.399]],
  [0.667, [0.216, 0.637, 0.399]],
  [0.669, [0.212, 0.632, 0.393]],
  [0.671, [0.212, 0.632, 0.393]],
  [0.673, [0.208, 0.628, 0.387]],
  [0.675, [0.208, 0.628, 0.387]],
  [0.677, [0.205, 0.624, 0.381]],
  [0.679, [0.205, 0.624, 0.381]],
  [0.681, [0.201, 0.619, 0.375]],
  [0.683, [0.201, 0.619, 0.375]],
  [0.685, [0.197, 0.615, 0.369]],
  [0.687, [0.197, 0.615, 0.369]],
  [0.689, [0.194, 0.611, 0.363]],
  [0.691, [0.194, 0.611, 0.363]],
  [0.693, [0.19, 0.606, 0.356]],
  [0.695, [0.19, 0.606, 0.356]],
  [0.697, [0.186, 0.602, 0.35]],
  [0.699, [0.186, 0.602, 0.35]],
  [0.701, [0.182, 0.598, 0.344]],
  [0.703, [0.182, 0.598, 0.344]],
  [0.705, [0.179, 0.594, 0.338]],
  [0.706, [0.179, 0.594, 0.338]],
  [0.708, [0.175, 0.589, 0.332]],
  [0.71, [0.175, 0.589, 0.332]],
  [0.712, [0.171, 0.585, 0.326]],
  [0.714, [0.171, 0.585, 0.326]],
  [0.716, [0.168, 0.581, 0.32]],
  [0.718, [0.168, 0.581, 0.32]],
  [0.72, [0.164, 0.576, 0.314]],
  [0.722, [0.164, 0.576, 0.314]],
  [0.724, [0.16, 0.572, 0.308]],
  [0.726, [0.16, 0.572, 0.308]],
  [0.728, [0.157, 0.568, 0.302]],
  [0.73, [0.157, 0.568, 0.302]],
  [0.732, [0.153, 0.563, 0.296]],
  [0.734, [0.153, 0.563, 0.296]],
  [0.736, [0.149, 0.559, 0.29]],
  [0.738, [0.149, 0.559, 0.29]],
  [0.74, [0.146, 0.555, 0.284]],
  [0.742, [0.146, 0.555, 0.284]],
  [0.744, [0.142, 0.55, 0.278]],
  [0.746, [0.142, 0.55, 0.278]],
  [0.748, [0.138, 0.546, 0.272]],
  [0.75, [0.138, 0.546, 0.272]],
  [0.751, [0.134, 0.542, 0.268]],
  [0.753, [0.134, 0.542, 0.268]],
  [0.755, [0.13, 0.539, 0.265]],
  [0.757, [0.13, 0.539, 0.265]],
  [0.759, [0.125, 0.535, 0.262]],
  [0.761, [0.125, 0.535, 0.262]],
  [0.763, [0.121, 0.531, 0.259]],
  [0.765, [0.121, 0.531, 0.259]],
  [0.767, [0.117, 0.528, 0.256]],
  [0.769, [0.117, 0.528, 0.256]],
  [0.771, [0.112, 0.524, 0.253]],
  [0.773, [0.112, 0.524, 0.253]],
  [0.775, [0.108, 0.52, 0.25]],
  [0.777, [0.108, 0.52, 0.25]],
  [0.779, [0.104, 0.516, 0.247]],
  [0.781, [0.104, 0.516, 0.247]],
  [0.783, [0.1, 0.513, 0.244]],
  [0.785, [0.1, 0.513, 0.244]],
  [0.787, [0.095, 0.509, 0.241]],
  [0.789, [0.095, 0.509, 0.241]],
  [0.791, [0.091, 0.505, 0.238]],
  [0.793, [0.091, 0.505, 0.238]],
  [0.795, [0.087, 0.502, 0.234]],
  [0.796, [0.087, 0.502, 0.234]],
  [0.798, [0.082, 0.498, 0.231]],
  [0.8, [0.082, 0.498, 0.231]],
  [0.802, [0.078, 0.494, 0.228]],
  [0.804, [0.078, 0.494, 0.228]],
  [0.806, [0.074, 0.491, 0.225]],
  [0.808, [0.074, 0.491, 0.225]],
  [0.81, [0.069, 0.487, 0.222]],
  [0.812, [0.069, 0.487, 0.222]],
  [0.814, [0.065, 0.483, 0.219]],
  [0.816, [0.065, 0.483, 0.219]],
  [0.818, [0.061, 0.48, 0.216]],
  [0.82, [0.061, 0.48, 0.216]],
  [0.822, [0.057, 0.476, 0.213]],
  [0.824, [0.057, 0.476, 0.213]],
  [0.826, [0.052, 0.472, 0.21]],
  [0.828, [0.052, 0.472, 0.21]],
  [0.83, [0.048, 0.469, 0.207]],
  [0.832, [0.048, 0.469, 0.207]],
  [0.834, [0.044, 0.465, 0.204]],
  [0.836, [0.044, 0.465, 0.204]],
  [0.838, [0.039, 0.461, 0.201]],
  [0.84, [0.039, 0.461, 0.201]],
  [0.841, [0.035, 0.457, 0.198]],
  [0.843, [0.035, 0.457, 0.198]],
  [0.845, [0.031, 0.454, 0.194]],
  [0.847, [0.031, 0.454, 0.194]],
  [0.849, [0.026, 0.45, 0.191]],
  [0.851, [0.026, 0.45, 0.191]],
  [0.853, [0.022, 0.446, 0.188]],
  [0.855, [0.022, 0.446, 0.188]],
  [0.857, [0.018, 0.443, 0.185]],
  [0.859, [0.018, 0.443, 0.185]],
  [0.861, [0.013, 0.439, 0.182]],
  [0.863, [0.013, 0.439, 0.182]],
  [0.865, [9e-3, 0.435, 0.179]],
  [0.867, [9e-3, 0.435, 0.179]],
  [0.869, [5e-3, 0.432, 0.176]],
  [0.871, [5e-3, 0.432, 0.176]],
  [0.873, [1e-3, 0.428, 0.173]],
  [0.875, [1e-3, 0.428, 0.173]],
  [0.877, [0, 0.423, 0.171]],
  [0.879, [0, 0.423, 0.171]],
  [0.881, [0, 0.418, 0.169]],
  [0.883, [0, 0.418, 0.169]],
  [0.885, [0, 0.413, 0.167]],
  [0.886, [0, 0.413, 0.167]],
  [0.888, [0, 0.408, 0.164]],
  [0.89, [0, 0.408, 0.164]],
  [0.892, [0, 0.403, 0.162]],
  [0.894, [0, 0.403, 0.162]],
  [0.896, [0, 0.398, 0.16]],
  [0.898, [0, 0.398, 0.16]],
  [0.9, [0, 0.393, 0.158]],
  [0.902, [0, 0.393, 0.158]],
  [0.904, [0, 0.388, 0.156]],
  [0.906, [0, 0.388, 0.156]],
  [0.908, [0, 0.383, 0.154]],
  [0.91, [0, 0.383, 0.154]],
  [0.912, [0, 0.378, 0.152]],
  [0.914, [0, 0.378, 0.152]],
  [0.916, [0, 0.373, 0.15]],
  [0.918, [0, 0.373, 0.15]],
  [0.92, [0, 0.368, 0.148]],
  [0.922, [0, 0.368, 0.148]],
  [0.924, [0, 0.363, 0.146]],
  [0.926, [0, 0.363, 0.146]],
  [0.928, [0, 0.357, 0.144]],
  [0.93, [0, 0.357, 0.144]],
  [0.932, [0, 0.352, 0.141]],
  [0.933, [0, 0.352, 0.141]],
  [0.935, [0, 0.347, 0.139]],
  [0.937, [0, 0.347, 0.139]],
  [0.939, [0, 0.342, 0.137]],
  [0.941, [0, 0.342, 0.137]],
  [0.943, [0, 0.337, 0.135]],
  [0.945, [0, 0.337, 0.135]],
  [0.947, [0, 0.332, 0.133]],
  [0.949, [0, 0.332, 0.133]],
  [0.951, [0, 0.327, 0.131]],
  [0.953, [0, 0.327, 0.131]],
  [0.955, [0, 0.322, 0.129]],
  [0.957, [0, 0.322, 0.129]],
  [0.959, [0, 0.317, 0.127]],
  [0.961, [0, 0.317, 0.127]],
  [0.963, [0, 0.312, 0.125]],
  [0.965, [0, 0.312, 0.125]],
  [0.967, [0, 0.307, 0.123]],
  [0.969, [0, 0.307, 0.123]],
  [0.971, [0, 0.302, 0.121]],
  [0.973, [0, 0.302, 0.121]],
  [0.975, [0, 0.297, 0.118]],
  [0.977, [0, 0.297, 0.118]],
  [0.978, [0, 0.292, 0.116]],
  [0.98, [0, 0.292, 0.116]],
  [0.982, [0, 0.287, 0.114]],
  [0.984, [0, 0.287, 0.114]],
  [0.986, [0, 0.282, 0.112]],
  [0.988, [0, 0.282, 0.112]],
  [0.99, [0, 0.277, 0.11]],
  [0.992, [0, 0.277, 0.11]],
  [0.994, [0, 0.272, 0.108]],
  [0.996, [0, 0.272, 0.108]],
  [0.998, [0, 0.267, 0.106]],
  [1, [0, 0.267, 0.106]]
], ap = [
  [0, [0.969, 0.988, 0.992]],
  [2e-3, [0.969, 0.988, 0.992]],
  [4e-3, [0.966, 0.986, 0.991]],
  [6e-3, [0.966, 0.986, 0.991]],
  [8e-3, [0.963, 0.984, 0.99]],
  [0.01, [0.963, 0.984, 0.99]],
  [0.012, [0.96, 0.982, 0.989]],
  [0.014, [0.96, 0.982, 0.989]],
  [0.016, [0.957, 0.98, 0.988]],
  [0.018, [0.957, 0.98, 0.988]],
  [0.02, [0.954, 0.978, 0.987]],
  [0.022, [0.954, 0.978, 0.987]],
  [0.023, [0.952, 0.976, 0.986]],
  [0.025, [0.952, 0.976, 0.986]],
  [0.027, [0.949, 0.974, 0.984]],
  [0.029, [0.949, 0.974, 0.984]],
  [0.031, [0.946, 0.972, 0.983]],
  [0.033, [0.946, 0.972, 0.983]],
  [0.035, [0.943, 0.971, 0.982]],
  [0.037, [0.943, 0.971, 0.982]],
  [0.039, [0.94, 0.969, 0.981]],
  [0.041, [0.94, 0.969, 0.981]],
  [0.043, [0.938, 0.967, 0.98]],
  [0.045, [0.938, 0.967, 0.98]],
  [0.047, [0.935, 0.965, 0.979]],
  [0.049, [0.935, 0.965, 0.979]],
  [0.051, [0.932, 0.963, 0.978]],
  [0.053, [0.932, 0.963, 0.978]],
  [0.055, [0.929, 0.961, 0.977]],
  [0.057, [0.929, 0.961, 0.977]],
  [0.059, [0.926, 0.959, 0.976]],
  [0.061, [0.926, 0.959, 0.976]],
  [0.063, [0.923, 0.957, 0.974]],
  [0.065, [0.923, 0.957, 0.974]],
  [0.067, [0.921, 0.955, 0.973]],
  [0.068, [0.921, 0.955, 0.973]],
  [0.07, [0.918, 0.953, 0.972]],
  [0.072, [0.918, 0.953, 0.972]],
  [0.074, [0.915, 0.951, 0.971]],
  [0.076, [0.915, 0.951, 0.971]],
  [0.078, [0.912, 0.949, 0.97]],
  [0.08, [0.912, 0.949, 0.97]],
  [0.082, [0.909, 0.947, 0.969]],
  [0.084, [0.909, 0.947, 0.969]],
  [0.086, [0.906, 0.945, 0.968]],
  [0.088, [0.906, 0.945, 0.968]],
  [0.09, [0.904, 0.943, 0.967]],
  [0.092, [0.904, 0.943, 0.967]],
  [0.094, [0.901, 0.941, 0.966]],
  [0.096, [0.901, 0.941, 0.966]],
  [0.098, [0.898, 0.939, 0.964]],
  [0.1, [0.898, 0.939, 0.964]],
  [0.102, [0.895, 0.937, 0.963]],
  [0.104, [0.895, 0.937, 0.963]],
  [0.106, [0.892, 0.935, 0.962]],
  [0.108, [0.892, 0.935, 0.962]],
  [0.11, [0.889, 0.933, 0.961]],
  [0.112, [0.889, 0.933, 0.961]],
  [0.114, [0.887, 0.931, 0.96]],
  [0.115, [0.887, 0.931, 0.96]],
  [0.117, [0.884, 0.929, 0.959]],
  [0.119, [0.884, 0.929, 0.959]],
  [0.121, [0.881, 0.927, 0.958]],
  [0.123, [0.881, 0.927, 0.958]],
  [0.125, [0.878, 0.925, 0.957]],
  [0.127, [0.878, 0.925, 0.957]],
  [0.129, [0.874, 0.922, 0.955]],
  [0.131, [0.874, 0.922, 0.955]],
  [0.133, [0.87, 0.919, 0.953]],
  [0.135, [0.87, 0.919, 0.953]],
  [0.137, [0.866, 0.916, 0.951]],
  [0.139, [0.866, 0.916, 0.951]],
  [0.141, [0.862, 0.913, 0.95]],
  [0.143, [0.862, 0.913, 0.95]],
  [0.145, [0.858, 0.91, 0.948]],
  [0.147, [0.858, 0.91, 0.948]],
  [0.149, [0.854, 0.907, 0.946]],
  [0.151, [0.854, 0.907, 0.946]],
  [0.153, [0.85, 0.904, 0.945]],
  [0.155, [0.85, 0.904, 0.945]],
  [0.157, [0.845, 0.9, 0.943]],
  [0.159, [0.845, 0.9, 0.943]],
  [0.16, [0.841, 0.897, 0.941]],
  [0.162, [0.841, 0.897, 0.941]],
  [0.164, [0.837, 0.894, 0.939]],
  [0.166, [0.837, 0.894, 0.939]],
  [0.168, [0.833, 0.891, 0.938]],
  [0.17, [0.833, 0.891, 0.938]],
  [0.172, [0.829, 0.888, 0.936]],
  [0.174, [0.829, 0.888, 0.936]],
  [0.176, [0.825, 0.885, 0.934]],
  [0.178, [0.825, 0.885, 0.934]],
  [0.18, [0.821, 0.882, 0.933]],
  [0.182, [0.821, 0.882, 0.933]],
  [0.184, [0.817, 0.879, 0.931]],
  [0.186, [0.817, 0.879, 0.931]],
  [0.188, [0.813, 0.876, 0.929]],
  [0.19, [0.813, 0.876, 0.929]],
  [0.192, [0.809, 0.873, 0.927]],
  [0.194, [0.809, 0.873, 0.927]],
  [0.196, [0.805, 0.87, 0.926]],
  [0.198, [0.805, 0.87, 0.926]],
  [0.2, [0.801, 0.867, 0.924]],
  [0.202, [0.801, 0.867, 0.924]],
  [0.204, [0.797, 0.864, 0.922]],
  [0.205, [0.797, 0.864, 0.922]],
  [0.207, [0.793, 0.861, 0.92]],
  [0.209, [0.793, 0.861, 0.92]],
  [0.211, [0.789, 0.857, 0.919]],
  [0.213, [0.789, 0.857, 0.919]],
  [0.215, [0.785, 0.854, 0.917]],
  [0.217, [0.785, 0.854, 0.917]],
  [0.219, [0.78, 0.851, 0.915]],
  [0.221, [0.78, 0.851, 0.915]],
  [0.223, [0.776, 0.848, 0.914]],
  [0.225, [0.776, 0.848, 0.914]],
  [0.227, [0.772, 0.845, 0.912]],
  [0.229, [0.772, 0.845, 0.912]],
  [0.231, [0.768, 0.842, 0.91]],
  [0.233, [0.768, 0.842, 0.91]],
  [0.235, [0.764, 0.839, 0.908]],
  [0.237, [0.764, 0.839, 0.908]],
  [0.239, [0.76, 0.836, 0.907]],
  [0.241, [0.76, 0.836, 0.907]],
  [0.243, [0.756, 0.833, 0.905]],
  [0.245, [0.756, 0.833, 0.905]],
  [0.247, [0.752, 0.83, 0.903]],
  [0.249, [0.752, 0.83, 0.903]],
  [0.25, [0.748, 0.827, 0.902]],
  [0.252, [0.748, 0.827, 0.902]],
  [0.254, [0.744, 0.824, 0.9]],
  [0.256, [0.744, 0.824, 0.9]],
  [0.258, [0.74, 0.821, 0.899]],
  [0.26, [0.74, 0.821, 0.899]],
  [0.262, [0.736, 0.818, 0.897]],
  [0.264, [0.736, 0.818, 0.897]],
  [0.266, [0.732, 0.815, 0.896]],
  [0.268, [0.732, 0.815, 0.896]],
  [0.27, [0.728, 0.813, 0.894]],
  [0.272, [0.728, 0.813, 0.894]],
  [0.274, [0.724, 0.81, 0.893]],
  [0.276, [0.724, 0.81, 0.893]],
  [0.278, [0.72, 0.807, 0.891]],
  [0.28, [0.72, 0.807, 0.891]],
  [0.282, [0.716, 0.804, 0.89]],
  [0.284, [0.716, 0.804, 0.89]],
  [0.286, [0.711, 0.801, 0.888]],
  [0.288, [0.711, 0.801, 0.888]],
  [0.29, [0.707, 0.798, 0.887]],
  [0.292, [0.707, 0.798, 0.887]],
  [0.294, [0.703, 0.796, 0.885]],
  [0.295, [0.703, 0.796, 0.885]],
  [0.297, [0.699, 0.793, 0.884]],
  [0.299, [0.699, 0.793, 0.884]],
  [0.301, [0.695, 0.79, 0.882]],
  [0.303, [0.695, 0.79, 0.882]],
  [0.305, [0.691, 0.787, 0.881]],
  [0.307, [0.691, 0.787, 0.881]],
  [0.309, [0.687, 0.784, 0.879]],
  [0.311, [0.687, 0.784, 0.879]],
  [0.313, [0.683, 0.781, 0.878]],
  [0.315, [0.683, 0.781, 0.878]],
  [0.317, [0.679, 0.779, 0.876]],
  [0.319, [0.679, 0.779, 0.876]],
  [0.321, [0.675, 0.776, 0.875]],
  [0.323, [0.675, 0.776, 0.875]],
  [0.325, [0.671, 0.773, 0.874]],
  [0.327, [0.671, 0.773, 0.874]],
  [0.329, [0.667, 0.77, 0.872]],
  [0.331, [0.667, 0.77, 0.872]],
  [0.333, [0.663, 0.767, 0.871]],
  [0.335, [0.663, 0.767, 0.871]],
  [0.337, [0.659, 0.764, 0.869]],
  [0.339, [0.659, 0.764, 0.869]],
  [0.341, [0.655, 0.762, 0.868]],
  [0.342, [0.655, 0.762, 0.868]],
  [0.344, [0.651, 0.759, 0.866]],
  [0.346, [0.651, 0.759, 0.866]],
  [0.348, [0.647, 0.756, 0.865]],
  [0.35, [0.647, 0.756, 0.865]],
  [0.352, [0.642, 0.753, 0.863]],
  [0.354, [0.642, 0.753, 0.863]],
  [0.356, [0.638, 0.75, 0.862]],
  [0.358, [0.638, 0.75, 0.862]],
  [0.36, [0.634, 0.748, 0.86]],
  [0.362, [0.634, 0.748, 0.86]],
  [0.364, [0.63, 0.745, 0.859]],
  [0.366, [0.63, 0.745, 0.859]],
  [0.368, [0.626, 0.742, 0.857]],
  [0.37, [0.626, 0.742, 0.857]],
  [0.372, [0.622, 0.739, 0.856]],
  [0.374, [0.622, 0.739, 0.856]],
  [0.376, [0.619, 0.736, 0.854]],
  [0.378, [0.619, 0.736, 0.854]],
  [0.38, [0.617, 0.731, 0.852]],
  [0.382, [0.617, 0.731, 0.852]],
  [0.384, [0.614, 0.726, 0.849]],
  [0.386, [0.614, 0.726, 0.849]],
  [0.387, [0.612, 0.721, 0.847]],
  [0.389, [0.612, 0.721, 0.847]],
  [0.391, [0.61, 0.717, 0.844]],
  [0.393, [0.61, 0.717, 0.844]],
  [0.395, [0.608, 0.712, 0.842]],
  [0.397, [0.608, 0.712, 0.842]],
  [0.399, [0.605, 0.707, 0.839]],
  [0.401, [0.605, 0.707, 0.839]],
  [0.403, [0.603, 0.703, 0.837]],
  [0.405, [0.603, 0.703, 0.837]],
  [0.407, [0.601, 0.698, 0.834]],
  [0.409, [0.601, 0.698, 0.834]],
  [0.411, [0.599, 0.693, 0.832]],
  [0.413, [0.599, 0.693, 0.832]],
  [0.415, [0.597, 0.689, 0.829]],
  [0.417, [0.597, 0.689, 0.829]],
  [0.419, [0.594, 0.684, 0.827]],
  [0.421, [0.594, 0.684, 0.827]],
  [0.423, [0.592, 0.679, 0.824]],
  [0.425, [0.592, 0.679, 0.824]],
  [0.427, [0.59, 0.675, 0.822]],
  [0.429, [0.59, 0.675, 0.822]],
  [0.431, [0.588, 0.67, 0.82]],
  [0.432, [0.588, 0.67, 0.82]],
  [0.434, [0.586, 0.665, 0.817]],
  [0.436, [0.586, 0.665, 0.817]],
  [0.438, [0.583, 0.661, 0.815]],
  [0.44, [0.583, 0.661, 0.815]],
  [0.442, [0.581, 0.656, 0.812]],
  [0.444, [0.581, 0.656, 0.812]],
  [0.446, [0.579, 0.651, 0.81]],
  [0.448, [0.579, 0.651, 0.81]],
  [0.45, [0.577, 0.647, 0.807]],
  [0.452, [0.577, 0.647, 0.807]],
  [0.454, [0.574, 0.642, 0.805]],
  [0.456, [0.574, 0.642, 0.805]],
  [0.458, [0.572, 0.637, 0.802]],
  [0.46, [0.572, 0.637, 0.802]],
  [0.462, [0.57, 0.633, 0.8]],
  [0.464, [0.57, 0.633, 0.8]],
  [0.466, [0.568, 0.628, 0.797]],
  [0.468, [0.568, 0.628, 0.797]],
  [0.47, [0.566, 0.623, 0.795]],
  [0.472, [0.566, 0.623, 0.795]],
  [0.474, [0.563, 0.619, 0.792]],
  [0.476, [0.563, 0.619, 0.792]],
  [0.477, [0.561, 0.614, 0.79]],
  [0.479, [0.561, 0.614, 0.79]],
  [0.481, [0.559, 0.609, 0.788]],
  [0.483, [0.559, 0.609, 0.788]],
  [0.485, [0.557, 0.605, 0.785]],
  [0.487, [0.557, 0.605, 0.785]],
  [0.489, [0.555, 0.6, 0.783]],
  [0.491, [0.555, 0.6, 0.783]],
  [0.493, [0.552, 0.595, 0.78]],
  [0.495, [0.552, 0.595, 0.78]],
  [0.497, [0.55, 0.591, 0.778]],
  [0.499, [0.55, 0.591, 0.778]],
  [0.501, [0.549, 0.586, 0.775]],
  [0.503, [0.549, 0.586, 0.775]],
  [0.505, [0.549, 0.58, 0.773]],
  [0.507, [0.549, 0.58, 0.773]],
  [0.509, [0.549, 0.575, 0.77]],
  [0.511, [0.549, 0.575, 0.77]],
  [0.513, [0.549, 0.57, 0.767]],
  [0.515, [0.549, 0.57, 0.767]],
  [0.517, [0.549, 0.564, 0.765]],
  [0.519, [0.549, 0.564, 0.765]],
  [0.521, [0.549, 0.559, 0.762]],
  [0.523, [0.549, 0.559, 0.762]],
  [0.524, [0.549, 0.554, 0.76]],
  [0.526, [0.549, 0.554, 0.76]],
  [0.528, [0.549, 0.549, 0.757]],
  [0.53, [0.549, 0.549, 0.757]],
  [0.532, [0.549, 0.543, 0.755]],
  [0.534, [0.549, 0.543, 0.755]],
  [0.536, [0.549, 0.538, 0.752]],
  [0.538, [0.549, 0.538, 0.752]],
  [0.54, [0.549, 0.533, 0.749]],
  [0.542, [0.549, 0.533, 0.749]],
  [0.544, [0.549, 0.527, 0.747]],
  [0.546, [0.549, 0.527, 0.747]],
  [0.548, [0.549, 0.522, 0.744]],
  [0.55, [0.549, 0.522, 0.744]],
  [0.552, [0.549, 0.517, 0.742]],
  [0.554, [0.549, 0.517, 0.742]],
  [0.556, [0.549, 0.512, 0.739]],
  [0.558, [0.549, 0.512, 0.739]],
  [0.56, [0.549, 0.506, 0.736]],
  [0.562, [0.549, 0.506, 0.736]],
  [0.564, [0.549, 0.501, 0.734]],
  [0.566, [0.549, 0.501, 0.734]],
  [0.568, [0.549, 0.496, 0.731]],
  [0.569, [0.549, 0.496, 0.731]],
  [0.571, [0.549, 0.49, 0.729]],
  [0.573, [0.549, 0.49, 0.729]],
  [0.575, [0.549, 0.485, 0.726]],
  [0.577, [0.549, 0.485, 0.726]],
  [0.579, [0.549, 0.48, 0.724]],
  [0.581, [0.549, 0.48, 0.724]],
  [0.583, [0.549, 0.474, 0.721]],
  [0.585, [0.549, 0.474, 0.721]],
  [0.587, [0.549, 0.469, 0.718]],
  [0.589, [0.549, 0.469, 0.718]],
  [0.591, [0.549, 0.464, 0.716]],
  [0.593, [0.549, 0.464, 0.716]],
  [0.595, [0.549, 0.459, 0.713]],
  [0.597, [0.549, 0.459, 0.713]],
  [0.599, [0.549, 0.453, 0.711]],
  [0.601, [0.549, 0.453, 0.711]],
  [0.603, [0.549, 0.448, 0.708]],
  [0.605, [0.549, 0.448, 0.708]],
  [0.607, [0.549, 0.443, 0.705]],
  [0.609, [0.549, 0.443, 0.705]],
  [0.611, [0.549, 0.437, 0.703]],
  [0.613, [0.549, 0.437, 0.703]],
  [0.614, [0.549, 0.432, 0.7]],
  [0.616, [0.549, 0.432, 0.7]],
  [0.618, [0.549, 0.427, 0.698]],
  [0.62, [0.549, 0.427, 0.698]],
  [0.622, [0.549, 0.422, 0.695]],
  [0.624, [0.549, 0.422, 0.695]],
  [0.626, [0.549, 0.416, 0.693]],
  [0.628, [0.549, 0.416, 0.693]],
  [0.63, [0.548, 0.411, 0.69]],
  [0.632, [0.548, 0.411, 0.69]],
  [0.634, [0.548, 0.406, 0.688]],
  [0.636, [0.548, 0.406, 0.688]],
  [0.638, [0.547, 0.401, 0.685]],
  [0.64, [0.547, 0.401, 0.685]],
  [0.642, [0.547, 0.396, 0.683]],
  [0.644, [0.547, 0.396, 0.683]],
  [0.646, [0.546, 0.391, 0.68]],
  [0.648, [0.546, 0.391, 0.68]],
  [0.65, [0.546, 0.385, 0.678]],
  [0.652, [0.546, 0.385, 0.678]],
  [0.654, [0.545, 0.38, 0.675]],
  [0.656, [0.545, 0.38, 0.675]],
  [0.658, [0.545, 0.375, 0.673]],
  [0.659, [0.545, 0.375, 0.673]],
  [0.661, [0.544, 0.37, 0.67]],
  [0.663, [0.544, 0.37, 0.67]],
  [0.665, [0.544, 0.365, 0.668]],
  [0.667, [0.544, 0.365, 0.668]],
  [0.669, [0.543, 0.36, 0.666]],
  [0.671, [0.543, 0.36, 0.666]],
  [0.673, [0.543, 0.354, 0.663]],
  [0.675, [0.543, 0.354, 0.663]],
  [0.677, [0.542, 0.349, 0.661]],
  [0.679, [0.542, 0.349, 0.661]],
  [0.681, [0.542, 0.344, 0.658]],
  [0.683, [0.542, 0.344, 0.658]],
  [0.685, [0.541, 0.339, 0.656]],
  [0.687, [0.541, 0.339, 0.656]],
  [0.689, [0.541, 0.334, 0.653]],
  [0.691, [0.541, 0.334, 0.653]],
  [0.693, [0.54, 0.329, 0.651]],
  [0.695, [0.54, 0.329, 0.651]],
  [0.697, [0.54, 0.323, 0.648]],
  [0.699, [0.54, 0.323, 0.648]],
  [0.701, [0.539, 0.318, 0.646]],
  [0.703, [0.539, 0.318, 0.646]],
  [0.705, [0.539, 0.313, 0.643]],
  [0.706, [0.539, 0.313, 0.643]],
  [0.708, [0.538, 0.308, 0.641]],
  [0.71, [0.538, 0.308, 0.641]],
  [0.712, [0.538, 0.303, 0.638]],
  [0.714, [0.538, 0.303, 0.638]],
  [0.716, [0.537, 0.298, 0.636]],
  [0.718, [0.537, 0.298, 0.636]],
  [0.72, [0.537, 0.292, 0.634]],
  [0.722, [0.537, 0.292, 0.634]],
  [0.724, [0.536, 0.287, 0.631]],
  [0.726, [0.536, 0.287, 0.631]],
  [0.728, [0.536, 0.282, 0.629]],
  [0.73, [0.536, 0.282, 0.629]],
  [0.732, [0.535, 0.277, 0.626]],
  [0.734, [0.535, 0.277, 0.626]],
  [0.736, [0.535, 0.272, 0.624]],
  [0.738, [0.535, 0.272, 0.624]],
  [0.74, [0.534, 0.267, 0.621]],
  [0.742, [0.534, 0.267, 0.621]],
  [0.744, [0.534, 0.261, 0.619]],
  [0.746, [0.534, 0.261, 0.619]],
  [0.748, [0.533, 0.256, 0.616]],
  [0.75, [0.533, 0.256, 0.616]],
  [0.751, [0.533, 0.25, 0.613]],
  [0.753, [0.533, 0.25, 0.613]],
  [0.755, [0.532, 0.244, 0.609]],
  [0.757, [0.532, 0.244, 0.609]],
  [0.759, [0.531, 0.238, 0.605]],
  [0.761, [0.531, 0.238, 0.605]],
  [0.763, [0.53, 0.232, 0.6]],
  [0.765, [0.53, 0.232, 0.6]],
  [0.767, [0.529, 0.226, 0.596]],
  [0.769, [0.529, 0.226, 0.596]],
  [0.771, [0.528, 0.22, 0.592]],
  [0.773, [0.528, 0.22, 0.592]],
  [0.775, [0.528, 0.213, 0.588]],
  [0.777, [0.528, 0.213, 0.588]],
  [0.779, [0.527, 0.207, 0.584]],
  [0.781, [0.527, 0.207, 0.584]],
  [0.783, [0.526, 0.201, 0.58]],
  [0.785, [0.526, 0.201, 0.58]],
  [0.787, [0.525, 0.195, 0.576]],
  [0.789, [0.525, 0.195, 0.576]],
  [0.791, [0.524, 0.189, 0.572]],
  [0.793, [0.524, 0.189, 0.572]],
  [0.795, [0.523, 0.183, 0.568]],
  [0.796, [0.523, 0.183, 0.568]],
  [0.798, [0.522, 0.176, 0.564]],
  [0.8, [0.522, 0.176, 0.564]],
  [0.802, [0.521, 0.17, 0.56]],
  [0.804, [0.521, 0.17, 0.56]],
  [0.806, [0.521, 0.164, 0.556]],
  [0.808, [0.521, 0.164, 0.556]],
  [0.81, [0.52, 0.158, 0.552]],
  [0.812, [0.52, 0.158, 0.552]],
  [0.814, [0.519, 0.152, 0.548]],
  [0.816, [0.519, 0.152, 0.548]],
  [0.818, [0.518, 0.146, 0.544]],
  [0.82, [0.518, 0.146, 0.544]],
  [0.822, [0.517, 0.14, 0.54]],
  [0.824, [0.517, 0.14, 0.54]],
  [0.826, [0.516, 0.133, 0.536]],
  [0.828, [0.516, 0.133, 0.536]],
  [0.83, [0.515, 0.127, 0.531]],
  [0.832, [0.515, 0.127, 0.531]],
  [0.834, [0.515, 0.121, 0.527]],
  [0.836, [0.515, 0.121, 0.527]],
  [0.838, [0.514, 0.115, 0.523]],
  [0.84, [0.514, 0.115, 0.523]],
  [0.841, [0.513, 0.109, 0.519]],
  [0.843, [0.513, 0.109, 0.519]],
  [0.845, [0.512, 0.103, 0.515]],
  [0.847, [0.512, 0.103, 0.515]],
  [0.849, [0.511, 0.097, 0.511]],
  [0.851, [0.511, 0.097, 0.511]],
  [0.853, [0.51, 0.09, 0.507]],
  [0.855, [0.51, 0.09, 0.507]],
  [0.857, [0.509, 0.084, 0.503]],
  [0.859, [0.509, 0.084, 0.503]],
  [0.861, [0.509, 0.078, 0.499]],
  [0.863, [0.509, 0.078, 0.499]],
  [0.865, [0.508, 0.072, 0.495]],
  [0.867, [0.508, 0.072, 0.495]],
  [0.869, [0.507, 0.066, 0.491]],
  [0.871, [0.507, 0.066, 0.491]],
  [0.873, [0.506, 0.06, 0.487]],
  [0.875, [0.506, 0.06, 0.487]],
  [0.877, [0.5, 0.057, 0.481]],
  [0.879, [0.5, 0.057, 0.481]],
  [0.881, [0.494, 0.055, 0.475]],
  [0.883, [0.494, 0.055, 0.475]],
  [0.885, [0.487, 0.054, 0.469]],
  [0.886, [0.487, 0.054, 0.469]],
  [0.888, [0.481, 0.052, 0.463]],
  [0.89, [0.481, 0.052, 0.463]],
  [0.892, [0.475, 0.05, 0.457]],
  [0.894, [0.475, 0.05, 0.457]],
  [0.896, [0.468, 0.048, 0.451]],
  [0.898, [0.468, 0.048, 0.451]],
  [0.9, [0.462, 0.046, 0.445]],
  [0.902, [0.462, 0.046, 0.445]],
  [0.904, [0.456, 0.044, 0.439]],
  [0.906, [0.456, 0.044, 0.439]],
  [0.908, [0.449, 0.042, 0.433]],
  [0.91, [0.449, 0.042, 0.433]],
  [0.912, [0.443, 0.041, 0.427]],
  [0.914, [0.443, 0.041, 0.427]],
  [0.916, [0.436, 0.039, 0.421]],
  [0.918, [0.436, 0.039, 0.421]],
  [0.92, [0.43, 0.037, 0.415]],
  [0.922, [0.43, 0.037, 0.415]],
  [0.924, [0.424, 0.035, 0.409]],
  [0.926, [0.424, 0.035, 0.409]],
  [0.928, [0.417, 0.033, 0.403]],
  [0.93, [0.417, 0.033, 0.403]],
  [0.932, [0.411, 0.031, 0.397]],
  [0.933, [0.411, 0.031, 0.397]],
  [0.935, [0.404, 0.03, 0.391]],
  [0.937, [0.404, 0.03, 0.391]],
  [0.939, [0.398, 0.028, 0.385]],
  [0.941, [0.398, 0.028, 0.385]],
  [0.943, [0.392, 0.026, 0.379]],
  [0.945, [0.392, 0.026, 0.379]],
  [0.947, [0.385, 0.024, 0.372]],
  [0.949, [0.385, 0.024, 0.372]],
  [0.951, [0.379, 0.022, 0.366]],
  [0.953, [0.379, 0.022, 0.366]],
  [0.955, [0.372, 0.02, 0.36]],
  [0.957, [0.372, 0.02, 0.36]],
  [0.959, [0.366, 0.018, 0.354]],
  [0.961, [0.366, 0.018, 0.354]],
  [0.963, [0.36, 0.017, 0.348]],
  [0.965, [0.36, 0.017, 0.348]],
  [0.967, [0.353, 0.015, 0.342]],
  [0.969, [0.353, 0.015, 0.342]],
  [0.971, [0.347, 0.013, 0.336]],
  [0.973, [0.347, 0.013, 0.336]],
  [0.975, [0.34, 0.011, 0.33]],
  [0.977, [0.34, 0.011, 0.33]],
  [0.978, [0.334, 9e-3, 0.324]],
  [0.98, [0.334, 9e-3, 0.324]],
  [0.982, [0.328, 7e-3, 0.318]],
  [0.984, [0.328, 7e-3, 0.318]],
  [0.986, [0.321, 6e-3, 0.312]],
  [0.988, [0.321, 6e-3, 0.312]],
  [0.99, [0.315, 4e-3, 0.306]],
  [0.992, [0.315, 4e-3, 0.306]],
  [0.994, [0.308, 2e-3, 0.3]],
  [0.996, [0.308, 2e-3, 0.3]],
  [0.998, [0.302, 0, 0.294]],
  [1, [0.302, 0, 0.294]]
], op = [
  [0, [0.969, 0.988, 0.941]],
  [2e-3, [0.969, 0.988, 0.941]],
  [4e-3, [0.966, 0.987, 0.939]],
  [6e-3, [0.966, 0.987, 0.939]],
  [8e-3, [0.963, 0.986, 0.936]],
  [0.01, [0.963, 0.986, 0.936]],
  [0.012, [0.96, 0.985, 0.933]],
  [0.014, [0.96, 0.985, 0.933]],
  [0.016, [0.957, 0.984, 0.931]],
  [0.018, [0.957, 0.984, 0.931]],
  [0.02, [0.954, 0.983, 0.928]],
  [0.022, [0.954, 0.983, 0.928]],
  [0.023, [0.952, 0.982, 0.926]],
  [0.025, [0.952, 0.982, 0.926]],
  [0.027, [0.949, 0.98, 0.923]],
  [0.029, [0.949, 0.98, 0.923]],
  [0.031, [0.946, 0.979, 0.921]],
  [0.033, [0.946, 0.979, 0.921]],
  [0.035, [0.943, 0.978, 0.918]],
  [0.037, [0.943, 0.978, 0.918]],
  [0.039, [0.94, 0.977, 0.915]],
  [0.041, [0.94, 0.977, 0.915]],
  [0.043, [0.938, 0.976, 0.913]],
  [0.045, [0.938, 0.976, 0.913]],
  [0.047, [0.935, 0.975, 0.91]],
  [0.049, [0.935, 0.975, 0.91]],
  [0.051, [0.932, 0.974, 0.908]],
  [0.053, [0.932, 0.974, 0.908]],
  [0.055, [0.929, 0.973, 0.905]],
  [0.057, [0.929, 0.973, 0.905]],
  [0.059, [0.926, 0.972, 0.902]],
  [0.061, [0.926, 0.972, 0.902]],
  [0.063, [0.923, 0.971, 0.9]],
  [0.065, [0.923, 0.971, 0.9]],
  [0.067, [0.921, 0.969, 0.897]],
  [0.068, [0.921, 0.969, 0.897]],
  [0.07, [0.918, 0.968, 0.895]],
  [0.072, [0.918, 0.968, 0.895]],
  [0.074, [0.915, 0.967, 0.892]],
  [0.076, [0.915, 0.967, 0.892]],
  [0.078, [0.912, 0.966, 0.89]],
  [0.08, [0.912, 0.966, 0.89]],
  [0.082, [0.909, 0.965, 0.887]],
  [0.084, [0.909, 0.965, 0.887]],
  [0.086, [0.906, 0.964, 0.884]],
  [0.088, [0.906, 0.964, 0.884]],
  [0.09, [0.904, 0.963, 0.882]],
  [0.092, [0.904, 0.963, 0.882]],
  [0.094, [0.901, 0.962, 0.879]],
  [0.096, [0.901, 0.962, 0.879]],
  [0.098, [0.898, 0.961, 0.877]],
  [0.1, [0.898, 0.961, 0.877]],
  [0.102, [0.895, 0.959, 0.874]],
  [0.104, [0.895, 0.959, 0.874]],
  [0.106, [0.892, 0.958, 0.871]],
  [0.108, [0.892, 0.958, 0.871]],
  [0.11, [0.889, 0.957, 0.869]],
  [0.112, [0.889, 0.957, 0.869]],
  [0.114, [0.887, 0.956, 0.866]],
  [0.115, [0.887, 0.956, 0.866]],
  [0.117, [0.884, 0.955, 0.864]],
  [0.119, [0.884, 0.955, 0.864]],
  [0.121, [0.881, 0.954, 0.861]],
  [0.123, [0.881, 0.954, 0.861]],
  [0.125, [0.878, 0.953, 0.858]],
  [0.127, [0.878, 0.953, 0.858]],
  [0.129, [0.876, 0.952, 0.856]],
  [0.131, [0.876, 0.952, 0.856]],
  [0.133, [0.873, 0.951, 0.853]],
  [0.135, [0.873, 0.951, 0.853]],
  [0.137, [0.871, 0.95, 0.85]],
  [0.139, [0.871, 0.95, 0.85]],
  [0.141, [0.868, 0.949, 0.848]],
  [0.143, [0.868, 0.949, 0.848]],
  [0.145, [0.866, 0.948, 0.845]],
  [0.147, [0.866, 0.948, 0.845]],
  [0.149, [0.863, 0.947, 0.842]],
  [0.151, [0.863, 0.947, 0.842]],
  [0.153, [0.861, 0.946, 0.84]],
  [0.155, [0.861, 0.946, 0.84]],
  [0.157, [0.858, 0.945, 0.837]],
  [0.159, [0.858, 0.945, 0.837]],
  [0.16, [0.856, 0.944, 0.834]],
  [0.162, [0.856, 0.944, 0.834]],
  [0.164, [0.854, 0.943, 0.831]],
  [0.166, [0.854, 0.943, 0.831]],
  [0.168, [0.851, 0.942, 0.829]],
  [0.17, [0.851, 0.942, 0.829]],
  [0.172, [0.849, 0.941, 0.826]],
  [0.174, [0.849, 0.941, 0.826]],
  [0.176, [0.846, 0.94, 0.823]],
  [0.178, [0.846, 0.94, 0.823]],
  [0.18, [0.844, 0.939, 0.821]],
  [0.182, [0.844, 0.939, 0.821]],
  [0.184, [0.841, 0.938, 0.818]],
  [0.186, [0.841, 0.938, 0.818]],
  [0.188, [0.839, 0.937, 0.815]],
  [0.19, [0.839, 0.937, 0.815]],
  [0.192, [0.836, 0.936, 0.812]],
  [0.194, [0.836, 0.936, 0.812]],
  [0.196, [0.834, 0.935, 0.81]],
  [0.198, [0.834, 0.935, 0.81]],
  [0.2, [0.831, 0.934, 0.807]],
  [0.202, [0.831, 0.934, 0.807]],
  [0.204, [0.829, 0.933, 0.804]],
  [0.205, [0.829, 0.933, 0.804]],
  [0.207, [0.826, 0.932, 0.802]],
  [0.209, [0.826, 0.932, 0.802]],
  [0.211, [0.824, 0.931, 0.799]],
  [0.213, [0.824, 0.931, 0.799]],
  [0.215, [0.822, 0.93, 0.796]],
  [0.217, [0.822, 0.93, 0.796]],
  [0.219, [0.819, 0.929, 0.794]],
  [0.221, [0.819, 0.929, 0.794]],
  [0.223, [0.817, 0.928, 0.791]],
  [0.225, [0.817, 0.928, 0.791]],
  [0.227, [0.814, 0.927, 0.788]],
  [0.229, [0.814, 0.927, 0.788]],
  [0.231, [0.812, 0.926, 0.785]],
  [0.233, [0.812, 0.926, 0.785]],
  [0.235, [0.809, 0.925, 0.783]],
  [0.237, [0.809, 0.925, 0.783]],
  [0.239, [0.807, 0.924, 0.78]],
  [0.241, [0.807, 0.924, 0.78]],
  [0.243, [0.804, 0.923, 0.777]],
  [0.245, [0.804, 0.923, 0.777]],
  [0.247, [0.802, 0.922, 0.775]],
  [0.249, [0.802, 0.922, 0.775]],
  [0.25, [0.799, 0.921, 0.772]],
  [0.252, [0.799, 0.921, 0.772]],
  [0.254, [0.794, 0.919, 0.77]],
  [0.256, [0.794, 0.919, 0.77]],
  [0.258, [0.79, 0.918, 0.768]],
  [0.26, [0.79, 0.918, 0.768]],
  [0.262, [0.786, 0.916, 0.766]],
  [0.264, [0.786, 0.916, 0.766]],
  [0.266, [0.781, 0.914, 0.764]],
  [0.268, [0.781, 0.914, 0.764]],
  [0.27, [0.777, 0.913, 0.762]],
  [0.272, [0.777, 0.913, 0.762]],
  [0.274, [0.772, 0.911, 0.76]],
  [0.276, [0.772, 0.911, 0.76]],
  [0.278, [0.768, 0.909, 0.758]],
  [0.28, [0.768, 0.909, 0.758]],
  [0.282, [0.763, 0.907, 0.756]],
  [0.284, [0.763, 0.907, 0.756]],
  [0.286, [0.759, 0.906, 0.754]],
  [0.288, [0.759, 0.906, 0.754]],
  [0.29, [0.755, 0.904, 0.752]],
  [0.292, [0.755, 0.904, 0.752]],
  [0.294, [0.75, 0.902, 0.75]],
  [0.295, [0.75, 0.902, 0.75]],
  [0.297, [0.746, 0.9, 0.748]],
  [0.299, [0.746, 0.9, 0.748]],
  [0.301, [0.741, 0.899, 0.746]],
  [0.303, [0.741, 0.899, 0.746]],
  [0.305, [0.737, 0.897, 0.744]],
  [0.307, [0.737, 0.897, 0.744]],
  [0.309, [0.732, 0.895, 0.743]],
  [0.311, [0.732, 0.895, 0.743]],
  [0.313, [0.728, 0.894, 0.741]],
  [0.315, [0.728, 0.894, 0.741]],
  [0.317, [0.724, 0.892, 0.739]],
  [0.319, [0.724, 0.892, 0.739]],
  [0.321, [0.719, 0.89, 0.737]],
  [0.323, [0.719, 0.89, 0.737]],
  [0.325, [0.715, 0.888, 0.735]],
  [0.327, [0.715, 0.888, 0.735]],
  [0.329, [0.71, 0.887, 0.733]],
  [0.331, [0.71, 0.887, 0.733]],
  [0.333, [0.706, 0.885, 0.731]],
  [0.335, [0.706, 0.885, 0.731]],
  [0.337, [0.701, 0.883, 0.729]],
  [0.339, [0.701, 0.883, 0.729]],
  [0.341, [0.697, 0.882, 0.727]],
  [0.342, [0.697, 0.882, 0.727]],
  [0.344, [0.693, 0.88, 0.725]],
  [0.346, [0.693, 0.88, 0.725]],
  [0.348, [0.688, 0.878, 0.723]],
  [0.35, [0.688, 0.878, 0.723]],
  [0.352, [0.684, 0.876, 0.721]],
  [0.354, [0.684, 0.876, 0.721]],
  [0.356, [0.679, 0.875, 0.719]],
  [0.358, [0.679, 0.875, 0.719]],
  [0.36, [0.675, 0.873, 0.717]],
  [0.362, [0.675, 0.873, 0.717]],
  [0.364, [0.67, 0.871, 0.715]],
  [0.366, [0.67, 0.871, 0.715]],
  [0.368, [0.666, 0.869, 0.713]],
  [0.37, [0.666, 0.869, 0.713]],
  [0.372, [0.662, 0.868, 0.711]],
  [0.374, [0.662, 0.868, 0.711]],
  [0.376, [0.657, 0.866, 0.71]],
  [0.378, [0.657, 0.866, 0.71]],
  [0.38, [0.651, 0.864, 0.712]],
  [0.382, [0.651, 0.864, 0.712]],
  [0.384, [0.646, 0.862, 0.714]],
  [0.386, [0.646, 0.862, 0.714]],
  [0.387, [0.64, 0.86, 0.716]],
  [0.389, [0.64, 0.86, 0.716]],
  [0.391, [0.635, 0.858, 0.718]],
  [0.393, [0.635, 0.858, 0.718]],
  [0.395, [0.629, 0.855, 0.72]],
  [0.397, [0.629, 0.855, 0.72]],
  [0.399, [0.624, 0.853, 0.722]],
  [0.401, [0.624, 0.853, 0.722]],
  [0.403, [0.618, 0.851, 0.723]],
  [0.405, [0.618, 0.851, 0.723]],
  [0.407, [0.612, 0.849, 0.725]],
  [0.409, [0.612, 0.849, 0.725]],
  [0.411, [0.607, 0.847, 0.727]],
  [0.413, [0.607, 0.847, 0.727]],
  [0.415, [0.601, 0.845, 0.729]],
  [0.417, [0.601, 0.845, 0.729]],
  [0.419, [0.596, 0.843, 0.731]],
  [0.421, [0.596, 0.843, 0.731]],
  [0.423, [0.59, 0.841, 0.733]],
  [0.425, [0.59, 0.841, 0.733]],
  [0.427, [0.585, 0.839, 0.734]],
  [0.429, [0.585, 0.839, 0.734]],
  [0.431, [0.579, 0.837, 0.736]],
  [0.432, [0.579, 0.837, 0.736]],
  [0.434, [0.574, 0.835, 0.738]],
  [0.436, [0.574, 0.835, 0.738]],
  [0.438, [0.568, 0.832, 0.74]],
  [0.44, [0.568, 0.832, 0.74]],
  [0.442, [0.563, 0.83, 0.742]],
  [0.444, [0.563, 0.83, 0.742]],
  [0.446, [0.557, 0.828, 0.744]],
  [0.448, [0.557, 0.828, 0.744]],
  [0.45, [0.552, 0.826, 0.746]],
  [0.452, [0.552, 0.826, 0.746]],
  [0.454, [0.546, 0.824, 0.747]],
  [0.456, [0.546, 0.824, 0.747]],
  [0.458, [0.54, 0.822, 0.749]],
  [0.46, [0.54, 0.822, 0.749]],
  [0.462, [0.535, 0.82, 0.751]],
  [0.464, [0.535, 0.82, 0.751]],
  [0.466, [0.529, 0.818, 0.753]],
  [0.468, [0.529, 0.818, 0.753]],
  [0.47, [0.524, 0.816, 0.755]],
  [0.472, [0.524, 0.816, 0.755]],
  [0.474, [0.518, 0.814, 0.757]],
  [0.476, [0.518, 0.814, 0.757]],
  [0.477, [0.513, 0.812, 0.758]],
  [0.479, [0.513, 0.812, 0.758]],
  [0.481, [0.507, 0.809, 0.76]],
  [0.483, [0.507, 0.809, 0.76]],
  [0.485, [0.502, 0.807, 0.762]],
  [0.487, [0.502, 0.807, 0.762]],
  [0.489, [0.496, 0.805, 0.764]],
  [0.491, [0.496, 0.805, 0.764]],
  [0.493, [0.491, 0.803, 0.766]],
  [0.495, [0.491, 0.803, 0.766]],
  [0.497, [0.485, 0.801, 0.768]],
  [0.499, [0.485, 0.801, 0.768]],
  [0.501, [0.48, 0.798, 0.77]],
  [0.503, [0.48, 0.798, 0.77]],
  [0.505, [0.474, 0.795, 0.771]],
  [0.507, [0.474, 0.795, 0.771]],
  [0.509, [0.469, 0.792, 0.773]],
  [0.511, [0.469, 0.792, 0.773]],
  [0.513, [0.463, 0.789, 0.775]],
  [0.515, [0.463, 0.789, 0.775]],
  [0.517, [0.457, 0.786, 0.777]],
  [0.519, [0.457, 0.786, 0.777]],
  [0.521, [0.452, 0.783, 0.779]],
  [0.523, [0.452, 0.783, 0.779]],
  [0.524, [0.446, 0.78, 0.781]],
  [0.526, [0.446, 0.78, 0.781]],
  [0.528, [0.441, 0.777, 0.782]],
  [0.53, [0.441, 0.777, 0.782]],
  [0.532, [0.435, 0.774, 0.784]],
  [0.534, [0.435, 0.774, 0.784]],
  [0.536, [0.43, 0.771, 0.786]],
  [0.538, [0.43, 0.771, 0.786]],
  [0.54, [0.424, 0.768, 0.788]],
  [0.542, [0.424, 0.768, 0.788]],
  [0.544, [0.419, 0.765, 0.79]],
  [0.546, [0.419, 0.765, 0.79]],
  [0.548, [0.413, 0.762, 0.792]],
  [0.55, [0.413, 0.762, 0.792]],
  [0.552, [0.408, 0.758, 0.794]],
  [0.554, [0.408, 0.758, 0.794]],
  [0.556, [0.402, 0.755, 0.795]],
  [0.558, [0.402, 0.755, 0.795]],
  [0.56, [0.397, 0.752, 0.797]],
  [0.562, [0.397, 0.752, 0.797]],
  [0.564, [0.391, 0.749, 0.799]],
  [0.566, [0.391, 0.749, 0.799]],
  [0.568, [0.385, 0.746, 0.801]],
  [0.569, [0.385, 0.746, 0.801]],
  [0.571, [0.38, 0.743, 0.803]],
  [0.573, [0.38, 0.743, 0.803]],
  [0.575, [0.374, 0.74, 0.805]],
  [0.577, [0.374, 0.74, 0.805]],
  [0.579, [0.369, 0.737, 0.806]],
  [0.581, [0.369, 0.737, 0.806]],
  [0.583, [0.363, 0.734, 0.808]],
  [0.585, [0.363, 0.734, 0.808]],
  [0.587, [0.358, 0.731, 0.81]],
  [0.589, [0.358, 0.731, 0.81]],
  [0.591, [0.352, 0.728, 0.812]],
  [0.593, [0.352, 0.728, 0.812]],
  [0.595, [0.347, 0.725, 0.814]],
  [0.597, [0.347, 0.725, 0.814]],
  [0.599, [0.341, 0.722, 0.816]],
  [0.601, [0.341, 0.722, 0.816]],
  [0.603, [0.336, 0.718, 0.818]],
  [0.605, [0.336, 0.718, 0.818]],
  [0.607, [0.33, 0.715, 0.819]],
  [0.609, [0.33, 0.715, 0.819]],
  [0.611, [0.325, 0.712, 0.821]],
  [0.613, [0.325, 0.712, 0.821]],
  [0.614, [0.319, 0.709, 0.823]],
  [0.616, [0.319, 0.709, 0.823]],
  [0.618, [0.313, 0.706, 0.825]],
  [0.62, [0.313, 0.706, 0.825]],
  [0.622, [0.308, 0.703, 0.827]],
  [0.624, [0.308, 0.703, 0.827]],
  [0.626, [0.303, 0.699, 0.826]],
  [0.628, [0.303, 0.699, 0.826]],
  [0.63, [0.299, 0.694, 0.823]],
  [0.632, [0.299, 0.694, 0.823]],
  [0.634, [0.295, 0.689, 0.821]],
  [0.636, [0.295, 0.689, 0.821]],
  [0.638, [0.29, 0.685, 0.818]],
  [0.64, [0.29, 0.685, 0.818]],
  [0.642, [0.286, 0.68, 0.816]],
  [0.644, [0.286, 0.68, 0.816]],
  [0.646, [0.282, 0.675, 0.813]],
  [0.648, [0.282, 0.675, 0.813]],
  [0.65, [0.277, 0.67, 0.81]],
  [0.652, [0.277, 0.67, 0.81]],
  [0.654, [0.273, 0.665, 0.808]],
  [0.656, [0.273, 0.665, 0.808]],
  [0.658, [0.269, 0.661, 0.805]],
  [0.659, [0.269, 0.661, 0.805]],
  [0.661, [0.264, 0.656, 0.803]],
  [0.663, [0.264, 0.656, 0.803]],
  [0.665, [0.26, 0.651, 0.8]],
  [0.667, [0.26, 0.651, 0.8]],
  [0.669, [0.256, 0.646, 0.797]],
  [0.671, [0.256, 0.646, 0.797]],
  [0.673, [0.252, 0.641, 0.795]],
  [0.675, [0.252, 0.641, 0.795]],
  [0.677, [0.247, 0.637, 0.792]],
  [0.679, [0.247, 0.637, 0.792]],
  [0.681, [0.243, 0.632, 0.79]],
  [0.683, [0.243, 0.632, 0.79]],
  [0.685, [0.239, 0.627, 0.787]],
  [0.687, [0.239, 0.627, 0.787]],
  [0.689, [0.234, 0.622, 0.784]],
  [0.691, [0.234, 0.622, 0.784]],
  [0.693, [0.23, 0.617, 0.782]],
  [0.695, [0.23, 0.617, 0.782]],
  [0.697, [0.226, 0.613, 0.779]],
  [0.699, [0.226, 0.613, 0.779]],
  [0.701, [0.221, 0.608, 0.777]],
  [0.703, [0.221, 0.608, 0.777]],
  [0.705, [0.217, 0.603, 0.774]],
  [0.706, [0.217, 0.603, 0.774]],
  [0.708, [0.213, 0.598, 0.772]],
  [0.71, [0.213, 0.598, 0.772]],
  [0.712, [0.208, 0.593, 0.769]],
  [0.714, [0.208, 0.593, 0.769]],
  [0.716, [0.204, 0.589, 0.766]],
  [0.718, [0.204, 0.589, 0.766]],
  [0.72, [0.2, 0.584, 0.764]],
  [0.722, [0.2, 0.584, 0.764]],
  [0.724, [0.196, 0.579, 0.761]],
  [0.726, [0.196, 0.579, 0.761]],
  [0.728, [0.191, 0.574, 0.759]],
  [0.73, [0.191, 0.574, 0.759]],
  [0.732, [0.187, 0.569, 0.756]],
  [0.734, [0.187, 0.569, 0.756]],
  [0.736, [0.183, 0.565, 0.753]],
  [0.738, [0.183, 0.565, 0.753]],
  [0.74, [0.178, 0.56, 0.751]],
  [0.742, [0.178, 0.56, 0.751]],
  [0.744, [0.174, 0.555, 0.748]],
  [0.746, [0.174, 0.555, 0.748]],
  [0.748, [0.17, 0.55, 0.746]],
  [0.75, [0.17, 0.55, 0.746]],
  [0.751, [0.165, 0.546, 0.743]],
  [0.753, [0.165, 0.546, 0.743]],
  [0.755, [0.161, 0.541, 0.741]],
  [0.757, [0.161, 0.541, 0.741]],
  [0.759, [0.157, 0.537, 0.739]],
  [0.761, [0.157, 0.537, 0.739]],
  [0.763, [0.152, 0.532, 0.737]],
  [0.765, [0.152, 0.532, 0.737]],
  [0.767, [0.148, 0.528, 0.735]],
  [0.769, [0.148, 0.528, 0.735]],
  [0.771, [0.144, 0.524, 0.732]],
  [0.773, [0.144, 0.524, 0.732]],
  [0.775, [0.14, 0.519, 0.73]],
  [0.777, [0.14, 0.519, 0.73]],
  [0.779, [0.135, 0.515, 0.728]],
  [0.781, [0.135, 0.515, 0.728]],
  [0.783, [0.131, 0.51, 0.726]],
  [0.785, [0.131, 0.51, 0.726]],
  [0.787, [0.127, 0.506, 0.724]],
  [0.789, [0.127, 0.506, 0.724]],
  [0.791, [0.122, 0.501, 0.721]],
  [0.793, [0.122, 0.501, 0.721]],
  [0.795, [0.118, 0.497, 0.719]],
  [0.796, [0.118, 0.497, 0.719]],
  [0.798, [0.114, 0.493, 0.717]],
  [0.8, [0.114, 0.493, 0.717]],
  [0.802, [0.109, 0.488, 0.715]],
  [0.804, [0.109, 0.488, 0.715]],
  [0.806, [0.105, 0.484, 0.712]],
  [0.808, [0.105, 0.484, 0.712]],
  [0.81, [0.101, 0.479, 0.71]],
  [0.812, [0.101, 0.479, 0.71]],
  [0.814, [0.097, 0.475, 0.708]],
  [0.816, [0.097, 0.475, 0.708]],
  [0.818, [0.092, 0.47, 0.706]],
  [0.82, [0.092, 0.47, 0.706]],
  [0.822, [0.088, 0.466, 0.704]],
  [0.824, [0.088, 0.466, 0.704]],
  [0.826, [0.084, 0.462, 0.701]],
  [0.828, [0.084, 0.462, 0.701]],
  [0.83, [0.079, 0.457, 0.699]],
  [0.832, [0.079, 0.457, 0.699]],
  [0.834, [0.075, 0.453, 0.697]],
  [0.836, [0.075, 0.453, 0.697]],
  [0.838, [0.071, 0.448, 0.695]],
  [0.84, [0.071, 0.448, 0.695]],
  [0.841, [0.066, 0.444, 0.693]],
  [0.843, [0.066, 0.444, 0.693]],
  [0.845, [0.062, 0.439, 0.69]],
  [0.847, [0.062, 0.439, 0.69]],
  [0.849, [0.058, 0.435, 0.688]],
  [0.851, [0.058, 0.435, 0.688]],
  [0.853, [0.053, 0.431, 0.686]],
  [0.855, [0.053, 0.431, 0.686]],
  [0.857, [0.049, 0.426, 0.684]],
  [0.859, [0.049, 0.426, 0.684]],
  [0.861, [0.045, 0.422, 0.681]],
  [0.863, [0.045, 0.422, 0.681]],
  [0.865, [0.041, 0.417, 0.679]],
  [0.867, [0.041, 0.417, 0.679]],
  [0.869, [0.036, 0.413, 0.677]],
  [0.871, [0.036, 0.413, 0.677]],
  [0.873, [0.032, 0.408, 0.675]],
  [0.875, [0.032, 0.408, 0.675]],
  [0.877, [0.031, 0.404, 0.67]],
  [0.879, [0.031, 0.404, 0.67]],
  [0.881, [0.031, 0.399, 0.665]],
  [0.883, [0.031, 0.399, 0.665]],
  [0.885, [0.031, 0.394, 0.659]],
  [0.886, [0.031, 0.394, 0.659]],
  [0.888, [0.031, 0.389, 0.654]],
  [0.89, [0.031, 0.389, 0.654]],
  [0.892, [0.031, 0.384, 0.649]],
  [0.894, [0.031, 0.384, 0.649]],
  [0.896, [0.031, 0.379, 0.643]],
  [0.898, [0.031, 0.379, 0.643]],
  [0.9, [0.031, 0.374, 0.638]],
  [0.902, [0.031, 0.374, 0.638]],
  [0.904, [0.031, 0.369, 0.633]],
  [0.906, [0.031, 0.369, 0.633]],
  [0.908, [0.031, 0.364, 0.628]],
  [0.91, [0.031, 0.364, 0.628]],
  [0.912, [0.031, 0.359, 0.622]],
  [0.914, [0.031, 0.359, 0.622]],
  [0.916, [0.031, 0.354, 0.617]],
  [0.918, [0.031, 0.354, 0.617]],
  [0.92, [0.031, 0.349, 0.612]],
  [0.922, [0.031, 0.349, 0.612]],
  [0.924, [0.031, 0.344, 0.606]],
  [0.926, [0.031, 0.344, 0.606]],
  [0.928, [0.031, 0.34, 0.601]],
  [0.93, [0.031, 0.34, 0.601]],
  [0.932, [0.031, 0.335, 0.596]],
  [0.933, [0.031, 0.335, 0.596]],
  [0.935, [0.031, 0.33, 0.591]],
  [0.937, [0.031, 0.33, 0.591]],
  [0.939, [0.031, 0.325, 0.585]],
  [0.941, [0.031, 0.325, 0.585]],
  [0.943, [0.031, 0.32, 0.58]],
  [0.945, [0.031, 0.32, 0.58]],
  [0.947, [0.031, 0.315, 0.575]],
  [0.949, [0.031, 0.315, 0.575]],
  [0.951, [0.031, 0.31, 0.569]],
  [0.953, [0.031, 0.31, 0.569]],
  [0.955, [0.031, 0.305, 0.564]],
  [0.957, [0.031, 0.305, 0.564]],
  [0.959, [0.031, 0.3, 0.559]],
  [0.961, [0.031, 0.3, 0.559]],
  [0.963, [0.031, 0.295, 0.553]],
  [0.965, [0.031, 0.295, 0.553]],
  [0.967, [0.031, 0.29, 0.548]],
  [0.969, [0.031, 0.29, 0.548]],
  [0.971, [0.031, 0.285, 0.543]],
  [0.973, [0.031, 0.285, 0.543]],
  [0.975, [0.031, 0.281, 0.538]],
  [0.977, [0.031, 0.281, 0.538]],
  [0.978, [0.031, 0.276, 0.532]],
  [0.98, [0.031, 0.276, 0.532]],
  [0.982, [0.031, 0.271, 0.527]],
  [0.984, [0.031, 0.271, 0.527]],
  [0.986, [0.031, 0.266, 0.522]],
  [0.988, [0.031, 0.266, 0.522]],
  [0.99, [0.031, 0.261, 0.516]],
  [0.992, [0.031, 0.261, 0.516]],
  [0.994, [0.031, 0.256, 0.511]],
  [0.996, [0.031, 0.256, 0.511]],
  [0.998, [0.031, 0.251, 0.506]],
  [1, [0.031, 0.251, 0.506]]
], lp = [
  [0, [0.969, 0.988, 0.961]],
  [2e-3, [0.969, 0.988, 0.961]],
  [4e-3, [0.966, 0.987, 0.958]],
  [6e-3, [0.966, 0.987, 0.958]],
  [8e-3, [0.964, 0.987, 0.956]],
  [0.01, [0.964, 0.987, 0.956]],
  [0.012, [0.962, 0.986, 0.953]],
  [0.014, [0.962, 0.986, 0.953]],
  [0.016, [0.96, 0.985, 0.95]],
  [0.018, [0.96, 0.985, 0.95]],
  [0.02, [0.958, 0.984, 0.948]],
  [0.022, [0.958, 0.984, 0.948]],
  [0.023, [0.955, 0.983, 0.945]],
  [0.025, [0.955, 0.983, 0.945]],
  [0.027, [0.953, 0.982, 0.943]],
  [0.029, [0.953, 0.982, 0.943]],
  [0.031, [0.951, 0.981, 0.94]],
  [0.033, [0.951, 0.981, 0.94]],
  [0.035, [0.949, 0.98, 0.938]],
  [0.037, [0.949, 0.98, 0.938]],
  [0.039, [0.946, 0.98, 0.935]],
  [0.041, [0.946, 0.98, 0.935]],
  [0.043, [0.944, 0.979, 0.932]],
  [0.045, [0.944, 0.979, 0.932]],
  [0.047, [0.942, 0.978, 0.93]],
  [0.049, [0.942, 0.978, 0.93]],
  [0.051, [0.94, 0.977, 0.927]],
  [0.053, [0.94, 0.977, 0.927]],
  [0.055, [0.938, 0.976, 0.925]],
  [0.057, [0.938, 0.976, 0.925]],
  [0.059, [0.935, 0.975, 0.922]],
  [0.061, [0.935, 0.975, 0.922]],
  [0.063, [0.933, 0.974, 0.919]],
  [0.065, [0.933, 0.974, 0.919]],
  [0.067, [0.931, 0.974, 0.917]],
  [0.068, [0.931, 0.974, 0.917]],
  [0.07, [0.929, 0.973, 0.914]],
  [0.072, [0.929, 0.973, 0.914]],
  [0.074, [0.927, 0.972, 0.912]],
  [0.076, [0.927, 0.972, 0.912]],
  [0.078, [0.924, 0.971, 0.909]],
  [0.08, [0.924, 0.971, 0.909]],
  [0.082, [0.922, 0.97, 0.907]],
  [0.084, [0.922, 0.97, 0.907]],
  [0.086, [0.92, 0.969, 0.904]],
  [0.088, [0.92, 0.969, 0.904]],
  [0.09, [0.918, 0.968, 0.901]],
  [0.092, [0.918, 0.968, 0.901]],
  [0.094, [0.915, 0.968, 0.899]],
  [0.096, [0.915, 0.968, 0.899]],
  [0.098, [0.913, 0.967, 0.896]],
  [0.1, [0.913, 0.967, 0.896]],
  [0.102, [0.911, 0.966, 0.894]],
  [0.104, [0.911, 0.966, 0.894]],
  [0.106, [0.909, 0.965, 0.891]],
  [0.108, [0.909, 0.965, 0.891]],
  [0.11, [0.907, 0.964, 0.888]],
  [0.112, [0.907, 0.964, 0.888]],
  [0.114, [0.904, 0.963, 0.886]],
  [0.115, [0.904, 0.963, 0.886]],
  [0.117, [0.902, 0.962, 0.883]],
  [0.119, [0.902, 0.962, 0.883]],
  [0.121, [0.9, 0.962, 0.881]],
  [0.123, [0.9, 0.962, 0.881]],
  [0.125, [0.898, 0.961, 0.878]],
  [0.127, [0.898, 0.961, 0.878]],
  [0.129, [0.894, 0.959, 0.874]],
  [0.131, [0.894, 0.959, 0.874]],
  [0.133, [0.89, 0.958, 0.87]],
  [0.135, [0.89, 0.958, 0.87]],
  [0.137, [0.887, 0.956, 0.866]],
  [0.139, [0.887, 0.956, 0.866]],
  [0.141, [0.883, 0.955, 0.862]],
  [0.143, [0.883, 0.955, 0.862]],
  [0.145, [0.879, 0.953, 0.858]],
  [0.147, [0.879, 0.953, 0.858]],
  [0.149, [0.875, 0.952, 0.854]],
  [0.151, [0.875, 0.952, 0.854]],
  [0.153, [0.872, 0.95, 0.85]],
  [0.155, [0.872, 0.95, 0.85]],
  [0.157, [0.868, 0.949, 0.846]],
  [0.159, [0.868, 0.949, 0.846]],
  [0.16, [0.864, 0.947, 0.843]],
  [0.162, [0.864, 0.947, 0.843]],
  [0.164, [0.861, 0.946, 0.839]],
  [0.166, [0.861, 0.946, 0.839]],
  [0.168, [0.857, 0.944, 0.835]],
  [0.17, [0.857, 0.944, 0.835]],
  [0.172, [0.853, 0.943, 0.831]],
  [0.174, [0.853, 0.943, 0.831]],
  [0.176, [0.85, 0.941, 0.827]],
  [0.178, [0.85, 0.941, 0.827]],
  [0.18, [0.846, 0.94, 0.823]],
  [0.182, [0.846, 0.94, 0.823]],
  [0.184, [0.842, 0.938, 0.819]],
  [0.186, [0.842, 0.938, 0.819]],
  [0.188, [0.839, 0.937, 0.815]],
  [0.19, [0.839, 0.937, 0.815]],
  [0.192, [0.835, 0.936, 0.811]],
  [0.194, [0.835, 0.936, 0.811]],
  [0.196, [0.831, 0.934, 0.807]],
  [0.198, [0.831, 0.934, 0.807]],
  [0.2, [0.827, 0.933, 0.803]],
  [0.202, [0.827, 0.933, 0.803]],
  [0.204, [0.824, 0.931, 0.799]],
  [0.205, [0.824, 0.931, 0.799]],
  [0.207, [0.82, 0.93, 0.795]],
  [0.209, [0.82, 0.93, 0.795]],
  [0.211, [0.816, 0.928, 0.791]],
  [0.213, [0.816, 0.928, 0.791]],
  [0.215, [0.813, 0.927, 0.787]],
  [0.217, [0.813, 0.927, 0.787]],
  [0.219, [0.809, 0.925, 0.783]],
  [0.221, [0.809, 0.925, 0.783]],
  [0.223, [0.805, 0.924, 0.78]],
  [0.225, [0.805, 0.924, 0.78]],
  [0.227, [0.802, 0.922, 0.776]],
  [0.229, [0.802, 0.922, 0.776]],
  [0.231, [0.798, 0.921, 0.772]],
  [0.233, [0.798, 0.921, 0.772]],
  [0.235, [0.794, 0.919, 0.768]],
  [0.237, [0.794, 0.919, 0.768]],
  [0.239, [0.791, 0.918, 0.764]],
  [0.241, [0.791, 0.918, 0.764]],
  [0.243, [0.787, 0.916, 0.76]],
  [0.245, [0.787, 0.916, 0.76]],
  [0.247, [0.783, 0.915, 0.756]],
  [0.249, [0.783, 0.915, 0.756]],
  [0.25, [0.779, 0.913, 0.752]],
  [0.252, [0.779, 0.913, 0.752]],
  [0.254, [0.775, 0.911, 0.747]],
  [0.256, [0.775, 0.911, 0.747]],
  [0.258, [0.77, 0.909, 0.743]],
  [0.26, [0.77, 0.909, 0.743]],
  [0.262, [0.765, 0.907, 0.738]],
  [0.264, [0.765, 0.907, 0.738]],
  [0.266, [0.761, 0.905, 0.734]],
  [0.268, [0.761, 0.905, 0.734]],
  [0.27, [0.756, 0.903, 0.729]],
  [0.272, [0.756, 0.903, 0.729]],
  [0.274, [0.751, 0.901, 0.724]],
  [0.276, [0.751, 0.901, 0.724]],
  [0.278, [0.746, 0.899, 0.72]],
  [0.28, [0.746, 0.899, 0.72]],
  [0.282, [0.742, 0.897, 0.715]],
  [0.284, [0.742, 0.897, 0.715]],
  [0.286, [0.737, 0.896, 0.711]],
  [0.288, [0.737, 0.896, 0.711]],
  [0.29, [0.732, 0.894, 0.706]],
  [0.292, [0.732, 0.894, 0.706]],
  [0.294, [0.728, 0.892, 0.702]],
  [0.295, [0.728, 0.892, 0.702]],
  [0.297, [0.723, 0.89, 0.697]],
  [0.299, [0.723, 0.89, 0.697]],
  [0.301, [0.718, 0.888, 0.693]],
  [0.303, [0.718, 0.888, 0.693]],
  [0.305, [0.714, 0.886, 0.688]],
  [0.307, [0.714, 0.886, 0.688]],
  [0.309, [0.709, 0.884, 0.684]],
  [0.311, [0.709, 0.884, 0.684]],
  [0.313, [0.704, 0.882, 0.679]],
  [0.315, [0.704, 0.882, 0.679]],
  [0.317, [0.7, 0.88, 0.674]],
  [0.319, [0.7, 0.88, 0.674]],
  [0.321, [0.695, 0.878, 0.67]],
  [0.323, [0.695, 0.878, 0.67]],
  [0.325, [0.69, 0.876, 0.665]],
  [0.327, [0.69, 0.876, 0.665]],
  [0.329, [0.686, 0.874, 0.661]],
  [0.331, [0.686, 0.874, 0.661]],
  [0.333, [0.681, 0.872, 0.656]],
  [0.335, [0.681, 0.872, 0.656]],
  [0.337, [0.676, 0.87, 0.652]],
  [0.339, [0.676, 0.87, 0.652]],
  [0.341, [0.672, 0.868, 0.647]],
  [0.342, [0.672, 0.868, 0.647]],
  [0.344, [0.667, 0.866, 0.643]],
  [0.346, [0.667, 0.866, 0.643]],
  [0.348, [0.662, 0.864, 0.638]],
  [0.35, [0.662, 0.864, 0.638]],
  [0.352, [0.658, 0.862, 0.633]],
  [0.354, [0.658, 0.862, 0.633]],
  [0.356, [0.653, 0.86, 0.629]],
  [0.358, [0.653, 0.86, 0.629]],
  [0.36, [0.648, 0.858, 0.624]],
  [0.362, [0.648, 0.858, 0.624]],
  [0.364, [0.644, 0.856, 0.62]],
  [0.366, [0.644, 0.856, 0.62]],
  [0.368, [0.639, 0.854, 0.615]],
  [0.37, [0.639, 0.854, 0.615]],
  [0.372, [0.634, 0.852, 0.611]],
  [0.374, [0.634, 0.852, 0.611]],
  [0.376, [0.629, 0.85, 0.606]],
  [0.378, [0.629, 0.85, 0.606]],
  [0.38, [0.624, 0.847, 0.602]],
  [0.382, [0.624, 0.847, 0.602]],
  [0.384, [0.618, 0.845, 0.597]],
  [0.386, [0.618, 0.845, 0.597]],
  [0.387, [0.613, 0.842, 0.592]],
  [0.389, [0.613, 0.842, 0.592]],
  [0.391, [0.607, 0.84, 0.588]],
  [0.393, [0.607, 0.84, 0.588]],
  [0.395, [0.602, 0.837, 0.583]],
  [0.397, [0.602, 0.837, 0.583]],
  [0.399, [0.596, 0.835, 0.579]],
  [0.401, [0.596, 0.835, 0.579]],
  [0.403, [0.591, 0.832, 0.574]],
  [0.405, [0.591, 0.832, 0.574]],
  [0.407, [0.585, 0.829, 0.57]],
  [0.409, [0.585, 0.829, 0.57]],
  [0.411, [0.579, 0.827, 0.565]],
  [0.413, [0.579, 0.827, 0.565]],
  [0.415, [0.574, 0.824, 0.561]],
  [0.417, [0.574, 0.824, 0.561]],
  [0.419, [0.568, 0.822, 0.556]],
  [0.421, [0.568, 0.822, 0.556]],
  [0.423, [0.563, 0.819, 0.552]],
  [0.425, [0.563, 0.819, 0.552]],
  [0.427, [0.557, 0.816, 0.547]],
  [0.429, [0.557, 0.816, 0.547]],
  [0.431, [0.552, 0.814, 0.542]],
  [0.432, [0.552, 0.814, 0.542]],
  [0.434, [0.546, 0.811, 0.538]],
  [0.436, [0.546, 0.811, 0.538]],
  [0.438, [0.541, 0.809, 0.533]],
  [0.44, [0.541, 0.809, 0.533]],
  [0.442, [0.535, 0.806, 0.529]],
  [0.444, [0.535, 0.806, 0.529]],
  [0.446, [0.53, 0.804, 0.524]],
  [0.448, [0.53, 0.804, 0.524]],
  [0.45, [0.524, 0.801, 0.52]],
  [0.452, [0.524, 0.801, 0.52]],
  [0.454, [0.519, 0.798, 0.515]],
  [0.456, [0.519, 0.798, 0.515]],
  [0.458, [0.513, 0.796, 0.511]],
  [0.46, [0.513, 0.796, 0.511]],
  [0.462, [0.507, 0.793, 0.506]],
  [0.464, [0.507, 0.793, 0.506]],
  [0.466, [0.502, 0.791, 0.501]],
  [0.468, [0.502, 0.791, 0.501]],
  [0.47, [0.496, 0.788, 0.497]],
  [0.472, [0.496, 0.788, 0.497]],
  [0.474, [0.491, 0.785, 0.492]],
  [0.476, [0.491, 0.785, 0.492]],
  [0.477, [0.485, 0.783, 0.488]],
  [0.479, [0.485, 0.783, 0.488]],
  [0.481, [0.48, 0.78, 0.483]],
  [0.483, [0.48, 0.78, 0.483]],
  [0.485, [0.474, 0.778, 0.479]],
  [0.487, [0.474, 0.778, 0.479]],
  [0.489, [0.469, 0.775, 0.474]],
  [0.491, [0.469, 0.775, 0.474]],
  [0.493, [0.463, 0.773, 0.47]],
  [0.495, [0.463, 0.773, 0.47]],
  [0.497, [0.458, 0.77, 0.465]],
  [0.499, [0.458, 0.77, 0.465]],
  [0.501, [0.452, 0.767, 0.461]],
  [0.503, [0.452, 0.767, 0.461]],
  [0.505, [0.445, 0.764, 0.458]],
  [0.507, [0.445, 0.764, 0.458]],
  [0.509, [0.439, 0.761, 0.455]],
  [0.511, [0.439, 0.761, 0.455]],
  [0.513, [0.433, 0.758, 0.452]],
  [0.515, [0.433, 0.758, 0.452]],
  [0.517, [0.427, 0.755, 0.449]],
  [0.519, [0.427, 0.755, 0.449]],
  [0.521, [0.42, 0.752, 0.446]],
  [0.523, [0.42, 0.752, 0.446]],
  [0.524, [0.414, 0.749, 0.443]],
  [0.526, [0.414, 0.749, 0.443]],
  [0.528, [0.408, 0.746, 0.44]],
  [0.53, [0.408, 0.746, 0.44]],
  [0.532, [0.402, 0.742, 0.437]],
  [0.534, [0.402, 0.742, 0.437]],
  [0.536, [0.395, 0.739, 0.434]],
  [0.538, [0.395, 0.739, 0.434]],
  [0.54, [0.389, 0.736, 0.43]],
  [0.542, [0.389, 0.736, 0.43]],
  [0.544, [0.383, 0.733, 0.427]],
  [0.546, [0.383, 0.733, 0.427]],
  [0.548, [0.376, 0.73, 0.424]],
  [0.55, [0.376, 0.73, 0.424]],
  [0.552, [0.37, 0.727, 0.421]],
  [0.554, [0.37, 0.727, 0.421]],
  [0.556, [0.364, 0.724, 0.418]],
  [0.558, [0.364, 0.724, 0.418]],
  [0.56, [0.358, 0.721, 0.415]],
  [0.562, [0.358, 0.721, 0.415]],
  [0.564, [0.351, 0.718, 0.412]],
  [0.566, [0.351, 0.718, 0.412]],
  [0.568, [0.345, 0.715, 0.409]],
  [0.569, [0.345, 0.715, 0.409]],
  [0.571, [0.339, 0.712, 0.406]],
  [0.573, [0.339, 0.712, 0.406]],
  [0.575, [0.333, 0.709, 0.403]],
  [0.577, [0.333, 0.709, 0.403]],
  [0.579, [0.326, 0.706, 0.4]],
  [0.581, [0.326, 0.706, 0.4]],
  [0.583, [0.32, 0.702, 0.397]],
  [0.585, [0.32, 0.702, 0.397]],
  [0.587, [0.314, 0.699, 0.394]],
  [0.589, [0.314, 0.699, 0.394]],
  [0.591, [0.307, 0.696, 0.39]],
  [0.593, [0.307, 0.696, 0.39]],
  [0.595, [0.301, 0.693, 0.387]],
  [0.597, [0.301, 0.693, 0.387]],
  [0.599, [0.295, 0.69, 0.384]],
  [0.601, [0.295, 0.69, 0.384]],
  [0.603, [0.289, 0.687, 0.381]],
  [0.605, [0.289, 0.687, 0.381]],
  [0.607, [0.282, 0.684, 0.378]],
  [0.609, [0.282, 0.684, 0.378]],
  [0.611, [0.276, 0.681, 0.375]],
  [0.613, [0.276, 0.681, 0.375]],
  [0.614, [0.27, 0.678, 0.372]],
  [0.616, [0.27, 0.678, 0.372]],
  [0.618, [0.264, 0.675, 0.369]],
  [0.62, [0.264, 0.675, 0.369]],
  [0.622, [0.257, 0.672, 0.366]],
  [0.624, [0.257, 0.672, 0.366]],
  [0.626, [0.253, 0.668, 0.363]],
  [0.628, [0.253, 0.668, 0.363]],
  [0.63, [0.249, 0.664, 0.36]],
  [0.632, [0.249, 0.664, 0.36]],
  [0.634, [0.245, 0.66, 0.357]],
  [0.636, [0.245, 0.66, 0.357]],
  [0.638, [0.242, 0.656, 0.354]],
  [0.64, [0.242, 0.656, 0.354]],
  [0.642, [0.238, 0.652, 0.351]],
  [0.644, [0.238, 0.652, 0.351]],
  [0.646, [0.234, 0.648, 0.348]],
  [0.648, [0.234, 0.648, 0.348]],
  [0.65, [0.23, 0.645, 0.345]],
  [0.652, [0.23, 0.645, 0.345]],
  [0.654, [0.227, 0.641, 0.342]],
  [0.656, [0.227, 0.641, 0.342]],
  [0.658, [0.223, 0.637, 0.339]],
  [0.659, [0.223, 0.637, 0.339]],
  [0.661, [0.219, 0.633, 0.336]],
  [0.663, [0.219, 0.633, 0.336]],
  [0.665, [0.216, 0.629, 0.333]],
  [0.667, [0.216, 0.629, 0.333]],
  [0.669, [0.212, 0.625, 0.33]],
  [0.671, [0.212, 0.625, 0.33]],
  [0.673, [0.208, 0.621, 0.327]],
  [0.675, [0.208, 0.621, 0.327]],
  [0.677, [0.205, 0.617, 0.324]],
  [0.679, [0.205, 0.617, 0.324]],
  [0.681, [0.201, 0.613, 0.322]],
  [0.683, [0.201, 0.613, 0.322]],
  [0.685, [0.197, 0.609, 0.319]],
  [0.687, [0.197, 0.609, 0.319]],
  [0.689, [0.194, 0.605, 0.316]],
  [0.691, [0.194, 0.605, 0.316]],
  [0.693, [0.19, 0.601, 0.313]],
  [0.695, [0.19, 0.601, 0.313]],
  [0.697, [0.186, 0.597, 0.31]],
  [0.699, [0.186, 0.597, 0.31]],
  [0.701, [0.182, 0.593, 0.307]],
  [0.703, [0.182, 0.593, 0.307]],
  [0.705, [0.179, 0.589, 0.304]],
  [0.706, [0.179, 0.589, 0.304]],
  [0.708, [0.175, 0.585, 0.301]],
  [0.71, [0.175, 0.585, 0.301]],
  [0.712, [0.171, 0.582, 0.298]],
  [0.714, [0.171, 0.582, 0.298]],
  [0.716, [0.168, 0.578, 0.295]],
  [0.718, [0.168, 0.578, 0.295]],
  [0.72, [0.164, 0.574, 0.292]],
  [0.722, [0.164, 0.574, 0.292]],
  [0.724, [0.16, 0.57, 0.289]],
  [0.726, [0.16, 0.57, 0.289]],
  [0.728, [0.157, 0.566, 0.286]],
  [0.73, [0.157, 0.566, 0.286]],
  [0.732, [0.153, 0.562, 0.283]],
  [0.734, [0.153, 0.562, 0.283]],
  [0.736, [0.149, 0.558, 0.28]],
  [0.738, [0.149, 0.558, 0.28]],
  [0.74, [0.146, 0.554, 0.277]],
  [0.742, [0.146, 0.554, 0.277]],
  [0.744, [0.142, 0.55, 0.274]],
  [0.746, [0.142, 0.55, 0.274]],
  [0.748, [0.138, 0.546, 0.271]],
  [0.75, [0.138, 0.546, 0.271]],
  [0.751, [0.134, 0.542, 0.268]],
  [0.753, [0.134, 0.542, 0.268]],
  [0.755, [0.13, 0.539, 0.265]],
  [0.757, [0.13, 0.539, 0.265]],
  [0.759, [0.125, 0.535, 0.262]],
  [0.761, [0.125, 0.535, 0.262]],
  [0.763, [0.121, 0.531, 0.259]],
  [0.765, [0.121, 0.531, 0.259]],
  [0.767, [0.117, 0.528, 0.256]],
  [0.769, [0.117, 0.528, 0.256]],
  [0.771, [0.112, 0.524, 0.253]],
  [0.773, [0.112, 0.524, 0.253]],
  [0.775, [0.108, 0.52, 0.25]],
  [0.777, [0.108, 0.52, 0.25]],
  [0.779, [0.104, 0.516, 0.247]],
  [0.781, [0.104, 0.516, 0.247]],
  [0.783, [0.1, 0.513, 0.244]],
  [0.785, [0.1, 0.513, 0.244]],
  [0.787, [0.095, 0.509, 0.241]],
  [0.789, [0.095, 0.509, 0.241]],
  [0.791, [0.091, 0.505, 0.238]],
  [0.793, [0.091, 0.505, 0.238]],
  [0.795, [0.087, 0.502, 0.234]],
  [0.796, [0.087, 0.502, 0.234]],
  [0.798, [0.082, 0.498, 0.231]],
  [0.8, [0.082, 0.498, 0.231]],
  [0.802, [0.078, 0.494, 0.228]],
  [0.804, [0.078, 0.494, 0.228]],
  [0.806, [0.074, 0.491, 0.225]],
  [0.808, [0.074, 0.491, 0.225]],
  [0.81, [0.069, 0.487, 0.222]],
  [0.812, [0.069, 0.487, 0.222]],
  [0.814, [0.065, 0.483, 0.219]],
  [0.816, [0.065, 0.483, 0.219]],
  [0.818, [0.061, 0.48, 0.216]],
  [0.82, [0.061, 0.48, 0.216]],
  [0.822, [0.057, 0.476, 0.213]],
  [0.824, [0.057, 0.476, 0.213]],
  [0.826, [0.052, 0.472, 0.21]],
  [0.828, [0.052, 0.472, 0.21]],
  [0.83, [0.048, 0.469, 0.207]],
  [0.832, [0.048, 0.469, 0.207]],
  [0.834, [0.044, 0.465, 0.204]],
  [0.836, [0.044, 0.465, 0.204]],
  [0.838, [0.039, 0.461, 0.201]],
  [0.84, [0.039, 0.461, 0.201]],
  [0.841, [0.035, 0.457, 0.198]],
  [0.843, [0.035, 0.457, 0.198]],
  [0.845, [0.031, 0.454, 0.194]],
  [0.847, [0.031, 0.454, 0.194]],
  [0.849, [0.026, 0.45, 0.191]],
  [0.851, [0.026, 0.45, 0.191]],
  [0.853, [0.022, 0.446, 0.188]],
  [0.855, [0.022, 0.446, 0.188]],
  [0.857, [0.018, 0.443, 0.185]],
  [0.859, [0.018, 0.443, 0.185]],
  [0.861, [0.013, 0.439, 0.182]],
  [0.863, [0.013, 0.439, 0.182]],
  [0.865, [9e-3, 0.435, 0.179]],
  [0.867, [9e-3, 0.435, 0.179]],
  [0.869, [5e-3, 0.432, 0.176]],
  [0.871, [5e-3, 0.432, 0.176]],
  [0.873, [1e-3, 0.428, 0.173]],
  [0.875, [1e-3, 0.428, 0.173]],
  [0.877, [0, 0.423, 0.171]],
  [0.879, [0, 0.423, 0.171]],
  [0.881, [0, 0.418, 0.169]],
  [0.883, [0, 0.418, 0.169]],
  [0.885, [0, 0.413, 0.167]],
  [0.886, [0, 0.413, 0.167]],
  [0.888, [0, 0.408, 0.164]],
  [0.89, [0, 0.408, 0.164]],
  [0.892, [0, 0.403, 0.162]],
  [0.894, [0, 0.403, 0.162]],
  [0.896, [0, 0.398, 0.16]],
  [0.898, [0, 0.398, 0.16]],
  [0.9, [0, 0.393, 0.158]],
  [0.902, [0, 0.393, 0.158]],
  [0.904, [0, 0.388, 0.156]],
  [0.906, [0, 0.388, 0.156]],
  [0.908, [0, 0.383, 0.154]],
  [0.91, [0, 0.383, 0.154]],
  [0.912, [0, 0.378, 0.152]],
  [0.914, [0, 0.378, 0.152]],
  [0.916, [0, 0.373, 0.15]],
  [0.918, [0, 0.373, 0.15]],
  [0.92, [0, 0.368, 0.148]],
  [0.922, [0, 0.368, 0.148]],
  [0.924, [0, 0.363, 0.146]],
  [0.926, [0, 0.363, 0.146]],
  [0.928, [0, 0.357, 0.144]],
  [0.93, [0, 0.357, 0.144]],
  [0.932, [0, 0.352, 0.141]],
  [0.933, [0, 0.352, 0.141]],
  [0.935, [0, 0.347, 0.139]],
  [0.937, [0, 0.347, 0.139]],
  [0.939, [0, 0.342, 0.137]],
  [0.941, [0, 0.342, 0.137]],
  [0.943, [0, 0.337, 0.135]],
  [0.945, [0, 0.337, 0.135]],
  [0.947, [0, 0.332, 0.133]],
  [0.949, [0, 0.332, 0.133]],
  [0.951, [0, 0.327, 0.131]],
  [0.953, [0, 0.327, 0.131]],
  [0.955, [0, 0.322, 0.129]],
  [0.957, [0, 0.322, 0.129]],
  [0.959, [0, 0.317, 0.127]],
  [0.961, [0, 0.317, 0.127]],
  [0.963, [0, 0.312, 0.125]],
  [0.965, [0, 0.312, 0.125]],
  [0.967, [0, 0.307, 0.123]],
  [0.969, [0, 0.307, 0.123]],
  [0.971, [0, 0.302, 0.121]],
  [0.973, [0, 0.302, 0.121]],
  [0.975, [0, 0.297, 0.118]],
  [0.977, [0, 0.297, 0.118]],
  [0.978, [0, 0.292, 0.116]],
  [0.98, [0, 0.292, 0.116]],
  [0.982, [0, 0.287, 0.114]],
  [0.984, [0, 0.287, 0.114]],
  [0.986, [0, 0.282, 0.112]],
  [0.988, [0, 0.282, 0.112]],
  [0.99, [0, 0.277, 0.11]],
  [0.992, [0, 0.277, 0.11]],
  [0.994, [0, 0.272, 0.108]],
  [0.996, [0, 0.272, 0.108]],
  [0.998, [0, 0.267, 0.106]],
  [1, [0, 0.267, 0.106]]
], cp = [
  [0, [1, 1, 1]],
  [2e-3, [1, 1, 1]],
  [4e-3, [0.998, 0.998, 0.998]],
  [6e-3, [0.998, 0.998, 0.998]],
  [8e-3, [0.996, 0.996, 0.996]],
  [0.01, [0.996, 0.996, 0.996]],
  [0.012, [0.994, 0.994, 0.994]],
  [0.014, [0.994, 0.994, 0.994]],
  [0.016, [0.993, 0.993, 0.993]],
  [0.018, [0.993, 0.993, 0.993]],
  [0.02, [0.991, 0.991, 0.991]],
  [0.022, [0.991, 0.991, 0.991]],
  [0.023, [0.989, 0.989, 0.989]],
  [0.025, [0.989, 0.989, 0.989]],
  [0.027, [0.987, 0.987, 0.987]],
  [0.029, [0.987, 0.987, 0.987]],
  [0.031, [0.985, 0.985, 0.985]],
  [0.033, [0.985, 0.985, 0.985]],
  [0.035, [0.983, 0.983, 0.983]],
  [0.037, [0.983, 0.983, 0.983]],
  [0.039, [0.982, 0.982, 0.982]],
  [0.041, [0.982, 0.982, 0.982]],
  [0.043, [0.98, 0.98, 0.98]],
  [0.045, [0.98, 0.98, 0.98]],
  [0.047, [0.978, 0.978, 0.978]],
  [0.049, [0.978, 0.978, 0.978]],
  [0.051, [0.976, 0.976, 0.976]],
  [0.053, [0.976, 0.976, 0.976]],
  [0.055, [0.974, 0.974, 0.974]],
  [0.057, [0.974, 0.974, 0.974]],
  [0.059, [0.972, 0.972, 0.972]],
  [0.061, [0.972, 0.972, 0.972]],
  [0.063, [0.97, 0.97, 0.97]],
  [0.065, [0.97, 0.97, 0.97]],
  [0.067, [0.969, 0.969, 0.969]],
  [0.068, [0.969, 0.969, 0.969]],
  [0.07, [0.967, 0.967, 0.967]],
  [0.072, [0.967, 0.967, 0.967]],
  [0.074, [0.965, 0.965, 0.965]],
  [0.076, [0.965, 0.965, 0.965]],
  [0.078, [0.963, 0.963, 0.963]],
  [0.08, [0.963, 0.963, 0.963]],
  [0.082, [0.961, 0.961, 0.961]],
  [0.084, [0.961, 0.961, 0.961]],
  [0.086, [0.959, 0.959, 0.959]],
  [0.088, [0.959, 0.959, 0.959]],
  [0.09, [0.958, 0.958, 0.958]],
  [0.092, [0.958, 0.958, 0.958]],
  [0.094, [0.956, 0.956, 0.956]],
  [0.096, [0.956, 0.956, 0.956]],
  [0.098, [0.954, 0.954, 0.954]],
  [0.1, [0.954, 0.954, 0.954]],
  [0.102, [0.952, 0.952, 0.952]],
  [0.104, [0.952, 0.952, 0.952]],
  [0.106, [0.95, 0.95, 0.95]],
  [0.108, [0.95, 0.95, 0.95]],
  [0.11, [0.948, 0.948, 0.948]],
  [0.112, [0.948, 0.948, 0.948]],
  [0.114, [0.946, 0.946, 0.946]],
  [0.115, [0.946, 0.946, 0.946]],
  [0.117, [0.945, 0.945, 0.945]],
  [0.119, [0.945, 0.945, 0.945]],
  [0.121, [0.943, 0.943, 0.943]],
  [0.123, [0.943, 0.943, 0.943]],
  [0.125, [0.941, 0.941, 0.941]],
  [0.127, [0.941, 0.941, 0.941]],
  [0.129, [0.938, 0.938, 0.938]],
  [0.131, [0.938, 0.938, 0.938]],
  [0.133, [0.935, 0.935, 0.935]],
  [0.135, [0.935, 0.935, 0.935]],
  [0.137, [0.932, 0.932, 0.932]],
  [0.139, [0.932, 0.932, 0.932]],
  [0.141, [0.93, 0.93, 0.93]],
  [0.143, [0.93, 0.93, 0.93]],
  [0.145, [0.927, 0.927, 0.927]],
  [0.147, [0.927, 0.927, 0.927]],
  [0.149, [0.924, 0.924, 0.924]],
  [0.151, [0.924, 0.924, 0.924]],
  [0.153, [0.921, 0.921, 0.921]],
  [0.155, [0.921, 0.921, 0.921]],
  [0.157, [0.918, 0.918, 0.918]],
  [0.159, [0.918, 0.918, 0.918]],
  [0.16, [0.915, 0.915, 0.915]],
  [0.162, [0.915, 0.915, 0.915]],
  [0.164, [0.913, 0.913, 0.913]],
  [0.166, [0.913, 0.913, 0.913]],
  [0.168, [0.91, 0.91, 0.91]],
  [0.17, [0.91, 0.91, 0.91]],
  [0.172, [0.907, 0.907, 0.907]],
  [0.174, [0.907, 0.907, 0.907]],
  [0.176, [0.904, 0.904, 0.904]],
  [0.178, [0.904, 0.904, 0.904]],
  [0.18, [0.901, 0.901, 0.901]],
  [0.182, [0.901, 0.901, 0.901]],
  [0.184, [0.898, 0.898, 0.898]],
  [0.186, [0.898, 0.898, 0.898]],
  [0.188, [0.896, 0.896, 0.896]],
  [0.19, [0.896, 0.896, 0.896]],
  [0.192, [0.893, 0.893, 0.893]],
  [0.194, [0.893, 0.893, 0.893]],
  [0.196, [0.89, 0.89, 0.89]],
  [0.198, [0.89, 0.89, 0.89]],
  [0.2, [0.887, 0.887, 0.887]],
  [0.202, [0.887, 0.887, 0.887]],
  [0.204, [0.884, 0.884, 0.884]],
  [0.205, [0.884, 0.884, 0.884]],
  [0.207, [0.881, 0.881, 0.881]],
  [0.209, [0.881, 0.881, 0.881]],
  [0.211, [0.879, 0.879, 0.879]],
  [0.213, [0.879, 0.879, 0.879]],
  [0.215, [0.876, 0.876, 0.876]],
  [0.217, [0.876, 0.876, 0.876]],
  [0.219, [0.873, 0.873, 0.873]],
  [0.221, [0.873, 0.873, 0.873]],
  [0.223, [0.87, 0.87, 0.87]],
  [0.225, [0.87, 0.87, 0.87]],
  [0.227, [0.867, 0.867, 0.867]],
  [0.229, [0.867, 0.867, 0.867]],
  [0.231, [0.864, 0.864, 0.864]],
  [0.233, [0.864, 0.864, 0.864]],
  [0.235, [0.862, 0.862, 0.862]],
  [0.237, [0.862, 0.862, 0.862]],
  [0.239, [0.859, 0.859, 0.859]],
  [0.241, [0.859, 0.859, 0.859]],
  [0.243, [0.856, 0.856, 0.856]],
  [0.245, [0.856, 0.856, 0.856]],
  [0.247, [0.853, 0.853, 0.853]],
  [0.249, [0.853, 0.853, 0.853]],
  [0.25, [0.85, 0.85, 0.85]],
  [0.252, [0.85, 0.85, 0.85]],
  [0.254, [0.847, 0.847, 0.847]],
  [0.256, [0.847, 0.847, 0.847]],
  [0.258, [0.843, 0.843, 0.843]],
  [0.26, [0.843, 0.843, 0.843]],
  [0.262, [0.84, 0.84, 0.84]],
  [0.264, [0.84, 0.84, 0.84]],
  [0.266, [0.836, 0.836, 0.836]],
  [0.268, [0.836, 0.836, 0.836]],
  [0.27, [0.833, 0.833, 0.833]],
  [0.272, [0.833, 0.833, 0.833]],
  [0.274, [0.829, 0.829, 0.829]],
  [0.276, [0.829, 0.829, 0.829]],
  [0.278, [0.826, 0.826, 0.826]],
  [0.28, [0.826, 0.826, 0.826]],
  [0.282, [0.823, 0.823, 0.823]],
  [0.284, [0.823, 0.823, 0.823]],
  [0.286, [0.819, 0.819, 0.819]],
  [0.288, [0.819, 0.819, 0.819]],
  [0.29, [0.816, 0.816, 0.816]],
  [0.292, [0.816, 0.816, 0.816]],
  [0.294, [0.812, 0.812, 0.812]],
  [0.295, [0.812, 0.812, 0.812]],
  [0.297, [0.809, 0.809, 0.809]],
  [0.299, [0.809, 0.809, 0.809]],
  [0.301, [0.805, 0.805, 0.805]],
  [0.303, [0.805, 0.805, 0.805]],
  [0.305, [0.802, 0.802, 0.802]],
  [0.307, [0.802, 0.802, 0.802]],
  [0.309, [0.798, 0.798, 0.798]],
  [0.311, [0.798, 0.798, 0.798]],
  [0.313, [0.795, 0.795, 0.795]],
  [0.315, [0.795, 0.795, 0.795]],
  [0.317, [0.792, 0.792, 0.792]],
  [0.319, [0.792, 0.792, 0.792]],
  [0.321, [0.788, 0.788, 0.788]],
  [0.323, [0.788, 0.788, 0.788]],
  [0.325, [0.785, 0.785, 0.785]],
  [0.327, [0.785, 0.785, 0.785]],
  [0.329, [0.781, 0.781, 0.781]],
  [0.331, [0.781, 0.781, 0.781]],
  [0.333, [0.778, 0.778, 0.778]],
  [0.335, [0.778, 0.778, 0.778]],
  [0.337, [0.774, 0.774, 0.774]],
  [0.339, [0.774, 0.774, 0.774]],
  [0.341, [0.771, 0.771, 0.771]],
  [0.342, [0.771, 0.771, 0.771]],
  [0.344, [0.767, 0.767, 0.767]],
  [0.346, [0.767, 0.767, 0.767]],
  [0.348, [0.764, 0.764, 0.764]],
  [0.35, [0.764, 0.764, 0.764]],
  [0.352, [0.761, 0.761, 0.761]],
  [0.354, [0.761, 0.761, 0.761]],
  [0.356, [0.757, 0.757, 0.757]],
  [0.358, [0.757, 0.757, 0.757]],
  [0.36, [0.754, 0.754, 0.754]],
  [0.362, [0.754, 0.754, 0.754]],
  [0.364, [0.75, 0.75, 0.75]],
  [0.366, [0.75, 0.75, 0.75]],
  [0.368, [0.747, 0.747, 0.747]],
  [0.37, [0.747, 0.747, 0.747]],
  [0.372, [0.743, 0.743, 0.743]],
  [0.374, [0.743, 0.743, 0.743]],
  [0.376, [0.739, 0.739, 0.739]],
  [0.378, [0.739, 0.739, 0.739]],
  [0.38, [0.735, 0.735, 0.735]],
  [0.382, [0.735, 0.735, 0.735]],
  [0.384, [0.73, 0.73, 0.73]],
  [0.386, [0.73, 0.73, 0.73]],
  [0.387, [0.725, 0.725, 0.725]],
  [0.389, [0.725, 0.725, 0.725]],
  [0.391, [0.72, 0.72, 0.72]],
  [0.393, [0.72, 0.72, 0.72]],
  [0.395, [0.715, 0.715, 0.715]],
  [0.397, [0.715, 0.715, 0.715]],
  [0.399, [0.711, 0.711, 0.711]],
  [0.401, [0.711, 0.711, 0.711]],
  [0.403, [0.706, 0.706, 0.706]],
  [0.405, [0.706, 0.706, 0.706]],
  [0.407, [0.701, 0.701, 0.701]],
  [0.409, [0.701, 0.701, 0.701]],
  [0.411, [0.696, 0.696, 0.696]],
  [0.413, [0.696, 0.696, 0.696]],
  [0.415, [0.691, 0.691, 0.691]],
  [0.417, [0.691, 0.691, 0.691]],
  [0.419, [0.687, 0.687, 0.687]],
  [0.421, [0.687, 0.687, 0.687]],
  [0.423, [0.682, 0.682, 0.682]],
  [0.425, [0.682, 0.682, 0.682]],
  [0.427, [0.677, 0.677, 0.677]],
  [0.429, [0.677, 0.677, 0.677]],
  [0.431, [0.672, 0.672, 0.672]],
  [0.432, [0.672, 0.672, 0.672]],
  [0.434, [0.667, 0.667, 0.667]],
  [0.436, [0.667, 0.667, 0.667]],
  [0.438, [0.663, 0.663, 0.663]],
  [0.44, [0.663, 0.663, 0.663]],
  [0.442, [0.658, 0.658, 0.658]],
  [0.444, [0.658, 0.658, 0.658]],
  [0.446, [0.653, 0.653, 0.653]],
  [0.448, [0.653, 0.653, 0.653]],
  [0.45, [0.648, 0.648, 0.648]],
  [0.452, [0.648, 0.648, 0.648]],
  [0.454, [0.643, 0.643, 0.643]],
  [0.456, [0.643, 0.643, 0.643]],
  [0.458, [0.639, 0.639, 0.639]],
  [0.46, [0.639, 0.639, 0.639]],
  [0.462, [0.634, 0.634, 0.634]],
  [0.464, [0.634, 0.634, 0.634]],
  [0.466, [0.629, 0.629, 0.629]],
  [0.468, [0.629, 0.629, 0.629]],
  [0.47, [0.624, 0.624, 0.624]],
  [0.472, [0.624, 0.624, 0.624]],
  [0.474, [0.619, 0.619, 0.619]],
  [0.476, [0.619, 0.619, 0.619]],
  [0.477, [0.615, 0.615, 0.615]],
  [0.479, [0.615, 0.615, 0.615]],
  [0.481, [0.61, 0.61, 0.61]],
  [0.483, [0.61, 0.61, 0.61]],
  [0.485, [0.605, 0.605, 0.605]],
  [0.487, [0.605, 0.605, 0.605]],
  [0.489, [0.6, 0.6, 0.6]],
  [0.491, [0.6, 0.6, 0.6]],
  [0.493, [0.595, 0.595, 0.595]],
  [0.495, [0.595, 0.595, 0.595]],
  [0.497, [0.591, 0.591, 0.591]],
  [0.499, [0.591, 0.591, 0.591]],
  [0.501, [0.586, 0.586, 0.586]],
  [0.503, [0.586, 0.586, 0.586]],
  [0.505, [0.582, 0.582, 0.582]],
  [0.507, [0.582, 0.582, 0.582]],
  [0.509, [0.577, 0.577, 0.577]],
  [0.511, [0.577, 0.577, 0.577]],
  [0.513, [0.573, 0.573, 0.573]],
  [0.515, [0.573, 0.573, 0.573]],
  [0.517, [0.569, 0.569, 0.569]],
  [0.519, [0.569, 0.569, 0.569]],
  [0.521, [0.565, 0.565, 0.565]],
  [0.523, [0.565, 0.565, 0.565]],
  [0.524, [0.56, 0.56, 0.56]],
  [0.526, [0.56, 0.56, 0.56]],
  [0.528, [0.556, 0.556, 0.556]],
  [0.53, [0.556, 0.556, 0.556]],
  [0.532, [0.552, 0.552, 0.552]],
  [0.534, [0.552, 0.552, 0.552]],
  [0.536, [0.547, 0.547, 0.547]],
  [0.538, [0.547, 0.547, 0.547]],
  [0.54, [0.543, 0.543, 0.543]],
  [0.542, [0.543, 0.543, 0.543]],
  [0.544, [0.539, 0.539, 0.539]],
  [0.546, [0.539, 0.539, 0.539]],
  [0.548, [0.534, 0.534, 0.534]],
  [0.55, [0.534, 0.534, 0.534]],
  [0.552, [0.53, 0.53, 0.53]],
  [0.554, [0.53, 0.53, 0.53]],
  [0.556, [0.526, 0.526, 0.526]],
  [0.558, [0.526, 0.526, 0.526]],
  [0.56, [0.521, 0.521, 0.521]],
  [0.562, [0.521, 0.521, 0.521]],
  [0.564, [0.517, 0.517, 0.517]],
  [0.566, [0.517, 0.517, 0.517]],
  [0.568, [0.513, 0.513, 0.513]],
  [0.569, [0.513, 0.513, 0.513]],
  [0.571, [0.509, 0.509, 0.509]],
  [0.573, [0.509, 0.509, 0.509]],
  [0.575, [0.504, 0.504, 0.504]],
  [0.577, [0.504, 0.504, 0.504]],
  [0.579, [0.5, 0.5, 0.5]],
  [0.581, [0.5, 0.5, 0.5]],
  [0.583, [0.496, 0.496, 0.496]],
  [0.585, [0.496, 0.496, 0.496]],
  [0.587, [0.491, 0.491, 0.491]],
  [0.589, [0.491, 0.491, 0.491]],
  [0.591, [0.487, 0.487, 0.487]],
  [0.593, [0.487, 0.487, 0.487]],
  [0.595, [0.483, 0.483, 0.483]],
  [0.597, [0.483, 0.483, 0.483]],
  [0.599, [0.478, 0.478, 0.478]],
  [0.601, [0.478, 0.478, 0.478]],
  [0.603, [0.474, 0.474, 0.474]],
  [0.605, [0.474, 0.474, 0.474]],
  [0.607, [0.47, 0.47, 0.47]],
  [0.609, [0.47, 0.47, 0.47]],
  [0.611, [0.466, 0.466, 0.466]],
  [0.613, [0.466, 0.466, 0.466]],
  [0.614, [0.461, 0.461, 0.461]],
  [0.616, [0.461, 0.461, 0.461]],
  [0.618, [0.457, 0.457, 0.457]],
  [0.62, [0.457, 0.457, 0.457]],
  [0.622, [0.453, 0.453, 0.453]],
  [0.624, [0.453, 0.453, 0.453]],
  [0.626, [0.448, 0.448, 0.448]],
  [0.628, [0.448, 0.448, 0.448]],
  [0.63, [0.444, 0.444, 0.444]],
  [0.632, [0.444, 0.444, 0.444]],
  [0.634, [0.44, 0.44, 0.44]],
  [0.636, [0.44, 0.44, 0.44]],
  [0.638, [0.436, 0.436, 0.436]],
  [0.64, [0.436, 0.436, 0.436]],
  [0.642, [0.432, 0.432, 0.432]],
  [0.644, [0.432, 0.432, 0.432]],
  [0.646, [0.428, 0.428, 0.428]],
  [0.648, [0.428, 0.428, 0.428]],
  [0.65, [0.424, 0.424, 0.424]],
  [0.652, [0.424, 0.424, 0.424]],
  [0.654, [0.42, 0.42, 0.42]],
  [0.656, [0.42, 0.42, 0.42]],
  [0.658, [0.416, 0.416, 0.416]],
  [0.659, [0.416, 0.416, 0.416]],
  [0.661, [0.412, 0.412, 0.412]],
  [0.663, [0.412, 0.412, 0.412]],
  [0.665, [0.408, 0.408, 0.408]],
  [0.667, [0.408, 0.408, 0.408]],
  [0.669, [0.404, 0.404, 0.404]],
  [0.671, [0.404, 0.404, 0.404]],
  [0.673, [0.4, 0.4, 0.4]],
  [0.675, [0.4, 0.4, 0.4]],
  [0.677, [0.396, 0.396, 0.396]],
  [0.679, [0.396, 0.396, 0.396]],
  [0.681, [0.392, 0.392, 0.392]],
  [0.683, [0.392, 0.392, 0.392]],
  [0.685, [0.388, 0.388, 0.388]],
  [0.687, [0.388, 0.388, 0.388]],
  [0.689, [0.383, 0.383, 0.383]],
  [0.691, [0.383, 0.383, 0.383]],
  [0.693, [0.379, 0.379, 0.379]],
  [0.695, [0.379, 0.379, 0.379]],
  [0.697, [0.375, 0.375, 0.375]],
  [0.699, [0.375, 0.375, 0.375]],
  [0.701, [0.371, 0.371, 0.371]],
  [0.703, [0.371, 0.371, 0.371]],
  [0.705, [0.367, 0.367, 0.367]],
  [0.706, [0.367, 0.367, 0.367]],
  [0.708, [0.363, 0.363, 0.363]],
  [0.71, [0.363, 0.363, 0.363]],
  [0.712, [0.359, 0.359, 0.359]],
  [0.714, [0.359, 0.359, 0.359]],
  [0.716, [0.355, 0.355, 0.355]],
  [0.718, [0.355, 0.355, 0.355]],
  [0.72, [0.351, 0.351, 0.351]],
  [0.722, [0.351, 0.351, 0.351]],
  [0.724, [0.347, 0.347, 0.347]],
  [0.726, [0.347, 0.347, 0.347]],
  [0.728, [0.343, 0.343, 0.343]],
  [0.73, [0.343, 0.343, 0.343]],
  [0.732, [0.339, 0.339, 0.339]],
  [0.734, [0.339, 0.339, 0.339]],
  [0.736, [0.335, 0.335, 0.335]],
  [0.738, [0.335, 0.335, 0.335]],
  [0.74, [0.331, 0.331, 0.331]],
  [0.742, [0.331, 0.331, 0.331]],
  [0.744, [0.327, 0.327, 0.327]],
  [0.746, [0.327, 0.327, 0.327]],
  [0.748, [0.323, 0.323, 0.323]],
  [0.75, [0.323, 0.323, 0.323]],
  [0.751, [0.317, 0.317, 0.317]],
  [0.753, [0.317, 0.317, 0.317]],
  [0.755, [0.312, 0.312, 0.312]],
  [0.757, [0.312, 0.312, 0.312]],
  [0.759, [0.306, 0.306, 0.306]],
  [0.761, [0.306, 0.306, 0.306]],
  [0.763, [0.301, 0.301, 0.301]],
  [0.765, [0.301, 0.301, 0.301]],
  [0.767, [0.295, 0.295, 0.295]],
  [0.769, [0.295, 0.295, 0.295]],
  [0.771, [0.29, 0.29, 0.29]],
  [0.773, [0.29, 0.29, 0.29]],
  [0.775, [0.284, 0.284, 0.284]],
  [0.777, [0.284, 0.284, 0.284]],
  [0.779, [0.279, 0.279, 0.279]],
  [0.781, [0.279, 0.279, 0.279]],
  [0.783, [0.273, 0.273, 0.273]],
  [0.785, [0.273, 0.273, 0.273]],
  [0.787, [0.268, 0.268, 0.268]],
  [0.789, [0.268, 0.268, 0.268]],
  [0.791, [0.262, 0.262, 0.262]],
  [0.793, [0.262, 0.262, 0.262]],
  [0.795, [0.257, 0.257, 0.257]],
  [0.796, [0.257, 0.257, 0.257]],
  [0.798, [0.251, 0.251, 0.251]],
  [0.8, [0.251, 0.251, 0.251]],
  [0.802, [0.245, 0.245, 0.245]],
  [0.804, [0.245, 0.245, 0.245]],
  [0.806, [0.24, 0.24, 0.24]],
  [0.808, [0.24, 0.24, 0.24]],
  [0.81, [0.234, 0.234, 0.234]],
  [0.812, [0.234, 0.234, 0.234]],
  [0.814, [0.229, 0.229, 0.229]],
  [0.816, [0.229, 0.229, 0.229]],
  [0.818, [0.223, 0.223, 0.223]],
  [0.82, [0.223, 0.223, 0.223]],
  [0.822, [0.218, 0.218, 0.218]],
  [0.824, [0.218, 0.218, 0.218]],
  [0.826, [0.212, 0.212, 0.212]],
  [0.828, [0.212, 0.212, 0.212]],
  [0.83, [0.207, 0.207, 0.207]],
  [0.832, [0.207, 0.207, 0.207]],
  [0.834, [0.201, 0.201, 0.201]],
  [0.836, [0.201, 0.201, 0.201]],
  [0.838, [0.196, 0.196, 0.196]],
  [0.84, [0.196, 0.196, 0.196]],
  [0.841, [0.19, 0.19, 0.19]],
  [0.843, [0.19, 0.19, 0.19]],
  [0.845, [0.185, 0.185, 0.185]],
  [0.847, [0.185, 0.185, 0.185]],
  [0.849, [0.179, 0.179, 0.179]],
  [0.851, [0.179, 0.179, 0.179]],
  [0.853, [0.173, 0.173, 0.173]],
  [0.855, [0.173, 0.173, 0.173]],
  [0.857, [0.168, 0.168, 0.168]],
  [0.859, [0.168, 0.168, 0.168]],
  [0.861, [0.162, 0.162, 0.162]],
  [0.863, [0.162, 0.162, 0.162]],
  [0.865, [0.157, 0.157, 0.157]],
  [0.867, [0.157, 0.157, 0.157]],
  [0.869, [0.151, 0.151, 0.151]],
  [0.871, [0.151, 0.151, 0.151]],
  [0.873, [0.146, 0.146, 0.146]],
  [0.875, [0.146, 0.146, 0.146]],
  [0.877, [0.141, 0.141, 0.141]],
  [0.879, [0.141, 0.141, 0.141]],
  [0.881, [0.137, 0.137, 0.137]],
  [0.883, [0.137, 0.137, 0.137]],
  [0.885, [0.132, 0.132, 0.132]],
  [0.886, [0.132, 0.132, 0.132]],
  [0.888, [0.127, 0.127, 0.127]],
  [0.89, [0.127, 0.127, 0.127]],
  [0.892, [0.123, 0.123, 0.123]],
  [0.894, [0.123, 0.123, 0.123]],
  [0.896, [0.118, 0.118, 0.118]],
  [0.898, [0.118, 0.118, 0.118]],
  [0.9, [0.114, 0.114, 0.114]],
  [0.902, [0.114, 0.114, 0.114]],
  [0.904, [0.109, 0.109, 0.109]],
  [0.906, [0.109, 0.109, 0.109]],
  [0.908, [0.105, 0.105, 0.105]],
  [0.91, [0.105, 0.105, 0.105]],
  [0.912, [0.1, 0.1, 0.1]],
  [0.914, [0.1, 0.1, 0.1]],
  [0.916, [0.096, 0.096, 0.096]],
  [0.918, [0.096, 0.096, 0.096]],
  [0.92, [0.091, 0.091, 0.091]],
  [0.922, [0.091, 0.091, 0.091]],
  [0.924, [0.086, 0.086, 0.086]],
  [0.926, [0.086, 0.086, 0.086]],
  [0.928, [0.082, 0.082, 0.082]],
  [0.93, [0.082, 0.082, 0.082]],
  [0.932, [0.077, 0.077, 0.077]],
  [0.933, [0.077, 0.077, 0.077]],
  [0.935, [0.073, 0.073, 0.073]],
  [0.937, [0.073, 0.073, 0.073]],
  [0.939, [0.068, 0.068, 0.068]],
  [0.941, [0.068, 0.068, 0.068]],
  [0.943, [0.064, 0.064, 0.064]],
  [0.945, [0.064, 0.064, 0.064]],
  [0.947, [0.059, 0.059, 0.059]],
  [0.949, [0.059, 0.059, 0.059]],
  [0.951, [0.055, 0.055, 0.055]],
  [0.953, [0.055, 0.055, 0.055]],
  [0.955, [0.05, 0.05, 0.05]],
  [0.957, [0.05, 0.05, 0.05]],
  [0.959, [0.046, 0.046, 0.046]],
  [0.961, [0.046, 0.046, 0.046]],
  [0.963, [0.041, 0.041, 0.041]],
  [0.965, [0.041, 0.041, 0.041]],
  [0.967, [0.036, 0.036, 0.036]],
  [0.969, [0.036, 0.036, 0.036]],
  [0.971, [0.032, 0.032, 0.032]],
  [0.973, [0.032, 0.032, 0.032]],
  [0.975, [0.027, 0.027, 0.027]],
  [0.977, [0.027, 0.027, 0.027]],
  [0.978, [0.023, 0.023, 0.023]],
  [0.98, [0.023, 0.023, 0.023]],
  [0.982, [0.018, 0.018, 0.018]],
  [0.984, [0.018, 0.018, 0.018]],
  [0.986, [0.014, 0.014, 0.014]],
  [0.988, [0.014, 0.014, 0.014]],
  [0.99, [9e-3, 9e-3, 9e-3]],
  [0.992, [9e-3, 9e-3, 9e-3]],
  [0.994, [5e-3, 5e-3, 5e-3]],
  [0.996, [5e-3, 5e-3, 5e-3]],
  [0.998, [0, 0, 0]],
  [1, [0, 0, 0]]
], hp = [
  [0, [1, 0.969, 0.925]],
  [2e-3, [1, 0.969, 0.925]],
  [4e-3, [1, 0.967, 0.921]],
  [6e-3, [1, 0.967, 0.921]],
  [8e-3, [1, 0.965, 0.917]],
  [0.01, [1, 0.965, 0.917]],
  [0.012, [1, 0.963, 0.912]],
  [0.014, [1, 0.963, 0.912]],
  [0.016, [1, 0.961, 0.908]],
  [0.018, [1, 0.961, 0.908]],
  [0.02, [0.999, 0.959, 0.903]],
  [0.022, [0.999, 0.959, 0.903]],
  [0.023, [0.999, 0.958, 0.899]],
  [0.025, [0.999, 0.958, 0.899]],
  [0.027, [0.999, 0.956, 0.894]],
  [0.029, [0.999, 0.956, 0.894]],
  [0.031, [0.999, 0.954, 0.89]],
  [0.033, [0.999, 0.954, 0.89]],
  [0.035, [0.999, 0.952, 0.886]],
  [0.037, [0.999, 0.952, 0.886]],
  [0.039, [0.999, 0.95, 0.881]],
  [0.041, [0.999, 0.95, 0.881]],
  [0.043, [0.999, 0.948, 0.877]],
  [0.045, [0.999, 0.948, 0.877]],
  [0.047, [0.999, 0.946, 0.872]],
  [0.049, [0.999, 0.946, 0.872]],
  [0.051, [0.998, 0.945, 0.868]],
  [0.053, [0.998, 0.945, 0.868]],
  [0.055, [0.998, 0.943, 0.863]],
  [0.057, [0.998, 0.943, 0.863]],
  [0.059, [0.998, 0.941, 0.859]],
  [0.061, [0.998, 0.941, 0.859]],
  [0.063, [0.998, 0.939, 0.855]],
  [0.065, [0.998, 0.939, 0.855]],
  [0.067, [0.998, 0.937, 0.85]],
  [0.068, [0.998, 0.937, 0.85]],
  [0.07, [0.998, 0.935, 0.846]],
  [0.072, [0.998, 0.935, 0.846]],
  [0.074, [0.998, 0.934, 0.841]],
  [0.076, [0.998, 0.934, 0.841]],
  [0.078, [0.998, 0.932, 0.837]],
  [0.08, [0.998, 0.932, 0.837]],
  [0.082, [0.997, 0.93, 0.832]],
  [0.084, [0.997, 0.93, 0.832]],
  [0.086, [0.997, 0.928, 0.828]],
  [0.088, [0.997, 0.928, 0.828]],
  [0.09, [0.997, 0.926, 0.824]],
  [0.092, [0.997, 0.926, 0.824]],
  [0.094, [0.997, 0.924, 0.819]],
  [0.096, [0.997, 0.924, 0.819]],
  [0.098, [0.997, 0.922, 0.815]],
  [0.1, [0.997, 0.922, 0.815]],
  [0.102, [0.997, 0.921, 0.81]],
  [0.104, [0.997, 0.921, 0.81]],
  [0.106, [0.997, 0.919, 0.806]],
  [0.108, [0.997, 0.919, 0.806]],
  [0.11, [0.997, 0.917, 0.801]],
  [0.112, [0.997, 0.917, 0.801]],
  [0.114, [0.996, 0.915, 0.797]],
  [0.115, [0.996, 0.915, 0.797]],
  [0.117, [0.996, 0.913, 0.793]],
  [0.119, [0.996, 0.913, 0.793]],
  [0.121, [0.996, 0.911, 0.788]],
  [0.123, [0.996, 0.911, 0.788]],
  [0.125, [0.996, 0.909, 0.784]],
  [0.127, [0.996, 0.909, 0.784]],
  [0.129, [0.996, 0.907, 0.779]],
  [0.131, [0.996, 0.907, 0.779]],
  [0.133, [0.996, 0.905, 0.773]],
  [0.135, [0.996, 0.905, 0.773]],
  [0.137, [0.996, 0.902, 0.768]],
  [0.139, [0.996, 0.902, 0.768]],
  [0.141, [0.996, 0.9, 0.763]],
  [0.143, [0.996, 0.9, 0.763]],
  [0.145, [0.995, 0.897, 0.758]],
  [0.147, [0.995, 0.897, 0.758]],
  [0.149, [0.995, 0.895, 0.753]],
  [0.151, [0.995, 0.895, 0.753]],
  [0.153, [0.995, 0.892, 0.747]],
  [0.155, [0.995, 0.892, 0.747]],
  [0.157, [0.995, 0.89, 0.742]],
  [0.159, [0.995, 0.89, 0.742]],
  [0.16, [0.995, 0.887, 0.737]],
  [0.162, [0.995, 0.887, 0.737]],
  [0.164, [0.995, 0.885, 0.732]],
  [0.166, [0.995, 0.885, 0.732]],
  [0.168, [0.995, 0.882, 0.727]],
  [0.17, [0.995, 0.882, 0.727]],
  [0.172, [0.995, 0.88, 0.722]],
  [0.174, [0.995, 0.88, 0.722]],
  [0.176, [0.994, 0.878, 0.716]],
  [0.178, [0.994, 0.878, 0.716]],
  [0.18, [0.994, 0.875, 0.711]],
  [0.182, [0.994, 0.875, 0.711]],
  [0.184, [0.994, 0.873, 0.706]],
  [0.186, [0.994, 0.873, 0.706]],
  [0.188, [0.994, 0.87, 0.701]],
  [0.19, [0.994, 0.87, 0.701]],
  [0.192, [0.994, 0.868, 0.696]],
  [0.194, [0.994, 0.868, 0.696]],
  [0.196, [0.994, 0.865, 0.691]],
  [0.198, [0.994, 0.865, 0.691]],
  [0.2, [0.994, 0.863, 0.685]],
  [0.202, [0.994, 0.863, 0.685]],
  [0.204, [0.994, 0.86, 0.68]],
  [0.205, [0.994, 0.86, 0.68]],
  [0.207, [0.993, 0.858, 0.675]],
  [0.209, [0.993, 0.858, 0.675]],
  [0.211, [0.993, 0.855, 0.67]],
  [0.213, [0.993, 0.855, 0.67]],
  [0.215, [0.993, 0.853, 0.665]],
  [0.217, [0.993, 0.853, 0.665]],
  [0.219, [0.993, 0.85, 0.66]],
  [0.221, [0.993, 0.85, 0.66]],
  [0.223, [0.993, 0.848, 0.654]],
  [0.225, [0.993, 0.848, 0.654]],
  [0.227, [0.993, 0.846, 0.649]],
  [0.229, [0.993, 0.846, 0.649]],
  [0.231, [0.993, 0.843, 0.644]],
  [0.233, [0.993, 0.843, 0.644]],
  [0.235, [0.993, 0.841, 0.639]],
  [0.237, [0.993, 0.841, 0.639]],
  [0.239, [0.992, 0.838, 0.634]],
  [0.241, [0.992, 0.838, 0.634]],
  [0.243, [0.992, 0.836, 0.629]],
  [0.245, [0.992, 0.836, 0.629]],
  [0.247, [0.992, 0.833, 0.623]],
  [0.249, [0.992, 0.833, 0.623]],
  [0.25, [0.992, 0.831, 0.619]],
  [0.252, [0.992, 0.831, 0.619]],
  [0.254, [0.992, 0.828, 0.616]],
  [0.256, [0.992, 0.828, 0.616]],
  [0.258, [0.992, 0.824, 0.612]],
  [0.26, [0.992, 0.824, 0.612]],
  [0.262, [0.992, 0.821, 0.609]],
  [0.264, [0.992, 0.821, 0.609]],
  [0.266, [0.992, 0.818, 0.606]],
  [0.268, [0.992, 0.818, 0.606]],
  [0.27, [0.992, 0.815, 0.603]],
  [0.272, [0.992, 0.815, 0.603]],
  [0.274, [0.992, 0.812, 0.6]],
  [0.276, [0.992, 0.812, 0.6]],
  [0.278, [0.992, 0.809, 0.596]],
  [0.28, [0.992, 0.809, 0.596]],
  [0.282, [0.992, 0.806, 0.593]],
  [0.284, [0.992, 0.806, 0.593]],
  [0.286, [0.992, 0.803, 0.59]],
  [0.288, [0.992, 0.803, 0.59]],
  [0.29, [0.992, 0.8, 0.587]],
  [0.292, [0.992, 0.8, 0.587]],
  [0.294, [0.992, 0.797, 0.584]],
  [0.295, [0.992, 0.797, 0.584]],
  [0.297, [0.992, 0.794, 0.58]],
  [0.299, [0.992, 0.794, 0.58]],
  [0.301, [0.992, 0.791, 0.577]],
  [0.303, [0.992, 0.791, 0.577]],
  [0.305, [0.992, 0.788, 0.574]],
  [0.307, [0.992, 0.788, 0.574]],
  [0.309, [0.992, 0.784, 0.571]],
  [0.311, [0.992, 0.784, 0.571]],
  [0.313, [0.992, 0.781, 0.568]],
  [0.315, [0.992, 0.781, 0.568]],
  [0.317, [0.992, 0.778, 0.564]],
  [0.319, [0.992, 0.778, 0.564]],
  [0.321, [0.992, 0.775, 0.561]],
  [0.323, [0.992, 0.775, 0.561]],
  [0.325, [0.992, 0.772, 0.558]],
  [0.327, [0.992, 0.772, 0.558]],
  [0.329, [0.992, 0.769, 0.555]],
  [0.331, [0.992, 0.769, 0.555]],
  [0.333, [0.992, 0.766, 0.552]],
  [0.335, [0.992, 0.766, 0.552]],
  [0.337, [0.992, 0.763, 0.548]],
  [0.339, [0.992, 0.763, 0.548]],
  [0.341, [0.992, 0.76, 0.545]],
  [0.342, [0.992, 0.76, 0.545]],
  [0.344, [0.992, 0.757, 0.542]],
  [0.346, [0.992, 0.757, 0.542]],
  [0.348, [0.992, 0.754, 0.539]],
  [0.35, [0.992, 0.754, 0.539]],
  [0.352, [0.992, 0.751, 0.536]],
  [0.354, [0.992, 0.751, 0.536]],
  [0.356, [0.992, 0.748, 0.532]],
  [0.358, [0.992, 0.748, 0.532]],
  [0.36, [0.992, 0.744, 0.529]],
  [0.362, [0.992, 0.744, 0.529]],
  [0.364, [0.992, 0.741, 0.526]],
  [0.366, [0.992, 0.741, 0.526]],
  [0.368, [0.992, 0.738, 0.523]],
  [0.37, [0.992, 0.738, 0.523]],
  [0.372, [0.992, 0.735, 0.52]],
  [0.374, [0.992, 0.735, 0.52]],
  [0.376, [0.992, 0.731, 0.516]],
  [0.378, [0.992, 0.731, 0.516]],
  [0.38, [0.992, 0.726, 0.51]],
  [0.382, [0.992, 0.726, 0.51]],
  [0.384, [0.992, 0.72, 0.505]],
  [0.386, [0.992, 0.72, 0.505]],
  [0.387, [0.992, 0.714, 0.5]],
  [0.389, [0.992, 0.714, 0.5]],
  [0.391, [0.992, 0.709, 0.495]],
  [0.393, [0.992, 0.709, 0.495]],
  [0.395, [0.991, 0.703, 0.489]],
  [0.397, [0.991, 0.703, 0.489]],
  [0.399, [0.991, 0.697, 0.484]],
  [0.401, [0.991, 0.697, 0.484]],
  [0.403, [0.991, 0.692, 0.479]],
  [0.405, [0.991, 0.692, 0.479]],
  [0.407, [0.991, 0.686, 0.473]],
  [0.409, [0.991, 0.686, 0.473]],
  [0.411, [0.991, 0.68, 0.468]],
  [0.413, [0.991, 0.68, 0.468]],
  [0.415, [0.991, 0.675, 0.463]],
  [0.417, [0.991, 0.675, 0.463]],
  [0.419, [0.991, 0.669, 0.457]],
  [0.421, [0.991, 0.669, 0.457]],
  [0.423, [0.991, 0.663, 0.452]],
  [0.425, [0.991, 0.663, 0.452]],
  [0.427, [0.991, 0.658, 0.447]],
  [0.429, [0.991, 0.658, 0.447]],
  [0.431, [0.99, 0.652, 0.442]],
  [0.432, [0.99, 0.652, 0.442]],
  [0.434, [0.99, 0.646, 0.436]],
  [0.436, [0.99, 0.646, 0.436]],
  [0.438, [0.99, 0.641, 0.431]],
  [0.44, [0.99, 0.641, 0.431]],
  [0.442, [0.99, 0.635, 0.426]],
  [0.444, [0.99, 0.635, 0.426]],
  [0.446, [0.99, 0.629, 0.42]],
  [0.448, [0.99, 0.629, 0.42]],
  [0.45, [0.99, 0.624, 0.415]],
  [0.452, [0.99, 0.624, 0.415]],
  [0.454, [0.99, 0.618, 0.41]],
  [0.456, [0.99, 0.618, 0.41]],
  [0.458, [0.99, 0.612, 0.405]],
  [0.46, [0.99, 0.612, 0.405]],
  [0.462, [0.989, 0.607, 0.399]],
  [0.464, [0.989, 0.607, 0.399]],
  [0.466, [0.989, 0.601, 0.394]],
  [0.468, [0.989, 0.601, 0.394]],
  [0.47, [0.989, 0.595, 0.389]],
  [0.472, [0.989, 0.595, 0.389]],
  [0.474, [0.989, 0.59, 0.383]],
  [0.476, [0.989, 0.59, 0.383]],
  [0.477, [0.989, 0.584, 0.378]],
  [0.479, [0.989, 0.584, 0.378]],
  [0.481, [0.989, 0.578, 0.373]],
  [0.483, [0.989, 0.578, 0.373]],
  [0.485, [0.989, 0.573, 0.368]],
  [0.487, [0.989, 0.573, 0.368]],
  [0.489, [0.989, 0.567, 0.362]],
  [0.491, [0.989, 0.567, 0.362]],
  [0.493, [0.988, 0.561, 0.357]],
  [0.495, [0.988, 0.561, 0.357]],
  [0.497, [0.988, 0.556, 0.352]],
  [0.499, [0.988, 0.556, 0.352]],
  [0.501, [0.987, 0.55, 0.348]],
  [0.503, [0.987, 0.55, 0.348]],
  [0.505, [0.986, 0.546, 0.346]],
  [0.507, [0.986, 0.546, 0.346]],
  [0.509, [0.984, 0.541, 0.344]],
  [0.511, [0.984, 0.541, 0.344]],
  [0.513, [0.983, 0.536, 0.342]],
  [0.515, [0.983, 0.536, 0.342]],
  [0.517, [0.981, 0.531, 0.34]],
  [0.519, [0.981, 0.531, 0.34]],
  [0.521, [0.979, 0.526, 0.338]],
  [0.523, [0.979, 0.526, 0.338]],
  [0.524, [0.978, 0.521, 0.335]],
  [0.526, [0.978, 0.521, 0.335]],
  [0.528, [0.976, 0.516, 0.333]],
  [0.53, [0.976, 0.516, 0.333]],
  [0.532, [0.975, 0.511, 0.331]],
  [0.534, [0.975, 0.511, 0.331]],
  [0.536, [0.973, 0.506, 0.329]],
  [0.538, [0.973, 0.506, 0.329]],
  [0.54, [0.971, 0.501, 0.327]],
  [0.542, [0.971, 0.501, 0.327]],
  [0.544, [0.97, 0.496, 0.325]],
  [0.546, [0.97, 0.496, 0.325]],
  [0.548, [0.968, 0.491, 0.323]],
  [0.55, [0.968, 0.491, 0.323]],
  [0.552, [0.967, 0.487, 0.321]],
  [0.554, [0.967, 0.487, 0.321]],
  [0.556, [0.965, 0.482, 0.319]],
  [0.558, [0.965, 0.482, 0.319]],
  [0.56, [0.963, 0.477, 0.317]],
  [0.562, [0.963, 0.477, 0.317]],
  [0.564, [0.962, 0.472, 0.315]],
  [0.566, [0.962, 0.472, 0.315]],
  [0.568, [0.96, 0.467, 0.312]],
  [0.569, [0.96, 0.467, 0.312]],
  [0.571, [0.959, 0.462, 0.31]],
  [0.573, [0.959, 0.462, 0.31]],
  [0.575, [0.957, 0.457, 0.308]],
  [0.577, [0.957, 0.457, 0.308]],
  [0.579, [0.955, 0.452, 0.306]],
  [0.581, [0.955, 0.452, 0.306]],
  [0.583, [0.954, 0.447, 0.304]],
  [0.585, [0.954, 0.447, 0.304]],
  [0.587, [0.952, 0.442, 0.302]],
  [0.589, [0.952, 0.442, 0.302]],
  [0.591, [0.951, 0.437, 0.3]],
  [0.593, [0.951, 0.437, 0.3]],
  [0.595, [0.949, 0.432, 0.298]],
  [0.597, [0.949, 0.432, 0.298]],
  [0.599, [0.947, 0.427, 0.296]],
  [0.601, [0.947, 0.427, 0.296]],
  [0.603, [0.946, 0.423, 0.294]],
  [0.605, [0.946, 0.423, 0.294]],
  [0.607, [0.944, 0.418, 0.292]],
  [0.609, [0.944, 0.418, 0.292]],
  [0.611, [0.943, 0.413, 0.289]],
  [0.613, [0.943, 0.413, 0.289]],
  [0.614, [0.941, 0.408, 0.287]],
  [0.616, [0.941, 0.408, 0.287]],
  [0.618, [0.939, 0.403, 0.285]],
  [0.62, [0.939, 0.403, 0.285]],
  [0.622, [0.938, 0.398, 0.283]],
  [0.624, [0.938, 0.398, 0.283]],
  [0.626, [0.935, 0.392, 0.279]],
  [0.628, [0.935, 0.392, 0.279]],
  [0.63, [0.932, 0.385, 0.274]],
  [0.632, [0.932, 0.385, 0.274]],
  [0.634, [0.93, 0.379, 0.269]],
  [0.636, [0.93, 0.379, 0.269]],
  [0.638, [0.927, 0.372, 0.264]],
  [0.64, [0.927, 0.372, 0.264]],
  [0.642, [0.924, 0.366, 0.259]],
  [0.644, [0.924, 0.366, 0.259]],
  [0.646, [0.921, 0.359, 0.254]],
  [0.648, [0.921, 0.359, 0.254]],
  [0.65, [0.918, 0.353, 0.249]],
  [0.652, [0.918, 0.353, 0.249]],
  [0.654, [0.915, 0.346, 0.244]],
  [0.656, [0.915, 0.346, 0.244]],
  [0.658, [0.912, 0.34, 0.239]],
  [0.659, [0.912, 0.34, 0.239]],
  [0.661, [0.909, 0.333, 0.234]],
  [0.663, [0.909, 0.333, 0.234]],
  [0.665, [0.906, 0.327, 0.229]],
  [0.667, [0.906, 0.327, 0.229]],
  [0.669, [0.903, 0.32, 0.224]],
  [0.671, [0.903, 0.32, 0.224]],
  [0.673, [0.9, 0.314, 0.219]],
  [0.675, [0.9, 0.314, 0.219]],
  [0.677, [0.897, 0.307, 0.214]],
  [0.679, [0.897, 0.307, 0.214]],
  [0.681, [0.894, 0.301, 0.209]],
  [0.683, [0.894, 0.301, 0.209]],
  [0.685, [0.891, 0.294, 0.204]],
  [0.687, [0.891, 0.294, 0.204]],
  [0.689, [0.888, 0.288, 0.198]],
  [0.691, [0.888, 0.288, 0.198]],
  [0.693, [0.885, 0.281, 0.193]],
  [0.695, [0.885, 0.281, 0.193]],
  [0.697, [0.882, 0.275, 0.188]],
  [0.699, [0.882, 0.275, 0.188]],
  [0.701, [0.879, 0.268, 0.183]],
  [0.703, [0.879, 0.268, 0.183]],
  [0.705, [0.876, 0.262, 0.178]],
  [0.706, [0.876, 0.262, 0.178]],
  [0.708, [0.873, 0.255, 0.173]],
  [0.71, [0.873, 0.255, 0.173]],
  [0.712, [0.87, 0.249, 0.168]],
  [0.714, [0.87, 0.249, 0.168]],
  [0.716, [0.867, 0.242, 0.163]],
  [0.718, [0.867, 0.242, 0.163]],
  [0.72, [0.865, 0.236, 0.158]],
  [0.722, [0.865, 0.236, 0.158]],
  [0.724, [0.862, 0.229, 0.153]],
  [0.726, [0.862, 0.229, 0.153]],
  [0.728, [0.859, 0.222, 0.148]],
  [0.73, [0.859, 0.222, 0.148]],
  [0.732, [0.856, 0.216, 0.143]],
  [0.734, [0.856, 0.216, 0.143]],
  [0.736, [0.853, 0.209, 0.138]],
  [0.738, [0.853, 0.209, 0.138]],
  [0.74, [0.85, 0.203, 0.133]],
  [0.742, [0.85, 0.203, 0.133]],
  [0.744, [0.847, 0.196, 0.128]],
  [0.746, [0.847, 0.196, 0.128]],
  [0.748, [0.844, 0.19, 0.123]],
  [0.75, [0.844, 0.19, 0.123]],
  [0.751, [0.84, 0.184, 0.119]],
  [0.753, [0.84, 0.184, 0.119]],
  [0.755, [0.835, 0.178, 0.115]],
  [0.757, [0.835, 0.178, 0.115]],
  [0.759, [0.831, 0.172, 0.111]],
  [0.761, [0.831, 0.172, 0.111]],
  [0.763, [0.827, 0.166, 0.107]],
  [0.765, [0.827, 0.166, 0.107]],
  [0.767, [0.822, 0.16, 0.103]],
  [0.769, [0.822, 0.16, 0.103]],
  [0.771, [0.818, 0.154, 0.1]],
  [0.773, [0.818, 0.154, 0.1]],
  [0.775, [0.813, 0.148, 0.096]],
  [0.777, [0.813, 0.148, 0.096]],
  [0.779, [0.809, 0.142, 0.092]],
  [0.781, [0.809, 0.142, 0.092]],
  [0.783, [0.804, 0.137, 0.088]],
  [0.785, [0.804, 0.137, 0.088]],
  [0.787, [0.8, 0.131, 0.084]],
  [0.789, [0.8, 0.131, 0.084]],
  [0.791, [0.796, 0.125, 0.081]],
  [0.793, [0.796, 0.125, 0.081]],
  [0.795, [0.791, 0.119, 0.077]],
  [0.796, [0.791, 0.119, 0.077]],
  [0.798, [0.787, 0.113, 0.073]],
  [0.8, [0.787, 0.113, 0.073]],
  [0.802, [0.782, 0.107, 0.069]],
  [0.804, [0.782, 0.107, 0.069]],
  [0.806, [0.778, 0.101, 0.065]],
  [0.808, [0.778, 0.101, 0.065]],
  [0.81, [0.773, 0.095, 0.061]],
  [0.812, [0.773, 0.095, 0.061]],
  [0.814, [0.769, 0.089, 0.058]],
  [0.816, [0.769, 0.089, 0.058]],
  [0.818, [0.765, 0.083, 0.054]],
  [0.82, [0.765, 0.083, 0.054]],
  [0.822, [0.76, 0.078, 0.05]],
  [0.824, [0.76, 0.078, 0.05]],
  [0.826, [0.756, 0.072, 0.046]],
  [0.828, [0.756, 0.072, 0.046]],
  [0.83, [0.751, 0.066, 0.042]],
  [0.832, [0.751, 0.066, 0.042]],
  [0.834, [0.747, 0.06, 0.039]],
  [0.836, [0.747, 0.06, 0.039]],
  [0.838, [0.742, 0.054, 0.035]],
  [0.84, [0.742, 0.054, 0.035]],
  [0.841, [0.738, 0.048, 0.031]],
  [0.843, [0.738, 0.048, 0.031]],
  [0.845, [0.734, 0.042, 0.027]],
  [0.847, [0.734, 0.042, 0.027]],
  [0.849, [0.729, 0.036, 0.023]],
  [0.851, [0.729, 0.036, 0.023]],
  [0.853, [0.725, 0.03, 0.02]],
  [0.855, [0.725, 0.03, 0.02]],
  [0.857, [0.72, 0.024, 0.016]],
  [0.859, [0.72, 0.024, 0.016]],
  [0.861, [0.716, 0.018, 0.012]],
  [0.863, [0.716, 0.018, 0.012]],
  [0.865, [0.711, 0.013, 8e-3]],
  [0.867, [0.711, 0.013, 8e-3]],
  [0.869, [0.707, 7e-3, 4e-3]],
  [0.871, [0.707, 7e-3, 4e-3]],
  [0.873, [0.703, 1e-3, 0]],
  [0.875, [0.703, 1e-3, 0]],
  [0.877, [0.696, 0, 0]],
  [0.879, [0.696, 0, 0]],
  [0.881, [0.69, 0, 0]],
  [0.883, [0.69, 0, 0]],
  [0.885, [0.684, 0, 0]],
  [0.886, [0.684, 0, 0]],
  [0.888, [0.677, 0, 0]],
  [0.89, [0.677, 0, 0]],
  [0.892, [0.671, 0, 0]],
  [0.894, [0.671, 0, 0]],
  [0.896, [0.664, 0, 0]],
  [0.898, [0.664, 0, 0]],
  [0.9, [0.658, 0, 0]],
  [0.902, [0.658, 0, 0]],
  [0.904, [0.652, 0, 0]],
  [0.906, [0.652, 0, 0]],
  [0.908, [0.645, 0, 0]],
  [0.91, [0.645, 0, 0]],
  [0.912, [0.639, 0, 0]],
  [0.914, [0.639, 0, 0]],
  [0.916, [0.632, 0, 0]],
  [0.918, [0.632, 0, 0]],
  [0.92, [0.626, 0, 0]],
  [0.922, [0.626, 0, 0]],
  [0.924, [0.62, 0, 0]],
  [0.926, [0.62, 0, 0]],
  [0.928, [0.613, 0, 0]],
  [0.93, [0.613, 0, 0]],
  [0.932, [0.607, 0, 0]],
  [0.933, [0.607, 0, 0]],
  [0.935, [0.6, 0, 0]],
  [0.937, [0.6, 0, 0]],
  [0.939, [0.594, 0, 0]],
  [0.941, [0.594, 0, 0]],
  [0.943, [0.588, 0, 0]],
  [0.945, [0.588, 0, 0]],
  [0.947, [0.581, 0, 0]],
  [0.949, [0.581, 0, 0]],
  [0.951, [0.575, 0, 0]],
  [0.953, [0.575, 0, 0]],
  [0.955, [0.568, 0, 0]],
  [0.957, [0.568, 0, 0]],
  [0.959, [0.562, 0, 0]],
  [0.961, [0.562, 0, 0]],
  [0.963, [0.556, 0, 0]],
  [0.965, [0.556, 0, 0]],
  [0.967, [0.549, 0, 0]],
  [0.969, [0.549, 0, 0]],
  [0.971, [0.543, 0, 0]],
  [0.973, [0.543, 0, 0]],
  [0.975, [0.536, 0, 0]],
  [0.977, [0.536, 0, 0]],
  [0.978, [0.53, 0, 0]],
  [0.98, [0.53, 0, 0]],
  [0.982, [0.524, 0, 0]],
  [0.984, [0.524, 0, 0]],
  [0.986, [0.517, 0, 0]],
  [0.988, [0.517, 0, 0]],
  [0.99, [0.511, 0, 0]],
  [0.992, [0.511, 0, 0]],
  [0.994, [0.504, 0, 0]],
  [0.996, [0.504, 0, 0]],
  [0.998, [0.498, 0, 0]],
  [1, [0.498, 0, 0]]
], up = [
  [0, [1, 0.961, 0.922]],
  [2e-3, [1, 0.961, 0.922]],
  [4e-3, [1, 0.959, 0.918]],
  [6e-3, [1, 0.959, 0.918]],
  [8e-3, [1, 0.957, 0.914]],
  [0.01, [1, 0.957, 0.914]],
  [0.012, [1, 0.955, 0.911]],
  [0.014, [1, 0.955, 0.911]],
  [0.016, [1, 0.953, 0.907]],
  [0.018, [1, 0.953, 0.907]],
  [0.02, [0.999, 0.952, 0.904]],
  [0.022, [0.999, 0.952, 0.904]],
  [0.023, [0.999, 0.95, 0.9]],
  [0.025, [0.999, 0.95, 0.9]],
  [0.027, [0.999, 0.948, 0.897]],
  [0.029, [0.999, 0.948, 0.897]],
  [0.031, [0.999, 0.946, 0.893]],
  [0.033, [0.999, 0.946, 0.893]],
  [0.035, [0.999, 0.944, 0.889]],
  [0.037, [0.999, 0.944, 0.889]],
  [0.039, [0.999, 0.942, 0.886]],
  [0.041, [0.999, 0.942, 0.886]],
  [0.043, [0.999, 0.94, 0.882]],
  [0.045, [0.999, 0.94, 0.882]],
  [0.047, [0.999, 0.939, 0.879]],
  [0.049, [0.999, 0.939, 0.879]],
  [0.051, [0.998, 0.937, 0.875]],
  [0.053, [0.998, 0.937, 0.875]],
  [0.055, [0.998, 0.935, 0.872]],
  [0.057, [0.998, 0.935, 0.872]],
  [0.059, [0.998, 0.933, 0.868]],
  [0.061, [0.998, 0.933, 0.868]],
  [0.063, [0.998, 0.931, 0.864]],
  [0.065, [0.998, 0.931, 0.864]],
  [0.067, [0.998, 0.929, 0.861]],
  [0.068, [0.998, 0.929, 0.861]],
  [0.07, [0.998, 0.928, 0.857]],
  [0.072, [0.998, 0.928, 0.857]],
  [0.074, [0.998, 0.926, 0.854]],
  [0.076, [0.998, 0.926, 0.854]],
  [0.078, [0.998, 0.924, 0.85]],
  [0.08, [0.998, 0.924, 0.85]],
  [0.082, [0.997, 0.922, 0.847]],
  [0.084, [0.997, 0.922, 0.847]],
  [0.086, [0.997, 0.92, 0.843]],
  [0.088, [0.997, 0.92, 0.843]],
  [0.09, [0.997, 0.918, 0.84]],
  [0.092, [0.997, 0.918, 0.84]],
  [0.094, [0.997, 0.916, 0.836]],
  [0.096, [0.997, 0.916, 0.836]],
  [0.098, [0.997, 0.915, 0.832]],
  [0.1, [0.997, 0.915, 0.832]],
  [0.102, [0.997, 0.913, 0.829]],
  [0.104, [0.997, 0.913, 0.829]],
  [0.106, [0.997, 0.911, 0.825]],
  [0.108, [0.997, 0.911, 0.825]],
  [0.11, [0.997, 0.909, 0.822]],
  [0.112, [0.997, 0.909, 0.822]],
  [0.114, [0.996, 0.907, 0.818]],
  [0.115, [0.996, 0.907, 0.818]],
  [0.117, [0.996, 0.905, 0.815]],
  [0.119, [0.996, 0.905, 0.815]],
  [0.121, [0.996, 0.904, 0.811]],
  [0.123, [0.996, 0.904, 0.811]],
  [0.125, [0.996, 0.902, 0.807]],
  [0.127, [0.996, 0.902, 0.807]],
  [0.129, [0.996, 0.899, 0.802]],
  [0.131, [0.996, 0.899, 0.802]],
  [0.133, [0.996, 0.896, 0.796]],
  [0.135, [0.996, 0.896, 0.796]],
  [0.137, [0.996, 0.894, 0.791]],
  [0.139, [0.996, 0.894, 0.791]],
  [0.141, [0.996, 0.891, 0.786]],
  [0.143, [0.996, 0.891, 0.786]],
  [0.145, [0.995, 0.888, 0.78]],
  [0.147, [0.995, 0.888, 0.78]],
  [0.149, [0.995, 0.885, 0.775]],
  [0.151, [0.995, 0.885, 0.775]],
  [0.153, [0.995, 0.883, 0.769]],
  [0.155, [0.995, 0.883, 0.769]],
  [0.157, [0.995, 0.88, 0.764]],
  [0.159, [0.995, 0.88, 0.764]],
  [0.16, [0.995, 0.877, 0.758]],
  [0.162, [0.995, 0.877, 0.758]],
  [0.164, [0.995, 0.875, 0.753]],
  [0.166, [0.995, 0.875, 0.753]],
  [0.168, [0.995, 0.872, 0.748]],
  [0.17, [0.995, 0.872, 0.748]],
  [0.172, [0.995, 0.869, 0.742]],
  [0.174, [0.995, 0.869, 0.742]],
  [0.176, [0.994, 0.866, 0.737]],
  [0.178, [0.994, 0.866, 0.737]],
  [0.18, [0.994, 0.864, 0.731]],
  [0.182, [0.994, 0.864, 0.731]],
  [0.184, [0.994, 0.861, 0.726]],
  [0.186, [0.994, 0.861, 0.726]],
  [0.188, [0.994, 0.858, 0.721]],
  [0.19, [0.994, 0.858, 0.721]],
  [0.192, [0.994, 0.856, 0.715]],
  [0.194, [0.994, 0.856, 0.715]],
  [0.196, [0.994, 0.853, 0.71]],
  [0.198, [0.994, 0.853, 0.71]],
  [0.2, [0.994, 0.85, 0.704]],
  [0.202, [0.994, 0.85, 0.704]],
  [0.204, [0.994, 0.847, 0.699]],
  [0.205, [0.994, 0.847, 0.699]],
  [0.207, [0.993, 0.845, 0.693]],
  [0.209, [0.993, 0.845, 0.693]],
  [0.211, [0.993, 0.842, 0.688]],
  [0.213, [0.993, 0.842, 0.688]],
  [0.215, [0.993, 0.839, 0.683]],
  [0.217, [0.993, 0.839, 0.683]],
  [0.219, [0.993, 0.837, 0.677]],
  [0.221, [0.993, 0.837, 0.677]],
  [0.223, [0.993, 0.834, 0.672]],
  [0.225, [0.993, 0.834, 0.672]],
  [0.227, [0.993, 0.831, 0.666]],
  [0.229, [0.993, 0.831, 0.666]],
  [0.231, [0.993, 0.829, 0.661]],
  [0.233, [0.993, 0.829, 0.661]],
  [0.235, [0.993, 0.826, 0.656]],
  [0.237, [0.993, 0.826, 0.656]],
  [0.239, [0.992, 0.823, 0.65]],
  [0.241, [0.992, 0.823, 0.65]],
  [0.243, [0.992, 0.82, 0.645]],
  [0.245, [0.992, 0.82, 0.645]],
  [0.247, [0.992, 0.818, 0.639]],
  [0.249, [0.992, 0.818, 0.639]],
  [0.25, [0.992, 0.815, 0.634]],
  [0.252, [0.992, 0.815, 0.634]],
  [0.254, [0.992, 0.81, 0.627]],
  [0.256, [0.992, 0.81, 0.627]],
  [0.258, [0.992, 0.806, 0.62]],
  [0.26, [0.992, 0.806, 0.62]],
  [0.262, [0.992, 0.802, 0.613]],
  [0.264, [0.992, 0.802, 0.613]],
  [0.266, [0.992, 0.798, 0.607]],
  [0.268, [0.992, 0.798, 0.607]],
  [0.27, [0.992, 0.794, 0.6]],
  [0.272, [0.992, 0.794, 0.6]],
  [0.274, [0.992, 0.79, 0.593]],
  [0.276, [0.992, 0.79, 0.593]],
  [0.278, [0.992, 0.785, 0.586]],
  [0.28, [0.992, 0.785, 0.586]],
  [0.282, [0.992, 0.781, 0.579]],
  [0.284, [0.992, 0.781, 0.579]],
  [0.286, [0.992, 0.777, 0.573]],
  [0.288, [0.992, 0.777, 0.573]],
  [0.29, [0.992, 0.773, 0.566]],
  [0.292, [0.992, 0.773, 0.566]],
  [0.294, [0.992, 0.769, 0.559]],
  [0.295, [0.992, 0.769, 0.559]],
  [0.297, [0.992, 0.764, 0.552]],
  [0.299, [0.992, 0.764, 0.552]],
  [0.301, [0.992, 0.76, 0.546]],
  [0.303, [0.992, 0.76, 0.546]],
  [0.305, [0.992, 0.756, 0.539]],
  [0.307, [0.992, 0.756, 0.539]],
  [0.309, [0.992, 0.752, 0.532]],
  [0.311, [0.992, 0.752, 0.532]],
  [0.313, [0.992, 0.748, 0.525]],
  [0.315, [0.992, 0.748, 0.525]],
  [0.317, [0.992, 0.744, 0.519]],
  [0.319, [0.992, 0.744, 0.519]],
  [0.321, [0.992, 0.739, 0.512]],
  [0.323, [0.992, 0.739, 0.512]],
  [0.325, [0.992, 0.735, 0.505]],
  [0.327, [0.992, 0.735, 0.505]],
  [0.329, [0.992, 0.731, 0.498]],
  [0.331, [0.992, 0.731, 0.498]],
  [0.333, [0.992, 0.727, 0.492]],
  [0.335, [0.992, 0.727, 0.492]],
  [0.337, [0.992, 0.723, 0.485]],
  [0.339, [0.992, 0.723, 0.485]],
  [0.341, [0.992, 0.718, 0.478]],
  [0.342, [0.992, 0.718, 0.478]],
  [0.344, [0.992, 0.714, 0.471]],
  [0.346, [0.992, 0.714, 0.471]],
  [0.348, [0.992, 0.71, 0.464]],
  [0.35, [0.992, 0.71, 0.464]],
  [0.352, [0.992, 0.706, 0.458]],
  [0.354, [0.992, 0.706, 0.458]],
  [0.356, [0.992, 0.702, 0.451]],
  [0.358, [0.992, 0.702, 0.451]],
  [0.36, [0.992, 0.698, 0.444]],
  [0.362, [0.992, 0.698, 0.444]],
  [0.364, [0.992, 0.693, 0.437]],
  [0.366, [0.992, 0.693, 0.437]],
  [0.368, [0.992, 0.689, 0.431]],
  [0.37, [0.992, 0.689, 0.431]],
  [0.372, [0.992, 0.685, 0.424]],
  [0.374, [0.992, 0.685, 0.424]],
  [0.376, [0.992, 0.681, 0.417]],
  [0.378, [0.992, 0.681, 0.417]],
  [0.38, [0.992, 0.677, 0.412]],
  [0.382, [0.992, 0.677, 0.412]],
  [0.384, [0.992, 0.673, 0.406]],
  [0.386, [0.992, 0.673, 0.406]],
  [0.387, [0.992, 0.669, 0.4]],
  [0.389, [0.992, 0.669, 0.4]],
  [0.391, [0.992, 0.665, 0.394]],
  [0.393, [0.992, 0.665, 0.394]],
  [0.395, [0.992, 0.661, 0.389]],
  [0.397, [0.992, 0.661, 0.389]],
  [0.399, [0.992, 0.656, 0.383]],
  [0.401, [0.992, 0.656, 0.383]],
  [0.403, [0.992, 0.652, 0.377]],
  [0.405, [0.992, 0.652, 0.377]],
  [0.407, [0.992, 0.648, 0.371]],
  [0.409, [0.992, 0.648, 0.371]],
  [0.411, [0.992, 0.644, 0.365]],
  [0.413, [0.992, 0.644, 0.365]],
  [0.415, [0.992, 0.64, 0.36]],
  [0.417, [0.992, 0.64, 0.36]],
  [0.419, [0.992, 0.636, 0.354]],
  [0.421, [0.992, 0.636, 0.354]],
  [0.423, [0.992, 0.632, 0.348]],
  [0.425, [0.992, 0.632, 0.348]],
  [0.427, [0.992, 0.628, 0.342]],
  [0.429, [0.992, 0.628, 0.342]],
  [0.431, [0.992, 0.624, 0.336]],
  [0.432, [0.992, 0.624, 0.336]],
  [0.434, [0.992, 0.62, 0.331]],
  [0.436, [0.992, 0.62, 0.331]],
  [0.438, [0.992, 0.616, 0.325]],
  [0.44, [0.992, 0.616, 0.325]],
  [0.442, [0.992, 0.612, 0.319]],
  [0.444, [0.992, 0.612, 0.319]],
  [0.446, [0.992, 0.608, 0.313]],
  [0.448, [0.992, 0.608, 0.313]],
  [0.45, [0.992, 0.604, 0.308]],
  [0.452, [0.992, 0.604, 0.308]],
  [0.454, [0.992, 0.6, 0.302]],
  [0.456, [0.992, 0.6, 0.302]],
  [0.458, [0.992, 0.596, 0.296]],
  [0.46, [0.992, 0.596, 0.296]],
  [0.462, [0.992, 0.592, 0.29]],
  [0.464, [0.992, 0.592, 0.29]],
  [0.466, [0.992, 0.587, 0.284]],
  [0.468, [0.992, 0.587, 0.284]],
  [0.47, [0.992, 0.583, 0.279]],
  [0.472, [0.992, 0.583, 0.279]],
  [0.474, [0.992, 0.579, 0.273]],
  [0.476, [0.992, 0.579, 0.273]],
  [0.477, [0.992, 0.575, 0.267]],
  [0.479, [0.992, 0.575, 0.267]],
  [0.481, [0.992, 0.571, 0.261]],
  [0.483, [0.992, 0.571, 0.261]],
  [0.485, [0.992, 0.567, 0.256]],
  [0.487, [0.992, 0.567, 0.256]],
  [0.489, [0.992, 0.563, 0.25]],
  [0.491, [0.992, 0.563, 0.25]],
  [0.493, [0.992, 0.559, 0.244]],
  [0.495, [0.992, 0.559, 0.244]],
  [0.497, [0.992, 0.555, 0.238]],
  [0.499, [0.992, 0.555, 0.238]],
  [0.501, [0.991, 0.551, 0.233]],
  [0.503, [0.991, 0.551, 0.233]],
  [0.505, [0.99, 0.546, 0.228]],
  [0.507, [0.99, 0.546, 0.228]],
  [0.509, [0.988, 0.542, 0.223]],
  [0.511, [0.988, 0.542, 0.223]],
  [0.513, [0.987, 0.537, 0.218]],
  [0.515, [0.987, 0.537, 0.218]],
  [0.517, [0.986, 0.533, 0.213]],
  [0.519, [0.986, 0.533, 0.213]],
  [0.521, [0.984, 0.529, 0.208]],
  [0.523, [0.984, 0.529, 0.208]],
  [0.524, [0.983, 0.524, 0.203]],
  [0.526, [0.983, 0.524, 0.203]],
  [0.528, [0.981, 0.52, 0.197]],
  [0.53, [0.981, 0.52, 0.197]],
  [0.532, [0.98, 0.515, 0.192]],
  [0.534, [0.98, 0.515, 0.192]],
  [0.536, [0.978, 0.511, 0.187]],
  [0.538, [0.978, 0.511, 0.187]],
  [0.54, [0.977, 0.506, 0.182]],
  [0.542, [0.977, 0.506, 0.182]],
  [0.544, [0.975, 0.502, 0.177]],
  [0.546, [0.975, 0.502, 0.177]],
  [0.548, [0.974, 0.498, 0.172]],
  [0.55, [0.974, 0.498, 0.172]],
  [0.552, [0.972, 0.493, 0.167]],
  [0.554, [0.972, 0.493, 0.167]],
  [0.556, [0.971, 0.489, 0.162]],
  [0.558, [0.971, 0.489, 0.162]],
  [0.56, [0.969, 0.484, 0.157]],
  [0.562, [0.969, 0.484, 0.157]],
  [0.564, [0.968, 0.48, 0.152]],
  [0.566, [0.968, 0.48, 0.152]],
  [0.568, [0.966, 0.475, 0.147]],
  [0.569, [0.966, 0.475, 0.147]],
  [0.571, [0.965, 0.471, 0.142]],
  [0.573, [0.965, 0.471, 0.142]],
  [0.575, [0.963, 0.467, 0.137]],
  [0.577, [0.963, 0.467, 0.137]],
  [0.579, [0.962, 0.462, 0.132]],
  [0.581, [0.962, 0.462, 0.132]],
  [0.583, [0.96, 0.458, 0.127]],
  [0.585, [0.96, 0.458, 0.127]],
  [0.587, [0.959, 0.453, 0.122]],
  [0.589, [0.959, 0.453, 0.122]],
  [0.591, [0.957, 0.449, 0.117]],
  [0.593, [0.957, 0.449, 0.117]],
  [0.595, [0.956, 0.444, 0.112]],
  [0.597, [0.956, 0.444, 0.112]],
  [0.599, [0.955, 0.44, 0.107]],
  [0.601, [0.955, 0.44, 0.107]],
  [0.603, [0.953, 0.436, 0.102]],
  [0.605, [0.953, 0.436, 0.102]],
  [0.607, [0.952, 0.431, 0.097]],
  [0.609, [0.952, 0.431, 0.097]],
  [0.611, [0.95, 0.427, 0.092]],
  [0.613, [0.95, 0.427, 0.092]],
  [0.614, [0.949, 0.422, 0.086]],
  [0.616, [0.949, 0.422, 0.086]],
  [0.618, [0.947, 0.418, 0.081]],
  [0.62, [0.947, 0.418, 0.081]],
  [0.622, [0.946, 0.413, 0.076]],
  [0.624, [0.946, 0.413, 0.076]],
  [0.626, [0.943, 0.409, 0.073]],
  [0.628, [0.943, 0.409, 0.073]],
  [0.63, [0.94, 0.405, 0.071]],
  [0.632, [0.94, 0.405, 0.071]],
  [0.634, [0.937, 0.401, 0.069]],
  [0.636, [0.937, 0.401, 0.069]],
  [0.638, [0.934, 0.397, 0.066]],
  [0.64, [0.934, 0.397, 0.066]],
  [0.642, [0.931, 0.393, 0.064]],
  [0.644, [0.931, 0.393, 0.064]],
  [0.646, [0.928, 0.389, 0.062]],
  [0.648, [0.928, 0.389, 0.062]],
  [0.65, [0.926, 0.385, 0.06]],
  [0.652, [0.926, 0.385, 0.06]],
  [0.654, [0.923, 0.381, 0.058]],
  [0.656, [0.923, 0.381, 0.058]],
  [0.658, [0.92, 0.377, 0.055]],
  [0.659, [0.92, 0.377, 0.055]],
  [0.661, [0.917, 0.373, 0.053]],
  [0.663, [0.917, 0.373, 0.053]],
  [0.665, [0.914, 0.369, 0.051]],
  [0.667, [0.914, 0.369, 0.051]],
  [0.669, [0.911, 0.365, 0.049]],
  [0.671, [0.911, 0.365, 0.049]],
  [0.673, [0.908, 0.361, 0.047]],
  [0.675, [0.908, 0.361, 0.047]],
  [0.677, [0.905, 0.356, 0.044]],
  [0.679, [0.905, 0.356, 0.044]],
  [0.681, [0.902, 0.352, 0.042]],
  [0.683, [0.902, 0.352, 0.042]],
  [0.685, [0.899, 0.348, 0.04]],
  [0.687, [0.899, 0.348, 0.04]],
  [0.689, [0.896, 0.344, 0.038]],
  [0.691, [0.896, 0.344, 0.038]],
  [0.693, [0.893, 0.34, 0.035]],
  [0.695, [0.893, 0.34, 0.035]],
  [0.697, [0.89, 0.336, 0.033]],
  [0.699, [0.89, 0.336, 0.033]],
  [0.701, [0.887, 0.332, 0.031]],
  [0.703, [0.887, 0.332, 0.031]],
  [0.705, [0.884, 0.328, 0.029]],
  [0.706, [0.884, 0.328, 0.029]],
  [0.708, [0.881, 0.324, 0.027]],
  [0.71, [0.881, 0.324, 0.027]],
  [0.712, [0.878, 0.32, 0.024]],
  [0.714, [0.878, 0.32, 0.024]],
  [0.716, [0.875, 0.316, 0.022]],
  [0.718, [0.875, 0.316, 0.022]],
  [0.72, [0.872, 0.312, 0.02]],
  [0.722, [0.872, 0.312, 0.02]],
  [0.724, [0.869, 0.308, 0.018]],
  [0.726, [0.869, 0.308, 0.018]],
  [0.728, [0.866, 0.304, 0.016]],
  [0.73, [0.866, 0.304, 0.016]],
  [0.732, [0.864, 0.3, 0.013]],
  [0.734, [0.864, 0.3, 0.013]],
  [0.736, [0.861, 0.296, 0.011]],
  [0.738, [0.861, 0.296, 0.011]],
  [0.74, [0.858, 0.291, 9e-3]],
  [0.742, [0.858, 0.291, 9e-3]],
  [0.744, [0.855, 0.287, 7e-3]],
  [0.746, [0.855, 0.287, 7e-3]],
  [0.748, [0.852, 0.283, 4e-3]],
  [0.75, [0.852, 0.283, 4e-3]],
  [0.751, [0.846, 0.281, 4e-3]],
  [0.753, [0.846, 0.281, 4e-3]],
  [0.755, [0.84, 0.278, 4e-3]],
  [0.757, [0.84, 0.278, 4e-3]],
  [0.759, [0.834, 0.276, 5e-3]],
  [0.761, [0.834, 0.276, 5e-3]],
  [0.763, [0.827, 0.274, 5e-3]],
  [0.765, [0.827, 0.274, 5e-3]],
  [0.767, [0.821, 0.272, 5e-3]],
  [0.769, [0.821, 0.272, 5e-3]],
  [0.771, [0.815, 0.27, 5e-3]],
  [0.773, [0.815, 0.27, 5e-3]],
  [0.775, [0.809, 0.267, 6e-3]],
  [0.777, [0.809, 0.267, 6e-3]],
  [0.779, [0.802, 0.265, 6e-3]],
  [0.781, [0.802, 0.265, 6e-3]],
  [0.783, [0.796, 0.263, 6e-3]],
  [0.785, [0.796, 0.263, 6e-3]],
  [0.787, [0.79, 0.261, 6e-3]],
  [0.789, [0.79, 0.261, 6e-3]],
  [0.791, [0.784, 0.259, 7e-3]],
  [0.793, [0.784, 0.259, 7e-3]],
  [0.795, [0.777, 0.256, 7e-3]],
  [0.796, [0.777, 0.256, 7e-3]],
  [0.798, [0.771, 0.254, 7e-3]],
  [0.8, [0.771, 0.254, 7e-3]],
  [0.802, [0.765, 0.252, 7e-3]],
  [0.804, [0.765, 0.252, 7e-3]],
  [0.806, [0.758, 0.25, 8e-3]],
  [0.808, [0.758, 0.25, 8e-3]],
  [0.81, [0.752, 0.247, 8e-3]],
  [0.812, [0.752, 0.247, 8e-3]],
  [0.814, [0.746, 0.245, 8e-3]],
  [0.816, [0.746, 0.245, 8e-3]],
  [0.818, [0.74, 0.243, 8e-3]],
  [0.82, [0.74, 0.243, 8e-3]],
  [0.822, [0.733, 0.241, 9e-3]],
  [0.824, [0.733, 0.241, 9e-3]],
  [0.826, [0.727, 0.239, 9e-3]],
  [0.828, [0.727, 0.239, 9e-3]],
  [0.83, [0.721, 0.236, 9e-3]],
  [0.832, [0.721, 0.236, 9e-3]],
  [0.834, [0.715, 0.234, 9e-3]],
  [0.836, [0.715, 0.234, 9e-3]],
  [0.838, [0.708, 0.232, 0.01]],
  [0.84, [0.708, 0.232, 0.01]],
  [0.841, [0.702, 0.23, 0.01]],
  [0.843, [0.702, 0.23, 0.01]],
  [0.845, [0.696, 0.228, 0.01]],
  [0.847, [0.696, 0.228, 0.01]],
  [0.849, [0.689, 0.225, 0.01]],
  [0.851, [0.689, 0.225, 0.01]],
  [0.853, [0.683, 0.223, 0.011]],
  [0.855, [0.683, 0.223, 0.011]],
  [0.857, [0.677, 0.221, 0.011]],
  [0.859, [0.677, 0.221, 0.011]],
  [0.861, [0.671, 0.219, 0.011]],
  [0.863, [0.671, 0.219, 0.011]],
  [0.865, [0.664, 0.216, 0.011]],
  [0.867, [0.664, 0.216, 0.011]],
  [0.869, [0.658, 0.214, 0.011]],
  [0.871, [0.658, 0.214, 0.011]],
  [0.873, [0.652, 0.212, 0.012]],
  [0.875, [0.652, 0.212, 0.012]],
  [0.877, [0.647, 0.21, 0.012]],
  [0.879, [0.647, 0.21, 0.012]],
  [0.881, [0.642, 0.208, 0.012]],
  [0.883, [0.642, 0.208, 0.012]],
  [0.885, [0.637, 0.206, 0.012]],
  [0.886, [0.637, 0.206, 0.012]],
  [0.888, [0.632, 0.205, 0.012]],
  [0.89, [0.632, 0.205, 0.012]],
  [0.892, [0.628, 0.203, 0.012]],
  [0.894, [0.628, 0.203, 0.012]],
  [0.896, [0.623, 0.201, 0.012]],
  [0.898, [0.623, 0.201, 0.012]],
  [0.9, [0.618, 0.199, 0.013]],
  [0.902, [0.618, 0.199, 0.013]],
  [0.904, [0.613, 0.197, 0.013]],
  [0.906, [0.613, 0.197, 0.013]],
  [0.908, [0.608, 0.195, 0.013]],
  [0.91, [0.608, 0.195, 0.013]],
  [0.912, [0.604, 0.194, 0.013]],
  [0.914, [0.604, 0.194, 0.013]],
  [0.916, [0.599, 0.192, 0.013]],
  [0.918, [0.599, 0.192, 0.013]],
  [0.92, [0.594, 0.19, 0.013]],
  [0.922, [0.594, 0.19, 0.013]],
  [0.924, [0.589, 0.188, 0.013]],
  [0.926, [0.589, 0.188, 0.013]],
  [0.928, [0.584, 0.186, 0.013]],
  [0.93, [0.584, 0.186, 0.013]],
  [0.932, [0.58, 0.184, 0.014]],
  [0.933, [0.58, 0.184, 0.014]],
  [0.935, [0.575, 0.182, 0.014]],
  [0.937, [0.575, 0.182, 0.014]],
  [0.939, [0.57, 0.181, 0.014]],
  [0.941, [0.57, 0.181, 0.014]],
  [0.943, [0.565, 0.179, 0.014]],
  [0.945, [0.565, 0.179, 0.014]],
  [0.947, [0.56, 0.177, 0.014]],
  [0.949, [0.56, 0.177, 0.014]],
  [0.951, [0.556, 0.175, 0.014]],
  [0.953, [0.556, 0.175, 0.014]],
  [0.955, [0.551, 0.173, 0.014]],
  [0.957, [0.551, 0.173, 0.014]],
  [0.959, [0.546, 0.171, 0.014]],
  [0.961, [0.546, 0.171, 0.014]],
  [0.963, [0.541, 0.17, 0.015]],
  [0.965, [0.541, 0.17, 0.015]],
  [0.967, [0.536, 0.168, 0.015]],
  [0.969, [0.536, 0.168, 0.015]],
  [0.971, [0.532, 0.166, 0.015]],
  [0.973, [0.532, 0.166, 0.015]],
  [0.975, [0.527, 0.164, 0.015]],
  [0.977, [0.527, 0.164, 0.015]],
  [0.978, [0.522, 0.162, 0.015]],
  [0.98, [0.522, 0.162, 0.015]],
  [0.982, [0.517, 0.16, 0.015]],
  [0.984, [0.517, 0.16, 0.015]],
  [0.986, [0.512, 0.158, 0.015]],
  [0.988, [0.512, 0.158, 0.015]],
  [0.99, [0.508, 0.157, 0.015]],
  [0.992, [0.508, 0.157, 0.015]],
  [0.994, [0.503, 0.155, 0.016]],
  [0.996, [0.503, 0.155, 0.016]],
  [0.998, [0.498, 0.153, 0.016]],
  [1, [0.498, 0.153, 0.016]]
], dp = [
  [0, [1, 0.969, 0.984]],
  [2e-3, [1, 0.969, 0.984]],
  [4e-3, [0.998, 0.967, 0.983]],
  [6e-3, [0.998, 0.967, 0.983]],
  [8e-3, [0.995, 0.965, 0.982]],
  [0.01, [0.995, 0.965, 0.982]],
  [0.012, [0.993, 0.963, 0.981]],
  [0.014, [0.993, 0.963, 0.981]],
  [0.016, [0.991, 0.961, 0.98]],
  [0.018, [0.991, 0.961, 0.98]],
  [0.02, [0.988, 0.959, 0.979]],
  [0.022, [0.988, 0.959, 0.979]],
  [0.023, [0.986, 0.957, 0.978]],
  [0.025, [0.986, 0.957, 0.978]],
  [0.027, [0.984, 0.955, 0.977]],
  [0.029, [0.984, 0.955, 0.977]],
  [0.031, [0.981, 0.953, 0.975]],
  [0.033, [0.981, 0.953, 0.975]],
  [0.035, [0.979, 0.951, 0.974]],
  [0.037, [0.979, 0.951, 0.974]],
  [0.039, [0.977, 0.949, 0.973]],
  [0.041, [0.977, 0.949, 0.973]],
  [0.043, [0.974, 0.947, 0.972]],
  [0.045, [0.974, 0.947, 0.972]],
  [0.047, [0.972, 0.945, 0.971]],
  [0.049, [0.972, 0.945, 0.971]],
  [0.051, [0.97, 0.943, 0.97]],
  [0.053, [0.97, 0.943, 0.97]],
  [0.055, [0.967, 0.941, 0.969]],
  [0.057, [0.967, 0.941, 0.969]],
  [0.059, [0.965, 0.939, 0.968]],
  [0.061, [0.965, 0.939, 0.968]],
  [0.063, [0.963, 0.937, 0.967]],
  [0.065, [0.963, 0.937, 0.967]],
  [0.067, [0.96, 0.935, 0.965]],
  [0.068, [0.96, 0.935, 0.965]],
  [0.07, [0.958, 0.933, 0.964]],
  [0.072, [0.958, 0.933, 0.964]],
  [0.074, [0.956, 0.931, 0.963]],
  [0.076, [0.956, 0.931, 0.963]],
  [0.078, [0.953, 0.929, 0.962]],
  [0.08, [0.953, 0.929, 0.962]],
  [0.082, [0.951, 0.927, 0.961]],
  [0.084, [0.951, 0.927, 0.961]],
  [0.086, [0.949, 0.925, 0.96]],
  [0.088, [0.949, 0.925, 0.96]],
  [0.09, [0.946, 0.923, 0.959]],
  [0.092, [0.946, 0.923, 0.959]],
  [0.094, [0.944, 0.921, 0.958]],
  [0.096, [0.944, 0.921, 0.958]],
  [0.098, [0.942, 0.919, 0.957]],
  [0.1, [0.942, 0.919, 0.957]],
  [0.102, [0.939, 0.917, 0.956]],
  [0.104, [0.939, 0.917, 0.956]],
  [0.106, [0.937, 0.915, 0.954]],
  [0.108, [0.937, 0.915, 0.954]],
  [0.11, [0.935, 0.914, 0.953]],
  [0.112, [0.935, 0.914, 0.953]],
  [0.114, [0.932, 0.912, 0.952]],
  [0.115, [0.932, 0.912, 0.952]],
  [0.117, [0.93, 0.91, 0.951]],
  [0.119, [0.93, 0.91, 0.951]],
  [0.121, [0.928, 0.908, 0.95]],
  [0.123, [0.928, 0.908, 0.95]],
  [0.125, [0.925, 0.906, 0.949]],
  [0.127, [0.925, 0.906, 0.949]],
  [0.129, [0.922, 0.903, 0.947]],
  [0.131, [0.922, 0.903, 0.947]],
  [0.133, [0.918, 0.9, 0.946]],
  [0.135, [0.918, 0.9, 0.946]],
  [0.137, [0.915, 0.897, 0.944]],
  [0.139, [0.915, 0.897, 0.944]],
  [0.141, [0.911, 0.895, 0.943]],
  [0.143, [0.911, 0.895, 0.943]],
  [0.145, [0.908, 0.892, 0.941]],
  [0.147, [0.908, 0.892, 0.941]],
  [0.149, [0.904, 0.889, 0.94]],
  [0.151, [0.904, 0.889, 0.94]],
  [0.153, [0.901, 0.887, 0.939]],
  [0.155, [0.901, 0.887, 0.939]],
  [0.157, [0.898, 0.884, 0.937]],
  [0.159, [0.898, 0.884, 0.937]],
  [0.16, [0.894, 0.881, 0.936]],
  [0.162, [0.894, 0.881, 0.936]],
  [0.164, [0.891, 0.878, 0.934]],
  [0.166, [0.891, 0.878, 0.934]],
  [0.168, [0.887, 0.876, 0.933]],
  [0.17, [0.887, 0.876, 0.933]],
  [0.172, [0.884, 0.873, 0.931]],
  [0.174, [0.884, 0.873, 0.931]],
  [0.176, [0.88, 0.87, 0.93]],
  [0.178, [0.88, 0.87, 0.93]],
  [0.18, [0.877, 0.868, 0.928]],
  [0.182, [0.877, 0.868, 0.928]],
  [0.184, [0.873, 0.865, 0.927]],
  [0.186, [0.873, 0.865, 0.927]],
  [0.188, [0.87, 0.862, 0.925]],
  [0.19, [0.87, 0.862, 0.925]],
  [0.192, [0.866, 0.86, 0.924]],
  [0.194, [0.866, 0.86, 0.924]],
  [0.196, [0.863, 0.857, 0.922]],
  [0.198, [0.863, 0.857, 0.922]],
  [0.2, [0.86, 0.854, 0.921]],
  [0.202, [0.86, 0.854, 0.921]],
  [0.204, [0.856, 0.851, 0.919]],
  [0.205, [0.856, 0.851, 0.919]],
  [0.207, [0.853, 0.849, 0.918]],
  [0.209, [0.853, 0.849, 0.918]],
  [0.211, [0.849, 0.846, 0.916]],
  [0.213, [0.849, 0.846, 0.916]],
  [0.215, [0.846, 0.843, 0.915]],
  [0.217, [0.846, 0.843, 0.915]],
  [0.219, [0.842, 0.841, 0.913]],
  [0.221, [0.842, 0.841, 0.913]],
  [0.223, [0.839, 0.838, 0.912]],
  [0.225, [0.839, 0.838, 0.912]],
  [0.227, [0.835, 0.835, 0.91]],
  [0.229, [0.835, 0.835, 0.91]],
  [0.231, [0.832, 0.832, 0.909]],
  [0.233, [0.832, 0.832, 0.909]],
  [0.235, [0.829, 0.83, 0.907]],
  [0.237, [0.829, 0.83, 0.907]],
  [0.239, [0.825, 0.827, 0.906]],
  [0.241, [0.825, 0.827, 0.906]],
  [0.243, [0.822, 0.824, 0.905]],
  [0.245, [0.822, 0.824, 0.905]],
  [0.247, [0.818, 0.822, 0.903]],
  [0.249, [0.818, 0.822, 0.903]],
  [0.25, [0.814, 0.819, 0.902]],
  [0.252, [0.814, 0.819, 0.902]],
  [0.254, [0.809, 0.817, 0.9]],
  [0.256, [0.809, 0.817, 0.9]],
  [0.258, [0.804, 0.814, 0.899]],
  [0.26, [0.804, 0.814, 0.899]],
  [0.262, [0.799, 0.812, 0.898]],
  [0.264, [0.799, 0.812, 0.898]],
  [0.266, [0.794, 0.809, 0.896]],
  [0.268, [0.794, 0.809, 0.896]],
  [0.27, [0.789, 0.807, 0.895]],
  [0.272, [0.789, 0.807, 0.895]],
  [0.274, [0.783, 0.804, 0.894]],
  [0.276, [0.783, 0.804, 0.894]],
  [0.278, [0.778, 0.802, 0.892]],
  [0.28, [0.778, 0.802, 0.892]],
  [0.282, [0.773, 0.799, 0.891]],
  [0.284, [0.773, 0.799, 0.891]],
  [0.286, [0.768, 0.797, 0.889]],
  [0.288, [0.768, 0.797, 0.889]],
  [0.29, [0.763, 0.794, 0.888]],
  [0.292, [0.763, 0.794, 0.888]],
  [0.294, [0.758, 0.792, 0.887]],
  [0.295, [0.758, 0.792, 0.887]],
  [0.297, [0.752, 0.789, 0.885]],
  [0.299, [0.752, 0.789, 0.885]],
  [0.301, [0.747, 0.787, 0.884]],
  [0.303, [0.747, 0.787, 0.884]],
  [0.305, [0.742, 0.785, 0.883]],
  [0.307, [0.742, 0.785, 0.883]],
  [0.309, [0.737, 0.782, 0.881]],
  [0.311, [0.737, 0.782, 0.881]],
  [0.313, [0.732, 0.78, 0.88]],
  [0.315, [0.732, 0.78, 0.88]],
  [0.317, [0.727, 0.777, 0.879]],
  [0.319, [0.727, 0.777, 0.879]],
  [0.321, [0.721, 0.775, 0.877]],
  [0.323, [0.721, 0.775, 0.877]],
  [0.325, [0.716, 0.772, 0.876]],
  [0.327, [0.716, 0.772, 0.876]],
  [0.329, [0.711, 0.77, 0.875]],
  [0.331, [0.711, 0.77, 0.875]],
  [0.333, [0.706, 0.767, 0.873]],
  [0.335, [0.706, 0.767, 0.873]],
  [0.337, [0.701, 0.765, 0.872]],
  [0.339, [0.701, 0.765, 0.872]],
  [0.341, [0.696, 0.762, 0.87]],
  [0.342, [0.696, 0.762, 0.87]],
  [0.344, [0.69, 0.76, 0.869]],
  [0.346, [0.69, 0.76, 0.869]],
  [0.348, [0.685, 0.757, 0.868]],
  [0.35, [0.685, 0.757, 0.868]],
  [0.352, [0.68, 0.755, 0.866]],
  [0.354, [0.68, 0.755, 0.866]],
  [0.356, [0.675, 0.753, 0.865]],
  [0.358, [0.675, 0.753, 0.865]],
  [0.36, [0.67, 0.75, 0.864]],
  [0.362, [0.67, 0.75, 0.864]],
  [0.364, [0.665, 0.748, 0.862]],
  [0.366, [0.665, 0.748, 0.862]],
  [0.368, [0.659, 0.745, 0.861]],
  [0.37, [0.659, 0.745, 0.861]],
  [0.372, [0.654, 0.743, 0.86]],
  [0.374, [0.654, 0.743, 0.86]],
  [0.376, [0.649, 0.74, 0.858]],
  [0.378, [0.649, 0.74, 0.858]],
  [0.38, [0.643, 0.738, 0.857]],
  [0.382, [0.643, 0.738, 0.857]],
  [0.384, [0.636, 0.735, 0.855]],
  [0.386, [0.636, 0.735, 0.855]],
  [0.387, [0.63, 0.733, 0.854]],
  [0.389, [0.63, 0.733, 0.854]],
  [0.391, [0.624, 0.73, 0.852]],
  [0.393, [0.624, 0.73, 0.852]],
  [0.395, [0.618, 0.728, 0.851]],
  [0.397, [0.618, 0.728, 0.851]],
  [0.399, [0.612, 0.725, 0.849]],
  [0.401, [0.612, 0.725, 0.849]],
  [0.403, [0.606, 0.723, 0.848]],
  [0.405, [0.606, 0.723, 0.848]],
  [0.407, [0.599, 0.721, 0.846]],
  [0.409, [0.599, 0.721, 0.846]],
  [0.411, [0.593, 0.718, 0.845]],
  [0.413, [0.593, 0.718, 0.845]],
  [0.415, [0.587, 0.716, 0.844]],
  [0.417, [0.587, 0.716, 0.844]],
  [0.419, [0.581, 0.713, 0.842]],
  [0.421, [0.581, 0.713, 0.842]],
  [0.423, [0.575, 0.711, 0.841]],
  [0.425, [0.575, 0.711, 0.841]],
  [0.427, [0.569, 0.708, 0.839]],
  [0.429, [0.569, 0.708, 0.839]],
  [0.431, [0.563, 0.706, 0.838]],
  [0.432, [0.563, 0.706, 0.838]],
  [0.434, [0.556, 0.703, 0.836]],
  [0.436, [0.556, 0.703, 0.836]],
  [0.438, [0.55, 0.701, 0.835]],
  [0.44, [0.55, 0.701, 0.835]],
  [0.442, [0.544, 0.698, 0.833]],
  [0.444, [0.544, 0.698, 0.833]],
  [0.446, [0.538, 0.696, 0.832]],
  [0.448, [0.538, 0.696, 0.832]],
  [0.45, [0.532, 0.694, 0.83]],
  [0.452, [0.532, 0.694, 0.83]],
  [0.454, [0.526, 0.691, 0.829]],
  [0.456, [0.526, 0.691, 0.829]],
  [0.458, [0.519, 0.689, 0.827]],
  [0.46, [0.519, 0.689, 0.827]],
  [0.462, [0.513, 0.686, 0.826]],
  [0.464, [0.513, 0.686, 0.826]],
  [0.466, [0.507, 0.684, 0.824]],
  [0.468, [0.507, 0.684, 0.824]],
  [0.47, [0.501, 0.681, 0.823]],
  [0.472, [0.501, 0.681, 0.823]],
  [0.474, [0.495, 0.679, 0.821]],
  [0.476, [0.495, 0.679, 0.821]],
  [0.477, [0.489, 0.676, 0.82]],
  [0.479, [0.489, 0.676, 0.82]],
  [0.481, [0.483, 0.674, 0.818]],
  [0.483, [0.483, 0.674, 0.818]],
  [0.485, [0.476, 0.671, 0.817]],
  [0.487, [0.476, 0.671, 0.817]],
  [0.489, [0.47, 0.669, 0.815]],
  [0.491, [0.47, 0.669, 0.815]],
  [0.493, [0.464, 0.666, 0.814]],
  [0.495, [0.464, 0.666, 0.814]],
  [0.497, [0.458, 0.664, 0.813]],
  [0.499, [0.458, 0.664, 0.813]],
  [0.501, [0.451, 0.661, 0.811]],
  [0.503, [0.451, 0.661, 0.811]],
  [0.505, [0.443, 0.658, 0.809]],
  [0.507, [0.443, 0.658, 0.809]],
  [0.509, [0.436, 0.655, 0.807]],
  [0.511, [0.436, 0.655, 0.807]],
  [0.513, [0.428, 0.652, 0.805]],
  [0.515, [0.428, 0.652, 0.805]],
  [0.517, [0.421, 0.649, 0.803]],
  [0.519, [0.421, 0.649, 0.803]],
  [0.521, [0.413, 0.646, 0.802]],
  [0.523, [0.413, 0.646, 0.802]],
  [0.524, [0.405, 0.643, 0.8]],
  [0.526, [0.405, 0.643, 0.8]],
  [0.528, [0.398, 0.64, 0.798]],
  [0.53, [0.398, 0.64, 0.798]],
  [0.532, [0.39, 0.637, 0.796]],
  [0.534, [0.39, 0.637, 0.796]],
  [0.536, [0.382, 0.634, 0.794]],
  [0.538, [0.382, 0.634, 0.794]],
  [0.54, [0.375, 0.63, 0.792]],
  [0.542, [0.375, 0.63, 0.792]],
  [0.544, [0.367, 0.627, 0.791]],
  [0.546, [0.367, 0.627, 0.791]],
  [0.548, [0.36, 0.624, 0.789]],
  [0.55, [0.36, 0.624, 0.789]],
  [0.552, [0.352, 0.621, 0.787]],
  [0.554, [0.352, 0.621, 0.787]],
  [0.556, [0.344, 0.618, 0.785]],
  [0.558, [0.344, 0.618, 0.785]],
  [0.56, [0.337, 0.615, 0.783]],
  [0.562, [0.337, 0.615, 0.783]],
  [0.564, [0.329, 0.612, 0.781]],
  [0.566, [0.329, 0.612, 0.781]],
  [0.568, [0.321, 0.609, 0.779]],
  [0.569, [0.321, 0.609, 0.779]],
  [0.571, [0.314, 0.606, 0.778]],
  [0.573, [0.314, 0.606, 0.778]],
  [0.575, [0.306, 0.603, 0.776]],
  [0.577, [0.306, 0.603, 0.776]],
  [0.579, [0.299, 0.6, 0.774]],
  [0.581, [0.299, 0.6, 0.774]],
  [0.583, [0.291, 0.597, 0.772]],
  [0.585, [0.291, 0.597, 0.772]],
  [0.587, [0.283, 0.594, 0.77]],
  [0.589, [0.283, 0.594, 0.77]],
  [0.591, [0.276, 0.59, 0.768]],
  [0.593, [0.276, 0.59, 0.768]],
  [0.595, [0.268, 0.587, 0.767]],
  [0.597, [0.268, 0.587, 0.767]],
  [0.599, [0.26, 0.584, 0.765]],
  [0.601, [0.26, 0.584, 0.765]],
  [0.603, [0.253, 0.581, 0.763]],
  [0.605, [0.253, 0.581, 0.763]],
  [0.607, [0.245, 0.578, 0.761]],
  [0.609, [0.245, 0.578, 0.761]],
  [0.611, [0.238, 0.575, 0.759]],
  [0.613, [0.238, 0.575, 0.759]],
  [0.614, [0.23, 0.572, 0.757]],
  [0.616, [0.23, 0.572, 0.757]],
  [0.618, [0.222, 0.569, 0.755]],
  [0.62, [0.222, 0.569, 0.755]],
  [0.622, [0.215, 0.566, 0.754]],
  [0.624, [0.215, 0.566, 0.754]],
  [0.626, [0.208, 0.562, 0.752]],
  [0.628, [0.208, 0.562, 0.752]],
  [0.63, [0.202, 0.558, 0.75]],
  [0.632, [0.202, 0.558, 0.75]],
  [0.634, [0.196, 0.554, 0.748]],
  [0.636, [0.196, 0.554, 0.748]],
  [0.638, [0.19, 0.55, 0.746]],
  [0.64, [0.19, 0.55, 0.746]],
  [0.642, [0.184, 0.546, 0.744]],
  [0.644, [0.184, 0.546, 0.744]],
  [0.646, [0.178, 0.543, 0.742]],
  [0.648, [0.178, 0.543, 0.742]],
  [0.65, [0.172, 0.539, 0.74]],
  [0.652, [0.172, 0.539, 0.74]],
  [0.654, [0.166, 0.535, 0.738]],
  [0.656, [0.166, 0.535, 0.738]],
  [0.658, [0.16, 0.531, 0.736]],
  [0.659, [0.16, 0.531, 0.736]],
  [0.661, [0.154, 0.527, 0.734]],
  [0.663, [0.154, 0.527, 0.734]],
  [0.665, [0.148, 0.523, 0.732]],
  [0.667, [0.148, 0.523, 0.732]],
  [0.669, [0.142, 0.519, 0.73]],
  [0.671, [0.142, 0.519, 0.73]],
  [0.673, [0.136, 0.515, 0.728]],
  [0.675, [0.136, 0.515, 0.728]],
  [0.677, [0.13, 0.511, 0.726]],
  [0.679, [0.13, 0.511, 0.726]],
  [0.681, [0.124, 0.507, 0.724]],
  [0.683, [0.124, 0.507, 0.724]],
  [0.685, [0.118, 0.503, 0.722]],
  [0.687, [0.118, 0.503, 0.722]],
  [0.689, [0.112, 0.499, 0.72]],
  [0.691, [0.112, 0.499, 0.72]],
  [0.693, [0.106, 0.495, 0.718]],
  [0.695, [0.106, 0.495, 0.718]],
  [0.697, [0.099, 0.491, 0.716]],
  [0.699, [0.099, 0.491, 0.716]],
  [0.701, [0.093, 0.487, 0.714]],
  [0.703, [0.093, 0.487, 0.714]],
  [0.705, [0.087, 0.484, 0.712]],
  [0.706, [0.087, 0.484, 0.712]],
  [0.708, [0.081, 0.48, 0.71]],
  [0.71, [0.081, 0.48, 0.71]],
  [0.712, [0.075, 0.476, 0.708]],
  [0.714, [0.075, 0.476, 0.708]],
  [0.716, [0.069, 0.472, 0.706]],
  [0.718, [0.069, 0.472, 0.706]],
  [0.72, [0.063, 0.468, 0.704]],
  [0.722, [0.063, 0.468, 0.704]],
  [0.724, [0.057, 0.464, 0.702]],
  [0.726, [0.057, 0.464, 0.702]],
  [0.728, [0.051, 0.46, 0.701]],
  [0.73, [0.051, 0.46, 0.701]],
  [0.732, [0.045, 0.456, 0.699]],
  [0.734, [0.045, 0.456, 0.699]],
  [0.736, [0.039, 0.452, 0.697]],
  [0.738, [0.039, 0.452, 0.697]],
  [0.74, [0.033, 0.448, 0.695]],
  [0.742, [0.033, 0.448, 0.695]],
  [0.744, [0.027, 0.444, 0.693]],
  [0.746, [0.027, 0.444, 0.693]],
  [0.748, [0.021, 0.44, 0.691]],
  [0.75, [0.021, 0.44, 0.691]],
  [0.751, [0.02, 0.437, 0.687]],
  [0.753, [0.02, 0.437, 0.687]],
  [0.755, [0.019, 0.434, 0.683]],
  [0.757, [0.019, 0.434, 0.683]],
  [0.759, [0.019, 0.432, 0.678]],
  [0.761, [0.019, 0.432, 0.678]],
  [0.763, [0.019, 0.429, 0.674]],
  [0.765, [0.019, 0.429, 0.674]],
  [0.767, [0.019, 0.426, 0.67]],
  [0.769, [0.019, 0.426, 0.67]],
  [0.771, [0.019, 0.424, 0.665]],
  [0.773, [0.019, 0.424, 0.665]],
  [0.775, [0.019, 0.421, 0.661]],
  [0.777, [0.019, 0.421, 0.661]],
  [0.779, [0.019, 0.418, 0.657]],
  [0.781, [0.019, 0.418, 0.657]],
  [0.783, [0.019, 0.416, 0.653]],
  [0.785, [0.019, 0.416, 0.653]],
  [0.787, [0.018, 0.413, 0.648]],
  [0.789, [0.018, 0.413, 0.648]],
  [0.791, [0.018, 0.41, 0.644]],
  [0.793, [0.018, 0.41, 0.644]],
  [0.795, [0.018, 0.407, 0.64]],
  [0.796, [0.018, 0.407, 0.64]],
  [0.798, [0.018, 0.405, 0.635]],
  [0.8, [0.018, 0.405, 0.635]],
  [0.802, [0.018, 0.402, 0.631]],
  [0.804, [0.018, 0.402, 0.631]],
  [0.806, [0.018, 0.399, 0.627]],
  [0.808, [0.018, 0.399, 0.627]],
  [0.81, [0.018, 0.397, 0.622]],
  [0.812, [0.018, 0.397, 0.622]],
  [0.814, [0.018, 0.394, 0.618]],
  [0.816, [0.018, 0.394, 0.618]],
  [0.818, [0.017, 0.391, 0.614]],
  [0.82, [0.017, 0.391, 0.614]],
  [0.822, [0.017, 0.388, 0.609]],
  [0.824, [0.017, 0.388, 0.609]],
  [0.826, [0.017, 0.386, 0.605]],
  [0.828, [0.017, 0.386, 0.605]],
  [0.83, [0.017, 0.383, 0.601]],
  [0.832, [0.017, 0.383, 0.601]],
  [0.834, [0.017, 0.38, 0.597]],
  [0.836, [0.017, 0.38, 0.597]],
  [0.838, [0.017, 0.378, 0.592]],
  [0.84, [0.017, 0.378, 0.592]],
  [0.841, [0.017, 0.375, 0.588]],
  [0.843, [0.017, 0.375, 0.588]],
  [0.845, [0.017, 0.372, 0.584]],
  [0.847, [0.017, 0.372, 0.584]],
  [0.849, [0.016, 0.37, 0.579]],
  [0.851, [0.016, 0.37, 0.579]],
  [0.853, [0.016, 0.367, 0.575]],
  [0.855, [0.016, 0.367, 0.575]],
  [0.857, [0.016, 0.364, 0.571]],
  [0.859, [0.016, 0.364, 0.571]],
  [0.861, [0.016, 0.361, 0.566]],
  [0.863, [0.016, 0.361, 0.566]],
  [0.865, [0.016, 0.359, 0.562]],
  [0.867, [0.016, 0.359, 0.562]],
  [0.869, [0.016, 0.356, 0.558]],
  [0.871, [0.016, 0.356, 0.558]],
  [0.873, [0.016, 0.353, 0.553]],
  [0.875, [0.016, 0.353, 0.553]],
  [0.877, [0.015, 0.349, 0.547]],
  [0.879, [0.015, 0.349, 0.547]],
  [0.881, [0.015, 0.345, 0.541]],
  [0.883, [0.015, 0.345, 0.541]],
  [0.885, [0.015, 0.341, 0.534]],
  [0.886, [0.015, 0.341, 0.534]],
  [0.888, [0.015, 0.337, 0.528]],
  [0.89, [0.015, 0.337, 0.528]],
  [0.892, [0.014, 0.333, 0.521]],
  [0.894, [0.014, 0.333, 0.521]],
  [0.896, [0.014, 0.328, 0.515]],
  [0.898, [0.014, 0.328, 0.515]],
  [0.9, [0.014, 0.324, 0.508]],
  [0.902, [0.014, 0.324, 0.508]],
  [0.904, [0.014, 0.32, 0.502]],
  [0.906, [0.014, 0.32, 0.502]],
  [0.908, [0.014, 0.316, 0.495]],
  [0.91, [0.014, 0.316, 0.495]],
  [0.912, [0.013, 0.312, 0.489]],
  [0.914, [0.013, 0.312, 0.489]],
  [0.916, [0.013, 0.307, 0.482]],
  [0.918, [0.013, 0.307, 0.482]],
  [0.92, [0.013, 0.303, 0.476]],
  [0.922, [0.013, 0.303, 0.476]],
  [0.924, [0.013, 0.299, 0.469]],
  [0.926, [0.013, 0.299, 0.469]],
  [0.928, [0.012, 0.295, 0.462]],
  [0.93, [0.012, 0.295, 0.462]],
  [0.932, [0.012, 0.291, 0.456]],
  [0.933, [0.012, 0.291, 0.456]],
  [0.935, [0.012, 0.287, 0.449]],
  [0.937, [0.012, 0.287, 0.449]],
  [0.939, [0.012, 0.282, 0.443]],
  [0.941, [0.012, 0.282, 0.443]],
  [0.943, [0.011, 0.278, 0.436]],
  [0.945, [0.011, 0.278, 0.436]],
  [0.947, [0.011, 0.274, 0.43]],
  [0.949, [0.011, 0.274, 0.43]],
  [0.951, [0.011, 0.27, 0.423]],
  [0.953, [0.011, 0.27, 0.423]],
  [0.955, [0.011, 0.266, 0.417]],
  [0.957, [0.011, 0.266, 0.417]],
  [0.959, [0.01, 0.261, 0.41]],
  [0.961, [0.01, 0.261, 0.41]],
  [0.963, [0.01, 0.257, 0.404]],
  [0.965, [0.01, 0.257, 0.404]],
  [0.967, [0.01, 0.253, 0.397]],
  [0.969, [0.01, 0.253, 0.397]],
  [0.971, [0.01, 0.249, 0.391]],
  [0.973, [0.01, 0.249, 0.391]],
  [0.975, [9e-3, 0.245, 0.384]],
  [0.977, [9e-3, 0.245, 0.384]],
  [0.978, [9e-3, 0.241, 0.378]],
  [0.98, [9e-3, 0.241, 0.378]],
  [0.982, [9e-3, 0.236, 0.371]],
  [0.984, [9e-3, 0.236, 0.371]],
  [0.986, [9e-3, 0.232, 0.365]],
  [0.988, [9e-3, 0.232, 0.365]],
  [0.99, [8e-3, 0.228, 0.358]],
  [0.992, [8e-3, 0.228, 0.358]],
  [0.994, [8e-3, 0.224, 0.352]],
  [0.996, [8e-3, 0.224, 0.352]],
  [0.998, [8e-3, 0.22, 0.345]],
  [1, [8e-3, 0.22, 0.345]]
], fp = [
  [0, [1, 0.969, 0.984]],
  [2e-3, [1, 0.969, 0.984]],
  [4e-3, [0.998, 0.966, 0.983]],
  [6e-3, [0.998, 0.966, 0.983]],
  [8e-3, [0.995, 0.963, 0.982]],
  [0.01, [0.995, 0.963, 0.982]],
  [0.012, [0.993, 0.961, 0.98]],
  [0.014, [0.993, 0.961, 0.98]],
  [0.016, [0.991, 0.958, 0.979]],
  [0.018, [0.991, 0.958, 0.979]],
  [0.02, [0.988, 0.956, 0.978]],
  [0.022, [0.988, 0.956, 0.978]],
  [0.023, [0.986, 0.953, 0.976]],
  [0.025, [0.986, 0.953, 0.976]],
  [0.027, [0.984, 0.951, 0.975]],
  [0.029, [0.984, 0.951, 0.975]],
  [0.031, [0.981, 0.948, 0.973]],
  [0.033, [0.981, 0.948, 0.973]],
  [0.035, [0.979, 0.945, 0.972]],
  [0.037, [0.979, 0.945, 0.972]],
  [0.039, [0.977, 0.943, 0.971]],
  [0.041, [0.977, 0.943, 0.971]],
  [0.043, [0.974, 0.94, 0.969]],
  [0.045, [0.974, 0.94, 0.969]],
  [0.047, [0.972, 0.938, 0.968]],
  [0.049, [0.972, 0.938, 0.968]],
  [0.051, [0.97, 0.935, 0.967]],
  [0.053, [0.97, 0.935, 0.967]],
  [0.055, [0.967, 0.932, 0.965]],
  [0.057, [0.967, 0.932, 0.965]],
  [0.059, [0.965, 0.93, 0.964]],
  [0.061, [0.965, 0.93, 0.964]],
  [0.063, [0.963, 0.927, 0.963]],
  [0.065, [0.963, 0.927, 0.963]],
  [0.067, [0.96, 0.925, 0.961]],
  [0.068, [0.96, 0.925, 0.961]],
  [0.07, [0.958, 0.922, 0.96]],
  [0.072, [0.958, 0.922, 0.96]],
  [0.074, [0.956, 0.92, 0.959]],
  [0.076, [0.956, 0.92, 0.959]],
  [0.078, [0.953, 0.917, 0.957]],
  [0.08, [0.953, 0.917, 0.957]],
  [0.082, [0.951, 0.914, 0.956]],
  [0.084, [0.951, 0.914, 0.956]],
  [0.086, [0.949, 0.912, 0.955]],
  [0.088, [0.949, 0.912, 0.955]],
  [0.09, [0.946, 0.909, 0.953]],
  [0.092, [0.946, 0.909, 0.953]],
  [0.094, [0.944, 0.907, 0.952]],
  [0.096, [0.944, 0.907, 0.952]],
  [0.098, [0.942, 0.904, 0.95]],
  [0.1, [0.942, 0.904, 0.95]],
  [0.102, [0.939, 0.901, 0.949]],
  [0.104, [0.939, 0.901, 0.949]],
  [0.106, [0.937, 0.899, 0.948]],
  [0.108, [0.937, 0.899, 0.948]],
  [0.11, [0.935, 0.896, 0.946]],
  [0.112, [0.935, 0.896, 0.946]],
  [0.114, [0.932, 0.894, 0.945]],
  [0.115, [0.932, 0.894, 0.945]],
  [0.117, [0.93, 0.891, 0.944]],
  [0.119, [0.93, 0.891, 0.944]],
  [0.121, [0.928, 0.889, 0.942]],
  [0.123, [0.928, 0.889, 0.942]],
  [0.125, [0.925, 0.886, 0.941]],
  [0.127, [0.925, 0.886, 0.941]],
  [0.129, [0.922, 0.884, 0.94]],
  [0.131, [0.922, 0.884, 0.94]],
  [0.133, [0.918, 0.882, 0.939]],
  [0.135, [0.918, 0.882, 0.939]],
  [0.137, [0.915, 0.88, 0.937]],
  [0.139, [0.915, 0.88, 0.937]],
  [0.141, [0.911, 0.878, 0.936]],
  [0.143, [0.911, 0.878, 0.936]],
  [0.145, [0.908, 0.876, 0.935]],
  [0.147, [0.908, 0.876, 0.935]],
  [0.149, [0.904, 0.873, 0.934]],
  [0.151, [0.904, 0.873, 0.934]],
  [0.153, [0.901, 0.871, 0.932]],
  [0.155, [0.901, 0.871, 0.932]],
  [0.157, [0.898, 0.869, 0.931]],
  [0.159, [0.898, 0.869, 0.931]],
  [0.16, [0.894, 0.867, 0.93]],
  [0.162, [0.894, 0.867, 0.93]],
  [0.164, [0.891, 0.865, 0.929]],
  [0.166, [0.891, 0.865, 0.929]],
  [0.168, [0.887, 0.863, 0.927]],
  [0.17, [0.887, 0.863, 0.927]],
  [0.172, [0.884, 0.861, 0.926]],
  [0.174, [0.884, 0.861, 0.926]],
  [0.176, [0.88, 0.859, 0.925]],
  [0.178, [0.88, 0.859, 0.925]],
  [0.18, [0.877, 0.857, 0.924]],
  [0.182, [0.877, 0.857, 0.924]],
  [0.184, [0.873, 0.855, 0.923]],
  [0.186, [0.873, 0.855, 0.923]],
  [0.188, [0.87, 0.853, 0.921]],
  [0.19, [0.87, 0.853, 0.921]],
  [0.192, [0.866, 0.85, 0.92]],
  [0.194, [0.866, 0.85, 0.92]],
  [0.196, [0.863, 0.848, 0.919]],
  [0.198, [0.863, 0.848, 0.919]],
  [0.2, [0.86, 0.846, 0.918]],
  [0.202, [0.86, 0.846, 0.918]],
  [0.204, [0.856, 0.844, 0.916]],
  [0.205, [0.856, 0.844, 0.916]],
  [0.207, [0.853, 0.842, 0.915]],
  [0.209, [0.853, 0.842, 0.915]],
  [0.211, [0.849, 0.84, 0.914]],
  [0.213, [0.849, 0.84, 0.914]],
  [0.215, [0.846, 0.838, 0.913]],
  [0.217, [0.846, 0.838, 0.913]],
  [0.219, [0.842, 0.836, 0.911]],
  [0.221, [0.842, 0.836, 0.911]],
  [0.223, [0.839, 0.834, 0.91]],
  [0.225, [0.839, 0.834, 0.91]],
  [0.227, [0.835, 0.832, 0.909]],
  [0.229, [0.835, 0.832, 0.909]],
  [0.231, [0.832, 0.83, 0.908]],
  [0.233, [0.832, 0.83, 0.908]],
  [0.235, [0.829, 0.827, 0.907]],
  [0.237, [0.829, 0.827, 0.907]],
  [0.239, [0.825, 0.825, 0.905]],
  [0.241, [0.825, 0.825, 0.905]],
  [0.243, [0.822, 0.823, 0.904]],
  [0.245, [0.822, 0.823, 0.904]],
  [0.247, [0.818, 0.821, 0.903]],
  [0.249, [0.818, 0.821, 0.903]],
  [0.25, [0.814, 0.819, 0.902]],
  [0.252, [0.814, 0.819, 0.902]],
  [0.254, [0.809, 0.817, 0.9]],
  [0.256, [0.809, 0.817, 0.9]],
  [0.258, [0.804, 0.814, 0.899]],
  [0.26, [0.804, 0.814, 0.899]],
  [0.262, [0.799, 0.812, 0.898]],
  [0.264, [0.799, 0.812, 0.898]],
  [0.266, [0.794, 0.809, 0.896]],
  [0.268, [0.794, 0.809, 0.896]],
  [0.27, [0.789, 0.807, 0.895]],
  [0.272, [0.789, 0.807, 0.895]],
  [0.274, [0.783, 0.804, 0.894]],
  [0.276, [0.783, 0.804, 0.894]],
  [0.278, [0.778, 0.802, 0.892]],
  [0.28, [0.778, 0.802, 0.892]],
  [0.282, [0.773, 0.799, 0.891]],
  [0.284, [0.773, 0.799, 0.891]],
  [0.286, [0.768, 0.797, 0.889]],
  [0.288, [0.768, 0.797, 0.889]],
  [0.29, [0.763, 0.794, 0.888]],
  [0.292, [0.763, 0.794, 0.888]],
  [0.294, [0.758, 0.792, 0.887]],
  [0.295, [0.758, 0.792, 0.887]],
  [0.297, [0.752, 0.789, 0.885]],
  [0.299, [0.752, 0.789, 0.885]],
  [0.301, [0.747, 0.787, 0.884]],
  [0.303, [0.747, 0.787, 0.884]],
  [0.305, [0.742, 0.785, 0.883]],
  [0.307, [0.742, 0.785, 0.883]],
  [0.309, [0.737, 0.782, 0.881]],
  [0.311, [0.737, 0.782, 0.881]],
  [0.313, [0.732, 0.78, 0.88]],
  [0.315, [0.732, 0.78, 0.88]],
  [0.317, [0.727, 0.777, 0.879]],
  [0.319, [0.727, 0.777, 0.879]],
  [0.321, [0.721, 0.775, 0.877]],
  [0.323, [0.721, 0.775, 0.877]],
  [0.325, [0.716, 0.772, 0.876]],
  [0.327, [0.716, 0.772, 0.876]],
  [0.329, [0.711, 0.77, 0.875]],
  [0.331, [0.711, 0.77, 0.875]],
  [0.333, [0.706, 0.767, 0.873]],
  [0.335, [0.706, 0.767, 0.873]],
  [0.337, [0.701, 0.765, 0.872]],
  [0.339, [0.701, 0.765, 0.872]],
  [0.341, [0.696, 0.762, 0.87]],
  [0.342, [0.696, 0.762, 0.87]],
  [0.344, [0.69, 0.76, 0.869]],
  [0.346, [0.69, 0.76, 0.869]],
  [0.348, [0.685, 0.757, 0.868]],
  [0.35, [0.685, 0.757, 0.868]],
  [0.352, [0.68, 0.755, 0.866]],
  [0.354, [0.68, 0.755, 0.866]],
  [0.356, [0.675, 0.753, 0.865]],
  [0.358, [0.675, 0.753, 0.865]],
  [0.36, [0.67, 0.75, 0.864]],
  [0.362, [0.67, 0.75, 0.864]],
  [0.364, [0.665, 0.748, 0.862]],
  [0.366, [0.665, 0.748, 0.862]],
  [0.368, [0.659, 0.745, 0.861]],
  [0.37, [0.659, 0.745, 0.861]],
  [0.372, [0.654, 0.743, 0.86]],
  [0.374, [0.654, 0.743, 0.86]],
  [0.376, [0.648, 0.74, 0.858]],
  [0.378, [0.648, 0.74, 0.858]],
  [0.38, [0.64, 0.738, 0.857]],
  [0.382, [0.64, 0.738, 0.857]],
  [0.384, [0.633, 0.735, 0.855]],
  [0.386, [0.633, 0.735, 0.855]],
  [0.387, [0.625, 0.733, 0.854]],
  [0.389, [0.625, 0.733, 0.854]],
  [0.391, [0.617, 0.73, 0.852]],
  [0.393, [0.617, 0.73, 0.852]],
  [0.395, [0.609, 0.728, 0.851]],
  [0.397, [0.609, 0.728, 0.851]],
  [0.399, [0.602, 0.725, 0.849]],
  [0.401, [0.602, 0.725, 0.849]],
  [0.403, [0.594, 0.723, 0.848]],
  [0.405, [0.594, 0.723, 0.848]],
  [0.407, [0.586, 0.721, 0.846]],
  [0.409, [0.586, 0.721, 0.846]],
  [0.411, [0.578, 0.718, 0.845]],
  [0.413, [0.578, 0.718, 0.845]],
  [0.415, [0.571, 0.716, 0.844]],
  [0.417, [0.571, 0.716, 0.844]],
  [0.419, [0.563, 0.713, 0.842]],
  [0.421, [0.563, 0.713, 0.842]],
  [0.423, [0.555, 0.711, 0.841]],
  [0.425, [0.555, 0.711, 0.841]],
  [0.427, [0.547, 0.708, 0.839]],
  [0.429, [0.547, 0.708, 0.839]],
  [0.431, [0.54, 0.706, 0.838]],
  [0.432, [0.54, 0.706, 0.838]],
  [0.434, [0.532, 0.703, 0.836]],
  [0.436, [0.532, 0.703, 0.836]],
  [0.438, [0.524, 0.701, 0.835]],
  [0.44, [0.524, 0.701, 0.835]],
  [0.442, [0.516, 0.698, 0.833]],
  [0.444, [0.516, 0.698, 0.833]],
  [0.446, [0.509, 0.696, 0.832]],
  [0.448, [0.509, 0.696, 0.832]],
  [0.45, [0.501, 0.694, 0.83]],
  [0.452, [0.501, 0.694, 0.83]],
  [0.454, [0.493, 0.691, 0.829]],
  [0.456, [0.493, 0.691, 0.829]],
  [0.458, [0.485, 0.689, 0.827]],
  [0.46, [0.485, 0.689, 0.827]],
  [0.462, [0.478, 0.686, 0.826]],
  [0.464, [0.478, 0.686, 0.826]],
  [0.466, [0.47, 0.684, 0.824]],
  [0.468, [0.47, 0.684, 0.824]],
  [0.47, [0.462, 0.681, 0.823]],
  [0.472, [0.462, 0.681, 0.823]],
  [0.474, [0.454, 0.679, 0.821]],
  [0.476, [0.454, 0.679, 0.821]],
  [0.477, [0.447, 0.676, 0.82]],
  [0.479, [0.447, 0.676, 0.82]],
  [0.481, [0.439, 0.674, 0.818]],
  [0.483, [0.439, 0.674, 0.818]],
  [0.485, [0.431, 0.671, 0.817]],
  [0.487, [0.431, 0.671, 0.817]],
  [0.489, [0.423, 0.669, 0.815]],
  [0.491, [0.423, 0.669, 0.815]],
  [0.493, [0.416, 0.666, 0.814]],
  [0.495, [0.416, 0.666, 0.814]],
  [0.497, [0.408, 0.664, 0.813]],
  [0.499, [0.408, 0.664, 0.813]],
  [0.501, [0.401, 0.661, 0.811]],
  [0.503, [0.401, 0.661, 0.811]],
  [0.505, [0.395, 0.658, 0.809]],
  [0.507, [0.395, 0.658, 0.809]],
  [0.509, [0.389, 0.655, 0.807]],
  [0.511, [0.389, 0.655, 0.807]],
  [0.513, [0.383, 0.652, 0.805]],
  [0.515, [0.383, 0.652, 0.805]],
  [0.517, [0.377, 0.649, 0.803]],
  [0.519, [0.377, 0.649, 0.803]],
  [0.521, [0.371, 0.646, 0.802]],
  [0.523, [0.371, 0.646, 0.802]],
  [0.524, [0.365, 0.643, 0.8]],
  [0.526, [0.365, 0.643, 0.8]],
  [0.528, [0.359, 0.64, 0.798]],
  [0.53, [0.359, 0.64, 0.798]],
  [0.532, [0.353, 0.637, 0.796]],
  [0.534, [0.353, 0.637, 0.796]],
  [0.536, [0.347, 0.634, 0.794]],
  [0.538, [0.347, 0.634, 0.794]],
  [0.54, [0.341, 0.63, 0.792]],
  [0.542, [0.341, 0.63, 0.792]],
  [0.544, [0.335, 0.627, 0.791]],
  [0.546, [0.335, 0.627, 0.791]],
  [0.548, [0.329, 0.624, 0.789]],
  [0.55, [0.329, 0.624, 0.789]],
  [0.552, [0.323, 0.621, 0.787]],
  [0.554, [0.323, 0.621, 0.787]],
  [0.556, [0.317, 0.618, 0.785]],
  [0.558, [0.317, 0.618, 0.785]],
  [0.56, [0.31, 0.615, 0.783]],
  [0.562, [0.31, 0.615, 0.783]],
  [0.564, [0.304, 0.612, 0.781]],
  [0.566, [0.304, 0.612, 0.781]],
  [0.568, [0.298, 0.609, 0.779]],
  [0.569, [0.298, 0.609, 0.779]],
  [0.571, [0.292, 0.606, 0.778]],
  [0.573, [0.292, 0.606, 0.778]],
  [0.575, [0.286, 0.603, 0.776]],
  [0.577, [0.286, 0.603, 0.776]],
  [0.579, [0.28, 0.6, 0.774]],
  [0.581, [0.28, 0.6, 0.774]],
  [0.583, [0.274, 0.597, 0.772]],
  [0.585, [0.274, 0.597, 0.772]],
  [0.587, [0.268, 0.594, 0.77]],
  [0.589, [0.268, 0.594, 0.77]],
  [0.591, [0.262, 0.59, 0.768]],
  [0.593, [0.262, 0.59, 0.768]],
  [0.595, [0.256, 0.587, 0.767]],
  [0.597, [0.256, 0.587, 0.767]],
  [0.599, [0.25, 0.584, 0.765]],
  [0.601, [0.25, 0.584, 0.765]],
  [0.603, [0.244, 0.581, 0.763]],
  [0.605, [0.244, 0.581, 0.763]],
  [0.607, [0.238, 0.578, 0.761]],
  [0.609, [0.238, 0.578, 0.761]],
  [0.611, [0.232, 0.575, 0.759]],
  [0.613, [0.232, 0.575, 0.759]],
  [0.614, [0.226, 0.572, 0.757]],
  [0.616, [0.226, 0.572, 0.757]],
  [0.618, [0.22, 0.569, 0.755]],
  [0.62, [0.22, 0.569, 0.755]],
  [0.622, [0.214, 0.566, 0.754]],
  [0.624, [0.214, 0.566, 0.754]],
  [0.626, [0.208, 0.564, 0.749]],
  [0.628, [0.208, 0.564, 0.749]],
  [0.63, [0.201, 0.562, 0.742]],
  [0.632, [0.201, 0.562, 0.742]],
  [0.634, [0.195, 0.56, 0.736]],
  [0.636, [0.195, 0.56, 0.736]],
  [0.638, [0.189, 0.558, 0.729]],
  [0.64, [0.189, 0.558, 0.729]],
  [0.642, [0.182, 0.556, 0.722]],
  [0.644, [0.182, 0.556, 0.722]],
  [0.646, [0.176, 0.554, 0.716]],
  [0.648, [0.176, 0.554, 0.716]],
  [0.65, [0.169, 0.552, 0.709]],
  [0.652, [0.169, 0.552, 0.709]],
  [0.654, [0.163, 0.551, 0.702]],
  [0.656, [0.163, 0.551, 0.702]],
  [0.658, [0.157, 0.549, 0.696]],
  [0.659, [0.157, 0.549, 0.696]],
  [0.661, [0.15, 0.547, 0.689]],
  [0.663, [0.15, 0.547, 0.689]],
  [0.665, [0.144, 0.545, 0.682]],
  [0.667, [0.144, 0.545, 0.682]],
  [0.669, [0.137, 0.543, 0.676]],
  [0.671, [0.137, 0.543, 0.676]],
  [0.673, [0.131, 0.541, 0.669]],
  [0.675, [0.131, 0.541, 0.669]],
  [0.677, [0.125, 0.54, 0.662]],
  [0.679, [0.125, 0.54, 0.662]],
  [0.681, [0.118, 0.538, 0.656]],
  [0.683, [0.118, 0.538, 0.656]],
  [0.685, [0.112, 0.536, 0.649]],
  [0.687, [0.112, 0.536, 0.649]],
  [0.689, [0.105, 0.534, 0.642]],
  [0.691, [0.105, 0.534, 0.642]],
  [0.693, [0.099, 0.532, 0.636]],
  [0.695, [0.099, 0.532, 0.636]],
  [0.697, [0.093, 0.53, 0.629]],
  [0.699, [0.093, 0.53, 0.629]],
  [0.701, [0.086, 0.528, 0.623]],
  [0.703, [0.086, 0.528, 0.623]],
  [0.705, [0.08, 0.527, 0.616]],
  [0.706, [0.08, 0.527, 0.616]],
  [0.708, [0.073, 0.525, 0.609]],
  [0.71, [0.073, 0.525, 0.609]],
  [0.712, [0.067, 0.523, 0.603]],
  [0.714, [0.067, 0.523, 0.603]],
  [0.716, [0.061, 0.521, 0.596]],
  [0.718, [0.061, 0.521, 0.596]],
  [0.72, [0.054, 0.519, 0.589]],
  [0.722, [0.054, 0.519, 0.589]],
  [0.724, [0.048, 0.517, 0.583]],
  [0.726, [0.048, 0.517, 0.583]],
  [0.728, [0.041, 0.516, 0.576]],
  [0.73, [0.041, 0.516, 0.576]],
  [0.732, [0.035, 0.514, 0.569]],
  [0.734, [0.035, 0.514, 0.569]],
  [0.736, [0.029, 0.512, 0.563]],
  [0.738, [0.029, 0.512, 0.563]],
  [0.74, [0.022, 0.51, 0.556]],
  [0.742, [0.022, 0.51, 0.556]],
  [0.744, [0.016, 0.508, 0.549]],
  [0.746, [0.016, 0.508, 0.549]],
  [0.748, [9e-3, 0.506, 0.543]],
  [0.75, [9e-3, 0.506, 0.543]],
  [0.751, [8e-3, 0.504, 0.537]],
  [0.753, [8e-3, 0.504, 0.537]],
  [0.755, [8e-3, 0.501, 0.531]],
  [0.757, [8e-3, 0.501, 0.531]],
  [0.759, [8e-3, 0.499, 0.525]],
  [0.761, [8e-3, 0.499, 0.525]],
  [0.763, [7e-3, 0.496, 0.519]],
  [0.765, [7e-3, 0.496, 0.519]],
  [0.767, [7e-3, 0.494, 0.513]],
  [0.769, [7e-3, 0.494, 0.513]],
  [0.771, [7e-3, 0.491, 0.507]],
  [0.773, [7e-3, 0.491, 0.507]],
  [0.775, [7e-3, 0.488, 0.5]],
  [0.777, [7e-3, 0.488, 0.5]],
  [0.779, [7e-3, 0.486, 0.494]],
  [0.781, [7e-3, 0.486, 0.494]],
  [0.783, [7e-3, 0.483, 0.488]],
  [0.785, [7e-3, 0.483, 0.488]],
  [0.787, [7e-3, 0.481, 0.482]],
  [0.789, [7e-3, 0.481, 0.482]],
  [0.791, [7e-3, 0.478, 0.476]],
  [0.793, [7e-3, 0.478, 0.476]],
  [0.795, [6e-3, 0.476, 0.47]],
  [0.796, [6e-3, 0.476, 0.47]],
  [0.798, [6e-3, 0.473, 0.464]],
  [0.8, [6e-3, 0.473, 0.464]],
  [0.802, [6e-3, 0.47, 0.458]],
  [0.804, [6e-3, 0.47, 0.458]],
  [0.806, [6e-3, 0.468, 0.452]],
  [0.808, [6e-3, 0.468, 0.452]],
  [0.81, [6e-3, 0.465, 0.446]],
  [0.812, [6e-3, 0.465, 0.446]],
  [0.814, [6e-3, 0.463, 0.44]],
  [0.816, [6e-3, 0.463, 0.44]],
  [0.818, [6e-3, 0.46, 0.434]],
  [0.82, [6e-3, 0.46, 0.434]],
  [0.822, [6e-3, 0.457, 0.428]],
  [0.824, [6e-3, 0.457, 0.428]],
  [0.826, [5e-3, 0.455, 0.422]],
  [0.828, [5e-3, 0.455, 0.422]],
  [0.83, [5e-3, 0.452, 0.416]],
  [0.832, [5e-3, 0.452, 0.416]],
  [0.834, [5e-3, 0.45, 0.41]],
  [0.836, [5e-3, 0.45, 0.41]],
  [0.838, [5e-3, 0.447, 0.404]],
  [0.84, [5e-3, 0.447, 0.404]],
  [0.841, [5e-3, 0.445, 0.398]],
  [0.843, [5e-3, 0.445, 0.398]],
  [0.845, [5e-3, 0.442, 0.392]],
  [0.847, [5e-3, 0.442, 0.392]],
  [0.849, [5e-3, 0.439, 0.386]],
  [0.851, [5e-3, 0.439, 0.386]],
  [0.853, [5e-3, 0.437, 0.38]],
  [0.855, [5e-3, 0.437, 0.38]],
  [0.857, [4e-3, 0.434, 0.374]],
  [0.859, [4e-3, 0.434, 0.374]],
  [0.861, [4e-3, 0.432, 0.368]],
  [0.863, [4e-3, 0.432, 0.368]],
  [0.865, [4e-3, 0.429, 0.362]],
  [0.867, [4e-3, 0.429, 0.362]],
  [0.869, [4e-3, 0.426, 0.356]],
  [0.871, [4e-3, 0.426, 0.356]],
  [0.873, [4e-3, 0.424, 0.35]],
  [0.875, [4e-3, 0.424, 0.35]],
  [0.877, [4e-3, 0.419, 0.345]],
  [0.879, [4e-3, 0.419, 0.345]],
  [0.881, [4e-3, 0.415, 0.341]],
  [0.883, [4e-3, 0.415, 0.341]],
  [0.885, [4e-3, 0.41, 0.337]],
  [0.886, [4e-3, 0.41, 0.337]],
  [0.888, [4e-3, 0.405, 0.332]],
  [0.89, [4e-3, 0.405, 0.332]],
  [0.892, [4e-3, 0.401, 0.328]],
  [0.894, [4e-3, 0.401, 0.328]],
  [0.896, [4e-3, 0.396, 0.324]],
  [0.898, [4e-3, 0.396, 0.324]],
  [0.9, [4e-3, 0.391, 0.319]],
  [0.902, [4e-3, 0.391, 0.319]],
  [0.904, [4e-3, 0.387, 0.315]],
  [0.906, [4e-3, 0.387, 0.315]],
  [0.908, [4e-3, 0.382, 0.311]],
  [0.91, [4e-3, 0.382, 0.311]],
  [0.912, [4e-3, 0.377, 0.306]],
  [0.914, [4e-3, 0.377, 0.306]],
  [0.916, [4e-3, 0.373, 0.302]],
  [0.918, [4e-3, 0.373, 0.302]],
  [0.92, [4e-3, 0.368, 0.298]],
  [0.922, [4e-3, 0.368, 0.298]],
  [0.924, [4e-3, 0.363, 0.294]],
  [0.926, [4e-3, 0.363, 0.294]],
  [0.928, [4e-3, 0.359, 0.289]],
  [0.93, [4e-3, 0.359, 0.289]],
  [0.932, [4e-3, 0.354, 0.285]],
  [0.933, [4e-3, 0.354, 0.285]],
  [0.935, [4e-3, 0.349, 0.281]],
  [0.937, [4e-3, 0.349, 0.281]],
  [0.939, [4e-3, 0.345, 0.276]],
  [0.941, [4e-3, 0.345, 0.276]],
  [0.943, [4e-3, 0.34, 0.272]],
  [0.945, [4e-3, 0.34, 0.272]],
  [0.947, [4e-3, 0.335, 0.268]],
  [0.949, [4e-3, 0.335, 0.268]],
  [0.951, [4e-3, 0.331, 0.263]],
  [0.953, [4e-3, 0.331, 0.263]],
  [0.955, [4e-3, 0.326, 0.259]],
  [0.957, [4e-3, 0.326, 0.259]],
  [0.959, [4e-3, 0.321, 0.255]],
  [0.961, [4e-3, 0.321, 0.255]],
  [0.963, [4e-3, 0.317, 0.251]],
  [0.965, [4e-3, 0.317, 0.251]],
  [0.967, [4e-3, 0.312, 0.246]],
  [0.969, [4e-3, 0.312, 0.246]],
  [0.971, [4e-3, 0.307, 0.242]],
  [0.973, [4e-3, 0.307, 0.242]],
  [0.975, [4e-3, 0.303, 0.238]],
  [0.977, [4e-3, 0.303, 0.238]],
  [0.978, [4e-3, 0.298, 0.233]],
  [0.98, [4e-3, 0.298, 0.233]],
  [0.982, [4e-3, 0.293, 0.229]],
  [0.984, [4e-3, 0.293, 0.229]],
  [0.986, [4e-3, 0.289, 0.225]],
  [0.988, [4e-3, 0.289, 0.225]],
  [0.99, [4e-3, 0.284, 0.22]],
  [0.992, [4e-3, 0.284, 0.22]],
  [0.994, [4e-3, 0.279, 0.216]],
  [0.996, [4e-3, 0.279, 0.216]],
  [0.998, [4e-3, 0.275, 0.212]],
  [1, [4e-3, 0.275, 0.212]]
], pp = [
  [0, [0.969, 0.957, 0.976]],
  [2e-3, [0.969, 0.957, 0.976]],
  [4e-3, [0.967, 0.955, 0.975]],
  [6e-3, [0.967, 0.955, 0.975]],
  [8e-3, [0.965, 0.952, 0.974]],
  [0.01, [0.965, 0.952, 0.974]],
  [0.012, [0.963, 0.95, 0.973]],
  [0.014, [0.963, 0.95, 0.973]],
  [0.016, [0.961, 0.948, 0.972]],
  [0.018, [0.961, 0.948, 0.972]],
  [0.02, [0.959, 0.945, 0.97]],
  [0.022, [0.959, 0.945, 0.97]],
  [0.023, [0.957, 0.943, 0.969]],
  [0.025, [0.957, 0.943, 0.969]],
  [0.027, [0.955, 0.94, 0.968]],
  [0.029, [0.955, 0.94, 0.968]],
  [0.031, [0.953, 0.938, 0.967]],
  [0.033, [0.953, 0.938, 0.967]],
  [0.035, [0.951, 0.936, 0.965]],
  [0.037, [0.951, 0.936, 0.965]],
  [0.039, [0.949, 0.933, 0.964]],
  [0.041, [0.949, 0.933, 0.964]],
  [0.043, [0.947, 0.931, 0.963]],
  [0.045, [0.947, 0.931, 0.963]],
  [0.047, [0.945, 0.929, 0.962]],
  [0.049, [0.945, 0.929, 0.962]],
  [0.051, [0.943, 0.926, 0.96]],
  [0.053, [0.943, 0.926, 0.96]],
  [0.055, [0.941, 0.924, 0.959]],
  [0.057, [0.941, 0.924, 0.959]],
  [0.059, [0.939, 0.922, 0.958]],
  [0.061, [0.939, 0.922, 0.958]],
  [0.063, [0.937, 0.919, 0.957]],
  [0.065, [0.937, 0.919, 0.957]],
  [0.067, [0.935, 0.917, 0.956]],
  [0.068, [0.935, 0.917, 0.956]],
  [0.07, [0.933, 0.915, 0.954]],
  [0.072, [0.933, 0.915, 0.954]],
  [0.074, [0.931, 0.912, 0.953]],
  [0.076, [0.931, 0.912, 0.953]],
  [0.078, [0.929, 0.91, 0.952]],
  [0.08, [0.929, 0.91, 0.952]],
  [0.082, [0.927, 0.908, 0.951]],
  [0.084, [0.927, 0.908, 0.951]],
  [0.086, [0.925, 0.905, 0.949]],
  [0.088, [0.925, 0.905, 0.949]],
  [0.09, [0.923, 0.903, 0.948]],
  [0.092, [0.923, 0.903, 0.948]],
  [0.094, [0.921, 0.901, 0.947]],
  [0.096, [0.921, 0.901, 0.947]],
  [0.098, [0.919, 0.898, 0.946]],
  [0.1, [0.919, 0.898, 0.946]],
  [0.102, [0.917, 0.896, 0.944]],
  [0.104, [0.917, 0.896, 0.944]],
  [0.106, [0.915, 0.894, 0.943]],
  [0.108, [0.915, 0.894, 0.943]],
  [0.11, [0.914, 0.891, 0.942]],
  [0.112, [0.914, 0.891, 0.942]],
  [0.114, [0.912, 0.889, 0.941]],
  [0.115, [0.912, 0.889, 0.941]],
  [0.117, [0.91, 0.887, 0.94]],
  [0.119, [0.91, 0.887, 0.94]],
  [0.121, [0.908, 0.884, 0.938]],
  [0.123, [0.908, 0.884, 0.938]],
  [0.125, [0.906, 0.882, 0.937]],
  [0.127, [0.906, 0.882, 0.937]],
  [0.129, [0.903, 0.877, 0.934]],
  [0.131, [0.903, 0.877, 0.934]],
  [0.133, [0.901, 0.872, 0.932]],
  [0.135, [0.901, 0.872, 0.932]],
  [0.137, [0.899, 0.867, 0.929]],
  [0.139, [0.899, 0.867, 0.929]],
  [0.141, [0.896, 0.862, 0.927]],
  [0.143, [0.896, 0.862, 0.927]],
  [0.145, [0.894, 0.857, 0.924]],
  [0.147, [0.894, 0.857, 0.924]],
  [0.149, [0.892, 0.852, 0.921]],
  [0.151, [0.892, 0.852, 0.921]],
  [0.153, [0.889, 0.847, 0.919]],
  [0.155, [0.889, 0.847, 0.919]],
  [0.157, [0.887, 0.842, 0.916]],
  [0.159, [0.887, 0.842, 0.916]],
  [0.16, [0.885, 0.837, 0.914]],
  [0.162, [0.885, 0.837, 0.914]],
  [0.164, [0.882, 0.833, 0.911]],
  [0.166, [0.882, 0.833, 0.911]],
  [0.168, [0.88, 0.828, 0.909]],
  [0.17, [0.88, 0.828, 0.909]],
  [0.172, [0.878, 0.823, 0.906]],
  [0.174, [0.878, 0.823, 0.906]],
  [0.176, [0.875, 0.818, 0.903]],
  [0.178, [0.875, 0.818, 0.903]],
  [0.18, [0.873, 0.813, 0.901]],
  [0.182, [0.873, 0.813, 0.901]],
  [0.184, [0.871, 0.808, 0.898]],
  [0.186, [0.871, 0.808, 0.898]],
  [0.188, [0.868, 0.803, 0.896]],
  [0.19, [0.868, 0.803, 0.896]],
  [0.192, [0.866, 0.798, 0.893]],
  [0.194, [0.866, 0.798, 0.893]],
  [0.196, [0.864, 0.793, 0.89]],
  [0.198, [0.864, 0.793, 0.89]],
  [0.2, [0.861, 0.788, 0.888]],
  [0.202, [0.861, 0.788, 0.888]],
  [0.204, [0.859, 0.783, 0.885]],
  [0.205, [0.859, 0.783, 0.885]],
  [0.207, [0.857, 0.778, 0.883]],
  [0.209, [0.857, 0.778, 0.883]],
  [0.211, [0.854, 0.773, 0.88]],
  [0.213, [0.854, 0.773, 0.88]],
  [0.215, [0.852, 0.769, 0.878]],
  [0.217, [0.852, 0.769, 0.878]],
  [0.219, [0.849, 0.764, 0.875]],
  [0.221, [0.849, 0.764, 0.875]],
  [0.223, [0.847, 0.759, 0.872]],
  [0.225, [0.847, 0.759, 0.872]],
  [0.227, [0.845, 0.754, 0.87]],
  [0.229, [0.845, 0.754, 0.87]],
  [0.231, [0.842, 0.749, 0.867]],
  [0.233, [0.842, 0.749, 0.867]],
  [0.235, [0.84, 0.744, 0.865]],
  [0.237, [0.84, 0.744, 0.865]],
  [0.239, [0.838, 0.739, 0.862]],
  [0.241, [0.838, 0.739, 0.862]],
  [0.243, [0.835, 0.734, 0.859]],
  [0.245, [0.835, 0.734, 0.859]],
  [0.247, [0.833, 0.729, 0.857]],
  [0.249, [0.833, 0.729, 0.857]],
  [0.25, [0.831, 0.724, 0.854]],
  [0.252, [0.831, 0.724, 0.854]],
  [0.254, [0.83, 0.72, 0.852]],
  [0.256, [0.83, 0.72, 0.852]],
  [0.258, [0.828, 0.715, 0.85]],
  [0.26, [0.828, 0.715, 0.85]],
  [0.262, [0.827, 0.711, 0.847]],
  [0.264, [0.827, 0.711, 0.847]],
  [0.266, [0.826, 0.706, 0.845]],
  [0.268, [0.826, 0.706, 0.845]],
  [0.27, [0.824, 0.702, 0.843]],
  [0.272, [0.824, 0.702, 0.843]],
  [0.274, [0.823, 0.697, 0.84]],
  [0.276, [0.823, 0.697, 0.84]],
  [0.278, [0.822, 0.692, 0.838]],
  [0.28, [0.822, 0.692, 0.838]],
  [0.282, [0.82, 0.688, 0.836]],
  [0.284, [0.82, 0.688, 0.836]],
  [0.286, [0.819, 0.683, 0.833]],
  [0.288, [0.819, 0.683, 0.833]],
  [0.29, [0.818, 0.679, 0.831]],
  [0.292, [0.818, 0.679, 0.831]],
  [0.294, [0.816, 0.674, 0.829]],
  [0.295, [0.816, 0.674, 0.829]],
  [0.297, [0.815, 0.67, 0.826]],
  [0.299, [0.815, 0.67, 0.826]],
  [0.301, [0.813, 0.665, 0.824]],
  [0.303, [0.813, 0.665, 0.824]],
  [0.305, [0.812, 0.661, 0.822]],
  [0.307, [0.812, 0.661, 0.822]],
  [0.309, [0.811, 0.656, 0.819]],
  [0.311, [0.811, 0.656, 0.819]],
  [0.313, [0.809, 0.652, 0.817]],
  [0.315, [0.809, 0.652, 0.817]],
  [0.317, [0.808, 0.647, 0.815]],
  [0.319, [0.808, 0.647, 0.815]],
  [0.321, [0.807, 0.642, 0.812]],
  [0.323, [0.807, 0.642, 0.812]],
  [0.325, [0.805, 0.638, 0.81]],
  [0.327, [0.805, 0.638, 0.81]],
  [0.329, [0.804, 0.633, 0.808]],
  [0.331, [0.804, 0.633, 0.808]],
  [0.333, [0.803, 0.629, 0.805]],
  [0.335, [0.803, 0.629, 0.805]],
  [0.337, [0.801, 0.624, 0.803]],
  [0.339, [0.801, 0.624, 0.803]],
  [0.341, [0.8, 0.62, 0.801]],
  [0.342, [0.8, 0.62, 0.801]],
  [0.344, [0.799, 0.615, 0.798]],
  [0.346, [0.799, 0.615, 0.798]],
  [0.348, [0.797, 0.611, 0.796]],
  [0.35, [0.797, 0.611, 0.796]],
  [0.352, [0.796, 0.606, 0.794]],
  [0.354, [0.796, 0.606, 0.794]],
  [0.356, [0.794, 0.601, 0.791]],
  [0.358, [0.794, 0.601, 0.791]],
  [0.36, [0.793, 0.597, 0.789]],
  [0.362, [0.793, 0.597, 0.789]],
  [0.364, [0.792, 0.592, 0.787]],
  [0.366, [0.792, 0.592, 0.787]],
  [0.368, [0.79, 0.588, 0.784]],
  [0.37, [0.79, 0.588, 0.784]],
  [0.372, [0.789, 0.583, 0.782]],
  [0.374, [0.789, 0.583, 0.782]],
  [0.376, [0.789, 0.578, 0.779]],
  [0.378, [0.789, 0.578, 0.779]],
  [0.38, [0.792, 0.572, 0.777]],
  [0.382, [0.792, 0.572, 0.777]],
  [0.384, [0.795, 0.567, 0.774]],
  [0.386, [0.795, 0.567, 0.774]],
  [0.387, [0.797, 0.561, 0.771]],
  [0.389, [0.797, 0.561, 0.771]],
  [0.391, [0.8, 0.555, 0.768]],
  [0.393, [0.8, 0.555, 0.768]],
  [0.395, [0.803, 0.549, 0.765]],
  [0.397, [0.803, 0.549, 0.765]],
  [0.399, [0.805, 0.544, 0.762]],
  [0.401, [0.805, 0.544, 0.762]],
  [0.403, [0.808, 0.538, 0.76]],
  [0.405, [0.808, 0.538, 0.76]],
  [0.407, [0.811, 0.532, 0.757]],
  [0.409, [0.811, 0.532, 0.757]],
  [0.411, [0.814, 0.526, 0.754]],
  [0.413, [0.814, 0.526, 0.754]],
  [0.415, [0.816, 0.52, 0.751]],
  [0.417, [0.816, 0.52, 0.751]],
  [0.419, [0.819, 0.515, 0.748]],
  [0.421, [0.819, 0.515, 0.748]],
  [0.423, [0.822, 0.509, 0.745]],
  [0.425, [0.822, 0.509, 0.745]],
  [0.427, [0.824, 0.503, 0.743]],
  [0.429, [0.824, 0.503, 0.743]],
  [0.431, [0.827, 0.497, 0.74]],
  [0.432, [0.827, 0.497, 0.74]],
  [0.434, [0.83, 0.491, 0.737]],
  [0.436, [0.83, 0.491, 0.737]],
  [0.438, [0.833, 0.486, 0.734]],
  [0.44, [0.833, 0.486, 0.734]],
  [0.442, [0.835, 0.48, 0.731]],
  [0.444, [0.835, 0.48, 0.731]],
  [0.446, [0.838, 0.474, 0.728]],
  [0.448, [0.838, 0.474, 0.728]],
  [0.45, [0.841, 0.468, 0.726]],
  [0.452, [0.841, 0.468, 0.726]],
  [0.454, [0.843, 0.463, 0.723]],
  [0.456, [0.843, 0.463, 0.723]],
  [0.458, [0.846, 0.457, 0.72]],
  [0.46, [0.846, 0.457, 0.72]],
  [0.462, [0.849, 0.451, 0.717]],
  [0.464, [0.849, 0.451, 0.717]],
  [0.466, [0.852, 0.445, 0.714]],
  [0.468, [0.852, 0.445, 0.714]],
  [0.47, [0.854, 0.439, 0.711]],
  [0.472, [0.854, 0.439, 0.711]],
  [0.474, [0.857, 0.434, 0.709]],
  [0.476, [0.857, 0.434, 0.709]],
  [0.477, [0.86, 0.428, 0.706]],
  [0.479, [0.86, 0.428, 0.706]],
  [0.481, [0.862, 0.422, 0.703]],
  [0.483, [0.862, 0.422, 0.703]],
  [0.485, [0.865, 0.416, 0.7]],
  [0.487, [0.865, 0.416, 0.7]],
  [0.489, [0.868, 0.411, 0.697]],
  [0.491, [0.868, 0.411, 0.697]],
  [0.493, [0.87, 0.405, 0.694]],
  [0.495, [0.87, 0.405, 0.694]],
  [0.497, [0.873, 0.399, 0.692]],
  [0.499, [0.873, 0.399, 0.692]],
  [0.501, [0.875, 0.392, 0.688]],
  [0.503, [0.875, 0.392, 0.688]],
  [0.505, [0.876, 0.385, 0.683]],
  [0.507, [0.876, 0.385, 0.683]],
  [0.509, [0.877, 0.378, 0.679]],
  [0.511, [0.877, 0.378, 0.679]],
  [0.513, [0.878, 0.37, 0.674]],
  [0.515, [0.878, 0.37, 0.674]],
  [0.517, [0.879, 0.363, 0.669]],
  [0.519, [0.879, 0.363, 0.669]],
  [0.521, [0.88, 0.355, 0.664]],
  [0.523, [0.88, 0.355, 0.664]],
  [0.524, [0.881, 0.348, 0.66]],
  [0.526, [0.881, 0.348, 0.66]],
  [0.528, [0.882, 0.341, 0.655]],
  [0.53, [0.882, 0.341, 0.655]],
  [0.532, [0.883, 0.333, 0.65]],
  [0.534, [0.883, 0.333, 0.65]],
  [0.536, [0.884, 0.326, 0.646]],
  [0.538, [0.884, 0.326, 0.646]],
  [0.54, [0.885, 0.319, 0.641]],
  [0.542, [0.885, 0.319, 0.641]],
  [0.544, [0.886, 0.311, 0.636]],
  [0.546, [0.886, 0.311, 0.636]],
  [0.548, [0.887, 0.304, 0.632]],
  [0.55, [0.887, 0.304, 0.632]],
  [0.552, [0.888, 0.296, 0.627]],
  [0.554, [0.888, 0.296, 0.627]],
  [0.556, [0.889, 0.289, 0.622]],
  [0.558, [0.889, 0.289, 0.622]],
  [0.56, [0.89, 0.282, 0.618]],
  [0.562, [0.89, 0.282, 0.618]],
  [0.564, [0.891, 0.274, 0.613]],
  [0.566, [0.891, 0.274, 0.613]],
  [0.568, [0.892, 0.267, 0.608]],
  [0.569, [0.892, 0.267, 0.608]],
  [0.571, [0.893, 0.26, 0.604]],
  [0.573, [0.893, 0.26, 0.604]],
  [0.575, [0.894, 0.252, 0.599]],
  [0.577, [0.894, 0.252, 0.599]],
  [0.579, [0.895, 0.245, 0.594]],
  [0.581, [0.895, 0.245, 0.594]],
  [0.583, [0.896, 0.237, 0.59]],
  [0.585, [0.896, 0.237, 0.59]],
  [0.587, [0.897, 0.23, 0.585]],
  [0.589, [0.897, 0.23, 0.585]],
  [0.591, [0.898, 0.223, 0.58]],
  [0.593, [0.898, 0.223, 0.58]],
  [0.595, [0.899, 0.215, 0.576]],
  [0.597, [0.899, 0.215, 0.576]],
  [0.599, [0.9, 0.208, 0.571]],
  [0.601, [0.9, 0.208, 0.571]],
  [0.603, [0.901, 0.2, 0.566]],
  [0.605, [0.901, 0.2, 0.566]],
  [0.607, [0.902, 0.193, 0.562]],
  [0.609, [0.902, 0.193, 0.562]],
  [0.611, [0.903, 0.186, 0.557]],
  [0.613, [0.903, 0.186, 0.557]],
  [0.614, [0.904, 0.178, 0.552]],
  [0.616, [0.904, 0.178, 0.552]],
  [0.618, [0.905, 0.171, 0.548]],
  [0.62, [0.905, 0.171, 0.548]],
  [0.622, [0.906, 0.164, 0.543]],
  [0.624, [0.906, 0.164, 0.543]],
  [0.626, [0.904, 0.159, 0.537]],
  [0.628, [0.904, 0.159, 0.537]],
  [0.63, [0.901, 0.156, 0.531]],
  [0.632, [0.901, 0.156, 0.531]],
  [0.634, [0.898, 0.153, 0.524]],
  [0.636, [0.898, 0.153, 0.524]],
  [0.638, [0.895, 0.151, 0.518]],
  [0.64, [0.895, 0.151, 0.518]],
  [0.642, [0.892, 0.148, 0.512]],
  [0.644, [0.892, 0.148, 0.512]],
  [0.646, [0.889, 0.145, 0.505]],
  [0.648, [0.889, 0.145, 0.505]],
  [0.65, [0.886, 0.142, 0.499]],
  [0.652, [0.886, 0.142, 0.499]],
  [0.654, [0.882, 0.139, 0.492]],
  [0.656, [0.882, 0.139, 0.492]],
  [0.658, [0.879, 0.136, 0.486]],
  [0.659, [0.879, 0.136, 0.486]],
  [0.661, [0.876, 0.134, 0.48]],
  [0.663, [0.876, 0.134, 0.48]],
  [0.665, [0.873, 0.131, 0.473]],
  [0.667, [0.873, 0.131, 0.473]],
  [0.669, [0.87, 0.128, 0.467]],
  [0.671, [0.87, 0.128, 0.467]],
  [0.673, [0.867, 0.125, 0.46]],
  [0.675, [0.867, 0.125, 0.46]],
  [0.677, [0.864, 0.122, 0.454]],
  [0.679, [0.864, 0.122, 0.454]],
  [0.681, [0.861, 0.119, 0.448]],
  [0.683, [0.861, 0.119, 0.448]],
  [0.685, [0.858, 0.117, 0.441]],
  [0.687, [0.858, 0.117, 0.441]],
  [0.689, [0.855, 0.114, 0.435]],
  [0.691, [0.855, 0.114, 0.435]],
  [0.693, [0.852, 0.111, 0.428]],
  [0.695, [0.852, 0.111, 0.428]],
  [0.697, [0.849, 0.108, 0.422]],
  [0.699, [0.849, 0.108, 0.422]],
  [0.701, [0.846, 0.105, 0.416]],
  [0.703, [0.846, 0.105, 0.416]],
  [0.705, [0.842, 0.102, 0.409]],
  [0.706, [0.842, 0.102, 0.409]],
  [0.708, [0.839, 0.1, 0.403]],
  [0.71, [0.839, 0.1, 0.403]],
  [0.712, [0.836, 0.097, 0.396]],
  [0.714, [0.836, 0.097, 0.396]],
  [0.716, [0.833, 0.094, 0.39]],
  [0.718, [0.833, 0.094, 0.39]],
  [0.72, [0.83, 0.091, 0.384]],
  [0.722, [0.83, 0.091, 0.384]],
  [0.724, [0.827, 0.088, 0.377]],
  [0.726, [0.827, 0.088, 0.377]],
  [0.728, [0.824, 0.085, 0.371]],
  [0.73, [0.824, 0.085, 0.371]],
  [0.732, [0.821, 0.083, 0.364]],
  [0.734, [0.821, 0.083, 0.364]],
  [0.736, [0.818, 0.08, 0.358]],
  [0.738, [0.818, 0.08, 0.358]],
  [0.74, [0.815, 0.077, 0.352]],
  [0.742, [0.815, 0.077, 0.352]],
  [0.744, [0.812, 0.074, 0.345]],
  [0.746, [0.812, 0.074, 0.345]],
  [0.748, [0.809, 0.071, 0.339]],
  [0.75, [0.809, 0.071, 0.339]],
  [0.751, [0.803, 0.069, 0.336]],
  [0.753, [0.803, 0.069, 0.336]],
  [0.755, [0.796, 0.067, 0.333]],
  [0.757, [0.796, 0.067, 0.333]],
  [0.759, [0.79, 0.064, 0.331]],
  [0.761, [0.79, 0.064, 0.331]],
  [0.763, [0.783, 0.062, 0.328]],
  [0.765, [0.783, 0.062, 0.328]],
  [0.767, [0.776, 0.06, 0.326]],
  [0.769, [0.776, 0.06, 0.326]],
  [0.771, [0.77, 0.058, 0.324]],
  [0.773, [0.77, 0.058, 0.324]],
  [0.775, [0.763, 0.056, 0.321]],
  [0.777, [0.763, 0.056, 0.321]],
  [0.779, [0.756, 0.053, 0.319]],
  [0.781, [0.756, 0.053, 0.319]],
  [0.783, [0.75, 0.051, 0.317]],
  [0.785, [0.75, 0.051, 0.317]],
  [0.787, [0.743, 0.049, 0.314]],
  [0.789, [0.743, 0.049, 0.314]],
  [0.791, [0.736, 0.047, 0.312]],
  [0.793, [0.736, 0.047, 0.312]],
  [0.795, [0.73, 0.045, 0.31]],
  [0.796, [0.73, 0.045, 0.31]],
  [0.798, [0.723, 0.042, 0.307]],
  [0.8, [0.723, 0.042, 0.307]],
  [0.802, [0.716, 0.04, 0.305]],
  [0.804, [0.716, 0.04, 0.305]],
  [0.806, [0.71, 0.038, 0.303]],
  [0.808, [0.71, 0.038, 0.303]],
  [0.81, [0.703, 0.036, 0.3]],
  [0.812, [0.703, 0.036, 0.3]],
  [0.814, [0.697, 0.033, 0.298]],
  [0.816, [0.697, 0.033, 0.298]],
  [0.818, [0.69, 0.031, 0.296]],
  [0.82, [0.69, 0.031, 0.296]],
  [0.822, [0.683, 0.029, 0.293]],
  [0.824, [0.683, 0.029, 0.293]],
  [0.826, [0.677, 0.027, 0.291]],
  [0.828, [0.677, 0.027, 0.291]],
  [0.83, [0.67, 0.025, 0.289]],
  [0.832, [0.67, 0.025, 0.289]],
  [0.834, [0.663, 0.022, 0.286]],
  [0.836, [0.663, 0.022, 0.286]],
  [0.838, [0.657, 0.02, 0.284]],
  [0.84, [0.657, 0.02, 0.284]],
  [0.841, [0.65, 0.018, 0.282]],
  [0.843, [0.65, 0.018, 0.282]],
  [0.845, [0.643, 0.016, 0.279]],
  [0.847, [0.643, 0.016, 0.279]],
  [0.849, [0.637, 0.014, 0.277]],
  [0.851, [0.637, 0.014, 0.277]],
  [0.853, [0.63, 0.011, 0.275]],
  [0.855, [0.63, 0.011, 0.275]],
  [0.857, [0.623, 9e-3, 0.272]],
  [0.859, [0.623, 9e-3, 0.272]],
  [0.861, [0.617, 7e-3, 0.27]],
  [0.863, [0.617, 7e-3, 0.27]],
  [0.865, [0.61, 5e-3, 0.268]],
  [0.867, [0.61, 5e-3, 0.268]],
  [0.869, [0.604, 2e-3, 0.265]],
  [0.871, [0.604, 2e-3, 0.265]],
  [0.873, [0.597, 0, 0.263]],
  [0.875, [0.597, 0, 0.263]],
  [0.877, [0.591, 0, 0.259]],
  [0.879, [0.591, 0, 0.259]],
  [0.881, [0.585, 0, 0.254]],
  [0.883, [0.585, 0, 0.254]],
  [0.885, [0.579, 0, 0.25]],
  [0.886, [0.579, 0, 0.25]],
  [0.888, [0.573, 0, 0.246]],
  [0.89, [0.573, 0, 0.246]],
  [0.892, [0.567, 0, 0.241]],
  [0.894, [0.567, 0, 0.241]],
  [0.896, [0.561, 0, 0.237]],
  [0.898, [0.561, 0, 0.237]],
  [0.9, [0.555, 0, 0.232]],
  [0.902, [0.555, 0, 0.232]],
  [0.904, [0.549, 0, 0.228]],
  [0.906, [0.549, 0, 0.228]],
  [0.908, [0.543, 0, 0.223]],
  [0.91, [0.543, 0, 0.223]],
  [0.912, [0.537, 0, 0.219]],
  [0.914, [0.537, 0, 0.219]],
  [0.916, [0.531, 0, 0.215]],
  [0.918, [0.531, 0, 0.215]],
  [0.92, [0.524, 0, 0.21]],
  [0.922, [0.524, 0, 0.21]],
  [0.924, [0.518, 0, 0.206]],
  [0.926, [0.518, 0, 0.206]],
  [0.928, [0.512, 0, 0.201]],
  [0.93, [0.512, 0, 0.201]],
  [0.932, [0.506, 0, 0.197]],
  [0.933, [0.506, 0, 0.197]],
  [0.935, [0.5, 0, 0.192]],
  [0.937, [0.5, 0, 0.192]],
  [0.939, [0.494, 0, 0.188]],
  [0.941, [0.494, 0, 0.188]],
  [0.943, [0.488, 0, 0.184]],
  [0.945, [0.488, 0, 0.184]],
  [0.947, [0.482, 0, 0.179]],
  [0.949, [0.482, 0, 0.179]],
  [0.951, [0.476, 0, 0.175]],
  [0.953, [0.476, 0, 0.175]],
  [0.955, [0.47, 0, 0.17]],
  [0.957, [0.47, 0, 0.17]],
  [0.959, [0.464, 0, 0.166]],
  [0.961, [0.464, 0, 0.166]],
  [0.963, [0.458, 0, 0.161]],
  [0.965, [0.458, 0, 0.161]],
  [0.967, [0.452, 0, 0.157]],
  [0.969, [0.452, 0, 0.157]],
  [0.971, [0.446, 0, 0.153]],
  [0.973, [0.446, 0, 0.153]],
  [0.975, [0.44, 0, 0.148]],
  [0.977, [0.44, 0, 0.148]],
  [0.978, [0.434, 0, 0.144]],
  [0.98, [0.434, 0, 0.144]],
  [0.982, [0.428, 0, 0.139]],
  [0.984, [0.428, 0, 0.139]],
  [0.986, [0.422, 0, 0.135]],
  [0.988, [0.422, 0, 0.135]],
  [0.99, [0.416, 0, 0.13]],
  [0.992, [0.416, 0, 0.13]],
  [0.994, [0.41, 0, 0.126]],
  [0.996, [0.41, 0, 0.126]],
  [0.998, [0.404, 0, 0.122]],
  [1, [0.404, 0, 0.122]]
], mp = [
  [0, [0.988, 0.984, 0.992]],
  [2e-3, [0.988, 0.984, 0.992]],
  [4e-3, [0.987, 0.983, 0.991]],
  [6e-3, [0.987, 0.983, 0.991]],
  [8e-3, [0.985, 0.981, 0.99]],
  [0.01, [0.985, 0.981, 0.99]],
  [0.012, [0.983, 0.979, 0.989]],
  [0.014, [0.983, 0.979, 0.989]],
  [0.016, [0.982, 0.977, 0.988]],
  [0.018, [0.982, 0.977, 0.988]],
  [0.02, [0.98, 0.976, 0.987]],
  [0.022, [0.98, 0.976, 0.987]],
  [0.023, [0.979, 0.974, 0.986]],
  [0.025, [0.979, 0.974, 0.986]],
  [0.027, [0.977, 0.972, 0.985]],
  [0.029, [0.977, 0.972, 0.985]],
  [0.031, [0.975, 0.971, 0.984]],
  [0.033, [0.975, 0.971, 0.984]],
  [0.035, [0.974, 0.969, 0.983]],
  [0.037, [0.974, 0.969, 0.983]],
  [0.039, [0.972, 0.967, 0.982]],
  [0.041, [0.972, 0.967, 0.982]],
  [0.043, [0.971, 0.965, 0.981]],
  [0.045, [0.971, 0.965, 0.981]],
  [0.047, [0.969, 0.964, 0.98]],
  [0.049, [0.969, 0.964, 0.98]],
  [0.051, [0.967, 0.962, 0.979]],
  [0.053, [0.967, 0.962, 0.979]],
  [0.055, [0.966, 0.96, 0.978]],
  [0.057, [0.966, 0.96, 0.978]],
  [0.059, [0.964, 0.958, 0.977]],
  [0.061, [0.964, 0.958, 0.977]],
  [0.063, [0.963, 0.957, 0.976]],
  [0.065, [0.963, 0.957, 0.976]],
  [0.067, [0.961, 0.955, 0.975]],
  [0.068, [0.961, 0.955, 0.975]],
  [0.07, [0.959, 0.953, 0.974]],
  [0.072, [0.959, 0.953, 0.974]],
  [0.074, [0.958, 0.952, 0.973]],
  [0.076, [0.958, 0.952, 0.973]],
  [0.078, [0.956, 0.95, 0.972]],
  [0.08, [0.956, 0.95, 0.972]],
  [0.082, [0.955, 0.948, 0.971]],
  [0.084, [0.955, 0.948, 0.971]],
  [0.086, [0.953, 0.946, 0.971]],
  [0.088, [0.953, 0.946, 0.971]],
  [0.09, [0.951, 0.945, 0.97]],
  [0.092, [0.951, 0.945, 0.97]],
  [0.094, [0.95, 0.943, 0.969]],
  [0.096, [0.95, 0.943, 0.969]],
  [0.098, [0.948, 0.941, 0.968]],
  [0.1, [0.948, 0.941, 0.968]],
  [0.102, [0.947, 0.94, 0.967]],
  [0.104, [0.947, 0.94, 0.967]],
  [0.106, [0.945, 0.938, 0.966]],
  [0.108, [0.945, 0.938, 0.966]],
  [0.11, [0.943, 0.936, 0.965]],
  [0.112, [0.943, 0.936, 0.965]],
  [0.114, [0.942, 0.934, 0.964]],
  [0.115, [0.942, 0.934, 0.964]],
  [0.117, [0.94, 0.933, 0.963]],
  [0.119, [0.94, 0.933, 0.963]],
  [0.121, [0.939, 0.931, 0.962]],
  [0.123, [0.939, 0.931, 0.962]],
  [0.125, [0.937, 0.929, 0.961]],
  [0.127, [0.937, 0.929, 0.961]],
  [0.129, [0.934, 0.927, 0.959]],
  [0.131, [0.934, 0.927, 0.959]],
  [0.133, [0.932, 0.924, 0.958]],
  [0.135, [0.932, 0.924, 0.958]],
  [0.137, [0.929, 0.922, 0.957]],
  [0.139, [0.929, 0.922, 0.957]],
  [0.141, [0.927, 0.92, 0.956]],
  [0.143, [0.927, 0.92, 0.956]],
  [0.145, [0.924, 0.917, 0.954]],
  [0.147, [0.924, 0.917, 0.954]],
  [0.149, [0.921, 0.915, 0.953]],
  [0.151, [0.921, 0.915, 0.953]],
  [0.153, [0.919, 0.913, 0.952]],
  [0.155, [0.919, 0.913, 0.952]],
  [0.157, [0.916, 0.91, 0.951]],
  [0.159, [0.916, 0.91, 0.951]],
  [0.16, [0.914, 0.908, 0.95]],
  [0.162, [0.914, 0.908, 0.95]],
  [0.164, [0.911, 0.906, 0.948]],
  [0.166, [0.911, 0.906, 0.948]],
  [0.168, [0.909, 0.903, 0.947]],
  [0.17, [0.909, 0.903, 0.947]],
  [0.172, [0.906, 0.901, 0.946]],
  [0.174, [0.906, 0.901, 0.946]],
  [0.176, [0.903, 0.899, 0.945]],
  [0.178, [0.903, 0.899, 0.945]],
  [0.18, [0.901, 0.896, 0.943]],
  [0.182, [0.901, 0.896, 0.943]],
  [0.184, [0.898, 0.894, 0.942]],
  [0.186, [0.898, 0.894, 0.942]],
  [0.188, [0.896, 0.892, 0.941]],
  [0.19, [0.896, 0.892, 0.941]],
  [0.192, [0.893, 0.889, 0.94]],
  [0.194, [0.893, 0.889, 0.94]],
  [0.196, [0.89, 0.887, 0.938]],
  [0.198, [0.89, 0.887, 0.938]],
  [0.2, [0.888, 0.885, 0.937]],
  [0.202, [0.888, 0.885, 0.937]],
  [0.204, [0.885, 0.882, 0.936]],
  [0.205, [0.885, 0.882, 0.936]],
  [0.207, [0.883, 0.88, 0.935]],
  [0.209, [0.883, 0.88, 0.935]],
  [0.211, [0.88, 0.878, 0.934]],
  [0.213, [0.88, 0.878, 0.934]],
  [0.215, [0.878, 0.875, 0.932]],
  [0.217, [0.878, 0.875, 0.932]],
  [0.219, [0.875, 0.873, 0.931]],
  [0.221, [0.875, 0.873, 0.931]],
  [0.223, [0.872, 0.871, 0.93]],
  [0.225, [0.872, 0.871, 0.93]],
  [0.227, [0.87, 0.868, 0.929]],
  [0.229, [0.87, 0.868, 0.929]],
  [0.231, [0.867, 0.866, 0.927]],
  [0.233, [0.867, 0.866, 0.927]],
  [0.235, [0.865, 0.864, 0.926]],
  [0.237, [0.865, 0.864, 0.926]],
  [0.239, [0.862, 0.861, 0.925]],
  [0.241, [0.862, 0.861, 0.925]],
  [0.243, [0.859, 0.859, 0.924]],
  [0.245, [0.859, 0.859, 0.924]],
  [0.247, [0.857, 0.857, 0.922]],
  [0.249, [0.857, 0.857, 0.922]],
  [0.25, [0.854, 0.854, 0.921]],
  [0.252, [0.854, 0.854, 0.921]],
  [0.254, [0.85, 0.85, 0.919]],
  [0.256, [0.85, 0.85, 0.919]],
  [0.258, [0.847, 0.847, 0.917]],
  [0.26, [0.847, 0.847, 0.917]],
  [0.262, [0.843, 0.843, 0.916]],
  [0.264, [0.843, 0.843, 0.916]],
  [0.266, [0.839, 0.84, 0.914]],
  [0.268, [0.839, 0.84, 0.914]],
  [0.27, [0.836, 0.836, 0.912]],
  [0.272, [0.836, 0.836, 0.912]],
  [0.274, [0.832, 0.833, 0.91]],
  [0.276, [0.832, 0.833, 0.91]],
  [0.278, [0.828, 0.829, 0.908]],
  [0.28, [0.828, 0.829, 0.908]],
  [0.282, [0.824, 0.825, 0.906]],
  [0.284, [0.824, 0.825, 0.906]],
  [0.286, [0.821, 0.822, 0.904]],
  [0.288, [0.821, 0.822, 0.904]],
  [0.29, [0.817, 0.818, 0.903]],
  [0.292, [0.817, 0.818, 0.903]],
  [0.294, [0.813, 0.815, 0.901]],
  [0.295, [0.813, 0.815, 0.901]],
  [0.297, [0.81, 0.811, 0.899]],
  [0.299, [0.81, 0.811, 0.899]],
  [0.301, [0.806, 0.808, 0.897]],
  [0.303, [0.806, 0.808, 0.897]],
  [0.305, [0.802, 0.804, 0.895]],
  [0.307, [0.802, 0.804, 0.895]],
  [0.309, [0.799, 0.8, 0.893]],
  [0.311, [0.799, 0.8, 0.893]],
  [0.313, [0.795, 0.797, 0.892]],
  [0.315, [0.795, 0.797, 0.892]],
  [0.317, [0.791, 0.793, 0.89]],
  [0.319, [0.791, 0.793, 0.89]],
  [0.321, [0.788, 0.79, 0.888]],
  [0.323, [0.788, 0.79, 0.888]],
  [0.325, [0.784, 0.786, 0.886]],
  [0.327, [0.784, 0.786, 0.886]],
  [0.329, [0.78, 0.783, 0.884]],
  [0.331, [0.78, 0.783, 0.884]],
  [0.333, [0.776, 0.779, 0.882]],
  [0.335, [0.776, 0.779, 0.882]],
  [0.337, [0.773, 0.776, 0.881]],
  [0.339, [0.773, 0.776, 0.881]],
  [0.341, [0.769, 0.772, 0.879]],
  [0.342, [0.769, 0.772, 0.879]],
  [0.344, [0.765, 0.768, 0.877]],
  [0.346, [0.765, 0.768, 0.877]],
  [0.348, [0.762, 0.765, 0.875]],
  [0.35, [0.762, 0.765, 0.875]],
  [0.352, [0.758, 0.761, 0.873]],
  [0.354, [0.758, 0.761, 0.873]],
  [0.356, [0.754, 0.758, 0.871]],
  [0.358, [0.754, 0.758, 0.871]],
  [0.36, [0.751, 0.754, 0.869]],
  [0.362, [0.751, 0.754, 0.869]],
  [0.364, [0.747, 0.751, 0.868]],
  [0.366, [0.747, 0.751, 0.868]],
  [0.368, [0.743, 0.747, 0.866]],
  [0.37, [0.743, 0.747, 0.866]],
  [0.372, [0.74, 0.743, 0.864]],
  [0.374, [0.74, 0.743, 0.864]],
  [0.376, [0.736, 0.74, 0.862]],
  [0.378, [0.736, 0.74, 0.862]],
  [0.38, [0.732, 0.735, 0.859]],
  [0.382, [0.732, 0.735, 0.859]],
  [0.384, [0.728, 0.731, 0.857]],
  [0.386, [0.728, 0.731, 0.857]],
  [0.387, [0.725, 0.727, 0.854]],
  [0.389, [0.725, 0.727, 0.854]],
  [0.391, [0.721, 0.722, 0.852]],
  [0.393, [0.721, 0.722, 0.852]],
  [0.395, [0.717, 0.718, 0.85]],
  [0.397, [0.717, 0.718, 0.85]],
  [0.399, [0.714, 0.714, 0.847]],
  [0.401, [0.714, 0.714, 0.847]],
  [0.403, [0.71, 0.709, 0.845]],
  [0.405, [0.71, 0.709, 0.845]],
  [0.407, [0.706, 0.705, 0.842]],
  [0.409, [0.706, 0.705, 0.842]],
  [0.411, [0.703, 0.701, 0.84]],
  [0.413, [0.703, 0.701, 0.84]],
  [0.415, [0.699, 0.697, 0.837]],
  [0.417, [0.699, 0.697, 0.837]],
  [0.419, [0.695, 0.692, 0.835]],
  [0.421, [0.695, 0.692, 0.835]],
  [0.423, [0.692, 0.688, 0.832]],
  [0.425, [0.692, 0.688, 0.832]],
  [0.427, [0.688, 0.684, 0.83]],
  [0.429, [0.688, 0.684, 0.83]],
  [0.431, [0.684, 0.679, 0.827]],
  [0.432, [0.684, 0.679, 0.827]],
  [0.434, [0.681, 0.675, 0.825]],
  [0.436, [0.681, 0.675, 0.825]],
  [0.438, [0.677, 0.671, 0.822]],
  [0.44, [0.677, 0.671, 0.822]],
  [0.442, [0.673, 0.666, 0.82]],
  [0.444, [0.673, 0.666, 0.82]],
  [0.446, [0.669, 0.662, 0.818]],
  [0.448, [0.669, 0.662, 0.818]],
  [0.45, [0.666, 0.658, 0.815]],
  [0.452, [0.666, 0.658, 0.815]],
  [0.454, [0.662, 0.653, 0.813]],
  [0.456, [0.662, 0.653, 0.813]],
  [0.458, [0.658, 0.649, 0.81]],
  [0.46, [0.658, 0.649, 0.81]],
  [0.462, [0.655, 0.645, 0.808]],
  [0.464, [0.655, 0.645, 0.808]],
  [0.466, [0.651, 0.641, 0.805]],
  [0.468, [0.651, 0.641, 0.805]],
  [0.47, [0.647, 0.636, 0.803]],
  [0.472, [0.647, 0.636, 0.803]],
  [0.474, [0.644, 0.632, 0.8]],
  [0.476, [0.644, 0.632, 0.8]],
  [0.477, [0.64, 0.628, 0.798]],
  [0.479, [0.64, 0.628, 0.798]],
  [0.481, [0.636, 0.623, 0.795]],
  [0.483, [0.636, 0.623, 0.795]],
  [0.485, [0.633, 0.619, 0.793]],
  [0.487, [0.633, 0.619, 0.793]],
  [0.489, [0.629, 0.615, 0.79]],
  [0.491, [0.629, 0.615, 0.79]],
  [0.493, [0.625, 0.61, 0.788]],
  [0.495, [0.625, 0.61, 0.788]],
  [0.497, [0.621, 0.606, 0.786]],
  [0.499, [0.621, 0.606, 0.786]],
  [0.501, [0.618, 0.602, 0.783]],
  [0.503, [0.618, 0.602, 0.783]],
  [0.505, [0.614, 0.599, 0.782]],
  [0.507, [0.614, 0.599, 0.782]],
  [0.509, [0.61, 0.595, 0.78]],
  [0.511, [0.61, 0.595, 0.78]],
  [0.513, [0.607, 0.591, 0.778]],
  [0.515, [0.607, 0.591, 0.778]],
  [0.517, [0.603, 0.588, 0.777]],
  [0.519, [0.603, 0.588, 0.777]],
  [0.521, [0.599, 0.584, 0.775]],
  [0.523, [0.599, 0.584, 0.775]],
  [0.524, [0.596, 0.581, 0.773]],
  [0.526, [0.596, 0.581, 0.773]],
  [0.528, [0.592, 0.577, 0.771]],
  [0.53, [0.592, 0.577, 0.771]],
  [0.532, [0.588, 0.574, 0.77]],
  [0.534, [0.588, 0.574, 0.77]],
  [0.536, [0.585, 0.57, 0.768]],
  [0.538, [0.585, 0.57, 0.768]],
  [0.54, [0.581, 0.566, 0.766]],
  [0.542, [0.581, 0.566, 0.766]],
  [0.544, [0.577, 0.563, 0.765]],
  [0.546, [0.577, 0.563, 0.765]],
  [0.548, [0.573, 0.559, 0.763]],
  [0.55, [0.573, 0.559, 0.763]],
  [0.552, [0.57, 0.556, 0.761]],
  [0.554, [0.57, 0.556, 0.761]],
  [0.556, [0.566, 0.552, 0.759]],
  [0.558, [0.566, 0.552, 0.759]],
  [0.56, [0.562, 0.549, 0.758]],
  [0.562, [0.562, 0.549, 0.758]],
  [0.564, [0.559, 0.545, 0.756]],
  [0.566, [0.559, 0.545, 0.756]],
  [0.568, [0.555, 0.541, 0.754]],
  [0.569, [0.555, 0.541, 0.754]],
  [0.571, [0.551, 0.538, 0.752]],
  [0.573, [0.551, 0.538, 0.752]],
  [0.575, [0.548, 0.534, 0.751]],
  [0.577, [0.548, 0.534, 0.751]],
  [0.579, [0.544, 0.531, 0.749]],
  [0.581, [0.544, 0.531, 0.749]],
  [0.583, [0.54, 0.527, 0.747]],
  [0.585, [0.54, 0.527, 0.747]],
  [0.587, [0.537, 0.524, 0.746]],
  [0.589, [0.537, 0.524, 0.746]],
  [0.591, [0.533, 0.52, 0.744]],
  [0.593, [0.533, 0.52, 0.744]],
  [0.595, [0.529, 0.517, 0.742]],
  [0.597, [0.529, 0.517, 0.742]],
  [0.599, [0.525, 0.513, 0.74]],
  [0.601, [0.525, 0.513, 0.74]],
  [0.603, [0.522, 0.509, 0.739]],
  [0.605, [0.522, 0.509, 0.739]],
  [0.607, [0.518, 0.506, 0.737]],
  [0.609, [0.518, 0.506, 0.737]],
  [0.611, [0.514, 0.502, 0.735]],
  [0.613, [0.514, 0.502, 0.735]],
  [0.614, [0.511, 0.499, 0.734]],
  [0.616, [0.511, 0.499, 0.734]],
  [0.618, [0.507, 0.495, 0.732]],
  [0.62, [0.507, 0.495, 0.732]],
  [0.622, [0.503, 0.492, 0.73]],
  [0.624, [0.503, 0.492, 0.73]],
  [0.626, [0.5, 0.487, 0.728]],
  [0.628, [0.5, 0.487, 0.728]],
  [0.63, [0.498, 0.481, 0.725]],
  [0.632, [0.498, 0.481, 0.725]],
  [0.634, [0.495, 0.476, 0.722]],
  [0.636, [0.495, 0.476, 0.722]],
  [0.638, [0.492, 0.471, 0.719]],
  [0.64, [0.492, 0.471, 0.719]],
  [0.642, [0.489, 0.465, 0.716]],
  [0.644, [0.489, 0.465, 0.716]],
  [0.646, [0.487, 0.46, 0.713]],
  [0.648, [0.487, 0.46, 0.713]],
  [0.65, [0.484, 0.454, 0.711]],
  [0.652, [0.484, 0.454, 0.711]],
  [0.654, [0.481, 0.449, 0.708]],
  [0.656, [0.481, 0.449, 0.708]],
  [0.658, [0.479, 0.444, 0.705]],
  [0.659, [0.479, 0.444, 0.705]],
  [0.661, [0.476, 0.438, 0.702]],
  [0.663, [0.476, 0.438, 0.702]],
  [0.665, [0.473, 0.433, 0.699]],
  [0.667, [0.473, 0.433, 0.699]],
  [0.669, [0.47, 0.427, 0.697]],
  [0.671, [0.47, 0.427, 0.697]],
  [0.673, [0.468, 0.422, 0.694]],
  [0.675, [0.468, 0.422, 0.694]],
  [0.677, [0.465, 0.416, 0.691]],
  [0.679, [0.465, 0.416, 0.691]],
  [0.681, [0.462, 0.411, 0.688]],
  [0.683, [0.462, 0.411, 0.688]],
  [0.685, [0.46, 0.406, 0.685]],
  [0.687, [0.46, 0.406, 0.685]],
  [0.689, [0.457, 0.4, 0.682]],
  [0.691, [0.457, 0.4, 0.682]],
  [0.693, [0.454, 0.395, 0.68]],
  [0.695, [0.454, 0.395, 0.68]],
  [0.697, [0.452, 0.389, 0.677]],
  [0.699, [0.452, 0.389, 0.677]],
  [0.701, [0.449, 0.384, 0.674]],
  [0.703, [0.449, 0.384, 0.674]],
  [0.705, [0.446, 0.379, 0.671]],
  [0.706, [0.446, 0.379, 0.671]],
  [0.708, [0.443, 0.373, 0.668]],
  [0.71, [0.443, 0.373, 0.668]],
  [0.712, [0.441, 0.368, 0.665]],
  [0.714, [0.441, 0.368, 0.665]],
  [0.716, [0.438, 0.362, 0.663]],
  [0.718, [0.438, 0.362, 0.663]],
  [0.72, [0.435, 0.357, 0.66]],
  [0.722, [0.435, 0.357, 0.66]],
  [0.724, [0.433, 0.351, 0.657]],
  [0.726, [0.433, 0.351, 0.657]],
  [0.728, [0.43, 0.346, 0.654]],
  [0.73, [0.43, 0.346, 0.654]],
  [0.732, [0.427, 0.341, 0.651]],
  [0.734, [0.427, 0.341, 0.651]],
  [0.736, [0.424, 0.335, 0.648]],
  [0.738, [0.424, 0.335, 0.648]],
  [0.74, [0.422, 0.33, 0.646]],
  [0.742, [0.422, 0.33, 0.646]],
  [0.744, [0.419, 0.324, 0.643]],
  [0.746, [0.419, 0.324, 0.643]],
  [0.748, [0.416, 0.319, 0.64]],
  [0.75, [0.416, 0.319, 0.64]],
  [0.751, [0.414, 0.314, 0.637]],
  [0.753, [0.414, 0.314, 0.637]],
  [0.755, [0.411, 0.309, 0.635]],
  [0.757, [0.411, 0.309, 0.635]],
  [0.759, [0.408, 0.303, 0.632]],
  [0.761, [0.408, 0.303, 0.632]],
  [0.763, [0.406, 0.298, 0.63]],
  [0.765, [0.406, 0.298, 0.63]],
  [0.767, [0.403, 0.293, 0.628]],
  [0.769, [0.403, 0.293, 0.628]],
  [0.771, [0.4, 0.288, 0.625]],
  [0.773, [0.4, 0.288, 0.625]],
  [0.775, [0.397, 0.283, 0.623]],
  [0.777, [0.397, 0.283, 0.623]],
  [0.779, [0.395, 0.278, 0.62]],
  [0.781, [0.395, 0.278, 0.62]],
  [0.783, [0.392, 0.272, 0.618]],
  [0.785, [0.392, 0.272, 0.618]],
  [0.787, [0.389, 0.267, 0.615]],
  [0.789, [0.389, 0.267, 0.615]],
  [0.791, [0.387, 0.262, 0.613]],
  [0.793, [0.387, 0.262, 0.613]],
  [0.795, [0.384, 0.257, 0.61]],
  [0.796, [0.384, 0.257, 0.61]],
  [0.798, [0.381, 0.252, 0.608]],
  [0.8, [0.381, 0.252, 0.608]],
  [0.802, [0.378, 0.247, 0.605]],
  [0.804, [0.378, 0.247, 0.605]],
  [0.806, [0.376, 0.241, 0.603]],
  [0.808, [0.376, 0.241, 0.603]],
  [0.81, [0.373, 0.236, 0.6]],
  [0.812, [0.373, 0.236, 0.6]],
  [0.814, [0.37, 0.231, 0.598]],
  [0.816, [0.37, 0.231, 0.598]],
  [0.818, [0.368, 0.226, 0.596]],
  [0.82, [0.368, 0.226, 0.596]],
  [0.822, [0.365, 0.221, 0.593]],
  [0.824, [0.365, 0.221, 0.593]],
  [0.826, [0.362, 0.216, 0.591]],
  [0.828, [0.362, 0.216, 0.591]],
  [0.83, [0.36, 0.21, 0.588]],
  [0.832, [0.36, 0.21, 0.588]],
  [0.834, [0.357, 0.205, 0.586]],
  [0.836, [0.357, 0.205, 0.586]],
  [0.838, [0.354, 0.2, 0.583]],
  [0.84, [0.354, 0.2, 0.583]],
  [0.841, [0.351, 0.195, 0.581]],
  [0.843, [0.351, 0.195, 0.581]],
  [0.845, [0.349, 0.19, 0.578]],
  [0.847, [0.349, 0.19, 0.578]],
  [0.849, [0.346, 0.185, 0.576]],
  [0.851, [0.346, 0.185, 0.576]],
  [0.853, [0.343, 0.179, 0.573]],
  [0.855, [0.343, 0.179, 0.573]],
  [0.857, [0.341, 0.174, 0.571]],
  [0.859, [0.341, 0.174, 0.571]],
  [0.861, [0.338, 0.169, 0.568]],
  [0.863, [0.338, 0.169, 0.568]],
  [0.865, [0.335, 0.164, 0.566]],
  [0.867, [0.335, 0.164, 0.566]],
  [0.869, [0.332, 0.159, 0.564]],
  [0.871, [0.332, 0.159, 0.564]],
  [0.873, [0.33, 0.154, 0.561]],
  [0.875, [0.33, 0.154, 0.561]],
  [0.877, [0.327, 0.149, 0.559]],
  [0.879, [0.327, 0.149, 0.559]],
  [0.881, [0.325, 0.144, 0.557]],
  [0.883, [0.325, 0.144, 0.557]],
  [0.885, [0.322, 0.139, 0.554]],
  [0.886, [0.322, 0.139, 0.554]],
  [0.888, [0.319, 0.134, 0.552]],
  [0.89, [0.319, 0.134, 0.552]],
  [0.892, [0.317, 0.13, 0.55]],
  [0.894, [0.317, 0.13, 0.55]],
  [0.896, [0.314, 0.125, 0.548]],
  [0.898, [0.314, 0.125, 0.548]],
  [0.9, [0.312, 0.12, 0.546]],
  [0.902, [0.312, 0.12, 0.546]],
  [0.904, [0.309, 0.115, 0.543]],
  [0.906, [0.309, 0.115, 0.543]],
  [0.908, [0.306, 0.11, 0.541]],
  [0.91, [0.306, 0.11, 0.541]],
  [0.912, [0.304, 0.106, 0.539]],
  [0.914, [0.304, 0.106, 0.539]],
  [0.916, [0.301, 0.101, 0.537]],
  [0.918, [0.301, 0.101, 0.537]],
  [0.92, [0.299, 0.096, 0.534]],
  [0.922, [0.299, 0.096, 0.534]],
  [0.924, [0.296, 0.091, 0.532]],
  [0.926, [0.296, 0.091, 0.532]],
  [0.928, [0.294, 0.086, 0.53]],
  [0.93, [0.294, 0.086, 0.53]],
  [0.932, [0.291, 0.082, 0.528]],
  [0.933, [0.291, 0.082, 0.528]],
  [0.935, [0.288, 0.077, 0.526]],
  [0.937, [0.288, 0.077, 0.526]],
  [0.939, [0.286, 0.072, 0.523]],
  [0.941, [0.286, 0.072, 0.523]],
  [0.943, [0.283, 0.067, 0.521]],
  [0.945, [0.283, 0.067, 0.521]],
  [0.947, [0.281, 0.062, 0.519]],
  [0.949, [0.281, 0.062, 0.519]],
  [0.951, [0.278, 0.058, 0.517]],
  [0.953, [0.278, 0.058, 0.517]],
  [0.955, [0.275, 0.053, 0.515]],
  [0.957, [0.275, 0.053, 0.515]],
  [0.959, [0.273, 0.048, 0.512]],
  [0.961, [0.273, 0.048, 0.512]],
  [0.963, [0.27, 0.043, 0.51]],
  [0.965, [0.27, 0.043, 0.51]],
  [0.967, [0.268, 0.038, 0.508]],
  [0.969, [0.268, 0.038, 0.508]],
  [0.971, [0.265, 0.034, 0.506]],
  [0.973, [0.265, 0.034, 0.506]],
  [0.975, [0.263, 0.029, 0.503]],
  [0.977, [0.263, 0.029, 0.503]],
  [0.978, [0.26, 0.024, 0.501]],
  [0.98, [0.26, 0.024, 0.501]],
  [0.982, [0.257, 0.019, 0.499]],
  [0.984, [0.257, 0.019, 0.499]],
  [0.986, [0.255, 0.014, 0.497]],
  [0.988, [0.255, 0.014, 0.497]],
  [0.99, [0.252, 0.01, 0.495]],
  [0.992, [0.252, 0.01, 0.495]],
  [0.994, [0.25, 5e-3, 0.492]],
  [0.996, [0.25, 5e-3, 0.492]],
  [0.998, [0.247, 0, 0.49]],
  [1, [0.247, 0, 0.49]]
], gp = [
  [0, [1, 0.969, 0.953]],
  [2e-3, [1, 0.969, 0.953]],
  [4e-3, [1, 0.966, 0.95]],
  [6e-3, [1, 0.966, 0.95]],
  [8e-3, [1, 0.963, 0.948]],
  [0.01, [1, 0.963, 0.948]],
  [0.012, [0.999, 0.96, 0.945]],
  [0.014, [0.999, 0.96, 0.945]],
  [0.016, [0.999, 0.957, 0.942]],
  [0.018, [0.999, 0.957, 0.942]],
  [0.02, [0.999, 0.954, 0.939]],
  [0.022, [0.999, 0.954, 0.939]],
  [0.023, [0.999, 0.952, 0.937]],
  [0.025, [0.999, 0.952, 0.937]],
  [0.027, [0.998, 0.949, 0.934]],
  [0.029, [0.998, 0.949, 0.934]],
  [0.031, [0.998, 0.946, 0.931]],
  [0.033, [0.998, 0.946, 0.931]],
  [0.035, [0.998, 0.943, 0.929]],
  [0.037, [0.998, 0.943, 0.929]],
  [0.039, [0.998, 0.94, 0.926]],
  [0.041, [0.998, 0.94, 0.926]],
  [0.043, [0.997, 0.938, 0.923]],
  [0.045, [0.997, 0.938, 0.923]],
  [0.047, [0.997, 0.935, 0.92]],
  [0.049, [0.997, 0.935, 0.92]],
  [0.051, [0.997, 0.932, 0.918]],
  [0.053, [0.997, 0.932, 0.918]],
  [0.055, [0.997, 0.929, 0.915]],
  [0.057, [0.997, 0.929, 0.915]],
  [0.059, [0.996, 0.926, 0.912]],
  [0.061, [0.996, 0.926, 0.912]],
  [0.063, [0.996, 0.923, 0.91]],
  [0.065, [0.996, 0.923, 0.91]],
  [0.067, [0.996, 0.921, 0.907]],
  [0.068, [0.996, 0.921, 0.907]],
  [0.07, [0.996, 0.918, 0.904]],
  [0.072, [0.996, 0.918, 0.904]],
  [0.074, [0.995, 0.915, 0.902]],
  [0.076, [0.995, 0.915, 0.902]],
  [0.078, [0.995, 0.912, 0.899]],
  [0.08, [0.995, 0.912, 0.899]],
  [0.082, [0.995, 0.909, 0.896]],
  [0.084, [0.995, 0.909, 0.896]],
  [0.086, [0.995, 0.906, 0.893]],
  [0.088, [0.995, 0.906, 0.893]],
  [0.09, [0.994, 0.904, 0.891]],
  [0.092, [0.994, 0.904, 0.891]],
  [0.094, [0.994, 0.901, 0.888]],
  [0.096, [0.994, 0.901, 0.888]],
  [0.098, [0.994, 0.898, 0.885]],
  [0.1, [0.994, 0.898, 0.885]],
  [0.102, [0.994, 0.895, 0.883]],
  [0.104, [0.994, 0.895, 0.883]],
  [0.106, [0.993, 0.892, 0.88]],
  [0.108, [0.993, 0.892, 0.88]],
  [0.11, [0.993, 0.889, 0.877]],
  [0.112, [0.993, 0.889, 0.877]],
  [0.114, [0.993, 0.887, 0.874]],
  [0.115, [0.993, 0.887, 0.874]],
  [0.117, [0.993, 0.884, 0.872]],
  [0.119, [0.993, 0.884, 0.872]],
  [0.121, [0.992, 0.881, 0.869]],
  [0.123, [0.992, 0.881, 0.869]],
  [0.125, [0.992, 0.878, 0.866]],
  [0.127, [0.992, 0.878, 0.866]],
  [0.129, [0.992, 0.875, 0.863]],
  [0.131, [0.992, 0.875, 0.863]],
  [0.133, [0.992, 0.871, 0.859]],
  [0.135, [0.992, 0.871, 0.859]],
  [0.137, [0.992, 0.868, 0.856]],
  [0.139, [0.992, 0.868, 0.856]],
  [0.141, [0.992, 0.865, 0.852]],
  [0.143, [0.992, 0.865, 0.852]],
  [0.145, [0.992, 0.861, 0.848]],
  [0.147, [0.992, 0.861, 0.848]],
  [0.149, [0.991, 0.858, 0.845]],
  [0.151, [0.991, 0.858, 0.845]],
  [0.153, [0.991, 0.855, 0.841]],
  [0.155, [0.991, 0.855, 0.841]],
  [0.157, [0.991, 0.851, 0.838]],
  [0.159, [0.991, 0.851, 0.838]],
  [0.16, [0.991, 0.848, 0.834]],
  [0.162, [0.991, 0.848, 0.834]],
  [0.164, [0.991, 0.845, 0.831]],
  [0.166, [0.991, 0.845, 0.831]],
  [0.168, [0.991, 0.841, 0.827]],
  [0.17, [0.991, 0.841, 0.827]],
  [0.172, [0.991, 0.838, 0.823]],
  [0.174, [0.991, 0.838, 0.823]],
  [0.176, [0.991, 0.835, 0.82]],
  [0.178, [0.991, 0.835, 0.82]],
  [0.18, [0.99, 0.832, 0.816]],
  [0.182, [0.99, 0.832, 0.816]],
  [0.184, [0.99, 0.828, 0.813]],
  [0.186, [0.99, 0.828, 0.813]],
  [0.188, [0.99, 0.825, 0.809]],
  [0.19, [0.99, 0.825, 0.809]],
  [0.192, [0.99, 0.822, 0.806]],
  [0.194, [0.99, 0.822, 0.806]],
  [0.196, [0.99, 0.818, 0.802]],
  [0.198, [0.99, 0.818, 0.802]],
  [0.2, [0.99, 0.815, 0.798]],
  [0.202, [0.99, 0.815, 0.798]],
  [0.204, [0.99, 0.812, 0.795]],
  [0.205, [0.99, 0.812, 0.795]],
  [0.207, [0.99, 0.808, 0.791]],
  [0.209, [0.99, 0.808, 0.791]],
  [0.211, [0.989, 0.805, 0.788]],
  [0.213, [0.989, 0.805, 0.788]],
  [0.215, [0.989, 0.802, 0.784]],
  [0.217, [0.989, 0.802, 0.784]],
  [0.219, [0.989, 0.798, 0.781]],
  [0.221, [0.989, 0.798, 0.781]],
  [0.223, [0.989, 0.795, 0.777]],
  [0.225, [0.989, 0.795, 0.777]],
  [0.227, [0.989, 0.792, 0.773]],
  [0.229, [0.989, 0.792, 0.773]],
  [0.231, [0.989, 0.788, 0.77]],
  [0.233, [0.989, 0.788, 0.77]],
  [0.235, [0.989, 0.785, 0.766]],
  [0.237, [0.989, 0.785, 0.766]],
  [0.239, [0.989, 0.782, 0.763]],
  [0.241, [0.989, 0.782, 0.763]],
  [0.243, [0.988, 0.778, 0.759]],
  [0.245, [0.988, 0.778, 0.759]],
  [0.247, [0.988, 0.775, 0.756]],
  [0.249, [0.988, 0.775, 0.756]],
  [0.25, [0.988, 0.771, 0.753]],
  [0.252, [0.988, 0.771, 0.753]],
  [0.254, [0.988, 0.767, 0.751]],
  [0.256, [0.988, 0.767, 0.751]],
  [0.258, [0.988, 0.762, 0.75]],
  [0.26, [0.988, 0.762, 0.75]],
  [0.262, [0.987, 0.757, 0.749]],
  [0.264, [0.987, 0.757, 0.749]],
  [0.266, [0.987, 0.753, 0.747]],
  [0.268, [0.987, 0.753, 0.747]],
  [0.27, [0.987, 0.748, 0.746]],
  [0.272, [0.987, 0.748, 0.746]],
  [0.274, [0.987, 0.743, 0.744]],
  [0.276, [0.987, 0.743, 0.744]],
  [0.278, [0.986, 0.739, 0.743]],
  [0.28, [0.986, 0.739, 0.743]],
  [0.282, [0.986, 0.734, 0.742]],
  [0.284, [0.986, 0.734, 0.742]],
  [0.286, [0.986, 0.729, 0.74]],
  [0.288, [0.986, 0.729, 0.74]],
  [0.29, [0.986, 0.725, 0.739]],
  [0.292, [0.986, 0.725, 0.739]],
  [0.294, [0.985, 0.72, 0.738]],
  [0.295, [0.985, 0.72, 0.738]],
  [0.297, [0.985, 0.715, 0.736]],
  [0.299, [0.985, 0.715, 0.736]],
  [0.301, [0.985, 0.711, 0.735]],
  [0.303, [0.985, 0.711, 0.735]],
  [0.305, [0.985, 0.706, 0.734]],
  [0.307, [0.985, 0.706, 0.734]],
  [0.309, [0.984, 0.701, 0.732]],
  [0.311, [0.984, 0.701, 0.732]],
  [0.313, [0.984, 0.697, 0.731]],
  [0.315, [0.984, 0.697, 0.731]],
  [0.317, [0.984, 0.692, 0.73]],
  [0.319, [0.984, 0.692, 0.73]],
  [0.321, [0.984, 0.687, 0.728]],
  [0.323, [0.984, 0.687, 0.728]],
  [0.325, [0.983, 0.683, 0.727]],
  [0.327, [0.983, 0.683, 0.727]],
  [0.329, [0.983, 0.678, 0.726]],
  [0.331, [0.983, 0.678, 0.726]],
  [0.333, [0.983, 0.673, 0.724]],
  [0.335, [0.983, 0.673, 0.724]],
  [0.337, [0.983, 0.669, 0.723]],
  [0.339, [0.983, 0.669, 0.723]],
  [0.341, [0.983, 0.664, 0.721]],
  [0.342, [0.983, 0.664, 0.721]],
  [0.344, [0.982, 0.659, 0.72]],
  [0.346, [0.982, 0.659, 0.72]],
  [0.348, [0.982, 0.655, 0.719]],
  [0.35, [0.982, 0.655, 0.719]],
  [0.352, [0.982, 0.65, 0.717]],
  [0.354, [0.982, 0.65, 0.717]],
  [0.356, [0.982, 0.645, 0.716]],
  [0.358, [0.982, 0.645, 0.716]],
  [0.36, [0.981, 0.64, 0.715]],
  [0.362, [0.981, 0.64, 0.715]],
  [0.364, [0.981, 0.636, 0.713]],
  [0.366, [0.981, 0.636, 0.713]],
  [0.368, [0.981, 0.631, 0.712]],
  [0.37, [0.981, 0.631, 0.712]],
  [0.372, [0.981, 0.626, 0.711]],
  [0.374, [0.981, 0.626, 0.711]],
  [0.376, [0.98, 0.621, 0.709]],
  [0.378, [0.98, 0.621, 0.709]],
  [0.38, [0.98, 0.614, 0.706]],
  [0.382, [0.98, 0.614, 0.706]],
  [0.384, [0.98, 0.607, 0.704]],
  [0.386, [0.98, 0.607, 0.704]],
  [0.387, [0.979, 0.601, 0.701]],
  [0.389, [0.979, 0.601, 0.701]],
  [0.391, [0.979, 0.594, 0.699]],
  [0.393, [0.979, 0.594, 0.699]],
  [0.395, [0.978, 0.587, 0.697]],
  [0.397, [0.978, 0.587, 0.697]],
  [0.399, [0.978, 0.58, 0.694]],
  [0.401, [0.978, 0.58, 0.694]],
  [0.403, [0.978, 0.574, 0.692]],
  [0.405, [0.978, 0.574, 0.692]],
  [0.407, [0.977, 0.567, 0.689]],
  [0.409, [0.977, 0.567, 0.689]],
  [0.411, [0.977, 0.56, 0.687]],
  [0.413, [0.977, 0.56, 0.687]],
  [0.415, [0.977, 0.553, 0.684]],
  [0.417, [0.977, 0.553, 0.684]],
  [0.419, [0.976, 0.547, 0.682]],
  [0.421, [0.976, 0.547, 0.682]],
  [0.423, [0.976, 0.54, 0.679]],
  [0.425, [0.976, 0.54, 0.679]],
  [0.427, [0.975, 0.533, 0.677]],
  [0.429, [0.975, 0.533, 0.677]],
  [0.431, [0.975, 0.526, 0.674]],
  [0.432, [0.975, 0.526, 0.674]],
  [0.434, [0.975, 0.519, 0.672]],
  [0.436, [0.975, 0.519, 0.672]],
  [0.438, [0.974, 0.513, 0.67]],
  [0.44, [0.974, 0.513, 0.67]],
  [0.442, [0.974, 0.506, 0.667]],
  [0.444, [0.974, 0.506, 0.667]],
  [0.446, [0.974, 0.499, 0.665]],
  [0.448, [0.974, 0.499, 0.665]],
  [0.45, [0.973, 0.492, 0.662]],
  [0.452, [0.973, 0.492, 0.662]],
  [0.454, [0.973, 0.486, 0.66]],
  [0.456, [0.973, 0.486, 0.66]],
  [0.458, [0.973, 0.479, 0.657]],
  [0.46, [0.973, 0.479, 0.657]],
  [0.462, [0.972, 0.472, 0.655]],
  [0.464, [0.972, 0.472, 0.655]],
  [0.466, [0.972, 0.465, 0.652]],
  [0.468, [0.972, 0.465, 0.652]],
  [0.47, [0.971, 0.459, 0.65]],
  [0.472, [0.971, 0.459, 0.65]],
  [0.474, [0.971, 0.452, 0.647]],
  [0.476, [0.971, 0.452, 0.647]],
  [0.477, [0.971, 0.445, 0.645]],
  [0.479, [0.971, 0.445, 0.645]],
  [0.481, [0.97, 0.438, 0.642]],
  [0.483, [0.97, 0.438, 0.642]],
  [0.485, [0.97, 0.432, 0.64]],
  [0.487, [0.97, 0.432, 0.64]],
  [0.489, [0.97, 0.425, 0.638]],
  [0.491, [0.97, 0.425, 0.638]],
  [0.493, [0.969, 0.418, 0.635]],
  [0.495, [0.969, 0.418, 0.635]],
  [0.497, [0.969, 0.411, 0.633]],
  [0.499, [0.969, 0.411, 0.633]],
  [0.501, [0.967, 0.405, 0.631]],
  [0.503, [0.967, 0.405, 0.631]],
  [0.505, [0.964, 0.398, 0.63]],
  [0.507, [0.964, 0.398, 0.63]],
  [0.509, [0.961, 0.392, 0.628]],
  [0.511, [0.961, 0.392, 0.628]],
  [0.513, [0.957, 0.385, 0.627]],
  [0.515, [0.957, 0.385, 0.627]],
  [0.517, [0.954, 0.379, 0.626]],
  [0.519, [0.954, 0.379, 0.626]],
  [0.521, [0.951, 0.373, 0.625]],
  [0.523, [0.951, 0.373, 0.625]],
  [0.524, [0.948, 0.366, 0.623]],
  [0.526, [0.948, 0.366, 0.623]],
  [0.528, [0.945, 0.36, 0.622]],
  [0.53, [0.945, 0.36, 0.622]],
  [0.532, [0.941, 0.353, 0.621]],
  [0.534, [0.941, 0.353, 0.621]],
  [0.536, [0.938, 0.347, 0.62]],
  [0.538, [0.938, 0.347, 0.62]],
  [0.54, [0.935, 0.341, 0.618]],
  [0.542, [0.935, 0.341, 0.618]],
  [0.544, [0.932, 0.334, 0.617]],
  [0.546, [0.932, 0.334, 0.617]],
  [0.548, [0.929, 0.328, 0.616]],
  [0.55, [0.929, 0.328, 0.616]],
  [0.552, [0.925, 0.321, 0.615]],
  [0.554, [0.925, 0.321, 0.615]],
  [0.556, [0.922, 0.315, 0.614]],
  [0.558, [0.922, 0.315, 0.614]],
  [0.56, [0.919, 0.309, 0.612]],
  [0.562, [0.919, 0.309, 0.612]],
  [0.564, [0.916, 0.302, 0.611]],
  [0.566, [0.916, 0.302, 0.611]],
  [0.568, [0.913, 0.296, 0.61]],
  [0.569, [0.913, 0.296, 0.61]],
  [0.571, [0.909, 0.289, 0.609]],
  [0.573, [0.909, 0.289, 0.609]],
  [0.575, [0.906, 0.283, 0.607]],
  [0.577, [0.906, 0.283, 0.607]],
  [0.579, [0.903, 0.277, 0.606]],
  [0.581, [0.903, 0.277, 0.606]],
  [0.583, [0.9, 0.27, 0.605]],
  [0.585, [0.9, 0.27, 0.605]],
  [0.587, [0.897, 0.264, 0.604]],
  [0.589, [0.897, 0.264, 0.604]],
  [0.591, [0.893, 0.258, 0.602]],
  [0.593, [0.893, 0.258, 0.602]],
  [0.595, [0.89, 0.251, 0.601]],
  [0.597, [0.89, 0.251, 0.601]],
  [0.599, [0.887, 0.245, 0.6]],
  [0.601, [0.887, 0.245, 0.6]],
  [0.603, [0.884, 0.238, 0.599]],
  [0.605, [0.884, 0.238, 0.599]],
  [0.607, [0.881, 0.232, 0.598]],
  [0.609, [0.881, 0.232, 0.598]],
  [0.611, [0.877, 0.226, 0.596]],
  [0.613, [0.877, 0.226, 0.596]],
  [0.614, [0.874, 0.219, 0.595]],
  [0.616, [0.874, 0.219, 0.595]],
  [0.618, [0.871, 0.213, 0.594]],
  [0.62, [0.871, 0.213, 0.594]],
  [0.622, [0.868, 0.206, 0.593]],
  [0.624, [0.868, 0.206, 0.593]],
  [0.626, [0.863, 0.2, 0.59]],
  [0.628, [0.863, 0.2, 0.59]],
  [0.63, [0.857, 0.194, 0.587]],
  [0.632, [0.857, 0.194, 0.587]],
  [0.634, [0.851, 0.187, 0.584]],
  [0.636, [0.851, 0.187, 0.584]],
  [0.638, [0.846, 0.181, 0.581]],
  [0.64, [0.846, 0.181, 0.581]],
  [0.642, [0.84, 0.175, 0.578]],
  [0.644, [0.84, 0.175, 0.578]],
  [0.646, [0.834, 0.169, 0.575]],
  [0.648, [0.834, 0.169, 0.575]],
  [0.65, [0.828, 0.162, 0.572]],
  [0.652, [0.828, 0.162, 0.572]],
  [0.654, [0.823, 0.156, 0.569]],
  [0.656, [0.823, 0.156, 0.569]],
  [0.658, [0.817, 0.15, 0.566]],
  [0.659, [0.817, 0.15, 0.566]],
  [0.661, [0.811, 0.144, 0.563]],
  [0.663, [0.811, 0.144, 0.563]],
  [0.665, [0.805, 0.137, 0.559]],
  [0.667, [0.805, 0.137, 0.559]],
  [0.669, [0.799, 0.131, 0.556]],
  [0.671, [0.799, 0.131, 0.556]],
  [0.673, [0.794, 0.125, 0.553]],
  [0.675, [0.794, 0.125, 0.553]],
  [0.677, [0.788, 0.118, 0.55]],
  [0.679, [0.788, 0.118, 0.55]],
  [0.681, [0.782, 0.112, 0.547]],
  [0.683, [0.782, 0.112, 0.547]],
  [0.685, [0.776, 0.106, 0.544]],
  [0.687, [0.776, 0.106, 0.544]],
  [0.689, [0.771, 0.1, 0.541]],
  [0.691, [0.771, 0.1, 0.541]],
  [0.693, [0.765, 0.093, 0.538]],
  [0.695, [0.765, 0.093, 0.538]],
  [0.697, [0.759, 0.087, 0.535]],
  [0.699, [0.759, 0.087, 0.535]],
  [0.701, [0.753, 0.081, 0.532]],
  [0.703, [0.753, 0.081, 0.532]],
  [0.705, [0.747, 0.075, 0.529]],
  [0.706, [0.747, 0.075, 0.529]],
  [0.708, [0.742, 0.068, 0.526]],
  [0.71, [0.742, 0.068, 0.526]],
  [0.712, [0.736, 0.062, 0.523]],
  [0.714, [0.736, 0.062, 0.523]],
  [0.716, [0.73, 0.056, 0.519]],
  [0.718, [0.73, 0.056, 0.519]],
  [0.72, [0.724, 0.049, 0.516]],
  [0.722, [0.724, 0.049, 0.516]],
  [0.724, [0.718, 0.043, 0.513]],
  [0.726, [0.718, 0.043, 0.513]],
  [0.728, [0.713, 0.037, 0.51]],
  [0.73, [0.713, 0.037, 0.51]],
  [0.732, [0.707, 0.031, 0.507]],
  [0.734, [0.707, 0.031, 0.507]],
  [0.736, [0.701, 0.024, 0.504]],
  [0.738, [0.701, 0.024, 0.504]],
  [0.74, [0.695, 0.018, 0.501]],
  [0.742, [0.695, 0.018, 0.501]],
  [0.744, [0.69, 0.012, 0.498]],
  [0.746, [0.69, 0.012, 0.498]],
  [0.748, [0.684, 5e-3, 0.495]],
  [0.75, [0.684, 5e-3, 0.495]],
  [0.751, [0.678, 4e-3, 0.493]],
  [0.753, [0.678, 4e-3, 0.493]],
  [0.755, [0.671, 4e-3, 0.493]],
  [0.757, [0.671, 4e-3, 0.493]],
  [0.759, [0.665, 4e-3, 0.492]],
  [0.761, [0.665, 4e-3, 0.492]],
  [0.763, [0.658, 4e-3, 0.491]],
  [0.765, [0.658, 4e-3, 0.491]],
  [0.767, [0.652, 4e-3, 0.49]],
  [0.769, [0.652, 4e-3, 0.49]],
  [0.771, [0.646, 4e-3, 0.489]],
  [0.773, [0.646, 4e-3, 0.489]],
  [0.775, [0.639, 4e-3, 0.488]],
  [0.777, [0.639, 4e-3, 0.488]],
  [0.779, [0.633, 4e-3, 0.487]],
  [0.781, [0.633, 4e-3, 0.487]],
  [0.783, [0.626, 4e-3, 0.487]],
  [0.785, [0.626, 4e-3, 0.487]],
  [0.787, [0.62, 4e-3, 0.486]],
  [0.789, [0.62, 4e-3, 0.486]],
  [0.791, [0.614, 4e-3, 0.485]],
  [0.793, [0.614, 4e-3, 0.485]],
  [0.795, [0.607, 4e-3, 0.484]],
  [0.796, [0.607, 4e-3, 0.484]],
  [0.798, [0.601, 4e-3, 0.483]],
  [0.8, [0.601, 4e-3, 0.483]],
  [0.802, [0.594, 4e-3, 0.482]],
  [0.804, [0.594, 4e-3, 0.482]],
  [0.806, [0.588, 4e-3, 0.481]],
  [0.808, [0.588, 4e-3, 0.481]],
  [0.81, [0.582, 4e-3, 0.481]],
  [0.812, [0.582, 4e-3, 0.481]],
  [0.814, [0.575, 4e-3, 0.48]],
  [0.816, [0.575, 4e-3, 0.48]],
  [0.818, [0.569, 4e-3, 0.479]],
  [0.82, [0.569, 4e-3, 0.479]],
  [0.822, [0.562, 4e-3, 0.478]],
  [0.824, [0.562, 4e-3, 0.478]],
  [0.826, [0.556, 4e-3, 0.477]],
  [0.828, [0.556, 4e-3, 0.477]],
  [0.83, [0.55, 4e-3, 0.476]],
  [0.832, [0.55, 4e-3, 0.476]],
  [0.834, [0.543, 4e-3, 0.475]],
  [0.836, [0.543, 4e-3, 0.475]],
  [0.838, [0.537, 4e-3, 0.475]],
  [0.84, [0.537, 4e-3, 0.475]],
  [0.841, [0.53, 4e-3, 0.474]],
  [0.843, [0.53, 4e-3, 0.474]],
  [0.845, [0.524, 4e-3, 0.473]],
  [0.847, [0.524, 4e-3, 0.473]],
  [0.849, [0.518, 4e-3, 0.472]],
  [0.851, [0.518, 4e-3, 0.472]],
  [0.853, [0.511, 4e-3, 0.471]],
  [0.855, [0.511, 4e-3, 0.471]],
  [0.857, [0.505, 4e-3, 0.47]],
  [0.859, [0.505, 4e-3, 0.47]],
  [0.861, [0.498, 4e-3, 0.469]],
  [0.863, [0.498, 4e-3, 0.469]],
  [0.865, [0.492, 4e-3, 0.468]],
  [0.867, [0.492, 4e-3, 0.468]],
  [0.869, [0.486, 4e-3, 0.468]],
  [0.871, [0.486, 4e-3, 0.468]],
  [0.873, [0.479, 4e-3, 0.467]],
  [0.875, [0.479, 4e-3, 0.467]],
  [0.877, [0.473, 4e-3, 0.465]],
  [0.879, [0.473, 4e-3, 0.465]],
  [0.881, [0.467, 4e-3, 0.464]],
  [0.883, [0.467, 4e-3, 0.464]],
  [0.885, [0.461, 4e-3, 0.462]],
  [0.886, [0.461, 4e-3, 0.462]],
  [0.888, [0.455, 3e-3, 0.46]],
  [0.89, [0.455, 3e-3, 0.46]],
  [0.892, [0.449, 3e-3, 0.459]],
  [0.894, [0.449, 3e-3, 0.459]],
  [0.896, [0.443, 3e-3, 0.457]],
  [0.898, [0.443, 3e-3, 0.457]],
  [0.9, [0.437, 3e-3, 0.456]],
  [0.902, [0.437, 3e-3, 0.456]],
  [0.904, [0.431, 3e-3, 0.454]],
  [0.906, [0.431, 3e-3, 0.454]],
  [0.908, [0.425, 3e-3, 0.452]],
  [0.91, [0.425, 3e-3, 0.452]],
  [0.912, [0.419, 3e-3, 0.451]],
  [0.914, [0.419, 3e-3, 0.451]],
  [0.916, [0.413, 3e-3, 0.449]],
  [0.918, [0.413, 3e-3, 0.449]],
  [0.92, [0.407, 2e-3, 0.448]],
  [0.922, [0.407, 2e-3, 0.448]],
  [0.924, [0.401, 2e-3, 0.446]],
  [0.926, [0.401, 2e-3, 0.446]],
  [0.928, [0.395, 2e-3, 0.444]],
  [0.93, [0.395, 2e-3, 0.444]],
  [0.932, [0.389, 2e-3, 0.443]],
  [0.933, [0.389, 2e-3, 0.443]],
  [0.935, [0.383, 2e-3, 0.441]],
  [0.937, [0.383, 2e-3, 0.441]],
  [0.939, [0.377, 2e-3, 0.44]],
  [0.941, [0.377, 2e-3, 0.44]],
  [0.943, [0.371, 2e-3, 0.438]],
  [0.945, [0.371, 2e-3, 0.438]],
  [0.947, [0.365, 2e-3, 0.436]],
  [0.949, [0.365, 2e-3, 0.436]],
  [0.951, [0.359, 1e-3, 0.435]],
  [0.953, [0.359, 1e-3, 0.435]],
  [0.955, [0.353, 1e-3, 0.433]],
  [0.957, [0.353, 1e-3, 0.433]],
  [0.959, [0.347, 1e-3, 0.432]],
  [0.961, [0.347, 1e-3, 0.432]],
  [0.963, [0.341, 1e-3, 0.43]],
  [0.965, [0.341, 1e-3, 0.43]],
  [0.967, [0.335, 1e-3, 0.428]],
  [0.969, [0.335, 1e-3, 0.428]],
  [0.971, [0.328, 1e-3, 0.427]],
  [0.973, [0.328, 1e-3, 0.427]],
  [0.975, [0.322, 1e-3, 0.425]],
  [0.977, [0.322, 1e-3, 0.425]],
  [0.978, [0.316, 1e-3, 0.424]],
  [0.98, [0.316, 1e-3, 0.424]],
  [0.982, [0.31, 0, 0.422]],
  [0.984, [0.31, 0, 0.422]],
  [0.986, [0.304, 0, 0.42]],
  [0.988, [0.304, 0, 0.42]],
  [0.99, [0.298, 0, 0.419]],
  [0.992, [0.298, 0, 0.419]],
  [0.994, [0.292, 0, 0.417]],
  [0.996, [0.292, 0, 0.417]],
  [0.998, [0.286, 0, 0.416]],
  [1, [0.286, 0, 0.416]]
], _p = [
  [0, [1, 0.961, 0.941]],
  [2e-3, [1, 0.961, 0.941]],
  [4e-3, [1, 0.958, 0.937]],
  [6e-3, [1, 0.958, 0.937]],
  [8e-3, [1, 0.956, 0.934]],
  [0.01, [1, 0.956, 0.934]],
  [0.012, [1, 0.953, 0.93]],
  [0.014, [1, 0.953, 0.93]],
  [0.016, [1, 0.95, 0.926]],
  [0.018, [1, 0.95, 0.926]],
  [0.02, [0.999, 0.948, 0.923]],
  [0.022, [0.999, 0.948, 0.923]],
  [0.023, [0.999, 0.945, 0.919]],
  [0.025, [0.999, 0.945, 0.919]],
  [0.027, [0.999, 0.943, 0.915]],
  [0.029, [0.999, 0.943, 0.915]],
  [0.031, [0.999, 0.94, 0.912]],
  [0.033, [0.999, 0.94, 0.912]],
  [0.035, [0.999, 0.938, 0.908]],
  [0.037, [0.999, 0.938, 0.908]],
  [0.039, [0.999, 0.935, 0.904]],
  [0.041, [0.999, 0.935, 0.904]],
  [0.043, [0.999, 0.932, 0.901]],
  [0.045, [0.999, 0.932, 0.901]],
  [0.047, [0.999, 0.93, 0.897]],
  [0.049, [0.999, 0.93, 0.897]],
  [0.051, [0.998, 0.927, 0.893]],
  [0.053, [0.998, 0.927, 0.893]],
  [0.055, [0.998, 0.925, 0.89]],
  [0.057, [0.998, 0.925, 0.89]],
  [0.059, [0.998, 0.922, 0.886]],
  [0.061, [0.998, 0.922, 0.886]],
  [0.063, [0.998, 0.919, 0.882]],
  [0.065, [0.998, 0.919, 0.882]],
  [0.067, [0.998, 0.917, 0.878]],
  [0.068, [0.998, 0.917, 0.878]],
  [0.07, [0.998, 0.914, 0.875]],
  [0.072, [0.998, 0.914, 0.875]],
  [0.074, [0.998, 0.912, 0.871]],
  [0.076, [0.998, 0.912, 0.871]],
  [0.078, [0.998, 0.909, 0.867]],
  [0.08, [0.998, 0.909, 0.867]],
  [0.082, [0.997, 0.907, 0.864]],
  [0.084, [0.997, 0.907, 0.864]],
  [0.086, [0.997, 0.904, 0.86]],
  [0.088, [0.997, 0.904, 0.86]],
  [0.09, [0.997, 0.901, 0.856]],
  [0.092, [0.997, 0.901, 0.856]],
  [0.094, [0.997, 0.899, 0.853]],
  [0.096, [0.997, 0.899, 0.853]],
  [0.098, [0.997, 0.896, 0.849]],
  [0.1, [0.997, 0.896, 0.849]],
  [0.102, [0.997, 0.894, 0.845]],
  [0.104, [0.997, 0.894, 0.845]],
  [0.106, [0.997, 0.891, 0.842]],
  [0.108, [0.997, 0.891, 0.842]],
  [0.11, [0.997, 0.888, 0.838]],
  [0.112, [0.997, 0.888, 0.838]],
  [0.114, [0.996, 0.886, 0.834]],
  [0.115, [0.996, 0.886, 0.834]],
  [0.117, [0.996, 0.883, 0.83]],
  [0.119, [0.996, 0.883, 0.83]],
  [0.121, [0.996, 0.881, 0.827]],
  [0.123, [0.996, 0.881, 0.827]],
  [0.125, [0.996, 0.878, 0.823]],
  [0.127, [0.996, 0.878, 0.823]],
  [0.129, [0.996, 0.873, 0.817]],
  [0.131, [0.996, 0.873, 0.817]],
  [0.133, [0.996, 0.869, 0.811]],
  [0.135, [0.996, 0.869, 0.811]],
  [0.137, [0.995, 0.864, 0.805]],
  [0.139, [0.995, 0.864, 0.805]],
  [0.141, [0.995, 0.86, 0.799]],
  [0.143, [0.995, 0.86, 0.799]],
  [0.145, [0.995, 0.855, 0.793]],
  [0.147, [0.995, 0.855, 0.793]],
  [0.149, [0.995, 0.851, 0.787]],
  [0.151, [0.995, 0.851, 0.787]],
  [0.153, [0.994, 0.846, 0.781]],
  [0.155, [0.994, 0.846, 0.781]],
  [0.157, [0.994, 0.841, 0.775]],
  [0.159, [0.994, 0.841, 0.775]],
  [0.16, [0.994, 0.837, 0.769]],
  [0.162, [0.994, 0.837, 0.769]],
  [0.164, [0.994, 0.832, 0.762]],
  [0.166, [0.994, 0.832, 0.762]],
  [0.168, [0.993, 0.828, 0.756]],
  [0.17, [0.993, 0.828, 0.756]],
  [0.172, [0.993, 0.823, 0.75]],
  [0.174, [0.993, 0.823, 0.75]],
  [0.176, [0.993, 0.819, 0.744]],
  [0.178, [0.993, 0.819, 0.744]],
  [0.18, [0.993, 0.814, 0.738]],
  [0.182, [0.993, 0.814, 0.738]],
  [0.184, [0.992, 0.81, 0.732]],
  [0.186, [0.992, 0.81, 0.732]],
  [0.188, [0.992, 0.805, 0.726]],
  [0.19, [0.992, 0.805, 0.726]],
  [0.192, [0.992, 0.8, 0.72]],
  [0.194, [0.992, 0.8, 0.72]],
  [0.196, [0.992, 0.796, 0.714]],
  [0.198, [0.992, 0.796, 0.714]],
  [0.2, [0.991, 0.791, 0.708]],
  [0.202, [0.991, 0.791, 0.708]],
  [0.204, [0.991, 0.787, 0.702]],
  [0.205, [0.991, 0.787, 0.702]],
  [0.207, [0.991, 0.782, 0.696]],
  [0.209, [0.991, 0.782, 0.696]],
  [0.211, [0.991, 0.778, 0.69]],
  [0.213, [0.991, 0.778, 0.69]],
  [0.215, [0.99, 0.773, 0.684]],
  [0.217, [0.99, 0.773, 0.684]],
  [0.219, [0.99, 0.769, 0.678]],
  [0.221, [0.99, 0.769, 0.678]],
  [0.223, [0.99, 0.764, 0.672]],
  [0.225, [0.99, 0.764, 0.672]],
  [0.227, [0.99, 0.76, 0.666]],
  [0.229, [0.99, 0.76, 0.666]],
  [0.231, [0.989, 0.755, 0.66]],
  [0.233, [0.989, 0.755, 0.66]],
  [0.235, [0.989, 0.75, 0.654]],
  [0.237, [0.989, 0.75, 0.654]],
  [0.239, [0.989, 0.746, 0.648]],
  [0.241, [0.989, 0.746, 0.648]],
  [0.243, [0.989, 0.741, 0.642]],
  [0.245, [0.989, 0.741, 0.642]],
  [0.247, [0.988, 0.737, 0.636]],
  [0.249, [0.988, 0.737, 0.636]],
  [0.25, [0.988, 0.732, 0.63]],
  [0.252, [0.988, 0.732, 0.63]],
  [0.254, [0.988, 0.727, 0.624]],
  [0.256, [0.988, 0.727, 0.624]],
  [0.258, [0.988, 0.722, 0.618]],
  [0.26, [0.988, 0.722, 0.618]],
  [0.262, [0.988, 0.717, 0.613]],
  [0.264, [0.988, 0.717, 0.613]],
  [0.266, [0.988, 0.712, 0.607]],
  [0.268, [0.988, 0.712, 0.607]],
  [0.27, [0.988, 0.707, 0.601]],
  [0.272, [0.988, 0.707, 0.601]],
  [0.274, [0.988, 0.702, 0.595]],
  [0.276, [0.988, 0.702, 0.595]],
  [0.278, [0.988, 0.697, 0.589]],
  [0.28, [0.988, 0.697, 0.589]],
  [0.282, [0.988, 0.692, 0.584]],
  [0.284, [0.988, 0.692, 0.584]],
  [0.286, [0.988, 0.687, 0.578]],
  [0.288, [0.988, 0.687, 0.578]],
  [0.29, [0.988, 0.682, 0.572]],
  [0.292, [0.988, 0.682, 0.572]],
  [0.294, [0.988, 0.677, 0.566]],
  [0.295, [0.988, 0.677, 0.566]],
  [0.297, [0.988, 0.672, 0.561]],
  [0.299, [0.988, 0.672, 0.561]],
  [0.301, [0.988, 0.666, 0.555]],
  [0.303, [0.988, 0.666, 0.555]],
  [0.305, [0.988, 0.661, 0.549]],
  [0.307, [0.988, 0.661, 0.549]],
  [0.309, [0.988, 0.656, 0.543]],
  [0.311, [0.988, 0.656, 0.543]],
  [0.313, [0.988, 0.651, 0.537]],
  [0.315, [0.988, 0.651, 0.537]],
  [0.317, [0.988, 0.646, 0.532]],
  [0.319, [0.988, 0.646, 0.532]],
  [0.321, [0.988, 0.641, 0.526]],
  [0.323, [0.988, 0.641, 0.526]],
  [0.325, [0.988, 0.636, 0.52]],
  [0.327, [0.988, 0.636, 0.52]],
  [0.329, [0.988, 0.631, 0.514]],
  [0.331, [0.988, 0.631, 0.514]],
  [0.333, [0.988, 0.626, 0.508]],
  [0.335, [0.988, 0.626, 0.508]],
  [0.337, [0.988, 0.621, 0.503]],
  [0.339, [0.988, 0.621, 0.503]],
  [0.341, [0.988, 0.616, 0.497]],
  [0.342, [0.988, 0.616, 0.497]],
  [0.344, [0.988, 0.611, 0.491]],
  [0.346, [0.988, 0.611, 0.491]],
  [0.348, [0.988, 0.606, 0.485]],
  [0.35, [0.988, 0.606, 0.485]],
  [0.352, [0.988, 0.601, 0.48]],
  [0.354, [0.988, 0.601, 0.48]],
  [0.356, [0.988, 0.596, 0.474]],
  [0.358, [0.988, 0.596, 0.474]],
  [0.36, [0.988, 0.591, 0.468]],
  [0.362, [0.988, 0.591, 0.468]],
  [0.364, [0.988, 0.586, 0.462]],
  [0.366, [0.988, 0.586, 0.462]],
  [0.368, [0.988, 0.581, 0.456]],
  [0.37, [0.988, 0.581, 0.456]],
  [0.372, [0.988, 0.576, 0.451]],
  [0.374, [0.988, 0.576, 0.451]],
  [0.376, [0.988, 0.571, 0.445]],
  [0.378, [0.988, 0.571, 0.445]],
  [0.38, [0.988, 0.566, 0.44]],
  [0.382, [0.988, 0.566, 0.44]],
  [0.384, [0.988, 0.561, 0.435]],
  [0.386, [0.988, 0.561, 0.435]],
  [0.387, [0.988, 0.556, 0.43]],
  [0.389, [0.988, 0.556, 0.43]],
  [0.391, [0.988, 0.551, 0.426]],
  [0.393, [0.988, 0.551, 0.426]],
  [0.395, [0.988, 0.546, 0.421]],
  [0.397, [0.988, 0.546, 0.421]],
  [0.399, [0.987, 0.541, 0.416]],
  [0.401, [0.987, 0.541, 0.416]],
  [0.403, [0.987, 0.536, 0.411]],
  [0.405, [0.987, 0.536, 0.411]],
  [0.407, [0.987, 0.531, 0.406]],
  [0.409, [0.987, 0.531, 0.406]],
  [0.411, [0.987, 0.526, 0.401]],
  [0.413, [0.987, 0.526, 0.401]],
  [0.415, [0.987, 0.521, 0.396]],
  [0.417, [0.987, 0.521, 0.396]],
  [0.419, [0.987, 0.517, 0.391]],
  [0.421, [0.987, 0.517, 0.391]],
  [0.423, [0.987, 0.512, 0.386]],
  [0.425, [0.987, 0.512, 0.386]],
  [0.427, [0.987, 0.507, 0.381]],
  [0.429, [0.987, 0.507, 0.381]],
  [0.431, [0.986, 0.502, 0.376]],
  [0.432, [0.986, 0.502, 0.376]],
  [0.434, [0.986, 0.497, 0.371]],
  [0.436, [0.986, 0.497, 0.371]],
  [0.438, [0.986, 0.492, 0.366]],
  [0.44, [0.986, 0.492, 0.366]],
  [0.442, [0.986, 0.487, 0.362]],
  [0.444, [0.986, 0.487, 0.362]],
  [0.446, [0.986, 0.482, 0.357]],
  [0.448, [0.986, 0.482, 0.357]],
  [0.45, [0.986, 0.477, 0.352]],
  [0.452, [0.986, 0.477, 0.352]],
  [0.454, [0.986, 0.472, 0.347]],
  [0.456, [0.986, 0.472, 0.347]],
  [0.458, [0.986, 0.467, 0.342]],
  [0.46, [0.986, 0.467, 0.342]],
  [0.462, [0.985, 0.462, 0.337]],
  [0.464, [0.985, 0.462, 0.337]],
  [0.466, [0.985, 0.458, 0.332]],
  [0.468, [0.985, 0.458, 0.332]],
  [0.47, [0.985, 0.453, 0.327]],
  [0.472, [0.985, 0.453, 0.327]],
  [0.474, [0.985, 0.448, 0.322]],
  [0.476, [0.985, 0.448, 0.322]],
  [0.477, [0.985, 0.443, 0.317]],
  [0.479, [0.985, 0.443, 0.317]],
  [0.481, [0.985, 0.438, 0.312]],
  [0.483, [0.985, 0.438, 0.312]],
  [0.485, [0.985, 0.433, 0.307]],
  [0.487, [0.985, 0.433, 0.307]],
  [0.489, [0.985, 0.428, 0.302]],
  [0.491, [0.985, 0.428, 0.302]],
  [0.493, [0.984, 0.423, 0.298]],
  [0.495, [0.984, 0.423, 0.298]],
  [0.497, [0.984, 0.418, 0.293]],
  [0.499, [0.984, 0.418, 0.293]],
  [0.501, [0.984, 0.413, 0.288]],
  [0.503, [0.984, 0.413, 0.288]],
  [0.505, [0.982, 0.407, 0.285]],
  [0.507, [0.982, 0.407, 0.285]],
  [0.509, [0.981, 0.401, 0.281]],
  [0.511, [0.981, 0.401, 0.281]],
  [0.513, [0.979, 0.395, 0.277]],
  [0.515, [0.979, 0.395, 0.277]],
  [0.517, [0.978, 0.39, 0.274]],
  [0.519, [0.978, 0.39, 0.274]],
  [0.521, [0.976, 0.384, 0.27]],
  [0.523, [0.976, 0.384, 0.27]],
  [0.524, [0.975, 0.378, 0.266]],
  [0.526, [0.975, 0.378, 0.266]],
  [0.528, [0.973, 0.372, 0.263]],
  [0.53, [0.973, 0.372, 0.263]],
  [0.532, [0.972, 0.367, 0.259]],
  [0.534, [0.972, 0.367, 0.259]],
  [0.536, [0.97, 0.361, 0.255]],
  [0.538, [0.97, 0.361, 0.255]],
  [0.54, [0.969, 0.355, 0.251]],
  [0.542, [0.969, 0.355, 0.251]],
  [0.544, [0.967, 0.349, 0.248]],
  [0.546, [0.967, 0.349, 0.248]],
  [0.548, [0.966, 0.343, 0.244]],
  [0.55, [0.966, 0.343, 0.244]],
  [0.552, [0.964, 0.338, 0.24]],
  [0.554, [0.964, 0.338, 0.24]],
  [0.556, [0.963, 0.332, 0.237]],
  [0.558, [0.963, 0.332, 0.237]],
  [0.56, [0.961, 0.326, 0.233]],
  [0.562, [0.961, 0.326, 0.233]],
  [0.564, [0.96, 0.32, 0.229]],
  [0.566, [0.96, 0.32, 0.229]],
  [0.568, [0.958, 0.314, 0.226]],
  [0.569, [0.958, 0.314, 0.226]],
  [0.571, [0.957, 0.309, 0.222]],
  [0.573, [0.957, 0.309, 0.222]],
  [0.575, [0.956, 0.303, 0.218]],
  [0.577, [0.956, 0.303, 0.218]],
  [0.579, [0.954, 0.297, 0.215]],
  [0.581, [0.954, 0.297, 0.215]],
  [0.583, [0.953, 0.291, 0.211]],
  [0.585, [0.953, 0.291, 0.211]],
  [0.587, [0.951, 0.286, 0.207]],
  [0.589, [0.951, 0.286, 0.207]],
  [0.591, [0.95, 0.28, 0.203]],
  [0.593, [0.95, 0.28, 0.203]],
  [0.595, [0.948, 0.274, 0.2]],
  [0.597, [0.948, 0.274, 0.2]],
  [0.599, [0.947, 0.268, 0.196]],
  [0.601, [0.947, 0.268, 0.196]],
  [0.603, [0.945, 0.262, 0.192]],
  [0.605, [0.945, 0.262, 0.192]],
  [0.607, [0.944, 0.257, 0.189]],
  [0.609, [0.944, 0.257, 0.189]],
  [0.611, [0.942, 0.251, 0.185]],
  [0.613, [0.942, 0.251, 0.185]],
  [0.614, [0.941, 0.245, 0.181]],
  [0.616, [0.941, 0.245, 0.181]],
  [0.618, [0.939, 0.239, 0.178]],
  [0.62, [0.939, 0.239, 0.178]],
  [0.622, [0.938, 0.234, 0.174]],
  [0.624, [0.938, 0.234, 0.174]],
  [0.626, [0.934, 0.229, 0.171]],
  [0.628, [0.934, 0.229, 0.171]],
  [0.63, [0.93, 0.224, 0.17]],
  [0.632, [0.93, 0.224, 0.17]],
  [0.634, [0.926, 0.22, 0.168]],
  [0.636, [0.926, 0.22, 0.168]],
  [0.638, [0.921, 0.216, 0.166]],
  [0.64, [0.921, 0.216, 0.166]],
  [0.642, [0.917, 0.211, 0.164]],
  [0.644, [0.917, 0.211, 0.164]],
  [0.646, [0.912, 0.207, 0.162]],
  [0.648, [0.912, 0.207, 0.162]],
  [0.65, [0.908, 0.203, 0.16]],
  [0.652, [0.908, 0.203, 0.16]],
  [0.654, [0.903, 0.199, 0.158]],
  [0.656, [0.903, 0.199, 0.158]],
  [0.658, [0.899, 0.194, 0.157]],
  [0.659, [0.899, 0.194, 0.157]],
  [0.661, [0.895, 0.19, 0.155]],
  [0.663, [0.895, 0.19, 0.155]],
  [0.665, [0.89, 0.186, 0.153]],
  [0.667, [0.89, 0.186, 0.153]],
  [0.669, [0.886, 0.181, 0.151]],
  [0.671, [0.886, 0.181, 0.151]],
  [0.673, [0.881, 0.177, 0.149]],
  [0.675, [0.881, 0.177, 0.149]],
  [0.677, [0.877, 0.173, 0.147]],
  [0.679, [0.877, 0.173, 0.147]],
  [0.681, [0.872, 0.168, 0.146]],
  [0.683, [0.872, 0.168, 0.146]],
  [0.685, [0.868, 0.164, 0.144]],
  [0.687, [0.868, 0.164, 0.144]],
  [0.689, [0.864, 0.16, 0.142]],
  [0.691, [0.864, 0.16, 0.142]],
  [0.693, [0.859, 0.155, 0.14]],
  [0.695, [0.859, 0.155, 0.14]],
  [0.697, [0.855, 0.151, 0.138]],
  [0.699, [0.855, 0.151, 0.138]],
  [0.701, [0.85, 0.147, 0.136]],
  [0.703, [0.85, 0.147, 0.136]],
  [0.705, [0.846, 0.143, 0.134]],
  [0.706, [0.846, 0.143, 0.134]],
  [0.708, [0.841, 0.138, 0.133]],
  [0.71, [0.841, 0.138, 0.133]],
  [0.712, [0.837, 0.134, 0.131]],
  [0.714, [0.837, 0.134, 0.131]],
  [0.716, [0.833, 0.13, 0.129]],
  [0.718, [0.833, 0.13, 0.129]],
  [0.72, [0.828, 0.125, 0.127]],
  [0.722, [0.828, 0.125, 0.127]],
  [0.724, [0.824, 0.121, 0.125]],
  [0.726, [0.824, 0.121, 0.125]],
  [0.728, [0.819, 0.117, 0.123]],
  [0.73, [0.819, 0.117, 0.123]],
  [0.732, [0.815, 0.112, 0.122]],
  [0.734, [0.815, 0.112, 0.122]],
  [0.736, [0.81, 0.108, 0.12]],
  [0.738, [0.81, 0.108, 0.12]],
  [0.74, [0.806, 0.104, 0.118]],
  [0.742, [0.806, 0.104, 0.118]],
  [0.744, [0.802, 0.1, 0.116]],
  [0.746, [0.802, 0.1, 0.116]],
  [0.748, [0.797, 0.095, 0.114]],
  [0.75, [0.797, 0.095, 0.114]],
  [0.751, [0.793, 0.093, 0.113]],
  [0.753, [0.793, 0.093, 0.113]],
  [0.755, [0.788, 0.092, 0.112]],
  [0.757, [0.788, 0.092, 0.112]],
  [0.759, [0.783, 0.091, 0.111]],
  [0.761, [0.783, 0.091, 0.111]],
  [0.763, [0.779, 0.09, 0.11]],
  [0.765, [0.779, 0.09, 0.11]],
  [0.767, [0.774, 0.089, 0.109]],
  [0.769, [0.774, 0.089, 0.109]],
  [0.771, [0.769, 0.088, 0.108]],
  [0.773, [0.769, 0.088, 0.108]],
  [0.775, [0.765, 0.087, 0.107]],
  [0.777, [0.765, 0.087, 0.107]],
  [0.779, [0.76, 0.086, 0.106]],
  [0.781, [0.76, 0.086, 0.106]],
  [0.783, [0.755, 0.084, 0.105]],
  [0.785, [0.755, 0.084, 0.105]],
  [0.787, [0.75, 0.083, 0.104]],
  [0.789, [0.75, 0.083, 0.104]],
  [0.791, [0.746, 0.082, 0.103]],
  [0.793, [0.746, 0.082, 0.103]],
  [0.795, [0.741, 0.081, 0.102]],
  [0.796, [0.741, 0.081, 0.102]],
  [0.798, [0.736, 0.08, 0.101]],
  [0.8, [0.736, 0.08, 0.101]],
  [0.802, [0.732, 0.079, 0.1]],
  [0.804, [0.732, 0.079, 0.1]],
  [0.806, [0.727, 0.078, 0.099]],
  [0.808, [0.727, 0.078, 0.099]],
  [0.81, [0.722, 0.077, 0.098]],
  [0.812, [0.722, 0.077, 0.098]],
  [0.814, [0.718, 0.076, 0.097]],
  [0.816, [0.718, 0.076, 0.097]],
  [0.818, [0.713, 0.074, 0.096]],
  [0.82, [0.713, 0.074, 0.096]],
  [0.822, [0.708, 0.073, 0.095]],
  [0.824, [0.708, 0.073, 0.095]],
  [0.826, [0.704, 0.072, 0.094]],
  [0.828, [0.704, 0.072, 0.094]],
  [0.83, [0.699, 0.071, 0.093]],
  [0.832, [0.699, 0.071, 0.093]],
  [0.834, [0.694, 0.07, 0.092]],
  [0.836, [0.694, 0.07, 0.092]],
  [0.838, [0.69, 0.069, 0.091]],
  [0.84, [0.69, 0.069, 0.091]],
  [0.841, [0.685, 0.068, 0.09]],
  [0.843, [0.685, 0.068, 0.09]],
  [0.845, [0.68, 0.067, 0.089]],
  [0.847, [0.68, 0.067, 0.089]],
  [0.849, [0.676, 0.066, 0.088]],
  [0.851, [0.676, 0.066, 0.088]],
  [0.853, [0.671, 0.064, 0.087]],
  [0.855, [0.671, 0.064, 0.087]],
  [0.857, [0.666, 0.063, 0.086]],
  [0.859, [0.666, 0.063, 0.086]],
  [0.861, [0.662, 0.062, 0.085]],
  [0.863, [0.662, 0.062, 0.085]],
  [0.865, [0.657, 0.061, 0.084]],
  [0.867, [0.657, 0.061, 0.084]],
  [0.869, [0.652, 0.06, 0.083]],
  [0.871, [0.652, 0.06, 0.083]],
  [0.873, [0.648, 0.059, 0.082]],
  [0.875, [0.648, 0.059, 0.082]],
  [0.877, [0.64, 0.057, 0.081]],
  [0.879, [0.64, 0.057, 0.081]],
  [0.881, [0.633, 0.055, 0.081]],
  [0.883, [0.633, 0.055, 0.081]],
  [0.885, [0.625, 0.054, 0.08]],
  [0.886, [0.625, 0.054, 0.08]],
  [0.888, [0.618, 0.052, 0.079]],
  [0.89, [0.618, 0.052, 0.079]],
  [0.892, [0.61, 0.05, 0.078]],
  [0.894, [0.61, 0.05, 0.078]],
  [0.896, [0.602, 0.048, 0.077]],
  [0.898, [0.602, 0.048, 0.077]],
  [0.9, [0.595, 0.046, 0.076]],
  [0.902, [0.595, 0.046, 0.076]],
  [0.904, [0.587, 0.044, 0.075]],
  [0.906, [0.587, 0.044, 0.075]],
  [0.908, [0.579, 0.042, 0.074]],
  [0.91, [0.579, 0.042, 0.074]],
  [0.912, [0.572, 0.041, 0.073]],
  [0.914, [0.572, 0.041, 0.073]],
  [0.916, [0.564, 0.039, 0.072]],
  [0.918, [0.564, 0.039, 0.072]],
  [0.92, [0.556, 0.037, 0.071]],
  [0.922, [0.556, 0.037, 0.071]],
  [0.924, [0.549, 0.035, 0.07]],
  [0.926, [0.549, 0.035, 0.07]],
  [0.928, [0.541, 0.033, 0.069]],
  [0.93, [0.541, 0.033, 0.069]],
  [0.932, [0.534, 0.031, 0.068]],
  [0.933, [0.534, 0.031, 0.068]],
  [0.935, [0.526, 0.03, 0.067]],
  [0.937, [0.526, 0.03, 0.067]],
  [0.939, [0.518, 0.028, 0.066]],
  [0.941, [0.518, 0.028, 0.066]],
  [0.943, [0.511, 0.026, 0.065]],
  [0.945, [0.511, 0.026, 0.065]],
  [0.947, [0.503, 0.024, 0.064]],
  [0.949, [0.503, 0.024, 0.064]],
  [0.951, [0.495, 0.022, 0.063]],
  [0.953, [0.495, 0.022, 0.063]],
  [0.955, [0.488, 0.02, 0.062]],
  [0.957, [0.488, 0.02, 0.062]],
  [0.959, [0.48, 0.018, 0.061]],
  [0.961, [0.48, 0.018, 0.061]],
  [0.963, [0.473, 0.017, 0.06]],
  [0.965, [0.473, 0.017, 0.06]],
  [0.967, [0.465, 0.015, 0.059]],
  [0.969, [0.465, 0.015, 0.059]],
  [0.971, [0.457, 0.013, 0.058]],
  [0.973, [0.457, 0.013, 0.058]],
  [0.975, [0.45, 0.011, 0.057]],
  [0.977, [0.45, 0.011, 0.057]],
  [0.978, [0.442, 9e-3, 0.056]],
  [0.98, [0.442, 9e-3, 0.056]],
  [0.982, [0.434, 7e-3, 0.055]],
  [0.984, [0.434, 7e-3, 0.055]],
  [0.986, [0.427, 6e-3, 0.054]],
  [0.988, [0.427, 6e-3, 0.054]],
  [0.99, [0.419, 4e-3, 0.053]],
  [0.992, [0.419, 4e-3, 0.053]],
  [0.994, [0.412, 2e-3, 0.052]],
  [0.996, [0.412, 2e-3, 0.052]],
  [0.998, [0.404, 0, 0.051]],
  [1, [0.404, 0, 0.051]]
], vp = [
  [0, [1, 1, 0.898]],
  [2e-3, [1, 1, 0.898]],
  [4e-3, [0.999, 1, 0.893]],
  [6e-3, [0.999, 1, 0.893]],
  [8e-3, [0.998, 0.999, 0.887]],
  [0.01, [0.998, 0.999, 0.887]],
  [0.012, [0.997, 0.999, 0.882]],
  [0.014, [0.997, 0.999, 0.882]],
  [0.016, [0.996, 0.999, 0.876]],
  [0.018, [0.996, 0.999, 0.876]],
  [0.02, [0.995, 0.998, 0.871]],
  [0.022, [0.995, 0.998, 0.871]],
  [0.023, [0.994, 0.998, 0.866]],
  [0.025, [0.994, 0.998, 0.866]],
  [0.027, [0.993, 0.997, 0.86]],
  [0.029, [0.993, 0.997, 0.86]],
  [0.031, [0.992, 0.997, 0.855]],
  [0.033, [0.992, 0.997, 0.855]],
  [0.035, [0.991, 0.997, 0.849]],
  [0.037, [0.991, 0.997, 0.849]],
  [0.039, [0.99, 0.996, 0.844]],
  [0.041, [0.99, 0.996, 0.844]],
  [0.043, [0.989, 0.996, 0.838]],
  [0.045, [0.989, 0.996, 0.838]],
  [0.047, [0.988, 0.996, 0.833]],
  [0.049, [0.988, 0.996, 0.833]],
  [0.051, [0.987, 0.995, 0.828]],
  [0.053, [0.987, 0.995, 0.828]],
  [0.055, [0.986, 0.995, 0.822]],
  [0.057, [0.986, 0.995, 0.822]],
  [0.059, [0.985, 0.994, 0.817]],
  [0.061, [0.985, 0.994, 0.817]],
  [0.063, [0.984, 0.994, 0.811]],
  [0.065, [0.984, 0.994, 0.811]],
  [0.067, [0.983, 0.994, 0.806]],
  [0.068, [0.983, 0.994, 0.806]],
  [0.07, [0.982, 0.993, 0.801]],
  [0.072, [0.982, 0.993, 0.801]],
  [0.074, [0.981, 0.993, 0.795]],
  [0.076, [0.981, 0.993, 0.795]],
  [0.078, [0.98, 0.993, 0.79]],
  [0.08, [0.98, 0.993, 0.79]],
  [0.082, [0.979, 0.992, 0.784]],
  [0.084, [0.979, 0.992, 0.784]],
  [0.086, [0.978, 0.992, 0.779]],
  [0.088, [0.978, 0.992, 0.779]],
  [0.09, [0.977, 0.992, 0.774]],
  [0.092, [0.977, 0.992, 0.774]],
  [0.094, [0.976, 0.991, 0.768]],
  [0.096, [0.976, 0.991, 0.768]],
  [0.098, [0.975, 0.991, 0.763]],
  [0.1, [0.975, 0.991, 0.763]],
  [0.102, [0.974, 0.99, 0.757]],
  [0.104, [0.974, 0.99, 0.757]],
  [0.106, [0.973, 0.99, 0.752]],
  [0.108, [0.973, 0.99, 0.752]],
  [0.11, [0.972, 0.99, 0.746]],
  [0.112, [0.972, 0.99, 0.746]],
  [0.114, [0.971, 0.989, 0.741]],
  [0.115, [0.971, 0.989, 0.741]],
  [0.117, [0.97, 0.989, 0.736]],
  [0.119, [0.97, 0.989, 0.736]],
  [0.121, [0.969, 0.989, 0.73]],
  [0.123, [0.969, 0.989, 0.73]],
  [0.125, [0.968, 0.988, 0.725]],
  [0.127, [0.968, 0.988, 0.725]],
  [0.129, [0.964, 0.987, 0.722]],
  [0.131, [0.964, 0.987, 0.722]],
  [0.133, [0.961, 0.985, 0.72]],
  [0.135, [0.961, 0.985, 0.72]],
  [0.137, [0.957, 0.984, 0.717]],
  [0.139, [0.957, 0.984, 0.717]],
  [0.141, [0.953, 0.982, 0.714]],
  [0.143, [0.953, 0.982, 0.714]],
  [0.145, [0.95, 0.981, 0.712]],
  [0.147, [0.95, 0.981, 0.712]],
  [0.149, [0.946, 0.979, 0.709]],
  [0.151, [0.946, 0.979, 0.709]],
  [0.153, [0.942, 0.978, 0.706]],
  [0.155, [0.942, 0.978, 0.706]],
  [0.157, [0.939, 0.976, 0.703]],
  [0.159, [0.939, 0.976, 0.703]],
  [0.16, [0.935, 0.975, 0.701]],
  [0.162, [0.935, 0.975, 0.701]],
  [0.164, [0.931, 0.973, 0.698]],
  [0.166, [0.931, 0.973, 0.698]],
  [0.168, [0.928, 0.972, 0.695]],
  [0.17, [0.928, 0.972, 0.695]],
  [0.172, [0.924, 0.97, 0.693]],
  [0.174, [0.924, 0.97, 0.693]],
  [0.176, [0.92, 0.969, 0.69]],
  [0.178, [0.92, 0.969, 0.69]],
  [0.18, [0.916, 0.967, 0.687]],
  [0.182, [0.916, 0.967, 0.687]],
  [0.184, [0.913, 0.966, 0.685]],
  [0.186, [0.913, 0.966, 0.685]],
  [0.188, [0.909, 0.964, 0.682]],
  [0.19, [0.909, 0.964, 0.682]],
  [0.192, [0.905, 0.963, 0.679]],
  [0.194, [0.905, 0.963, 0.679]],
  [0.196, [0.902, 0.961, 0.676]],
  [0.198, [0.902, 0.961, 0.676]],
  [0.2, [0.898, 0.96, 0.674]],
  [0.202, [0.898, 0.96, 0.674]],
  [0.204, [0.894, 0.959, 0.671]],
  [0.205, [0.894, 0.959, 0.671]],
  [0.207, [0.891, 0.957, 0.668]],
  [0.209, [0.891, 0.957, 0.668]],
  [0.211, [0.887, 0.956, 0.666]],
  [0.213, [0.887, 0.956, 0.666]],
  [0.215, [0.883, 0.954, 0.663]],
  [0.217, [0.883, 0.954, 0.663]],
  [0.219, [0.88, 0.953, 0.66]],
  [0.221, [0.88, 0.953, 0.66]],
  [0.223, [0.876, 0.951, 0.657]],
  [0.225, [0.876, 0.951, 0.657]],
  [0.227, [0.872, 0.95, 0.655]],
  [0.229, [0.872, 0.95, 0.655]],
  [0.231, [0.869, 0.948, 0.652]],
  [0.233, [0.869, 0.948, 0.652]],
  [0.235, [0.865, 0.947, 0.649]],
  [0.237, [0.865, 0.947, 0.649]],
  [0.239, [0.861, 0.945, 0.647]],
  [0.241, [0.861, 0.945, 0.647]],
  [0.243, [0.857, 0.944, 0.644]],
  [0.245, [0.857, 0.944, 0.644]],
  [0.247, [0.854, 0.942, 0.641]],
  [0.249, [0.854, 0.942, 0.641]],
  [0.25, [0.85, 0.941, 0.639]],
  [0.252, [0.85, 0.941, 0.639]],
  [0.254, [0.844, 0.938, 0.636]],
  [0.256, [0.844, 0.938, 0.636]],
  [0.258, [0.839, 0.936, 0.633]],
  [0.26, [0.839, 0.936, 0.633]],
  [0.262, [0.833, 0.934, 0.631]],
  [0.264, [0.833, 0.934, 0.631]],
  [0.266, [0.828, 0.931, 0.628]],
  [0.268, [0.828, 0.931, 0.628]],
  [0.27, [0.823, 0.929, 0.626]],
  [0.272, [0.823, 0.929, 0.626]],
  [0.274, [0.817, 0.927, 0.623]],
  [0.276, [0.817, 0.927, 0.623]],
  [0.278, [0.812, 0.924, 0.62]],
  [0.28, [0.812, 0.924, 0.62]],
  [0.282, [0.806, 0.922, 0.618]],
  [0.284, [0.806, 0.922, 0.618]],
  [0.286, [0.801, 0.92, 0.615]],
  [0.288, [0.801, 0.92, 0.615]],
  [0.29, [0.795, 0.917, 0.613]],
  [0.292, [0.795, 0.917, 0.613]],
  [0.294, [0.79, 0.915, 0.61]],
  [0.295, [0.79, 0.915, 0.61]],
  [0.297, [0.785, 0.913, 0.608]],
  [0.299, [0.785, 0.913, 0.608]],
  [0.301, [0.779, 0.91, 0.605]],
  [0.303, [0.779, 0.91, 0.605]],
  [0.305, [0.774, 0.908, 0.602]],
  [0.307, [0.774, 0.908, 0.602]],
  [0.309, [0.768, 0.906, 0.6]],
  [0.311, [0.768, 0.906, 0.6]],
  [0.313, [0.763, 0.903, 0.597]],
  [0.315, [0.763, 0.903, 0.597]],
  [0.317, [0.758, 0.901, 0.595]],
  [0.319, [0.758, 0.901, 0.595]],
  [0.321, [0.752, 0.899, 0.592]],
  [0.323, [0.752, 0.899, 0.592]],
  [0.325, [0.747, 0.896, 0.589]],
  [0.327, [0.747, 0.896, 0.589]],
  [0.329, [0.741, 0.894, 0.587]],
  [0.331, [0.741, 0.894, 0.587]],
  [0.333, [0.736, 0.892, 0.584]],
  [0.335, [0.736, 0.892, 0.584]],
  [0.337, [0.731, 0.889, 0.582]],
  [0.339, [0.731, 0.889, 0.582]],
  [0.341, [0.725, 0.887, 0.579]],
  [0.342, [0.725, 0.887, 0.579]],
  [0.344, [0.72, 0.884, 0.577]],
  [0.346, [0.72, 0.884, 0.577]],
  [0.348, [0.714, 0.882, 0.574]],
  [0.35, [0.714, 0.882, 0.574]],
  [0.352, [0.709, 0.88, 0.571]],
  [0.354, [0.709, 0.88, 0.571]],
  [0.356, [0.703, 0.877, 0.569]],
  [0.358, [0.703, 0.877, 0.569]],
  [0.36, [0.698, 0.875, 0.566]],
  [0.362, [0.698, 0.875, 0.566]],
  [0.364, [0.693, 0.873, 0.564]],
  [0.366, [0.693, 0.873, 0.564]],
  [0.368, [0.687, 0.87, 0.561]],
  [0.37, [0.687, 0.87, 0.561]],
  [0.372, [0.682, 0.868, 0.558]],
  [0.374, [0.682, 0.868, 0.558]],
  [0.376, [0.676, 0.866, 0.556]],
  [0.378, [0.676, 0.866, 0.556]],
  [0.38, [0.669, 0.863, 0.553]],
  [0.382, [0.669, 0.863, 0.553]],
  [0.384, [0.663, 0.86, 0.551]],
  [0.386, [0.663, 0.86, 0.551]],
  [0.387, [0.656, 0.857, 0.548]],
  [0.389, [0.656, 0.857, 0.548]],
  [0.391, [0.65, 0.854, 0.546]],
  [0.393, [0.65, 0.854, 0.546]],
  [0.395, [0.643, 0.851, 0.543]],
  [0.397, [0.643, 0.851, 0.543]],
  [0.399, [0.637, 0.849, 0.54]],
  [0.401, [0.637, 0.849, 0.54]],
  [0.403, [0.63, 0.846, 0.538]],
  [0.405, [0.63, 0.846, 0.538]],
  [0.407, [0.624, 0.843, 0.535]],
  [0.409, [0.624, 0.843, 0.535]],
  [0.411, [0.617, 0.84, 0.533]],
  [0.413, [0.617, 0.84, 0.533]],
  [0.415, [0.611, 0.837, 0.53]],
  [0.417, [0.611, 0.837, 0.53]],
  [0.419, [0.604, 0.834, 0.527]],
  [0.421, [0.604, 0.834, 0.527]],
  [0.423, [0.598, 0.832, 0.525]],
  [0.425, [0.598, 0.832, 0.525]],
  [0.427, [0.591, 0.829, 0.522]],
  [0.429, [0.591, 0.829, 0.522]],
  [0.431, [0.585, 0.826, 0.52]],
  [0.432, [0.585, 0.826, 0.52]],
  [0.434, [0.578, 0.823, 0.517]],
  [0.436, [0.578, 0.823, 0.517]],
  [0.438, [0.572, 0.82, 0.515]],
  [0.44, [0.572, 0.82, 0.515]],
  [0.442, [0.565, 0.818, 0.512]],
  [0.444, [0.565, 0.818, 0.512]],
  [0.446, [0.559, 0.815, 0.509]],
  [0.448, [0.559, 0.815, 0.509]],
  [0.45, [0.552, 0.812, 0.507]],
  [0.452, [0.552, 0.812, 0.507]],
  [0.454, [0.546, 0.809, 0.504]],
  [0.456, [0.546, 0.809, 0.504]],
  [0.458, [0.539, 0.806, 0.502]],
  [0.46, [0.539, 0.806, 0.502]],
  [0.462, [0.533, 0.803, 0.499]],
  [0.464, [0.533, 0.803, 0.499]],
  [0.466, [0.526, 0.801, 0.496]],
  [0.468, [0.526, 0.801, 0.496]],
  [0.47, [0.519, 0.798, 0.494]],
  [0.472, [0.519, 0.798, 0.494]],
  [0.474, [0.513, 0.795, 0.491]],
  [0.476, [0.513, 0.795, 0.491]],
  [0.477, [0.506, 0.792, 0.489]],
  [0.479, [0.506, 0.792, 0.489]],
  [0.481, [0.5, 0.789, 0.486]],
  [0.483, [0.5, 0.789, 0.486]],
  [0.485, [0.493, 0.786, 0.484]],
  [0.487, [0.493, 0.786, 0.484]],
  [0.489, [0.487, 0.784, 0.481]],
  [0.491, [0.487, 0.784, 0.481]],
  [0.493, [0.48, 0.781, 0.478]],
  [0.495, [0.48, 0.781, 0.478]],
  [0.497, [0.474, 0.778, 0.476]],
  [0.499, [0.474, 0.778, 0.476]],
  [0.501, [0.467, 0.775, 0.473]],
  [0.503, [0.467, 0.775, 0.473]],
  [0.505, [0.46, 0.771, 0.469]],
  [0.507, [0.46, 0.771, 0.469]],
  [0.509, [0.454, 0.768, 0.466]],
  [0.511, [0.454, 0.768, 0.466]],
  [0.513, [0.447, 0.765, 0.462]],
  [0.515, [0.447, 0.765, 0.462]],
  [0.517, [0.44, 0.762, 0.459]],
  [0.519, [0.44, 0.762, 0.459]],
  [0.521, [0.433, 0.758, 0.456]],
  [0.523, [0.433, 0.758, 0.456]],
  [0.524, [0.427, 0.755, 0.452]],
  [0.526, [0.427, 0.755, 0.452]],
  [0.528, [0.42, 0.752, 0.449]],
  [0.53, [0.42, 0.752, 0.449]],
  [0.532, [0.413, 0.748, 0.445]],
  [0.534, [0.413, 0.748, 0.445]],
  [0.536, [0.406, 0.745, 0.442]],
  [0.538, [0.406, 0.745, 0.442]],
  [0.54, [0.4, 0.742, 0.438]],
  [0.542, [0.4, 0.742, 0.438]],
  [0.544, [0.393, 0.738, 0.435]],
  [0.546, [0.393, 0.738, 0.435]],
  [0.548, [0.386, 0.735, 0.431]],
  [0.55, [0.386, 0.735, 0.431]],
  [0.552, [0.379, 0.732, 0.428]],
  [0.554, [0.379, 0.732, 0.428]],
  [0.556, [0.372, 0.728, 0.425]],
  [0.558, [0.372, 0.728, 0.425]],
  [0.56, [0.366, 0.725, 0.421]],
  [0.562, [0.366, 0.725, 0.421]],
  [0.564, [0.359, 0.722, 0.418]],
  [0.566, [0.359, 0.722, 0.418]],
  [0.568, [0.352, 0.718, 0.414]],
  [0.569, [0.352, 0.718, 0.414]],
  [0.571, [0.345, 0.715, 0.411]],
  [0.573, [0.345, 0.715, 0.411]],
  [0.575, [0.339, 0.712, 0.407]],
  [0.577, [0.339, 0.712, 0.407]],
  [0.579, [0.332, 0.708, 0.404]],
  [0.581, [0.332, 0.708, 0.404]],
  [0.583, [0.325, 0.705, 0.4]],
  [0.585, [0.325, 0.705, 0.4]],
  [0.587, [0.318, 0.702, 0.397]],
  [0.589, [0.318, 0.702, 0.397]],
  [0.591, [0.312, 0.698, 0.394]],
  [0.593, [0.312, 0.698, 0.394]],
  [0.595, [0.305, 0.695, 0.39]],
  [0.597, [0.305, 0.695, 0.39]],
  [0.599, [0.298, 0.692, 0.387]],
  [0.601, [0.298, 0.692, 0.387]],
  [0.603, [0.291, 0.688, 0.383]],
  [0.605, [0.291, 0.688, 0.383]],
  [0.607, [0.285, 0.685, 0.38]],
  [0.609, [0.285, 0.685, 0.38]],
  [0.611, [0.278, 0.682, 0.376]],
  [0.613, [0.278, 0.682, 0.376]],
  [0.614, [0.271, 0.678, 0.373]],
  [0.616, [0.271, 0.678, 0.373]],
  [0.618, [0.264, 0.675, 0.369]],
  [0.62, [0.264, 0.675, 0.369]],
  [0.622, [0.257, 0.672, 0.366]],
  [0.624, [0.257, 0.672, 0.366]],
  [0.626, [0.253, 0.668, 0.363]],
  [0.628, [0.253, 0.668, 0.363]],
  [0.63, [0.249, 0.663, 0.36]],
  [0.632, [0.249, 0.663, 0.36]],
  [0.634, [0.245, 0.658, 0.356]],
  [0.636, [0.245, 0.658, 0.356]],
  [0.638, [0.242, 0.653, 0.353]],
  [0.64, [0.242, 0.653, 0.353]],
  [0.642, [0.238, 0.648, 0.35]],
  [0.644, [0.238, 0.648, 0.35]],
  [0.646, [0.234, 0.644, 0.347]],
  [0.648, [0.234, 0.644, 0.347]],
  [0.65, [0.23, 0.639, 0.344]],
  [0.652, [0.23, 0.639, 0.344]],
  [0.654, [0.227, 0.634, 0.34]],
  [0.656, [0.227, 0.634, 0.34]],
  [0.658, [0.223, 0.629, 0.337]],
  [0.659, [0.223, 0.629, 0.337]],
  [0.661, [0.219, 0.624, 0.334]],
  [0.663, [0.219, 0.624, 0.334]],
  [0.665, [0.216, 0.62, 0.331]],
  [0.667, [0.216, 0.62, 0.331]],
  [0.669, [0.212, 0.615, 0.328]],
  [0.671, [0.212, 0.615, 0.328]],
  [0.673, [0.208, 0.61, 0.324]],
  [0.675, [0.208, 0.61, 0.324]],
  [0.677, [0.205, 0.605, 0.321]],
  [0.679, [0.205, 0.605, 0.321]],
  [0.681, [0.201, 0.6, 0.318]],
  [0.683, [0.201, 0.6, 0.318]],
  [0.685, [0.197, 0.596, 0.315]],
  [0.687, [0.197, 0.596, 0.315]],
  [0.689, [0.194, 0.591, 0.312]],
  [0.691, [0.194, 0.591, 0.312]],
  [0.693, [0.19, 0.586, 0.308]],
  [0.695, [0.19, 0.586, 0.308]],
  [0.697, [0.186, 0.581, 0.305]],
  [0.699, [0.186, 0.581, 0.305]],
  [0.701, [0.182, 0.576, 0.302]],
  [0.703, [0.182, 0.576, 0.302]],
  [0.705, [0.179, 0.572, 0.299]],
  [0.706, [0.179, 0.572, 0.299]],
  [0.708, [0.175, 0.567, 0.296]],
  [0.71, [0.175, 0.567, 0.296]],
  [0.712, [0.171, 0.562, 0.292]],
  [0.714, [0.171, 0.562, 0.292]],
  [0.716, [0.168, 0.557, 0.289]],
  [0.718, [0.168, 0.557, 0.289]],
  [0.72, [0.164, 0.552, 0.286]],
  [0.722, [0.164, 0.552, 0.286]],
  [0.724, [0.16, 0.548, 0.283]],
  [0.726, [0.16, 0.548, 0.283]],
  [0.728, [0.157, 0.543, 0.28]],
  [0.73, [0.157, 0.543, 0.28]],
  [0.732, [0.153, 0.538, 0.276]],
  [0.734, [0.153, 0.538, 0.276]],
  [0.736, [0.149, 0.533, 0.273]],
  [0.738, [0.149, 0.533, 0.273]],
  [0.74, [0.146, 0.528, 0.27]],
  [0.742, [0.146, 0.528, 0.27]],
  [0.744, [0.142, 0.524, 0.267]],
  [0.746, [0.142, 0.524, 0.267]],
  [0.748, [0.138, 0.519, 0.264]],
  [0.75, [0.138, 0.519, 0.264]],
  [0.751, [0.134, 0.515, 0.262]],
  [0.753, [0.134, 0.515, 0.262]],
  [0.755, [0.13, 0.512, 0.26]],
  [0.757, [0.13, 0.512, 0.26]],
  [0.759, [0.125, 0.508, 0.259]],
  [0.761, [0.125, 0.508, 0.259]],
  [0.763, [0.121, 0.505, 0.257]],
  [0.765, [0.121, 0.505, 0.257]],
  [0.767, [0.117, 0.501, 0.256]],
  [0.769, [0.117, 0.501, 0.256]],
  [0.771, [0.112, 0.498, 0.254]],
  [0.773, [0.112, 0.498, 0.254]],
  [0.775, [0.108, 0.494, 0.253]],
  [0.777, [0.108, 0.494, 0.253]],
  [0.779, [0.104, 0.491, 0.251]],
  [0.781, [0.104, 0.491, 0.251]],
  [0.783, [0.1, 0.488, 0.25]],
  [0.785, [0.1, 0.488, 0.25]],
  [0.787, [0.095, 0.484, 0.248]],
  [0.789, [0.095, 0.484, 0.248]],
  [0.791, [0.091, 0.481, 0.247]],
  [0.793, [0.091, 0.481, 0.247]],
  [0.795, [0.087, 0.477, 0.245]],
  [0.796, [0.087, 0.477, 0.245]],
  [0.798, [0.082, 0.474, 0.244]],
  [0.8, [0.082, 0.474, 0.244]],
  [0.802, [0.078, 0.47, 0.242]],
  [0.804, [0.078, 0.47, 0.242]],
  [0.806, [0.074, 0.467, 0.241]],
  [0.808, [0.074, 0.467, 0.241]],
  [0.81, [0.069, 0.463, 0.239]],
  [0.812, [0.069, 0.463, 0.239]],
  [0.814, [0.065, 0.46, 0.238]],
  [0.816, [0.065, 0.46, 0.238]],
  [0.818, [0.061, 0.457, 0.237]],
  [0.82, [0.061, 0.457, 0.237]],
  [0.822, [0.057, 0.453, 0.235]],
  [0.824, [0.057, 0.453, 0.235]],
  [0.826, [0.052, 0.45, 0.234]],
  [0.828, [0.052, 0.45, 0.234]],
  [0.83, [0.048, 0.446, 0.232]],
  [0.832, [0.048, 0.446, 0.232]],
  [0.834, [0.044, 0.443, 0.231]],
  [0.836, [0.044, 0.443, 0.231]],
  [0.838, [0.039, 0.439, 0.229]],
  [0.84, [0.039, 0.439, 0.229]],
  [0.841, [0.035, 0.436, 0.228]],
  [0.843, [0.035, 0.436, 0.228]],
  [0.845, [0.031, 0.432, 0.226]],
  [0.847, [0.031, 0.432, 0.226]],
  [0.849, [0.026, 0.429, 0.225]],
  [0.851, [0.026, 0.429, 0.225]],
  [0.853, [0.022, 0.425, 0.223]],
  [0.855, [0.022, 0.425, 0.223]],
  [0.857, [0.018, 0.422, 0.222]],
  [0.859, [0.018, 0.422, 0.222]],
  [0.861, [0.013, 0.419, 0.22]],
  [0.863, [0.013, 0.419, 0.22]],
  [0.865, [9e-3, 0.415, 0.219]],
  [0.867, [9e-3, 0.415, 0.219]],
  [0.869, [5e-3, 0.412, 0.217]],
  [0.871, [5e-3, 0.412, 0.217]],
  [0.873, [1e-3, 0.408, 0.216]],
  [0.875, [1e-3, 0.408, 0.216]],
  [0.877, [0, 0.404, 0.214]],
  [0.879, [0, 0.404, 0.214]],
  [0.881, [0, 0.4, 0.212]],
  [0.883, [0, 0.4, 0.212]],
  [0.885, [0, 0.395, 0.211]],
  [0.886, [0, 0.395, 0.211]],
  [0.888, [0, 0.391, 0.209]],
  [0.89, [0, 0.391, 0.209]],
  [0.892, [0, 0.387, 0.207]],
  [0.894, [0, 0.387, 0.207]],
  [0.896, [0, 0.383, 0.206]],
  [0.898, [0, 0.383, 0.206]],
  [0.9, [0, 0.378, 0.204]],
  [0.902, [0, 0.378, 0.204]],
  [0.904, [0, 0.374, 0.202]],
  [0.906, [0, 0.374, 0.202]],
  [0.908, [0, 0.37, 0.2]],
  [0.91, [0, 0.37, 0.2]],
  [0.912, [0, 0.365, 0.199]],
  [0.914, [0, 0.365, 0.199]],
  [0.916, [0, 0.361, 0.197]],
  [0.918, [0, 0.361, 0.197]],
  [0.92, [0, 0.357, 0.195]],
  [0.922, [0, 0.357, 0.195]],
  [0.924, [0, 0.352, 0.194]],
  [0.926, [0, 0.352, 0.194]],
  [0.928, [0, 0.348, 0.192]],
  [0.93, [0, 0.348, 0.192]],
  [0.932, [0, 0.344, 0.19]],
  [0.933, [0, 0.344, 0.19]],
  [0.935, [0, 0.339, 0.188]],
  [0.937, [0, 0.339, 0.188]],
  [0.939, [0, 0.335, 0.187]],
  [0.941, [0, 0.335, 0.187]],
  [0.943, [0, 0.331, 0.185]],
  [0.945, [0, 0.331, 0.185]],
  [0.947, [0, 0.327, 0.183]],
  [0.949, [0, 0.327, 0.183]],
  [0.951, [0, 0.322, 0.181]],
  [0.953, [0, 0.322, 0.181]],
  [0.955, [0, 0.318, 0.18]],
  [0.957, [0, 0.318, 0.18]],
  [0.959, [0, 0.314, 0.178]],
  [0.961, [0, 0.314, 0.178]],
  [0.963, [0, 0.309, 0.176]],
  [0.965, [0, 0.309, 0.176]],
  [0.967, [0, 0.305, 0.175]],
  [0.969, [0, 0.305, 0.175]],
  [0.971, [0, 0.301, 0.173]],
  [0.973, [0, 0.301, 0.173]],
  [0.975, [0, 0.296, 0.171]],
  [0.977, [0, 0.296, 0.171]],
  [0.978, [0, 0.292, 0.169]],
  [0.98, [0, 0.292, 0.169]],
  [0.982, [0, 0.288, 0.168]],
  [0.984, [0, 0.288, 0.168]],
  [0.986, [0, 0.284, 0.166]],
  [0.988, [0, 0.284, 0.166]],
  [0.99, [0, 0.279, 0.164]],
  [0.992, [0, 0.279, 0.164]],
  [0.994, [0, 0.275, 0.163]],
  [0.996, [0, 0.275, 0.163]],
  [0.998, [0, 0.271, 0.161]],
  [1, [0, 0.271, 0.161]]
], yp = [
  [0, [1, 1, 0.851]],
  [2e-3, [1, 1, 0.851]],
  [4e-3, [0.998, 0.999, 0.846]],
  [6e-3, [0.998, 0.999, 0.846]],
  [8e-3, [0.996, 0.998, 0.841]],
  [0.01, [0.996, 0.998, 0.841]],
  [0.012, [0.993, 0.997, 0.836]],
  [0.014, [0.993, 0.997, 0.836]],
  [0.016, [0.991, 0.997, 0.831]],
  [0.018, [0.991, 0.997, 0.831]],
  [0.02, [0.989, 0.996, 0.826]],
  [0.022, [0.989, 0.996, 0.826]],
  [0.023, [0.987, 0.995, 0.821]],
  [0.025, [0.987, 0.995, 0.821]],
  [0.027, [0.984, 0.994, 0.817]],
  [0.029, [0.984, 0.994, 0.817]],
  [0.031, [0.982, 0.993, 0.812]],
  [0.033, [0.982, 0.993, 0.812]],
  [0.035, [0.98, 0.992, 0.807]],
  [0.037, [0.98, 0.992, 0.807]],
  [0.039, [0.978, 0.991, 0.802]],
  [0.041, [0.978, 0.991, 0.802]],
  [0.043, [0.976, 0.991, 0.797]],
  [0.045, [0.976, 0.991, 0.797]],
  [0.047, [0.973, 0.99, 0.792]],
  [0.049, [0.973, 0.99, 0.792]],
  [0.051, [0.971, 0.989, 0.787]],
  [0.053, [0.971, 0.989, 0.787]],
  [0.055, [0.969, 0.988, 0.782]],
  [0.057, [0.969, 0.988, 0.782]],
  [0.059, [0.967, 0.987, 0.777]],
  [0.061, [0.967, 0.987, 0.777]],
  [0.063, [0.965, 0.986, 0.772]],
  [0.065, [0.965, 0.986, 0.772]],
  [0.067, [0.962, 0.985, 0.767]],
  [0.068, [0.962, 0.985, 0.767]],
  [0.07, [0.96, 0.984, 0.762]],
  [0.072, [0.96, 0.984, 0.762]],
  [0.074, [0.958, 0.984, 0.757]],
  [0.076, [0.958, 0.984, 0.757]],
  [0.078, [0.956, 0.983, 0.753]],
  [0.08, [0.956, 0.983, 0.753]],
  [0.082, [0.953, 0.982, 0.748]],
  [0.084, [0.953, 0.982, 0.748]],
  [0.086, [0.951, 0.981, 0.743]],
  [0.088, [0.951, 0.981, 0.743]],
  [0.09, [0.949, 0.98, 0.738]],
  [0.092, [0.949, 0.98, 0.738]],
  [0.094, [0.947, 0.979, 0.733]],
  [0.096, [0.947, 0.979, 0.733]],
  [0.098, [0.945, 0.978, 0.728]],
  [0.1, [0.945, 0.978, 0.728]],
  [0.102, [0.942, 0.978, 0.723]],
  [0.104, [0.942, 0.978, 0.723]],
  [0.106, [0.94, 0.977, 0.718]],
  [0.108, [0.94, 0.977, 0.718]],
  [0.11, [0.938, 0.976, 0.713]],
  [0.112, [0.938, 0.976, 0.713]],
  [0.114, [0.936, 0.975, 0.708]],
  [0.115, [0.936, 0.975, 0.708]],
  [0.117, [0.934, 0.974, 0.703]],
  [0.119, [0.934, 0.974, 0.703]],
  [0.121, [0.931, 0.973, 0.698]],
  [0.123, [0.931, 0.973, 0.698]],
  [0.125, [0.929, 0.972, 0.694]],
  [0.127, [0.929, 0.972, 0.694]],
  [0.129, [0.924, 0.97, 0.695]],
  [0.131, [0.924, 0.97, 0.695]],
  [0.133, [0.919, 0.969, 0.695]],
  [0.135, [0.919, 0.969, 0.695]],
  [0.137, [0.915, 0.967, 0.695]],
  [0.139, [0.915, 0.967, 0.695]],
  [0.141, [0.91, 0.965, 0.696]],
  [0.143, [0.91, 0.965, 0.696]],
  [0.145, [0.905, 0.963, 0.696]],
  [0.147, [0.905, 0.963, 0.696]],
  [0.149, [0.901, 0.961, 0.696]],
  [0.151, [0.901, 0.961, 0.696]],
  [0.153, [0.896, 0.959, 0.697]],
  [0.155, [0.896, 0.959, 0.697]],
  [0.157, [0.891, 0.958, 0.697]],
  [0.159, [0.891, 0.958, 0.697]],
  [0.16, [0.887, 0.956, 0.697]],
  [0.162, [0.887, 0.956, 0.697]],
  [0.164, [0.882, 0.954, 0.698]],
  [0.166, [0.882, 0.954, 0.698]],
  [0.168, [0.877, 0.952, 0.698]],
  [0.17, [0.877, 0.952, 0.698]],
  [0.172, [0.873, 0.95, 0.699]],
  [0.174, [0.873, 0.95, 0.699]],
  [0.176, [0.868, 0.948, 0.699]],
  [0.178, [0.868, 0.948, 0.699]],
  [0.18, [0.863, 0.946, 0.699]],
  [0.182, [0.863, 0.946, 0.699]],
  [0.184, [0.859, 0.945, 0.7]],
  [0.186, [0.859, 0.945, 0.7]],
  [0.188, [0.854, 0.943, 0.7]],
  [0.19, [0.854, 0.943, 0.7]],
  [0.192, [0.849, 0.941, 0.7]],
  [0.194, [0.849, 0.941, 0.7]],
  [0.196, [0.845, 0.939, 0.701]],
  [0.198, [0.845, 0.939, 0.701]],
  [0.2, [0.84, 0.937, 0.701]],
  [0.202, [0.84, 0.937, 0.701]],
  [0.204, [0.835, 0.935, 0.702]],
  [0.205, [0.835, 0.935, 0.702]],
  [0.207, [0.831, 0.934, 0.702]],
  [0.209, [0.831, 0.934, 0.702]],
  [0.211, [0.826, 0.932, 0.702]],
  [0.213, [0.826, 0.932, 0.702]],
  [0.215, [0.821, 0.93, 0.703]],
  [0.217, [0.821, 0.93, 0.703]],
  [0.219, [0.817, 0.928, 0.703]],
  [0.221, [0.817, 0.928, 0.703]],
  [0.223, [0.812, 0.926, 0.703]],
  [0.225, [0.812, 0.926, 0.703]],
  [0.227, [0.807, 0.924, 0.704]],
  [0.229, [0.807, 0.924, 0.704]],
  [0.231, [0.803, 0.922, 0.704]],
  [0.233, [0.803, 0.922, 0.704]],
  [0.235, [0.798, 0.921, 0.704]],
  [0.237, [0.798, 0.921, 0.704]],
  [0.239, [0.793, 0.919, 0.705]],
  [0.241, [0.793, 0.919, 0.705]],
  [0.243, [0.789, 0.917, 0.705]],
  [0.245, [0.789, 0.917, 0.705]],
  [0.247, [0.784, 0.915, 0.706]],
  [0.249, [0.784, 0.915, 0.706]],
  [0.25, [0.778, 0.913, 0.706]],
  [0.252, [0.778, 0.913, 0.706]],
  [0.254, [0.769, 0.909, 0.707]],
  [0.256, [0.769, 0.909, 0.707]],
  [0.258, [0.76, 0.906, 0.708]],
  [0.26, [0.76, 0.906, 0.708]],
  [0.262, [0.752, 0.903, 0.709]],
  [0.264, [0.752, 0.903, 0.709]],
  [0.266, [0.743, 0.899, 0.71]],
  [0.268, [0.743, 0.899, 0.71]],
  [0.27, [0.734, 0.896, 0.71]],
  [0.272, [0.734, 0.896, 0.71]],
  [0.274, [0.725, 0.892, 0.711]],
  [0.276, [0.725, 0.892, 0.711]],
  [0.278, [0.716, 0.889, 0.712]],
  [0.28, [0.716, 0.889, 0.712]],
  [0.282, [0.707, 0.885, 0.713]],
  [0.284, [0.707, 0.885, 0.713]],
  [0.286, [0.698, 0.882, 0.714]],
  [0.288, [0.698, 0.882, 0.714]],
  [0.29, [0.69, 0.878, 0.715]],
  [0.292, [0.69, 0.878, 0.715]],
  [0.294, [0.681, 0.875, 0.716]],
  [0.295, [0.681, 0.875, 0.716]],
  [0.297, [0.672, 0.872, 0.716]],
  [0.299, [0.672, 0.872, 0.716]],
  [0.301, [0.663, 0.868, 0.717]],
  [0.303, [0.663, 0.868, 0.717]],
  [0.305, [0.654, 0.865, 0.718]],
  [0.307, [0.654, 0.865, 0.718]],
  [0.309, [0.645, 0.861, 0.719]],
  [0.311, [0.645, 0.861, 0.719]],
  [0.313, [0.636, 0.858, 0.72]],
  [0.315, [0.636, 0.858, 0.72]],
  [0.317, [0.628, 0.854, 0.721]],
  [0.319, [0.628, 0.854, 0.721]],
  [0.321, [0.619, 0.851, 0.722]],
  [0.323, [0.619, 0.851, 0.722]],
  [0.325, [0.61, 0.847, 0.722]],
  [0.327, [0.61, 0.847, 0.722]],
  [0.329, [0.601, 0.844, 0.723]],
  [0.331, [0.601, 0.844, 0.723]],
  [0.333, [0.592, 0.841, 0.724]],
  [0.335, [0.592, 0.841, 0.724]],
  [0.337, [0.583, 0.837, 0.725]],
  [0.339, [0.583, 0.837, 0.725]],
  [0.341, [0.574, 0.834, 0.726]],
  [0.342, [0.574, 0.834, 0.726]],
  [0.344, [0.566, 0.83, 0.727]],
  [0.346, [0.566, 0.83, 0.727]],
  [0.348, [0.557, 0.827, 0.728]],
  [0.35, [0.557, 0.827, 0.728]],
  [0.352, [0.548, 0.823, 0.728]],
  [0.354, [0.548, 0.823, 0.728]],
  [0.356, [0.539, 0.82, 0.729]],
  [0.358, [0.539, 0.82, 0.729]],
  [0.36, [0.53, 0.816, 0.73]],
  [0.362, [0.53, 0.816, 0.73]],
  [0.364, [0.521, 0.813, 0.731]],
  [0.366, [0.521, 0.813, 0.731]],
  [0.368, [0.512, 0.81, 0.732]],
  [0.37, [0.512, 0.81, 0.732]],
  [0.372, [0.504, 0.806, 0.733]],
  [0.374, [0.504, 0.806, 0.733]],
  [0.376, [0.495, 0.803, 0.734]],
  [0.378, [0.495, 0.803, 0.734]],
  [0.38, [0.488, 0.8, 0.735]],
  [0.382, [0.488, 0.8, 0.735]],
  [0.384, [0.48, 0.797, 0.736]],
  [0.386, [0.48, 0.797, 0.736]],
  [0.387, [0.472, 0.794, 0.737]],
  [0.389, [0.472, 0.794, 0.737]],
  [0.391, [0.465, 0.792, 0.738]],
  [0.393, [0.465, 0.792, 0.738]],
  [0.395, [0.457, 0.789, 0.739]],
  [0.397, [0.457, 0.789, 0.739]],
  [0.399, [0.449, 0.786, 0.74]],
  [0.401, [0.449, 0.786, 0.74]],
  [0.403, [0.442, 0.783, 0.741]],
  [0.405, [0.442, 0.783, 0.741]],
  [0.407, [0.434, 0.78, 0.743]],
  [0.409, [0.434, 0.78, 0.743]],
  [0.411, [0.427, 0.777, 0.744]],
  [0.413, [0.427, 0.777, 0.744]],
  [0.415, [0.419, 0.775, 0.745]],
  [0.417, [0.419, 0.775, 0.745]],
  [0.419, [0.411, 0.772, 0.746]],
  [0.421, [0.411, 0.772, 0.746]],
  [0.423, [0.404, 0.769, 0.747]],
  [0.425, [0.404, 0.769, 0.747]],
  [0.427, [0.396, 0.766, 0.748]],
  [0.429, [0.396, 0.766, 0.748]],
  [0.431, [0.388, 0.763, 0.749]],
  [0.432, [0.388, 0.763, 0.749]],
  [0.434, [0.381, 0.76, 0.75]],
  [0.436, [0.381, 0.76, 0.75]],
  [0.438, [0.373, 0.758, 0.751]],
  [0.44, [0.373, 0.758, 0.751]],
  [0.442, [0.366, 0.755, 0.753]],
  [0.444, [0.366, 0.755, 0.753]],
  [0.446, [0.358, 0.752, 0.754]],
  [0.448, [0.358, 0.752, 0.754]],
  [0.45, [0.35, 0.749, 0.755]],
  [0.452, [0.35, 0.749, 0.755]],
  [0.454, [0.343, 0.746, 0.756]],
  [0.456, [0.343, 0.746, 0.756]],
  [0.458, [0.335, 0.743, 0.757]],
  [0.46, [0.335, 0.743, 0.757]],
  [0.462, [0.327, 0.741, 0.758]],
  [0.464, [0.327, 0.741, 0.758]],
  [0.466, [0.32, 0.738, 0.759]],
  [0.468, [0.32, 0.738, 0.759]],
  [0.47, [0.312, 0.735, 0.76]],
  [0.472, [0.312, 0.735, 0.76]],
  [0.474, [0.304, 0.732, 0.761]],
  [0.476, [0.304, 0.732, 0.761]],
  [0.477, [0.297, 0.729, 0.763]],
  [0.479, [0.297, 0.729, 0.763]],
  [0.481, [0.289, 0.726, 0.764]],
  [0.483, [0.289, 0.726, 0.764]],
  [0.485, [0.282, 0.724, 0.765]],
  [0.487, [0.282, 0.724, 0.765]],
  [0.489, [0.274, 0.721, 0.766]],
  [0.491, [0.274, 0.721, 0.766]],
  [0.493, [0.266, 0.718, 0.767]],
  [0.495, [0.266, 0.718, 0.767]],
  [0.497, [0.259, 0.715, 0.768]],
  [0.499, [0.259, 0.715, 0.768]],
  [0.501, [0.253, 0.711, 0.768]],
  [0.503, [0.253, 0.711, 0.768]],
  [0.505, [0.248, 0.707, 0.768]],
  [0.507, [0.248, 0.707, 0.768]],
  [0.509, [0.244, 0.702, 0.767]],
  [0.511, [0.244, 0.702, 0.767]],
  [0.513, [0.239, 0.698, 0.767]],
  [0.515, [0.239, 0.698, 0.767]],
  [0.517, [0.235, 0.693, 0.766]],
  [0.519, [0.235, 0.693, 0.766]],
  [0.521, [0.231, 0.689, 0.766]],
  [0.523, [0.231, 0.689, 0.766]],
  [0.524, [0.226, 0.684, 0.765]],
  [0.526, [0.226, 0.684, 0.765]],
  [0.528, [0.222, 0.68, 0.765]],
  [0.53, [0.222, 0.68, 0.765]],
  [0.532, [0.217, 0.675, 0.764]],
  [0.534, [0.217, 0.675, 0.764]],
  [0.536, [0.213, 0.67, 0.764]],
  [0.538, [0.213, 0.67, 0.764]],
  [0.54, [0.208, 0.666, 0.763]],
  [0.542, [0.208, 0.666, 0.763]],
  [0.544, [0.204, 0.661, 0.763]],
  [0.546, [0.204, 0.661, 0.763]],
  [0.548, [0.2, 0.657, 0.762]],
  [0.55, [0.2, 0.657, 0.762]],
  [0.552, [0.195, 0.652, 0.762]],
  [0.554, [0.195, 0.652, 0.762]],
  [0.556, [0.191, 0.648, 0.761]],
  [0.558, [0.191, 0.648, 0.761]],
  [0.56, [0.186, 0.643, 0.761]],
  [0.562, [0.186, 0.643, 0.761]],
  [0.564, [0.182, 0.639, 0.761]],
  [0.566, [0.182, 0.639, 0.761]],
  [0.568, [0.177, 0.634, 0.76]],
  [0.569, [0.177, 0.634, 0.76]],
  [0.571, [0.173, 0.63, 0.76]],
  [0.573, [0.173, 0.63, 0.76]],
  [0.575, [0.169, 0.625, 0.759]],
  [0.577, [0.169, 0.625, 0.759]],
  [0.579, [0.164, 0.62, 0.759]],
  [0.581, [0.164, 0.62, 0.759]],
  [0.583, [0.16, 0.616, 0.758]],
  [0.585, [0.16, 0.616, 0.758]],
  [0.587, [0.155, 0.611, 0.758]],
  [0.589, [0.155, 0.611, 0.758]],
  [0.591, [0.151, 0.607, 0.757]],
  [0.593, [0.151, 0.607, 0.757]],
  [0.595, [0.146, 0.602, 0.757]],
  [0.597, [0.146, 0.602, 0.757]],
  [0.599, [0.142, 0.598, 0.756]],
  [0.601, [0.142, 0.598, 0.756]],
  [0.603, [0.138, 0.593, 0.756]],
  [0.605, [0.138, 0.593, 0.756]],
  [0.607, [0.133, 0.589, 0.755]],
  [0.609, [0.133, 0.589, 0.755]],
  [0.611, [0.129, 0.584, 0.755]],
  [0.613, [0.129, 0.584, 0.755]],
  [0.614, [0.124, 0.579, 0.754]],
  [0.616, [0.124, 0.579, 0.754]],
  [0.618, [0.12, 0.575, 0.754]],
  [0.62, [0.12, 0.575, 0.754]],
  [0.622, [0.115, 0.57, 0.753]],
  [0.624, [0.115, 0.57, 0.753]],
  [0.626, [0.114, 0.565, 0.751]],
  [0.628, [0.114, 0.565, 0.751]],
  [0.63, [0.115, 0.558, 0.748]],
  [0.632, [0.115, 0.558, 0.748]],
  [0.634, [0.115, 0.552, 0.745]],
  [0.636, [0.115, 0.552, 0.745]],
  [0.638, [0.116, 0.546, 0.742]],
  [0.64, [0.116, 0.546, 0.742]],
  [0.642, [0.117, 0.54, 0.739]],
  [0.644, [0.117, 0.54, 0.739]],
  [0.646, [0.117, 0.533, 0.736]],
  [0.648, [0.117, 0.533, 0.736]],
  [0.65, [0.118, 0.527, 0.733]],
  [0.652, [0.118, 0.527, 0.733]],
  [0.654, [0.118, 0.521, 0.73]],
  [0.656, [0.118, 0.521, 0.73]],
  [0.658, [0.119, 0.515, 0.727]],
  [0.659, [0.119, 0.515, 0.727]],
  [0.661, [0.12, 0.508, 0.725]],
  [0.663, [0.12, 0.508, 0.725]],
  [0.665, [0.12, 0.502, 0.722]],
  [0.667, [0.12, 0.502, 0.722]],
  [0.669, [0.121, 0.496, 0.719]],
  [0.671, [0.121, 0.496, 0.719]],
  [0.673, [0.121, 0.489, 0.716]],
  [0.675, [0.121, 0.489, 0.716]],
  [0.677, [0.122, 0.483, 0.713]],
  [0.679, [0.122, 0.483, 0.713]],
  [0.681, [0.123, 0.477, 0.71]],
  [0.683, [0.123, 0.477, 0.71]],
  [0.685, [0.123, 0.471, 0.707]],
  [0.687, [0.123, 0.471, 0.707]],
  [0.689, [0.124, 0.464, 0.704]],
  [0.691, [0.124, 0.464, 0.704]],
  [0.693, [0.125, 0.458, 0.701]],
  [0.695, [0.125, 0.458, 0.701]],
  [0.697, [0.125, 0.452, 0.698]],
  [0.699, [0.125, 0.452, 0.698]],
  [0.701, [0.126, 0.445, 0.695]],
  [0.703, [0.126, 0.445, 0.695]],
  [0.705, [0.126, 0.439, 0.692]],
  [0.706, [0.126, 0.439, 0.692]],
  [0.708, [0.127, 0.433, 0.689]],
  [0.71, [0.127, 0.433, 0.689]],
  [0.712, [0.128, 0.427, 0.686]],
  [0.714, [0.128, 0.427, 0.686]],
  [0.716, [0.128, 0.42, 0.683]],
  [0.718, [0.128, 0.42, 0.683]],
  [0.72, [0.129, 0.414, 0.68]],
  [0.722, [0.129, 0.414, 0.68]],
  [0.724, [0.129, 0.408, 0.677]],
  [0.726, [0.129, 0.408, 0.677]],
  [0.728, [0.13, 0.402, 0.674]],
  [0.73, [0.13, 0.402, 0.674]],
  [0.732, [0.131, 0.395, 0.671]],
  [0.734, [0.131, 0.395, 0.671]],
  [0.736, [0.131, 0.389, 0.668]],
  [0.738, [0.131, 0.389, 0.668]],
  [0.74, [0.132, 0.383, 0.665]],
  [0.742, [0.132, 0.383, 0.665]],
  [0.744, [0.133, 0.376, 0.663]],
  [0.746, [0.133, 0.376, 0.663]],
  [0.748, [0.133, 0.37, 0.66]],
  [0.75, [0.133, 0.37, 0.66]],
  [0.751, [0.134, 0.365, 0.657]],
  [0.753, [0.134, 0.365, 0.657]],
  [0.755, [0.134, 0.36, 0.655]],
  [0.757, [0.134, 0.36, 0.655]],
  [0.759, [0.134, 0.354, 0.652]],
  [0.761, [0.134, 0.354, 0.652]],
  [0.763, [0.135, 0.349, 0.65]],
  [0.765, [0.135, 0.349, 0.65]],
  [0.767, [0.135, 0.344, 0.647]],
  [0.769, [0.135, 0.344, 0.647]],
  [0.771, [0.135, 0.339, 0.645]],
  [0.773, [0.135, 0.339, 0.645]],
  [0.775, [0.136, 0.334, 0.642]],
  [0.777, [0.136, 0.334, 0.642]],
  [0.779, [0.136, 0.329, 0.64]],
  [0.781, [0.136, 0.329, 0.64]],
  [0.783, [0.137, 0.323, 0.637]],
  [0.785, [0.137, 0.323, 0.637]],
  [0.787, [0.137, 0.318, 0.635]],
  [0.789, [0.137, 0.318, 0.635]],
  [0.791, [0.137, 0.313, 0.632]],
  [0.793, [0.137, 0.313, 0.632]],
  [0.795, [0.138, 0.308, 0.63]],
  [0.796, [0.138, 0.308, 0.63]],
  [0.798, [0.138, 0.303, 0.627]],
  [0.8, [0.138, 0.303, 0.627]],
  [0.802, [0.138, 0.298, 0.625]],
  [0.804, [0.138, 0.298, 0.625]],
  [0.806, [0.139, 0.292, 0.623]],
  [0.808, [0.139, 0.292, 0.623]],
  [0.81, [0.139, 0.287, 0.62]],
  [0.812, [0.139, 0.287, 0.62]],
  [0.814, [0.14, 0.282, 0.618]],
  [0.816, [0.14, 0.282, 0.618]],
  [0.818, [0.14, 0.277, 0.615]],
  [0.82, [0.14, 0.277, 0.615]],
  [0.822, [0.14, 0.272, 0.613]],
  [0.824, [0.14, 0.272, 0.613]],
  [0.826, [0.141, 0.267, 0.61]],
  [0.828, [0.141, 0.267, 0.61]],
  [0.83, [0.141, 0.261, 0.608]],
  [0.832, [0.141, 0.261, 0.608]],
  [0.834, [0.141, 0.256, 0.605]],
  [0.836, [0.141, 0.256, 0.605]],
  [0.838, [0.142, 0.251, 0.603]],
  [0.84, [0.142, 0.251, 0.603]],
  [0.841, [0.142, 0.246, 0.6]],
  [0.843, [0.142, 0.246, 0.6]],
  [0.845, [0.142, 0.241, 0.598]],
  [0.847, [0.142, 0.241, 0.598]],
  [0.849, [0.143, 0.236, 0.595]],
  [0.851, [0.143, 0.236, 0.595]],
  [0.853, [0.143, 0.23, 0.593]],
  [0.855, [0.143, 0.23, 0.593]],
  [0.857, [0.144, 0.225, 0.591]],
  [0.859, [0.144, 0.225, 0.591]],
  [0.861, [0.144, 0.22, 0.588]],
  [0.863, [0.144, 0.22, 0.588]],
  [0.865, [0.144, 0.215, 0.586]],
  [0.867, [0.144, 0.215, 0.586]],
  [0.869, [0.145, 0.21, 0.583]],
  [0.871, [0.145, 0.21, 0.583]],
  [0.873, [0.145, 0.205, 0.581]],
  [0.875, [0.145, 0.205, 0.581]],
  [0.877, [0.142, 0.201, 0.574]],
  [0.879, [0.142, 0.201, 0.574]],
  [0.881, [0.138, 0.199, 0.567]],
  [0.883, [0.138, 0.199, 0.567]],
  [0.885, [0.135, 0.196, 0.559]],
  [0.886, [0.135, 0.196, 0.559]],
  [0.888, [0.131, 0.193, 0.552]],
  [0.89, [0.131, 0.193, 0.552]],
  [0.892, [0.128, 0.19, 0.544]],
  [0.894, [0.128, 0.19, 0.544]],
  [0.896, [0.124, 0.187, 0.537]],
  [0.898, [0.124, 0.187, 0.537]],
  [0.9, [0.121, 0.184, 0.53]],
  [0.902, [0.121, 0.184, 0.53]],
  [0.904, [0.117, 0.182, 0.522]],
  [0.906, [0.117, 0.182, 0.522]],
  [0.908, [0.113, 0.179, 0.515]],
  [0.91, [0.113, 0.179, 0.515]],
  [0.912, [0.11, 0.176, 0.507]],
  [0.914, [0.11, 0.176, 0.507]],
  [0.916, [0.106, 0.173, 0.5]],
  [0.918, [0.106, 0.173, 0.5]],
  [0.92, [0.103, 0.17, 0.493]],
  [0.922, [0.103, 0.17, 0.493]],
  [0.924, [0.099, 0.167, 0.485]],
  [0.926, [0.099, 0.167, 0.485]],
  [0.928, [0.096, 0.165, 0.478]],
  [0.93, [0.096, 0.165, 0.478]],
  [0.932, [0.092, 0.162, 0.471]],
  [0.933, [0.092, 0.162, 0.471]],
  [0.935, [0.088, 0.159, 0.463]],
  [0.937, [0.088, 0.159, 0.463]],
  [0.939, [0.085, 0.156, 0.456]],
  [0.941, [0.085, 0.156, 0.456]],
  [0.943, [0.081, 0.153, 0.448]],
  [0.945, [0.081, 0.153, 0.448]],
  [0.947, [0.078, 0.151, 0.441]],
  [0.949, [0.078, 0.151, 0.441]],
  [0.951, [0.074, 0.148, 0.434]],
  [0.953, [0.074, 0.148, 0.434]],
  [0.955, [0.071, 0.145, 0.426]],
  [0.957, [0.071, 0.145, 0.426]],
  [0.959, [0.067, 0.142, 0.419]],
  [0.961, [0.067, 0.142, 0.419]],
  [0.963, [0.063, 0.139, 0.412]],
  [0.965, [0.063, 0.139, 0.412]],
  [0.967, [0.06, 0.136, 0.404]],
  [0.969, [0.06, 0.136, 0.404]],
  [0.971, [0.056, 0.134, 0.397]],
  [0.973, [0.056, 0.134, 0.397]],
  [0.975, [0.053, 0.131, 0.389]],
  [0.977, [0.053, 0.131, 0.389]],
  [0.978, [0.049, 0.128, 0.382]],
  [0.98, [0.049, 0.128, 0.382]],
  [0.982, [0.046, 0.125, 0.375]],
  [0.984, [0.046, 0.125, 0.375]],
  [0.986, [0.042, 0.122, 0.367]],
  [0.988, [0.042, 0.122, 0.367]],
  [0.99, [0.039, 0.119, 0.36]],
  [0.992, [0.039, 0.119, 0.36]],
  [0.994, [0.035, 0.117, 0.352]],
  [0.996, [0.035, 0.117, 0.352]],
  [0.998, [0.031, 0.114, 0.345]],
  [1, [0.031, 0.114, 0.345]]
], xp = [
  [0, [1, 1, 0.898]],
  [2e-3, [1, 1, 0.898]],
  [4e-3, [1, 0.999, 0.893]],
  [6e-3, [1, 0.999, 0.893]],
  [8e-3, [1, 0.998, 0.888]],
  [0.01, [1, 0.998, 0.888]],
  [0.012, [1, 0.997, 0.883]],
  [0.014, [1, 0.997, 0.883]],
  [0.016, [1, 0.996, 0.878]],
  [0.018, [1, 0.996, 0.878]],
  [0.02, [1, 0.995, 0.873]],
  [0.022, [1, 0.995, 0.873]],
  [0.023, [1, 0.994, 0.868]],
  [0.025, [1, 0.994, 0.868]],
  [0.027, [1, 0.993, 0.863]],
  [0.029, [1, 0.993, 0.863]],
  [0.031, [1, 0.992, 0.858]],
  [0.033, [1, 0.992, 0.858]],
  [0.035, [1, 0.991, 0.853]],
  [0.037, [1, 0.991, 0.853]],
  [0.039, [1, 0.99, 0.848]],
  [0.041, [1, 0.99, 0.848]],
  [0.043, [1, 0.989, 0.843]],
  [0.045, [1, 0.989, 0.843]],
  [0.047, [1, 0.988, 0.838]],
  [0.049, [1, 0.988, 0.838]],
  [0.051, [1, 0.987, 0.832]],
  [0.053, [1, 0.987, 0.832]],
  [0.055, [1, 0.986, 0.827]],
  [0.057, [1, 0.986, 0.827]],
  [0.059, [1, 0.985, 0.822]],
  [0.061, [1, 0.985, 0.822]],
  [0.063, [1, 0.984, 0.817]],
  [0.065, [1, 0.984, 0.817]],
  [0.067, [1, 0.983, 0.812]],
  [0.068, [1, 0.983, 0.812]],
  [0.07, [1, 0.982, 0.807]],
  [0.072, [1, 0.982, 0.807]],
  [0.074, [1, 0.981, 0.802]],
  [0.076, [1, 0.981, 0.802]],
  [0.078, [1, 0.98, 0.797]],
  [0.08, [1, 0.98, 0.797]],
  [0.082, [1, 0.979, 0.792]],
  [0.084, [1, 0.979, 0.792]],
  [0.086, [1, 0.978, 0.787]],
  [0.088, [1, 0.978, 0.787]],
  [0.09, [1, 0.977, 0.782]],
  [0.092, [1, 0.977, 0.782]],
  [0.094, [1, 0.976, 0.777]],
  [0.096, [1, 0.976, 0.777]],
  [0.098, [1, 0.975, 0.772]],
  [0.1, [1, 0.975, 0.772]],
  [0.102, [1, 0.974, 0.767]],
  [0.104, [1, 0.974, 0.767]],
  [0.106, [1, 0.973, 0.762]],
  [0.108, [1, 0.973, 0.762]],
  [0.11, [1, 0.972, 0.757]],
  [0.112, [1, 0.972, 0.757]],
  [0.114, [1, 0.971, 0.752]],
  [0.115, [1, 0.971, 0.752]],
  [0.117, [1, 0.97, 0.747]],
  [0.119, [1, 0.97, 0.747]],
  [0.121, [1, 0.969, 0.742]],
  [0.123, [1, 0.969, 0.742]],
  [0.125, [1, 0.968, 0.737]],
  [0.127, [1, 0.968, 0.737]],
  [0.129, [1, 0.966, 0.731]],
  [0.131, [1, 0.966, 0.731]],
  [0.133, [1, 0.963, 0.726]],
  [0.135, [1, 0.963, 0.726]],
  [0.137, [1, 0.961, 0.721]],
  [0.139, [1, 0.961, 0.721]],
  [0.141, [0.999, 0.958, 0.715]],
  [0.143, [0.999, 0.958, 0.715]],
  [0.145, [0.999, 0.956, 0.71]],
  [0.147, [0.999, 0.956, 0.71]],
  [0.149, [0.999, 0.954, 0.705]],
  [0.151, [0.999, 0.954, 0.705]],
  [0.153, [0.999, 0.951, 0.7]],
  [0.155, [0.999, 0.951, 0.7]],
  [0.157, [0.999, 0.949, 0.694]],
  [0.159, [0.999, 0.949, 0.694]],
  [0.16, [0.999, 0.946, 0.689]],
  [0.162, [0.999, 0.946, 0.689]],
  [0.164, [0.999, 0.944, 0.684]],
  [0.166, [0.999, 0.944, 0.684]],
  [0.168, [0.999, 0.941, 0.678]],
  [0.17, [0.999, 0.941, 0.678]],
  [0.172, [0.999, 0.939, 0.673]],
  [0.174, [0.999, 0.939, 0.673]],
  [0.176, [0.998, 0.936, 0.668]],
  [0.178, [0.998, 0.936, 0.668]],
  [0.18, [0.998, 0.934, 0.663]],
  [0.182, [0.998, 0.934, 0.663]],
  [0.184, [0.998, 0.931, 0.657]],
  [0.186, [0.998, 0.931, 0.657]],
  [0.188, [0.998, 0.929, 0.652]],
  [0.19, [0.998, 0.929, 0.652]],
  [0.192, [0.998, 0.926, 0.647]],
  [0.194, [0.998, 0.926, 0.647]],
  [0.196, [0.998, 0.924, 0.641]],
  [0.198, [0.998, 0.924, 0.641]],
  [0.2, [0.998, 0.922, 0.636]],
  [0.202, [0.998, 0.922, 0.636]],
  [0.204, [0.998, 0.919, 0.631]],
  [0.205, [0.998, 0.919, 0.631]],
  [0.207, [0.997, 0.917, 0.625]],
  [0.209, [0.997, 0.917, 0.625]],
  [0.211, [0.997, 0.914, 0.62]],
  [0.213, [0.997, 0.914, 0.62]],
  [0.215, [0.997, 0.912, 0.615]],
  [0.217, [0.997, 0.912, 0.615]],
  [0.219, [0.997, 0.909, 0.61]],
  [0.221, [0.997, 0.909, 0.61]],
  [0.223, [0.997, 0.907, 0.604]],
  [0.225, [0.997, 0.907, 0.604]],
  [0.227, [0.997, 0.904, 0.599]],
  [0.229, [0.997, 0.904, 0.599]],
  [0.231, [0.997, 0.902, 0.594]],
  [0.233, [0.997, 0.902, 0.594]],
  [0.235, [0.997, 0.899, 0.588]],
  [0.237, [0.997, 0.899, 0.588]],
  [0.239, [0.996, 0.897, 0.583]],
  [0.241, [0.996, 0.897, 0.583]],
  [0.243, [0.996, 0.895, 0.578]],
  [0.245, [0.996, 0.895, 0.578]],
  [0.247, [0.996, 0.892, 0.573]],
  [0.249, [0.996, 0.892, 0.573]],
  [0.25, [0.996, 0.889, 0.567]],
  [0.252, [0.996, 0.889, 0.567]],
  [0.254, [0.996, 0.885, 0.558]],
  [0.256, [0.996, 0.885, 0.558]],
  [0.258, [0.996, 0.882, 0.55]],
  [0.26, [0.996, 0.882, 0.55]],
  [0.262, [0.996, 0.878, 0.542]],
  [0.264, [0.996, 0.878, 0.542]],
  [0.266, [0.996, 0.874, 0.534]],
  [0.268, [0.996, 0.874, 0.534]],
  [0.27, [0.996, 0.87, 0.526]],
  [0.272, [0.996, 0.87, 0.526]],
  [0.274, [0.996, 0.866, 0.518]],
  [0.276, [0.996, 0.866, 0.518]],
  [0.278, [0.996, 0.863, 0.51]],
  [0.28, [0.996, 0.863, 0.51]],
  [0.282, [0.996, 0.859, 0.502]],
  [0.284, [0.996, 0.859, 0.502]],
  [0.286, [0.996, 0.855, 0.494]],
  [0.288, [0.996, 0.855, 0.494]],
  [0.29, [0.996, 0.851, 0.485]],
  [0.292, [0.996, 0.851, 0.485]],
  [0.294, [0.996, 0.847, 0.477]],
  [0.295, [0.996, 0.847, 0.477]],
  [0.297, [0.996, 0.843, 0.469]],
  [0.299, [0.996, 0.843, 0.469]],
  [0.301, [0.996, 0.84, 0.461]],
  [0.303, [0.996, 0.84, 0.461]],
  [0.305, [0.996, 0.836, 0.453]],
  [0.307, [0.996, 0.836, 0.453]],
  [0.309, [0.996, 0.832, 0.445]],
  [0.311, [0.996, 0.832, 0.445]],
  [0.313, [0.996, 0.828, 0.437]],
  [0.315, [0.996, 0.828, 0.437]],
  [0.317, [0.996, 0.824, 0.429]],
  [0.319, [0.996, 0.824, 0.429]],
  [0.321, [0.996, 0.821, 0.42]],
  [0.323, [0.996, 0.821, 0.42]],
  [0.325, [0.996, 0.817, 0.412]],
  [0.327, [0.996, 0.817, 0.412]],
  [0.329, [0.996, 0.813, 0.404]],
  [0.331, [0.996, 0.813, 0.404]],
  [0.333, [0.996, 0.809, 0.396]],
  [0.335, [0.996, 0.809, 0.396]],
  [0.337, [0.996, 0.805, 0.388]],
  [0.339, [0.996, 0.805, 0.388]],
  [0.341, [0.996, 0.802, 0.38]],
  [0.342, [0.996, 0.802, 0.38]],
  [0.344, [0.996, 0.798, 0.372]],
  [0.346, [0.996, 0.798, 0.372]],
  [0.348, [0.996, 0.794, 0.364]],
  [0.35, [0.996, 0.794, 0.364]],
  [0.352, [0.996, 0.79, 0.355]],
  [0.354, [0.996, 0.79, 0.355]],
  [0.356, [0.996, 0.786, 0.347]],
  [0.358, [0.996, 0.786, 0.347]],
  [0.36, [0.996, 0.782, 0.339]],
  [0.362, [0.996, 0.782, 0.339]],
  [0.364, [0.996, 0.779, 0.331]],
  [0.366, [0.996, 0.779, 0.331]],
  [0.368, [0.996, 0.775, 0.323]],
  [0.37, [0.996, 0.775, 0.323]],
  [0.372, [0.996, 0.771, 0.315]],
  [0.374, [0.996, 0.771, 0.315]],
  [0.376, [0.996, 0.767, 0.308]],
  [0.378, [0.996, 0.767, 0.308]],
  [0.38, [0.996, 0.761, 0.303]],
  [0.382, [0.996, 0.761, 0.303]],
  [0.384, [0.996, 0.756, 0.299]],
  [0.386, [0.996, 0.756, 0.299]],
  [0.387, [0.996, 0.751, 0.294]],
  [0.389, [0.996, 0.751, 0.294]],
  [0.391, [0.996, 0.745, 0.289]],
  [0.393, [0.996, 0.745, 0.289]],
  [0.395, [0.996, 0.74, 0.285]],
  [0.397, [0.996, 0.74, 0.285]],
  [0.399, [0.996, 0.735, 0.28]],
  [0.401, [0.996, 0.735, 0.28]],
  [0.403, [0.996, 0.73, 0.275]],
  [0.405, [0.996, 0.73, 0.275]],
  [0.407, [0.996, 0.724, 0.271]],
  [0.409, [0.996, 0.724, 0.271]],
  [0.411, [0.996, 0.719, 0.266]],
  [0.413, [0.996, 0.719, 0.266]],
  [0.415, [0.996, 0.714, 0.261]],
  [0.417, [0.996, 0.714, 0.261]],
  [0.419, [0.996, 0.708, 0.257]],
  [0.421, [0.996, 0.708, 0.257]],
  [0.423, [0.996, 0.703, 0.252]],
  [0.425, [0.996, 0.703, 0.252]],
  [0.427, [0.996, 0.698, 0.247]],
  [0.429, [0.996, 0.698, 0.247]],
  [0.431, [0.996, 0.693, 0.243]],
  [0.432, [0.996, 0.693, 0.243]],
  [0.434, [0.996, 0.687, 0.238]],
  [0.436, [0.996, 0.687, 0.238]],
  [0.438, [0.996, 0.682, 0.233]],
  [0.44, [0.996, 0.682, 0.233]],
  [0.442, [0.996, 0.677, 0.229]],
  [0.444, [0.996, 0.677, 0.229]],
  [0.446, [0.996, 0.671, 0.224]],
  [0.448, [0.996, 0.671, 0.224]],
  [0.45, [0.996, 0.666, 0.219]],
  [0.452, [0.996, 0.666, 0.219]],
  [0.454, [0.996, 0.661, 0.215]],
  [0.456, [0.996, 0.661, 0.215]],
  [0.458, [0.996, 0.656, 0.21]],
  [0.46, [0.996, 0.656, 0.21]],
  [0.462, [0.996, 0.65, 0.205]],
  [0.464, [0.996, 0.65, 0.205]],
  [0.466, [0.996, 0.645, 0.201]],
  [0.468, [0.996, 0.645, 0.201]],
  [0.47, [0.996, 0.64, 0.196]],
  [0.472, [0.996, 0.64, 0.196]],
  [0.474, [0.996, 0.634, 0.191]],
  [0.476, [0.996, 0.634, 0.191]],
  [0.477, [0.996, 0.629, 0.186]],
  [0.479, [0.996, 0.629, 0.186]],
  [0.481, [0.996, 0.624, 0.182]],
  [0.483, [0.996, 0.624, 0.182]],
  [0.485, [0.996, 0.619, 0.177]],
  [0.487, [0.996, 0.619, 0.177]],
  [0.489, [0.996, 0.613, 0.172]],
  [0.491, [0.996, 0.613, 0.172]],
  [0.493, [0.996, 0.608, 0.168]],
  [0.495, [0.996, 0.608, 0.168]],
  [0.497, [0.996, 0.603, 0.163]],
  [0.499, [0.996, 0.603, 0.163]],
  [0.501, [0.995, 0.597, 0.159]],
  [0.503, [0.995, 0.597, 0.159]],
  [0.505, [0.993, 0.592, 0.157]],
  [0.507, [0.993, 0.592, 0.157]],
  [0.509, [0.991, 0.587, 0.154]],
  [0.511, [0.991, 0.587, 0.154]],
  [0.513, [0.988, 0.582, 0.152]],
  [0.515, [0.988, 0.582, 0.152]],
  [0.517, [0.986, 0.577, 0.149]],
  [0.519, [0.986, 0.577, 0.149]],
  [0.521, [0.984, 0.572, 0.147]],
  [0.523, [0.984, 0.572, 0.147]],
  [0.524, [0.982, 0.567, 0.144]],
  [0.526, [0.982, 0.567, 0.144]],
  [0.528, [0.979, 0.562, 0.141]],
  [0.53, [0.979, 0.562, 0.141]],
  [0.532, [0.977, 0.557, 0.139]],
  [0.534, [0.977, 0.557, 0.139]],
  [0.536, [0.975, 0.552, 0.136]],
  [0.538, [0.975, 0.552, 0.136]],
  [0.54, [0.973, 0.547, 0.134]],
  [0.542, [0.973, 0.547, 0.134]],
  [0.544, [0.971, 0.542, 0.131]],
  [0.546, [0.971, 0.542, 0.131]],
  [0.548, [0.968, 0.537, 0.128]],
  [0.55, [0.968, 0.537, 0.128]],
  [0.552, [0.966, 0.532, 0.126]],
  [0.554, [0.966, 0.532, 0.126]],
  [0.556, [0.964, 0.527, 0.123]],
  [0.558, [0.964, 0.527, 0.123]],
  [0.56, [0.962, 0.522, 0.121]],
  [0.562, [0.962, 0.522, 0.121]],
  [0.564, [0.96, 0.517, 0.118]],
  [0.566, [0.96, 0.517, 0.118]],
  [0.568, [0.957, 0.512, 0.116]],
  [0.569, [0.957, 0.512, 0.116]],
  [0.571, [0.955, 0.507, 0.113]],
  [0.573, [0.955, 0.507, 0.113]],
  [0.575, [0.953, 0.502, 0.11]],
  [0.577, [0.953, 0.502, 0.11]],
  [0.579, [0.951, 0.497, 0.108]],
  [0.581, [0.951, 0.497, 0.108]],
  [0.583, [0.948, 0.492, 0.105]],
  [0.585, [0.948, 0.492, 0.105]],
  [0.587, [0.946, 0.487, 0.103]],
  [0.589, [0.946, 0.487, 0.103]],
  [0.591, [0.944, 0.481, 0.1]],
  [0.593, [0.944, 0.481, 0.1]],
  [0.595, [0.942, 0.476, 0.097]],
  [0.597, [0.942, 0.476, 0.097]],
  [0.599, [0.94, 0.471, 0.095]],
  [0.601, [0.94, 0.471, 0.095]],
  [0.603, [0.937, 0.466, 0.092]],
  [0.605, [0.937, 0.466, 0.092]],
  [0.607, [0.935, 0.461, 0.09]],
  [0.609, [0.935, 0.461, 0.09]],
  [0.611, [0.933, 0.456, 0.087]],
  [0.613, [0.933, 0.456, 0.087]],
  [0.614, [0.931, 0.451, 0.085]],
  [0.616, [0.931, 0.451, 0.085]],
  [0.618, [0.929, 0.446, 0.082]],
  [0.62, [0.929, 0.446, 0.082]],
  [0.622, [0.926, 0.441, 0.079]],
  [0.624, [0.926, 0.441, 0.079]],
  [0.626, [0.923, 0.436, 0.077]],
  [0.628, [0.923, 0.436, 0.077]],
  [0.63, [0.919, 0.432, 0.075]],
  [0.632, [0.919, 0.432, 0.075]],
  [0.634, [0.915, 0.428, 0.073]],
  [0.636, [0.915, 0.428, 0.073]],
  [0.638, [0.911, 0.423, 0.07]],
  [0.64, [0.911, 0.423, 0.07]],
  [0.642, [0.907, 0.419, 0.068]],
  [0.644, [0.907, 0.419, 0.068]],
  [0.646, [0.903, 0.414, 0.066]],
  [0.648, [0.903, 0.414, 0.066]],
  [0.65, [0.899, 0.41, 0.064]],
  [0.652, [0.899, 0.41, 0.064]],
  [0.654, [0.895, 0.405, 0.062]],
  [0.656, [0.895, 0.405, 0.062]],
  [0.658, [0.892, 0.401, 0.059]],
  [0.659, [0.892, 0.401, 0.059]],
  [0.661, [0.888, 0.397, 0.057]],
  [0.663, [0.888, 0.397, 0.057]],
  [0.665, [0.884, 0.392, 0.055]],
  [0.667, [0.884, 0.392, 0.055]],
  [0.669, [0.88, 0.388, 0.053]],
  [0.671, [0.88, 0.388, 0.053]],
  [0.673, [0.876, 0.383, 0.05]],
  [0.675, [0.876, 0.383, 0.05]],
  [0.677, [0.872, 0.379, 0.048]],
  [0.679, [0.872, 0.379, 0.048]],
  [0.681, [0.868, 0.374, 0.046]],
  [0.683, [0.868, 0.374, 0.046]],
  [0.685, [0.864, 0.37, 0.044]],
  [0.687, [0.864, 0.37, 0.044]],
  [0.689, [0.86, 0.366, 0.042]],
  [0.691, [0.86, 0.366, 0.042]],
  [0.693, [0.856, 0.361, 0.039]],
  [0.695, [0.856, 0.361, 0.039]],
  [0.697, [0.852, 0.357, 0.037]],
  [0.699, [0.852, 0.357, 0.037]],
  [0.701, [0.848, 0.352, 0.035]],
  [0.703, [0.848, 0.352, 0.035]],
  [0.705, [0.844, 0.348, 0.033]],
  [0.706, [0.844, 0.348, 0.033]],
  [0.708, [0.84, 0.343, 0.031]],
  [0.71, [0.84, 0.343, 0.031]],
  [0.712, [0.836, 0.339, 0.028]],
  [0.714, [0.836, 0.339, 0.028]],
  [0.716, [0.832, 0.335, 0.026]],
  [0.718, [0.832, 0.335, 0.026]],
  [0.72, [0.829, 0.33, 0.024]],
  [0.722, [0.829, 0.33, 0.024]],
  [0.724, [0.825, 0.326, 0.022]],
  [0.726, [0.825, 0.326, 0.022]],
  [0.728, [0.821, 0.321, 0.019]],
  [0.73, [0.821, 0.321, 0.019]],
  [0.732, [0.817, 0.317, 0.017]],
  [0.734, [0.817, 0.317, 0.017]],
  [0.736, [0.813, 0.312, 0.015]],
  [0.738, [0.813, 0.312, 0.015]],
  [0.74, [0.809, 0.308, 0.013]],
  [0.742, [0.809, 0.308, 0.013]],
  [0.744, [0.805, 0.304, 0.011]],
  [0.746, [0.805, 0.304, 0.011]],
  [0.748, [0.801, 0.299, 8e-3]],
  [0.75, [0.801, 0.299, 8e-3]],
  [0.751, [0.795, 0.296, 8e-3]],
  [0.753, [0.795, 0.296, 8e-3]],
  [0.755, [0.789, 0.293, 8e-3]],
  [0.757, [0.789, 0.293, 8e-3]],
  [0.759, [0.783, 0.29, 9e-3]],
  [0.761, [0.783, 0.29, 9e-3]],
  [0.763, [0.776, 0.287, 9e-3]],
  [0.765, [0.776, 0.287, 9e-3]],
  [0.767, [0.77, 0.284, 9e-3]],
  [0.769, [0.77, 0.284, 9e-3]],
  [0.771, [0.764, 0.281, 9e-3]],
  [0.773, [0.764, 0.281, 9e-3]],
  [0.775, [0.758, 0.278, 0.01]],
  [0.777, [0.758, 0.278, 0.01]],
  [0.779, [0.751, 0.275, 0.01]],
  [0.781, [0.751, 0.275, 0.01]],
  [0.783, [0.745, 0.272, 0.01]],
  [0.785, [0.745, 0.272, 0.01]],
  [0.787, [0.739, 0.269, 0.01]],
  [0.789, [0.739, 0.269, 0.01]],
  [0.791, [0.733, 0.266, 0.01]],
  [0.793, [0.733, 0.266, 0.01]],
  [0.795, [0.726, 0.263, 0.011]],
  [0.796, [0.726, 0.263, 0.011]],
  [0.798, [0.72, 0.26, 0.011]],
  [0.8, [0.72, 0.26, 0.011]],
  [0.802, [0.714, 0.257, 0.011]],
  [0.804, [0.714, 0.257, 0.011]],
  [0.806, [0.707, 0.254, 0.011]],
  [0.808, [0.707, 0.254, 0.011]],
  [0.81, [0.701, 0.252, 0.012]],
  [0.812, [0.701, 0.252, 0.012]],
  [0.814, [0.695, 0.249, 0.012]],
  [0.816, [0.695, 0.249, 0.012]],
  [0.818, [0.689, 0.246, 0.012]],
  [0.82, [0.689, 0.246, 0.012]],
  [0.822, [0.682, 0.243, 0.012]],
  [0.824, [0.682, 0.243, 0.012]],
  [0.826, [0.676, 0.24, 0.013]],
  [0.828, [0.676, 0.24, 0.013]],
  [0.83, [0.67, 0.237, 0.013]],
  [0.832, [0.67, 0.237, 0.013]],
  [0.834, [0.664, 0.234, 0.013]],
  [0.836, [0.664, 0.234, 0.013]],
  [0.838, [0.657, 0.231, 0.013]],
  [0.84, [0.657, 0.231, 0.013]],
  [0.841, [0.651, 0.228, 0.014]],
  [0.843, [0.651, 0.228, 0.014]],
  [0.845, [0.645, 0.225, 0.014]],
  [0.847, [0.645, 0.225, 0.014]],
  [0.849, [0.638, 0.222, 0.014]],
  [0.851, [0.638, 0.222, 0.014]],
  [0.853, [0.632, 0.219, 0.014]],
  [0.855, [0.632, 0.219, 0.014]],
  [0.857, [0.626, 0.216, 0.015]],
  [0.859, [0.626, 0.216, 0.015]],
  [0.861, [0.62, 0.213, 0.015]],
  [0.863, [0.62, 0.213, 0.015]],
  [0.865, [0.613, 0.21, 0.015]],
  [0.867, [0.613, 0.21, 0.015]],
  [0.869, [0.607, 0.207, 0.015]],
  [0.871, [0.607, 0.207, 0.015]],
  [0.873, [0.601, 0.204, 0.016]],
  [0.875, [0.601, 0.204, 0.016]],
  [0.877, [0.595, 0.202, 0.016]],
  [0.879, [0.595, 0.202, 0.016]],
  [0.881, [0.588, 0.2, 0.016]],
  [0.883, [0.588, 0.2, 0.016]],
  [0.885, [0.582, 0.199, 0.016]],
  [0.886, [0.582, 0.199, 0.016]],
  [0.888, [0.576, 0.197, 0.017]],
  [0.89, [0.576, 0.197, 0.017]],
  [0.892, [0.569, 0.195, 0.017]],
  [0.894, [0.569, 0.195, 0.017]],
  [0.896, [0.563, 0.193, 0.017]],
  [0.898, [0.563, 0.193, 0.017]],
  [0.9, [0.557, 0.191, 0.017]],
  [0.902, [0.557, 0.191, 0.017]],
  [0.904, [0.551, 0.189, 0.018]],
  [0.906, [0.551, 0.189, 0.018]],
  [0.908, [0.544, 0.188, 0.018]],
  [0.91, [0.544, 0.188, 0.018]],
  [0.912, [0.538, 0.186, 0.018]],
  [0.914, [0.538, 0.186, 0.018]],
  [0.916, [0.532, 0.184, 0.018]],
  [0.918, [0.532, 0.184, 0.018]],
  [0.92, [0.525, 0.182, 0.019]],
  [0.922, [0.525, 0.182, 0.019]],
  [0.924, [0.519, 0.18, 0.019]],
  [0.926, [0.519, 0.18, 0.019]],
  [0.928, [0.513, 0.178, 0.019]],
  [0.93, [0.513, 0.178, 0.019]],
  [0.932, [0.507, 0.176, 0.019]],
  [0.933, [0.507, 0.176, 0.019]],
  [0.935, [0.5, 0.175, 0.02]],
  [0.937, [0.5, 0.175, 0.02]],
  [0.939, [0.494, 0.173, 0.02]],
  [0.941, [0.494, 0.173, 0.02]],
  [0.943, [0.488, 0.171, 0.02]],
  [0.945, [0.488, 0.171, 0.02]],
  [0.947, [0.482, 0.169, 0.02]],
  [0.949, [0.482, 0.169, 0.02]],
  [0.951, [0.475, 0.167, 0.021]],
  [0.953, [0.475, 0.167, 0.021]],
  [0.955, [0.469, 0.165, 0.021]],
  [0.957, [0.469, 0.165, 0.021]],
  [0.959, [0.463, 0.164, 0.021]],
  [0.961, [0.463, 0.164, 0.021]],
  [0.963, [0.456, 0.162, 0.021]],
  [0.965, [0.456, 0.162, 0.021]],
  [0.967, [0.45, 0.16, 0.022]],
  [0.969, [0.45, 0.16, 0.022]],
  [0.971, [0.444, 0.158, 0.022]],
  [0.973, [0.444, 0.158, 0.022]],
  [0.975, [0.438, 0.156, 0.022]],
  [0.977, [0.438, 0.156, 0.022]],
  [0.978, [0.431, 0.154, 0.022]],
  [0.98, [0.431, 0.154, 0.022]],
  [0.982, [0.425, 0.152, 0.023]],
  [0.984, [0.425, 0.152, 0.023]],
  [0.986, [0.419, 0.151, 0.023]],
  [0.988, [0.419, 0.151, 0.023]],
  [0.99, [0.413, 0.149, 0.023]],
  [0.992, [0.413, 0.149, 0.023]],
  [0.994, [0.406, 0.147, 0.023]],
  [0.996, [0.406, 0.147, 0.023]],
  [0.998, [0.4, 0.145, 0.024]],
  [1, [0.4, 0.145, 0.024]]
], bp = [
  [0, [1, 1, 0.8]],
  [2e-3, [1, 1, 0.8]],
  [4e-3, [1, 0.998, 0.795]],
  [6e-3, [1, 0.998, 0.795]],
  [8e-3, [1, 0.996, 0.789]],
  [0.01, [1, 0.996, 0.789]],
  [0.012, [1, 0.993, 0.784]],
  [0.014, [1, 0.993, 0.784]],
  [0.016, [1, 0.991, 0.778]],
  [0.018, [1, 0.991, 0.778]],
  [0.02, [1, 0.989, 0.773]],
  [0.022, [1, 0.989, 0.773]],
  [0.023, [1, 0.987, 0.768]],
  [0.025, [1, 0.987, 0.768]],
  [0.027, [1, 0.984, 0.762]],
  [0.029, [1, 0.984, 0.762]],
  [0.031, [1, 0.982, 0.757]],
  [0.033, [1, 0.982, 0.757]],
  [0.035, [1, 0.98, 0.751]],
  [0.037, [1, 0.98, 0.751]],
  [0.039, [1, 0.978, 0.746]],
  [0.041, [1, 0.978, 0.746]],
  [0.043, [1, 0.976, 0.74]],
  [0.045, [1, 0.976, 0.74]],
  [0.047, [1, 0.973, 0.735]],
  [0.049, [1, 0.973, 0.735]],
  [0.051, [1, 0.971, 0.73]],
  [0.053, [1, 0.971, 0.73]],
  [0.055, [1, 0.969, 0.724]],
  [0.057, [1, 0.969, 0.724]],
  [0.059, [1, 0.967, 0.719]],
  [0.061, [1, 0.967, 0.719]],
  [0.063, [1, 0.965, 0.713]],
  [0.065, [1, 0.965, 0.713]],
  [0.067, [1, 0.962, 0.708]],
  [0.068, [1, 0.962, 0.708]],
  [0.07, [1, 0.96, 0.703]],
  [0.072, [1, 0.96, 0.703]],
  [0.074, [1, 0.958, 0.697]],
  [0.076, [1, 0.958, 0.697]],
  [0.078, [1, 0.956, 0.692]],
  [0.08, [1, 0.956, 0.692]],
  [0.082, [1, 0.953, 0.686]],
  [0.084, [1, 0.953, 0.686]],
  [0.086, [1, 0.951, 0.681]],
  [0.088, [1, 0.951, 0.681]],
  [0.09, [1, 0.949, 0.675]],
  [0.092, [1, 0.949, 0.675]],
  [0.094, [1, 0.947, 0.67]],
  [0.096, [1, 0.947, 0.67]],
  [0.098, [1, 0.945, 0.665]],
  [0.1, [1, 0.945, 0.665]],
  [0.102, [1, 0.942, 0.659]],
  [0.104, [1, 0.942, 0.659]],
  [0.106, [1, 0.94, 0.654]],
  [0.108, [1, 0.94, 0.654]],
  [0.11, [1, 0.938, 0.648]],
  [0.112, [1, 0.938, 0.648]],
  [0.114, [1, 0.936, 0.643]],
  [0.115, [1, 0.936, 0.643]],
  [0.117, [1, 0.934, 0.638]],
  [0.119, [1, 0.934, 0.638]],
  [0.121, [1, 0.931, 0.632]],
  [0.123, [1, 0.931, 0.632]],
  [0.125, [1, 0.929, 0.627]],
  [0.127, [1, 0.929, 0.627]],
  [0.129, [1, 0.927, 0.622]],
  [0.131, [1, 0.927, 0.622]],
  [0.133, [1, 0.924, 0.616]],
  [0.135, [1, 0.924, 0.616]],
  [0.137, [1, 0.922, 0.611]],
  [0.139, [1, 0.922, 0.611]],
  [0.141, [0.999, 0.919, 0.606]],
  [0.143, [0.999, 0.919, 0.606]],
  [0.145, [0.999, 0.917, 0.601]],
  [0.147, [0.999, 0.917, 0.601]],
  [0.149, [0.999, 0.914, 0.596]],
  [0.151, [0.999, 0.914, 0.596]],
  [0.153, [0.999, 0.912, 0.591]],
  [0.155, [0.999, 0.912, 0.591]],
  [0.157, [0.999, 0.909, 0.585]],
  [0.159, [0.999, 0.909, 0.585]],
  [0.16, [0.999, 0.907, 0.58]],
  [0.162, [0.999, 0.907, 0.58]],
  [0.164, [0.999, 0.904, 0.575]],
  [0.166, [0.999, 0.904, 0.575]],
  [0.168, [0.999, 0.902, 0.57]],
  [0.17, [0.999, 0.902, 0.57]],
  [0.172, [0.999, 0.9, 0.565]],
  [0.174, [0.999, 0.9, 0.565]],
  [0.176, [0.998, 0.897, 0.56]],
  [0.178, [0.998, 0.897, 0.56]],
  [0.18, [0.998, 0.895, 0.554]],
  [0.182, [0.998, 0.895, 0.554]],
  [0.184, [0.998, 0.892, 0.549]],
  [0.186, [0.998, 0.892, 0.549]],
  [0.188, [0.998, 0.89, 0.544]],
  [0.19, [0.998, 0.89, 0.544]],
  [0.192, [0.998, 0.887, 0.539]],
  [0.194, [0.998, 0.887, 0.539]],
  [0.196, [0.998, 0.885, 0.534]],
  [0.198, [0.998, 0.885, 0.534]],
  [0.2, [0.998, 0.882, 0.529]],
  [0.202, [0.998, 0.882, 0.529]],
  [0.204, [0.998, 0.88, 0.523]],
  [0.205, [0.998, 0.88, 0.523]],
  [0.207, [0.997, 0.877, 0.518]],
  [0.209, [0.997, 0.877, 0.518]],
  [0.211, [0.997, 0.875, 0.513]],
  [0.213, [0.997, 0.875, 0.513]],
  [0.215, [0.997, 0.873, 0.508]],
  [0.217, [0.997, 0.873, 0.508]],
  [0.219, [0.997, 0.87, 0.503]],
  [0.221, [0.997, 0.87, 0.503]],
  [0.223, [0.997, 0.868, 0.498]],
  [0.225, [0.997, 0.868, 0.498]],
  [0.227, [0.997, 0.865, 0.492]],
  [0.229, [0.997, 0.865, 0.492]],
  [0.231, [0.997, 0.863, 0.487]],
  [0.233, [0.997, 0.863, 0.487]],
  [0.235, [0.997, 0.86, 0.482]],
  [0.237, [0.997, 0.86, 0.482]],
  [0.239, [0.996, 0.858, 0.477]],
  [0.241, [0.996, 0.858, 0.477]],
  [0.243, [0.996, 0.855, 0.472]],
  [0.245, [0.996, 0.855, 0.472]],
  [0.247, [0.996, 0.853, 0.467]],
  [0.249, [0.996, 0.853, 0.467]],
  [0.25, [0.996, 0.85, 0.461]],
  [0.252, [0.996, 0.85, 0.461]],
  [0.254, [0.996, 0.845, 0.456]],
  [0.256, [0.996, 0.845, 0.456]],
  [0.258, [0.996, 0.84, 0.451]],
  [0.26, [0.996, 0.84, 0.451]],
  [0.262, [0.996, 0.835, 0.446]],
  [0.264, [0.996, 0.835, 0.446]],
  [0.266, [0.996, 0.831, 0.441]],
  [0.268, [0.996, 0.831, 0.441]],
  [0.27, [0.996, 0.826, 0.436]],
  [0.272, [0.996, 0.826, 0.436]],
  [0.274, [0.996, 0.821, 0.43]],
  [0.276, [0.996, 0.821, 0.43]],
  [0.278, [0.996, 0.816, 0.425]],
  [0.28, [0.996, 0.816, 0.425]],
  [0.282, [0.996, 0.811, 0.42]],
  [0.284, [0.996, 0.811, 0.42]],
  [0.286, [0.996, 0.807, 0.415]],
  [0.288, [0.996, 0.807, 0.415]],
  [0.29, [0.996, 0.802, 0.41]],
  [0.292, [0.996, 0.802, 0.41]],
  [0.294, [0.996, 0.797, 0.405]],
  [0.295, [0.996, 0.797, 0.405]],
  [0.297, [0.996, 0.792, 0.399]],
  [0.299, [0.996, 0.792, 0.399]],
  [0.301, [0.996, 0.787, 0.394]],
  [0.303, [0.996, 0.787, 0.394]],
  [0.305, [0.996, 0.783, 0.389]],
  [0.307, [0.996, 0.783, 0.389]],
  [0.309, [0.996, 0.778, 0.384]],
  [0.311, [0.996, 0.778, 0.384]],
  [0.313, [0.996, 0.773, 0.379]],
  [0.315, [0.996, 0.773, 0.379]],
  [0.317, [0.996, 0.768, 0.374]],
  [0.319, [0.996, 0.768, 0.374]],
  [0.321, [0.996, 0.763, 0.368]],
  [0.323, [0.996, 0.763, 0.368]],
  [0.325, [0.996, 0.759, 0.363]],
  [0.327, [0.996, 0.759, 0.363]],
  [0.329, [0.996, 0.754, 0.358]],
  [0.331, [0.996, 0.754, 0.358]],
  [0.333, [0.996, 0.749, 0.353]],
  [0.335, [0.996, 0.749, 0.353]],
  [0.337, [0.996, 0.744, 0.348]],
  [0.339, [0.996, 0.744, 0.348]],
  [0.341, [0.996, 0.739, 0.343]],
  [0.342, [0.996, 0.739, 0.343]],
  [0.344, [0.996, 0.735, 0.337]],
  [0.346, [0.996, 0.735, 0.337]],
  [0.348, [0.996, 0.73, 0.332]],
  [0.35, [0.996, 0.73, 0.332]],
  [0.352, [0.996, 0.725, 0.327]],
  [0.354, [0.996, 0.725, 0.327]],
  [0.356, [0.996, 0.72, 0.322]],
  [0.358, [0.996, 0.72, 0.322]],
  [0.36, [0.996, 0.715, 0.317]],
  [0.362, [0.996, 0.715, 0.317]],
  [0.364, [0.996, 0.711, 0.312]],
  [0.366, [0.996, 0.711, 0.312]],
  [0.368, [0.996, 0.706, 0.306]],
  [0.37, [0.996, 0.706, 0.306]],
  [0.372, [0.996, 0.701, 0.301]],
  [0.374, [0.996, 0.701, 0.301]],
  [0.376, [0.996, 0.696, 0.297]],
  [0.378, [0.996, 0.696, 0.297]],
  [0.38, [0.996, 0.692, 0.295]],
  [0.382, [0.996, 0.692, 0.295]],
  [0.384, [0.996, 0.687, 0.293]],
  [0.386, [0.996, 0.687, 0.293]],
  [0.387, [0.996, 0.683, 0.291]],
  [0.389, [0.996, 0.683, 0.291]],
  [0.391, [0.996, 0.678, 0.289]],
  [0.393, [0.996, 0.678, 0.289]],
  [0.395, [0.995, 0.674, 0.287]],
  [0.397, [0.995, 0.674, 0.287]],
  [0.399, [0.995, 0.669, 0.285]],
  [0.401, [0.995, 0.669, 0.285]],
  [0.403, [0.995, 0.664, 0.284]],
  [0.405, [0.995, 0.664, 0.284]],
  [0.407, [0.995, 0.66, 0.282]],
  [0.409, [0.995, 0.66, 0.282]],
  [0.411, [0.995, 0.655, 0.28]],
  [0.413, [0.995, 0.655, 0.28]],
  [0.415, [0.995, 0.651, 0.278]],
  [0.417, [0.995, 0.651, 0.278]],
  [0.419, [0.995, 0.646, 0.276]],
  [0.421, [0.995, 0.646, 0.276]],
  [0.423, [0.995, 0.642, 0.274]],
  [0.425, [0.995, 0.642, 0.274]],
  [0.427, [0.994, 0.637, 0.272]],
  [0.429, [0.994, 0.637, 0.272]],
  [0.431, [0.994, 0.633, 0.27]],
  [0.432, [0.994, 0.633, 0.27]],
  [0.434, [0.994, 0.628, 0.268]],
  [0.436, [0.994, 0.628, 0.268]],
  [0.438, [0.994, 0.623, 0.266]],
  [0.44, [0.994, 0.623, 0.266]],
  [0.442, [0.994, 0.619, 0.264]],
  [0.444, [0.994, 0.619, 0.264]],
  [0.446, [0.994, 0.614, 0.262]],
  [0.448, [0.994, 0.614, 0.262]],
  [0.45, [0.994, 0.61, 0.26]],
  [0.452, [0.994, 0.61, 0.26]],
  [0.454, [0.994, 0.605, 0.258]],
  [0.456, [0.994, 0.605, 0.258]],
  [0.458, [0.993, 0.601, 0.256]],
  [0.46, [0.993, 0.601, 0.256]],
  [0.462, [0.993, 0.596, 0.254]],
  [0.464, [0.993, 0.596, 0.254]],
  [0.466, [0.993, 0.592, 0.252]],
  [0.468, [0.993, 0.592, 0.252]],
  [0.47, [0.993, 0.587, 0.25]],
  [0.472, [0.993, 0.587, 0.25]],
  [0.474, [0.993, 0.583, 0.248]],
  [0.476, [0.993, 0.583, 0.248]],
  [0.477, [0.993, 0.578, 0.246]],
  [0.479, [0.993, 0.578, 0.246]],
  [0.481, [0.993, 0.573, 0.244]],
  [0.483, [0.993, 0.573, 0.244]],
  [0.485, [0.993, 0.569, 0.242]],
  [0.487, [0.993, 0.569, 0.242]],
  [0.489, [0.992, 0.564, 0.24]],
  [0.491, [0.992, 0.564, 0.24]],
  [0.493, [0.992, 0.56, 0.238]],
  [0.495, [0.992, 0.56, 0.238]],
  [0.497, [0.992, 0.555, 0.236]],
  [0.499, [0.992, 0.555, 0.236]],
  [0.501, [0.992, 0.549, 0.234]],
  [0.503, [0.992, 0.549, 0.234]],
  [0.505, [0.992, 0.541, 0.232]],
  [0.507, [0.992, 0.541, 0.232]],
  [0.509, [0.992, 0.534, 0.23]],
  [0.511, [0.992, 0.534, 0.23]],
  [0.513, [0.992, 0.526, 0.228]],
  [0.515, [0.992, 0.526, 0.228]],
  [0.517, [0.992, 0.518, 0.225]],
  [0.519, [0.992, 0.518, 0.225]],
  [0.521, [0.991, 0.51, 0.223]],
  [0.523, [0.991, 0.51, 0.223]],
  [0.524, [0.991, 0.503, 0.221]],
  [0.526, [0.991, 0.503, 0.221]],
  [0.528, [0.991, 0.495, 0.219]],
  [0.53, [0.991, 0.495, 0.219]],
  [0.532, [0.991, 0.487, 0.216]],
  [0.534, [0.991, 0.487, 0.216]],
  [0.536, [0.991, 0.479, 0.214]],
  [0.538, [0.991, 0.479, 0.214]],
  [0.54, [0.991, 0.472, 0.212]],
  [0.542, [0.991, 0.472, 0.212]],
  [0.544, [0.991, 0.464, 0.21]],
  [0.546, [0.991, 0.464, 0.21]],
  [0.548, [0.991, 0.456, 0.208]],
  [0.55, [0.991, 0.456, 0.208]],
  [0.552, [0.99, 0.448, 0.205]],
  [0.554, [0.99, 0.448, 0.205]],
  [0.556, [0.99, 0.441, 0.203]],
  [0.558, [0.99, 0.441, 0.203]],
  [0.56, [0.99, 0.433, 0.201]],
  [0.562, [0.99, 0.433, 0.201]],
  [0.564, [0.99, 0.425, 0.199]],
  [0.566, [0.99, 0.425, 0.199]],
  [0.568, [0.99, 0.417, 0.197]],
  [0.569, [0.99, 0.417, 0.197]],
  [0.571, [0.99, 0.41, 0.194]],
  [0.573, [0.99, 0.41, 0.194]],
  [0.575, [0.99, 0.402, 0.192]],
  [0.577, [0.99, 0.402, 0.192]],
  [0.579, [0.99, 0.394, 0.19]],
  [0.581, [0.99, 0.394, 0.19]],
  [0.583, [0.99, 0.386, 0.188]],
  [0.585, [0.99, 0.386, 0.188]],
  [0.587, [0.989, 0.379, 0.185]],
  [0.589, [0.989, 0.379, 0.185]],
  [0.591, [0.989, 0.371, 0.183]],
  [0.593, [0.989, 0.371, 0.183]],
  [0.595, [0.989, 0.363, 0.181]],
  [0.597, [0.989, 0.363, 0.181]],
  [0.599, [0.989, 0.355, 0.179]],
  [0.601, [0.989, 0.355, 0.179]],
  [0.603, [0.989, 0.348, 0.177]],
  [0.605, [0.989, 0.348, 0.177]],
  [0.607, [0.989, 0.34, 0.174]],
  [0.609, [0.989, 0.34, 0.174]],
  [0.611, [0.989, 0.332, 0.172]],
  [0.613, [0.989, 0.332, 0.172]],
  [0.614, [0.989, 0.324, 0.17]],
  [0.616, [0.989, 0.324, 0.17]],
  [0.618, [0.988, 0.317, 0.168]],
  [0.62, [0.988, 0.317, 0.168]],
  [0.622, [0.988, 0.309, 0.166]],
  [0.624, [0.988, 0.309, 0.166]],
  [0.626, [0.986, 0.302, 0.164]],
  [0.628, [0.986, 0.302, 0.164]],
  [0.63, [0.983, 0.295, 0.162]],
  [0.632, [0.983, 0.295, 0.162]],
  [0.634, [0.98, 0.289, 0.16]],
  [0.636, [0.98, 0.289, 0.16]],
  [0.638, [0.977, 0.283, 0.158]],
  [0.64, [0.977, 0.283, 0.158]],
  [0.642, [0.974, 0.276, 0.157]],
  [0.644, [0.974, 0.276, 0.157]],
  [0.646, [0.971, 0.27, 0.155]],
  [0.648, [0.971, 0.27, 0.155]],
  [0.65, [0.968, 0.263, 0.153]],
  [0.652, [0.968, 0.263, 0.153]],
  [0.654, [0.965, 0.257, 0.152]],
  [0.656, [0.965, 0.257, 0.152]],
  [0.658, [0.962, 0.251, 0.15]],
  [0.659, [0.962, 0.251, 0.15]],
  [0.661, [0.959, 0.244, 0.148]],
  [0.663, [0.959, 0.244, 0.148]],
  [0.665, [0.956, 0.238, 0.146]],
  [0.667, [0.956, 0.238, 0.146]],
  [0.669, [0.952, 0.232, 0.145]],
  [0.671, [0.952, 0.232, 0.145]],
  [0.673, [0.949, 0.225, 0.143]],
  [0.675, [0.949, 0.225, 0.143]],
  [0.677, [0.946, 0.219, 0.141]],
  [0.679, [0.946, 0.219, 0.141]],
  [0.681, [0.943, 0.212, 0.14]],
  [0.683, [0.943, 0.212, 0.14]],
  [0.685, [0.94, 0.206, 0.138]],
  [0.687, [0.94, 0.206, 0.138]],
  [0.689, [0.937, 0.2, 0.136]],
  [0.691, [0.937, 0.2, 0.136]],
  [0.693, [0.934, 0.193, 0.134]],
  [0.695, [0.934, 0.193, 0.134]],
  [0.697, [0.931, 0.187, 0.133]],
  [0.699, [0.931, 0.187, 0.133]],
  [0.701, [0.928, 0.18, 0.131]],
  [0.703, [0.928, 0.18, 0.131]],
  [0.705, [0.925, 0.174, 0.129]],
  [0.706, [0.925, 0.174, 0.129]],
  [0.708, [0.922, 0.168, 0.127]],
  [0.71, [0.922, 0.168, 0.127]],
  [0.712, [0.919, 0.161, 0.126]],
  [0.714, [0.919, 0.161, 0.126]],
  [0.716, [0.916, 0.155, 0.124]],
  [0.718, [0.916, 0.155, 0.124]],
  [0.72, [0.912, 0.148, 0.122]],
  [0.722, [0.912, 0.148, 0.122]],
  [0.724, [0.909, 0.142, 0.121]],
  [0.726, [0.909, 0.142, 0.121]],
  [0.728, [0.906, 0.136, 0.119]],
  [0.73, [0.906, 0.136, 0.119]],
  [0.732, [0.903, 0.129, 0.117]],
  [0.734, [0.903, 0.129, 0.117]],
  [0.736, [0.9, 0.123, 0.115]],
  [0.738, [0.9, 0.123, 0.115]],
  [0.74, [0.897, 0.116, 0.114]],
  [0.742, [0.897, 0.116, 0.114]],
  [0.744, [0.894, 0.11, 0.112]],
  [0.746, [0.894, 0.11, 0.112]],
  [0.748, [0.891, 0.104, 0.11]],
  [0.75, [0.891, 0.104, 0.11]],
  [0.751, [0.887, 0.1, 0.111]],
  [0.753, [0.887, 0.1, 0.111]],
  [0.755, [0.882, 0.096, 0.112]],
  [0.757, [0.882, 0.096, 0.112]],
  [0.759, [0.877, 0.093, 0.113]],
  [0.761, [0.877, 0.093, 0.113]],
  [0.763, [0.873, 0.09, 0.114]],
  [0.765, [0.873, 0.09, 0.114]],
  [0.767, [0.868, 0.087, 0.116]],
  [0.769, [0.868, 0.087, 0.116]],
  [0.771, [0.863, 0.084, 0.117]],
  [0.773, [0.863, 0.084, 0.117]],
  [0.775, [0.859, 0.08, 0.118]],
  [0.777, [0.859, 0.08, 0.118]],
  [0.779, [0.854, 0.077, 0.119]],
  [0.781, [0.854, 0.077, 0.119]],
  [0.783, [0.849, 0.074, 0.121]],
  [0.785, [0.849, 0.074, 0.121]],
  [0.787, [0.845, 0.071, 0.122]],
  [0.789, [0.845, 0.071, 0.122]],
  [0.791, [0.84, 0.068, 0.123]],
  [0.793, [0.84, 0.068, 0.123]],
  [0.795, [0.835, 0.064, 0.124]],
  [0.796, [0.835, 0.064, 0.124]],
  [0.798, [0.831, 0.061, 0.125]],
  [0.8, [0.831, 0.061, 0.125]],
  [0.802, [0.826, 0.058, 0.127]],
  [0.804, [0.826, 0.058, 0.127]],
  [0.806, [0.821, 0.055, 0.128]],
  [0.808, [0.821, 0.055, 0.128]],
  [0.81, [0.817, 0.052, 0.129]],
  [0.812, [0.817, 0.052, 0.129]],
  [0.814, [0.812, 0.048, 0.13]],
  [0.816, [0.812, 0.048, 0.13]],
  [0.818, [0.807, 0.045, 0.132]],
  [0.82, [0.807, 0.045, 0.132]],
  [0.822, [0.803, 0.042, 0.133]],
  [0.824, [0.803, 0.042, 0.133]],
  [0.826, [0.798, 0.039, 0.134]],
  [0.828, [0.798, 0.039, 0.134]],
  [0.83, [0.793, 0.036, 0.135]],
  [0.832, [0.793, 0.036, 0.135]],
  [0.834, [0.789, 0.032, 0.137]],
  [0.836, [0.789, 0.032, 0.137]],
  [0.838, [0.784, 0.029, 0.138]],
  [0.84, [0.784, 0.029, 0.138]],
  [0.841, [0.779, 0.026, 0.139]],
  [0.843, [0.779, 0.026, 0.139]],
  [0.845, [0.774, 0.023, 0.14]],
  [0.847, [0.774, 0.023, 0.14]],
  [0.849, [0.77, 0.02, 0.141]],
  [0.851, [0.77, 0.02, 0.141]],
  [0.853, [0.765, 0.016, 0.143]],
  [0.855, [0.765, 0.016, 0.143]],
  [0.857, [0.76, 0.013, 0.144]],
  [0.859, [0.76, 0.013, 0.144]],
  [0.861, [0.756, 0.01, 0.145]],
  [0.863, [0.756, 0.01, 0.145]],
  [0.865, [0.751, 7e-3, 0.146]],
  [0.867, [0.751, 7e-3, 0.146]],
  [0.869, [0.746, 4e-3, 0.148]],
  [0.871, [0.746, 4e-3, 0.148]],
  [0.873, [0.742, 0, 0.149]],
  [0.875, [0.742, 0, 0.149]],
  [0.877, [0.735, 0, 0.149]],
  [0.879, [0.735, 0, 0.149]],
  [0.881, [0.727, 0, 0.149]],
  [0.883, [0.727, 0, 0.149]],
  [0.885, [0.72, 0, 0.149]],
  [0.886, [0.72, 0, 0.149]],
  [0.888, [0.712, 0, 0.149]],
  [0.89, [0.712, 0, 0.149]],
  [0.892, [0.705, 0, 0.149]],
  [0.894, [0.705, 0, 0.149]],
  [0.896, [0.697, 0, 0.149]],
  [0.898, [0.697, 0, 0.149]],
  [0.9, [0.69, 0, 0.149]],
  [0.902, [0.69, 0, 0.149]],
  [0.904, [0.682, 0, 0.149]],
  [0.906, [0.682, 0, 0.149]],
  [0.908, [0.675, 0, 0.149]],
  [0.91, [0.675, 0, 0.149]],
  [0.912, [0.667, 0, 0.149]],
  [0.914, [0.667, 0, 0.149]],
  [0.916, [0.66, 0, 0.149]],
  [0.918, [0.66, 0, 0.149]],
  [0.92, [0.652, 0, 0.149]],
  [0.922, [0.652, 0, 0.149]],
  [0.924, [0.645, 0, 0.149]],
  [0.926, [0.645, 0, 0.149]],
  [0.928, [0.637, 0, 0.149]],
  [0.93, [0.637, 0, 0.149]],
  [0.932, [0.63, 0, 0.149]],
  [0.933, [0.63, 0, 0.149]],
  [0.935, [0.622, 0, 0.149]],
  [0.937, [0.622, 0, 0.149]],
  [0.939, [0.615, 0, 0.149]],
  [0.941, [0.615, 0, 0.149]],
  [0.943, [0.607, 0, 0.149]],
  [0.945, [0.607, 0, 0.149]],
  [0.947, [0.6, 0, 0.149]],
  [0.949, [0.6, 0, 0.149]],
  [0.951, [0.592, 0, 0.149]],
  [0.953, [0.592, 0, 0.149]],
  [0.955, [0.585, 0, 0.149]],
  [0.957, [0.585, 0, 0.149]],
  [0.959, [0.577, 0, 0.149]],
  [0.961, [0.577, 0, 0.149]],
  [0.963, [0.57, 0, 0.149]],
  [0.965, [0.57, 0, 0.149]],
  [0.967, [0.562, 0, 0.149]],
  [0.969, [0.562, 0, 0.149]],
  [0.971, [0.554, 0, 0.149]],
  [0.973, [0.554, 0, 0.149]],
  [0.975, [0.547, 0, 0.149]],
  [0.977, [0.547, 0, 0.149]],
  [0.978, [0.539, 0, 0.149]],
  [0.98, [0.539, 0, 0.149]],
  [0.982, [0.532, 0, 0.149]],
  [0.984, [0.532, 0, 0.149]],
  [0.986, [0.524, 0, 0.149]],
  [0.988, [0.524, 0, 0.149]],
  [0.99, [0.517, 0, 0.149]],
  [0.992, [0.517, 0, 0.149]],
  [0.994, [0.509, 0, 0.149]],
  [0.996, [0.509, 0, 0.149]],
  [0.998, [0.502, 0, 0.149]],
  [1, [0.502, 0, 0.149]]
], wp = [
  [0, [0, 0, 0]],
  [2e-3, [0, 0, 0]],
  [4e-3, [8e-3, 0, 0]],
  [6e-3, [8e-3, 0, 0]],
  [8e-3, [0.016, 0, 0]],
  [0.01, [0.016, 0, 0]],
  [0.012, [0.024, 0, 0]],
  [0.014, [0.024, 0, 0]],
  [0.016, [0.031, 0, 0]],
  [0.018, [0.031, 0, 0]],
  [0.02, [0.039, 0, 0]],
  [0.022, [0.039, 0, 0]],
  [0.023, [0.047, 0, 0]],
  [0.025, [0.047, 0, 0]],
  [0.027, [0.055, 0, 0]],
  [0.029, [0.055, 0, 0]],
  [0.031, [0.063, 0, 0]],
  [0.033, [0.063, 0, 0]],
  [0.035, [0.071, 0, 0]],
  [0.037, [0.071, 0, 0]],
  [0.039, [0.078, 0, 0]],
  [0.041, [0.078, 0, 0]],
  [0.043, [0.086, 0, 0]],
  [0.045, [0.086, 0, 0]],
  [0.047, [0.094, 0, 0]],
  [0.049, [0.094, 0, 0]],
  [0.051, [0.102, 0, 0]],
  [0.053, [0.102, 0, 0]],
  [0.055, [0.11, 0, 0]],
  [0.057, [0.11, 0, 0]],
  [0.059, [0.118, 0, 0]],
  [0.061, [0.118, 0, 0]],
  [0.063, [0.125, 0, 0]],
  [0.065, [0.125, 0, 0]],
  [0.067, [0.133, 0, 0]],
  [0.068, [0.133, 0, 0]],
  [0.07, [0.141, 0, 0]],
  [0.072, [0.141, 0, 0]],
  [0.074, [0.149, 0, 0]],
  [0.076, [0.149, 0, 0]],
  [0.078, [0.157, 0, 0]],
  [0.08, [0.157, 0, 0]],
  [0.082, [0.165, 0, 0]],
  [0.084, [0.165, 0, 0]],
  [0.086, [0.173, 0, 0]],
  [0.088, [0.173, 0, 0]],
  [0.09, [0.18, 0, 0]],
  [0.092, [0.18, 0, 0]],
  [0.094, [0.188, 0, 0]],
  [0.096, [0.188, 0, 0]],
  [0.098, [0.196, 0, 0]],
  [0.1, [0.196, 0, 0]],
  [0.102, [0.204, 0, 0]],
  [0.104, [0.204, 0, 0]],
  [0.106, [0.212, 0, 0]],
  [0.108, [0.212, 0, 0]],
  [0.11, [0.22, 0, 0]],
  [0.112, [0.22, 0, 0]],
  [0.114, [0.227, 0, 0]],
  [0.115, [0.227, 0, 0]],
  [0.117, [0.235, 0, 0]],
  [0.119, [0.235, 0, 0]],
  [0.121, [0.243, 0, 0]],
  [0.123, [0.243, 0, 0]],
  [0.125, [0.251, 0, 0]],
  [0.127, [0.251, 0, 0]],
  [0.129, [0.259, 0, 0]],
  [0.131, [0.259, 0, 0]],
  [0.133, [0.267, 0, 0]],
  [0.135, [0.267, 0, 0]],
  [0.137, [0.275, 0, 0]],
  [0.139, [0.275, 0, 0]],
  [0.141, [0.282, 0, 0]],
  [0.143, [0.282, 0, 0]],
  [0.145, [0.29, 0, 0]],
  [0.147, [0.29, 0, 0]],
  [0.149, [0.298, 0, 0]],
  [0.151, [0.298, 0, 0]],
  [0.153, [0.306, 0, 0]],
  [0.155, [0.306, 0, 0]],
  [0.157, [0.314, 0, 0]],
  [0.159, [0.314, 0, 0]],
  [0.16, [0.322, 0, 0]],
  [0.162, [0.322, 0, 0]],
  [0.164, [0.329, 0, 0]],
  [0.166, [0.329, 0, 0]],
  [0.168, [0.337, 0, 0]],
  [0.17, [0.337, 0, 0]],
  [0.172, [0.345, 0, 0]],
  [0.174, [0.345, 0, 0]],
  [0.176, [0.353, 0, 0]],
  [0.178, [0.353, 0, 0]],
  [0.18, [0.361, 0, 0]],
  [0.182, [0.361, 0, 0]],
  [0.184, [0.369, 0, 0]],
  [0.186, [0.369, 0, 0]],
  [0.188, [0.376, 0, 0]],
  [0.19, [0.376, 0, 0]],
  [0.192, [0.384, 0, 0]],
  [0.194, [0.384, 0, 0]],
  [0.196, [0.392, 0, 0]],
  [0.198, [0.392, 0, 0]],
  [0.2, [0.4, 0, 0]],
  [0.202, [0.4, 0, 0]],
  [0.204, [0.408, 0, 0]],
  [0.205, [0.408, 0, 0]],
  [0.207, [0.416, 0, 0]],
  [0.209, [0.416, 0, 0]],
  [0.211, [0.424, 0, 0]],
  [0.213, [0.424, 0, 0]],
  [0.215, [0.431, 0, 0]],
  [0.217, [0.431, 0, 0]],
  [0.219, [0.439, 0, 0]],
  [0.221, [0.439, 0, 0]],
  [0.223, [0.447, 0, 0]],
  [0.225, [0.447, 0, 0]],
  [0.227, [0.455, 0, 0]],
  [0.229, [0.455, 0, 0]],
  [0.231, [0.463, 0, 0]],
  [0.233, [0.463, 0, 0]],
  [0.235, [0.471, 0, 0]],
  [0.237, [0.471, 0, 0]],
  [0.239, [0.478, 0, 0]],
  [0.241, [0.478, 0, 0]],
  [0.243, [0.486, 0, 0]],
  [0.245, [0.486, 0, 0]],
  [0.247, [0.494, 0, 0]],
  [0.249, [0.494, 0, 0]],
  [0.25, [0.502, 2e-3, 0]],
  [0.252, [0.502, 2e-3, 0]],
  [0.254, [0.51, 0.01, 0]],
  [0.256, [0.51, 0.01, 0]],
  [0.258, [0.518, 0.018, 0]],
  [0.26, [0.518, 0.018, 0]],
  [0.262, [0.525, 0.025, 0]],
  [0.264, [0.525, 0.025, 0]],
  [0.266, [0.533, 0.033, 0]],
  [0.268, [0.533, 0.033, 0]],
  [0.27, [0.541, 0.041, 0]],
  [0.272, [0.541, 0.041, 0]],
  [0.274, [0.549, 0.049, 0]],
  [0.276, [0.549, 0.049, 0]],
  [0.278, [0.557, 0.057, 0]],
  [0.28, [0.557, 0.057, 0]],
  [0.282, [0.565, 0.065, 0]],
  [0.284, [0.565, 0.065, 0]],
  [0.286, [0.573, 0.073, 0]],
  [0.288, [0.573, 0.073, 0]],
  [0.29, [0.58, 0.08, 0]],
  [0.292, [0.58, 0.08, 0]],
  [0.294, [0.588, 0.088, 0]],
  [0.295, [0.588, 0.088, 0]],
  [0.297, [0.596, 0.096, 0]],
  [0.299, [0.596, 0.096, 0]],
  [0.301, [0.604, 0.104, 0]],
  [0.303, [0.604, 0.104, 0]],
  [0.305, [0.612, 0.112, 0]],
  [0.307, [0.612, 0.112, 0]],
  [0.309, [0.62, 0.12, 0]],
  [0.311, [0.62, 0.12, 0]],
  [0.313, [0.627, 0.127, 0]],
  [0.315, [0.627, 0.127, 0]],
  [0.317, [0.635, 0.135, 0]],
  [0.319, [0.635, 0.135, 0]],
  [0.321, [0.643, 0.143, 0]],
  [0.323, [0.643, 0.143, 0]],
  [0.325, [0.651, 0.151, 0]],
  [0.327, [0.651, 0.151, 0]],
  [0.329, [0.659, 0.159, 0]],
  [0.331, [0.659, 0.159, 0]],
  [0.333, [0.667, 0.167, 0]],
  [0.335, [0.667, 0.167, 0]],
  [0.337, [0.675, 0.175, 0]],
  [0.339, [0.675, 0.175, 0]],
  [0.341, [0.682, 0.182, 0]],
  [0.342, [0.682, 0.182, 0]],
  [0.344, [0.69, 0.19, 0]],
  [0.346, [0.69, 0.19, 0]],
  [0.348, [0.698, 0.198, 0]],
  [0.35, [0.698, 0.198, 0]],
  [0.352, [0.706, 0.206, 0]],
  [0.354, [0.706, 0.206, 0]],
  [0.356, [0.714, 0.214, 0]],
  [0.358, [0.714, 0.214, 0]],
  [0.36, [0.722, 0.222, 0]],
  [0.362, [0.722, 0.222, 0]],
  [0.364, [0.729, 0.229, 0]],
  [0.366, [0.729, 0.229, 0]],
  [0.368, [0.737, 0.237, 0]],
  [0.37, [0.737, 0.237, 0]],
  [0.372, [0.745, 0.245, 0]],
  [0.374, [0.745, 0.245, 0]],
  [0.376, [0.753, 0.253, 0]],
  [0.378, [0.753, 0.253, 0]],
  [0.38, [0.761, 0.261, 0]],
  [0.382, [0.761, 0.261, 0]],
  [0.384, [0.769, 0.269, 0]],
  [0.386, [0.769, 0.269, 0]],
  [0.387, [0.776, 0.276, 0]],
  [0.389, [0.776, 0.276, 0]],
  [0.391, [0.784, 0.284, 0]],
  [0.393, [0.784, 0.284, 0]],
  [0.395, [0.792, 0.292, 0]],
  [0.397, [0.792, 0.292, 0]],
  [0.399, [0.8, 0.3, 0]],
  [0.401, [0.8, 0.3, 0]],
  [0.403, [0.808, 0.308, 0]],
  [0.405, [0.808, 0.308, 0]],
  [0.407, [0.816, 0.316, 0]],
  [0.409, [0.816, 0.316, 0]],
  [0.411, [0.824, 0.324, 0]],
  [0.413, [0.824, 0.324, 0]],
  [0.415, [0.831, 0.331, 0]],
  [0.417, [0.831, 0.331, 0]],
  [0.419, [0.839, 0.339, 0]],
  [0.421, [0.839, 0.339, 0]],
  [0.423, [0.847, 0.347, 0]],
  [0.425, [0.847, 0.347, 0]],
  [0.427, [0.855, 0.355, 0]],
  [0.429, [0.855, 0.355, 0]],
  [0.431, [0.863, 0.363, 0]],
  [0.432, [0.863, 0.363, 0]],
  [0.434, [0.871, 0.371, 0]],
  [0.436, [0.871, 0.371, 0]],
  [0.438, [0.878, 0.378, 0]],
  [0.44, [0.878, 0.378, 0]],
  [0.442, [0.886, 0.386, 0]],
  [0.444, [0.886, 0.386, 0]],
  [0.446, [0.894, 0.394, 0]],
  [0.448, [0.894, 0.394, 0]],
  [0.45, [0.902, 0.402, 0]],
  [0.452, [0.902, 0.402, 0]],
  [0.454, [0.91, 0.41, 0]],
  [0.456, [0.91, 0.41, 0]],
  [0.458, [0.918, 0.418, 0]],
  [0.46, [0.918, 0.418, 0]],
  [0.462, [0.925, 0.425, 0]],
  [0.464, [0.925, 0.425, 0]],
  [0.466, [0.933, 0.433, 0]],
  [0.468, [0.933, 0.433, 0]],
  [0.47, [0.941, 0.441, 0]],
  [0.472, [0.941, 0.441, 0]],
  [0.474, [0.949, 0.449, 0]],
  [0.476, [0.949, 0.449, 0]],
  [0.477, [0.957, 0.457, 0]],
  [0.479, [0.957, 0.457, 0]],
  [0.481, [0.965, 0.465, 0]],
  [0.483, [0.965, 0.465, 0]],
  [0.485, [0.973, 0.473, 0]],
  [0.487, [0.973, 0.473, 0]],
  [0.489, [0.98, 0.48, 0]],
  [0.491, [0.98, 0.48, 0]],
  [0.493, [0.988, 0.488, 0]],
  [0.495, [0.988, 0.488, 0]],
  [0.497, [0.996, 0.496, 0]],
  [0.499, [0.996, 0.496, 0]],
  [0.501, [1, 0.504, 4e-3]],
  [0.503, [1, 0.504, 4e-3]],
  [0.505, [1, 0.512, 0.012]],
  [0.507, [1, 0.512, 0.012]],
  [0.509, [1, 0.52, 0.02]],
  [0.511, [1, 0.52, 0.02]],
  [0.513, [1, 0.527, 0.027]],
  [0.515, [1, 0.527, 0.027]],
  [0.517, [1, 0.535, 0.035]],
  [0.519, [1, 0.535, 0.035]],
  [0.521, [1, 0.543, 0.043]],
  [0.523, [1, 0.543, 0.043]],
  [0.524, [1, 0.551, 0.051]],
  [0.526, [1, 0.551, 0.051]],
  [0.528, [1, 0.559, 0.059]],
  [0.53, [1, 0.559, 0.059]],
  [0.532, [1, 0.567, 0.067]],
  [0.534, [1, 0.567, 0.067]],
  [0.536, [1, 0.575, 0.075]],
  [0.538, [1, 0.575, 0.075]],
  [0.54, [1, 0.582, 0.082]],
  [0.542, [1, 0.582, 0.082]],
  [0.544, [1, 0.59, 0.09]],
  [0.546, [1, 0.59, 0.09]],
  [0.548, [1, 0.598, 0.098]],
  [0.55, [1, 0.598, 0.098]],
  [0.552, [1, 0.606, 0.106]],
  [0.554, [1, 0.606, 0.106]],
  [0.556, [1, 0.614, 0.114]],
  [0.558, [1, 0.614, 0.114]],
  [0.56, [1, 0.622, 0.122]],
  [0.562, [1, 0.622, 0.122]],
  [0.564, [1, 0.629, 0.129]],
  [0.566, [1, 0.629, 0.129]],
  [0.568, [1, 0.637, 0.137]],
  [0.569, [1, 0.637, 0.137]],
  [0.571, [1, 0.645, 0.145]],
  [0.573, [1, 0.645, 0.145]],
  [0.575, [1, 0.653, 0.153]],
  [0.577, [1, 0.653, 0.153]],
  [0.579, [1, 0.661, 0.161]],
  [0.581, [1, 0.661, 0.161]],
  [0.583, [1, 0.669, 0.169]],
  [0.585, [1, 0.669, 0.169]],
  [0.587, [1, 0.676, 0.176]],
  [0.589, [1, 0.676, 0.176]],
  [0.591, [1, 0.684, 0.184]],
  [0.593, [1, 0.684, 0.184]],
  [0.595, [1, 0.692, 0.192]],
  [0.597, [1, 0.692, 0.192]],
  [0.599, [1, 0.7, 0.2]],
  [0.601, [1, 0.7, 0.2]],
  [0.603, [1, 0.708, 0.208]],
  [0.605, [1, 0.708, 0.208]],
  [0.607, [1, 0.716, 0.216]],
  [0.609, [1, 0.716, 0.216]],
  [0.611, [1, 0.724, 0.224]],
  [0.613, [1, 0.724, 0.224]],
  [0.614, [1, 0.731, 0.231]],
  [0.616, [1, 0.731, 0.231]],
  [0.618, [1, 0.739, 0.239]],
  [0.62, [1, 0.739, 0.239]],
  [0.622, [1, 0.747, 0.247]],
  [0.624, [1, 0.747, 0.247]],
  [0.626, [1, 0.755, 0.255]],
  [0.628, [1, 0.755, 0.255]],
  [0.63, [1, 0.763, 0.263]],
  [0.632, [1, 0.763, 0.263]],
  [0.634, [1, 0.771, 0.271]],
  [0.636, [1, 0.771, 0.271]],
  [0.638, [1, 0.778, 0.278]],
  [0.64, [1, 0.778, 0.278]],
  [0.642, [1, 0.786, 0.286]],
  [0.644, [1, 0.786, 0.286]],
  [0.646, [1, 0.794, 0.294]],
  [0.648, [1, 0.794, 0.294]],
  [0.65, [1, 0.802, 0.302]],
  [0.652, [1, 0.802, 0.302]],
  [0.654, [1, 0.81, 0.31]],
  [0.656, [1, 0.81, 0.31]],
  [0.658, [1, 0.818, 0.318]],
  [0.659, [1, 0.818, 0.318]],
  [0.661, [1, 0.825, 0.325]],
  [0.663, [1, 0.825, 0.325]],
  [0.665, [1, 0.833, 0.333]],
  [0.667, [1, 0.833, 0.333]],
  [0.669, [1, 0.841, 0.341]],
  [0.671, [1, 0.841, 0.341]],
  [0.673, [1, 0.849, 0.349]],
  [0.675, [1, 0.849, 0.349]],
  [0.677, [1, 0.857, 0.357]],
  [0.679, [1, 0.857, 0.357]],
  [0.681, [1, 0.865, 0.365]],
  [0.683, [1, 0.865, 0.365]],
  [0.685, [1, 0.873, 0.373]],
  [0.687, [1, 0.873, 0.373]],
  [0.689, [1, 0.88, 0.38]],
  [0.691, [1, 0.88, 0.38]],
  [0.693, [1, 0.888, 0.388]],
  [0.695, [1, 0.888, 0.388]],
  [0.697, [1, 0.896, 0.396]],
  [0.699, [1, 0.896, 0.396]],
  [0.701, [1, 0.904, 0.404]],
  [0.703, [1, 0.904, 0.404]],
  [0.705, [1, 0.912, 0.412]],
  [0.706, [1, 0.912, 0.412]],
  [0.708, [1, 0.92, 0.42]],
  [0.71, [1, 0.92, 0.42]],
  [0.712, [1, 0.927, 0.427]],
  [0.714, [1, 0.927, 0.427]],
  [0.716, [1, 0.935, 0.435]],
  [0.718, [1, 0.935, 0.435]],
  [0.72, [1, 0.943, 0.443]],
  [0.722, [1, 0.943, 0.443]],
  [0.724, [1, 0.951, 0.451]],
  [0.726, [1, 0.951, 0.451]],
  [0.728, [1, 0.959, 0.459]],
  [0.73, [1, 0.959, 0.459]],
  [0.732, [1, 0.967, 0.467]],
  [0.734, [1, 0.967, 0.467]],
  [0.736, [1, 0.975, 0.475]],
  [0.738, [1, 0.975, 0.475]],
  [0.74, [1, 0.982, 0.482]],
  [0.742, [1, 0.982, 0.482]],
  [0.744, [1, 0.99, 0.49]],
  [0.746, [1, 0.99, 0.49]],
  [0.748, [1, 0.998, 0.498]],
  [0.75, [1, 0.998, 0.498]],
  [0.751, [1, 1, 0.506]],
  [0.753, [1, 1, 0.506]],
  [0.755, [1, 1, 0.514]],
  [0.757, [1, 1, 0.514]],
  [0.759, [1, 1, 0.522]],
  [0.761, [1, 1, 0.522]],
  [0.763, [1, 1, 0.529]],
  [0.765, [1, 1, 0.529]],
  [0.767, [1, 1, 0.537]],
  [0.769, [1, 1, 0.537]],
  [0.771, [1, 1, 0.545]],
  [0.773, [1, 1, 0.545]],
  [0.775, [1, 1, 0.553]],
  [0.777, [1, 1, 0.553]],
  [0.779, [1, 1, 0.561]],
  [0.781, [1, 1, 0.561]],
  [0.783, [1, 1, 0.569]],
  [0.785, [1, 1, 0.569]],
  [0.787, [1, 1, 0.576]],
  [0.789, [1, 1, 0.576]],
  [0.791, [1, 1, 0.584]],
  [0.793, [1, 1, 0.584]],
  [0.795, [1, 1, 0.592]],
  [0.796, [1, 1, 0.592]],
  [0.798, [1, 1, 0.6]],
  [0.8, [1, 1, 0.6]],
  [0.802, [1, 1, 0.608]],
  [0.804, [1, 1, 0.608]],
  [0.806, [1, 1, 0.616]],
  [0.808, [1, 1, 0.616]],
  [0.81, [1, 1, 0.624]],
  [0.812, [1, 1, 0.624]],
  [0.814, [1, 1, 0.631]],
  [0.816, [1, 1, 0.631]],
  [0.818, [1, 1, 0.639]],
  [0.82, [1, 1, 0.639]],
  [0.822, [1, 1, 0.647]],
  [0.824, [1, 1, 0.647]],
  [0.826, [1, 1, 0.655]],
  [0.828, [1, 1, 0.655]],
  [0.83, [1, 1, 0.663]],
  [0.832, [1, 1, 0.663]],
  [0.834, [1, 1, 0.671]],
  [0.836, [1, 1, 0.671]],
  [0.838, [1, 1, 0.678]],
  [0.84, [1, 1, 0.678]],
  [0.841, [1, 1, 0.686]],
  [0.843, [1, 1, 0.686]],
  [0.845, [1, 1, 0.694]],
  [0.847, [1, 1, 0.694]],
  [0.849, [1, 1, 0.702]],
  [0.851, [1, 1, 0.702]],
  [0.853, [1, 1, 0.71]],
  [0.855, [1, 1, 0.71]],
  [0.857, [1, 1, 0.718]],
  [0.859, [1, 1, 0.718]],
  [0.861, [1, 1, 0.725]],
  [0.863, [1, 1, 0.725]],
  [0.865, [1, 1, 0.733]],
  [0.867, [1, 1, 0.733]],
  [0.869, [1, 1, 0.741]],
  [0.871, [1, 1, 0.741]],
  [0.873, [1, 1, 0.749]],
  [0.875, [1, 1, 0.749]],
  [0.877, [1, 1, 0.757]],
  [0.879, [1, 1, 0.757]],
  [0.881, [1, 1, 0.765]],
  [0.883, [1, 1, 0.765]],
  [0.885, [1, 1, 0.773]],
  [0.886, [1, 1, 0.773]],
  [0.888, [1, 1, 0.78]],
  [0.89, [1, 1, 0.78]],
  [0.892, [1, 1, 0.788]],
  [0.894, [1, 1, 0.788]],
  [0.896, [1, 1, 0.796]],
  [0.898, [1, 1, 0.796]],
  [0.9, [1, 1, 0.804]],
  [0.902, [1, 1, 0.804]],
  [0.904, [1, 1, 0.812]],
  [0.906, [1, 1, 0.812]],
  [0.908, [1, 1, 0.82]],
  [0.91, [1, 1, 0.82]],
  [0.912, [1, 1, 0.827]],
  [0.914, [1, 1, 0.827]],
  [0.916, [1, 1, 0.835]],
  [0.918, [1, 1, 0.835]],
  [0.92, [1, 1, 0.843]],
  [0.922, [1, 1, 0.843]],
  [0.924, [1, 1, 0.851]],
  [0.926, [1, 1, 0.851]],
  [0.928, [1, 1, 0.859]],
  [0.93, [1, 1, 0.859]],
  [0.932, [1, 1, 0.867]],
  [0.933, [1, 1, 0.867]],
  [0.935, [1, 1, 0.875]],
  [0.937, [1, 1, 0.875]],
  [0.939, [1, 1, 0.882]],
  [0.941, [1, 1, 0.882]],
  [0.943, [1, 1, 0.89]],
  [0.945, [1, 1, 0.89]],
  [0.947, [1, 1, 0.898]],
  [0.949, [1, 1, 0.898]],
  [0.951, [1, 1, 0.906]],
  [0.953, [1, 1, 0.906]],
  [0.955, [1, 1, 0.914]],
  [0.957, [1, 1, 0.914]],
  [0.959, [1, 1, 0.922]],
  [0.961, [1, 1, 0.922]],
  [0.963, [1, 1, 0.929]],
  [0.965, [1, 1, 0.929]],
  [0.967, [1, 1, 0.937]],
  [0.969, [1, 1, 0.937]],
  [0.971, [1, 1, 0.945]],
  [0.973, [1, 1, 0.945]],
  [0.975, [1, 1, 0.953]],
  [0.977, [1, 1, 0.953]],
  [0.978, [1, 1, 0.961]],
  [0.98, [1, 1, 0.961]],
  [0.982, [1, 1, 0.969]],
  [0.984, [1, 1, 0.969]],
  [0.986, [1, 1, 0.976]],
  [0.988, [1, 1, 0.976]],
  [0.99, [1, 1, 0.984]],
  [0.992, [1, 1, 0.984]],
  [0.994, [1, 1, 0.992]],
  [0.996, [1, 1, 0.992]],
  [0.998, [1, 1, 1]],
  [1, [1, 1, 1]]
], Mp = [
  [0, [1, 0, 0]],
  [2e-3, [1, 0, 0]],
  [4e-3, [1, 4e-3, 0]],
  [6e-3, [1, 4e-3, 0]],
  [8e-3, [1, 8e-3, 0]],
  [0.01, [1, 8e-3, 0]],
  [0.012, [1, 0.012, 0]],
  [0.014, [1, 0.012, 0]],
  [0.016, [1, 0.016, 0]],
  [0.018, [1, 0.016, 0]],
  [0.02, [1, 0.02, 0]],
  [0.022, [1, 0.02, 0]],
  [0.023, [1, 0.024, 0]],
  [0.025, [1, 0.024, 0]],
  [0.027, [1, 0.027, 0]],
  [0.029, [1, 0.027, 0]],
  [0.031, [1, 0.031, 0]],
  [0.033, [1, 0.031, 0]],
  [0.035, [1, 0.035, 0]],
  [0.037, [1, 0.035, 0]],
  [0.039, [1, 0.039, 0]],
  [0.041, [1, 0.039, 0]],
  [0.043, [1, 0.043, 0]],
  [0.045, [1, 0.043, 0]],
  [0.047, [1, 0.047, 0]],
  [0.049, [1, 0.047, 0]],
  [0.051, [1, 0.051, 0]],
  [0.053, [1, 0.051, 0]],
  [0.055, [1, 0.055, 0]],
  [0.057, [1, 0.055, 0]],
  [0.059, [1, 0.059, 0]],
  [0.061, [1, 0.059, 0]],
  [0.063, [1, 0.063, 0]],
  [0.065, [1, 0.063, 0]],
  [0.067, [1, 0.067, 0]],
  [0.068, [1, 0.067, 0]],
  [0.07, [1, 0.071, 0]],
  [0.072, [1, 0.071, 0]],
  [0.074, [1, 0.075, 0]],
  [0.076, [1, 0.075, 0]],
  [0.078, [1, 0.078, 0]],
  [0.08, [1, 0.078, 0]],
  [0.082, [1, 0.082, 0]],
  [0.084, [1, 0.082, 0]],
  [0.086, [1, 0.086, 0]],
  [0.088, [1, 0.086, 0]],
  [0.09, [1, 0.09, 0]],
  [0.092, [1, 0.09, 0]],
  [0.094, [1, 0.094, 0]],
  [0.096, [1, 0.094, 0]],
  [0.098, [1, 0.098, 0]],
  [0.1, [1, 0.098, 0]],
  [0.102, [1, 0.102, 0]],
  [0.104, [1, 0.102, 0]],
  [0.106, [1, 0.106, 0]],
  [0.108, [1, 0.106, 0]],
  [0.11, [1, 0.11, 0]],
  [0.112, [1, 0.11, 0]],
  [0.114, [1, 0.114, 0]],
  [0.115, [1, 0.114, 0]],
  [0.117, [1, 0.118, 0]],
  [0.119, [1, 0.118, 0]],
  [0.121, [1, 0.122, 0]],
  [0.123, [1, 0.122, 0]],
  [0.125, [1, 0.125, 0]],
  [0.127, [1, 0.125, 0]],
  [0.129, [1, 0.129, 0]],
  [0.131, [1, 0.129, 0]],
  [0.133, [1, 0.133, 0]],
  [0.135, [1, 0.133, 0]],
  [0.137, [1, 0.137, 0]],
  [0.139, [1, 0.137, 0]],
  [0.141, [1, 0.141, 0]],
  [0.143, [1, 0.141, 0]],
  [0.145, [1, 0.145, 0]],
  [0.147, [1, 0.145, 0]],
  [0.149, [1, 0.149, 0]],
  [0.151, [1, 0.149, 0]],
  [0.153, [1, 0.153, 0]],
  [0.155, [1, 0.153, 0]],
  [0.157, [1, 0.157, 0]],
  [0.159, [1, 0.157, 0]],
  [0.16, [1, 0.161, 0]],
  [0.162, [1, 0.161, 0]],
  [0.164, [1, 0.165, 0]],
  [0.166, [1, 0.165, 0]],
  [0.168, [1, 0.169, 0]],
  [0.17, [1, 0.169, 0]],
  [0.172, [1, 0.173, 0]],
  [0.174, [1, 0.173, 0]],
  [0.176, [1, 0.176, 0]],
  [0.178, [1, 0.176, 0]],
  [0.18, [1, 0.18, 0]],
  [0.182, [1, 0.18, 0]],
  [0.184, [1, 0.184, 0]],
  [0.186, [1, 0.184, 0]],
  [0.188, [1, 0.188, 0]],
  [0.19, [1, 0.188, 0]],
  [0.192, [1, 0.192, 0]],
  [0.194, [1, 0.192, 0]],
  [0.196, [1, 0.196, 0]],
  [0.198, [1, 0.196, 0]],
  [0.2, [1, 0.2, 0]],
  [0.202, [1, 0.2, 0]],
  [0.204, [1, 0.204, 0]],
  [0.205, [1, 0.204, 0]],
  [0.207, [1, 0.208, 0]],
  [0.209, [1, 0.208, 0]],
  [0.211, [1, 0.212, 0]],
  [0.213, [1, 0.212, 0]],
  [0.215, [1, 0.216, 0]],
  [0.217, [1, 0.216, 0]],
  [0.219, [1, 0.22, 0]],
  [0.221, [1, 0.22, 0]],
  [0.223, [1, 0.224, 0]],
  [0.225, [1, 0.224, 0]],
  [0.227, [1, 0.227, 0]],
  [0.229, [1, 0.227, 0]],
  [0.231, [1, 0.231, 0]],
  [0.233, [1, 0.231, 0]],
  [0.235, [1, 0.235, 0]],
  [0.237, [1, 0.235, 0]],
  [0.239, [1, 0.239, 0]],
  [0.241, [1, 0.239, 0]],
  [0.243, [1, 0.243, 0]],
  [0.245, [1, 0.243, 0]],
  [0.247, [1, 0.247, 0]],
  [0.249, [1, 0.247, 0]],
  [0.25, [1, 0.251, 0]],
  [0.252, [1, 0.251, 0]],
  [0.254, [1, 0.255, 0]],
  [0.256, [1, 0.255, 0]],
  [0.258, [1, 0.259, 0]],
  [0.26, [1, 0.259, 0]],
  [0.262, [1, 0.263, 0]],
  [0.264, [1, 0.263, 0]],
  [0.266, [1, 0.267, 0]],
  [0.268, [1, 0.267, 0]],
  [0.27, [1, 0.271, 0]],
  [0.272, [1, 0.271, 0]],
  [0.274, [1, 0.275, 0]],
  [0.276, [1, 0.275, 0]],
  [0.278, [1, 0.278, 0]],
  [0.28, [1, 0.278, 0]],
  [0.282, [1, 0.282, 0]],
  [0.284, [1, 0.282, 0]],
  [0.286, [1, 0.286, 0]],
  [0.288, [1, 0.286, 0]],
  [0.29, [1, 0.29, 0]],
  [0.292, [1, 0.29, 0]],
  [0.294, [1, 0.294, 0]],
  [0.295, [1, 0.294, 0]],
  [0.297, [1, 0.298, 0]],
  [0.299, [1, 0.298, 0]],
  [0.301, [1, 0.302, 0]],
  [0.303, [1, 0.302, 0]],
  [0.305, [1, 0.306, 0]],
  [0.307, [1, 0.306, 0]],
  [0.309, [1, 0.31, 0]],
  [0.311, [1, 0.31, 0]],
  [0.313, [1, 0.314, 0]],
  [0.315, [1, 0.314, 0]],
  [0.317, [1, 0.318, 0]],
  [0.319, [1, 0.318, 0]],
  [0.321, [1, 0.322, 0]],
  [0.323, [1, 0.322, 0]],
  [0.325, [1, 0.325, 0]],
  [0.327, [1, 0.325, 0]],
  [0.329, [1, 0.329, 0]],
  [0.331, [1, 0.329, 0]],
  [0.333, [1, 0.333, 0]],
  [0.335, [1, 0.333, 0]],
  [0.337, [1, 0.337, 0]],
  [0.339, [1, 0.337, 0]],
  [0.341, [1, 0.341, 0]],
  [0.342, [1, 0.341, 0]],
  [0.344, [1, 0.345, 0]],
  [0.346, [1, 0.345, 0]],
  [0.348, [1, 0.349, 0]],
  [0.35, [1, 0.349, 0]],
  [0.352, [1, 0.353, 0]],
  [0.354, [1, 0.353, 0]],
  [0.356, [1, 0.357, 0]],
  [0.358, [1, 0.357, 0]],
  [0.36, [1, 0.361, 0]],
  [0.362, [1, 0.361, 0]],
  [0.364, [1, 0.365, 0]],
  [0.366, [1, 0.365, 0]],
  [0.368, [1, 0.369, 0]],
  [0.37, [1, 0.369, 0]],
  [0.372, [1, 0.373, 0]],
  [0.374, [1, 0.373, 0]],
  [0.376, [1, 0.376, 0]],
  [0.378, [1, 0.376, 0]],
  [0.38, [1, 0.38, 0]],
  [0.382, [1, 0.38, 0]],
  [0.384, [1, 0.384, 0]],
  [0.386, [1, 0.384, 0]],
  [0.387, [1, 0.388, 0]],
  [0.389, [1, 0.388, 0]],
  [0.391, [1, 0.392, 0]],
  [0.393, [1, 0.392, 0]],
  [0.395, [1, 0.396, 0]],
  [0.397, [1, 0.396, 0]],
  [0.399, [1, 0.4, 0]],
  [0.401, [1, 0.4, 0]],
  [0.403, [1, 0.404, 0]],
  [0.405, [1, 0.404, 0]],
  [0.407, [1, 0.408, 0]],
  [0.409, [1, 0.408, 0]],
  [0.411, [1, 0.412, 0]],
  [0.413, [1, 0.412, 0]],
  [0.415, [1, 0.416, 0]],
  [0.417, [1, 0.416, 0]],
  [0.419, [1, 0.42, 0]],
  [0.421, [1, 0.42, 0]],
  [0.423, [1, 0.424, 0]],
  [0.425, [1, 0.424, 0]],
  [0.427, [1, 0.427, 0]],
  [0.429, [1, 0.427, 0]],
  [0.431, [1, 0.431, 0]],
  [0.432, [1, 0.431, 0]],
  [0.434, [1, 0.435, 0]],
  [0.436, [1, 0.435, 0]],
  [0.438, [1, 0.439, 0]],
  [0.44, [1, 0.439, 0]],
  [0.442, [1, 0.443, 0]],
  [0.444, [1, 0.443, 0]],
  [0.446, [1, 0.447, 0]],
  [0.448, [1, 0.447, 0]],
  [0.45, [1, 0.451, 0]],
  [0.452, [1, 0.451, 0]],
  [0.454, [1, 0.455, 0]],
  [0.456, [1, 0.455, 0]],
  [0.458, [1, 0.459, 0]],
  [0.46, [1, 0.459, 0]],
  [0.462, [1, 0.463, 0]],
  [0.464, [1, 0.463, 0]],
  [0.466, [1, 0.467, 0]],
  [0.468, [1, 0.467, 0]],
  [0.47, [1, 0.471, 0]],
  [0.472, [1, 0.471, 0]],
  [0.474, [1, 0.475, 0]],
  [0.476, [1, 0.475, 0]],
  [0.477, [1, 0.478, 0]],
  [0.479, [1, 0.478, 0]],
  [0.481, [1, 0.482, 0]],
  [0.483, [1, 0.482, 0]],
  [0.485, [1, 0.486, 0]],
  [0.487, [1, 0.486, 0]],
  [0.489, [1, 0.49, 0]],
  [0.491, [1, 0.49, 0]],
  [0.493, [1, 0.494, 0]],
  [0.495, [1, 0.494, 0]],
  [0.497, [1, 0.498, 0]],
  [0.499, [1, 0.498, 0]],
  [0.501, [1, 0.502, 0]],
  [0.503, [1, 0.502, 0]],
  [0.505, [1, 0.506, 0]],
  [0.507, [1, 0.506, 0]],
  [0.509, [1, 0.51, 0]],
  [0.511, [1, 0.51, 0]],
  [0.513, [1, 0.514, 0]],
  [0.515, [1, 0.514, 0]],
  [0.517, [1, 0.518, 0]],
  [0.519, [1, 0.518, 0]],
  [0.521, [1, 0.522, 0]],
  [0.523, [1, 0.522, 0]],
  [0.524, [1, 0.525, 0]],
  [0.526, [1, 0.525, 0]],
  [0.528, [1, 0.529, 0]],
  [0.53, [1, 0.529, 0]],
  [0.532, [1, 0.533, 0]],
  [0.534, [1, 0.533, 0]],
  [0.536, [1, 0.537, 0]],
  [0.538, [1, 0.537, 0]],
  [0.54, [1, 0.541, 0]],
  [0.542, [1, 0.541, 0]],
  [0.544, [1, 0.545, 0]],
  [0.546, [1, 0.545, 0]],
  [0.548, [1, 0.549, 0]],
  [0.55, [1, 0.549, 0]],
  [0.552, [1, 0.553, 0]],
  [0.554, [1, 0.553, 0]],
  [0.556, [1, 0.557, 0]],
  [0.558, [1, 0.557, 0]],
  [0.56, [1, 0.561, 0]],
  [0.562, [1, 0.561, 0]],
  [0.564, [1, 0.565, 0]],
  [0.566, [1, 0.565, 0]],
  [0.568, [1, 0.569, 0]],
  [0.569, [1, 0.569, 0]],
  [0.571, [1, 0.573, 0]],
  [0.573, [1, 0.573, 0]],
  [0.575, [1, 0.576, 0]],
  [0.577, [1, 0.576, 0]],
  [0.579, [1, 0.58, 0]],
  [0.581, [1, 0.58, 0]],
  [0.583, [1, 0.584, 0]],
  [0.585, [1, 0.584, 0]],
  [0.587, [1, 0.588, 0]],
  [0.589, [1, 0.588, 0]],
  [0.591, [1, 0.592, 0]],
  [0.593, [1, 0.592, 0]],
  [0.595, [1, 0.596, 0]],
  [0.597, [1, 0.596, 0]],
  [0.599, [1, 0.6, 0]],
  [0.601, [1, 0.6, 0]],
  [0.603, [1, 0.604, 0]],
  [0.605, [1, 0.604, 0]],
  [0.607, [1, 0.608, 0]],
  [0.609, [1, 0.608, 0]],
  [0.611, [1, 0.612, 0]],
  [0.613, [1, 0.612, 0]],
  [0.614, [1, 0.616, 0]],
  [0.616, [1, 0.616, 0]],
  [0.618, [1, 0.62, 0]],
  [0.62, [1, 0.62, 0]],
  [0.622, [1, 0.624, 0]],
  [0.624, [1, 0.624, 0]],
  [0.626, [1, 0.627, 0]],
  [0.628, [1, 0.627, 0]],
  [0.63, [1, 0.631, 0]],
  [0.632, [1, 0.631, 0]],
  [0.634, [1, 0.635, 0]],
  [0.636, [1, 0.635, 0]],
  [0.638, [1, 0.639, 0]],
  [0.64, [1, 0.639, 0]],
  [0.642, [1, 0.643, 0]],
  [0.644, [1, 0.643, 0]],
  [0.646, [1, 0.647, 0]],
  [0.648, [1, 0.647, 0]],
  [0.65, [1, 0.651, 0]],
  [0.652, [1, 0.651, 0]],
  [0.654, [1, 0.655, 0]],
  [0.656, [1, 0.655, 0]],
  [0.658, [1, 0.659, 0]],
  [0.659, [1, 0.659, 0]],
  [0.661, [1, 0.663, 0]],
  [0.663, [1, 0.663, 0]],
  [0.665, [1, 0.667, 0]],
  [0.667, [1, 0.667, 0]],
  [0.669, [1, 0.671, 0]],
  [0.671, [1, 0.671, 0]],
  [0.673, [1, 0.675, 0]],
  [0.675, [1, 0.675, 0]],
  [0.677, [1, 0.678, 0]],
  [0.679, [1, 0.678, 0]],
  [0.681, [1, 0.682, 0]],
  [0.683, [1, 0.682, 0]],
  [0.685, [1, 0.686, 0]],
  [0.687, [1, 0.686, 0]],
  [0.689, [1, 0.69, 0]],
  [0.691, [1, 0.69, 0]],
  [0.693, [1, 0.694, 0]],
  [0.695, [1, 0.694, 0]],
  [0.697, [1, 0.698, 0]],
  [0.699, [1, 0.698, 0]],
  [0.701, [1, 0.702, 0]],
  [0.703, [1, 0.702, 0]],
  [0.705, [1, 0.706, 0]],
  [0.706, [1, 0.706, 0]],
  [0.708, [1, 0.71, 0]],
  [0.71, [1, 0.71, 0]],
  [0.712, [1, 0.714, 0]],
  [0.714, [1, 0.714, 0]],
  [0.716, [1, 0.718, 0]],
  [0.718, [1, 0.718, 0]],
  [0.72, [1, 0.722, 0]],
  [0.722, [1, 0.722, 0]],
  [0.724, [1, 0.725, 0]],
  [0.726, [1, 0.725, 0]],
  [0.728, [1, 0.729, 0]],
  [0.73, [1, 0.729, 0]],
  [0.732, [1, 0.733, 0]],
  [0.734, [1, 0.733, 0]],
  [0.736, [1, 0.737, 0]],
  [0.738, [1, 0.737, 0]],
  [0.74, [1, 0.741, 0]],
  [0.742, [1, 0.741, 0]],
  [0.744, [1, 0.745, 0]],
  [0.746, [1, 0.745, 0]],
  [0.748, [1, 0.749, 0]],
  [0.75, [1, 0.749, 0]],
  [0.751, [1, 0.753, 0]],
  [0.753, [1, 0.753, 0]],
  [0.755, [1, 0.757, 0]],
  [0.757, [1, 0.757, 0]],
  [0.759, [1, 0.761, 0]],
  [0.761, [1, 0.761, 0]],
  [0.763, [1, 0.765, 0]],
  [0.765, [1, 0.765, 0]],
  [0.767, [1, 0.769, 0]],
  [0.769, [1, 0.769, 0]],
  [0.771, [1, 0.773, 0]],
  [0.773, [1, 0.773, 0]],
  [0.775, [1, 0.776, 0]],
  [0.777, [1, 0.776, 0]],
  [0.779, [1, 0.78, 0]],
  [0.781, [1, 0.78, 0]],
  [0.783, [1, 0.784, 0]],
  [0.785, [1, 0.784, 0]],
  [0.787, [1, 0.788, 0]],
  [0.789, [1, 0.788, 0]],
  [0.791, [1, 0.792, 0]],
  [0.793, [1, 0.792, 0]],
  [0.795, [1, 0.796, 0]],
  [0.796, [1, 0.796, 0]],
  [0.798, [1, 0.8, 0]],
  [0.8, [1, 0.8, 0]],
  [0.802, [1, 0.804, 0]],
  [0.804, [1, 0.804, 0]],
  [0.806, [1, 0.808, 0]],
  [0.808, [1, 0.808, 0]],
  [0.81, [1, 0.812, 0]],
  [0.812, [1, 0.812, 0]],
  [0.814, [1, 0.816, 0]],
  [0.816, [1, 0.816, 0]],
  [0.818, [1, 0.82, 0]],
  [0.82, [1, 0.82, 0]],
  [0.822, [1, 0.824, 0]],
  [0.824, [1, 0.824, 0]],
  [0.826, [1, 0.827, 0]],
  [0.828, [1, 0.827, 0]],
  [0.83, [1, 0.831, 0]],
  [0.832, [1, 0.831, 0]],
  [0.834, [1, 0.835, 0]],
  [0.836, [1, 0.835, 0]],
  [0.838, [1, 0.839, 0]],
  [0.84, [1, 0.839, 0]],
  [0.841, [1, 0.843, 0]],
  [0.843, [1, 0.843, 0]],
  [0.845, [1, 0.847, 0]],
  [0.847, [1, 0.847, 0]],
  [0.849, [1, 0.851, 0]],
  [0.851, [1, 0.851, 0]],
  [0.853, [1, 0.855, 0]],
  [0.855, [1, 0.855, 0]],
  [0.857, [1, 0.859, 0]],
  [0.859, [1, 0.859, 0]],
  [0.861, [1, 0.863, 0]],
  [0.863, [1, 0.863, 0]],
  [0.865, [1, 0.867, 0]],
  [0.867, [1, 0.867, 0]],
  [0.869, [1, 0.871, 0]],
  [0.871, [1, 0.871, 0]],
  [0.873, [1, 0.875, 0]],
  [0.875, [1, 0.875, 0]],
  [0.877, [1, 0.878, 0]],
  [0.879, [1, 0.878, 0]],
  [0.881, [1, 0.882, 0]],
  [0.883, [1, 0.882, 0]],
  [0.885, [1, 0.886, 0]],
  [0.886, [1, 0.886, 0]],
  [0.888, [1, 0.89, 0]],
  [0.89, [1, 0.89, 0]],
  [0.892, [1, 0.894, 0]],
  [0.894, [1, 0.894, 0]],
  [0.896, [1, 0.898, 0]],
  [0.898, [1, 0.898, 0]],
  [0.9, [1, 0.902, 0]],
  [0.902, [1, 0.902, 0]],
  [0.904, [1, 0.906, 0]],
  [0.906, [1, 0.906, 0]],
  [0.908, [1, 0.91, 0]],
  [0.91, [1, 0.91, 0]],
  [0.912, [1, 0.914, 0]],
  [0.914, [1, 0.914, 0]],
  [0.916, [1, 0.918, 0]],
  [0.918, [1, 0.918, 0]],
  [0.92, [1, 0.922, 0]],
  [0.922, [1, 0.922, 0]],
  [0.924, [1, 0.925, 0]],
  [0.926, [1, 0.925, 0]],
  [0.928, [1, 0.929, 0]],
  [0.93, [1, 0.929, 0]],
  [0.932, [1, 0.933, 0]],
  [0.933, [1, 0.933, 0]],
  [0.935, [1, 0.937, 0]],
  [0.937, [1, 0.937, 0]],
  [0.939, [1, 0.941, 0]],
  [0.941, [1, 0.941, 0]],
  [0.943, [1, 0.945, 0]],
  [0.945, [1, 0.945, 0]],
  [0.947, [1, 0.949, 0]],
  [0.949, [1, 0.949, 0]],
  [0.951, [1, 0.953, 0]],
  [0.953, [1, 0.953, 0]],
  [0.955, [1, 0.957, 0]],
  [0.957, [1, 0.957, 0]],
  [0.959, [1, 0.961, 0]],
  [0.961, [1, 0.961, 0]],
  [0.963, [1, 0.965, 0]],
  [0.965, [1, 0.965, 0]],
  [0.967, [1, 0.969, 0]],
  [0.969, [1, 0.969, 0]],
  [0.971, [1, 0.973, 0]],
  [0.973, [1, 0.973, 0]],
  [0.975, [1, 0.976, 0]],
  [0.977, [1, 0.976, 0]],
  [0.978, [1, 0.98, 0]],
  [0.98, [1, 0.98, 0]],
  [0.982, [1, 0.984, 0]],
  [0.984, [1, 0.984, 0]],
  [0.986, [1, 0.988, 0]],
  [0.988, [1, 0.988, 0]],
  [0.99, [1, 0.992, 0]],
  [0.992, [1, 0.992, 0]],
  [0.994, [1, 0.996, 0]],
  [0.996, [1, 0.996, 0]],
  [0.998, [1, 1, 0]],
  [1, [1, 1, 0]]
], Sp = [
  [0, [0, 0, 0]],
  [2e-3, [0, 0, 0]],
  [4e-3, [3e-3, 3e-3, 5e-3]],
  [6e-3, [3e-3, 3e-3, 5e-3]],
  [8e-3, [7e-3, 7e-3, 0.01]],
  [0.01, [7e-3, 7e-3, 0.01]],
  [0.012, [0.01, 0.01, 0.014]],
  [0.014, [0.01, 0.01, 0.014]],
  [0.016, [0.014, 0.014, 0.019]],
  [0.018, [0.014, 0.014, 0.019]],
  [0.02, [0.017, 0.017, 0.024]],
  [0.022, [0.017, 0.017, 0.024]],
  [0.023, [0.021, 0.021, 0.029]],
  [0.025, [0.021, 0.021, 0.029]],
  [0.027, [0.024, 0.024, 0.033]],
  [0.029, [0.024, 0.024, 0.033]],
  [0.031, [0.027, 0.027, 0.038]],
  [0.033, [0.027, 0.027, 0.038]],
  [0.035, [0.031, 0.031, 0.043]],
  [0.037, [0.031, 0.031, 0.043]],
  [0.039, [0.034, 0.034, 0.048]],
  [0.041, [0.034, 0.034, 0.048]],
  [0.043, [0.038, 0.038, 0.053]],
  [0.045, [0.038, 0.038, 0.053]],
  [0.047, [0.041, 0.041, 0.057]],
  [0.049, [0.041, 0.041, 0.057]],
  [0.051, [0.045, 0.045, 0.062]],
  [0.053, [0.045, 0.045, 0.062]],
  [0.055, [0.048, 0.048, 0.067]],
  [0.057, [0.048, 0.048, 0.067]],
  [0.059, [0.051, 0.051, 0.072]],
  [0.061, [0.051, 0.051, 0.072]],
  [0.063, [0.055, 0.055, 0.076]],
  [0.065, [0.055, 0.055, 0.076]],
  [0.067, [0.058, 0.058, 0.081]],
  [0.068, [0.058, 0.058, 0.081]],
  [0.07, [0.062, 0.062, 0.086]],
  [0.072, [0.062, 0.062, 0.086]],
  [0.074, [0.065, 0.065, 0.091]],
  [0.076, [0.065, 0.065, 0.091]],
  [0.078, [0.069, 0.069, 0.095]],
  [0.08, [0.069, 0.069, 0.095]],
  [0.082, [0.072, 0.072, 0.1]],
  [0.084, [0.072, 0.072, 0.1]],
  [0.086, [0.075, 0.075, 0.105]],
  [0.088, [0.075, 0.075, 0.105]],
  [0.09, [0.079, 0.079, 0.11]],
  [0.092, [0.079, 0.079, 0.11]],
  [0.094, [0.082, 0.082, 0.115]],
  [0.096, [0.082, 0.082, 0.115]],
  [0.098, [0.086, 0.086, 0.119]],
  [0.1, [0.086, 0.086, 0.119]],
  [0.102, [0.089, 0.089, 0.124]],
  [0.104, [0.089, 0.089, 0.124]],
  [0.106, [0.093, 0.093, 0.129]],
  [0.108, [0.093, 0.093, 0.129]],
  [0.11, [0.096, 0.096, 0.134]],
  [0.112, [0.096, 0.096, 0.134]],
  [0.114, [0.1, 0.1, 0.138]],
  [0.115, [0.1, 0.1, 0.138]],
  [0.117, [0.103, 0.103, 0.143]],
  [0.119, [0.103, 0.103, 0.143]],
  [0.121, [0.106, 0.106, 0.148]],
  [0.123, [0.106, 0.106, 0.148]],
  [0.125, [0.11, 0.11, 0.153]],
  [0.127, [0.11, 0.11, 0.153]],
  [0.129, [0.113, 0.113, 0.158]],
  [0.131, [0.113, 0.113, 0.158]],
  [0.133, [0.117, 0.117, 0.162]],
  [0.135, [0.117, 0.117, 0.162]],
  [0.137, [0.12, 0.12, 0.167]],
  [0.139, [0.12, 0.12, 0.167]],
  [0.141, [0.124, 0.124, 0.172]],
  [0.143, [0.124, 0.124, 0.172]],
  [0.145, [0.127, 0.127, 0.177]],
  [0.147, [0.127, 0.127, 0.177]],
  [0.149, [0.13, 0.13, 0.181]],
  [0.151, [0.13, 0.13, 0.181]],
  [0.153, [0.134, 0.134, 0.186]],
  [0.155, [0.134, 0.134, 0.186]],
  [0.157, [0.137, 0.137, 0.191]],
  [0.159, [0.137, 0.137, 0.191]],
  [0.16, [0.141, 0.141, 0.196]],
  [0.162, [0.141, 0.141, 0.196]],
  [0.164, [0.144, 0.144, 0.201]],
  [0.166, [0.144, 0.144, 0.201]],
  [0.168, [0.148, 0.148, 0.205]],
  [0.17, [0.148, 0.148, 0.205]],
  [0.172, [0.151, 0.151, 0.21]],
  [0.174, [0.151, 0.151, 0.21]],
  [0.176, [0.154, 0.154, 0.215]],
  [0.178, [0.154, 0.154, 0.215]],
  [0.18, [0.158, 0.158, 0.22]],
  [0.182, [0.158, 0.158, 0.22]],
  [0.184, [0.161, 0.161, 0.224]],
  [0.186, [0.161, 0.161, 0.224]],
  [0.188, [0.165, 0.165, 0.229]],
  [0.19, [0.165, 0.165, 0.229]],
  [0.192, [0.168, 0.168, 0.234]],
  [0.194, [0.168, 0.168, 0.234]],
  [0.196, [0.172, 0.172, 0.239]],
  [0.198, [0.172, 0.172, 0.239]],
  [0.2, [0.175, 0.175, 0.243]],
  [0.202, [0.175, 0.175, 0.243]],
  [0.204, [0.178, 0.178, 0.248]],
  [0.205, [0.178, 0.178, 0.248]],
  [0.207, [0.182, 0.182, 0.253]],
  [0.209, [0.182, 0.182, 0.253]],
  [0.211, [0.185, 0.185, 0.258]],
  [0.213, [0.185, 0.185, 0.258]],
  [0.215, [0.189, 0.189, 0.263]],
  [0.217, [0.189, 0.189, 0.263]],
  [0.219, [0.192, 0.192, 0.267]],
  [0.221, [0.192, 0.192, 0.267]],
  [0.223, [0.196, 0.196, 0.272]],
  [0.225, [0.196, 0.196, 0.272]],
  [0.227, [0.199, 0.199, 0.277]],
  [0.229, [0.199, 0.199, 0.277]],
  [0.231, [0.202, 0.202, 0.282]],
  [0.233, [0.202, 0.202, 0.282]],
  [0.235, [0.206, 0.206, 0.286]],
  [0.237, [0.206, 0.206, 0.286]],
  [0.239, [0.209, 0.209, 0.291]],
  [0.241, [0.209, 0.209, 0.291]],
  [0.243, [0.213, 0.213, 0.296]],
  [0.245, [0.213, 0.213, 0.296]],
  [0.247, [0.216, 0.216, 0.301]],
  [0.249, [0.216, 0.216, 0.301]],
  [0.25, [0.22, 0.22, 0.306]],
  [0.252, [0.22, 0.22, 0.306]],
  [0.254, [0.223, 0.223, 0.31]],
  [0.256, [0.223, 0.223, 0.31]],
  [0.258, [0.226, 0.226, 0.315]],
  [0.26, [0.226, 0.226, 0.315]],
  [0.262, [0.23, 0.23, 0.32]],
  [0.264, [0.23, 0.23, 0.32]],
  [0.266, [0.233, 0.233, 0.325]],
  [0.268, [0.233, 0.233, 0.325]],
  [0.27, [0.237, 0.237, 0.329]],
  [0.272, [0.237, 0.237, 0.329]],
  [0.274, [0.24, 0.24, 0.334]],
  [0.276, [0.24, 0.24, 0.334]],
  [0.278, [0.244, 0.244, 0.339]],
  [0.28, [0.244, 0.244, 0.339]],
  [0.282, [0.247, 0.247, 0.344]],
  [0.284, [0.247, 0.247, 0.344]],
  [0.286, [0.25, 0.25, 0.349]],
  [0.288, [0.25, 0.25, 0.349]],
  [0.29, [0.254, 0.254, 0.353]],
  [0.292, [0.254, 0.254, 0.353]],
  [0.294, [0.257, 0.257, 0.358]],
  [0.295, [0.257, 0.257, 0.358]],
  [0.297, [0.261, 0.261, 0.363]],
  [0.299, [0.261, 0.261, 0.363]],
  [0.301, [0.264, 0.264, 0.368]],
  [0.303, [0.264, 0.264, 0.368]],
  [0.305, [0.268, 0.268, 0.372]],
  [0.307, [0.268, 0.268, 0.372]],
  [0.309, [0.271, 0.271, 0.377]],
  [0.311, [0.271, 0.271, 0.377]],
  [0.313, [0.275, 0.275, 0.382]],
  [0.315, [0.275, 0.275, 0.382]],
  [0.317, [0.278, 0.278, 0.387]],
  [0.319, [0.278, 0.278, 0.387]],
  [0.321, [0.281, 0.281, 0.391]],
  [0.323, [0.281, 0.281, 0.391]],
  [0.325, [0.285, 0.285, 0.396]],
  [0.327, [0.285, 0.285, 0.396]],
  [0.329, [0.288, 0.288, 0.401]],
  [0.331, [0.288, 0.288, 0.401]],
  [0.333, [0.292, 0.292, 0.406]],
  [0.335, [0.292, 0.292, 0.406]],
  [0.337, [0.295, 0.295, 0.411]],
  [0.339, [0.295, 0.295, 0.411]],
  [0.341, [0.299, 0.299, 0.415]],
  [0.342, [0.299, 0.299, 0.415]],
  [0.344, [0.302, 0.302, 0.42]],
  [0.346, [0.302, 0.302, 0.42]],
  [0.348, [0.305, 0.305, 0.425]],
  [0.35, [0.305, 0.305, 0.425]],
  [0.352, [0.309, 0.309, 0.43]],
  [0.354, [0.309, 0.309, 0.43]],
  [0.356, [0.312, 0.312, 0.434]],
  [0.358, [0.312, 0.312, 0.434]],
  [0.36, [0.316, 0.316, 0.439]],
  [0.362, [0.316, 0.316, 0.439]],
  [0.364, [0.319, 0.319, 0.444]],
  [0.366, [0.319, 0.319, 0.444]],
  [0.368, [0.323, 0.324, 0.448]],
  [0.37, [0.323, 0.324, 0.448]],
  [0.372, [0.326, 0.328, 0.451]],
  [0.374, [0.326, 0.328, 0.451]],
  [0.376, [0.329, 0.333, 0.454]],
  [0.378, [0.329, 0.333, 0.454]],
  [0.38, [0.333, 0.338, 0.458]],
  [0.382, [0.333, 0.338, 0.458]],
  [0.384, [0.336, 0.343, 0.461]],
  [0.386, [0.336, 0.343, 0.461]],
  [0.387, [0.34, 0.347, 0.465]],
  [0.389, [0.34, 0.347, 0.465]],
  [0.391, [0.343, 0.352, 0.468]],
  [0.393, [0.343, 0.352, 0.468]],
  [0.395, [0.347, 0.357, 0.472]],
  [0.397, [0.347, 0.357, 0.472]],
  [0.399, [0.35, 0.361, 0.475]],
  [0.401, [0.35, 0.361, 0.475]],
  [0.403, [0.353, 0.366, 0.478]],
  [0.405, [0.353, 0.366, 0.478]],
  [0.407, [0.357, 0.371, 0.482]],
  [0.409, [0.357, 0.371, 0.482]],
  [0.411, [0.36, 0.376, 0.485]],
  [0.413, [0.36, 0.376, 0.485]],
  [0.415, [0.364, 0.38, 0.489]],
  [0.417, [0.364, 0.38, 0.489]],
  [0.419, [0.367, 0.385, 0.492]],
  [0.421, [0.367, 0.385, 0.492]],
  [0.423, [0.371, 0.39, 0.496]],
  [0.425, [0.371, 0.39, 0.496]],
  [0.427, [0.374, 0.394, 0.499]],
  [0.429, [0.374, 0.394, 0.499]],
  [0.431, [0.377, 0.399, 0.502]],
  [0.432, [0.377, 0.399, 0.502]],
  [0.434, [0.381, 0.404, 0.506]],
  [0.436, [0.381, 0.404, 0.506]],
  [0.438, [0.384, 0.409, 0.509]],
  [0.44, [0.384, 0.409, 0.509]],
  [0.442, [0.388, 0.413, 0.513]],
  [0.444, [0.388, 0.413, 0.513]],
  [0.446, [0.391, 0.418, 0.516]],
  [0.448, [0.391, 0.418, 0.516]],
  [0.45, [0.395, 0.423, 0.52]],
  [0.452, [0.395, 0.423, 0.52]],
  [0.454, [0.398, 0.428, 0.523]],
  [0.456, [0.398, 0.428, 0.523]],
  [0.458, [0.401, 0.432, 0.526]],
  [0.46, [0.401, 0.432, 0.526]],
  [0.462, [0.405, 0.437, 0.53]],
  [0.464, [0.405, 0.437, 0.53]],
  [0.466, [0.408, 0.442, 0.533]],
  [0.468, [0.408, 0.442, 0.533]],
  [0.47, [0.412, 0.446, 0.537]],
  [0.472, [0.412, 0.446, 0.537]],
  [0.474, [0.415, 0.451, 0.54]],
  [0.476, [0.415, 0.451, 0.54]],
  [0.477, [0.419, 0.456, 0.544]],
  [0.479, [0.419, 0.456, 0.544]],
  [0.481, [0.422, 0.461, 0.547]],
  [0.483, [0.422, 0.461, 0.547]],
  [0.485, [0.425, 0.465, 0.55]],
  [0.487, [0.425, 0.465, 0.55]],
  [0.489, [0.429, 0.47, 0.554]],
  [0.491, [0.429, 0.47, 0.554]],
  [0.493, [0.432, 0.475, 0.557]],
  [0.495, [0.432, 0.475, 0.557]],
  [0.497, [0.436, 0.479, 0.561]],
  [0.499, [0.436, 0.479, 0.561]],
  [0.501, [0.439, 0.484, 0.564]],
  [0.503, [0.439, 0.484, 0.564]],
  [0.505, [0.443, 0.489, 0.568]],
  [0.507, [0.443, 0.489, 0.568]],
  [0.509, [0.446, 0.494, 0.571]],
  [0.511, [0.446, 0.494, 0.571]],
  [0.513, [0.45, 0.498, 0.575]],
  [0.515, [0.45, 0.498, 0.575]],
  [0.517, [0.453, 0.503, 0.578]],
  [0.519, [0.453, 0.503, 0.578]],
  [0.521, [0.456, 0.508, 0.581]],
  [0.523, [0.456, 0.508, 0.581]],
  [0.524, [0.46, 0.512, 0.585]],
  [0.526, [0.46, 0.512, 0.585]],
  [0.528, [0.463, 0.517, 0.588]],
  [0.53, [0.463, 0.517, 0.588]],
  [0.532, [0.467, 0.522, 0.592]],
  [0.534, [0.467, 0.522, 0.592]],
  [0.536, [0.47, 0.527, 0.595]],
  [0.538, [0.47, 0.527, 0.595]],
  [0.54, [0.474, 0.531, 0.599]],
  [0.542, [0.474, 0.531, 0.599]],
  [0.544, [0.477, 0.536, 0.602]],
  [0.546, [0.477, 0.536, 0.602]],
  [0.548, [0.48, 0.541, 0.605]],
  [0.55, [0.48, 0.541, 0.605]],
  [0.552, [0.484, 0.545, 0.609]],
  [0.554, [0.484, 0.545, 0.609]],
  [0.556, [0.487, 0.55, 0.612]],
  [0.558, [0.487, 0.55, 0.612]],
  [0.56, [0.491, 0.555, 0.616]],
  [0.562, [0.491, 0.555, 0.616]],
  [0.564, [0.494, 0.56, 0.619]],
  [0.566, [0.494, 0.56, 0.619]],
  [0.568, [0.498, 0.564, 0.623]],
  [0.569, [0.498, 0.564, 0.623]],
  [0.571, [0.501, 0.569, 0.626]],
  [0.573, [0.501, 0.569, 0.626]],
  [0.575, [0.504, 0.574, 0.629]],
  [0.577, [0.504, 0.574, 0.629]],
  [0.579, [0.508, 0.578, 0.633]],
  [0.581, [0.508, 0.578, 0.633]],
  [0.583, [0.511, 0.583, 0.636]],
  [0.585, [0.511, 0.583, 0.636]],
  [0.587, [0.515, 0.588, 0.64]],
  [0.589, [0.515, 0.588, 0.64]],
  [0.591, [0.518, 0.593, 0.643]],
  [0.593, [0.518, 0.593, 0.643]],
  [0.595, [0.522, 0.597, 0.647]],
  [0.597, [0.522, 0.597, 0.647]],
  [0.599, [0.525, 0.602, 0.65]],
  [0.601, [0.525, 0.602, 0.65]],
  [0.603, [0.528, 0.607, 0.653]],
  [0.605, [0.528, 0.607, 0.653]],
  [0.607, [0.532, 0.612, 0.657]],
  [0.609, [0.532, 0.612, 0.657]],
  [0.611, [0.535, 0.616, 0.66]],
  [0.613, [0.535, 0.616, 0.66]],
  [0.614, [0.539, 0.621, 0.664]],
  [0.616, [0.539, 0.621, 0.664]],
  [0.618, [0.542, 0.626, 0.667]],
  [0.62, [0.542, 0.626, 0.667]],
  [0.622, [0.546, 0.63, 0.671]],
  [0.624, [0.546, 0.63, 0.671]],
  [0.626, [0.549, 0.635, 0.674]],
  [0.628, [0.549, 0.635, 0.674]],
  [0.63, [0.552, 0.64, 0.677]],
  [0.632, [0.552, 0.64, 0.677]],
  [0.634, [0.556, 0.645, 0.681]],
  [0.636, [0.556, 0.645, 0.681]],
  [0.638, [0.559, 0.649, 0.684]],
  [0.64, [0.559, 0.649, 0.684]],
  [0.642, [0.563, 0.654, 0.688]],
  [0.644, [0.563, 0.654, 0.688]],
  [0.646, [0.566, 0.659, 0.691]],
  [0.648, [0.566, 0.659, 0.691]],
  [0.65, [0.57, 0.663, 0.695]],
  [0.652, [0.57, 0.663, 0.695]],
  [0.654, [0.573, 0.668, 0.698]],
  [0.656, [0.573, 0.668, 0.698]],
  [0.658, [0.576, 0.673, 0.701]],
  [0.659, [0.576, 0.673, 0.701]],
  [0.661, [0.58, 0.678, 0.705]],
  [0.663, [0.58, 0.678, 0.705]],
  [0.665, [0.583, 0.682, 0.708]],
  [0.667, [0.583, 0.682, 0.708]],
  [0.669, [0.587, 0.687, 0.712]],
  [0.671, [0.587, 0.687, 0.712]],
  [0.673, [0.59, 0.692, 0.715]],
  [0.675, [0.59, 0.692, 0.715]],
  [0.677, [0.594, 0.696, 0.719]],
  [0.679, [0.594, 0.696, 0.719]],
  [0.681, [0.597, 0.701, 0.722]],
  [0.683, [0.597, 0.701, 0.722]],
  [0.685, [0.6, 0.706, 0.725]],
  [0.687, [0.6, 0.706, 0.725]],
  [0.689, [0.604, 0.711, 0.729]],
  [0.691, [0.604, 0.711, 0.729]],
  [0.693, [0.607, 0.715, 0.732]],
  [0.695, [0.607, 0.715, 0.732]],
  [0.697, [0.611, 0.72, 0.736]],
  [0.699, [0.611, 0.72, 0.736]],
  [0.701, [0.614, 0.725, 0.739]],
  [0.703, [0.614, 0.725, 0.739]],
  [0.705, [0.618, 0.729, 0.743]],
  [0.706, [0.618, 0.729, 0.743]],
  [0.708, [0.621, 0.734, 0.746]],
  [0.71, [0.621, 0.734, 0.746]],
  [0.712, [0.625, 0.739, 0.75]],
  [0.714, [0.625, 0.739, 0.75]],
  [0.716, [0.628, 0.744, 0.753]],
  [0.718, [0.628, 0.744, 0.753]],
  [0.72, [0.631, 0.748, 0.756]],
  [0.722, [0.631, 0.748, 0.756]],
  [0.724, [0.635, 0.753, 0.76]],
  [0.726, [0.635, 0.753, 0.76]],
  [0.728, [0.638, 0.758, 0.763]],
  [0.73, [0.638, 0.758, 0.763]],
  [0.732, [0.642, 0.762, 0.767]],
  [0.734, [0.642, 0.762, 0.767]],
  [0.736, [0.645, 0.767, 0.77]],
  [0.738, [0.645, 0.767, 0.77]],
  [0.74, [0.649, 0.772, 0.774]],
  [0.742, [0.649, 0.772, 0.774]],
  [0.744, [0.652, 0.777, 0.777]],
  [0.746, [0.652, 0.777, 0.777]],
  [0.748, [0.657, 0.78, 0.78]],
  [0.75, [0.657, 0.78, 0.78]],
  [0.751, [0.662, 0.784, 0.784]],
  [0.753, [0.662, 0.784, 0.784]],
  [0.755, [0.668, 0.787, 0.787]],
  [0.757, [0.668, 0.787, 0.787]],
  [0.759, [0.673, 0.791, 0.791]],
  [0.761, [0.673, 0.791, 0.791]],
  [0.763, [0.678, 0.794, 0.794]],
  [0.765, [0.678, 0.794, 0.794]],
  [0.767, [0.684, 0.798, 0.798]],
  [0.769, [0.684, 0.798, 0.798]],
  [0.771, [0.689, 0.801, 0.801]],
  [0.773, [0.689, 0.801, 0.801]],
  [0.775, [0.694, 0.804, 0.804]],
  [0.777, [0.694, 0.804, 0.804]],
  [0.779, [0.7, 0.808, 0.808]],
  [0.781, [0.7, 0.808, 0.808]],
  [0.783, [0.705, 0.811, 0.811]],
  [0.785, [0.705, 0.811, 0.811]],
  [0.787, [0.71, 0.815, 0.815]],
  [0.789, [0.71, 0.815, 0.815]],
  [0.791, [0.716, 0.818, 0.818]],
  [0.793, [0.716, 0.818, 0.818]],
  [0.795, [0.721, 0.822, 0.822]],
  [0.796, [0.721, 0.822, 0.822]],
  [0.798, [0.727, 0.825, 0.825]],
  [0.8, [0.727, 0.825, 0.825]],
  [0.802, [0.732, 0.828, 0.828]],
  [0.804, [0.732, 0.828, 0.828]],
  [0.806, [0.737, 0.832, 0.832]],
  [0.808, [0.737, 0.832, 0.832]],
  [0.81, [0.743, 0.835, 0.835]],
  [0.812, [0.743, 0.835, 0.835]],
  [0.814, [0.748, 0.839, 0.839]],
  [0.816, [0.748, 0.839, 0.839]],
  [0.818, [0.753, 0.842, 0.842]],
  [0.82, [0.753, 0.842, 0.842]],
  [0.822, [0.759, 0.846, 0.846]],
  [0.824, [0.759, 0.846, 0.846]],
  [0.826, [0.764, 0.849, 0.849]],
  [0.828, [0.764, 0.849, 0.849]],
  [0.83, [0.769, 0.852, 0.852]],
  [0.832, [0.769, 0.852, 0.852]],
  [0.834, [0.775, 0.856, 0.856]],
  [0.836, [0.775, 0.856, 0.856]],
  [0.838, [0.78, 0.859, 0.859]],
  [0.84, [0.78, 0.859, 0.859]],
  [0.841, [0.786, 0.863, 0.863]],
  [0.843, [0.786, 0.863, 0.863]],
  [0.845, [0.791, 0.866, 0.866]],
  [0.847, [0.791, 0.866, 0.866]],
  [0.849, [0.796, 0.87, 0.87]],
  [0.851, [0.796, 0.87, 0.87]],
  [0.853, [0.802, 0.873, 0.873]],
  [0.855, [0.802, 0.873, 0.873]],
  [0.857, [0.807, 0.876, 0.876]],
  [0.859, [0.807, 0.876, 0.876]],
  [0.861, [0.812, 0.88, 0.88]],
  [0.863, [0.812, 0.88, 0.88]],
  [0.865, [0.818, 0.883, 0.883]],
  [0.867, [0.818, 0.883, 0.883]],
  [0.869, [0.823, 0.887, 0.887]],
  [0.871, [0.823, 0.887, 0.887]],
  [0.873, [0.828, 0.89, 0.89]],
  [0.875, [0.828, 0.89, 0.89]],
  [0.877, [0.834, 0.894, 0.894]],
  [0.879, [0.834, 0.894, 0.894]],
  [0.881, [0.839, 0.897, 0.897]],
  [0.883, [0.839, 0.897, 0.897]],
  [0.885, [0.845, 0.9, 0.9]],
  [0.886, [0.845, 0.9, 0.9]],
  [0.888, [0.85, 0.904, 0.904]],
  [0.89, [0.85, 0.904, 0.904]],
  [0.892, [0.855, 0.907, 0.907]],
  [0.894, [0.855, 0.907, 0.907]],
  [0.896, [0.861, 0.911, 0.911]],
  [0.898, [0.861, 0.911, 0.911]],
  [0.9, [0.866, 0.914, 0.914]],
  [0.902, [0.866, 0.914, 0.914]],
  [0.904, [0.871, 0.918, 0.918]],
  [0.906, [0.871, 0.918, 0.918]],
  [0.908, [0.877, 0.921, 0.921]],
  [0.91, [0.877, 0.921, 0.921]],
  [0.912, [0.882, 0.925, 0.925]],
  [0.914, [0.882, 0.925, 0.925]],
  [0.916, [0.887, 0.928, 0.928]],
  [0.918, [0.887, 0.928, 0.928]],
  [0.92, [0.893, 0.931, 0.931]],
  [0.922, [0.893, 0.931, 0.931]],
  [0.924, [0.898, 0.935, 0.935]],
  [0.926, [0.898, 0.935, 0.935]],
  [0.928, [0.903, 0.938, 0.938]],
  [0.93, [0.903, 0.938, 0.938]],
  [0.932, [0.909, 0.942, 0.942]],
  [0.933, [0.909, 0.942, 0.942]],
  [0.935, [0.914, 0.945, 0.945]],
  [0.937, [0.914, 0.945, 0.945]],
  [0.939, [0.92, 0.949, 0.949]],
  [0.941, [0.92, 0.949, 0.949]],
  [0.943, [0.925, 0.952, 0.952]],
  [0.945, [0.925, 0.952, 0.952]],
  [0.947, [0.93, 0.955, 0.955]],
  [0.949, [0.93, 0.955, 0.955]],
  [0.951, [0.936, 0.959, 0.959]],
  [0.953, [0.936, 0.959, 0.959]],
  [0.955, [0.941, 0.962, 0.962]],
  [0.957, [0.941, 0.962, 0.962]],
  [0.959, [0.946, 0.966, 0.966]],
  [0.961, [0.946, 0.966, 0.966]],
  [0.963, [0.952, 0.969, 0.969]],
  [0.965, [0.952, 0.969, 0.969]],
  [0.967, [0.957, 0.973, 0.973]],
  [0.969, [0.957, 0.973, 0.973]],
  [0.971, [0.962, 0.976, 0.976]],
  [0.973, [0.962, 0.976, 0.976]],
  [0.975, [0.968, 0.979, 0.979]],
  [0.977, [0.968, 0.979, 0.979]],
  [0.978, [0.973, 0.983, 0.983]],
  [0.98, [0.973, 0.983, 0.983]],
  [0.982, [0.979, 0.986, 0.986]],
  [0.984, [0.979, 0.986, 0.986]],
  [0.986, [0.984, 0.99, 0.99]],
  [0.988, [0.984, 0.99, 0.99]],
  [0.99, [0.989, 0.993, 0.993]],
  [0.992, [0.989, 0.993, 0.993]],
  [0.994, [0.995, 0.997, 0.997]],
  [0.996, [0.995, 0.997, 0.997]],
  [0.998, [1, 1, 1]],
  [1, [1, 1, 1]]
], Ep = [
  [0, [0, 1, 1]],
  [2e-3, [0, 1, 1]],
  [4e-3, [4e-3, 0.996, 1]],
  [6e-3, [4e-3, 0.996, 1]],
  [8e-3, [8e-3, 0.992, 1]],
  [0.01, [8e-3, 0.992, 1]],
  [0.012, [0.012, 0.988, 1]],
  [0.014, [0.012, 0.988, 1]],
  [0.016, [0.016, 0.984, 1]],
  [0.018, [0.016, 0.984, 1]],
  [0.02, [0.02, 0.98, 1]],
  [0.022, [0.02, 0.98, 1]],
  [0.023, [0.024, 0.976, 1]],
  [0.025, [0.024, 0.976, 1]],
  [0.027, [0.027, 0.973, 1]],
  [0.029, [0.027, 0.973, 1]],
  [0.031, [0.031, 0.969, 1]],
  [0.033, [0.031, 0.969, 1]],
  [0.035, [0.035, 0.965, 1]],
  [0.037, [0.035, 0.965, 1]],
  [0.039, [0.039, 0.961, 1]],
  [0.041, [0.039, 0.961, 1]],
  [0.043, [0.043, 0.957, 1]],
  [0.045, [0.043, 0.957, 1]],
  [0.047, [0.047, 0.953, 1]],
  [0.049, [0.047, 0.953, 1]],
  [0.051, [0.051, 0.949, 1]],
  [0.053, [0.051, 0.949, 1]],
  [0.055, [0.055, 0.945, 1]],
  [0.057, [0.055, 0.945, 1]],
  [0.059, [0.059, 0.941, 1]],
  [0.061, [0.059, 0.941, 1]],
  [0.063, [0.063, 0.937, 1]],
  [0.065, [0.063, 0.937, 1]],
  [0.067, [0.067, 0.933, 1]],
  [0.068, [0.067, 0.933, 1]],
  [0.07, [0.071, 0.929, 1]],
  [0.072, [0.071, 0.929, 1]],
  [0.074, [0.075, 0.925, 1]],
  [0.076, [0.075, 0.925, 1]],
  [0.078, [0.078, 0.922, 1]],
  [0.08, [0.078, 0.922, 1]],
  [0.082, [0.082, 0.918, 1]],
  [0.084, [0.082, 0.918, 1]],
  [0.086, [0.086, 0.914, 1]],
  [0.088, [0.086, 0.914, 1]],
  [0.09, [0.09, 0.91, 1]],
  [0.092, [0.09, 0.91, 1]],
  [0.094, [0.094, 0.906, 1]],
  [0.096, [0.094, 0.906, 1]],
  [0.098, [0.098, 0.902, 1]],
  [0.1, [0.098, 0.902, 1]],
  [0.102, [0.102, 0.898, 1]],
  [0.104, [0.102, 0.898, 1]],
  [0.106, [0.106, 0.894, 1]],
  [0.108, [0.106, 0.894, 1]],
  [0.11, [0.11, 0.89, 1]],
  [0.112, [0.11, 0.89, 1]],
  [0.114, [0.114, 0.886, 1]],
  [0.115, [0.114, 0.886, 1]],
  [0.117, [0.118, 0.882, 1]],
  [0.119, [0.118, 0.882, 1]],
  [0.121, [0.122, 0.878, 1]],
  [0.123, [0.122, 0.878, 1]],
  [0.125, [0.125, 0.875, 1]],
  [0.127, [0.125, 0.875, 1]],
  [0.129, [0.129, 0.871, 1]],
  [0.131, [0.129, 0.871, 1]],
  [0.133, [0.133, 0.867, 1]],
  [0.135, [0.133, 0.867, 1]],
  [0.137, [0.137, 0.863, 1]],
  [0.139, [0.137, 0.863, 1]],
  [0.141, [0.141, 0.859, 1]],
  [0.143, [0.141, 0.859, 1]],
  [0.145, [0.145, 0.855, 1]],
  [0.147, [0.145, 0.855, 1]],
  [0.149, [0.149, 0.851, 1]],
  [0.151, [0.149, 0.851, 1]],
  [0.153, [0.153, 0.847, 1]],
  [0.155, [0.153, 0.847, 1]],
  [0.157, [0.157, 0.843, 1]],
  [0.159, [0.157, 0.843, 1]],
  [0.16, [0.161, 0.839, 1]],
  [0.162, [0.161, 0.839, 1]],
  [0.164, [0.165, 0.835, 1]],
  [0.166, [0.165, 0.835, 1]],
  [0.168, [0.169, 0.831, 1]],
  [0.17, [0.169, 0.831, 1]],
  [0.172, [0.173, 0.827, 1]],
  [0.174, [0.173, 0.827, 1]],
  [0.176, [0.176, 0.824, 1]],
  [0.178, [0.176, 0.824, 1]],
  [0.18, [0.18, 0.82, 1]],
  [0.182, [0.18, 0.82, 1]],
  [0.184, [0.184, 0.816, 1]],
  [0.186, [0.184, 0.816, 1]],
  [0.188, [0.188, 0.812, 1]],
  [0.19, [0.188, 0.812, 1]],
  [0.192, [0.192, 0.808, 1]],
  [0.194, [0.192, 0.808, 1]],
  [0.196, [0.196, 0.804, 1]],
  [0.198, [0.196, 0.804, 1]],
  [0.2, [0.2, 0.8, 1]],
  [0.202, [0.2, 0.8, 1]],
  [0.204, [0.204, 0.796, 1]],
  [0.205, [0.204, 0.796, 1]],
  [0.207, [0.208, 0.792, 1]],
  [0.209, [0.208, 0.792, 1]],
  [0.211, [0.212, 0.788, 1]],
  [0.213, [0.212, 0.788, 1]],
  [0.215, [0.216, 0.784, 1]],
  [0.217, [0.216, 0.784, 1]],
  [0.219, [0.22, 0.78, 1]],
  [0.221, [0.22, 0.78, 1]],
  [0.223, [0.224, 0.776, 1]],
  [0.225, [0.224, 0.776, 1]],
  [0.227, [0.227, 0.773, 1]],
  [0.229, [0.227, 0.773, 1]],
  [0.231, [0.231, 0.769, 1]],
  [0.233, [0.231, 0.769, 1]],
  [0.235, [0.235, 0.765, 1]],
  [0.237, [0.235, 0.765, 1]],
  [0.239, [0.239, 0.761, 1]],
  [0.241, [0.239, 0.761, 1]],
  [0.243, [0.243, 0.757, 1]],
  [0.245, [0.243, 0.757, 1]],
  [0.247, [0.247, 0.753, 1]],
  [0.249, [0.247, 0.753, 1]],
  [0.25, [0.251, 0.749, 1]],
  [0.252, [0.251, 0.749, 1]],
  [0.254, [0.255, 0.745, 1]],
  [0.256, [0.255, 0.745, 1]],
  [0.258, [0.259, 0.741, 1]],
  [0.26, [0.259, 0.741, 1]],
  [0.262, [0.263, 0.737, 1]],
  [0.264, [0.263, 0.737, 1]],
  [0.266, [0.267, 0.733, 1]],
  [0.268, [0.267, 0.733, 1]],
  [0.27, [0.271, 0.729, 1]],
  [0.272, [0.271, 0.729, 1]],
  [0.274, [0.275, 0.725, 1]],
  [0.276, [0.275, 0.725, 1]],
  [0.278, [0.278, 0.722, 1]],
  [0.28, [0.278, 0.722, 1]],
  [0.282, [0.282, 0.718, 1]],
  [0.284, [0.282, 0.718, 1]],
  [0.286, [0.286, 0.714, 1]],
  [0.288, [0.286, 0.714, 1]],
  [0.29, [0.29, 0.71, 1]],
  [0.292, [0.29, 0.71, 1]],
  [0.294, [0.294, 0.706, 1]],
  [0.295, [0.294, 0.706, 1]],
  [0.297, [0.298, 0.702, 1]],
  [0.299, [0.298, 0.702, 1]],
  [0.301, [0.302, 0.698, 1]],
  [0.303, [0.302, 0.698, 1]],
  [0.305, [0.306, 0.694, 1]],
  [0.307, [0.306, 0.694, 1]],
  [0.309, [0.31, 0.69, 1]],
  [0.311, [0.31, 0.69, 1]],
  [0.313, [0.314, 0.686, 1]],
  [0.315, [0.314, 0.686, 1]],
  [0.317, [0.318, 0.682, 1]],
  [0.319, [0.318, 0.682, 1]],
  [0.321, [0.322, 0.678, 1]],
  [0.323, [0.322, 0.678, 1]],
  [0.325, [0.325, 0.675, 1]],
  [0.327, [0.325, 0.675, 1]],
  [0.329, [0.329, 0.671, 1]],
  [0.331, [0.329, 0.671, 1]],
  [0.333, [0.333, 0.667, 1]],
  [0.335, [0.333, 0.667, 1]],
  [0.337, [0.337, 0.663, 1]],
  [0.339, [0.337, 0.663, 1]],
  [0.341, [0.341, 0.659, 1]],
  [0.342, [0.341, 0.659, 1]],
  [0.344, [0.345, 0.655, 1]],
  [0.346, [0.345, 0.655, 1]],
  [0.348, [0.349, 0.651, 1]],
  [0.35, [0.349, 0.651, 1]],
  [0.352, [0.353, 0.647, 1]],
  [0.354, [0.353, 0.647, 1]],
  [0.356, [0.357, 0.643, 1]],
  [0.358, [0.357, 0.643, 1]],
  [0.36, [0.361, 0.639, 1]],
  [0.362, [0.361, 0.639, 1]],
  [0.364, [0.365, 0.635, 1]],
  [0.366, [0.365, 0.635, 1]],
  [0.368, [0.369, 0.631, 1]],
  [0.37, [0.369, 0.631, 1]],
  [0.372, [0.373, 0.627, 1]],
  [0.374, [0.373, 0.627, 1]],
  [0.376, [0.376, 0.624, 1]],
  [0.378, [0.376, 0.624, 1]],
  [0.38, [0.38, 0.62, 1]],
  [0.382, [0.38, 0.62, 1]],
  [0.384, [0.384, 0.616, 1]],
  [0.386, [0.384, 0.616, 1]],
  [0.387, [0.388, 0.612, 1]],
  [0.389, [0.388, 0.612, 1]],
  [0.391, [0.392, 0.608, 1]],
  [0.393, [0.392, 0.608, 1]],
  [0.395, [0.396, 0.604, 1]],
  [0.397, [0.396, 0.604, 1]],
  [0.399, [0.4, 0.6, 1]],
  [0.401, [0.4, 0.6, 1]],
  [0.403, [0.404, 0.596, 1]],
  [0.405, [0.404, 0.596, 1]],
  [0.407, [0.408, 0.592, 1]],
  [0.409, [0.408, 0.592, 1]],
  [0.411, [0.412, 0.588, 1]],
  [0.413, [0.412, 0.588, 1]],
  [0.415, [0.416, 0.584, 1]],
  [0.417, [0.416, 0.584, 1]],
  [0.419, [0.42, 0.58, 1]],
  [0.421, [0.42, 0.58, 1]],
  [0.423, [0.424, 0.576, 1]],
  [0.425, [0.424, 0.576, 1]],
  [0.427, [0.427, 0.573, 1]],
  [0.429, [0.427, 0.573, 1]],
  [0.431, [0.431, 0.569, 1]],
  [0.432, [0.431, 0.569, 1]],
  [0.434, [0.435, 0.565, 1]],
  [0.436, [0.435, 0.565, 1]],
  [0.438, [0.439, 0.561, 1]],
  [0.44, [0.439, 0.561, 1]],
  [0.442, [0.443, 0.557, 1]],
  [0.444, [0.443, 0.557, 1]],
  [0.446, [0.447, 0.553, 1]],
  [0.448, [0.447, 0.553, 1]],
  [0.45, [0.451, 0.549, 1]],
  [0.452, [0.451, 0.549, 1]],
  [0.454, [0.455, 0.545, 1]],
  [0.456, [0.455, 0.545, 1]],
  [0.458, [0.459, 0.541, 1]],
  [0.46, [0.459, 0.541, 1]],
  [0.462, [0.463, 0.537, 1]],
  [0.464, [0.463, 0.537, 1]],
  [0.466, [0.467, 0.533, 1]],
  [0.468, [0.467, 0.533, 1]],
  [0.47, [0.471, 0.529, 1]],
  [0.472, [0.471, 0.529, 1]],
  [0.474, [0.475, 0.525, 1]],
  [0.476, [0.475, 0.525, 1]],
  [0.477, [0.478, 0.522, 1]],
  [0.479, [0.478, 0.522, 1]],
  [0.481, [0.482, 0.518, 1]],
  [0.483, [0.482, 0.518, 1]],
  [0.485, [0.486, 0.514, 1]],
  [0.487, [0.486, 0.514, 1]],
  [0.489, [0.49, 0.51, 1]],
  [0.491, [0.49, 0.51, 1]],
  [0.493, [0.494, 0.506, 1]],
  [0.495, [0.494, 0.506, 1]],
  [0.497, [0.498, 0.502, 1]],
  [0.499, [0.498, 0.502, 1]],
  [0.501, [0.502, 0.498, 1]],
  [0.503, [0.502, 0.498, 1]],
  [0.505, [0.506, 0.494, 1]],
  [0.507, [0.506, 0.494, 1]],
  [0.509, [0.51, 0.49, 1]],
  [0.511, [0.51, 0.49, 1]],
  [0.513, [0.514, 0.486, 1]],
  [0.515, [0.514, 0.486, 1]],
  [0.517, [0.518, 0.482, 1]],
  [0.519, [0.518, 0.482, 1]],
  [0.521, [0.522, 0.478, 1]],
  [0.523, [0.522, 0.478, 1]],
  [0.524, [0.525, 0.475, 1]],
  [0.526, [0.525, 0.475, 1]],
  [0.528, [0.529, 0.471, 1]],
  [0.53, [0.529, 0.471, 1]],
  [0.532, [0.533, 0.467, 1]],
  [0.534, [0.533, 0.467, 1]],
  [0.536, [0.537, 0.463, 1]],
  [0.538, [0.537, 0.463, 1]],
  [0.54, [0.541, 0.459, 1]],
  [0.542, [0.541, 0.459, 1]],
  [0.544, [0.545, 0.455, 1]],
  [0.546, [0.545, 0.455, 1]],
  [0.548, [0.549, 0.451, 1]],
  [0.55, [0.549, 0.451, 1]],
  [0.552, [0.553, 0.447, 1]],
  [0.554, [0.553, 0.447, 1]],
  [0.556, [0.557, 0.443, 1]],
  [0.558, [0.557, 0.443, 1]],
  [0.56, [0.561, 0.439, 1]],
  [0.562, [0.561, 0.439, 1]],
  [0.564, [0.565, 0.435, 1]],
  [0.566, [0.565, 0.435, 1]],
  [0.568, [0.569, 0.431, 1]],
  [0.569, [0.569, 0.431, 1]],
  [0.571, [0.573, 0.427, 1]],
  [0.573, [0.573, 0.427, 1]],
  [0.575, [0.576, 0.424, 1]],
  [0.577, [0.576, 0.424, 1]],
  [0.579, [0.58, 0.42, 1]],
  [0.581, [0.58, 0.42, 1]],
  [0.583, [0.584, 0.416, 1]],
  [0.585, [0.584, 0.416, 1]],
  [0.587, [0.588, 0.412, 1]],
  [0.589, [0.588, 0.412, 1]],
  [0.591, [0.592, 0.408, 1]],
  [0.593, [0.592, 0.408, 1]],
  [0.595, [0.596, 0.404, 1]],
  [0.597, [0.596, 0.404, 1]],
  [0.599, [0.6, 0.4, 1]],
  [0.601, [0.6, 0.4, 1]],
  [0.603, [0.604, 0.396, 1]],
  [0.605, [0.604, 0.396, 1]],
  [0.607, [0.608, 0.392, 1]],
  [0.609, [0.608, 0.392, 1]],
  [0.611, [0.612, 0.388, 1]],
  [0.613, [0.612, 0.388, 1]],
  [0.614, [0.616, 0.384, 1]],
  [0.616, [0.616, 0.384, 1]],
  [0.618, [0.62, 0.38, 1]],
  [0.62, [0.62, 0.38, 1]],
  [0.622, [0.624, 0.376, 1]],
  [0.624, [0.624, 0.376, 1]],
  [0.626, [0.627, 0.373, 1]],
  [0.628, [0.627, 0.373, 1]],
  [0.63, [0.631, 0.369, 1]],
  [0.632, [0.631, 0.369, 1]],
  [0.634, [0.635, 0.365, 1]],
  [0.636, [0.635, 0.365, 1]],
  [0.638, [0.639, 0.361, 1]],
  [0.64, [0.639, 0.361, 1]],
  [0.642, [0.643, 0.357, 1]],
  [0.644, [0.643, 0.357, 1]],
  [0.646, [0.647, 0.353, 1]],
  [0.648, [0.647, 0.353, 1]],
  [0.65, [0.651, 0.349, 1]],
  [0.652, [0.651, 0.349, 1]],
  [0.654, [0.655, 0.345, 1]],
  [0.656, [0.655, 0.345, 1]],
  [0.658, [0.659, 0.341, 1]],
  [0.659, [0.659, 0.341, 1]],
  [0.661, [0.663, 0.337, 1]],
  [0.663, [0.663, 0.337, 1]],
  [0.665, [0.667, 0.333, 1]],
  [0.667, [0.667, 0.333, 1]],
  [0.669, [0.671, 0.329, 1]],
  [0.671, [0.671, 0.329, 1]],
  [0.673, [0.675, 0.325, 1]],
  [0.675, [0.675, 0.325, 1]],
  [0.677, [0.678, 0.322, 1]],
  [0.679, [0.678, 0.322, 1]],
  [0.681, [0.682, 0.318, 1]],
  [0.683, [0.682, 0.318, 1]],
  [0.685, [0.686, 0.314, 1]],
  [0.687, [0.686, 0.314, 1]],
  [0.689, [0.69, 0.31, 1]],
  [0.691, [0.69, 0.31, 1]],
  [0.693, [0.694, 0.306, 1]],
  [0.695, [0.694, 0.306, 1]],
  [0.697, [0.698, 0.302, 1]],
  [0.699, [0.698, 0.302, 1]],
  [0.701, [0.702, 0.298, 1]],
  [0.703, [0.702, 0.298, 1]],
  [0.705, [0.706, 0.294, 1]],
  [0.706, [0.706, 0.294, 1]],
  [0.708, [0.71, 0.29, 1]],
  [0.71, [0.71, 0.29, 1]],
  [0.712, [0.714, 0.286, 1]],
  [0.714, [0.714, 0.286, 1]],
  [0.716, [0.718, 0.282, 1]],
  [0.718, [0.718, 0.282, 1]],
  [0.72, [0.722, 0.278, 1]],
  [0.722, [0.722, 0.278, 1]],
  [0.724, [0.725, 0.275, 1]],
  [0.726, [0.725, 0.275, 1]],
  [0.728, [0.729, 0.271, 1]],
  [0.73, [0.729, 0.271, 1]],
  [0.732, [0.733, 0.267, 1]],
  [0.734, [0.733, 0.267, 1]],
  [0.736, [0.737, 0.263, 1]],
  [0.738, [0.737, 0.263, 1]],
  [0.74, [0.741, 0.259, 1]],
  [0.742, [0.741, 0.259, 1]],
  [0.744, [0.745, 0.255, 1]],
  [0.746, [0.745, 0.255, 1]],
  [0.748, [0.749, 0.251, 1]],
  [0.75, [0.749, 0.251, 1]],
  [0.751, [0.753, 0.247, 1]],
  [0.753, [0.753, 0.247, 1]],
  [0.755, [0.757, 0.243, 1]],
  [0.757, [0.757, 0.243, 1]],
  [0.759, [0.761, 0.239, 1]],
  [0.761, [0.761, 0.239, 1]],
  [0.763, [0.765, 0.235, 1]],
  [0.765, [0.765, 0.235, 1]],
  [0.767, [0.769, 0.231, 1]],
  [0.769, [0.769, 0.231, 1]],
  [0.771, [0.773, 0.227, 1]],
  [0.773, [0.773, 0.227, 1]],
  [0.775, [0.776, 0.224, 1]],
  [0.777, [0.776, 0.224, 1]],
  [0.779, [0.78, 0.22, 1]],
  [0.781, [0.78, 0.22, 1]],
  [0.783, [0.784, 0.216, 1]],
  [0.785, [0.784, 0.216, 1]],
  [0.787, [0.788, 0.212, 1]],
  [0.789, [0.788, 0.212, 1]],
  [0.791, [0.792, 0.208, 1]],
  [0.793, [0.792, 0.208, 1]],
  [0.795, [0.796, 0.204, 1]],
  [0.796, [0.796, 0.204, 1]],
  [0.798, [0.8, 0.2, 1]],
  [0.8, [0.8, 0.2, 1]],
  [0.802, [0.804, 0.196, 1]],
  [0.804, [0.804, 0.196, 1]],
  [0.806, [0.808, 0.192, 1]],
  [0.808, [0.808, 0.192, 1]],
  [0.81, [0.812, 0.188, 1]],
  [0.812, [0.812, 0.188, 1]],
  [0.814, [0.816, 0.184, 1]],
  [0.816, [0.816, 0.184, 1]],
  [0.818, [0.82, 0.18, 1]],
  [0.82, [0.82, 0.18, 1]],
  [0.822, [0.824, 0.176, 1]],
  [0.824, [0.824, 0.176, 1]],
  [0.826, [0.827, 0.173, 1]],
  [0.828, [0.827, 0.173, 1]],
  [0.83, [0.831, 0.169, 1]],
  [0.832, [0.831, 0.169, 1]],
  [0.834, [0.835, 0.165, 1]],
  [0.836, [0.835, 0.165, 1]],
  [0.838, [0.839, 0.161, 1]],
  [0.84, [0.839, 0.161, 1]],
  [0.841, [0.843, 0.157, 1]],
  [0.843, [0.843, 0.157, 1]],
  [0.845, [0.847, 0.153, 1]],
  [0.847, [0.847, 0.153, 1]],
  [0.849, [0.851, 0.149, 1]],
  [0.851, [0.851, 0.149, 1]],
  [0.853, [0.855, 0.145, 1]],
  [0.855, [0.855, 0.145, 1]],
  [0.857, [0.859, 0.141, 1]],
  [0.859, [0.859, 0.141, 1]],
  [0.861, [0.863, 0.137, 1]],
  [0.863, [0.863, 0.137, 1]],
  [0.865, [0.867, 0.133, 1]],
  [0.867, [0.867, 0.133, 1]],
  [0.869, [0.871, 0.129, 1]],
  [0.871, [0.871, 0.129, 1]],
  [0.873, [0.875, 0.125, 1]],
  [0.875, [0.875, 0.125, 1]],
  [0.877, [0.878, 0.122, 1]],
  [0.879, [0.878, 0.122, 1]],
  [0.881, [0.882, 0.118, 1]],
  [0.883, [0.882, 0.118, 1]],
  [0.885, [0.886, 0.114, 1]],
  [0.886, [0.886, 0.114, 1]],
  [0.888, [0.89, 0.11, 1]],
  [0.89, [0.89, 0.11, 1]],
  [0.892, [0.894, 0.106, 1]],
  [0.894, [0.894, 0.106, 1]],
  [0.896, [0.898, 0.102, 1]],
  [0.898, [0.898, 0.102, 1]],
  [0.9, [0.902, 0.098, 1]],
  [0.902, [0.902, 0.098, 1]],
  [0.904, [0.906, 0.094, 1]],
  [0.906, [0.906, 0.094, 1]],
  [0.908, [0.91, 0.09, 1]],
  [0.91, [0.91, 0.09, 1]],
  [0.912, [0.914, 0.086, 1]],
  [0.914, [0.914, 0.086, 1]],
  [0.916, [0.918, 0.082, 1]],
  [0.918, [0.918, 0.082, 1]],
  [0.92, [0.922, 0.078, 1]],
  [0.922, [0.922, 0.078, 1]],
  [0.924, [0.925, 0.075, 1]],
  [0.926, [0.925, 0.075, 1]],
  [0.928, [0.929, 0.071, 1]],
  [0.93, [0.929, 0.071, 1]],
  [0.932, [0.933, 0.067, 1]],
  [0.933, [0.933, 0.067, 1]],
  [0.935, [0.937, 0.063, 1]],
  [0.937, [0.937, 0.063, 1]],
  [0.939, [0.941, 0.059, 1]],
  [0.941, [0.941, 0.059, 1]],
  [0.943, [0.945, 0.055, 1]],
  [0.945, [0.945, 0.055, 1]],
  [0.947, [0.949, 0.051, 1]],
  [0.949, [0.949, 0.051, 1]],
  [0.951, [0.953, 0.047, 1]],
  [0.953, [0.953, 0.047, 1]],
  [0.955, [0.957, 0.043, 1]],
  [0.957, [0.957, 0.043, 1]],
  [0.959, [0.961, 0.039, 1]],
  [0.961, [0.961, 0.039, 1]],
  [0.963, [0.965, 0.035, 1]],
  [0.965, [0.965, 0.035, 1]],
  [0.967, [0.969, 0.031, 1]],
  [0.969, [0.969, 0.031, 1]],
  [0.971, [0.973, 0.027, 1]],
  [0.973, [0.973, 0.027, 1]],
  [0.975, [0.976, 0.024, 1]],
  [0.977, [0.976, 0.024, 1]],
  [0.978, [0.98, 0.02, 1]],
  [0.98, [0.98, 0.02, 1]],
  [0.982, [0.984, 0.016, 1]],
  [0.984, [0.984, 0.016, 1]],
  [0.986, [0.988, 0.012, 1]],
  [0.988, [0.988, 0.012, 1]],
  [0.99, [0.992, 8e-3, 1]],
  [0.992, [0.992, 8e-3, 1]],
  [0.994, [0.996, 4e-3, 1]],
  [0.996, [0.996, 4e-3, 1]],
  [0.998, [1, 0, 1]],
  [1, [1, 0, 1]]
], Tp = [
  [0, [0, 0, 0]],
  [2e-3, [0, 0, 0]],
  [4e-3, [5e-3, 3e-3, 2e-3]],
  [6e-3, [5e-3, 3e-3, 2e-3]],
  [8e-3, [0.01, 6e-3, 4e-3]],
  [0.01, [0.01, 6e-3, 4e-3]],
  [0.012, [0.015, 9e-3, 6e-3]],
  [0.014, [0.015, 9e-3, 6e-3]],
  [0.016, [0.019, 0.012, 8e-3]],
  [0.018, [0.019, 0.012, 8e-3]],
  [0.02, [0.024, 0.015, 0.01]],
  [0.022, [0.024, 0.015, 0.01]],
  [0.023, [0.029, 0.018, 0.012]],
  [0.025, [0.029, 0.018, 0.012]],
  [0.027, [0.034, 0.021, 0.014]],
  [0.029, [0.034, 0.021, 0.014]],
  [0.031, [0.039, 0.025, 0.016]],
  [0.033, [0.039, 0.025, 0.016]],
  [0.035, [0.044, 0.028, 0.018]],
  [0.037, [0.044, 0.028, 0.018]],
  [0.039, [0.048, 0.031, 0.02]],
  [0.041, [0.048, 0.031, 0.02]],
  [0.043, [0.053, 0.034, 0.021]],
  [0.045, [0.053, 0.034, 0.021]],
  [0.047, [0.058, 0.037, 0.023]],
  [0.049, [0.058, 0.037, 0.023]],
  [0.051, [0.063, 0.04, 0.025]],
  [0.053, [0.063, 0.04, 0.025]],
  [0.055, [0.068, 0.043, 0.027]],
  [0.057, [0.068, 0.043, 0.027]],
  [0.059, [0.073, 0.046, 0.029]],
  [0.061, [0.073, 0.046, 0.029]],
  [0.063, [0.078, 0.049, 0.031]],
  [0.065, [0.078, 0.049, 0.031]],
  [0.067, [0.082, 0.052, 0.033]],
  [0.068, [0.082, 0.052, 0.033]],
  [0.07, [0.087, 0.055, 0.035]],
  [0.072, [0.087, 0.055, 0.035]],
  [0.074, [0.092, 0.058, 0.037]],
  [0.076, [0.092, 0.058, 0.037]],
  [0.078, [0.097, 0.061, 0.039]],
  [0.08, [0.097, 0.061, 0.039]],
  [0.082, [0.102, 0.064, 0.041]],
  [0.084, [0.102, 0.064, 0.041]],
  [0.086, [0.107, 0.067, 0.043]],
  [0.088, [0.107, 0.067, 0.043]],
  [0.09, [0.111, 0.07, 0.045]],
  [0.092, [0.111, 0.07, 0.045]],
  [0.094, [0.116, 0.074, 0.047]],
  [0.096, [0.116, 0.074, 0.047]],
  [0.098, [0.121, 0.077, 0.049]],
  [0.1, [0.121, 0.077, 0.049]],
  [0.102, [0.126, 0.08, 0.051]],
  [0.104, [0.126, 0.08, 0.051]],
  [0.106, [0.131, 0.083, 0.053]],
  [0.108, [0.131, 0.083, 0.053]],
  [0.11, [0.136, 0.086, 0.055]],
  [0.112, [0.136, 0.086, 0.055]],
  [0.114, [0.14, 0.089, 0.057]],
  [0.115, [0.14, 0.089, 0.057]],
  [0.117, [0.145, 0.092, 0.059]],
  [0.119, [0.145, 0.092, 0.059]],
  [0.121, [0.15, 0.095, 0.06]],
  [0.123, [0.15, 0.095, 0.06]],
  [0.125, [0.155, 0.098, 0.062]],
  [0.127, [0.155, 0.098, 0.062]],
  [0.129, [0.16, 0.101, 0.064]],
  [0.131, [0.16, 0.101, 0.064]],
  [0.133, [0.165, 0.104, 0.066]],
  [0.135, [0.165, 0.104, 0.066]],
  [0.137, [0.17, 0.107, 0.068]],
  [0.139, [0.17, 0.107, 0.068]],
  [0.141, [0.174, 0.11, 0.07]],
  [0.143, [0.174, 0.11, 0.07]],
  [0.145, [0.179, 0.113, 0.072]],
  [0.147, [0.179, 0.113, 0.072]],
  [0.149, [0.184, 0.116, 0.074]],
  [0.151, [0.184, 0.116, 0.074]],
  [0.153, [0.189, 0.119, 0.076]],
  [0.155, [0.189, 0.119, 0.076]],
  [0.157, [0.194, 0.123, 0.078]],
  [0.159, [0.194, 0.123, 0.078]],
  [0.16, [0.199, 0.126, 0.08]],
  [0.162, [0.199, 0.126, 0.08]],
  [0.164, [0.203, 0.129, 0.082]],
  [0.166, [0.203, 0.129, 0.082]],
  [0.168, [0.208, 0.132, 0.084]],
  [0.17, [0.208, 0.132, 0.084]],
  [0.172, [0.213, 0.135, 0.086]],
  [0.174, [0.213, 0.135, 0.086]],
  [0.176, [0.218, 0.138, 0.088]],
  [0.178, [0.218, 0.138, 0.088]],
  [0.18, [0.223, 0.141, 0.09]],
  [0.182, [0.223, 0.141, 0.09]],
  [0.184, [0.228, 0.144, 0.092]],
  [0.186, [0.228, 0.144, 0.092]],
  [0.188, [0.233, 0.147, 0.094]],
  [0.19, [0.233, 0.147, 0.094]],
  [0.192, [0.237, 0.15, 0.096]],
  [0.194, [0.237, 0.15, 0.096]],
  [0.196, [0.242, 0.153, 0.098]],
  [0.198, [0.242, 0.153, 0.098]],
  [0.2, [0.247, 0.156, 0.1]],
  [0.202, [0.247, 0.156, 0.1]],
  [0.204, [0.252, 0.159, 0.101]],
  [0.205, [0.252, 0.159, 0.101]],
  [0.207, [0.257, 0.162, 0.103]],
  [0.209, [0.257, 0.162, 0.103]],
  [0.211, [0.262, 0.165, 0.105]],
  [0.213, [0.262, 0.165, 0.105]],
  [0.215, [0.266, 0.168, 0.107]],
  [0.217, [0.266, 0.168, 0.107]],
  [0.219, [0.271, 0.172, 0.109]],
  [0.221, [0.271, 0.172, 0.109]],
  [0.223, [0.276, 0.175, 0.111]],
  [0.225, [0.276, 0.175, 0.111]],
  [0.227, [0.281, 0.178, 0.113]],
  [0.229, [0.281, 0.178, 0.113]],
  [0.231, [0.286, 0.181, 0.115]],
  [0.233, [0.286, 0.181, 0.115]],
  [0.235, [0.291, 0.184, 0.117]],
  [0.237, [0.291, 0.184, 0.117]],
  [0.239, [0.296, 0.187, 0.119]],
  [0.241, [0.296, 0.187, 0.119]],
  [0.243, [0.3, 0.19, 0.121]],
  [0.245, [0.3, 0.19, 0.121]],
  [0.247, [0.305, 0.193, 0.123]],
  [0.249, [0.305, 0.193, 0.123]],
  [0.25, [0.31, 0.196, 0.125]],
  [0.252, [0.31, 0.196, 0.125]],
  [0.254, [0.315, 0.199, 0.127]],
  [0.256, [0.315, 0.199, 0.127]],
  [0.258, [0.32, 0.202, 0.129]],
  [0.26, [0.32, 0.202, 0.129]],
  [0.262, [0.325, 0.205, 0.131]],
  [0.264, [0.325, 0.205, 0.131]],
  [0.266, [0.329, 0.208, 0.133]],
  [0.268, [0.329, 0.208, 0.133]],
  [0.27, [0.334, 0.211, 0.135]],
  [0.272, [0.334, 0.211, 0.135]],
  [0.274, [0.339, 0.214, 0.137]],
  [0.276, [0.339, 0.214, 0.137]],
  [0.278, [0.344, 0.218, 0.139]],
  [0.28, [0.344, 0.218, 0.139]],
  [0.282, [0.349, 0.221, 0.14]],
  [0.284, [0.349, 0.221, 0.14]],
  [0.286, [0.354, 0.224, 0.142]],
  [0.288, [0.354, 0.224, 0.142]],
  [0.29, [0.358, 0.227, 0.144]],
  [0.292, [0.358, 0.227, 0.144]],
  [0.294, [0.363, 0.23, 0.146]],
  [0.295, [0.363, 0.23, 0.146]],
  [0.297, [0.368, 0.233, 0.148]],
  [0.299, [0.368, 0.233, 0.148]],
  [0.301, [0.373, 0.236, 0.15]],
  [0.303, [0.373, 0.236, 0.15]],
  [0.305, [0.378, 0.239, 0.152]],
  [0.307, [0.378, 0.239, 0.152]],
  [0.309, [0.383, 0.242, 0.154]],
  [0.311, [0.383, 0.242, 0.154]],
  [0.313, [0.388, 0.245, 0.156]],
  [0.315, [0.388, 0.245, 0.156]],
  [0.317, [0.392, 0.248, 0.158]],
  [0.319, [0.392, 0.248, 0.158]],
  [0.321, [0.397, 0.251, 0.16]],
  [0.323, [0.397, 0.251, 0.16]],
  [0.325, [0.402, 0.254, 0.162]],
  [0.327, [0.402, 0.254, 0.162]],
  [0.329, [0.407, 0.257, 0.164]],
  [0.331, [0.407, 0.257, 0.164]],
  [0.333, [0.412, 0.26, 0.166]],
  [0.335, [0.412, 0.26, 0.166]],
  [0.337, [0.417, 0.263, 0.168]],
  [0.339, [0.417, 0.263, 0.168]],
  [0.341, [0.421, 0.267, 0.17]],
  [0.342, [0.421, 0.267, 0.17]],
  [0.344, [0.426, 0.27, 0.172]],
  [0.346, [0.426, 0.27, 0.172]],
  [0.348, [0.431, 0.273, 0.174]],
  [0.35, [0.431, 0.273, 0.174]],
  [0.352, [0.436, 0.276, 0.176]],
  [0.354, [0.436, 0.276, 0.176]],
  [0.356, [0.441, 0.279, 0.178]],
  [0.358, [0.441, 0.279, 0.178]],
  [0.36, [0.446, 0.282, 0.179]],
  [0.362, [0.446, 0.282, 0.179]],
  [0.364, [0.451, 0.285, 0.181]],
  [0.366, [0.451, 0.285, 0.181]],
  [0.368, [0.455, 0.288, 0.183]],
  [0.37, [0.455, 0.288, 0.183]],
  [0.372, [0.46, 0.291, 0.185]],
  [0.374, [0.46, 0.291, 0.185]],
  [0.376, [0.465, 0.294, 0.187]],
  [0.378, [0.465, 0.294, 0.187]],
  [0.38, [0.47, 0.297, 0.189]],
  [0.382, [0.47, 0.297, 0.189]],
  [0.384, [0.475, 0.3, 0.191]],
  [0.386, [0.475, 0.3, 0.191]],
  [0.387, [0.48, 0.303, 0.193]],
  [0.389, [0.48, 0.303, 0.193]],
  [0.391, [0.484, 0.306, 0.195]],
  [0.393, [0.484, 0.306, 0.195]],
  [0.395, [0.489, 0.309, 0.197]],
  [0.397, [0.489, 0.309, 0.197]],
  [0.399, [0.494, 0.312, 0.199]],
  [0.401, [0.494, 0.312, 0.199]],
  [0.403, [0.499, 0.316, 0.201]],
  [0.405, [0.499, 0.316, 0.201]],
  [0.407, [0.504, 0.319, 0.203]],
  [0.409, [0.504, 0.319, 0.203]],
  [0.411, [0.509, 0.322, 0.205]],
  [0.413, [0.509, 0.322, 0.205]],
  [0.415, [0.513, 0.325, 0.207]],
  [0.417, [0.513, 0.325, 0.207]],
  [0.419, [0.518, 0.328, 0.209]],
  [0.421, [0.518, 0.328, 0.209]],
  [0.423, [0.523, 0.331, 0.211]],
  [0.425, [0.523, 0.331, 0.211]],
  [0.427, [0.528, 0.334, 0.213]],
  [0.429, [0.528, 0.334, 0.213]],
  [0.431, [0.533, 0.337, 0.215]],
  [0.432, [0.533, 0.337, 0.215]],
  [0.434, [0.538, 0.34, 0.217]],
  [0.436, [0.538, 0.34, 0.217]],
  [0.438, [0.543, 0.343, 0.219]],
  [0.44, [0.543, 0.343, 0.219]],
  [0.442, [0.547, 0.346, 0.22]],
  [0.444, [0.547, 0.346, 0.22]],
  [0.446, [0.552, 0.349, 0.222]],
  [0.448, [0.552, 0.349, 0.222]],
  [0.45, [0.557, 0.352, 0.224]],
  [0.452, [0.557, 0.352, 0.224]],
  [0.454, [0.562, 0.355, 0.226]],
  [0.456, [0.562, 0.355, 0.226]],
  [0.458, [0.567, 0.358, 0.228]],
  [0.46, [0.567, 0.358, 0.228]],
  [0.462, [0.572, 0.361, 0.23]],
  [0.464, [0.572, 0.361, 0.23]],
  [0.466, [0.576, 0.365, 0.232]],
  [0.468, [0.576, 0.365, 0.232]],
  [0.47, [0.581, 0.368, 0.234]],
  [0.472, [0.581, 0.368, 0.234]],
  [0.474, [0.586, 0.371, 0.236]],
  [0.476, [0.586, 0.371, 0.236]],
  [0.477, [0.591, 0.374, 0.238]],
  [0.479, [0.591, 0.374, 0.238]],
  [0.481, [0.596, 0.377, 0.24]],
  [0.483, [0.596, 0.377, 0.24]],
  [0.485, [0.601, 0.38, 0.242]],
  [0.487, [0.601, 0.38, 0.242]],
  [0.489, [0.606, 0.383, 0.244]],
  [0.491, [0.606, 0.383, 0.244]],
  [0.493, [0.61, 0.386, 0.246]],
  [0.495, [0.61, 0.386, 0.246]],
  [0.497, [0.615, 0.389, 0.248]],
  [0.499, [0.615, 0.389, 0.248]],
  [0.501, [0.62, 0.392, 0.25]],
  [0.503, [0.62, 0.392, 0.25]],
  [0.505, [0.625, 0.395, 0.252]],
  [0.507, [0.625, 0.395, 0.252]],
  [0.509, [0.63, 0.398, 0.254]],
  [0.511, [0.63, 0.398, 0.254]],
  [0.513, [0.635, 0.401, 0.256]],
  [0.515, [0.635, 0.401, 0.256]],
  [0.517, [0.639, 0.404, 0.258]],
  [0.519, [0.639, 0.404, 0.258]],
  [0.521, [0.644, 0.407, 0.259]],
  [0.523, [0.644, 0.407, 0.259]],
  [0.524, [0.649, 0.411, 0.261]],
  [0.526, [0.649, 0.411, 0.261]],
  [0.528, [0.654, 0.414, 0.263]],
  [0.53, [0.654, 0.414, 0.263]],
  [0.532, [0.659, 0.417, 0.265]],
  [0.534, [0.659, 0.417, 0.265]],
  [0.536, [0.664, 0.42, 0.267]],
  [0.538, [0.664, 0.42, 0.267]],
  [0.54, [0.669, 0.423, 0.269]],
  [0.542, [0.669, 0.423, 0.269]],
  [0.544, [0.673, 0.426, 0.271]],
  [0.546, [0.673, 0.426, 0.271]],
  [0.548, [0.678, 0.429, 0.273]],
  [0.55, [0.678, 0.429, 0.273]],
  [0.552, [0.683, 0.432, 0.275]],
  [0.554, [0.683, 0.432, 0.275]],
  [0.556, [0.688, 0.435, 0.277]],
  [0.558, [0.688, 0.435, 0.277]],
  [0.56, [0.693, 0.438, 0.279]],
  [0.562, [0.693, 0.438, 0.279]],
  [0.564, [0.698, 0.441, 0.281]],
  [0.566, [0.698, 0.441, 0.281]],
  [0.568, [0.702, 0.444, 0.283]],
  [0.569, [0.702, 0.444, 0.283]],
  [0.571, [0.707, 0.447, 0.285]],
  [0.573, [0.707, 0.447, 0.285]],
  [0.575, [0.712, 0.45, 0.287]],
  [0.577, [0.712, 0.45, 0.287]],
  [0.579, [0.717, 0.453, 0.289]],
  [0.581, [0.717, 0.453, 0.289]],
  [0.583, [0.722, 0.456, 0.291]],
  [0.585, [0.722, 0.456, 0.291]],
  [0.587, [0.727, 0.46, 0.293]],
  [0.589, [0.727, 0.46, 0.293]],
  [0.591, [0.731, 0.463, 0.295]],
  [0.593, [0.731, 0.463, 0.295]],
  [0.595, [0.736, 0.466, 0.297]],
  [0.597, [0.736, 0.466, 0.297]],
  [0.599, [0.741, 0.469, 0.298]],
  [0.601, [0.741, 0.469, 0.298]],
  [0.603, [0.746, 0.472, 0.3]],
  [0.605, [0.746, 0.472, 0.3]],
  [0.607, [0.751, 0.475, 0.302]],
  [0.609, [0.751, 0.475, 0.302]],
  [0.611, [0.756, 0.478, 0.304]],
  [0.613, [0.756, 0.478, 0.304]],
  [0.614, [0.761, 0.481, 0.306]],
  [0.616, [0.761, 0.481, 0.306]],
  [0.618, [0.765, 0.484, 0.308]],
  [0.62, [0.765, 0.484, 0.308]],
  [0.622, [0.77, 0.487, 0.31]],
  [0.624, [0.77, 0.487, 0.31]],
  [0.626, [0.775, 0.49, 0.312]],
  [0.628, [0.775, 0.49, 0.312]],
  [0.63, [0.78, 0.493, 0.314]],
  [0.632, [0.78, 0.493, 0.314]],
  [0.634, [0.785, 0.496, 0.316]],
  [0.636, [0.785, 0.496, 0.316]],
  [0.638, [0.79, 0.499, 0.318]],
  [0.64, [0.79, 0.499, 0.318]],
  [0.642, [0.794, 0.502, 0.32]],
  [0.644, [0.794, 0.502, 0.32]],
  [0.646, [0.799, 0.505, 0.322]],
  [0.648, [0.799, 0.505, 0.322]],
  [0.65, [0.804, 0.509, 0.324]],
  [0.652, [0.804, 0.509, 0.324]],
  [0.654, [0.809, 0.512, 0.326]],
  [0.656, [0.809, 0.512, 0.326]],
  [0.658, [0.814, 0.515, 0.328]],
  [0.659, [0.814, 0.515, 0.328]],
  [0.661, [0.819, 0.518, 0.33]],
  [0.663, [0.819, 0.518, 0.33]],
  [0.665, [0.824, 0.521, 0.332]],
  [0.667, [0.824, 0.521, 0.332]],
  [0.669, [0.828, 0.524, 0.334]],
  [0.671, [0.828, 0.524, 0.334]],
  [0.673, [0.833, 0.527, 0.336]],
  [0.675, [0.833, 0.527, 0.336]],
  [0.677, [0.838, 0.53, 0.338]],
  [0.679, [0.838, 0.53, 0.338]],
  [0.681, [0.843, 0.533, 0.339]],
  [0.683, [0.843, 0.533, 0.339]],
  [0.685, [0.848, 0.536, 0.341]],
  [0.687, [0.848, 0.536, 0.341]],
  [0.689, [0.853, 0.539, 0.343]],
  [0.691, [0.853, 0.539, 0.343]],
  [0.693, [0.857, 0.542, 0.345]],
  [0.695, [0.857, 0.542, 0.345]],
  [0.697, [0.862, 0.545, 0.347]],
  [0.699, [0.862, 0.545, 0.347]],
  [0.701, [0.867, 0.548, 0.349]],
  [0.703, [0.867, 0.548, 0.349]],
  [0.705, [0.872, 0.551, 0.351]],
  [0.706, [0.872, 0.551, 0.351]],
  [0.708, [0.877, 0.554, 0.353]],
  [0.71, [0.877, 0.554, 0.353]],
  [0.712, [0.882, 0.558, 0.355]],
  [0.714, [0.882, 0.558, 0.355]],
  [0.716, [0.887, 0.561, 0.357]],
  [0.718, [0.887, 0.561, 0.357]],
  [0.72, [0.891, 0.564, 0.359]],
  [0.722, [0.891, 0.564, 0.359]],
  [0.724, [0.896, 0.567, 0.361]],
  [0.726, [0.896, 0.567, 0.361]],
  [0.728, [0.901, 0.57, 0.363]],
  [0.73, [0.901, 0.57, 0.363]],
  [0.732, [0.906, 0.573, 0.365]],
  [0.734, [0.906, 0.573, 0.365]],
  [0.736, [0.911, 0.576, 0.367]],
  [0.738, [0.911, 0.576, 0.367]],
  [0.74, [0.916, 0.579, 0.369]],
  [0.742, [0.916, 0.579, 0.369]],
  [0.744, [0.92, 0.582, 0.371]],
  [0.746, [0.92, 0.582, 0.371]],
  [0.748, [0.925, 0.585, 0.373]],
  [0.75, [0.925, 0.585, 0.373]],
  [0.751, [0.93, 0.588, 0.375]],
  [0.753, [0.93, 0.588, 0.375]],
  [0.755, [0.935, 0.591, 0.377]],
  [0.757, [0.935, 0.591, 0.377]],
  [0.759, [0.94, 0.594, 0.378]],
  [0.761, [0.94, 0.594, 0.378]],
  [0.763, [0.945, 0.597, 0.38]],
  [0.765, [0.945, 0.597, 0.38]],
  [0.767, [0.949, 0.6, 0.382]],
  [0.769, [0.949, 0.6, 0.382]],
  [0.771, [0.954, 0.604, 0.384]],
  [0.773, [0.954, 0.604, 0.384]],
  [0.775, [0.959, 0.607, 0.386]],
  [0.777, [0.959, 0.607, 0.386]],
  [0.779, [0.964, 0.61, 0.388]],
  [0.781, [0.964, 0.61, 0.388]],
  [0.783, [0.969, 0.613, 0.39]],
  [0.785, [0.969, 0.613, 0.39]],
  [0.787, [0.974, 0.616, 0.392]],
  [0.789, [0.974, 0.616, 0.392]],
  [0.791, [0.979, 0.619, 0.394]],
  [0.793, [0.979, 0.619, 0.394]],
  [0.795, [0.983, 0.622, 0.396]],
  [0.796, [0.983, 0.622, 0.396]],
  [0.798, [0.988, 0.625, 0.398]],
  [0.8, [0.988, 0.625, 0.398]],
  [0.802, [0.993, 0.628, 0.4]],
  [0.804, [0.993, 0.628, 0.4]],
  [0.806, [0.998, 0.631, 0.402]],
  [0.808, [0.998, 0.631, 0.402]],
  [0.81, [1, 0.634, 0.404]],
  [0.812, [1, 0.634, 0.404]],
  [0.814, [1, 0.637, 0.406]],
  [0.816, [1, 0.637, 0.406]],
  [0.818, [1, 0.64, 0.408]],
  [0.82, [1, 0.64, 0.408]],
  [0.822, [1, 0.643, 0.41]],
  [0.824, [1, 0.643, 0.41]],
  [0.826, [1, 0.646, 0.412]],
  [0.828, [1, 0.646, 0.412]],
  [0.83, [1, 0.649, 0.414]],
  [0.832, [1, 0.649, 0.414]],
  [0.834, [1, 0.653, 0.416]],
  [0.836, [1, 0.653, 0.416]],
  [0.838, [1, 0.656, 0.418]],
  [0.84, [1, 0.656, 0.418]],
  [0.841, [1, 0.659, 0.419]],
  [0.843, [1, 0.659, 0.419]],
  [0.845, [1, 0.662, 0.421]],
  [0.847, [1, 0.662, 0.421]],
  [0.849, [1, 0.665, 0.423]],
  [0.851, [1, 0.665, 0.423]],
  [0.853, [1, 0.668, 0.425]],
  [0.855, [1, 0.668, 0.425]],
  [0.857, [1, 0.671, 0.427]],
  [0.859, [1, 0.671, 0.427]],
  [0.861, [1, 0.674, 0.429]],
  [0.863, [1, 0.674, 0.429]],
  [0.865, [1, 0.677, 0.431]],
  [0.867, [1, 0.677, 0.431]],
  [0.869, [1, 0.68, 0.433]],
  [0.871, [1, 0.68, 0.433]],
  [0.873, [1, 0.683, 0.435]],
  [0.875, [1, 0.683, 0.435]],
  [0.877, [1, 0.686, 0.437]],
  [0.879, [1, 0.686, 0.437]],
  [0.881, [1, 0.689, 0.439]],
  [0.883, [1, 0.689, 0.439]],
  [0.885, [1, 0.692, 0.441]],
  [0.886, [1, 0.692, 0.441]],
  [0.888, [1, 0.695, 0.443]],
  [0.89, [1, 0.695, 0.443]],
  [0.892, [1, 0.698, 0.445]],
  [0.894, [1, 0.698, 0.445]],
  [0.896, [1, 0.702, 0.447]],
  [0.898, [1, 0.702, 0.447]],
  [0.9, [1, 0.705, 0.449]],
  [0.902, [1, 0.705, 0.449]],
  [0.904, [1, 0.708, 0.451]],
  [0.906, [1, 0.708, 0.451]],
  [0.908, [1, 0.711, 0.453]],
  [0.91, [1, 0.711, 0.453]],
  [0.912, [1, 0.714, 0.455]],
  [0.914, [1, 0.714, 0.455]],
  [0.916, [1, 0.717, 0.457]],
  [0.918, [1, 0.717, 0.457]],
  [0.92, [1, 0.72, 0.458]],
  [0.922, [1, 0.72, 0.458]],
  [0.924, [1, 0.723, 0.46]],
  [0.926, [1, 0.723, 0.46]],
  [0.928, [1, 0.726, 0.462]],
  [0.93, [1, 0.726, 0.462]],
  [0.932, [1, 0.729, 0.464]],
  [0.933, [1, 0.729, 0.464]],
  [0.935, [1, 0.732, 0.466]],
  [0.937, [1, 0.732, 0.466]],
  [0.939, [1, 0.735, 0.468]],
  [0.941, [1, 0.735, 0.468]],
  [0.943, [1, 0.738, 0.47]],
  [0.945, [1, 0.738, 0.47]],
  [0.947, [1, 0.741, 0.472]],
  [0.949, [1, 0.741, 0.472]],
  [0.951, [1, 0.744, 0.474]],
  [0.953, [1, 0.744, 0.474]],
  [0.955, [1, 0.748, 0.476]],
  [0.957, [1, 0.748, 0.476]],
  [0.959, [1, 0.751, 0.478]],
  [0.961, [1, 0.751, 0.478]],
  [0.963, [1, 0.754, 0.48]],
  [0.965, [1, 0.754, 0.48]],
  [0.967, [1, 0.757, 0.482]],
  [0.969, [1, 0.757, 0.482]],
  [0.971, [1, 0.76, 0.484]],
  [0.973, [1, 0.76, 0.484]],
  [0.975, [1, 0.763, 0.486]],
  [0.977, [1, 0.763, 0.486]],
  [0.978, [1, 0.766, 0.488]],
  [0.98, [1, 0.766, 0.488]],
  [0.982, [1, 0.769, 0.49]],
  [0.984, [1, 0.769, 0.49]],
  [0.986, [1, 0.772, 0.492]],
  [0.988, [1, 0.772, 0.492]],
  [0.99, [1, 0.775, 0.494]],
  [0.992, [1, 0.775, 0.494]],
  [0.994, [1, 0.778, 0.496]],
  [0.996, [1, 0.778, 0.496]],
  [0.998, [1, 0.781, 0.497]],
  [1, [1, 0.781, 0.497]]
], Ap = [
  [0, [0, 0, 0]],
  [2e-3, [0, 0, 0]],
  [4e-3, [6e-3, 0, 0]],
  [6e-3, [6e-3, 0, 0]],
  [8e-3, [0.012, 0, 0]],
  [0.01, [0.012, 0, 0]],
  [0.012, [0.018, 0, 0]],
  [0.014, [0.018, 0, 0]],
  [0.016, [0.024, 0, 0]],
  [0.018, [0.024, 0, 0]],
  [0.02, [0.029, 0, 0]],
  [0.022, [0.029, 0, 0]],
  [0.023, [0.035, 0, 0]],
  [0.025, [0.035, 0, 0]],
  [0.027, [0.041, 0, 0]],
  [0.029, [0.041, 0, 0]],
  [0.031, [0.047, 0, 0]],
  [0.033, [0.047, 0, 0]],
  [0.035, [0.053, 0, 0]],
  [0.037, [0.053, 0, 0]],
  [0.039, [0.059, 0, 0]],
  [0.041, [0.059, 0, 0]],
  [0.043, [0.065, 0, 0]],
  [0.045, [0.065, 0, 0]],
  [0.047, [0.071, 0, 0]],
  [0.049, [0.071, 0, 0]],
  [0.051, [0.076, 0, 0]],
  [0.053, [0.076, 0, 0]],
  [0.055, [0.082, 0, 0]],
  [0.057, [0.082, 0, 0]],
  [0.059, [0.088, 0, 0]],
  [0.061, [0.088, 0, 0]],
  [0.063, [0.094, 0, 0]],
  [0.065, [0.094, 0, 0]],
  [0.067, [0.1, 0, 0]],
  [0.068, [0.1, 0, 0]],
  [0.07, [0.106, 0, 0]],
  [0.072, [0.106, 0, 0]],
  [0.074, [0.112, 0, 0]],
  [0.076, [0.112, 0, 0]],
  [0.078, [0.118, 0, 0]],
  [0.08, [0.118, 0, 0]],
  [0.082, [0.124, 0, 0]],
  [0.084, [0.124, 0, 0]],
  [0.086, [0.129, 0, 0]],
  [0.088, [0.129, 0, 0]],
  [0.09, [0.135, 0, 0]],
  [0.092, [0.135, 0, 0]],
  [0.094, [0.141, 0, 0]],
  [0.096, [0.141, 0, 0]],
  [0.098, [0.147, 0, 0]],
  [0.1, [0.147, 0, 0]],
  [0.102, [0.153, 0, 0]],
  [0.104, [0.153, 0, 0]],
  [0.106, [0.159, 0, 0]],
  [0.108, [0.159, 0, 0]],
  [0.11, [0.165, 0, 0]],
  [0.112, [0.165, 0, 0]],
  [0.114, [0.171, 0, 0]],
  [0.115, [0.171, 0, 0]],
  [0.117, [0.176, 0, 0]],
  [0.119, [0.176, 0, 0]],
  [0.121, [0.182, 0, 0]],
  [0.123, [0.182, 0, 0]],
  [0.125, [0.188, 0, 0]],
  [0.127, [0.188, 0, 0]],
  [0.129, [0.194, 0, 0]],
  [0.131, [0.194, 0, 0]],
  [0.133, [0.2, 0, 0]],
  [0.135, [0.2, 0, 0]],
  [0.137, [0.206, 0, 0]],
  [0.139, [0.206, 0, 0]],
  [0.141, [0.212, 0, 0]],
  [0.143, [0.212, 0, 0]],
  [0.145, [0.218, 0, 0]],
  [0.147, [0.218, 0, 0]],
  [0.149, [0.224, 0, 0]],
  [0.151, [0.224, 0, 0]],
  [0.153, [0.229, 0, 0]],
  [0.155, [0.229, 0, 0]],
  [0.157, [0.235, 0, 0]],
  [0.159, [0.235, 0, 0]],
  [0.16, [0.241, 0, 0]],
  [0.162, [0.241, 0, 0]],
  [0.164, [0.247, 0, 0]],
  [0.166, [0.247, 0, 0]],
  [0.168, [0.253, 0, 0]],
  [0.17, [0.253, 0, 0]],
  [0.172, [0.259, 0, 0]],
  [0.174, [0.259, 0, 0]],
  [0.176, [0.265, 0, 0]],
  [0.178, [0.265, 0, 0]],
  [0.18, [0.271, 0, 0]],
  [0.182, [0.271, 0, 0]],
  [0.184, [0.276, 0, 0]],
  [0.186, [0.276, 0, 0]],
  [0.188, [0.282, 0, 0]],
  [0.19, [0.282, 0, 0]],
  [0.192, [0.288, 0, 0]],
  [0.194, [0.288, 0, 0]],
  [0.196, [0.294, 0, 0]],
  [0.198, [0.294, 0, 0]],
  [0.2, [0.3, 0, 0]],
  [0.202, [0.3, 0, 0]],
  [0.204, [0.306, 0, 0]],
  [0.205, [0.306, 0, 0]],
  [0.207, [0.312, 0, 0]],
  [0.209, [0.312, 0, 0]],
  [0.211, [0.318, 0, 0]],
  [0.213, [0.318, 0, 0]],
  [0.215, [0.324, 0, 0]],
  [0.217, [0.324, 0, 0]],
  [0.219, [0.329, 0, 0]],
  [0.221, [0.329, 0, 0]],
  [0.223, [0.335, 0, 0]],
  [0.225, [0.335, 0, 0]],
  [0.227, [0.341, 0, 0]],
  [0.229, [0.341, 0, 0]],
  [0.231, [0.347, 0, 0]],
  [0.233, [0.347, 0, 0]],
  [0.235, [0.353, 0, 0]],
  [0.237, [0.353, 0, 0]],
  [0.239, [0.359, 0, 0]],
  [0.241, [0.359, 0, 0]],
  [0.243, [0.365, 0, 0]],
  [0.245, [0.365, 0, 0]],
  [0.247, [0.371, 0, 0]],
  [0.249, [0.371, 0, 0]],
  [0.25, [0.376, 0, 0]],
  [0.252, [0.376, 0, 0]],
  [0.254, [0.382, 0, 0]],
  [0.256, [0.382, 0, 0]],
  [0.258, [0.388, 0, 0]],
  [0.26, [0.388, 0, 0]],
  [0.262, [0.394, 0, 0]],
  [0.264, [0.394, 0, 0]],
  [0.266, [0.4, 0, 0]],
  [0.268, [0.4, 0, 0]],
  [0.27, [0.406, 0, 0]],
  [0.272, [0.406, 0, 0]],
  [0.274, [0.412, 0, 0]],
  [0.276, [0.412, 0, 0]],
  [0.278, [0.418, 0, 0]],
  [0.28, [0.418, 0, 0]],
  [0.282, [0.424, 0, 0]],
  [0.284, [0.424, 0, 0]],
  [0.286, [0.429, 0, 0]],
  [0.288, [0.429, 0, 0]],
  [0.29, [0.435, 0, 0]],
  [0.292, [0.435, 0, 0]],
  [0.294, [0.441, 0, 0]],
  [0.295, [0.441, 0, 0]],
  [0.297, [0.447, 0, 0]],
  [0.299, [0.447, 0, 0]],
  [0.301, [0.453, 0, 0]],
  [0.303, [0.453, 0, 0]],
  [0.305, [0.459, 0, 0]],
  [0.307, [0.459, 0, 0]],
  [0.309, [0.465, 0, 0]],
  [0.311, [0.465, 0, 0]],
  [0.313, [0.471, 0, 0]],
  [0.315, [0.471, 0, 0]],
  [0.317, [0.476, 0, 0]],
  [0.319, [0.476, 0, 0]],
  [0.321, [0.482, 0, 0]],
  [0.323, [0.482, 0, 0]],
  [0.325, [0.488, 0, 0]],
  [0.327, [0.488, 0, 0]],
  [0.329, [0.494, 0, 0]],
  [0.331, [0.494, 0, 0]],
  [0.333, [0.5, 0, 0]],
  [0.335, [0.5, 0, 0]],
  [0.337, [0.506, 0, 0]],
  [0.339, [0.506, 0, 0]],
  [0.341, [0.512, 0, 0]],
  [0.342, [0.512, 0, 0]],
  [0.344, [0.518, 0, 0]],
  [0.346, [0.518, 0, 0]],
  [0.348, [0.524, 0, 0]],
  [0.35, [0.524, 0, 0]],
  [0.352, [0.529, 0, 0]],
  [0.354, [0.529, 0, 0]],
  [0.356, [0.535, 0, 0]],
  [0.358, [0.535, 0, 0]],
  [0.36, [0.541, 0, 0]],
  [0.362, [0.541, 0, 0]],
  [0.364, [0.547, 0, 0]],
  [0.366, [0.547, 0, 0]],
  [0.368, [0.553, 0, 0]],
  [0.37, [0.553, 0, 0]],
  [0.372, [0.559, 0, 0]],
  [0.374, [0.559, 0, 0]],
  [0.376, [0.565, 0, 0]],
  [0.378, [0.565, 0, 0]],
  [0.38, [0.571, 0, 0]],
  [0.382, [0.571, 0, 0]],
  [0.384, [0.576, 0, 0]],
  [0.386, [0.576, 0, 0]],
  [0.387, [0.582, 0, 0]],
  [0.389, [0.582, 0, 0]],
  [0.391, [0.588, 0, 0]],
  [0.393, [0.588, 0, 0]],
  [0.395, [0.594, 0, 0]],
  [0.397, [0.594, 0, 0]],
  [0.399, [0.6, 0, 0]],
  [0.401, [0.6, 0, 0]],
  [0.403, [0.606, 0, 0]],
  [0.405, [0.606, 0, 0]],
  [0.407, [0.612, 0, 0]],
  [0.409, [0.612, 0, 0]],
  [0.411, [0.618, 0, 0]],
  [0.413, [0.618, 0, 0]],
  [0.415, [0.624, 0, 0]],
  [0.417, [0.624, 0, 0]],
  [0.419, [0.629, 0, 0]],
  [0.421, [0.629, 0, 0]],
  [0.423, [0.635, 0, 0]],
  [0.425, [0.635, 0, 0]],
  [0.427, [0.641, 0, 0]],
  [0.429, [0.641, 0, 0]],
  [0.431, [0.647, 0, 0]],
  [0.432, [0.647, 0, 0]],
  [0.434, [0.653, 0, 0]],
  [0.436, [0.653, 0, 0]],
  [0.438, [0.659, 0, 0]],
  [0.44, [0.659, 0, 0]],
  [0.442, [0.665, 0, 0]],
  [0.444, [0.665, 0, 0]],
  [0.446, [0.671, 0, 0]],
  [0.448, [0.671, 0, 0]],
  [0.45, [0.676, 0, 0]],
  [0.452, [0.676, 0, 0]],
  [0.454, [0.682, 0, 0]],
  [0.456, [0.682, 0, 0]],
  [0.458, [0.688, 0, 0]],
  [0.46, [0.688, 0, 0]],
  [0.462, [0.694, 0, 0]],
  [0.464, [0.694, 0, 0]],
  [0.466, [0.7, 0, 0]],
  [0.468, [0.7, 0, 0]],
  [0.47, [0.706, 0, 0]],
  [0.472, [0.706, 0, 0]],
  [0.474, [0.712, 0, 0]],
  [0.476, [0.712, 0, 0]],
  [0.477, [0.718, 0, 0]],
  [0.479, [0.718, 0, 0]],
  [0.481, [0.724, 0, 0]],
  [0.483, [0.724, 0, 0]],
  [0.485, [0.729, 0, 0]],
  [0.487, [0.729, 0, 0]],
  [0.489, [0.735, 0, 0]],
  [0.491, [0.735, 0, 0]],
  [0.493, [0.741, 0, 0]],
  [0.495, [0.741, 0, 0]],
  [0.497, [0.747, 0, 0]],
  [0.499, [0.747, 0, 0]],
  [0.501, [0.753, 4e-3, 0]],
  [0.503, [0.753, 4e-3, 0]],
  [0.505, [0.759, 0.012, 0]],
  [0.507, [0.759, 0.012, 0]],
  [0.509, [0.765, 0.02, 0]],
  [0.511, [0.765, 0.02, 0]],
  [0.513, [0.771, 0.027, 0]],
  [0.515, [0.771, 0.027, 0]],
  [0.517, [0.776, 0.035, 0]],
  [0.519, [0.776, 0.035, 0]],
  [0.521, [0.782, 0.043, 0]],
  [0.523, [0.782, 0.043, 0]],
  [0.524, [0.788, 0.051, 0]],
  [0.526, [0.788, 0.051, 0]],
  [0.528, [0.794, 0.059, 0]],
  [0.53, [0.794, 0.059, 0]],
  [0.532, [0.8, 0.067, 0]],
  [0.534, [0.8, 0.067, 0]],
  [0.536, [0.806, 0.075, 0]],
  [0.538, [0.806, 0.075, 0]],
  [0.54, [0.812, 0.082, 0]],
  [0.542, [0.812, 0.082, 0]],
  [0.544, [0.818, 0.09, 0]],
  [0.546, [0.818, 0.09, 0]],
  [0.548, [0.824, 0.098, 0]],
  [0.55, [0.824, 0.098, 0]],
  [0.552, [0.829, 0.106, 0]],
  [0.554, [0.829, 0.106, 0]],
  [0.556, [0.835, 0.114, 0]],
  [0.558, [0.835, 0.114, 0]],
  [0.56, [0.841, 0.122, 0]],
  [0.562, [0.841, 0.122, 0]],
  [0.564, [0.847, 0.129, 0]],
  [0.566, [0.847, 0.129, 0]],
  [0.568, [0.853, 0.137, 0]],
  [0.569, [0.853, 0.137, 0]],
  [0.571, [0.859, 0.145, 0]],
  [0.573, [0.859, 0.145, 0]],
  [0.575, [0.865, 0.153, 0]],
  [0.577, [0.865, 0.153, 0]],
  [0.579, [0.871, 0.161, 0]],
  [0.581, [0.871, 0.161, 0]],
  [0.583, [0.876, 0.169, 0]],
  [0.585, [0.876, 0.169, 0]],
  [0.587, [0.882, 0.176, 0]],
  [0.589, [0.882, 0.176, 0]],
  [0.591, [0.888, 0.184, 0]],
  [0.593, [0.888, 0.184, 0]],
  [0.595, [0.894, 0.192, 0]],
  [0.597, [0.894, 0.192, 0]],
  [0.599, [0.9, 0.2, 0]],
  [0.601, [0.9, 0.2, 0]],
  [0.603, [0.906, 0.208, 0]],
  [0.605, [0.906, 0.208, 0]],
  [0.607, [0.912, 0.216, 0]],
  [0.609, [0.912, 0.216, 0]],
  [0.611, [0.918, 0.224, 0]],
  [0.613, [0.918, 0.224, 0]],
  [0.614, [0.924, 0.231, 0]],
  [0.616, [0.924, 0.231, 0]],
  [0.618, [0.929, 0.239, 0]],
  [0.62, [0.929, 0.239, 0]],
  [0.622, [0.935, 0.247, 0]],
  [0.624, [0.935, 0.247, 0]],
  [0.626, [0.941, 0.255, 0]],
  [0.628, [0.941, 0.255, 0]],
  [0.63, [0.947, 0.263, 0]],
  [0.632, [0.947, 0.263, 0]],
  [0.634, [0.953, 0.271, 0]],
  [0.636, [0.953, 0.271, 0]],
  [0.638, [0.959, 0.278, 0]],
  [0.64, [0.959, 0.278, 0]],
  [0.642, [0.965, 0.286, 0]],
  [0.644, [0.965, 0.286, 0]],
  [0.646, [0.971, 0.294, 0]],
  [0.648, [0.971, 0.294, 0]],
  [0.65, [0.976, 0.302, 0]],
  [0.652, [0.976, 0.302, 0]],
  [0.654, [0.982, 0.31, 0]],
  [0.656, [0.982, 0.31, 0]],
  [0.658, [0.988, 0.318, 0]],
  [0.659, [0.988, 0.318, 0]],
  [0.661, [0.994, 0.325, 0]],
  [0.663, [0.994, 0.325, 0]],
  [0.665, [1, 0.333, 0]],
  [0.667, [1, 0.333, 0]],
  [0.669, [1, 0.341, 0]],
  [0.671, [1, 0.341, 0]],
  [0.673, [1, 0.349, 0]],
  [0.675, [1, 0.349, 0]],
  [0.677, [1, 0.357, 0]],
  [0.679, [1, 0.357, 0]],
  [0.681, [1, 0.365, 0]],
  [0.683, [1, 0.365, 0]],
  [0.685, [1, 0.373, 0]],
  [0.687, [1, 0.373, 0]],
  [0.689, [1, 0.38, 0]],
  [0.691, [1, 0.38, 0]],
  [0.693, [1, 0.388, 0]],
  [0.695, [1, 0.388, 0]],
  [0.697, [1, 0.396, 0]],
  [0.699, [1, 0.396, 0]],
  [0.701, [1, 0.404, 0]],
  [0.703, [1, 0.404, 0]],
  [0.705, [1, 0.412, 0]],
  [0.706, [1, 0.412, 0]],
  [0.708, [1, 0.42, 0]],
  [0.71, [1, 0.42, 0]],
  [0.712, [1, 0.427, 0]],
  [0.714, [1, 0.427, 0]],
  [0.716, [1, 0.435, 0]],
  [0.718, [1, 0.435, 0]],
  [0.72, [1, 0.443, 0]],
  [0.722, [1, 0.443, 0]],
  [0.724, [1, 0.451, 0]],
  [0.726, [1, 0.451, 0]],
  [0.728, [1, 0.459, 0]],
  [0.73, [1, 0.459, 0]],
  [0.732, [1, 0.467, 0]],
  [0.734, [1, 0.467, 0]],
  [0.736, [1, 0.475, 0]],
  [0.738, [1, 0.475, 0]],
  [0.74, [1, 0.482, 0]],
  [0.742, [1, 0.482, 0]],
  [0.744, [1, 0.49, 0]],
  [0.746, [1, 0.49, 0]],
  [0.748, [1, 0.498, 0]],
  [0.75, [1, 0.498, 0]],
  [0.751, [1, 0.506, 0.012]],
  [0.753, [1, 0.506, 0.012]],
  [0.755, [1, 0.514, 0.027]],
  [0.757, [1, 0.514, 0.027]],
  [0.759, [1, 0.522, 0.043]],
  [0.761, [1, 0.522, 0.043]],
  [0.763, [1, 0.529, 0.059]],
  [0.765, [1, 0.529, 0.059]],
  [0.767, [1, 0.537, 0.075]],
  [0.769, [1, 0.537, 0.075]],
  [0.771, [1, 0.545, 0.09]],
  [0.773, [1, 0.545, 0.09]],
  [0.775, [1, 0.553, 0.106]],
  [0.777, [1, 0.553, 0.106]],
  [0.779, [1, 0.561, 0.122]],
  [0.781, [1, 0.561, 0.122]],
  [0.783, [1, 0.569, 0.137]],
  [0.785, [1, 0.569, 0.137]],
  [0.787, [1, 0.576, 0.153]],
  [0.789, [1, 0.576, 0.153]],
  [0.791, [1, 0.584, 0.169]],
  [0.793, [1, 0.584, 0.169]],
  [0.795, [1, 0.592, 0.184]],
  [0.796, [1, 0.592, 0.184]],
  [0.798, [1, 0.6, 0.2]],
  [0.8, [1, 0.6, 0.2]],
  [0.802, [1, 0.608, 0.216]],
  [0.804, [1, 0.608, 0.216]],
  [0.806, [1, 0.616, 0.231]],
  [0.808, [1, 0.616, 0.231]],
  [0.81, [1, 0.624, 0.247]],
  [0.812, [1, 0.624, 0.247]],
  [0.814, [1, 0.631, 0.263]],
  [0.816, [1, 0.631, 0.263]],
  [0.818, [1, 0.639, 0.278]],
  [0.82, [1, 0.639, 0.278]],
  [0.822, [1, 0.647, 0.294]],
  [0.824, [1, 0.647, 0.294]],
  [0.826, [1, 0.655, 0.31]],
  [0.828, [1, 0.655, 0.31]],
  [0.83, [1, 0.663, 0.325]],
  [0.832, [1, 0.663, 0.325]],
  [0.834, [1, 0.671, 0.341]],
  [0.836, [1, 0.671, 0.341]],
  [0.838, [1, 0.678, 0.357]],
  [0.84, [1, 0.678, 0.357]],
  [0.841, [1, 0.686, 0.373]],
  [0.843, [1, 0.686, 0.373]],
  [0.845, [1, 0.694, 0.388]],
  [0.847, [1, 0.694, 0.388]],
  [0.849, [1, 0.702, 0.404]],
  [0.851, [1, 0.702, 0.404]],
  [0.853, [1, 0.71, 0.42]],
  [0.855, [1, 0.71, 0.42]],
  [0.857, [1, 0.718, 0.435]],
  [0.859, [1, 0.718, 0.435]],
  [0.861, [1, 0.725, 0.451]],
  [0.863, [1, 0.725, 0.451]],
  [0.865, [1, 0.733, 0.467]],
  [0.867, [1, 0.733, 0.467]],
  [0.869, [1, 0.741, 0.482]],
  [0.871, [1, 0.741, 0.482]],
  [0.873, [1, 0.749, 0.498]],
  [0.875, [1, 0.749, 0.498]],
  [0.877, [1, 0.757, 0.514]],
  [0.879, [1, 0.757, 0.514]],
  [0.881, [1, 0.765, 0.529]],
  [0.883, [1, 0.765, 0.529]],
  [0.885, [1, 0.773, 0.545]],
  [0.886, [1, 0.773, 0.545]],
  [0.888, [1, 0.78, 0.561]],
  [0.89, [1, 0.78, 0.561]],
  [0.892, [1, 0.788, 0.576]],
  [0.894, [1, 0.788, 0.576]],
  [0.896, [1, 0.796, 0.592]],
  [0.898, [1, 0.796, 0.592]],
  [0.9, [1, 0.804, 0.608]],
  [0.902, [1, 0.804, 0.608]],
  [0.904, [1, 0.812, 0.624]],
  [0.906, [1, 0.812, 0.624]],
  [0.908, [1, 0.82, 0.639]],
  [0.91, [1, 0.82, 0.639]],
  [0.912, [1, 0.827, 0.655]],
  [0.914, [1, 0.827, 0.655]],
  [0.916, [1, 0.835, 0.671]],
  [0.918, [1, 0.835, 0.671]],
  [0.92, [1, 0.843, 0.686]],
  [0.922, [1, 0.843, 0.686]],
  [0.924, [1, 0.851, 0.702]],
  [0.926, [1, 0.851, 0.702]],
  [0.928, [1, 0.859, 0.718]],
  [0.93, [1, 0.859, 0.718]],
  [0.932, [1, 0.867, 0.733]],
  [0.933, [1, 0.867, 0.733]],
  [0.935, [1, 0.875, 0.749]],
  [0.937, [1, 0.875, 0.749]],
  [0.939, [1, 0.882, 0.765]],
  [0.941, [1, 0.882, 0.765]],
  [0.943, [1, 0.89, 0.78]],
  [0.945, [1, 0.89, 0.78]],
  [0.947, [1, 0.898, 0.796]],
  [0.949, [1, 0.898, 0.796]],
  [0.951, [1, 0.906, 0.812]],
  [0.953, [1, 0.906, 0.812]],
  [0.955, [1, 0.914, 0.827]],
  [0.957, [1, 0.914, 0.827]],
  [0.959, [1, 0.922, 0.843]],
  [0.961, [1, 0.922, 0.843]],
  [0.963, [1, 0.929, 0.859]],
  [0.965, [1, 0.929, 0.859]],
  [0.967, [1, 0.937, 0.875]],
  [0.969, [1, 0.937, 0.875]],
  [0.971, [1, 0.945, 0.89]],
  [0.973, [1, 0.945, 0.89]],
  [0.975, [1, 0.953, 0.906]],
  [0.977, [1, 0.953, 0.906]],
  [0.978, [1, 0.961, 0.922]],
  [0.98, [1, 0.961, 0.922]],
  [0.982, [1, 0.969, 0.937]],
  [0.984, [1, 0.969, 0.937]],
  [0.986, [1, 0.976, 0.953]],
  [0.988, [1, 0.976, 0.953]],
  [0.99, [1, 0.984, 0.969]],
  [0.992, [1, 0.984, 0.969]],
  [0.994, [1, 0.992, 0.984]],
  [0.996, [1, 0.992, 0.984]],
  [0.998, [1, 1, 1]],
  [1, [1, 1, 1]]
], Cp = [
  [0, [0, 0, 0]],
  [2e-3, [0, 0, 0]],
  [4e-3, [4e-3, 4e-3, 4e-3]],
  [6e-3, [4e-3, 4e-3, 4e-3]],
  [8e-3, [8e-3, 8e-3, 8e-3]],
  [0.01, [8e-3, 8e-3, 8e-3]],
  [0.012, [0.012, 0.012, 0.012]],
  [0.014, [0.012, 0.012, 0.012]],
  [0.016, [0.016, 0.016, 0.016]],
  [0.018, [0.016, 0.016, 0.016]],
  [0.02, [0.02, 0.02, 0.02]],
  [0.022, [0.02, 0.02, 0.02]],
  [0.023, [0.024, 0.024, 0.024]],
  [0.025, [0.024, 0.024, 0.024]],
  [0.027, [0.027, 0.027, 0.027]],
  [0.029, [0.027, 0.027, 0.027]],
  [0.031, [0.031, 0.031, 0.031]],
  [0.033, [0.031, 0.031, 0.031]],
  [0.035, [0.035, 0.035, 0.035]],
  [0.037, [0.035, 0.035, 0.035]],
  [0.039, [0.039, 0.039, 0.039]],
  [0.041, [0.039, 0.039, 0.039]],
  [0.043, [0.043, 0.043, 0.043]],
  [0.045, [0.043, 0.043, 0.043]],
  [0.047, [0.047, 0.047, 0.047]],
  [0.049, [0.047, 0.047, 0.047]],
  [0.051, [0.051, 0.051, 0.051]],
  [0.053, [0.051, 0.051, 0.051]],
  [0.055, [0.055, 0.055, 0.055]],
  [0.057, [0.055, 0.055, 0.055]],
  [0.059, [0.059, 0.059, 0.059]],
  [0.061, [0.059, 0.059, 0.059]],
  [0.063, [0.063, 0.063, 0.063]],
  [0.065, [0.063, 0.063, 0.063]],
  [0.067, [0.067, 0.067, 0.067]],
  [0.068, [0.067, 0.067, 0.067]],
  [0.07, [0.071, 0.071, 0.071]],
  [0.072, [0.071, 0.071, 0.071]],
  [0.074, [0.075, 0.075, 0.075]],
  [0.076, [0.075, 0.075, 0.075]],
  [0.078, [0.078, 0.078, 0.078]],
  [0.08, [0.078, 0.078, 0.078]],
  [0.082, [0.082, 0.082, 0.082]],
  [0.084, [0.082, 0.082, 0.082]],
  [0.086, [0.086, 0.086, 0.086]],
  [0.088, [0.086, 0.086, 0.086]],
  [0.09, [0.09, 0.09, 0.09]],
  [0.092, [0.09, 0.09, 0.09]],
  [0.094, [0.094, 0.094, 0.094]],
  [0.096, [0.094, 0.094, 0.094]],
  [0.098, [0.098, 0.098, 0.098]],
  [0.1, [0.098, 0.098, 0.098]],
  [0.102, [0.102, 0.102, 0.102]],
  [0.104, [0.102, 0.102, 0.102]],
  [0.106, [0.106, 0.106, 0.106]],
  [0.108, [0.106, 0.106, 0.106]],
  [0.11, [0.11, 0.11, 0.11]],
  [0.112, [0.11, 0.11, 0.11]],
  [0.114, [0.114, 0.114, 0.114]],
  [0.115, [0.114, 0.114, 0.114]],
  [0.117, [0.118, 0.118, 0.118]],
  [0.119, [0.118, 0.118, 0.118]],
  [0.121, [0.122, 0.122, 0.122]],
  [0.123, [0.122, 0.122, 0.122]],
  [0.125, [0.125, 0.125, 0.125]],
  [0.127, [0.125, 0.125, 0.125]],
  [0.129, [0.129, 0.129, 0.129]],
  [0.131, [0.129, 0.129, 0.129]],
  [0.133, [0.133, 0.133, 0.133]],
  [0.135, [0.133, 0.133, 0.133]],
  [0.137, [0.137, 0.137, 0.137]],
  [0.139, [0.137, 0.137, 0.137]],
  [0.141, [0.141, 0.141, 0.141]],
  [0.143, [0.141, 0.141, 0.141]],
  [0.145, [0.145, 0.145, 0.145]],
  [0.147, [0.145, 0.145, 0.145]],
  [0.149, [0.149, 0.149, 0.149]],
  [0.151, [0.149, 0.149, 0.149]],
  [0.153, [0.153, 0.153, 0.153]],
  [0.155, [0.153, 0.153, 0.153]],
  [0.157, [0.157, 0.157, 0.157]],
  [0.159, [0.157, 0.157, 0.157]],
  [0.16, [0.161, 0.161, 0.161]],
  [0.162, [0.161, 0.161, 0.161]],
  [0.164, [0.165, 0.165, 0.165]],
  [0.166, [0.165, 0.165, 0.165]],
  [0.168, [0.169, 0.169, 0.169]],
  [0.17, [0.169, 0.169, 0.169]],
  [0.172, [0.173, 0.173, 0.173]],
  [0.174, [0.173, 0.173, 0.173]],
  [0.176, [0.176, 0.176, 0.176]],
  [0.178, [0.176, 0.176, 0.176]],
  [0.18, [0.18, 0.18, 0.18]],
  [0.182, [0.18, 0.18, 0.18]],
  [0.184, [0.184, 0.184, 0.184]],
  [0.186, [0.184, 0.184, 0.184]],
  [0.188, [0.188, 0.188, 0.188]],
  [0.19, [0.188, 0.188, 0.188]],
  [0.192, [0.192, 0.192, 0.192]],
  [0.194, [0.192, 0.192, 0.192]],
  [0.196, [0.196, 0.196, 0.196]],
  [0.198, [0.196, 0.196, 0.196]],
  [0.2, [0.2, 0.2, 0.2]],
  [0.202, [0.2, 0.2, 0.2]],
  [0.204, [0.204, 0.204, 0.204]],
  [0.205, [0.204, 0.204, 0.204]],
  [0.207, [0.208, 0.208, 0.208]],
  [0.209, [0.208, 0.208, 0.208]],
  [0.211, [0.212, 0.212, 0.212]],
  [0.213, [0.212, 0.212, 0.212]],
  [0.215, [0.216, 0.216, 0.216]],
  [0.217, [0.216, 0.216, 0.216]],
  [0.219, [0.22, 0.22, 0.22]],
  [0.221, [0.22, 0.22, 0.22]],
  [0.223, [0.224, 0.224, 0.224]],
  [0.225, [0.224, 0.224, 0.224]],
  [0.227, [0.227, 0.227, 0.227]],
  [0.229, [0.227, 0.227, 0.227]],
  [0.231, [0.231, 0.231, 0.231]],
  [0.233, [0.231, 0.231, 0.231]],
  [0.235, [0.235, 0.235, 0.235]],
  [0.237, [0.235, 0.235, 0.235]],
  [0.239, [0.239, 0.239, 0.239]],
  [0.241, [0.239, 0.239, 0.239]],
  [0.243, [0.243, 0.243, 0.243]],
  [0.245, [0.243, 0.243, 0.243]],
  [0.247, [0.247, 0.247, 0.247]],
  [0.249, [0.247, 0.247, 0.247]],
  [0.25, [0.251, 0.251, 0.251]],
  [0.252, [0.251, 0.251, 0.251]],
  [0.254, [0.255, 0.255, 0.255]],
  [0.256, [0.255, 0.255, 0.255]],
  [0.258, [0.259, 0.259, 0.259]],
  [0.26, [0.259, 0.259, 0.259]],
  [0.262, [0.263, 0.263, 0.263]],
  [0.264, [0.263, 0.263, 0.263]],
  [0.266, [0.267, 0.267, 0.267]],
  [0.268, [0.267, 0.267, 0.267]],
  [0.27, [0.271, 0.271, 0.271]],
  [0.272, [0.271, 0.271, 0.271]],
  [0.274, [0.275, 0.275, 0.275]],
  [0.276, [0.275, 0.275, 0.275]],
  [0.278, [0.278, 0.278, 0.278]],
  [0.28, [0.278, 0.278, 0.278]],
  [0.282, [0.282, 0.282, 0.282]],
  [0.284, [0.282, 0.282, 0.282]],
  [0.286, [0.286, 0.286, 0.286]],
  [0.288, [0.286, 0.286, 0.286]],
  [0.29, [0.29, 0.29, 0.29]],
  [0.292, [0.29, 0.29, 0.29]],
  [0.294, [0.294, 0.294, 0.294]],
  [0.295, [0.294, 0.294, 0.294]],
  [0.297, [0.298, 0.298, 0.298]],
  [0.299, [0.298, 0.298, 0.298]],
  [0.301, [0.302, 0.302, 0.302]],
  [0.303, [0.302, 0.302, 0.302]],
  [0.305, [0.306, 0.306, 0.306]],
  [0.307, [0.306, 0.306, 0.306]],
  [0.309, [0.31, 0.31, 0.31]],
  [0.311, [0.31, 0.31, 0.31]],
  [0.313, [0.314, 0.314, 0.314]],
  [0.315, [0.314, 0.314, 0.314]],
  [0.317, [0.318, 0.318, 0.318]],
  [0.319, [0.318, 0.318, 0.318]],
  [0.321, [0.322, 0.322, 0.322]],
  [0.323, [0.322, 0.322, 0.322]],
  [0.325, [0.325, 0.325, 0.325]],
  [0.327, [0.325, 0.325, 0.325]],
  [0.329, [0.329, 0.329, 0.329]],
  [0.331, [0.329, 0.329, 0.329]],
  [0.333, [0.333, 0.333, 0.333]],
  [0.335, [0.333, 0.333, 0.333]],
  [0.337, [0.337, 0.337, 0.337]],
  [0.339, [0.337, 0.337, 0.337]],
  [0.341, [0.341, 0.341, 0.341]],
  [0.342, [0.341, 0.341, 0.341]],
  [0.344, [0.345, 0.345, 0.345]],
  [0.346, [0.345, 0.345, 0.345]],
  [0.348, [0.349, 0.349, 0.349]],
  [0.35, [0.349, 0.349, 0.349]],
  [0.352, [0.353, 0.353, 0.353]],
  [0.354, [0.353, 0.353, 0.353]],
  [0.356, [0.357, 0.357, 0.357]],
  [0.358, [0.357, 0.357, 0.357]],
  [0.36, [0.361, 0.361, 0.361]],
  [0.362, [0.361, 0.361, 0.361]],
  [0.364, [0.365, 0.365, 0.365]],
  [0.366, [0.365, 0.365, 0.365]],
  [0.368, [0.369, 0.369, 0.369]],
  [0.37, [0.369, 0.369, 0.369]],
  [0.372, [0.373, 0.373, 0.373]],
  [0.374, [0.373, 0.373, 0.373]],
  [0.376, [0.376, 0.376, 0.376]],
  [0.378, [0.376, 0.376, 0.376]],
  [0.38, [0.38, 0.38, 0.38]],
  [0.382, [0.38, 0.38, 0.38]],
  [0.384, [0.384, 0.384, 0.384]],
  [0.386, [0.384, 0.384, 0.384]],
  [0.387, [0.388, 0.388, 0.388]],
  [0.389, [0.388, 0.388, 0.388]],
  [0.391, [0.392, 0.392, 0.392]],
  [0.393, [0.392, 0.392, 0.392]],
  [0.395, [0.396, 0.396, 0.396]],
  [0.397, [0.396, 0.396, 0.396]],
  [0.399, [0.4, 0.4, 0.4]],
  [0.401, [0.4, 0.4, 0.4]],
  [0.403, [0.404, 0.404, 0.404]],
  [0.405, [0.404, 0.404, 0.404]],
  [0.407, [0.408, 0.408, 0.408]],
  [0.409, [0.408, 0.408, 0.408]],
  [0.411, [0.412, 0.412, 0.412]],
  [0.413, [0.412, 0.412, 0.412]],
  [0.415, [0.416, 0.416, 0.416]],
  [0.417, [0.416, 0.416, 0.416]],
  [0.419, [0.42, 0.42, 0.42]],
  [0.421, [0.42, 0.42, 0.42]],
  [0.423, [0.424, 0.424, 0.424]],
  [0.425, [0.424, 0.424, 0.424]],
  [0.427, [0.427, 0.427, 0.427]],
  [0.429, [0.427, 0.427, 0.427]],
  [0.431, [0.431, 0.431, 0.431]],
  [0.432, [0.431, 0.431, 0.431]],
  [0.434, [0.435, 0.435, 0.435]],
  [0.436, [0.435, 0.435, 0.435]],
  [0.438, [0.439, 0.439, 0.439]],
  [0.44, [0.439, 0.439, 0.439]],
  [0.442, [0.443, 0.443, 0.443]],
  [0.444, [0.443, 0.443, 0.443]],
  [0.446, [0.447, 0.447, 0.447]],
  [0.448, [0.447, 0.447, 0.447]],
  [0.45, [0.451, 0.451, 0.451]],
  [0.452, [0.451, 0.451, 0.451]],
  [0.454, [0.455, 0.455, 0.455]],
  [0.456, [0.455, 0.455, 0.455]],
  [0.458, [0.459, 0.459, 0.459]],
  [0.46, [0.459, 0.459, 0.459]],
  [0.462, [0.463, 0.463, 0.463]],
  [0.464, [0.463, 0.463, 0.463]],
  [0.466, [0.467, 0.467, 0.467]],
  [0.468, [0.467, 0.467, 0.467]],
  [0.47, [0.471, 0.471, 0.471]],
  [0.472, [0.471, 0.471, 0.471]],
  [0.474, [0.475, 0.475, 0.475]],
  [0.476, [0.475, 0.475, 0.475]],
  [0.477, [0.478, 0.478, 0.478]],
  [0.479, [0.478, 0.478, 0.478]],
  [0.481, [0.482, 0.482, 0.482]],
  [0.483, [0.482, 0.482, 0.482]],
  [0.485, [0.486, 0.486, 0.486]],
  [0.487, [0.486, 0.486, 0.486]],
  [0.489, [0.49, 0.49, 0.49]],
  [0.491, [0.49, 0.49, 0.49]],
  [0.493, [0.494, 0.494, 0.494]],
  [0.495, [0.494, 0.494, 0.494]],
  [0.497, [0.498, 0.498, 0.498]],
  [0.499, [0.498, 0.498, 0.498]],
  [0.501, [0.502, 0.502, 0.502]],
  [0.503, [0.502, 0.502, 0.502]],
  [0.505, [0.506, 0.506, 0.506]],
  [0.507, [0.506, 0.506, 0.506]],
  [0.509, [0.51, 0.51, 0.51]],
  [0.511, [0.51, 0.51, 0.51]],
  [0.513, [0.514, 0.514, 0.514]],
  [0.515, [0.514, 0.514, 0.514]],
  [0.517, [0.518, 0.518, 0.518]],
  [0.519, [0.518, 0.518, 0.518]],
  [0.521, [0.522, 0.522, 0.522]],
  [0.523, [0.522, 0.522, 0.522]],
  [0.524, [0.525, 0.525, 0.525]],
  [0.526, [0.525, 0.525, 0.525]],
  [0.528, [0.529, 0.529, 0.529]],
  [0.53, [0.529, 0.529, 0.529]],
  [0.532, [0.533, 0.533, 0.533]],
  [0.534, [0.533, 0.533, 0.533]],
  [0.536, [0.537, 0.537, 0.537]],
  [0.538, [0.537, 0.537, 0.537]],
  [0.54, [0.541, 0.541, 0.541]],
  [0.542, [0.541, 0.541, 0.541]],
  [0.544, [0.545, 0.545, 0.545]],
  [0.546, [0.545, 0.545, 0.545]],
  [0.548, [0.549, 0.549, 0.549]],
  [0.55, [0.549, 0.549, 0.549]],
  [0.552, [0.553, 0.553, 0.553]],
  [0.554, [0.553, 0.553, 0.553]],
  [0.556, [0.557, 0.557, 0.557]],
  [0.558, [0.557, 0.557, 0.557]],
  [0.56, [0.561, 0.561, 0.561]],
  [0.562, [0.561, 0.561, 0.561]],
  [0.564, [0.565, 0.565, 0.565]],
  [0.566, [0.565, 0.565, 0.565]],
  [0.568, [0.569, 0.569, 0.569]],
  [0.569, [0.569, 0.569, 0.569]],
  [0.571, [0.573, 0.573, 0.573]],
  [0.573, [0.573, 0.573, 0.573]],
  [0.575, [0.576, 0.576, 0.576]],
  [0.577, [0.576, 0.576, 0.576]],
  [0.579, [0.58, 0.58, 0.58]],
  [0.581, [0.58, 0.58, 0.58]],
  [0.583, [0.584, 0.584, 0.584]],
  [0.585, [0.584, 0.584, 0.584]],
  [0.587, [0.588, 0.588, 0.588]],
  [0.589, [0.588, 0.588, 0.588]],
  [0.591, [0.592, 0.592, 0.592]],
  [0.593, [0.592, 0.592, 0.592]],
  [0.595, [0.596, 0.596, 0.596]],
  [0.597, [0.596, 0.596, 0.596]],
  [0.599, [0.6, 0.6, 0.6]],
  [0.601, [0.6, 0.6, 0.6]],
  [0.603, [0.604, 0.604, 0.604]],
  [0.605, [0.604, 0.604, 0.604]],
  [0.607, [0.608, 0.608, 0.608]],
  [0.609, [0.608, 0.608, 0.608]],
  [0.611, [0.612, 0.612, 0.612]],
  [0.613, [0.612, 0.612, 0.612]],
  [0.614, [0.616, 0.616, 0.616]],
  [0.616, [0.616, 0.616, 0.616]],
  [0.618, [0.62, 0.62, 0.62]],
  [0.62, [0.62, 0.62, 0.62]],
  [0.622, [0.624, 0.624, 0.624]],
  [0.624, [0.624, 0.624, 0.624]],
  [0.626, [0.627, 0.627, 0.627]],
  [0.628, [0.627, 0.627, 0.627]],
  [0.63, [0.631, 0.631, 0.631]],
  [0.632, [0.631, 0.631, 0.631]],
  [0.634, [0.635, 0.635, 0.635]],
  [0.636, [0.635, 0.635, 0.635]],
  [0.638, [0.639, 0.639, 0.639]],
  [0.64, [0.639, 0.639, 0.639]],
  [0.642, [0.643, 0.643, 0.643]],
  [0.644, [0.643, 0.643, 0.643]],
  [0.646, [0.647, 0.647, 0.647]],
  [0.648, [0.647, 0.647, 0.647]],
  [0.65, [0.651, 0.651, 0.651]],
  [0.652, [0.651, 0.651, 0.651]],
  [0.654, [0.655, 0.655, 0.655]],
  [0.656, [0.655, 0.655, 0.655]],
  [0.658, [0.659, 0.659, 0.659]],
  [0.659, [0.659, 0.659, 0.659]],
  [0.661, [0.663, 0.663, 0.663]],
  [0.663, [0.663, 0.663, 0.663]],
  [0.665, [0.667, 0.667, 0.667]],
  [0.667, [0.667, 0.667, 0.667]],
  [0.669, [0.671, 0.671, 0.671]],
  [0.671, [0.671, 0.671, 0.671]],
  [0.673, [0.675, 0.675, 0.675]],
  [0.675, [0.675, 0.675, 0.675]],
  [0.677, [0.678, 0.678, 0.678]],
  [0.679, [0.678, 0.678, 0.678]],
  [0.681, [0.682, 0.682, 0.682]],
  [0.683, [0.682, 0.682, 0.682]],
  [0.685, [0.686, 0.686, 0.686]],
  [0.687, [0.686, 0.686, 0.686]],
  [0.689, [0.69, 0.69, 0.69]],
  [0.691, [0.69, 0.69, 0.69]],
  [0.693, [0.694, 0.694, 0.694]],
  [0.695, [0.694, 0.694, 0.694]],
  [0.697, [0.698, 0.698, 0.698]],
  [0.699, [0.698, 0.698, 0.698]],
  [0.701, [0.702, 0.702, 0.702]],
  [0.703, [0.702, 0.702, 0.702]],
  [0.705, [0.706, 0.706, 0.706]],
  [0.706, [0.706, 0.706, 0.706]],
  [0.708, [0.71, 0.71, 0.71]],
  [0.71, [0.71, 0.71, 0.71]],
  [0.712, [0.714, 0.714, 0.714]],
  [0.714, [0.714, 0.714, 0.714]],
  [0.716, [0.718, 0.718, 0.718]],
  [0.718, [0.718, 0.718, 0.718]],
  [0.72, [0.722, 0.722, 0.722]],
  [0.722, [0.722, 0.722, 0.722]],
  [0.724, [0.725, 0.725, 0.725]],
  [0.726, [0.725, 0.725, 0.725]],
  [0.728, [0.729, 0.729, 0.729]],
  [0.73, [0.729, 0.729, 0.729]],
  [0.732, [0.733, 0.733, 0.733]],
  [0.734, [0.733, 0.733, 0.733]],
  [0.736, [0.737, 0.737, 0.737]],
  [0.738, [0.737, 0.737, 0.737]],
  [0.74, [0.741, 0.741, 0.741]],
  [0.742, [0.741, 0.741, 0.741]],
  [0.744, [0.745, 0.745, 0.745]],
  [0.746, [0.745, 0.745, 0.745]],
  [0.748, [0.749, 0.749, 0.749]],
  [0.75, [0.749, 0.749, 0.749]],
  [0.751, [0.753, 0.753, 0.753]],
  [0.753, [0.753, 0.753, 0.753]],
  [0.755, [0.757, 0.757, 0.757]],
  [0.757, [0.757, 0.757, 0.757]],
  [0.759, [0.761, 0.761, 0.761]],
  [0.761, [0.761, 0.761, 0.761]],
  [0.763, [0.765, 0.765, 0.765]],
  [0.765, [0.765, 0.765, 0.765]],
  [0.767, [0.769, 0.769, 0.769]],
  [0.769, [0.769, 0.769, 0.769]],
  [0.771, [0.773, 0.773, 0.773]],
  [0.773, [0.773, 0.773, 0.773]],
  [0.775, [0.776, 0.776, 0.776]],
  [0.777, [0.776, 0.776, 0.776]],
  [0.779, [0.78, 0.78, 0.78]],
  [0.781, [0.78, 0.78, 0.78]],
  [0.783, [0.784, 0.784, 0.784]],
  [0.785, [0.784, 0.784, 0.784]],
  [0.787, [0.788, 0.788, 0.788]],
  [0.789, [0.788, 0.788, 0.788]],
  [0.791, [0.792, 0.792, 0.792]],
  [0.793, [0.792, 0.792, 0.792]],
  [0.795, [0.796, 0.796, 0.796]],
  [0.796, [0.796, 0.796, 0.796]],
  [0.798, [0.8, 0.8, 0.8]],
  [0.8, [0.8, 0.8, 0.8]],
  [0.802, [0.804, 0.804, 0.804]],
  [0.804, [0.804, 0.804, 0.804]],
  [0.806, [0.808, 0.808, 0.808]],
  [0.808, [0.808, 0.808, 0.808]],
  [0.81, [0.812, 0.812, 0.812]],
  [0.812, [0.812, 0.812, 0.812]],
  [0.814, [0.816, 0.816, 0.816]],
  [0.816, [0.816, 0.816, 0.816]],
  [0.818, [0.82, 0.82, 0.82]],
  [0.82, [0.82, 0.82, 0.82]],
  [0.822, [0.824, 0.824, 0.824]],
  [0.824, [0.824, 0.824, 0.824]],
  [0.826, [0.827, 0.827, 0.827]],
  [0.828, [0.827, 0.827, 0.827]],
  [0.83, [0.831, 0.831, 0.831]],
  [0.832, [0.831, 0.831, 0.831]],
  [0.834, [0.835, 0.835, 0.835]],
  [0.836, [0.835, 0.835, 0.835]],
  [0.838, [0.839, 0.839, 0.839]],
  [0.84, [0.839, 0.839, 0.839]],
  [0.841, [0.843, 0.843, 0.843]],
  [0.843, [0.843, 0.843, 0.843]],
  [0.845, [0.847, 0.847, 0.847]],
  [0.847, [0.847, 0.847, 0.847]],
  [0.849, [0.851, 0.851, 0.851]],
  [0.851, [0.851, 0.851, 0.851]],
  [0.853, [0.855, 0.855, 0.855]],
  [0.855, [0.855, 0.855, 0.855]],
  [0.857, [0.859, 0.859, 0.859]],
  [0.859, [0.859, 0.859, 0.859]],
  [0.861, [0.863, 0.863, 0.863]],
  [0.863, [0.863, 0.863, 0.863]],
  [0.865, [0.867, 0.867, 0.867]],
  [0.867, [0.867, 0.867, 0.867]],
  [0.869, [0.871, 0.871, 0.871]],
  [0.871, [0.871, 0.871, 0.871]],
  [0.873, [0.875, 0.875, 0.875]],
  [0.875, [0.875, 0.875, 0.875]],
  [0.877, [0.878, 0.878, 0.878]],
  [0.879, [0.878, 0.878, 0.878]],
  [0.881, [0.882, 0.882, 0.882]],
  [0.883, [0.882, 0.882, 0.882]],
  [0.885, [0.886, 0.886, 0.886]],
  [0.886, [0.886, 0.886, 0.886]],
  [0.888, [0.89, 0.89, 0.89]],
  [0.89, [0.89, 0.89, 0.89]],
  [0.892, [0.894, 0.894, 0.894]],
  [0.894, [0.894, 0.894, 0.894]],
  [0.896, [0.898, 0.898, 0.898]],
  [0.898, [0.898, 0.898, 0.898]],
  [0.9, [0.902, 0.902, 0.902]],
  [0.902, [0.902, 0.902, 0.902]],
  [0.904, [0.906, 0.906, 0.906]],
  [0.906, [0.906, 0.906, 0.906]],
  [0.908, [0.91, 0.91, 0.91]],
  [0.91, [0.91, 0.91, 0.91]],
  [0.912, [0.914, 0.914, 0.914]],
  [0.914, [0.914, 0.914, 0.914]],
  [0.916, [0.918, 0.918, 0.918]],
  [0.918, [0.918, 0.918, 0.918]],
  [0.92, [0.922, 0.922, 0.922]],
  [0.922, [0.922, 0.922, 0.922]],
  [0.924, [0.925, 0.925, 0.925]],
  [0.926, [0.925, 0.925, 0.925]],
  [0.928, [0.929, 0.929, 0.929]],
  [0.93, [0.929, 0.929, 0.929]],
  [0.932, [0.933, 0.933, 0.933]],
  [0.933, [0.933, 0.933, 0.933]],
  [0.935, [0.937, 0.937, 0.937]],
  [0.937, [0.937, 0.937, 0.937]],
  [0.939, [0.941, 0.941, 0.941]],
  [0.941, [0.941, 0.941, 0.941]],
  [0.943, [0.945, 0.945, 0.945]],
  [0.945, [0.945, 0.945, 0.945]],
  [0.947, [0.949, 0.949, 0.949]],
  [0.949, [0.949, 0.949, 0.949]],
  [0.951, [0.953, 0.953, 0.953]],
  [0.953, [0.953, 0.953, 0.953]],
  [0.955, [0.957, 0.957, 0.957]],
  [0.957, [0.957, 0.957, 0.957]],
  [0.959, [0.961, 0.961, 0.961]],
  [0.961, [0.961, 0.961, 0.961]],
  [0.963, [0.965, 0.965, 0.965]],
  [0.965, [0.965, 0.965, 0.965]],
  [0.967, [0.969, 0.969, 0.969]],
  [0.969, [0.969, 0.969, 0.969]],
  [0.971, [0.973, 0.973, 0.973]],
  [0.973, [0.973, 0.973, 0.973]],
  [0.975, [0.976, 0.976, 0.976]],
  [0.977, [0.976, 0.976, 0.976]],
  [0.978, [0.98, 0.98, 0.98]],
  [0.98, [0.98, 0.98, 0.98]],
  [0.982, [0.984, 0.984, 0.984]],
  [0.984, [0.984, 0.984, 0.984]],
  [0.986, [0.988, 0.988, 0.988]],
  [0.988, [0.988, 0.988, 0.988]],
  [0.99, [0.992, 0.992, 0.992]],
  [0.992, [0.992, 0.992, 0.992]],
  [0.994, [0.996, 0.996, 0.996]],
  [0.996, [0.996, 0.996, 0.996]],
  [0.998, [1, 1, 1]],
  [1, [1, 1, 1]]
], Ip = [
  [0, [0.042, 0, 0]],
  [2e-3, [0.042, 0, 0]],
  [4e-3, [0.052, 0, 0]],
  [6e-3, [0.052, 0, 0]],
  [8e-3, [0.062, 0, 0]],
  [0.01, [0.062, 0, 0]],
  [0.012, [0.072, 0, 0]],
  [0.014, [0.072, 0, 0]],
  [0.016, [0.083, 0, 0]],
  [0.018, [0.083, 0, 0]],
  [0.02, [0.093, 0, 0]],
  [0.022, [0.093, 0, 0]],
  [0.023, [0.103, 0, 0]],
  [0.025, [0.103, 0, 0]],
  [0.027, [0.114, 0, 0]],
  [0.029, [0.114, 0, 0]],
  [0.031, [0.124, 0, 0]],
  [0.033, [0.124, 0, 0]],
  [0.035, [0.134, 0, 0]],
  [0.037, [0.134, 0, 0]],
  [0.039, [0.145, 0, 0]],
  [0.041, [0.145, 0, 0]],
  [0.043, [0.155, 0, 0]],
  [0.045, [0.155, 0, 0]],
  [0.047, [0.165, 0, 0]],
  [0.049, [0.165, 0, 0]],
  [0.051, [0.175, 0, 0]],
  [0.053, [0.175, 0, 0]],
  [0.055, [0.186, 0, 0]],
  [0.057, [0.186, 0, 0]],
  [0.059, [0.196, 0, 0]],
  [0.061, [0.196, 0, 0]],
  [0.063, [0.206, 0, 0]],
  [0.065, [0.206, 0, 0]],
  [0.067, [0.217, 0, 0]],
  [0.068, [0.217, 0, 0]],
  [0.07, [0.227, 0, 0]],
  [0.072, [0.227, 0, 0]],
  [0.074, [0.237, 0, 0]],
  [0.076, [0.237, 0, 0]],
  [0.078, [0.247, 0, 0]],
  [0.08, [0.247, 0, 0]],
  [0.082, [0.258, 0, 0]],
  [0.084, [0.258, 0, 0]],
  [0.086, [0.268, 0, 0]],
  [0.088, [0.268, 0, 0]],
  [0.09, [0.278, 0, 0]],
  [0.092, [0.278, 0, 0]],
  [0.094, [0.289, 0, 0]],
  [0.096, [0.289, 0, 0]],
  [0.098, [0.299, 0, 0]],
  [0.1, [0.299, 0, 0]],
  [0.102, [0.309, 0, 0]],
  [0.104, [0.309, 0, 0]],
  [0.106, [0.32, 0, 0]],
  [0.108, [0.32, 0, 0]],
  [0.11, [0.33, 0, 0]],
  [0.112, [0.33, 0, 0]],
  [0.114, [0.34, 0, 0]],
  [0.115, [0.34, 0, 0]],
  [0.117, [0.35, 0, 0]],
  [0.119, [0.35, 0, 0]],
  [0.121, [0.361, 0, 0]],
  [0.123, [0.361, 0, 0]],
  [0.125, [0.371, 0, 0]],
  [0.127, [0.371, 0, 0]],
  [0.129, [0.381, 0, 0]],
  [0.131, [0.381, 0, 0]],
  [0.133, [0.392, 0, 0]],
  [0.135, [0.392, 0, 0]],
  [0.137, [0.402, 0, 0]],
  [0.139, [0.402, 0, 0]],
  [0.141, [0.412, 0, 0]],
  [0.143, [0.412, 0, 0]],
  [0.145, [0.423, 0, 0]],
  [0.147, [0.423, 0, 0]],
  [0.149, [0.433, 0, 0]],
  [0.151, [0.433, 0, 0]],
  [0.153, [0.443, 0, 0]],
  [0.155, [0.443, 0, 0]],
  [0.157, [0.453, 0, 0]],
  [0.159, [0.453, 0, 0]],
  [0.16, [0.464, 0, 0]],
  [0.162, [0.464, 0, 0]],
  [0.164, [0.474, 0, 0]],
  [0.166, [0.474, 0, 0]],
  [0.168, [0.484, 0, 0]],
  [0.17, [0.484, 0, 0]],
  [0.172, [0.495, 0, 0]],
  [0.174, [0.495, 0, 0]],
  [0.176, [0.505, 0, 0]],
  [0.178, [0.505, 0, 0]],
  [0.18, [0.515, 0, 0]],
  [0.182, [0.515, 0, 0]],
  [0.184, [0.525, 0, 0]],
  [0.186, [0.525, 0, 0]],
  [0.188, [0.536, 0, 0]],
  [0.19, [0.536, 0, 0]],
  [0.192, [0.546, 0, 0]],
  [0.194, [0.546, 0, 0]],
  [0.196, [0.556, 0, 0]],
  [0.198, [0.556, 0, 0]],
  [0.2, [0.567, 0, 0]],
  [0.202, [0.567, 0, 0]],
  [0.204, [0.577, 0, 0]],
  [0.205, [0.577, 0, 0]],
  [0.207, [0.587, 0, 0]],
  [0.209, [0.587, 0, 0]],
  [0.211, [0.598, 0, 0]],
  [0.213, [0.598, 0, 0]],
  [0.215, [0.608, 0, 0]],
  [0.217, [0.608, 0, 0]],
  [0.219, [0.618, 0, 0]],
  [0.221, [0.618, 0, 0]],
  [0.223, [0.628, 0, 0]],
  [0.225, [0.628, 0, 0]],
  [0.227, [0.639, 0, 0]],
  [0.229, [0.639, 0, 0]],
  [0.231, [0.649, 0, 0]],
  [0.233, [0.649, 0, 0]],
  [0.235, [0.659, 0, 0]],
  [0.237, [0.659, 0, 0]],
  [0.239, [0.67, 0, 0]],
  [0.241, [0.67, 0, 0]],
  [0.243, [0.68, 0, 0]],
  [0.245, [0.68, 0, 0]],
  [0.247, [0.69, 0, 0]],
  [0.249, [0.69, 0, 0]],
  [0.25, [0.7, 0, 0]],
  [0.252, [0.7, 0, 0]],
  [0.254, [0.711, 0, 0]],
  [0.256, [0.711, 0, 0]],
  [0.258, [0.721, 0, 0]],
  [0.26, [0.721, 0, 0]],
  [0.262, [0.731, 0, 0]],
  [0.264, [0.731, 0, 0]],
  [0.266, [0.742, 0, 0]],
  [0.268, [0.742, 0, 0]],
  [0.27, [0.752, 0, 0]],
  [0.272, [0.752, 0, 0]],
  [0.274, [0.762, 0, 0]],
  [0.276, [0.762, 0, 0]],
  [0.278, [0.773, 0, 0]],
  [0.28, [0.773, 0, 0]],
  [0.282, [0.783, 0, 0]],
  [0.284, [0.783, 0, 0]],
  [0.286, [0.793, 0, 0]],
  [0.288, [0.793, 0, 0]],
  [0.29, [0.803, 0, 0]],
  [0.292, [0.803, 0, 0]],
  [0.294, [0.814, 0, 0]],
  [0.295, [0.814, 0, 0]],
  [0.297, [0.824, 0, 0]],
  [0.299, [0.824, 0, 0]],
  [0.301, [0.834, 0, 0]],
  [0.303, [0.834, 0, 0]],
  [0.305, [0.845, 0, 0]],
  [0.307, [0.845, 0, 0]],
  [0.309, [0.855, 0, 0]],
  [0.311, [0.855, 0, 0]],
  [0.313, [0.865, 0, 0]],
  [0.315, [0.865, 0, 0]],
  [0.317, [0.875, 0, 0]],
  [0.319, [0.875, 0, 0]],
  [0.321, [0.886, 0, 0]],
  [0.323, [0.886, 0, 0]],
  [0.325, [0.896, 0, 0]],
  [0.327, [0.896, 0, 0]],
  [0.329, [0.906, 0, 0]],
  [0.331, [0.906, 0, 0]],
  [0.333, [0.917, 0, 0]],
  [0.335, [0.917, 0, 0]],
  [0.337, [0.927, 0, 0]],
  [0.339, [0.927, 0, 0]],
  [0.341, [0.937, 0, 0]],
  [0.342, [0.937, 0, 0]],
  [0.344, [0.948, 0, 0]],
  [0.346, [0.948, 0, 0]],
  [0.348, [0.958, 0, 0]],
  [0.35, [0.958, 0, 0]],
  [0.352, [0.968, 0, 0]],
  [0.354, [0.968, 0, 0]],
  [0.356, [0.978, 0, 0]],
  [0.358, [0.978, 0, 0]],
  [0.36, [0.989, 0, 0]],
  [0.362, [0.989, 0, 0]],
  [0.364, [0.999, 0, 0]],
  [0.366, [0.999, 0, 0]],
  [0.368, [1, 9e-3, 0]],
  [0.37, [1, 9e-3, 0]],
  [0.372, [1, 0.02, 0]],
  [0.374, [1, 0.02, 0]],
  [0.376, [1, 0.03, 0]],
  [0.378, [1, 0.03, 0]],
  [0.38, [1, 0.04, 0]],
  [0.382, [1, 0.04, 0]],
  [0.384, [1, 0.05, 0]],
  [0.386, [1, 0.05, 0]],
  [0.387, [1, 0.061, 0]],
  [0.389, [1, 0.061, 0]],
  [0.391, [1, 0.071, 0]],
  [0.393, [1, 0.071, 0]],
  [0.395, [1, 0.081, 0]],
  [0.397, [1, 0.081, 0]],
  [0.399, [1, 0.092, 0]],
  [0.401, [1, 0.092, 0]],
  [0.403, [1, 0.102, 0]],
  [0.405, [1, 0.102, 0]],
  [0.407, [1, 0.112, 0]],
  [0.409, [1, 0.112, 0]],
  [0.411, [1, 0.123, 0]],
  [0.413, [1, 0.123, 0]],
  [0.415, [1, 0.133, 0]],
  [0.417, [1, 0.133, 0]],
  [0.419, [1, 0.143, 0]],
  [0.421, [1, 0.143, 0]],
  [0.423, [1, 0.153, 0]],
  [0.425, [1, 0.153, 0]],
  [0.427, [1, 0.164, 0]],
  [0.429, [1, 0.164, 0]],
  [0.431, [1, 0.174, 0]],
  [0.432, [1, 0.174, 0]],
  [0.434, [1, 0.184, 0]],
  [0.436, [1, 0.184, 0]],
  [0.438, [1, 0.195, 0]],
  [0.44, [1, 0.195, 0]],
  [0.442, [1, 0.205, 0]],
  [0.444, [1, 0.205, 0]],
  [0.446, [1, 0.215, 0]],
  [0.448, [1, 0.215, 0]],
  [0.45, [1, 0.225, 0]],
  [0.452, [1, 0.225, 0]],
  [0.454, [1, 0.236, 0]],
  [0.456, [1, 0.236, 0]],
  [0.458, [1, 0.246, 0]],
  [0.46, [1, 0.246, 0]],
  [0.462, [1, 0.256, 0]],
  [0.464, [1, 0.256, 0]],
  [0.466, [1, 0.267, 0]],
  [0.468, [1, 0.267, 0]],
  [0.47, [1, 0.277, 0]],
  [0.472, [1, 0.277, 0]],
  [0.474, [1, 0.287, 0]],
  [0.476, [1, 0.287, 0]],
  [0.477, [1, 0.298, 0]],
  [0.479, [1, 0.298, 0]],
  [0.481, [1, 0.308, 0]],
  [0.483, [1, 0.308, 0]],
  [0.485, [1, 0.318, 0]],
  [0.487, [1, 0.318, 0]],
  [0.489, [1, 0.328, 0]],
  [0.491, [1, 0.328, 0]],
  [0.493, [1, 0.339, 0]],
  [0.495, [1, 0.339, 0]],
  [0.497, [1, 0.349, 0]],
  [0.499, [1, 0.349, 0]],
  [0.501, [1, 0.359, 0]],
  [0.503, [1, 0.359, 0]],
  [0.505, [1, 0.37, 0]],
  [0.507, [1, 0.37, 0]],
  [0.509, [1, 0.38, 0]],
  [0.511, [1, 0.38, 0]],
  [0.513, [1, 0.39, 0]],
  [0.515, [1, 0.39, 0]],
  [0.517, [1, 0.4, 0]],
  [0.519, [1, 0.4, 0]],
  [0.521, [1, 0.411, 0]],
  [0.523, [1, 0.411, 0]],
  [0.524, [1, 0.421, 0]],
  [0.526, [1, 0.421, 0]],
  [0.528, [1, 0.431, 0]],
  [0.53, [1, 0.431, 0]],
  [0.532, [1, 0.442, 0]],
  [0.534, [1, 0.442, 0]],
  [0.536, [1, 0.452, 0]],
  [0.538, [1, 0.452, 0]],
  [0.54, [1, 0.462, 0]],
  [0.542, [1, 0.462, 0]],
  [0.544, [1, 0.473, 0]],
  [0.546, [1, 0.473, 0]],
  [0.548, [1, 0.483, 0]],
  [0.55, [1, 0.483, 0]],
  [0.552, [1, 0.493, 0]],
  [0.554, [1, 0.493, 0]],
  [0.556, [1, 0.503, 0]],
  [0.558, [1, 0.503, 0]],
  [0.56, [1, 0.514, 0]],
  [0.562, [1, 0.514, 0]],
  [0.564, [1, 0.524, 0]],
  [0.566, [1, 0.524, 0]],
  [0.568, [1, 0.534, 0]],
  [0.569, [1, 0.534, 0]],
  [0.571, [1, 0.545, 0]],
  [0.573, [1, 0.545, 0]],
  [0.575, [1, 0.555, 0]],
  [0.577, [1, 0.555, 0]],
  [0.579, [1, 0.565, 0]],
  [0.581, [1, 0.565, 0]],
  [0.583, [1, 0.575, 0]],
  [0.585, [1, 0.575, 0]],
  [0.587, [1, 0.586, 0]],
  [0.589, [1, 0.586, 0]],
  [0.591, [1, 0.596, 0]],
  [0.593, [1, 0.596, 0]],
  [0.595, [1, 0.606, 0]],
  [0.597, [1, 0.606, 0]],
  [0.599, [1, 0.617, 0]],
  [0.601, [1, 0.617, 0]],
  [0.603, [1, 0.627, 0]],
  [0.605, [1, 0.627, 0]],
  [0.607, [1, 0.637, 0]],
  [0.609, [1, 0.637, 0]],
  [0.611, [1, 0.648, 0]],
  [0.613, [1, 0.648, 0]],
  [0.614, [1, 0.658, 0]],
  [0.616, [1, 0.658, 0]],
  [0.618, [1, 0.668, 0]],
  [0.62, [1, 0.668, 0]],
  [0.622, [1, 0.678, 0]],
  [0.624, [1, 0.678, 0]],
  [0.626, [1, 0.689, 0]],
  [0.628, [1, 0.689, 0]],
  [0.63, [1, 0.699, 0]],
  [0.632, [1, 0.699, 0]],
  [0.634, [1, 0.709, 0]],
  [0.636, [1, 0.709, 0]],
  [0.638, [1, 0.72, 0]],
  [0.64, [1, 0.72, 0]],
  [0.642, [1, 0.73, 0]],
  [0.644, [1, 0.73, 0]],
  [0.646, [1, 0.74, 0]],
  [0.648, [1, 0.74, 0]],
  [0.65, [1, 0.75, 0]],
  [0.652, [1, 0.75, 0]],
  [0.654, [1, 0.761, 0]],
  [0.656, [1, 0.761, 0]],
  [0.658, [1, 0.771, 0]],
  [0.659, [1, 0.771, 0]],
  [0.661, [1, 0.781, 0]],
  [0.663, [1, 0.781, 0]],
  [0.665, [1, 0.792, 0]],
  [0.667, [1, 0.792, 0]],
  [0.669, [1, 0.802, 0]],
  [0.671, [1, 0.802, 0]],
  [0.673, [1, 0.812, 0]],
  [0.675, [1, 0.812, 0]],
  [0.677, [1, 0.823, 0]],
  [0.679, [1, 0.823, 0]],
  [0.681, [1, 0.833, 0]],
  [0.683, [1, 0.833, 0]],
  [0.685, [1, 0.843, 0]],
  [0.687, [1, 0.843, 0]],
  [0.689, [1, 0.853, 0]],
  [0.691, [1, 0.853, 0]],
  [0.693, [1, 0.864, 0]],
  [0.695, [1, 0.864, 0]],
  [0.697, [1, 0.874, 0]],
  [0.699, [1, 0.874, 0]],
  [0.701, [1, 0.884, 0]],
  [0.703, [1, 0.884, 0]],
  [0.705, [1, 0.895, 0]],
  [0.706, [1, 0.895, 0]],
  [0.708, [1, 0.905, 0]],
  [0.71, [1, 0.905, 0]],
  [0.712, [1, 0.915, 0]],
  [0.714, [1, 0.915, 0]],
  [0.716, [1, 0.925, 0]],
  [0.718, [1, 0.925, 0]],
  [0.72, [1, 0.936, 0]],
  [0.722, [1, 0.936, 0]],
  [0.724, [1, 0.946, 0]],
  [0.726, [1, 0.946, 0]],
  [0.728, [1, 0.956, 0]],
  [0.73, [1, 0.956, 0]],
  [0.732, [1, 0.967, 0]],
  [0.734, [1, 0.967, 0]],
  [0.736, [1, 0.977, 0]],
  [0.738, [1, 0.977, 0]],
  [0.74, [1, 0.987, 0]],
  [0.742, [1, 0.987, 0]],
  [0.744, [1, 0.998, 0]],
  [0.746, [1, 0.998, 0]],
  [0.748, [1, 1, 0.012]],
  [0.75, [1, 1, 0.012]],
  [0.751, [1, 1, 0.027]],
  [0.753, [1, 1, 0.027]],
  [0.755, [1, 1, 0.043]],
  [0.757, [1, 1, 0.043]],
  [0.759, [1, 1, 0.058]],
  [0.761, [1, 1, 0.058]],
  [0.763, [1, 1, 0.074]],
  [0.765, [1, 1, 0.074]],
  [0.767, [1, 1, 0.089]],
  [0.769, [1, 1, 0.089]],
  [0.771, [1, 1, 0.104]],
  [0.773, [1, 1, 0.104]],
  [0.775, [1, 1, 0.12]],
  [0.777, [1, 1, 0.12]],
  [0.779, [1, 1, 0.135]],
  [0.781, [1, 1, 0.135]],
  [0.783, [1, 1, 0.151]],
  [0.785, [1, 1, 0.151]],
  [0.787, [1, 1, 0.166]],
  [0.789, [1, 1, 0.166]],
  [0.791, [1, 1, 0.182]],
  [0.793, [1, 1, 0.182]],
  [0.795, [1, 1, 0.197]],
  [0.796, [1, 1, 0.197]],
  [0.798, [1, 1, 0.212]],
  [0.8, [1, 1, 0.212]],
  [0.802, [1, 1, 0.228]],
  [0.804, [1, 1, 0.228]],
  [0.806, [1, 1, 0.243]],
  [0.808, [1, 1, 0.243]],
  [0.81, [1, 1, 0.259]],
  [0.812, [1, 1, 0.259]],
  [0.814, [1, 1, 0.274]],
  [0.816, [1, 1, 0.274]],
  [0.818, [1, 1, 0.29]],
  [0.82, [1, 1, 0.29]],
  [0.822, [1, 1, 0.305]],
  [0.824, [1, 1, 0.305]],
  [0.826, [1, 1, 0.321]],
  [0.828, [1, 1, 0.321]],
  [0.83, [1, 1, 0.336]],
  [0.832, [1, 1, 0.336]],
  [0.834, [1, 1, 0.351]],
  [0.836, [1, 1, 0.351]],
  [0.838, [1, 1, 0.367]],
  [0.84, [1, 1, 0.367]],
  [0.841, [1, 1, 0.382]],
  [0.843, [1, 1, 0.382]],
  [0.845, [1, 1, 0.398]],
  [0.847, [1, 1, 0.398]],
  [0.849, [1, 1, 0.413]],
  [0.851, [1, 1, 0.413]],
  [0.853, [1, 1, 0.429]],
  [0.855, [1, 1, 0.429]],
  [0.857, [1, 1, 0.444]],
  [0.859, [1, 1, 0.444]],
  [0.861, [1, 1, 0.46]],
  [0.863, [1, 1, 0.46]],
  [0.865, [1, 1, 0.475]],
  [0.867, [1, 1, 0.475]],
  [0.869, [1, 1, 0.49]],
  [0.871, [1, 1, 0.49]],
  [0.873, [1, 1, 0.506]],
  [0.875, [1, 1, 0.506]],
  [0.877, [1, 1, 0.521]],
  [0.879, [1, 1, 0.521]],
  [0.881, [1, 1, 0.537]],
  [0.883, [1, 1, 0.537]],
  [0.885, [1, 1, 0.552]],
  [0.886, [1, 1, 0.552]],
  [0.888, [1, 1, 0.568]],
  [0.89, [1, 1, 0.568]],
  [0.892, [1, 1, 0.583]],
  [0.894, [1, 1, 0.583]],
  [0.896, [1, 1, 0.599]],
  [0.898, [1, 1, 0.599]],
  [0.9, [1, 1, 0.614]],
  [0.902, [1, 1, 0.614]],
  [0.904, [1, 1, 0.629]],
  [0.906, [1, 1, 0.629]],
  [0.908, [1, 1, 0.645]],
  [0.91, [1, 1, 0.645]],
  [0.912, [1, 1, 0.66]],
  [0.914, [1, 1, 0.66]],
  [0.916, [1, 1, 0.676]],
  [0.918, [1, 1, 0.676]],
  [0.92, [1, 1, 0.691]],
  [0.922, [1, 1, 0.691]],
  [0.924, [1, 1, 0.707]],
  [0.926, [1, 1, 0.707]],
  [0.928, [1, 1, 0.722]],
  [0.93, [1, 1, 0.722]],
  [0.932, [1, 1, 0.737]],
  [0.933, [1, 1, 0.737]],
  [0.935, [1, 1, 0.753]],
  [0.937, [1, 1, 0.753]],
  [0.939, [1, 1, 0.768]],
  [0.941, [1, 1, 0.768]],
  [0.943, [1, 1, 0.784]],
  [0.945, [1, 1, 0.784]],
  [0.947, [1, 1, 0.799]],
  [0.949, [1, 1, 0.799]],
  [0.951, [1, 1, 0.815]],
  [0.953, [1, 1, 0.815]],
  [0.955, [1, 1, 0.83]],
  [0.957, [1, 1, 0.83]],
  [0.959, [1, 1, 0.846]],
  [0.961, [1, 1, 0.846]],
  [0.963, [1, 1, 0.861]],
  [0.965, [1, 1, 0.861]],
  [0.967, [1, 1, 0.876]],
  [0.969, [1, 1, 0.876]],
  [0.971, [1, 1, 0.892]],
  [0.973, [1, 1, 0.892]],
  [0.975, [1, 1, 0.907]],
  [0.977, [1, 1, 0.907]],
  [0.978, [1, 1, 0.923]],
  [0.98, [1, 1, 0.923]],
  [0.982, [1, 1, 0.938]],
  [0.984, [1, 1, 0.938]],
  [0.986, [1, 1, 0.954]],
  [0.988, [1, 1, 0.954]],
  [0.99, [1, 1, 0.969]],
  [0.992, [1, 1, 0.969]],
  [0.994, [1, 1, 0.985]],
  [0.996, [1, 1, 0.985]],
  [0.998, [1, 1, 1]],
  [1, [1, 1, 1]]
], Lp = [
  [0, [0.118, 0, 0]],
  [2e-3, [0.118, 0, 0]],
  [4e-3, [0.137, 0.025, 0.025]],
  [6e-3, [0.137, 0.025, 0.025]],
  [8e-3, [0.156, 0.051, 0.051]],
  [0.01, [0.156, 0.051, 0.051]],
  [0.012, [0.176, 0.076, 0.076]],
  [0.014, [0.176, 0.076, 0.076]],
  [0.016, [0.195, 0.102, 0.102]],
  [0.018, [0.195, 0.102, 0.102]],
  [0.02, [0.209, 0.113, 0.113]],
  [0.022, [0.209, 0.113, 0.113]],
  [0.023, [0.222, 0.123, 0.123]],
  [0.025, [0.222, 0.123, 0.123]],
  [0.027, [0.236, 0.134, 0.134]],
  [0.029, [0.236, 0.134, 0.134]],
  [0.031, [0.249, 0.144, 0.144]],
  [0.033, [0.249, 0.144, 0.144]],
  [0.035, [0.261, 0.153, 0.153]],
  [0.037, [0.261, 0.153, 0.153]],
  [0.039, [0.272, 0.161, 0.161]],
  [0.041, [0.272, 0.161, 0.161]],
  [0.043, [0.283, 0.169, 0.169]],
  [0.045, [0.283, 0.169, 0.169]],
  [0.047, [0.294, 0.177, 0.177]],
  [0.049, [0.294, 0.177, 0.177]],
  [0.051, [0.304, 0.184, 0.184]],
  [0.053, [0.304, 0.184, 0.184]],
  [0.055, [0.313, 0.191, 0.191]],
  [0.057, [0.313, 0.191, 0.191]],
  [0.059, [0.323, 0.198, 0.198]],
  [0.061, [0.323, 0.198, 0.198]],
  [0.063, [0.332, 0.204, 0.204]],
  [0.065, [0.332, 0.204, 0.204]],
  [0.067, [0.341, 0.211, 0.211]],
  [0.068, [0.341, 0.211, 0.211]],
  [0.07, [0.35, 0.217, 0.217]],
  [0.072, [0.35, 0.217, 0.217]],
  [0.074, [0.358, 0.223, 0.223]],
  [0.076, [0.358, 0.223, 0.223]],
  [0.078, [0.367, 0.229, 0.229]],
  [0.08, [0.367, 0.229, 0.229]],
  [0.082, [0.375, 0.234, 0.234]],
  [0.084, [0.375, 0.234, 0.234]],
  [0.086, [0.383, 0.24, 0.24]],
  [0.088, [0.383, 0.24, 0.24]],
  [0.09, [0.391, 0.245, 0.245]],
  [0.092, [0.391, 0.245, 0.245]],
  [0.094, [0.399, 0.25, 0.25]],
  [0.096, [0.399, 0.25, 0.25]],
  [0.098, [0.406, 0.256, 0.256]],
  [0.1, [0.406, 0.256, 0.256]],
  [0.102, [0.413, 0.261, 0.261]],
  [0.104, [0.413, 0.261, 0.261]],
  [0.106, [0.421, 0.266, 0.266]],
  [0.108, [0.421, 0.266, 0.266]],
  [0.11, [0.428, 0.271, 0.271]],
  [0.112, [0.428, 0.271, 0.271]],
  [0.114, [0.435, 0.275, 0.275]],
  [0.115, [0.435, 0.275, 0.275]],
  [0.117, [0.442, 0.28, 0.28]],
  [0.119, [0.442, 0.28, 0.28]],
  [0.121, [0.448, 0.285, 0.285]],
  [0.123, [0.448, 0.285, 0.285]],
  [0.125, [0.455, 0.289, 0.289]],
  [0.127, [0.455, 0.289, 0.289]],
  [0.129, [0.462, 0.294, 0.294]],
  [0.131, [0.462, 0.294, 0.294]],
  [0.133, [0.468, 0.298, 0.298]],
  [0.135, [0.468, 0.298, 0.298]],
  [0.137, [0.475, 0.302, 0.302]],
  [0.139, [0.475, 0.302, 0.302]],
  [0.141, [0.481, 0.307, 0.307]],
  [0.143, [0.481, 0.307, 0.307]],
  [0.145, [0.487, 0.311, 0.311]],
  [0.147, [0.487, 0.311, 0.311]],
  [0.149, [0.493, 0.315, 0.315]],
  [0.151, [0.493, 0.315, 0.315]],
  [0.153, [0.5, 0.319, 0.319]],
  [0.155, [0.5, 0.319, 0.319]],
  [0.157, [0.506, 0.323, 0.323]],
  [0.159, [0.506, 0.323, 0.323]],
  [0.16, [0.512, 0.327, 0.327]],
  [0.162, [0.512, 0.327, 0.327]],
  [0.164, [0.517, 0.331, 0.331]],
  [0.166, [0.517, 0.331, 0.331]],
  [0.168, [0.523, 0.335, 0.335]],
  [0.17, [0.523, 0.335, 0.335]],
  [0.172, [0.529, 0.339, 0.339]],
  [0.174, [0.529, 0.339, 0.339]],
  [0.176, [0.535, 0.343, 0.343]],
  [0.178, [0.535, 0.343, 0.343]],
  [0.18, [0.54, 0.347, 0.347]],
  [0.182, [0.54, 0.347, 0.347]],
  [0.184, [0.546, 0.35, 0.35]],
  [0.186, [0.546, 0.35, 0.35]],
  [0.188, [0.551, 0.354, 0.354]],
  [0.19, [0.551, 0.354, 0.354]],
  [0.192, [0.557, 0.358, 0.358]],
  [0.194, [0.557, 0.358, 0.358]],
  [0.196, [0.562, 0.361, 0.361]],
  [0.198, [0.562, 0.361, 0.361]],
  [0.2, [0.568, 0.365, 0.365]],
  [0.202, [0.568, 0.365, 0.365]],
  [0.204, [0.573, 0.369, 0.369]],
  [0.205, [0.573, 0.369, 0.369]],
  [0.207, [0.578, 0.372, 0.372]],
  [0.209, [0.578, 0.372, 0.372]],
  [0.211, [0.583, 0.376, 0.376]],
  [0.213, [0.583, 0.376, 0.376]],
  [0.215, [0.588, 0.379, 0.379]],
  [0.217, [0.588, 0.379, 0.379]],
  [0.219, [0.594, 0.383, 0.383]],
  [0.221, [0.594, 0.383, 0.383]],
  [0.223, [0.599, 0.386, 0.386]],
  [0.225, [0.599, 0.386, 0.386]],
  [0.227, [0.604, 0.389, 0.389]],
  [0.229, [0.604, 0.389, 0.389]],
  [0.231, [0.609, 0.393, 0.393]],
  [0.233, [0.609, 0.393, 0.393]],
  [0.235, [0.614, 0.396, 0.396]],
  [0.237, [0.614, 0.396, 0.396]],
  [0.239, [0.619, 0.399, 0.399]],
  [0.241, [0.619, 0.399, 0.399]],
  [0.243, [0.623, 0.403, 0.403]],
  [0.245, [0.623, 0.403, 0.403]],
  [0.247, [0.628, 0.406, 0.406]],
  [0.249, [0.628, 0.406, 0.406]],
  [0.25, [0.633, 0.409, 0.409]],
  [0.252, [0.633, 0.409, 0.409]],
  [0.254, [0.638, 0.412, 0.412]],
  [0.256, [0.638, 0.412, 0.412]],
  [0.258, [0.643, 0.415, 0.415]],
  [0.26, [0.643, 0.415, 0.415]],
  [0.262, [0.647, 0.418, 0.418]],
  [0.264, [0.647, 0.418, 0.418]],
  [0.266, [0.652, 0.422, 0.422]],
  [0.268, [0.652, 0.422, 0.422]],
  [0.27, [0.657, 0.425, 0.425]],
  [0.272, [0.657, 0.425, 0.425]],
  [0.274, [0.661, 0.428, 0.428]],
  [0.276, [0.661, 0.428, 0.428]],
  [0.278, [0.666, 0.431, 0.431]],
  [0.28, [0.666, 0.431, 0.431]],
  [0.282, [0.67, 0.434, 0.434]],
  [0.284, [0.67, 0.434, 0.434]],
  [0.286, [0.675, 0.437, 0.437]],
  [0.288, [0.675, 0.437, 0.437]],
  [0.29, [0.679, 0.44, 0.44]],
  [0.292, [0.679, 0.44, 0.44]],
  [0.294, [0.684, 0.443, 0.443]],
  [0.295, [0.684, 0.443, 0.443]],
  [0.297, [0.688, 0.446, 0.446]],
  [0.299, [0.688, 0.446, 0.446]],
  [0.301, [0.692, 0.449, 0.449]],
  [0.303, [0.692, 0.449, 0.449]],
  [0.305, [0.697, 0.452, 0.452]],
  [0.307, [0.697, 0.452, 0.452]],
  [0.309, [0.701, 0.454, 0.454]],
  [0.311, [0.701, 0.454, 0.454]],
  [0.313, [0.705, 0.457, 0.457]],
  [0.315, [0.705, 0.457, 0.457]],
  [0.317, [0.71, 0.46, 0.46]],
  [0.319, [0.71, 0.46, 0.46]],
  [0.321, [0.714, 0.463, 0.463]],
  [0.323, [0.714, 0.463, 0.463]],
  [0.325, [0.718, 0.466, 0.466]],
  [0.327, [0.718, 0.466, 0.466]],
  [0.329, [0.722, 0.469, 0.469]],
  [0.331, [0.722, 0.469, 0.469]],
  [0.333, [0.726, 0.471, 0.471]],
  [0.335, [0.726, 0.471, 0.471]],
  [0.337, [0.731, 0.474, 0.474]],
  [0.339, [0.731, 0.474, 0.474]],
  [0.341, [0.735, 0.477, 0.477]],
  [0.342, [0.735, 0.477, 0.477]],
  [0.344, [0.739, 0.48, 0.48]],
  [0.346, [0.739, 0.48, 0.48]],
  [0.348, [0.743, 0.482, 0.482]],
  [0.35, [0.743, 0.482, 0.482]],
  [0.352, [0.747, 0.485, 0.485]],
  [0.354, [0.747, 0.485, 0.485]],
  [0.356, [0.751, 0.488, 0.488]],
  [0.358, [0.751, 0.488, 0.488]],
  [0.36, [0.755, 0.49, 0.49]],
  [0.362, [0.755, 0.49, 0.49]],
  [0.364, [0.759, 0.493, 0.493]],
  [0.366, [0.759, 0.493, 0.493]],
  [0.368, [0.761, 0.499, 0.496]],
  [0.37, [0.761, 0.499, 0.496]],
  [0.372, [0.763, 0.505, 0.498]],
  [0.374, [0.763, 0.505, 0.498]],
  [0.376, [0.764, 0.511, 0.501]],
  [0.378, [0.764, 0.511, 0.501]],
  [0.38, [0.766, 0.517, 0.504]],
  [0.382, [0.766, 0.517, 0.504]],
  [0.384, [0.768, 0.522, 0.506]],
  [0.386, [0.768, 0.522, 0.506]],
  [0.387, [0.77, 0.528, 0.509]],
  [0.389, [0.77, 0.528, 0.509]],
  [0.391, [0.771, 0.534, 0.511]],
  [0.393, [0.771, 0.534, 0.511]],
  [0.395, [0.773, 0.54, 0.514]],
  [0.397, [0.773, 0.54, 0.514]],
  [0.399, [0.775, 0.545, 0.516]],
  [0.401, [0.775, 0.545, 0.516]],
  [0.403, [0.776, 0.551, 0.519]],
  [0.405, [0.776, 0.551, 0.519]],
  [0.407, [0.778, 0.556, 0.521]],
  [0.409, [0.778, 0.556, 0.521]],
  [0.411, [0.78, 0.562, 0.524]],
  [0.413, [0.78, 0.562, 0.524]],
  [0.415, [0.781, 0.567, 0.526]],
  [0.417, [0.781, 0.567, 0.526]],
  [0.419, [0.783, 0.572, 0.529]],
  [0.421, [0.783, 0.572, 0.529]],
  [0.423, [0.785, 0.577, 0.531]],
  [0.425, [0.785, 0.577, 0.531]],
  [0.427, [0.786, 0.583, 0.534]],
  [0.429, [0.786, 0.583, 0.534]],
  [0.431, [0.788, 0.588, 0.536]],
  [0.432, [0.788, 0.588, 0.536]],
  [0.434, [0.79, 0.593, 0.539]],
  [0.436, [0.79, 0.593, 0.539]],
  [0.438, [0.791, 0.598, 0.541]],
  [0.44, [0.791, 0.598, 0.541]],
  [0.442, [0.793, 0.603, 0.544]],
  [0.444, [0.793, 0.603, 0.544]],
  [0.446, [0.795, 0.608, 0.546]],
  [0.448, [0.795, 0.608, 0.546]],
  [0.45, [0.796, 0.613, 0.548]],
  [0.452, [0.796, 0.613, 0.548]],
  [0.454, [0.798, 0.618, 0.551]],
  [0.456, [0.798, 0.618, 0.551]],
  [0.458, [0.8, 0.623, 0.553]],
  [0.46, [0.8, 0.623, 0.553]],
  [0.462, [0.801, 0.628, 0.555]],
  [0.464, [0.801, 0.628, 0.555]],
  [0.466, [0.803, 0.632, 0.558]],
  [0.468, [0.803, 0.632, 0.558]],
  [0.47, [0.804, 0.637, 0.56]],
  [0.472, [0.804, 0.637, 0.56]],
  [0.474, [0.806, 0.642, 0.562]],
  [0.476, [0.806, 0.642, 0.562]],
  [0.477, [0.808, 0.647, 0.565]],
  [0.479, [0.808, 0.647, 0.565]],
  [0.481, [0.809, 0.651, 0.567]],
  [0.483, [0.809, 0.651, 0.567]],
  [0.485, [0.811, 0.656, 0.569]],
  [0.487, [0.811, 0.656, 0.569]],
  [0.489, [0.812, 0.66, 0.572]],
  [0.491, [0.812, 0.66, 0.572]],
  [0.493, [0.814, 0.665, 0.574]],
  [0.495, [0.814, 0.665, 0.574]],
  [0.497, [0.816, 0.67, 0.576]],
  [0.499, [0.816, 0.67, 0.576]],
  [0.501, [0.817, 0.674, 0.578]],
  [0.503, [0.817, 0.674, 0.578]],
  [0.505, [0.819, 0.679, 0.581]],
  [0.507, [0.819, 0.679, 0.581]],
  [0.509, [0.82, 0.683, 0.583]],
  [0.511, [0.82, 0.683, 0.583]],
  [0.513, [0.822, 0.687, 0.585]],
  [0.515, [0.822, 0.687, 0.585]],
  [0.517, [0.824, 0.692, 0.587]],
  [0.519, [0.824, 0.692, 0.587]],
  [0.521, [0.825, 0.696, 0.59]],
  [0.523, [0.825, 0.696, 0.59]],
  [0.524, [0.827, 0.7, 0.592]],
  [0.526, [0.827, 0.7, 0.592]],
  [0.528, [0.828, 0.705, 0.594]],
  [0.53, [0.828, 0.705, 0.594]],
  [0.532, [0.83, 0.709, 0.596]],
  [0.534, [0.83, 0.709, 0.596]],
  [0.536, [0.832, 0.713, 0.598]],
  [0.538, [0.832, 0.713, 0.598]],
  [0.54, [0.833, 0.718, 0.601]],
  [0.542, [0.833, 0.718, 0.601]],
  [0.544, [0.835, 0.722, 0.603]],
  [0.546, [0.835, 0.722, 0.603]],
  [0.548, [0.836, 0.726, 0.605]],
  [0.55, [0.836, 0.726, 0.605]],
  [0.552, [0.838, 0.73, 0.607]],
  [0.554, [0.838, 0.73, 0.607]],
  [0.556, [0.839, 0.734, 0.609]],
  [0.558, [0.839, 0.734, 0.609]],
  [0.56, [0.841, 0.738, 0.611]],
  [0.562, [0.841, 0.738, 0.611]],
  [0.564, [0.842, 0.742, 0.614]],
  [0.566, [0.842, 0.742, 0.614]],
  [0.568, [0.844, 0.746, 0.616]],
  [0.569, [0.844, 0.746, 0.616]],
  [0.571, [0.846, 0.75, 0.618]],
  [0.573, [0.846, 0.75, 0.618]],
  [0.575, [0.847, 0.754, 0.62]],
  [0.577, [0.847, 0.754, 0.62]],
  [0.579, [0.849, 0.758, 0.622]],
  [0.581, [0.849, 0.758, 0.622]],
  [0.583, [0.85, 0.762, 0.624]],
  [0.585, [0.85, 0.762, 0.624]],
  [0.587, [0.852, 0.766, 0.626]],
  [0.589, [0.852, 0.766, 0.626]],
  [0.591, [0.853, 0.77, 0.628]],
  [0.593, [0.853, 0.77, 0.628]],
  [0.595, [0.855, 0.774, 0.63]],
  [0.597, [0.855, 0.774, 0.63]],
  [0.599, [0.856, 0.778, 0.632]],
  [0.601, [0.856, 0.778, 0.632]],
  [0.603, [0.858, 0.782, 0.635]],
  [0.605, [0.858, 0.782, 0.635]],
  [0.607, [0.859, 0.786, 0.637]],
  [0.609, [0.859, 0.786, 0.637]],
  [0.611, [0.861, 0.79, 0.639]],
  [0.613, [0.861, 0.79, 0.639]],
  [0.614, [0.862, 0.794, 0.641]],
  [0.616, [0.862, 0.794, 0.641]],
  [0.618, [0.864, 0.797, 0.643]],
  [0.62, [0.864, 0.797, 0.643]],
  [0.622, [0.865, 0.801, 0.645]],
  [0.624, [0.865, 0.801, 0.645]],
  [0.626, [0.867, 0.805, 0.647]],
  [0.628, [0.867, 0.805, 0.647]],
  [0.63, [0.868, 0.809, 0.649]],
  [0.632, [0.868, 0.809, 0.649]],
  [0.634, [0.87, 0.812, 0.651]],
  [0.636, [0.87, 0.812, 0.651]],
  [0.638, [0.871, 0.816, 0.653]],
  [0.64, [0.871, 0.816, 0.653]],
  [0.642, [0.873, 0.82, 0.655]],
  [0.644, [0.873, 0.82, 0.655]],
  [0.646, [0.874, 0.823, 0.657]],
  [0.648, [0.874, 0.823, 0.657]],
  [0.65, [0.876, 0.827, 0.659]],
  [0.652, [0.876, 0.827, 0.659]],
  [0.654, [0.877, 0.831, 0.661]],
  [0.656, [0.877, 0.831, 0.661]],
  [0.658, [0.879, 0.834, 0.663]],
  [0.659, [0.879, 0.834, 0.663]],
  [0.661, [0.88, 0.838, 0.665]],
  [0.663, [0.88, 0.838, 0.665]],
  [0.665, [0.882, 0.842, 0.667]],
  [0.667, [0.882, 0.842, 0.667]],
  [0.669, [0.883, 0.845, 0.669]],
  [0.671, [0.883, 0.845, 0.669]],
  [0.673, [0.885, 0.849, 0.671]],
  [0.675, [0.885, 0.849, 0.671]],
  [0.677, [0.886, 0.852, 0.673]],
  [0.679, [0.886, 0.852, 0.673]],
  [0.681, [0.888, 0.856, 0.674]],
  [0.683, [0.888, 0.856, 0.674]],
  [0.685, [0.889, 0.859, 0.676]],
  [0.687, [0.889, 0.859, 0.676]],
  [0.689, [0.891, 0.863, 0.678]],
  [0.691, [0.891, 0.863, 0.678]],
  [0.693, [0.892, 0.866, 0.68]],
  [0.695, [0.892, 0.866, 0.68]],
  [0.697, [0.894, 0.87, 0.682]],
  [0.699, [0.894, 0.87, 0.682]],
  [0.701, [0.895, 0.873, 0.684]],
  [0.703, [0.895, 0.873, 0.684]],
  [0.705, [0.897, 0.877, 0.686]],
  [0.706, [0.897, 0.877, 0.686]],
  [0.708, [0.898, 0.88, 0.688]],
  [0.71, [0.898, 0.88, 0.688]],
  [0.712, [0.9, 0.884, 0.69]],
  [0.714, [0.9, 0.884, 0.69]],
  [0.716, [0.901, 0.887, 0.692]],
  [0.718, [0.901, 0.887, 0.692]],
  [0.72, [0.902, 0.89, 0.694]],
  [0.722, [0.902, 0.89, 0.694]],
  [0.724, [0.904, 0.894, 0.695]],
  [0.726, [0.904, 0.894, 0.695]],
  [0.728, [0.905, 0.897, 0.697]],
  [0.73, [0.905, 0.897, 0.697]],
  [0.732, [0.907, 0.901, 0.699]],
  [0.734, [0.907, 0.901, 0.699]],
  [0.736, [0.908, 0.904, 0.701]],
  [0.738, [0.908, 0.904, 0.701]],
  [0.74, [0.91, 0.907, 0.703]],
  [0.742, [0.91, 0.907, 0.703]],
  [0.744, [0.911, 0.911, 0.705]],
  [0.746, [0.911, 0.911, 0.705]],
  [0.748, [0.913, 0.913, 0.709]],
  [0.75, [0.913, 0.913, 0.709]],
  [0.751, [0.914, 0.914, 0.715]],
  [0.753, [0.914, 0.914, 0.715]],
  [0.755, [0.915, 0.915, 0.72]],
  [0.757, [0.915, 0.915, 0.72]],
  [0.759, [0.917, 0.917, 0.726]],
  [0.761, [0.917, 0.917, 0.726]],
  [0.763, [0.918, 0.918, 0.731]],
  [0.765, [0.918, 0.918, 0.731]],
  [0.767, [0.92, 0.92, 0.736]],
  [0.769, [0.92, 0.92, 0.736]],
  [0.771, [0.921, 0.921, 0.741]],
  [0.773, [0.921, 0.921, 0.741]],
  [0.775, [0.922, 0.922, 0.747]],
  [0.777, [0.922, 0.922, 0.747]],
  [0.779, [0.924, 0.924, 0.752]],
  [0.781, [0.924, 0.924, 0.752]],
  [0.783, [0.925, 0.925, 0.757]],
  [0.785, [0.925, 0.925, 0.757]],
  [0.787, [0.927, 0.927, 0.762]],
  [0.789, [0.927, 0.927, 0.762]],
  [0.791, [0.928, 0.928, 0.767]],
  [0.793, [0.928, 0.928, 0.767]],
  [0.795, [0.93, 0.93, 0.772]],
  [0.796, [0.93, 0.93, 0.772]],
  [0.798, [0.931, 0.931, 0.777]],
  [0.8, [0.931, 0.931, 0.777]],
  [0.802, [0.932, 0.932, 0.782]],
  [0.804, [0.932, 0.932, 0.782]],
  [0.806, [0.934, 0.934, 0.787]],
  [0.808, [0.934, 0.934, 0.787]],
  [0.81, [0.935, 0.935, 0.792]],
  [0.812, [0.935, 0.935, 0.792]],
  [0.814, [0.937, 0.937, 0.797]],
  [0.816, [0.937, 0.937, 0.797]],
  [0.818, [0.938, 0.938, 0.802]],
  [0.82, [0.938, 0.938, 0.802]],
  [0.822, [0.939, 0.939, 0.807]],
  [0.824, [0.939, 0.939, 0.807]],
  [0.826, [0.941, 0.941, 0.811]],
  [0.828, [0.941, 0.941, 0.811]],
  [0.83, [0.942, 0.942, 0.816]],
  [0.832, [0.942, 0.942, 0.816]],
  [0.834, [0.943, 0.943, 0.821]],
  [0.836, [0.943, 0.943, 0.821]],
  [0.838, [0.945, 0.945, 0.826]],
  [0.84, [0.945, 0.945, 0.826]],
  [0.841, [0.946, 0.946, 0.83]],
  [0.843, [0.946, 0.946, 0.83]],
  [0.845, [0.948, 0.948, 0.835]],
  [0.847, [0.948, 0.948, 0.835]],
  [0.849, [0.949, 0.949, 0.84]],
  [0.851, [0.949, 0.949, 0.84]],
  [0.853, [0.95, 0.95, 0.844]],
  [0.855, [0.95, 0.95, 0.844]],
  [0.857, [0.952, 0.952, 0.849]],
  [0.859, [0.952, 0.952, 0.849]],
  [0.861, [0.953, 0.953, 0.853]],
  [0.863, [0.953, 0.953, 0.853]],
  [0.865, [0.955, 0.955, 0.858]],
  [0.867, [0.955, 0.955, 0.858]],
  [0.869, [0.956, 0.956, 0.862]],
  [0.871, [0.956, 0.956, 0.862]],
  [0.873, [0.957, 0.957, 0.867]],
  [0.875, [0.957, 0.957, 0.867]],
  [0.877, [0.959, 0.959, 0.871]],
  [0.879, [0.959, 0.959, 0.871]],
  [0.881, [0.96, 0.96, 0.876]],
  [0.883, [0.96, 0.96, 0.876]],
  [0.885, [0.961, 0.961, 0.88]],
  [0.886, [0.961, 0.961, 0.88]],
  [0.888, [0.963, 0.963, 0.885]],
  [0.89, [0.963, 0.963, 0.885]],
  [0.892, [0.964, 0.964, 0.889]],
  [0.894, [0.964, 0.964, 0.889]],
  [0.896, [0.965, 0.965, 0.893]],
  [0.898, [0.965, 0.965, 0.893]],
  [0.9, [0.967, 0.967, 0.898]],
  [0.902, [0.967, 0.967, 0.898]],
  [0.904, [0.968, 0.968, 0.902]],
  [0.906, [0.968, 0.968, 0.902]],
  [0.908, [0.969, 0.969, 0.906]],
  [0.91, [0.969, 0.969, 0.906]],
  [0.912, [0.971, 0.971, 0.911]],
  [0.914, [0.971, 0.971, 0.911]],
  [0.916, [0.972, 0.972, 0.915]],
  [0.918, [0.972, 0.972, 0.915]],
  [0.92, [0.974, 0.974, 0.919]],
  [0.922, [0.974, 0.974, 0.919]],
  [0.924, [0.975, 0.975, 0.923]],
  [0.926, [0.975, 0.975, 0.923]],
  [0.928, [0.976, 0.976, 0.927]],
  [0.93, [0.976, 0.976, 0.927]],
  [0.932, [0.978, 0.978, 0.932]],
  [0.933, [0.978, 0.978, 0.932]],
  [0.935, [0.979, 0.979, 0.936]],
  [0.937, [0.979, 0.979, 0.936]],
  [0.939, [0.98, 0.98, 0.94]],
  [0.941, [0.98, 0.98, 0.94]],
  [0.943, [0.982, 0.982, 0.944]],
  [0.945, [0.982, 0.982, 0.944]],
  [0.947, [0.983, 0.983, 0.948]],
  [0.949, [0.983, 0.983, 0.948]],
  [0.951, [0.984, 0.984, 0.952]],
  [0.953, [0.984, 0.984, 0.952]],
  [0.955, [0.986, 0.986, 0.956]],
  [0.957, [0.986, 0.986, 0.956]],
  [0.959, [0.987, 0.987, 0.96]],
  [0.961, [0.987, 0.987, 0.96]],
  [0.963, [0.988, 0.988, 0.964]],
  [0.965, [0.988, 0.988, 0.964]],
  [0.967, [0.989, 0.989, 0.968]],
  [0.969, [0.989, 0.989, 0.968]],
  [0.971, [0.991, 0.991, 0.972]],
  [0.973, [0.991, 0.991, 0.972]],
  [0.975, [0.992, 0.992, 0.976]],
  [0.977, [0.992, 0.992, 0.976]],
  [0.978, [0.993, 0.993, 0.98]],
  [0.98, [0.993, 0.993, 0.98]],
  [0.982, [0.995, 0.995, 0.984]],
  [0.984, [0.995, 0.995, 0.984]],
  [0.986, [0.996, 0.996, 0.988]],
  [0.988, [0.996, 0.996, 0.988]],
  [0.99, [0.997, 0.997, 0.992]],
  [0.992, [0.997, 0.997, 0.992]],
  [0.994, [0.999, 0.999, 0.996]],
  [0.996, [0.999, 0.999, 0.996]],
  [0.998, [1, 1, 1]],
  [1, [1, 1, 1]]
], Rp = [
  [0, [1, 0, 1]],
  [2e-3, [1, 0, 1]],
  [4e-3, [1, 4e-3, 0.996]],
  [6e-3, [1, 4e-3, 0.996]],
  [8e-3, [1, 8e-3, 0.992]],
  [0.01, [1, 8e-3, 0.992]],
  [0.012, [1, 0.012, 0.988]],
  [0.014, [1, 0.012, 0.988]],
  [0.016, [1, 0.016, 0.984]],
  [0.018, [1, 0.016, 0.984]],
  [0.02, [1, 0.02, 0.98]],
  [0.022, [1, 0.02, 0.98]],
  [0.023, [1, 0.024, 0.976]],
  [0.025, [1, 0.024, 0.976]],
  [0.027, [1, 0.027, 0.973]],
  [0.029, [1, 0.027, 0.973]],
  [0.031, [1, 0.031, 0.969]],
  [0.033, [1, 0.031, 0.969]],
  [0.035, [1, 0.035, 0.965]],
  [0.037, [1, 0.035, 0.965]],
  [0.039, [1, 0.039, 0.961]],
  [0.041, [1, 0.039, 0.961]],
  [0.043, [1, 0.043, 0.957]],
  [0.045, [1, 0.043, 0.957]],
  [0.047, [1, 0.047, 0.953]],
  [0.049, [1, 0.047, 0.953]],
  [0.051, [1, 0.051, 0.949]],
  [0.053, [1, 0.051, 0.949]],
  [0.055, [1, 0.055, 0.945]],
  [0.057, [1, 0.055, 0.945]],
  [0.059, [1, 0.059, 0.941]],
  [0.061, [1, 0.059, 0.941]],
  [0.063, [1, 0.063, 0.937]],
  [0.065, [1, 0.063, 0.937]],
  [0.067, [1, 0.067, 0.933]],
  [0.068, [1, 0.067, 0.933]],
  [0.07, [1, 0.071, 0.929]],
  [0.072, [1, 0.071, 0.929]],
  [0.074, [1, 0.075, 0.925]],
  [0.076, [1, 0.075, 0.925]],
  [0.078, [1, 0.078, 0.922]],
  [0.08, [1, 0.078, 0.922]],
  [0.082, [1, 0.082, 0.918]],
  [0.084, [1, 0.082, 0.918]],
  [0.086, [1, 0.086, 0.914]],
  [0.088, [1, 0.086, 0.914]],
  [0.09, [1, 0.09, 0.91]],
  [0.092, [1, 0.09, 0.91]],
  [0.094, [1, 0.094, 0.906]],
  [0.096, [1, 0.094, 0.906]],
  [0.098, [1, 0.098, 0.902]],
  [0.1, [1, 0.098, 0.902]],
  [0.102, [1, 0.102, 0.898]],
  [0.104, [1, 0.102, 0.898]],
  [0.106, [1, 0.106, 0.894]],
  [0.108, [1, 0.106, 0.894]],
  [0.11, [1, 0.11, 0.89]],
  [0.112, [1, 0.11, 0.89]],
  [0.114, [1, 0.114, 0.886]],
  [0.115, [1, 0.114, 0.886]],
  [0.117, [1, 0.118, 0.882]],
  [0.119, [1, 0.118, 0.882]],
  [0.121, [1, 0.122, 0.878]],
  [0.123, [1, 0.122, 0.878]],
  [0.125, [1, 0.125, 0.875]],
  [0.127, [1, 0.125, 0.875]],
  [0.129, [1, 0.129, 0.871]],
  [0.131, [1, 0.129, 0.871]],
  [0.133, [1, 0.133, 0.867]],
  [0.135, [1, 0.133, 0.867]],
  [0.137, [1, 0.137, 0.863]],
  [0.139, [1, 0.137, 0.863]],
  [0.141, [1, 0.141, 0.859]],
  [0.143, [1, 0.141, 0.859]],
  [0.145, [1, 0.145, 0.855]],
  [0.147, [1, 0.145, 0.855]],
  [0.149, [1, 0.149, 0.851]],
  [0.151, [1, 0.149, 0.851]],
  [0.153, [1, 0.153, 0.847]],
  [0.155, [1, 0.153, 0.847]],
  [0.157, [1, 0.157, 0.843]],
  [0.159, [1, 0.157, 0.843]],
  [0.16, [1, 0.161, 0.839]],
  [0.162, [1, 0.161, 0.839]],
  [0.164, [1, 0.165, 0.835]],
  [0.166, [1, 0.165, 0.835]],
  [0.168, [1, 0.169, 0.831]],
  [0.17, [1, 0.169, 0.831]],
  [0.172, [1, 0.173, 0.827]],
  [0.174, [1, 0.173, 0.827]],
  [0.176, [1, 0.176, 0.824]],
  [0.178, [1, 0.176, 0.824]],
  [0.18, [1, 0.18, 0.82]],
  [0.182, [1, 0.18, 0.82]],
  [0.184, [1, 0.184, 0.816]],
  [0.186, [1, 0.184, 0.816]],
  [0.188, [1, 0.188, 0.812]],
  [0.19, [1, 0.188, 0.812]],
  [0.192, [1, 0.192, 0.808]],
  [0.194, [1, 0.192, 0.808]],
  [0.196, [1, 0.196, 0.804]],
  [0.198, [1, 0.196, 0.804]],
  [0.2, [1, 0.2, 0.8]],
  [0.202, [1, 0.2, 0.8]],
  [0.204, [1, 0.204, 0.796]],
  [0.205, [1, 0.204, 0.796]],
  [0.207, [1, 0.208, 0.792]],
  [0.209, [1, 0.208, 0.792]],
  [0.211, [1, 0.212, 0.788]],
  [0.213, [1, 0.212, 0.788]],
  [0.215, [1, 0.216, 0.784]],
  [0.217, [1, 0.216, 0.784]],
  [0.219, [1, 0.22, 0.78]],
  [0.221, [1, 0.22, 0.78]],
  [0.223, [1, 0.224, 0.776]],
  [0.225, [1, 0.224, 0.776]],
  [0.227, [1, 0.227, 0.773]],
  [0.229, [1, 0.227, 0.773]],
  [0.231, [1, 0.231, 0.769]],
  [0.233, [1, 0.231, 0.769]],
  [0.235, [1, 0.235, 0.765]],
  [0.237, [1, 0.235, 0.765]],
  [0.239, [1, 0.239, 0.761]],
  [0.241, [1, 0.239, 0.761]],
  [0.243, [1, 0.243, 0.757]],
  [0.245, [1, 0.243, 0.757]],
  [0.247, [1, 0.247, 0.753]],
  [0.249, [1, 0.247, 0.753]],
  [0.25, [1, 0.251, 0.749]],
  [0.252, [1, 0.251, 0.749]],
  [0.254, [1, 0.255, 0.745]],
  [0.256, [1, 0.255, 0.745]],
  [0.258, [1, 0.259, 0.741]],
  [0.26, [1, 0.259, 0.741]],
  [0.262, [1, 0.263, 0.737]],
  [0.264, [1, 0.263, 0.737]],
  [0.266, [1, 0.267, 0.733]],
  [0.268, [1, 0.267, 0.733]],
  [0.27, [1, 0.271, 0.729]],
  [0.272, [1, 0.271, 0.729]],
  [0.274, [1, 0.275, 0.725]],
  [0.276, [1, 0.275, 0.725]],
  [0.278, [1, 0.278, 0.722]],
  [0.28, [1, 0.278, 0.722]],
  [0.282, [1, 0.282, 0.718]],
  [0.284, [1, 0.282, 0.718]],
  [0.286, [1, 0.286, 0.714]],
  [0.288, [1, 0.286, 0.714]],
  [0.29, [1, 0.29, 0.71]],
  [0.292, [1, 0.29, 0.71]],
  [0.294, [1, 0.294, 0.706]],
  [0.295, [1, 0.294, 0.706]],
  [0.297, [1, 0.298, 0.702]],
  [0.299, [1, 0.298, 0.702]],
  [0.301, [1, 0.302, 0.698]],
  [0.303, [1, 0.302, 0.698]],
  [0.305, [1, 0.306, 0.694]],
  [0.307, [1, 0.306, 0.694]],
  [0.309, [1, 0.31, 0.69]],
  [0.311, [1, 0.31, 0.69]],
  [0.313, [1, 0.314, 0.686]],
  [0.315, [1, 0.314, 0.686]],
  [0.317, [1, 0.318, 0.682]],
  [0.319, [1, 0.318, 0.682]],
  [0.321, [1, 0.322, 0.678]],
  [0.323, [1, 0.322, 0.678]],
  [0.325, [1, 0.325, 0.675]],
  [0.327, [1, 0.325, 0.675]],
  [0.329, [1, 0.329, 0.671]],
  [0.331, [1, 0.329, 0.671]],
  [0.333, [1, 0.333, 0.667]],
  [0.335, [1, 0.333, 0.667]],
  [0.337, [1, 0.337, 0.663]],
  [0.339, [1, 0.337, 0.663]],
  [0.341, [1, 0.341, 0.659]],
  [0.342, [1, 0.341, 0.659]],
  [0.344, [1, 0.345, 0.655]],
  [0.346, [1, 0.345, 0.655]],
  [0.348, [1, 0.349, 0.651]],
  [0.35, [1, 0.349, 0.651]],
  [0.352, [1, 0.353, 0.647]],
  [0.354, [1, 0.353, 0.647]],
  [0.356, [1, 0.357, 0.643]],
  [0.358, [1, 0.357, 0.643]],
  [0.36, [1, 0.361, 0.639]],
  [0.362, [1, 0.361, 0.639]],
  [0.364, [1, 0.365, 0.635]],
  [0.366, [1, 0.365, 0.635]],
  [0.368, [1, 0.369, 0.631]],
  [0.37, [1, 0.369, 0.631]],
  [0.372, [1, 0.373, 0.627]],
  [0.374, [1, 0.373, 0.627]],
  [0.376, [1, 0.376, 0.624]],
  [0.378, [1, 0.376, 0.624]],
  [0.38, [1, 0.38, 0.62]],
  [0.382, [1, 0.38, 0.62]],
  [0.384, [1, 0.384, 0.616]],
  [0.386, [1, 0.384, 0.616]],
  [0.387, [1, 0.388, 0.612]],
  [0.389, [1, 0.388, 0.612]],
  [0.391, [1, 0.392, 0.608]],
  [0.393, [1, 0.392, 0.608]],
  [0.395, [1, 0.396, 0.604]],
  [0.397, [1, 0.396, 0.604]],
  [0.399, [1, 0.4, 0.6]],
  [0.401, [1, 0.4, 0.6]],
  [0.403, [1, 0.404, 0.596]],
  [0.405, [1, 0.404, 0.596]],
  [0.407, [1, 0.408, 0.592]],
  [0.409, [1, 0.408, 0.592]],
  [0.411, [1, 0.412, 0.588]],
  [0.413, [1, 0.412, 0.588]],
  [0.415, [1, 0.416, 0.584]],
  [0.417, [1, 0.416, 0.584]],
  [0.419, [1, 0.42, 0.58]],
  [0.421, [1, 0.42, 0.58]],
  [0.423, [1, 0.424, 0.576]],
  [0.425, [1, 0.424, 0.576]],
  [0.427, [1, 0.427, 0.573]],
  [0.429, [1, 0.427, 0.573]],
  [0.431, [1, 0.431, 0.569]],
  [0.432, [1, 0.431, 0.569]],
  [0.434, [1, 0.435, 0.565]],
  [0.436, [1, 0.435, 0.565]],
  [0.438, [1, 0.439, 0.561]],
  [0.44, [1, 0.439, 0.561]],
  [0.442, [1, 0.443, 0.557]],
  [0.444, [1, 0.443, 0.557]],
  [0.446, [1, 0.447, 0.553]],
  [0.448, [1, 0.447, 0.553]],
  [0.45, [1, 0.451, 0.549]],
  [0.452, [1, 0.451, 0.549]],
  [0.454, [1, 0.455, 0.545]],
  [0.456, [1, 0.455, 0.545]],
  [0.458, [1, 0.459, 0.541]],
  [0.46, [1, 0.459, 0.541]],
  [0.462, [1, 0.463, 0.537]],
  [0.464, [1, 0.463, 0.537]],
  [0.466, [1, 0.467, 0.533]],
  [0.468, [1, 0.467, 0.533]],
  [0.47, [1, 0.471, 0.529]],
  [0.472, [1, 0.471, 0.529]],
  [0.474, [1, 0.475, 0.525]],
  [0.476, [1, 0.475, 0.525]],
  [0.477, [1, 0.478, 0.522]],
  [0.479, [1, 0.478, 0.522]],
  [0.481, [1, 0.482, 0.518]],
  [0.483, [1, 0.482, 0.518]],
  [0.485, [1, 0.486, 0.514]],
  [0.487, [1, 0.486, 0.514]],
  [0.489, [1, 0.49, 0.51]],
  [0.491, [1, 0.49, 0.51]],
  [0.493, [1, 0.494, 0.506]],
  [0.495, [1, 0.494, 0.506]],
  [0.497, [1, 0.498, 0.502]],
  [0.499, [1, 0.498, 0.502]],
  [0.501, [1, 0.502, 0.498]],
  [0.503, [1, 0.502, 0.498]],
  [0.505, [1, 0.506, 0.494]],
  [0.507, [1, 0.506, 0.494]],
  [0.509, [1, 0.51, 0.49]],
  [0.511, [1, 0.51, 0.49]],
  [0.513, [1, 0.514, 0.486]],
  [0.515, [1, 0.514, 0.486]],
  [0.517, [1, 0.518, 0.482]],
  [0.519, [1, 0.518, 0.482]],
  [0.521, [1, 0.522, 0.478]],
  [0.523, [1, 0.522, 0.478]],
  [0.524, [1, 0.525, 0.475]],
  [0.526, [1, 0.525, 0.475]],
  [0.528, [1, 0.529, 0.471]],
  [0.53, [1, 0.529, 0.471]],
  [0.532, [1, 0.533, 0.467]],
  [0.534, [1, 0.533, 0.467]],
  [0.536, [1, 0.537, 0.463]],
  [0.538, [1, 0.537, 0.463]],
  [0.54, [1, 0.541, 0.459]],
  [0.542, [1, 0.541, 0.459]],
  [0.544, [1, 0.545, 0.455]],
  [0.546, [1, 0.545, 0.455]],
  [0.548, [1, 0.549, 0.451]],
  [0.55, [1, 0.549, 0.451]],
  [0.552, [1, 0.553, 0.447]],
  [0.554, [1, 0.553, 0.447]],
  [0.556, [1, 0.557, 0.443]],
  [0.558, [1, 0.557, 0.443]],
  [0.56, [1, 0.561, 0.439]],
  [0.562, [1, 0.561, 0.439]],
  [0.564, [1, 0.565, 0.435]],
  [0.566, [1, 0.565, 0.435]],
  [0.568, [1, 0.569, 0.431]],
  [0.569, [1, 0.569, 0.431]],
  [0.571, [1, 0.573, 0.427]],
  [0.573, [1, 0.573, 0.427]],
  [0.575, [1, 0.576, 0.424]],
  [0.577, [1, 0.576, 0.424]],
  [0.579, [1, 0.58, 0.42]],
  [0.581, [1, 0.58, 0.42]],
  [0.583, [1, 0.584, 0.416]],
  [0.585, [1, 0.584, 0.416]],
  [0.587, [1, 0.588, 0.412]],
  [0.589, [1, 0.588, 0.412]],
  [0.591, [1, 0.592, 0.408]],
  [0.593, [1, 0.592, 0.408]],
  [0.595, [1, 0.596, 0.404]],
  [0.597, [1, 0.596, 0.404]],
  [0.599, [1, 0.6, 0.4]],
  [0.601, [1, 0.6, 0.4]],
  [0.603, [1, 0.604, 0.396]],
  [0.605, [1, 0.604, 0.396]],
  [0.607, [1, 0.608, 0.392]],
  [0.609, [1, 0.608, 0.392]],
  [0.611, [1, 0.612, 0.388]],
  [0.613, [1, 0.612, 0.388]],
  [0.614, [1, 0.616, 0.384]],
  [0.616, [1, 0.616, 0.384]],
  [0.618, [1, 0.62, 0.38]],
  [0.62, [1, 0.62, 0.38]],
  [0.622, [1, 0.624, 0.376]],
  [0.624, [1, 0.624, 0.376]],
  [0.626, [1, 0.627, 0.373]],
  [0.628, [1, 0.627, 0.373]],
  [0.63, [1, 0.631, 0.369]],
  [0.632, [1, 0.631, 0.369]],
  [0.634, [1, 0.635, 0.365]],
  [0.636, [1, 0.635, 0.365]],
  [0.638, [1, 0.639, 0.361]],
  [0.64, [1, 0.639, 0.361]],
  [0.642, [1, 0.643, 0.357]],
  [0.644, [1, 0.643, 0.357]],
  [0.646, [1, 0.647, 0.353]],
  [0.648, [1, 0.647, 0.353]],
  [0.65, [1, 0.651, 0.349]],
  [0.652, [1, 0.651, 0.349]],
  [0.654, [1, 0.655, 0.345]],
  [0.656, [1, 0.655, 0.345]],
  [0.658, [1, 0.659, 0.341]],
  [0.659, [1, 0.659, 0.341]],
  [0.661, [1, 0.663, 0.337]],
  [0.663, [1, 0.663, 0.337]],
  [0.665, [1, 0.667, 0.333]],
  [0.667, [1, 0.667, 0.333]],
  [0.669, [1, 0.671, 0.329]],
  [0.671, [1, 0.671, 0.329]],
  [0.673, [1, 0.675, 0.325]],
  [0.675, [1, 0.675, 0.325]],
  [0.677, [1, 0.678, 0.322]],
  [0.679, [1, 0.678, 0.322]],
  [0.681, [1, 0.682, 0.318]],
  [0.683, [1, 0.682, 0.318]],
  [0.685, [1, 0.686, 0.314]],
  [0.687, [1, 0.686, 0.314]],
  [0.689, [1, 0.69, 0.31]],
  [0.691, [1, 0.69, 0.31]],
  [0.693, [1, 0.694, 0.306]],
  [0.695, [1, 0.694, 0.306]],
  [0.697, [1, 0.698, 0.302]],
  [0.699, [1, 0.698, 0.302]],
  [0.701, [1, 0.702, 0.298]],
  [0.703, [1, 0.702, 0.298]],
  [0.705, [1, 0.706, 0.294]],
  [0.706, [1, 0.706, 0.294]],
  [0.708, [1, 0.71, 0.29]],
  [0.71, [1, 0.71, 0.29]],
  [0.712, [1, 0.714, 0.286]],
  [0.714, [1, 0.714, 0.286]],
  [0.716, [1, 0.718, 0.282]],
  [0.718, [1, 0.718, 0.282]],
  [0.72, [1, 0.722, 0.278]],
  [0.722, [1, 0.722, 0.278]],
  [0.724, [1, 0.725, 0.275]],
  [0.726, [1, 0.725, 0.275]],
  [0.728, [1, 0.729, 0.271]],
  [0.73, [1, 0.729, 0.271]],
  [0.732, [1, 0.733, 0.267]],
  [0.734, [1, 0.733, 0.267]],
  [0.736, [1, 0.737, 0.263]],
  [0.738, [1, 0.737, 0.263]],
  [0.74, [1, 0.741, 0.259]],
  [0.742, [1, 0.741, 0.259]],
  [0.744, [1, 0.745, 0.255]],
  [0.746, [1, 0.745, 0.255]],
  [0.748, [1, 0.749, 0.251]],
  [0.75, [1, 0.749, 0.251]],
  [0.751, [1, 0.753, 0.247]],
  [0.753, [1, 0.753, 0.247]],
  [0.755, [1, 0.757, 0.243]],
  [0.757, [1, 0.757, 0.243]],
  [0.759, [1, 0.761, 0.239]],
  [0.761, [1, 0.761, 0.239]],
  [0.763, [1, 0.765, 0.235]],
  [0.765, [1, 0.765, 0.235]],
  [0.767, [1, 0.769, 0.231]],
  [0.769, [1, 0.769, 0.231]],
  [0.771, [1, 0.773, 0.227]],
  [0.773, [1, 0.773, 0.227]],
  [0.775, [1, 0.776, 0.224]],
  [0.777, [1, 0.776, 0.224]],
  [0.779, [1, 0.78, 0.22]],
  [0.781, [1, 0.78, 0.22]],
  [0.783, [1, 0.784, 0.216]],
  [0.785, [1, 0.784, 0.216]],
  [0.787, [1, 0.788, 0.212]],
  [0.789, [1, 0.788, 0.212]],
  [0.791, [1, 0.792, 0.208]],
  [0.793, [1, 0.792, 0.208]],
  [0.795, [1, 0.796, 0.204]],
  [0.796, [1, 0.796, 0.204]],
  [0.798, [1, 0.8, 0.2]],
  [0.8, [1, 0.8, 0.2]],
  [0.802, [1, 0.804, 0.196]],
  [0.804, [1, 0.804, 0.196]],
  [0.806, [1, 0.808, 0.192]],
  [0.808, [1, 0.808, 0.192]],
  [0.81, [1, 0.812, 0.188]],
  [0.812, [1, 0.812, 0.188]],
  [0.814, [1, 0.816, 0.184]],
  [0.816, [1, 0.816, 0.184]],
  [0.818, [1, 0.82, 0.18]],
  [0.82, [1, 0.82, 0.18]],
  [0.822, [1, 0.824, 0.176]],
  [0.824, [1, 0.824, 0.176]],
  [0.826, [1, 0.827, 0.173]],
  [0.828, [1, 0.827, 0.173]],
  [0.83, [1, 0.831, 0.169]],
  [0.832, [1, 0.831, 0.169]],
  [0.834, [1, 0.835, 0.165]],
  [0.836, [1, 0.835, 0.165]],
  [0.838, [1, 0.839, 0.161]],
  [0.84, [1, 0.839, 0.161]],
  [0.841, [1, 0.843, 0.157]],
  [0.843, [1, 0.843, 0.157]],
  [0.845, [1, 0.847, 0.153]],
  [0.847, [1, 0.847, 0.153]],
  [0.849, [1, 0.851, 0.149]],
  [0.851, [1, 0.851, 0.149]],
  [0.853, [1, 0.855, 0.145]],
  [0.855, [1, 0.855, 0.145]],
  [0.857, [1, 0.859, 0.141]],
  [0.859, [1, 0.859, 0.141]],
  [0.861, [1, 0.863, 0.137]],
  [0.863, [1, 0.863, 0.137]],
  [0.865, [1, 0.867, 0.133]],
  [0.867, [1, 0.867, 0.133]],
  [0.869, [1, 0.871, 0.129]],
  [0.871, [1, 0.871, 0.129]],
  [0.873, [1, 0.875, 0.125]],
  [0.875, [1, 0.875, 0.125]],
  [0.877, [1, 0.878, 0.122]],
  [0.879, [1, 0.878, 0.122]],
  [0.881, [1, 0.882, 0.118]],
  [0.883, [1, 0.882, 0.118]],
  [0.885, [1, 0.886, 0.114]],
  [0.886, [1, 0.886, 0.114]],
  [0.888, [1, 0.89, 0.11]],
  [0.89, [1, 0.89, 0.11]],
  [0.892, [1, 0.894, 0.106]],
  [0.894, [1, 0.894, 0.106]],
  [0.896, [1, 0.898, 0.102]],
  [0.898, [1, 0.898, 0.102]],
  [0.9, [1, 0.902, 0.098]],
  [0.902, [1, 0.902, 0.098]],
  [0.904, [1, 0.906, 0.094]],
  [0.906, [1, 0.906, 0.094]],
  [0.908, [1, 0.91, 0.09]],
  [0.91, [1, 0.91, 0.09]],
  [0.912, [1, 0.914, 0.086]],
  [0.914, [1, 0.914, 0.086]],
  [0.916, [1, 0.918, 0.082]],
  [0.918, [1, 0.918, 0.082]],
  [0.92, [1, 0.922, 0.078]],
  [0.922, [1, 0.922, 0.078]],
  [0.924, [1, 0.925, 0.075]],
  [0.926, [1, 0.925, 0.075]],
  [0.928, [1, 0.929, 0.071]],
  [0.93, [1, 0.929, 0.071]],
  [0.932, [1, 0.933, 0.067]],
  [0.933, [1, 0.933, 0.067]],
  [0.935, [1, 0.937, 0.063]],
  [0.937, [1, 0.937, 0.063]],
  [0.939, [1, 0.941, 0.059]],
  [0.941, [1, 0.941, 0.059]],
  [0.943, [1, 0.945, 0.055]],
  [0.945, [1, 0.945, 0.055]],
  [0.947, [1, 0.949, 0.051]],
  [0.949, [1, 0.949, 0.051]],
  [0.951, [1, 0.953, 0.047]],
  [0.953, [1, 0.953, 0.047]],
  [0.955, [1, 0.957, 0.043]],
  [0.957, [1, 0.957, 0.043]],
  [0.959, [1, 0.961, 0.039]],
  [0.961, [1, 0.961, 0.039]],
  [0.963, [1, 0.965, 0.035]],
  [0.965, [1, 0.965, 0.035]],
  [0.967, [1, 0.969, 0.031]],
  [0.969, [1, 0.969, 0.031]],
  [0.971, [1, 0.973, 0.027]],
  [0.973, [1, 0.973, 0.027]],
  [0.975, [1, 0.976, 0.024]],
  [0.977, [1, 0.976, 0.024]],
  [0.978, [1, 0.98, 0.02]],
  [0.98, [1, 0.98, 0.02]],
  [0.982, [1, 0.984, 0.016]],
  [0.984, [1, 0.984, 0.016]],
  [0.986, [1, 0.988, 0.012]],
  [0.988, [1, 0.988, 0.012]],
  [0.99, [1, 0.992, 8e-3]],
  [0.992, [1, 0.992, 8e-3]],
  [0.994, [1, 0.996, 4e-3]],
  [0.996, [1, 0.996, 4e-3]],
  [0.998, [1, 1, 0]],
  [1, [1, 1, 0]]
], Pp = [
  [0, [0, 0.5, 0.4]],
  [2e-3, [0, 0.5, 0.4]],
  [4e-3, [4e-3, 0.502, 0.4]],
  [6e-3, [4e-3, 0.502, 0.4]],
  [8e-3, [8e-3, 0.504, 0.4]],
  [0.01, [8e-3, 0.504, 0.4]],
  [0.012, [0.012, 0.506, 0.4]],
  [0.014, [0.012, 0.506, 0.4]],
  [0.016, [0.016, 0.508, 0.4]],
  [0.018, [0.016, 0.508, 0.4]],
  [0.02, [0.02, 0.51, 0.4]],
  [0.022, [0.02, 0.51, 0.4]],
  [0.023, [0.024, 0.512, 0.4]],
  [0.025, [0.024, 0.512, 0.4]],
  [0.027, [0.027, 0.514, 0.4]],
  [0.029, [0.027, 0.514, 0.4]],
  [0.031, [0.031, 0.516, 0.4]],
  [0.033, [0.031, 0.516, 0.4]],
  [0.035, [0.035, 0.518, 0.4]],
  [0.037, [0.035, 0.518, 0.4]],
  [0.039, [0.039, 0.52, 0.4]],
  [0.041, [0.039, 0.52, 0.4]],
  [0.043, [0.043, 0.522, 0.4]],
  [0.045, [0.043, 0.522, 0.4]],
  [0.047, [0.047, 0.524, 0.4]],
  [0.049, [0.047, 0.524, 0.4]],
  [0.051, [0.051, 0.525, 0.4]],
  [0.053, [0.051, 0.525, 0.4]],
  [0.055, [0.055, 0.527, 0.4]],
  [0.057, [0.055, 0.527, 0.4]],
  [0.059, [0.059, 0.529, 0.4]],
  [0.061, [0.059, 0.529, 0.4]],
  [0.063, [0.063, 0.531, 0.4]],
  [0.065, [0.063, 0.531, 0.4]],
  [0.067, [0.067, 0.533, 0.4]],
  [0.068, [0.067, 0.533, 0.4]],
  [0.07, [0.071, 0.535, 0.4]],
  [0.072, [0.071, 0.535, 0.4]],
  [0.074, [0.075, 0.537, 0.4]],
  [0.076, [0.075, 0.537, 0.4]],
  [0.078, [0.078, 0.539, 0.4]],
  [0.08, [0.078, 0.539, 0.4]],
  [0.082, [0.082, 0.541, 0.4]],
  [0.084, [0.082, 0.541, 0.4]],
  [0.086, [0.086, 0.543, 0.4]],
  [0.088, [0.086, 0.543, 0.4]],
  [0.09, [0.09, 0.545, 0.4]],
  [0.092, [0.09, 0.545, 0.4]],
  [0.094, [0.094, 0.547, 0.4]],
  [0.096, [0.094, 0.547, 0.4]],
  [0.098, [0.098, 0.549, 0.4]],
  [0.1, [0.098, 0.549, 0.4]],
  [0.102, [0.102, 0.551, 0.4]],
  [0.104, [0.102, 0.551, 0.4]],
  [0.106, [0.106, 0.553, 0.4]],
  [0.108, [0.106, 0.553, 0.4]],
  [0.11, [0.11, 0.555, 0.4]],
  [0.112, [0.11, 0.555, 0.4]],
  [0.114, [0.114, 0.557, 0.4]],
  [0.115, [0.114, 0.557, 0.4]],
  [0.117, [0.118, 0.559, 0.4]],
  [0.119, [0.118, 0.559, 0.4]],
  [0.121, [0.122, 0.561, 0.4]],
  [0.123, [0.122, 0.561, 0.4]],
  [0.125, [0.125, 0.563, 0.4]],
  [0.127, [0.125, 0.563, 0.4]],
  [0.129, [0.129, 0.565, 0.4]],
  [0.131, [0.129, 0.565, 0.4]],
  [0.133, [0.133, 0.567, 0.4]],
  [0.135, [0.133, 0.567, 0.4]],
  [0.137, [0.137, 0.569, 0.4]],
  [0.139, [0.137, 0.569, 0.4]],
  [0.141, [0.141, 0.571, 0.4]],
  [0.143, [0.141, 0.571, 0.4]],
  [0.145, [0.145, 0.573, 0.4]],
  [0.147, [0.145, 0.573, 0.4]],
  [0.149, [0.149, 0.575, 0.4]],
  [0.151, [0.149, 0.575, 0.4]],
  [0.153, [0.153, 0.576, 0.4]],
  [0.155, [0.153, 0.576, 0.4]],
  [0.157, [0.157, 0.578, 0.4]],
  [0.159, [0.157, 0.578, 0.4]],
  [0.16, [0.161, 0.58, 0.4]],
  [0.162, [0.161, 0.58, 0.4]],
  [0.164, [0.165, 0.582, 0.4]],
  [0.166, [0.165, 0.582, 0.4]],
  [0.168, [0.169, 0.584, 0.4]],
  [0.17, [0.169, 0.584, 0.4]],
  [0.172, [0.173, 0.586, 0.4]],
  [0.174, [0.173, 0.586, 0.4]],
  [0.176, [0.176, 0.588, 0.4]],
  [0.178, [0.176, 0.588, 0.4]],
  [0.18, [0.18, 0.59, 0.4]],
  [0.182, [0.18, 0.59, 0.4]],
  [0.184, [0.184, 0.592, 0.4]],
  [0.186, [0.184, 0.592, 0.4]],
  [0.188, [0.188, 0.594, 0.4]],
  [0.19, [0.188, 0.594, 0.4]],
  [0.192, [0.192, 0.596, 0.4]],
  [0.194, [0.192, 0.596, 0.4]],
  [0.196, [0.196, 0.598, 0.4]],
  [0.198, [0.196, 0.598, 0.4]],
  [0.2, [0.2, 0.6, 0.4]],
  [0.202, [0.2, 0.6, 0.4]],
  [0.204, [0.204, 0.602, 0.4]],
  [0.205, [0.204, 0.602, 0.4]],
  [0.207, [0.208, 0.604, 0.4]],
  [0.209, [0.208, 0.604, 0.4]],
  [0.211, [0.212, 0.606, 0.4]],
  [0.213, [0.212, 0.606, 0.4]],
  [0.215, [0.216, 0.608, 0.4]],
  [0.217, [0.216, 0.608, 0.4]],
  [0.219, [0.22, 0.61, 0.4]],
  [0.221, [0.22, 0.61, 0.4]],
  [0.223, [0.224, 0.612, 0.4]],
  [0.225, [0.224, 0.612, 0.4]],
  [0.227, [0.227, 0.614, 0.4]],
  [0.229, [0.227, 0.614, 0.4]],
  [0.231, [0.231, 0.616, 0.4]],
  [0.233, [0.231, 0.616, 0.4]],
  [0.235, [0.235, 0.618, 0.4]],
  [0.237, [0.235, 0.618, 0.4]],
  [0.239, [0.239, 0.62, 0.4]],
  [0.241, [0.239, 0.62, 0.4]],
  [0.243, [0.243, 0.622, 0.4]],
  [0.245, [0.243, 0.622, 0.4]],
  [0.247, [0.247, 0.624, 0.4]],
  [0.249, [0.247, 0.624, 0.4]],
  [0.25, [0.251, 0.625, 0.4]],
  [0.252, [0.251, 0.625, 0.4]],
  [0.254, [0.255, 0.627, 0.4]],
  [0.256, [0.255, 0.627, 0.4]],
  [0.258, [0.259, 0.629, 0.4]],
  [0.26, [0.259, 0.629, 0.4]],
  [0.262, [0.263, 0.631, 0.4]],
  [0.264, [0.263, 0.631, 0.4]],
  [0.266, [0.267, 0.633, 0.4]],
  [0.268, [0.267, 0.633, 0.4]],
  [0.27, [0.271, 0.635, 0.4]],
  [0.272, [0.271, 0.635, 0.4]],
  [0.274, [0.275, 0.637, 0.4]],
  [0.276, [0.275, 0.637, 0.4]],
  [0.278, [0.278, 0.639, 0.4]],
  [0.28, [0.278, 0.639, 0.4]],
  [0.282, [0.282, 0.641, 0.4]],
  [0.284, [0.282, 0.641, 0.4]],
  [0.286, [0.286, 0.643, 0.4]],
  [0.288, [0.286, 0.643, 0.4]],
  [0.29, [0.29, 0.645, 0.4]],
  [0.292, [0.29, 0.645, 0.4]],
  [0.294, [0.294, 0.647, 0.4]],
  [0.295, [0.294, 0.647, 0.4]],
  [0.297, [0.298, 0.649, 0.4]],
  [0.299, [0.298, 0.649, 0.4]],
  [0.301, [0.302, 0.651, 0.4]],
  [0.303, [0.302, 0.651, 0.4]],
  [0.305, [0.306, 0.653, 0.4]],
  [0.307, [0.306, 0.653, 0.4]],
  [0.309, [0.31, 0.655, 0.4]],
  [0.311, [0.31, 0.655, 0.4]],
  [0.313, [0.314, 0.657, 0.4]],
  [0.315, [0.314, 0.657, 0.4]],
  [0.317, [0.318, 0.659, 0.4]],
  [0.319, [0.318, 0.659, 0.4]],
  [0.321, [0.322, 0.661, 0.4]],
  [0.323, [0.322, 0.661, 0.4]],
  [0.325, [0.325, 0.663, 0.4]],
  [0.327, [0.325, 0.663, 0.4]],
  [0.329, [0.329, 0.665, 0.4]],
  [0.331, [0.329, 0.665, 0.4]],
  [0.333, [0.333, 0.667, 0.4]],
  [0.335, [0.333, 0.667, 0.4]],
  [0.337, [0.337, 0.669, 0.4]],
  [0.339, [0.337, 0.669, 0.4]],
  [0.341, [0.341, 0.671, 0.4]],
  [0.342, [0.341, 0.671, 0.4]],
  [0.344, [0.345, 0.673, 0.4]],
  [0.346, [0.345, 0.673, 0.4]],
  [0.348, [0.349, 0.675, 0.4]],
  [0.35, [0.349, 0.675, 0.4]],
  [0.352, [0.353, 0.676, 0.4]],
  [0.354, [0.353, 0.676, 0.4]],
  [0.356, [0.357, 0.678, 0.4]],
  [0.358, [0.357, 0.678, 0.4]],
  [0.36, [0.361, 0.68, 0.4]],
  [0.362, [0.361, 0.68, 0.4]],
  [0.364, [0.365, 0.682, 0.4]],
  [0.366, [0.365, 0.682, 0.4]],
  [0.368, [0.369, 0.684, 0.4]],
  [0.37, [0.369, 0.684, 0.4]],
  [0.372, [0.373, 0.686, 0.4]],
  [0.374, [0.373, 0.686, 0.4]],
  [0.376, [0.376, 0.688, 0.4]],
  [0.378, [0.376, 0.688, 0.4]],
  [0.38, [0.38, 0.69, 0.4]],
  [0.382, [0.38, 0.69, 0.4]],
  [0.384, [0.384, 0.692, 0.4]],
  [0.386, [0.384, 0.692, 0.4]],
  [0.387, [0.388, 0.694, 0.4]],
  [0.389, [0.388, 0.694, 0.4]],
  [0.391, [0.392, 0.696, 0.4]],
  [0.393, [0.392, 0.696, 0.4]],
  [0.395, [0.396, 0.698, 0.4]],
  [0.397, [0.396, 0.698, 0.4]],
  [0.399, [0.4, 0.7, 0.4]],
  [0.401, [0.4, 0.7, 0.4]],
  [0.403, [0.404, 0.702, 0.4]],
  [0.405, [0.404, 0.702, 0.4]],
  [0.407, [0.408, 0.704, 0.4]],
  [0.409, [0.408, 0.704, 0.4]],
  [0.411, [0.412, 0.706, 0.4]],
  [0.413, [0.412, 0.706, 0.4]],
  [0.415, [0.416, 0.708, 0.4]],
  [0.417, [0.416, 0.708, 0.4]],
  [0.419, [0.42, 0.71, 0.4]],
  [0.421, [0.42, 0.71, 0.4]],
  [0.423, [0.424, 0.712, 0.4]],
  [0.425, [0.424, 0.712, 0.4]],
  [0.427, [0.427, 0.714, 0.4]],
  [0.429, [0.427, 0.714, 0.4]],
  [0.431, [0.431, 0.716, 0.4]],
  [0.432, [0.431, 0.716, 0.4]],
  [0.434, [0.435, 0.718, 0.4]],
  [0.436, [0.435, 0.718, 0.4]],
  [0.438, [0.439, 0.72, 0.4]],
  [0.44, [0.439, 0.72, 0.4]],
  [0.442, [0.443, 0.722, 0.4]],
  [0.444, [0.443, 0.722, 0.4]],
  [0.446, [0.447, 0.724, 0.4]],
  [0.448, [0.447, 0.724, 0.4]],
  [0.45, [0.451, 0.725, 0.4]],
  [0.452, [0.451, 0.725, 0.4]],
  [0.454, [0.455, 0.727, 0.4]],
  [0.456, [0.455, 0.727, 0.4]],
  [0.458, [0.459, 0.729, 0.4]],
  [0.46, [0.459, 0.729, 0.4]],
  [0.462, [0.463, 0.731, 0.4]],
  [0.464, [0.463, 0.731, 0.4]],
  [0.466, [0.467, 0.733, 0.4]],
  [0.468, [0.467, 0.733, 0.4]],
  [0.47, [0.471, 0.735, 0.4]],
  [0.472, [0.471, 0.735, 0.4]],
  [0.474, [0.475, 0.737, 0.4]],
  [0.476, [0.475, 0.737, 0.4]],
  [0.477, [0.478, 0.739, 0.4]],
  [0.479, [0.478, 0.739, 0.4]],
  [0.481, [0.482, 0.741, 0.4]],
  [0.483, [0.482, 0.741, 0.4]],
  [0.485, [0.486, 0.743, 0.4]],
  [0.487, [0.486, 0.743, 0.4]],
  [0.489, [0.49, 0.745, 0.4]],
  [0.491, [0.49, 0.745, 0.4]],
  [0.493, [0.494, 0.747, 0.4]],
  [0.495, [0.494, 0.747, 0.4]],
  [0.497, [0.498, 0.749, 0.4]],
  [0.499, [0.498, 0.749, 0.4]],
  [0.501, [0.502, 0.751, 0.4]],
  [0.503, [0.502, 0.751, 0.4]],
  [0.505, [0.506, 0.753, 0.4]],
  [0.507, [0.506, 0.753, 0.4]],
  [0.509, [0.51, 0.755, 0.4]],
  [0.511, [0.51, 0.755, 0.4]],
  [0.513, [0.514, 0.757, 0.4]],
  [0.515, [0.514, 0.757, 0.4]],
  [0.517, [0.518, 0.759, 0.4]],
  [0.519, [0.518, 0.759, 0.4]],
  [0.521, [0.522, 0.761, 0.4]],
  [0.523, [0.522, 0.761, 0.4]],
  [0.524, [0.525, 0.763, 0.4]],
  [0.526, [0.525, 0.763, 0.4]],
  [0.528, [0.529, 0.765, 0.4]],
  [0.53, [0.529, 0.765, 0.4]],
  [0.532, [0.533, 0.767, 0.4]],
  [0.534, [0.533, 0.767, 0.4]],
  [0.536, [0.537, 0.769, 0.4]],
  [0.538, [0.537, 0.769, 0.4]],
  [0.54, [0.541, 0.771, 0.4]],
  [0.542, [0.541, 0.771, 0.4]],
  [0.544, [0.545, 0.773, 0.4]],
  [0.546, [0.545, 0.773, 0.4]],
  [0.548, [0.549, 0.775, 0.4]],
  [0.55, [0.549, 0.775, 0.4]],
  [0.552, [0.553, 0.776, 0.4]],
  [0.554, [0.553, 0.776, 0.4]],
  [0.556, [0.557, 0.778, 0.4]],
  [0.558, [0.557, 0.778, 0.4]],
  [0.56, [0.561, 0.78, 0.4]],
  [0.562, [0.561, 0.78, 0.4]],
  [0.564, [0.565, 0.782, 0.4]],
  [0.566, [0.565, 0.782, 0.4]],
  [0.568, [0.569, 0.784, 0.4]],
  [0.569, [0.569, 0.784, 0.4]],
  [0.571, [0.573, 0.786, 0.4]],
  [0.573, [0.573, 0.786, 0.4]],
  [0.575, [0.576, 0.788, 0.4]],
  [0.577, [0.576, 0.788, 0.4]],
  [0.579, [0.58, 0.79, 0.4]],
  [0.581, [0.58, 0.79, 0.4]],
  [0.583, [0.584, 0.792, 0.4]],
  [0.585, [0.584, 0.792, 0.4]],
  [0.587, [0.588, 0.794, 0.4]],
  [0.589, [0.588, 0.794, 0.4]],
  [0.591, [0.592, 0.796, 0.4]],
  [0.593, [0.592, 0.796, 0.4]],
  [0.595, [0.596, 0.798, 0.4]],
  [0.597, [0.596, 0.798, 0.4]],
  [0.599, [0.6, 0.8, 0.4]],
  [0.601, [0.6, 0.8, 0.4]],
  [0.603, [0.604, 0.802, 0.4]],
  [0.605, [0.604, 0.802, 0.4]],
  [0.607, [0.608, 0.804, 0.4]],
  [0.609, [0.608, 0.804, 0.4]],
  [0.611, [0.612, 0.806, 0.4]],
  [0.613, [0.612, 0.806, 0.4]],
  [0.614, [0.616, 0.808, 0.4]],
  [0.616, [0.616, 0.808, 0.4]],
  [0.618, [0.62, 0.81, 0.4]],
  [0.62, [0.62, 0.81, 0.4]],
  [0.622, [0.624, 0.812, 0.4]],
  [0.624, [0.624, 0.812, 0.4]],
  [0.626, [0.627, 0.814, 0.4]],
  [0.628, [0.627, 0.814, 0.4]],
  [0.63, [0.631, 0.816, 0.4]],
  [0.632, [0.631, 0.816, 0.4]],
  [0.634, [0.635, 0.818, 0.4]],
  [0.636, [0.635, 0.818, 0.4]],
  [0.638, [0.639, 0.82, 0.4]],
  [0.64, [0.639, 0.82, 0.4]],
  [0.642, [0.643, 0.822, 0.4]],
  [0.644, [0.643, 0.822, 0.4]],
  [0.646, [0.647, 0.824, 0.4]],
  [0.648, [0.647, 0.824, 0.4]],
  [0.65, [0.651, 0.825, 0.4]],
  [0.652, [0.651, 0.825, 0.4]],
  [0.654, [0.655, 0.827, 0.4]],
  [0.656, [0.655, 0.827, 0.4]],
  [0.658, [0.659, 0.829, 0.4]],
  [0.659, [0.659, 0.829, 0.4]],
  [0.661, [0.663, 0.831, 0.4]],
  [0.663, [0.663, 0.831, 0.4]],
  [0.665, [0.667, 0.833, 0.4]],
  [0.667, [0.667, 0.833, 0.4]],
  [0.669, [0.671, 0.835, 0.4]],
  [0.671, [0.671, 0.835, 0.4]],
  [0.673, [0.675, 0.837, 0.4]],
  [0.675, [0.675, 0.837, 0.4]],
  [0.677, [0.678, 0.839, 0.4]],
  [0.679, [0.678, 0.839, 0.4]],
  [0.681, [0.682, 0.841, 0.4]],
  [0.683, [0.682, 0.841, 0.4]],
  [0.685, [0.686, 0.843, 0.4]],
  [0.687, [0.686, 0.843, 0.4]],
  [0.689, [0.69, 0.845, 0.4]],
  [0.691, [0.69, 0.845, 0.4]],
  [0.693, [0.694, 0.847, 0.4]],
  [0.695, [0.694, 0.847, 0.4]],
  [0.697, [0.698, 0.849, 0.4]],
  [0.699, [0.698, 0.849, 0.4]],
  [0.701, [0.702, 0.851, 0.4]],
  [0.703, [0.702, 0.851, 0.4]],
  [0.705, [0.706, 0.853, 0.4]],
  [0.706, [0.706, 0.853, 0.4]],
  [0.708, [0.71, 0.855, 0.4]],
  [0.71, [0.71, 0.855, 0.4]],
  [0.712, [0.714, 0.857, 0.4]],
  [0.714, [0.714, 0.857, 0.4]],
  [0.716, [0.718, 0.859, 0.4]],
  [0.718, [0.718, 0.859, 0.4]],
  [0.72, [0.722, 0.861, 0.4]],
  [0.722, [0.722, 0.861, 0.4]],
  [0.724, [0.725, 0.863, 0.4]],
  [0.726, [0.725, 0.863, 0.4]],
  [0.728, [0.729, 0.865, 0.4]],
  [0.73, [0.729, 0.865, 0.4]],
  [0.732, [0.733, 0.867, 0.4]],
  [0.734, [0.733, 0.867, 0.4]],
  [0.736, [0.737, 0.869, 0.4]],
  [0.738, [0.737, 0.869, 0.4]],
  [0.74, [0.741, 0.871, 0.4]],
  [0.742, [0.741, 0.871, 0.4]],
  [0.744, [0.745, 0.873, 0.4]],
  [0.746, [0.745, 0.873, 0.4]],
  [0.748, [0.749, 0.875, 0.4]],
  [0.75, [0.749, 0.875, 0.4]],
  [0.751, [0.753, 0.876, 0.4]],
  [0.753, [0.753, 0.876, 0.4]],
  [0.755, [0.757, 0.878, 0.4]],
  [0.757, [0.757, 0.878, 0.4]],
  [0.759, [0.761, 0.88, 0.4]],
  [0.761, [0.761, 0.88, 0.4]],
  [0.763, [0.765, 0.882, 0.4]],
  [0.765, [0.765, 0.882, 0.4]],
  [0.767, [0.769, 0.884, 0.4]],
  [0.769, [0.769, 0.884, 0.4]],
  [0.771, [0.773, 0.886, 0.4]],
  [0.773, [0.773, 0.886, 0.4]],
  [0.775, [0.776, 0.888, 0.4]],
  [0.777, [0.776, 0.888, 0.4]],
  [0.779, [0.78, 0.89, 0.4]],
  [0.781, [0.78, 0.89, 0.4]],
  [0.783, [0.784, 0.892, 0.4]],
  [0.785, [0.784, 0.892, 0.4]],
  [0.787, [0.788, 0.894, 0.4]],
  [0.789, [0.788, 0.894, 0.4]],
  [0.791, [0.792, 0.896, 0.4]],
  [0.793, [0.792, 0.896, 0.4]],
  [0.795, [0.796, 0.898, 0.4]],
  [0.796, [0.796, 0.898, 0.4]],
  [0.798, [0.8, 0.9, 0.4]],
  [0.8, [0.8, 0.9, 0.4]],
  [0.802, [0.804, 0.902, 0.4]],
  [0.804, [0.804, 0.902, 0.4]],
  [0.806, [0.808, 0.904, 0.4]],
  [0.808, [0.808, 0.904, 0.4]],
  [0.81, [0.812, 0.906, 0.4]],
  [0.812, [0.812, 0.906, 0.4]],
  [0.814, [0.816, 0.908, 0.4]],
  [0.816, [0.816, 0.908, 0.4]],
  [0.818, [0.82, 0.91, 0.4]],
  [0.82, [0.82, 0.91, 0.4]],
  [0.822, [0.824, 0.912, 0.4]],
  [0.824, [0.824, 0.912, 0.4]],
  [0.826, [0.827, 0.914, 0.4]],
  [0.828, [0.827, 0.914, 0.4]],
  [0.83, [0.831, 0.916, 0.4]],
  [0.832, [0.831, 0.916, 0.4]],
  [0.834, [0.835, 0.918, 0.4]],
  [0.836, [0.835, 0.918, 0.4]],
  [0.838, [0.839, 0.92, 0.4]],
  [0.84, [0.839, 0.92, 0.4]],
  [0.841, [0.843, 0.922, 0.4]],
  [0.843, [0.843, 0.922, 0.4]],
  [0.845, [0.847, 0.924, 0.4]],
  [0.847, [0.847, 0.924, 0.4]],
  [0.849, [0.851, 0.925, 0.4]],
  [0.851, [0.851, 0.925, 0.4]],
  [0.853, [0.855, 0.927, 0.4]],
  [0.855, [0.855, 0.927, 0.4]],
  [0.857, [0.859, 0.929, 0.4]],
  [0.859, [0.859, 0.929, 0.4]],
  [0.861, [0.863, 0.931, 0.4]],
  [0.863, [0.863, 0.931, 0.4]],
  [0.865, [0.867, 0.933, 0.4]],
  [0.867, [0.867, 0.933, 0.4]],
  [0.869, [0.871, 0.935, 0.4]],
  [0.871, [0.871, 0.935, 0.4]],
  [0.873, [0.875, 0.937, 0.4]],
  [0.875, [0.875, 0.937, 0.4]],
  [0.877, [0.878, 0.939, 0.4]],
  [0.879, [0.878, 0.939, 0.4]],
  [0.881, [0.882, 0.941, 0.4]],
  [0.883, [0.882, 0.941, 0.4]],
  [0.885, [0.886, 0.943, 0.4]],
  [0.886, [0.886, 0.943, 0.4]],
  [0.888, [0.89, 0.945, 0.4]],
  [0.89, [0.89, 0.945, 0.4]],
  [0.892, [0.894, 0.947, 0.4]],
  [0.894, [0.894, 0.947, 0.4]],
  [0.896, [0.898, 0.949, 0.4]],
  [0.898, [0.898, 0.949, 0.4]],
  [0.9, [0.902, 0.951, 0.4]],
  [0.902, [0.902, 0.951, 0.4]],
  [0.904, [0.906, 0.953, 0.4]],
  [0.906, [0.906, 0.953, 0.4]],
  [0.908, [0.91, 0.955, 0.4]],
  [0.91, [0.91, 0.955, 0.4]],
  [0.912, [0.914, 0.957, 0.4]],
  [0.914, [0.914, 0.957, 0.4]],
  [0.916, [0.918, 0.959, 0.4]],
  [0.918, [0.918, 0.959, 0.4]],
  [0.92, [0.922, 0.961, 0.4]],
  [0.922, [0.922, 0.961, 0.4]],
  [0.924, [0.925, 0.963, 0.4]],
  [0.926, [0.925, 0.963, 0.4]],
  [0.928, [0.929, 0.965, 0.4]],
  [0.93, [0.929, 0.965, 0.4]],
  [0.932, [0.933, 0.967, 0.4]],
  [0.933, [0.933, 0.967, 0.4]],
  [0.935, [0.937, 0.969, 0.4]],
  [0.937, [0.937, 0.969, 0.4]],
  [0.939, [0.941, 0.971, 0.4]],
  [0.941, [0.941, 0.971, 0.4]],
  [0.943, [0.945, 0.973, 0.4]],
  [0.945, [0.945, 0.973, 0.4]],
  [0.947, [0.949, 0.975, 0.4]],
  [0.949, [0.949, 0.975, 0.4]],
  [0.951, [0.953, 0.976, 0.4]],
  [0.953, [0.953, 0.976, 0.4]],
  [0.955, [0.957, 0.978, 0.4]],
  [0.957, [0.957, 0.978, 0.4]],
  [0.959, [0.961, 0.98, 0.4]],
  [0.961, [0.961, 0.98, 0.4]],
  [0.963, [0.965, 0.982, 0.4]],
  [0.965, [0.965, 0.982, 0.4]],
  [0.967, [0.969, 0.984, 0.4]],
  [0.969, [0.969, 0.984, 0.4]],
  [0.971, [0.973, 0.986, 0.4]],
  [0.973, [0.973, 0.986, 0.4]],
  [0.975, [0.976, 0.988, 0.4]],
  [0.977, [0.976, 0.988, 0.4]],
  [0.978, [0.98, 0.99, 0.4]],
  [0.98, [0.98, 0.99, 0.4]],
  [0.982, [0.984, 0.992, 0.4]],
  [0.984, [0.984, 0.992, 0.4]],
  [0.986, [0.988, 0.994, 0.4]],
  [0.988, [0.988, 0.994, 0.4]],
  [0.99, [0.992, 0.996, 0.4]],
  [0.992, [0.992, 0.996, 0.4]],
  [0.994, [0.996, 0.998, 0.4]],
  [0.996, [0.996, 0.998, 0.4]],
  [0.998, [1, 1, 0.4]],
  [1, [1, 1, 0.4]]
], Dp = [
  [0, [0, 0, 1]],
  [2e-3, [0, 0, 1]],
  [4e-3, [0, 4e-3, 0.998]],
  [6e-3, [0, 4e-3, 0.998]],
  [8e-3, [0, 8e-3, 0.996]],
  [0.01, [0, 8e-3, 0.996]],
  [0.012, [0, 0.012, 0.994]],
  [0.014, [0, 0.012, 0.994]],
  [0.016, [0, 0.016, 0.992]],
  [0.018, [0, 0.016, 0.992]],
  [0.02, [0, 0.02, 0.99]],
  [0.022, [0, 0.02, 0.99]],
  [0.023, [0, 0.024, 0.988]],
  [0.025, [0, 0.024, 0.988]],
  [0.027, [0, 0.027, 0.986]],
  [0.029, [0, 0.027, 0.986]],
  [0.031, [0, 0.031, 0.984]],
  [0.033, [0, 0.031, 0.984]],
  [0.035, [0, 0.035, 0.982]],
  [0.037, [0, 0.035, 0.982]],
  [0.039, [0, 0.039, 0.98]],
  [0.041, [0, 0.039, 0.98]],
  [0.043, [0, 0.043, 0.978]],
  [0.045, [0, 0.043, 0.978]],
  [0.047, [0, 0.047, 0.976]],
  [0.049, [0, 0.047, 0.976]],
  [0.051, [0, 0.051, 0.975]],
  [0.053, [0, 0.051, 0.975]],
  [0.055, [0, 0.055, 0.973]],
  [0.057, [0, 0.055, 0.973]],
  [0.059, [0, 0.059, 0.971]],
  [0.061, [0, 0.059, 0.971]],
  [0.063, [0, 0.063, 0.969]],
  [0.065, [0, 0.063, 0.969]],
  [0.067, [0, 0.067, 0.967]],
  [0.068, [0, 0.067, 0.967]],
  [0.07, [0, 0.071, 0.965]],
  [0.072, [0, 0.071, 0.965]],
  [0.074, [0, 0.075, 0.963]],
  [0.076, [0, 0.075, 0.963]],
  [0.078, [0, 0.078, 0.961]],
  [0.08, [0, 0.078, 0.961]],
  [0.082, [0, 0.082, 0.959]],
  [0.084, [0, 0.082, 0.959]],
  [0.086, [0, 0.086, 0.957]],
  [0.088, [0, 0.086, 0.957]],
  [0.09, [0, 0.09, 0.955]],
  [0.092, [0, 0.09, 0.955]],
  [0.094, [0, 0.094, 0.953]],
  [0.096, [0, 0.094, 0.953]],
  [0.098, [0, 0.098, 0.951]],
  [0.1, [0, 0.098, 0.951]],
  [0.102, [0, 0.102, 0.949]],
  [0.104, [0, 0.102, 0.949]],
  [0.106, [0, 0.106, 0.947]],
  [0.108, [0, 0.106, 0.947]],
  [0.11, [0, 0.11, 0.945]],
  [0.112, [0, 0.11, 0.945]],
  [0.114, [0, 0.114, 0.943]],
  [0.115, [0, 0.114, 0.943]],
  [0.117, [0, 0.118, 0.941]],
  [0.119, [0, 0.118, 0.941]],
  [0.121, [0, 0.122, 0.939]],
  [0.123, [0, 0.122, 0.939]],
  [0.125, [0, 0.125, 0.937]],
  [0.127, [0, 0.125, 0.937]],
  [0.129, [0, 0.129, 0.935]],
  [0.131, [0, 0.129, 0.935]],
  [0.133, [0, 0.133, 0.933]],
  [0.135, [0, 0.133, 0.933]],
  [0.137, [0, 0.137, 0.931]],
  [0.139, [0, 0.137, 0.931]],
  [0.141, [0, 0.141, 0.929]],
  [0.143, [0, 0.141, 0.929]],
  [0.145, [0, 0.145, 0.927]],
  [0.147, [0, 0.145, 0.927]],
  [0.149, [0, 0.149, 0.925]],
  [0.151, [0, 0.149, 0.925]],
  [0.153, [0, 0.153, 0.924]],
  [0.155, [0, 0.153, 0.924]],
  [0.157, [0, 0.157, 0.922]],
  [0.159, [0, 0.157, 0.922]],
  [0.16, [0, 0.161, 0.92]],
  [0.162, [0, 0.161, 0.92]],
  [0.164, [0, 0.165, 0.918]],
  [0.166, [0, 0.165, 0.918]],
  [0.168, [0, 0.169, 0.916]],
  [0.17, [0, 0.169, 0.916]],
  [0.172, [0, 0.173, 0.914]],
  [0.174, [0, 0.173, 0.914]],
  [0.176, [0, 0.176, 0.912]],
  [0.178, [0, 0.176, 0.912]],
  [0.18, [0, 0.18, 0.91]],
  [0.182, [0, 0.18, 0.91]],
  [0.184, [0, 0.184, 0.908]],
  [0.186, [0, 0.184, 0.908]],
  [0.188, [0, 0.188, 0.906]],
  [0.19, [0, 0.188, 0.906]],
  [0.192, [0, 0.192, 0.904]],
  [0.194, [0, 0.192, 0.904]],
  [0.196, [0, 0.196, 0.902]],
  [0.198, [0, 0.196, 0.902]],
  [0.2, [0, 0.2, 0.9]],
  [0.202, [0, 0.2, 0.9]],
  [0.204, [0, 0.204, 0.898]],
  [0.205, [0, 0.204, 0.898]],
  [0.207, [0, 0.208, 0.896]],
  [0.209, [0, 0.208, 0.896]],
  [0.211, [0, 0.212, 0.894]],
  [0.213, [0, 0.212, 0.894]],
  [0.215, [0, 0.216, 0.892]],
  [0.217, [0, 0.216, 0.892]],
  [0.219, [0, 0.22, 0.89]],
  [0.221, [0, 0.22, 0.89]],
  [0.223, [0, 0.224, 0.888]],
  [0.225, [0, 0.224, 0.888]],
  [0.227, [0, 0.227, 0.886]],
  [0.229, [0, 0.227, 0.886]],
  [0.231, [0, 0.231, 0.884]],
  [0.233, [0, 0.231, 0.884]],
  [0.235, [0, 0.235, 0.882]],
  [0.237, [0, 0.235, 0.882]],
  [0.239, [0, 0.239, 0.88]],
  [0.241, [0, 0.239, 0.88]],
  [0.243, [0, 0.243, 0.878]],
  [0.245, [0, 0.243, 0.878]],
  [0.247, [0, 0.247, 0.876]],
  [0.249, [0, 0.247, 0.876]],
  [0.25, [0, 0.251, 0.875]],
  [0.252, [0, 0.251, 0.875]],
  [0.254, [0, 0.255, 0.873]],
  [0.256, [0, 0.255, 0.873]],
  [0.258, [0, 0.259, 0.871]],
  [0.26, [0, 0.259, 0.871]],
  [0.262, [0, 0.263, 0.869]],
  [0.264, [0, 0.263, 0.869]],
  [0.266, [0, 0.267, 0.867]],
  [0.268, [0, 0.267, 0.867]],
  [0.27, [0, 0.271, 0.865]],
  [0.272, [0, 0.271, 0.865]],
  [0.274, [0, 0.275, 0.863]],
  [0.276, [0, 0.275, 0.863]],
  [0.278, [0, 0.278, 0.861]],
  [0.28, [0, 0.278, 0.861]],
  [0.282, [0, 0.282, 0.859]],
  [0.284, [0, 0.282, 0.859]],
  [0.286, [0, 0.286, 0.857]],
  [0.288, [0, 0.286, 0.857]],
  [0.29, [0, 0.29, 0.855]],
  [0.292, [0, 0.29, 0.855]],
  [0.294, [0, 0.294, 0.853]],
  [0.295, [0, 0.294, 0.853]],
  [0.297, [0, 0.298, 0.851]],
  [0.299, [0, 0.298, 0.851]],
  [0.301, [0, 0.302, 0.849]],
  [0.303, [0, 0.302, 0.849]],
  [0.305, [0, 0.306, 0.847]],
  [0.307, [0, 0.306, 0.847]],
  [0.309, [0, 0.31, 0.845]],
  [0.311, [0, 0.31, 0.845]],
  [0.313, [0, 0.314, 0.843]],
  [0.315, [0, 0.314, 0.843]],
  [0.317, [0, 0.318, 0.841]],
  [0.319, [0, 0.318, 0.841]],
  [0.321, [0, 0.322, 0.839]],
  [0.323, [0, 0.322, 0.839]],
  [0.325, [0, 0.325, 0.837]],
  [0.327, [0, 0.325, 0.837]],
  [0.329, [0, 0.329, 0.835]],
  [0.331, [0, 0.329, 0.835]],
  [0.333, [0, 0.333, 0.833]],
  [0.335, [0, 0.333, 0.833]],
  [0.337, [0, 0.337, 0.831]],
  [0.339, [0, 0.337, 0.831]],
  [0.341, [0, 0.341, 0.829]],
  [0.342, [0, 0.341, 0.829]],
  [0.344, [0, 0.345, 0.827]],
  [0.346, [0, 0.345, 0.827]],
  [0.348, [0, 0.349, 0.825]],
  [0.35, [0, 0.349, 0.825]],
  [0.352, [0, 0.353, 0.824]],
  [0.354, [0, 0.353, 0.824]],
  [0.356, [0, 0.357, 0.822]],
  [0.358, [0, 0.357, 0.822]],
  [0.36, [0, 0.361, 0.82]],
  [0.362, [0, 0.361, 0.82]],
  [0.364, [0, 0.365, 0.818]],
  [0.366, [0, 0.365, 0.818]],
  [0.368, [0, 0.369, 0.816]],
  [0.37, [0, 0.369, 0.816]],
  [0.372, [0, 0.373, 0.814]],
  [0.374, [0, 0.373, 0.814]],
  [0.376, [0, 0.376, 0.812]],
  [0.378, [0, 0.376, 0.812]],
  [0.38, [0, 0.38, 0.81]],
  [0.382, [0, 0.38, 0.81]],
  [0.384, [0, 0.384, 0.808]],
  [0.386, [0, 0.384, 0.808]],
  [0.387, [0, 0.388, 0.806]],
  [0.389, [0, 0.388, 0.806]],
  [0.391, [0, 0.392, 0.804]],
  [0.393, [0, 0.392, 0.804]],
  [0.395, [0, 0.396, 0.802]],
  [0.397, [0, 0.396, 0.802]],
  [0.399, [0, 0.4, 0.8]],
  [0.401, [0, 0.4, 0.8]],
  [0.403, [0, 0.404, 0.798]],
  [0.405, [0, 0.404, 0.798]],
  [0.407, [0, 0.408, 0.796]],
  [0.409, [0, 0.408, 0.796]],
  [0.411, [0, 0.412, 0.794]],
  [0.413, [0, 0.412, 0.794]],
  [0.415, [0, 0.416, 0.792]],
  [0.417, [0, 0.416, 0.792]],
  [0.419, [0, 0.42, 0.79]],
  [0.421, [0, 0.42, 0.79]],
  [0.423, [0, 0.424, 0.788]],
  [0.425, [0, 0.424, 0.788]],
  [0.427, [0, 0.427, 0.786]],
  [0.429, [0, 0.427, 0.786]],
  [0.431, [0, 0.431, 0.784]],
  [0.432, [0, 0.431, 0.784]],
  [0.434, [0, 0.435, 0.782]],
  [0.436, [0, 0.435, 0.782]],
  [0.438, [0, 0.439, 0.78]],
  [0.44, [0, 0.439, 0.78]],
  [0.442, [0, 0.443, 0.778]],
  [0.444, [0, 0.443, 0.778]],
  [0.446, [0, 0.447, 0.776]],
  [0.448, [0, 0.447, 0.776]],
  [0.45, [0, 0.451, 0.775]],
  [0.452, [0, 0.451, 0.775]],
  [0.454, [0, 0.455, 0.773]],
  [0.456, [0, 0.455, 0.773]],
  [0.458, [0, 0.459, 0.771]],
  [0.46, [0, 0.459, 0.771]],
  [0.462, [0, 0.463, 0.769]],
  [0.464, [0, 0.463, 0.769]],
  [0.466, [0, 0.467, 0.767]],
  [0.468, [0, 0.467, 0.767]],
  [0.47, [0, 0.471, 0.765]],
  [0.472, [0, 0.471, 0.765]],
  [0.474, [0, 0.475, 0.763]],
  [0.476, [0, 0.475, 0.763]],
  [0.477, [0, 0.478, 0.761]],
  [0.479, [0, 0.478, 0.761]],
  [0.481, [0, 0.482, 0.759]],
  [0.483, [0, 0.482, 0.759]],
  [0.485, [0, 0.486, 0.757]],
  [0.487, [0, 0.486, 0.757]],
  [0.489, [0, 0.49, 0.755]],
  [0.491, [0, 0.49, 0.755]],
  [0.493, [0, 0.494, 0.753]],
  [0.495, [0, 0.494, 0.753]],
  [0.497, [0, 0.498, 0.751]],
  [0.499, [0, 0.498, 0.751]],
  [0.501, [0, 0.502, 0.749]],
  [0.503, [0, 0.502, 0.749]],
  [0.505, [0, 0.506, 0.747]],
  [0.507, [0, 0.506, 0.747]],
  [0.509, [0, 0.51, 0.745]],
  [0.511, [0, 0.51, 0.745]],
  [0.513, [0, 0.514, 0.743]],
  [0.515, [0, 0.514, 0.743]],
  [0.517, [0, 0.518, 0.741]],
  [0.519, [0, 0.518, 0.741]],
  [0.521, [0, 0.522, 0.739]],
  [0.523, [0, 0.522, 0.739]],
  [0.524, [0, 0.525, 0.737]],
  [0.526, [0, 0.525, 0.737]],
  [0.528, [0, 0.529, 0.735]],
  [0.53, [0, 0.529, 0.735]],
  [0.532, [0, 0.533, 0.733]],
  [0.534, [0, 0.533, 0.733]],
  [0.536, [0, 0.537, 0.731]],
  [0.538, [0, 0.537, 0.731]],
  [0.54, [0, 0.541, 0.729]],
  [0.542, [0, 0.541, 0.729]],
  [0.544, [0, 0.545, 0.727]],
  [0.546, [0, 0.545, 0.727]],
  [0.548, [0, 0.549, 0.725]],
  [0.55, [0, 0.549, 0.725]],
  [0.552, [0, 0.553, 0.724]],
  [0.554, [0, 0.553, 0.724]],
  [0.556, [0, 0.557, 0.722]],
  [0.558, [0, 0.557, 0.722]],
  [0.56, [0, 0.561, 0.72]],
  [0.562, [0, 0.561, 0.72]],
  [0.564, [0, 0.565, 0.718]],
  [0.566, [0, 0.565, 0.718]],
  [0.568, [0, 0.569, 0.716]],
  [0.569, [0, 0.569, 0.716]],
  [0.571, [0, 0.573, 0.714]],
  [0.573, [0, 0.573, 0.714]],
  [0.575, [0, 0.576, 0.712]],
  [0.577, [0, 0.576, 0.712]],
  [0.579, [0, 0.58, 0.71]],
  [0.581, [0, 0.58, 0.71]],
  [0.583, [0, 0.584, 0.708]],
  [0.585, [0, 0.584, 0.708]],
  [0.587, [0, 0.588, 0.706]],
  [0.589, [0, 0.588, 0.706]],
  [0.591, [0, 0.592, 0.704]],
  [0.593, [0, 0.592, 0.704]],
  [0.595, [0, 0.596, 0.702]],
  [0.597, [0, 0.596, 0.702]],
  [0.599, [0, 0.6, 0.7]],
  [0.601, [0, 0.6, 0.7]],
  [0.603, [0, 0.604, 0.698]],
  [0.605, [0, 0.604, 0.698]],
  [0.607, [0, 0.608, 0.696]],
  [0.609, [0, 0.608, 0.696]],
  [0.611, [0, 0.612, 0.694]],
  [0.613, [0, 0.612, 0.694]],
  [0.614, [0, 0.616, 0.692]],
  [0.616, [0, 0.616, 0.692]],
  [0.618, [0, 0.62, 0.69]],
  [0.62, [0, 0.62, 0.69]],
  [0.622, [0, 0.624, 0.688]],
  [0.624, [0, 0.624, 0.688]],
  [0.626, [0, 0.627, 0.686]],
  [0.628, [0, 0.627, 0.686]],
  [0.63, [0, 0.631, 0.684]],
  [0.632, [0, 0.631, 0.684]],
  [0.634, [0, 0.635, 0.682]],
  [0.636, [0, 0.635, 0.682]],
  [0.638, [0, 0.639, 0.68]],
  [0.64, [0, 0.639, 0.68]],
  [0.642, [0, 0.643, 0.678]],
  [0.644, [0, 0.643, 0.678]],
  [0.646, [0, 0.647, 0.676]],
  [0.648, [0, 0.647, 0.676]],
  [0.65, [0, 0.651, 0.675]],
  [0.652, [0, 0.651, 0.675]],
  [0.654, [0, 0.655, 0.673]],
  [0.656, [0, 0.655, 0.673]],
  [0.658, [0, 0.659, 0.671]],
  [0.659, [0, 0.659, 0.671]],
  [0.661, [0, 0.663, 0.669]],
  [0.663, [0, 0.663, 0.669]],
  [0.665, [0, 0.667, 0.667]],
  [0.667, [0, 0.667, 0.667]],
  [0.669, [0, 0.671, 0.665]],
  [0.671, [0, 0.671, 0.665]],
  [0.673, [0, 0.675, 0.663]],
  [0.675, [0, 0.675, 0.663]],
  [0.677, [0, 0.678, 0.661]],
  [0.679, [0, 0.678, 0.661]],
  [0.681, [0, 0.682, 0.659]],
  [0.683, [0, 0.682, 0.659]],
  [0.685, [0, 0.686, 0.657]],
  [0.687, [0, 0.686, 0.657]],
  [0.689, [0, 0.69, 0.655]],
  [0.691, [0, 0.69, 0.655]],
  [0.693, [0, 0.694, 0.653]],
  [0.695, [0, 0.694, 0.653]],
  [0.697, [0, 0.698, 0.651]],
  [0.699, [0, 0.698, 0.651]],
  [0.701, [0, 0.702, 0.649]],
  [0.703, [0, 0.702, 0.649]],
  [0.705, [0, 0.706, 0.647]],
  [0.706, [0, 0.706, 0.647]],
  [0.708, [0, 0.71, 0.645]],
  [0.71, [0, 0.71, 0.645]],
  [0.712, [0, 0.714, 0.643]],
  [0.714, [0, 0.714, 0.643]],
  [0.716, [0, 0.718, 0.641]],
  [0.718, [0, 0.718, 0.641]],
  [0.72, [0, 0.722, 0.639]],
  [0.722, [0, 0.722, 0.639]],
  [0.724, [0, 0.725, 0.637]],
  [0.726, [0, 0.725, 0.637]],
  [0.728, [0, 0.729, 0.635]],
  [0.73, [0, 0.729, 0.635]],
  [0.732, [0, 0.733, 0.633]],
  [0.734, [0, 0.733, 0.633]],
  [0.736, [0, 0.737, 0.631]],
  [0.738, [0, 0.737, 0.631]],
  [0.74, [0, 0.741, 0.629]],
  [0.742, [0, 0.741, 0.629]],
  [0.744, [0, 0.745, 0.627]],
  [0.746, [0, 0.745, 0.627]],
  [0.748, [0, 0.749, 0.625]],
  [0.75, [0, 0.749, 0.625]],
  [0.751, [0, 0.753, 0.624]],
  [0.753, [0, 0.753, 0.624]],
  [0.755, [0, 0.757, 0.622]],
  [0.757, [0, 0.757, 0.622]],
  [0.759, [0, 0.761, 0.62]],
  [0.761, [0, 0.761, 0.62]],
  [0.763, [0, 0.765, 0.618]],
  [0.765, [0, 0.765, 0.618]],
  [0.767, [0, 0.769, 0.616]],
  [0.769, [0, 0.769, 0.616]],
  [0.771, [0, 0.773, 0.614]],
  [0.773, [0, 0.773, 0.614]],
  [0.775, [0, 0.776, 0.612]],
  [0.777, [0, 0.776, 0.612]],
  [0.779, [0, 0.78, 0.61]],
  [0.781, [0, 0.78, 0.61]],
  [0.783, [0, 0.784, 0.608]],
  [0.785, [0, 0.784, 0.608]],
  [0.787, [0, 0.788, 0.606]],
  [0.789, [0, 0.788, 0.606]],
  [0.791, [0, 0.792, 0.604]],
  [0.793, [0, 0.792, 0.604]],
  [0.795, [0, 0.796, 0.602]],
  [0.796, [0, 0.796, 0.602]],
  [0.798, [0, 0.8, 0.6]],
  [0.8, [0, 0.8, 0.6]],
  [0.802, [0, 0.804, 0.598]],
  [0.804, [0, 0.804, 0.598]],
  [0.806, [0, 0.808, 0.596]],
  [0.808, [0, 0.808, 0.596]],
  [0.81, [0, 0.812, 0.594]],
  [0.812, [0, 0.812, 0.594]],
  [0.814, [0, 0.816, 0.592]],
  [0.816, [0, 0.816, 0.592]],
  [0.818, [0, 0.82, 0.59]],
  [0.82, [0, 0.82, 0.59]],
  [0.822, [0, 0.824, 0.588]],
  [0.824, [0, 0.824, 0.588]],
  [0.826, [0, 0.827, 0.586]],
  [0.828, [0, 0.827, 0.586]],
  [0.83, [0, 0.831, 0.584]],
  [0.832, [0, 0.831, 0.584]],
  [0.834, [0, 0.835, 0.582]],
  [0.836, [0, 0.835, 0.582]],
  [0.838, [0, 0.839, 0.58]],
  [0.84, [0, 0.839, 0.58]],
  [0.841, [0, 0.843, 0.578]],
  [0.843, [0, 0.843, 0.578]],
  [0.845, [0, 0.847, 0.576]],
  [0.847, [0, 0.847, 0.576]],
  [0.849, [0, 0.851, 0.575]],
  [0.851, [0, 0.851, 0.575]],
  [0.853, [0, 0.855, 0.573]],
  [0.855, [0, 0.855, 0.573]],
  [0.857, [0, 0.859, 0.571]],
  [0.859, [0, 0.859, 0.571]],
  [0.861, [0, 0.863, 0.569]],
  [0.863, [0, 0.863, 0.569]],
  [0.865, [0, 0.867, 0.567]],
  [0.867, [0, 0.867, 0.567]],
  [0.869, [0, 0.871, 0.565]],
  [0.871, [0, 0.871, 0.565]],
  [0.873, [0, 0.875, 0.563]],
  [0.875, [0, 0.875, 0.563]],
  [0.877, [0, 0.878, 0.561]],
  [0.879, [0, 0.878, 0.561]],
  [0.881, [0, 0.882, 0.559]],
  [0.883, [0, 0.882, 0.559]],
  [0.885, [0, 0.886, 0.557]],
  [0.886, [0, 0.886, 0.557]],
  [0.888, [0, 0.89, 0.555]],
  [0.89, [0, 0.89, 0.555]],
  [0.892, [0, 0.894, 0.553]],
  [0.894, [0, 0.894, 0.553]],
  [0.896, [0, 0.898, 0.551]],
  [0.898, [0, 0.898, 0.551]],
  [0.9, [0, 0.902, 0.549]],
  [0.902, [0, 0.902, 0.549]],
  [0.904, [0, 0.906, 0.547]],
  [0.906, [0, 0.906, 0.547]],
  [0.908, [0, 0.91, 0.545]],
  [0.91, [0, 0.91, 0.545]],
  [0.912, [0, 0.914, 0.543]],
  [0.914, [0, 0.914, 0.543]],
  [0.916, [0, 0.918, 0.541]],
  [0.918, [0, 0.918, 0.541]],
  [0.92, [0, 0.922, 0.539]],
  [0.922, [0, 0.922, 0.539]],
  [0.924, [0, 0.925, 0.537]],
  [0.926, [0, 0.925, 0.537]],
  [0.928, [0, 0.929, 0.535]],
  [0.93, [0, 0.929, 0.535]],
  [0.932, [0, 0.933, 0.533]],
  [0.933, [0, 0.933, 0.533]],
  [0.935, [0, 0.937, 0.531]],
  [0.937, [0, 0.937, 0.531]],
  [0.939, [0, 0.941, 0.529]],
  [0.941, [0, 0.941, 0.529]],
  [0.943, [0, 0.945, 0.527]],
  [0.945, [0, 0.945, 0.527]],
  [0.947, [0, 0.949, 0.525]],
  [0.949, [0, 0.949, 0.525]],
  [0.951, [0, 0.953, 0.524]],
  [0.953, [0, 0.953, 0.524]],
  [0.955, [0, 0.957, 0.522]],
  [0.957, [0, 0.957, 0.522]],
  [0.959, [0, 0.961, 0.52]],
  [0.961, [0, 0.961, 0.52]],
  [0.963, [0, 0.965, 0.518]],
  [0.965, [0, 0.965, 0.518]],
  [0.967, [0, 0.969, 0.516]],
  [0.969, [0, 0.969, 0.516]],
  [0.971, [0, 0.973, 0.514]],
  [0.973, [0, 0.973, 0.514]],
  [0.975, [0, 0.976, 0.512]],
  [0.977, [0, 0.976, 0.512]],
  [0.978, [0, 0.98, 0.51]],
  [0.98, [0, 0.98, 0.51]],
  [0.982, [0, 0.984, 0.508]],
  [0.984, [0, 0.984, 0.508]],
  [0.986, [0, 0.988, 0.506]],
  [0.988, [0, 0.988, 0.506]],
  [0.99, [0, 0.992, 0.504]],
  [0.992, [0, 0.992, 0.504]],
  [0.994, [0, 0.996, 0.502]],
  [0.996, [0, 0.996, 0.502]],
  [0.998, [0, 1, 0.5]],
  [1, [0, 1, 0.5]]
], Np = [
  [0, [0, 0, 0]],
  [2e-3, [0, 0, 0]],
  [4e-3, [5e-3, 5e-3, 0.016]],
  [6e-3, [5e-3, 5e-3, 0.016]],
  [8e-3, [9e-3, 9e-3, 0.031]],
  [0.01, [9e-3, 9e-3, 0.031]],
  [0.012, [0.014, 0.014, 0.047]],
  [0.014, [0.014, 0.014, 0.047]],
  [0.016, [0.019, 0.019, 0.063]],
  [0.018, [0.019, 0.019, 0.063]],
  [0.02, [0.024, 0.024, 0.078]],
  [0.022, [0.024, 0.024, 0.078]],
  [0.023, [0.028, 0.028, 0.094]],
  [0.025, [0.028, 0.028, 0.094]],
  [0.027, [0.033, 0.033, 0.11]],
  [0.029, [0.033, 0.033, 0.11]],
  [0.031, [0.038, 0.038, 0.125]],
  [0.033, [0.038, 0.038, 0.125]],
  [0.035, [0.042, 0.042, 0.141]],
  [0.037, [0.042, 0.042, 0.141]],
  [0.039, [0.047, 0.047, 0.157]],
  [0.041, [0.047, 0.047, 0.157]],
  [0.043, [0.052, 0.052, 0.173]],
  [0.045, [0.052, 0.052, 0.173]],
  [0.047, [0.056, 0.056, 0.188]],
  [0.049, [0.056, 0.056, 0.188]],
  [0.051, [0.061, 0.061, 0.204]],
  [0.053, [0.061, 0.061, 0.204]],
  [0.055, [0.066, 0.066, 0.22]],
  [0.057, [0.066, 0.066, 0.22]],
  [0.059, [0.071, 0.071, 0.235]],
  [0.061, [0.071, 0.071, 0.235]],
  [0.063, [0.075, 0.075, 0.251]],
  [0.065, [0.075, 0.075, 0.251]],
  [0.067, [0.08, 0.08, 0.267]],
  [0.068, [0.08, 0.08, 0.267]],
  [0.07, [0.085, 0.085, 0.282]],
  [0.072, [0.085, 0.085, 0.282]],
  [0.074, [0.089, 0.089, 0.298]],
  [0.076, [0.089, 0.089, 0.298]],
  [0.078, [0.094, 0.094, 0.314]],
  [0.08, [0.094, 0.094, 0.314]],
  [0.082, [0.099, 0.099, 0.329]],
  [0.084, [0.099, 0.099, 0.329]],
  [0.086, [0.104, 0.104, 0.345]],
  [0.088, [0.104, 0.104, 0.345]],
  [0.09, [0.108, 0.108, 0.361]],
  [0.092, [0.108, 0.108, 0.361]],
  [0.094, [0.113, 0.113, 0.376]],
  [0.096, [0.113, 0.113, 0.376]],
  [0.098, [0.118, 0.118, 0.392]],
  [0.1, [0.118, 0.118, 0.392]],
  [0.102, [0.122, 0.122, 0.408]],
  [0.104, [0.122, 0.122, 0.408]],
  [0.106, [0.127, 0.127, 0.424]],
  [0.108, [0.127, 0.127, 0.424]],
  [0.11, [0.132, 0.132, 0.439]],
  [0.112, [0.132, 0.132, 0.439]],
  [0.114, [0.136, 0.136, 0.455]],
  [0.115, [0.136, 0.136, 0.455]],
  [0.117, [0.141, 0.141, 0.471]],
  [0.119, [0.141, 0.141, 0.471]],
  [0.121, [0.146, 0.146, 0.486]],
  [0.123, [0.146, 0.146, 0.486]],
  [0.125, [0.151, 0.15, 0.501]],
  [0.127, [0.151, 0.15, 0.501]],
  [0.129, [0.155, 0.15, 0.509]],
  [0.131, [0.155, 0.15, 0.509]],
  [0.133, [0.16, 0.15, 0.517]],
  [0.135, [0.16, 0.15, 0.517]],
  [0.137, [0.165, 0.15, 0.525]],
  [0.139, [0.165, 0.15, 0.525]],
  [0.141, [0.169, 0.15, 0.532]],
  [0.143, [0.169, 0.15, 0.532]],
  [0.145, [0.174, 0.15, 0.54]],
  [0.147, [0.174, 0.15, 0.54]],
  [0.149, [0.179, 0.15, 0.548]],
  [0.151, [0.179, 0.15, 0.548]],
  [0.153, [0.184, 0.15, 0.556]],
  [0.155, [0.184, 0.15, 0.556]],
  [0.157, [0.188, 0.15, 0.564]],
  [0.159, [0.188, 0.15, 0.564]],
  [0.16, [0.193, 0.15, 0.572]],
  [0.162, [0.193, 0.15, 0.572]],
  [0.164, [0.198, 0.15, 0.579]],
  [0.166, [0.198, 0.15, 0.579]],
  [0.168, [0.202, 0.15, 0.587]],
  [0.17, [0.202, 0.15, 0.587]],
  [0.172, [0.207, 0.15, 0.595]],
  [0.174, [0.207, 0.15, 0.595]],
  [0.176, [0.212, 0.15, 0.603]],
  [0.178, [0.212, 0.15, 0.603]],
  [0.18, [0.216, 0.15, 0.611]],
  [0.182, [0.216, 0.15, 0.611]],
  [0.184, [0.221, 0.15, 0.619]],
  [0.186, [0.221, 0.15, 0.619]],
  [0.188, [0.226, 0.15, 0.626]],
  [0.19, [0.226, 0.15, 0.626]],
  [0.192, [0.231, 0.15, 0.634]],
  [0.194, [0.231, 0.15, 0.634]],
  [0.196, [0.235, 0.15, 0.642]],
  [0.198, [0.235, 0.15, 0.642]],
  [0.2, [0.24, 0.15, 0.65]],
  [0.202, [0.24, 0.15, 0.65]],
  [0.204, [0.245, 0.15, 0.658]],
  [0.205, [0.245, 0.15, 0.658]],
  [0.207, [0.249, 0.15, 0.666]],
  [0.209, [0.249, 0.15, 0.666]],
  [0.211, [0.254, 0.15, 0.674]],
  [0.213, [0.254, 0.15, 0.674]],
  [0.215, [0.259, 0.15, 0.681]],
  [0.217, [0.259, 0.15, 0.681]],
  [0.219, [0.264, 0.15, 0.689]],
  [0.221, [0.264, 0.15, 0.689]],
  [0.223, [0.268, 0.15, 0.697]],
  [0.225, [0.268, 0.15, 0.697]],
  [0.227, [0.273, 0.15, 0.705]],
  [0.229, [0.273, 0.15, 0.705]],
  [0.231, [0.278, 0.15, 0.713]],
  [0.233, [0.278, 0.15, 0.713]],
  [0.235, [0.282, 0.15, 0.721]],
  [0.237, [0.282, 0.15, 0.721]],
  [0.239, [0.287, 0.15, 0.728]],
  [0.241, [0.287, 0.15, 0.728]],
  [0.243, [0.292, 0.15, 0.736]],
  [0.245, [0.292, 0.15, 0.736]],
  [0.247, [0.296, 0.15, 0.744]],
  [0.249, [0.296, 0.15, 0.744]],
  [0.25, [0.302, 0.15, 0.748]],
  [0.252, [0.302, 0.15, 0.748]],
  [0.254, [0.312, 0.152, 0.74]],
  [0.256, [0.312, 0.152, 0.74]],
  [0.258, [0.321, 0.154, 0.732]],
  [0.26, [0.321, 0.154, 0.732]],
  [0.262, [0.331, 0.155, 0.725]],
  [0.264, [0.331, 0.155, 0.725]],
  [0.266, [0.34, 0.157, 0.717]],
  [0.268, [0.34, 0.157, 0.717]],
  [0.27, [0.349, 0.158, 0.709]],
  [0.272, [0.349, 0.158, 0.709]],
  [0.274, [0.359, 0.16, 0.701]],
  [0.276, [0.359, 0.16, 0.701]],
  [0.278, [0.368, 0.161, 0.693]],
  [0.28, [0.368, 0.161, 0.693]],
  [0.282, [0.378, 0.163, 0.685]],
  [0.284, [0.378, 0.163, 0.685]],
  [0.286, [0.387, 0.165, 0.677]],
  [0.288, [0.387, 0.165, 0.677]],
  [0.29, [0.396, 0.166, 0.67]],
  [0.292, [0.396, 0.166, 0.67]],
  [0.294, [0.406, 0.168, 0.662]],
  [0.295, [0.406, 0.168, 0.662]],
  [0.297, [0.415, 0.169, 0.654]],
  [0.299, [0.415, 0.169, 0.654]],
  [0.301, [0.425, 0.171, 0.646]],
  [0.303, [0.425, 0.171, 0.646]],
  [0.305, [0.434, 0.172, 0.638]],
  [0.307, [0.434, 0.172, 0.638]],
  [0.309, [0.444, 0.174, 0.63]],
  [0.311, [0.444, 0.174, 0.63]],
  [0.313, [0.453, 0.175, 0.623]],
  [0.315, [0.453, 0.175, 0.623]],
  [0.317, [0.462, 0.177, 0.615]],
  [0.319, [0.462, 0.177, 0.615]],
  [0.321, [0.472, 0.179, 0.607]],
  [0.323, [0.472, 0.179, 0.607]],
  [0.325, [0.481, 0.18, 0.599]],
  [0.327, [0.481, 0.18, 0.599]],
  [0.329, [0.491, 0.182, 0.591]],
  [0.331, [0.491, 0.182, 0.591]],
  [0.333, [0.5, 0.183, 0.583]],
  [0.335, [0.5, 0.183, 0.583]],
  [0.337, [0.509, 0.185, 0.575]],
  [0.339, [0.509, 0.185, 0.575]],
  [0.341, [0.519, 0.186, 0.568]],
  [0.342, [0.519, 0.186, 0.568]],
  [0.344, [0.528, 0.188, 0.56]],
  [0.346, [0.528, 0.188, 0.56]],
  [0.348, [0.538, 0.19, 0.552]],
  [0.35, [0.538, 0.19, 0.552]],
  [0.352, [0.547, 0.191, 0.544]],
  [0.354, [0.547, 0.191, 0.544]],
  [0.356, [0.556, 0.193, 0.536]],
  [0.358, [0.556, 0.193, 0.536]],
  [0.36, [0.566, 0.194, 0.528]],
  [0.362, [0.566, 0.194, 0.528]],
  [0.364, [0.575, 0.196, 0.521]],
  [0.366, [0.575, 0.196, 0.521]],
  [0.368, [0.585, 0.197, 0.513]],
  [0.37, [0.585, 0.197, 0.513]],
  [0.372, [0.594, 0.199, 0.505]],
  [0.374, [0.594, 0.199, 0.505]],
  [0.376, [0.605, 0.201, 0.496]],
  [0.378, [0.605, 0.201, 0.496]],
  [0.38, [0.617, 0.202, 0.485]],
  [0.382, [0.617, 0.202, 0.485]],
  [0.384, [0.63, 0.204, 0.474]],
  [0.386, [0.63, 0.204, 0.474]],
  [0.387, [0.642, 0.205, 0.463]],
  [0.389, [0.642, 0.205, 0.463]],
  [0.391, [0.655, 0.207, 0.452]],
  [0.393, [0.655, 0.207, 0.452]],
  [0.395, [0.667, 0.208, 0.441]],
  [0.397, [0.667, 0.208, 0.441]],
  [0.399, [0.68, 0.21, 0.43]],
  [0.401, [0.68, 0.21, 0.43]],
  [0.403, [0.693, 0.212, 0.419]],
  [0.405, [0.693, 0.212, 0.419]],
  [0.407, [0.705, 0.213, 0.408]],
  [0.409, [0.705, 0.213, 0.408]],
  [0.411, [0.718, 0.215, 0.397]],
  [0.413, [0.718, 0.215, 0.397]],
  [0.415, [0.73, 0.216, 0.386]],
  [0.417, [0.73, 0.216, 0.386]],
  [0.419, [0.743, 0.218, 0.375]],
  [0.421, [0.743, 0.218, 0.375]],
  [0.423, [0.755, 0.219, 0.364]],
  [0.425, [0.755, 0.219, 0.364]],
  [0.427, [0.768, 0.221, 0.353]],
  [0.429, [0.768, 0.221, 0.353]],
  [0.431, [0.78, 0.223, 0.342]],
  [0.432, [0.78, 0.223, 0.342]],
  [0.434, [0.793, 0.224, 0.331]],
  [0.436, [0.793, 0.224, 0.331]],
  [0.438, [0.805, 0.226, 0.32]],
  [0.44, [0.805, 0.226, 0.32]],
  [0.442, [0.818, 0.227, 0.309]],
  [0.444, [0.818, 0.227, 0.309]],
  [0.446, [0.831, 0.229, 0.298]],
  [0.448, [0.831, 0.229, 0.298]],
  [0.45, [0.843, 0.23, 0.287]],
  [0.452, [0.843, 0.23, 0.287]],
  [0.454, [0.856, 0.232, 0.276]],
  [0.456, [0.856, 0.232, 0.276]],
  [0.458, [0.868, 0.234, 0.265]],
  [0.46, [0.868, 0.234, 0.265]],
  [0.462, [0.881, 0.235, 0.254]],
  [0.464, [0.881, 0.235, 0.254]],
  [0.466, [0.893, 0.237, 0.243]],
  [0.468, [0.893, 0.237, 0.243]],
  [0.47, [0.906, 0.238, 0.232]],
  [0.472, [0.906, 0.238, 0.232]],
  [0.474, [0.918, 0.24, 0.221]],
  [0.476, [0.918, 0.24, 0.221]],
  [0.477, [0.931, 0.241, 0.21]],
  [0.479, [0.931, 0.241, 0.21]],
  [0.481, [0.944, 0.243, 0.199]],
  [0.483, [0.944, 0.243, 0.199]],
  [0.485, [0.956, 0.245, 0.188]],
  [0.487, [0.956, 0.245, 0.188]],
  [0.489, [0.969, 0.246, 0.177]],
  [0.491, [0.969, 0.246, 0.177]],
  [0.493, [0.981, 0.248, 0.166]],
  [0.495, [0.981, 0.248, 0.166]],
  [0.497, [0.994, 0.249, 0.155]],
  [0.499, [0.994, 0.249, 0.155]],
  [0.501, [0.998, 0.254, 0.148]],
  [0.503, [0.998, 0.254, 0.148]],
  [0.505, [0.995, 0.262, 0.143]],
  [0.507, [0.995, 0.262, 0.143]],
  [0.509, [0.992, 0.27, 0.138]],
  [0.511, [0.992, 0.27, 0.138]],
  [0.513, [0.989, 0.277, 0.134]],
  [0.515, [0.989, 0.277, 0.134]],
  [0.517, [0.986, 0.285, 0.129]],
  [0.519, [0.986, 0.285, 0.129]],
  [0.521, [0.983, 0.293, 0.124]],
  [0.523, [0.983, 0.293, 0.124]],
  [0.524, [0.98, 0.301, 0.119]],
  [0.526, [0.98, 0.301, 0.119]],
  [0.528, [0.976, 0.309, 0.115]],
  [0.53, [0.976, 0.309, 0.115]],
  [0.532, [0.973, 0.317, 0.11]],
  [0.534, [0.973, 0.317, 0.11]],
  [0.536, [0.97, 0.325, 0.105]],
  [0.538, [0.97, 0.325, 0.105]],
  [0.54, [0.967, 0.332, 0.101]],
  [0.542, [0.967, 0.332, 0.101]],
  [0.544, [0.964, 0.34, 0.096]],
  [0.546, [0.964, 0.34, 0.096]],
  [0.548, [0.961, 0.348, 0.091]],
  [0.55, [0.961, 0.348, 0.091]],
  [0.552, [0.958, 0.356, 0.086]],
  [0.554, [0.958, 0.356, 0.086]],
  [0.556, [0.955, 0.364, 0.082]],
  [0.558, [0.955, 0.364, 0.082]],
  [0.56, [0.951, 0.372, 0.077]],
  [0.562, [0.951, 0.372, 0.077]],
  [0.564, [0.948, 0.379, 0.072]],
  [0.566, [0.948, 0.379, 0.072]],
  [0.568, [0.945, 0.387, 0.068]],
  [0.569, [0.945, 0.387, 0.068]],
  [0.571, [0.942, 0.395, 0.063]],
  [0.573, [0.942, 0.395, 0.063]],
  [0.575, [0.939, 0.403, 0.058]],
  [0.577, [0.939, 0.403, 0.058]],
  [0.579, [0.936, 0.411, 0.054]],
  [0.581, [0.936, 0.411, 0.054]],
  [0.583, [0.933, 0.419, 0.049]],
  [0.585, [0.933, 0.419, 0.049]],
  [0.587, [0.929, 0.426, 0.044]],
  [0.589, [0.929, 0.426, 0.044]],
  [0.591, [0.926, 0.434, 0.039]],
  [0.593, [0.926, 0.434, 0.039]],
  [0.595, [0.923, 0.442, 0.035]],
  [0.597, [0.923, 0.442, 0.035]],
  [0.599, [0.92, 0.45, 0.03]],
  [0.601, [0.92, 0.45, 0.03]],
  [0.603, [0.917, 0.458, 0.025]],
  [0.605, [0.917, 0.458, 0.025]],
  [0.607, [0.914, 0.466, 0.021]],
  [0.609, [0.914, 0.466, 0.021]],
  [0.611, [0.911, 0.474, 0.016]],
  [0.613, [0.911, 0.474, 0.016]],
  [0.614, [0.907, 0.481, 0.011]],
  [0.616, [0.907, 0.481, 0.011]],
  [0.618, [0.904, 0.489, 6e-3]],
  [0.62, [0.904, 0.489, 6e-3]],
  [0.622, [0.901, 0.497, 2e-3]],
  [0.624, [0.901, 0.497, 2e-3]],
  [0.626, [0.9, 0.505, 2e-3]],
  [0.628, [0.9, 0.505, 2e-3]],
  [0.63, [0.9, 0.513, 5e-3]],
  [0.632, [0.9, 0.513, 5e-3]],
  [0.634, [0.9, 0.521, 8e-3]],
  [0.636, [0.9, 0.521, 8e-3]],
  [0.638, [0.9, 0.528, 0.011]],
  [0.64, [0.9, 0.528, 0.011]],
  [0.642, [0.9, 0.536, 0.015]],
  [0.644, [0.9, 0.536, 0.015]],
  [0.646, [0.9, 0.544, 0.018]],
  [0.648, [0.9, 0.544, 0.018]],
  [0.65, [0.9, 0.552, 0.021]],
  [0.652, [0.9, 0.552, 0.021]],
  [0.654, [0.9, 0.56, 0.024]],
  [0.656, [0.9, 0.56, 0.024]],
  [0.658, [0.9, 0.568, 0.027]],
  [0.659, [0.9, 0.568, 0.027]],
  [0.661, [0.9, 0.575, 0.03]],
  [0.663, [0.9, 0.575, 0.03]],
  [0.665, [0.9, 0.583, 0.033]],
  [0.667, [0.9, 0.583, 0.033]],
  [0.669, [0.9, 0.591, 0.036]],
  [0.671, [0.9, 0.591, 0.036]],
  [0.673, [0.9, 0.599, 0.04]],
  [0.675, [0.9, 0.599, 0.04]],
  [0.677, [0.9, 0.607, 0.043]],
  [0.679, [0.9, 0.607, 0.043]],
  [0.681, [0.9, 0.615, 0.046]],
  [0.683, [0.9, 0.615, 0.046]],
  [0.685, [0.9, 0.623, 0.049]],
  [0.687, [0.9, 0.623, 0.049]],
  [0.689, [0.9, 0.63, 0.052]],
  [0.691, [0.9, 0.63, 0.052]],
  [0.693, [0.9, 0.638, 0.055]],
  [0.695, [0.9, 0.638, 0.055]],
  [0.697, [0.9, 0.646, 0.058]],
  [0.699, [0.9, 0.646, 0.058]],
  [0.701, [0.9, 0.654, 0.062]],
  [0.703, [0.9, 0.654, 0.062]],
  [0.705, [0.9, 0.662, 0.065]],
  [0.706, [0.9, 0.662, 0.065]],
  [0.708, [0.9, 0.67, 0.068]],
  [0.71, [0.9, 0.67, 0.068]],
  [0.712, [0.9, 0.677, 0.071]],
  [0.714, [0.9, 0.677, 0.071]],
  [0.716, [0.9, 0.685, 0.074]],
  [0.718, [0.9, 0.685, 0.074]],
  [0.72, [0.9, 0.693, 0.077]],
  [0.722, [0.9, 0.693, 0.077]],
  [0.724, [0.9, 0.701, 0.08]],
  [0.726, [0.9, 0.701, 0.08]],
  [0.728, [0.9, 0.709, 0.084]],
  [0.73, [0.9, 0.709, 0.084]],
  [0.732, [0.9, 0.717, 0.087]],
  [0.734, [0.9, 0.717, 0.087]],
  [0.736, [0.9, 0.725, 0.09]],
  [0.738, [0.9, 0.725, 0.09]],
  [0.74, [0.9, 0.732, 0.093]],
  [0.742, [0.9, 0.732, 0.093]],
  [0.744, [0.9, 0.74, 0.096]],
  [0.746, [0.9, 0.74, 0.096]],
  [0.748, [0.9, 0.748, 0.099]],
  [0.75, [0.9, 0.748, 0.099]],
  [0.751, [0.9, 0.754, 0.109]],
  [0.753, [0.9, 0.754, 0.109]],
  [0.755, [0.9, 0.758, 0.122]],
  [0.757, [0.9, 0.758, 0.122]],
  [0.759, [0.9, 0.763, 0.135]],
  [0.761, [0.9, 0.763, 0.135]],
  [0.763, [0.9, 0.768, 0.147]],
  [0.765, [0.9, 0.768, 0.147]],
  [0.767, [0.9, 0.772, 0.16]],
  [0.769, [0.9, 0.772, 0.16]],
  [0.771, [0.9, 0.777, 0.172]],
  [0.773, [0.9, 0.777, 0.172]],
  [0.775, [0.9, 0.782, 0.185]],
  [0.777, [0.9, 0.782, 0.185]],
  [0.779, [0.9, 0.786, 0.197]],
  [0.781, [0.9, 0.786, 0.197]],
  [0.783, [0.9, 0.791, 0.21]],
  [0.785, [0.9, 0.791, 0.21]],
  [0.787, [0.9, 0.796, 0.222]],
  [0.789, [0.9, 0.796, 0.222]],
  [0.791, [0.9, 0.801, 0.235]],
  [0.793, [0.9, 0.801, 0.235]],
  [0.795, [0.9, 0.805, 0.247]],
  [0.796, [0.9, 0.805, 0.247]],
  [0.798, [0.9, 0.81, 0.26]],
  [0.8, [0.9, 0.81, 0.26]],
  [0.802, [0.9, 0.815, 0.273]],
  [0.804, [0.9, 0.815, 0.273]],
  [0.806, [0.9, 0.819, 0.285]],
  [0.808, [0.9, 0.819, 0.285]],
  [0.81, [0.9, 0.824, 0.298]],
  [0.812, [0.9, 0.824, 0.298]],
  [0.814, [0.9, 0.829, 0.31]],
  [0.816, [0.9, 0.829, 0.31]],
  [0.818, [0.9, 0.834, 0.323]],
  [0.82, [0.9, 0.834, 0.323]],
  [0.822, [0.9, 0.838, 0.335]],
  [0.824, [0.9, 0.838, 0.335]],
  [0.826, [0.9, 0.843, 0.348]],
  [0.828, [0.9, 0.843, 0.348]],
  [0.83, [0.9, 0.848, 0.36]],
  [0.832, [0.9, 0.848, 0.36]],
  [0.834, [0.9, 0.852, 0.373]],
  [0.836, [0.9, 0.852, 0.373]],
  [0.838, [0.9, 0.857, 0.385]],
  [0.84, [0.9, 0.857, 0.385]],
  [0.841, [0.9, 0.862, 0.398]],
  [0.843, [0.9, 0.862, 0.398]],
  [0.845, [0.9, 0.866, 0.411]],
  [0.847, [0.9, 0.866, 0.411]],
  [0.849, [0.9, 0.871, 0.423]],
  [0.851, [0.9, 0.871, 0.423]],
  [0.853, [0.9, 0.876, 0.436]],
  [0.855, [0.9, 0.876, 0.436]],
  [0.857, [0.9, 0.881, 0.448]],
  [0.859, [0.9, 0.881, 0.448]],
  [0.861, [0.9, 0.885, 0.461]],
  [0.863, [0.9, 0.885, 0.461]],
  [0.865, [0.9, 0.89, 0.473]],
  [0.867, [0.9, 0.89, 0.473]],
  [0.869, [0.9, 0.895, 0.486]],
  [0.871, [0.9, 0.895, 0.486]],
  [0.873, [0.9, 0.899, 0.498]],
  [0.875, [0.9, 0.899, 0.498]],
  [0.877, [0.903, 0.903, 0.514]],
  [0.879, [0.903, 0.903, 0.514]],
  [0.881, [0.906, 0.906, 0.529]],
  [0.883, [0.906, 0.906, 0.529]],
  [0.885, [0.909, 0.909, 0.545]],
  [0.886, [0.909, 0.909, 0.545]],
  [0.888, [0.912, 0.912, 0.561]],
  [0.89, [0.912, 0.912, 0.561]],
  [0.892, [0.915, 0.915, 0.576]],
  [0.894, [0.915, 0.915, 0.576]],
  [0.896, [0.918, 0.918, 0.592]],
  [0.898, [0.918, 0.918, 0.592]],
  [0.9, [0.922, 0.922, 0.608]],
  [0.902, [0.922, 0.922, 0.608]],
  [0.904, [0.925, 0.925, 0.624]],
  [0.906, [0.925, 0.925, 0.624]],
  [0.908, [0.928, 0.928, 0.639]],
  [0.91, [0.928, 0.928, 0.639]],
  [0.912, [0.931, 0.931, 0.655]],
  [0.914, [0.931, 0.931, 0.655]],
  [0.916, [0.934, 0.934, 0.671]],
  [0.918, [0.934, 0.934, 0.671]],
  [0.92, [0.937, 0.937, 0.686]],
  [0.922, [0.937, 0.937, 0.686]],
  [0.924, [0.94, 0.94, 0.702]],
  [0.926, [0.94, 0.94, 0.702]],
  [0.928, [0.944, 0.944, 0.718]],
  [0.93, [0.944, 0.944, 0.718]],
  [0.932, [0.947, 0.947, 0.733]],
  [0.933, [0.947, 0.947, 0.733]],
  [0.935, [0.95, 0.95, 0.749]],
  [0.937, [0.95, 0.95, 0.749]],
  [0.939, [0.953, 0.953, 0.765]],
  [0.941, [0.953, 0.953, 0.765]],
  [0.943, [0.956, 0.956, 0.78]],
  [0.945, [0.956, 0.956, 0.78]],
  [0.947, [0.959, 0.959, 0.796]],
  [0.949, [0.959, 0.959, 0.796]],
  [0.951, [0.962, 0.962, 0.812]],
  [0.953, [0.962, 0.962, 0.812]],
  [0.955, [0.965, 0.965, 0.827]],
  [0.957, [0.965, 0.965, 0.827]],
  [0.959, [0.969, 0.969, 0.843]],
  [0.961, [0.969, 0.969, 0.843]],
  [0.963, [0.972, 0.972, 0.859]],
  [0.965, [0.972, 0.972, 0.859]],
  [0.967, [0.975, 0.975, 0.875]],
  [0.969, [0.975, 0.975, 0.875]],
  [0.971, [0.978, 0.978, 0.89]],
  [0.973, [0.978, 0.978, 0.89]],
  [0.975, [0.981, 0.981, 0.906]],
  [0.977, [0.981, 0.981, 0.906]],
  [0.978, [0.984, 0.984, 0.922]],
  [0.98, [0.984, 0.984, 0.922]],
  [0.982, [0.987, 0.987, 0.937]],
  [0.984, [0.987, 0.987, 0.937]],
  [0.986, [0.991, 0.991, 0.953]],
  [0.988, [0.991, 0.991, 0.953]],
  [0.99, [0.994, 0.994, 0.969]],
  [0.992, [0.994, 0.994, 0.969]],
  [0.994, [0.997, 0.997, 0.984]],
  [0.996, [0.997, 0.997, 0.984]],
  [0.998, [1, 1, 1]],
  [1, [1, 1, 1]]
], Op = [
  [0, [0, 0, 1]],
  [2e-3, [0, 0, 1]],
  [4e-3, [8e-3, 0, 0.992]],
  [6e-3, [8e-3, 0, 0.992]],
  [8e-3, [0.016, 0, 0.984]],
  [0.01, [0.016, 0, 0.984]],
  [0.012, [0.024, 0, 0.976]],
  [0.014, [0.024, 0, 0.976]],
  [0.016, [0.031, 0, 0.969]],
  [0.018, [0.031, 0, 0.969]],
  [0.02, [0.039, 0, 0.961]],
  [0.022, [0.039, 0, 0.961]],
  [0.023, [0.047, 0, 0.953]],
  [0.025, [0.047, 0, 0.953]],
  [0.027, [0.055, 0, 0.945]],
  [0.029, [0.055, 0, 0.945]],
  [0.031, [0.063, 0, 0.937]],
  [0.033, [0.063, 0, 0.937]],
  [0.035, [0.071, 0, 0.929]],
  [0.037, [0.071, 0, 0.929]],
  [0.039, [0.078, 0, 0.922]],
  [0.041, [0.078, 0, 0.922]],
  [0.043, [0.086, 0, 0.914]],
  [0.045, [0.086, 0, 0.914]],
  [0.047, [0.094, 0, 0.906]],
  [0.049, [0.094, 0, 0.906]],
  [0.051, [0.102, 0, 0.898]],
  [0.053, [0.102, 0, 0.898]],
  [0.055, [0.11, 0, 0.89]],
  [0.057, [0.11, 0, 0.89]],
  [0.059, [0.118, 0, 0.882]],
  [0.061, [0.118, 0, 0.882]],
  [0.063, [0.125, 0, 0.875]],
  [0.065, [0.125, 0, 0.875]],
  [0.067, [0.133, 0, 0.867]],
  [0.068, [0.133, 0, 0.867]],
  [0.07, [0.141, 0, 0.859]],
  [0.072, [0.141, 0, 0.859]],
  [0.074, [0.149, 0, 0.851]],
  [0.076, [0.149, 0, 0.851]],
  [0.078, [0.157, 0, 0.843]],
  [0.08, [0.157, 0, 0.843]],
  [0.082, [0.165, 0, 0.835]],
  [0.084, [0.165, 0, 0.835]],
  [0.086, [0.173, 0, 0.827]],
  [0.088, [0.173, 0, 0.827]],
  [0.09, [0.18, 0, 0.82]],
  [0.092, [0.18, 0, 0.82]],
  [0.094, [0.188, 0, 0.812]],
  [0.096, [0.188, 0, 0.812]],
  [0.098, [0.196, 0, 0.804]],
  [0.1, [0.196, 0, 0.804]],
  [0.102, [0.204, 0, 0.796]],
  [0.104, [0.204, 0, 0.796]],
  [0.106, [0.212, 0, 0.788]],
  [0.108, [0.212, 0, 0.788]],
  [0.11, [0.22, 0, 0.78]],
  [0.112, [0.22, 0, 0.78]],
  [0.114, [0.227, 0, 0.773]],
  [0.115, [0.227, 0, 0.773]],
  [0.117, [0.235, 0, 0.765]],
  [0.119, [0.235, 0, 0.765]],
  [0.121, [0.243, 0, 0.757]],
  [0.123, [0.243, 0, 0.757]],
  [0.125, [0.251, 0, 0.749]],
  [0.127, [0.251, 0, 0.749]],
  [0.129, [0.259, 0, 0.741]],
  [0.131, [0.259, 0, 0.741]],
  [0.133, [0.267, 0, 0.733]],
  [0.135, [0.267, 0, 0.733]],
  [0.137, [0.275, 0, 0.725]],
  [0.139, [0.275, 0, 0.725]],
  [0.141, [0.282, 0, 0.718]],
  [0.143, [0.282, 0, 0.718]],
  [0.145, [0.29, 0, 0.71]],
  [0.147, [0.29, 0, 0.71]],
  [0.149, [0.298, 0, 0.702]],
  [0.151, [0.298, 0, 0.702]],
  [0.153, [0.306, 0, 0.694]],
  [0.155, [0.306, 0, 0.694]],
  [0.157, [0.314, 0, 0.686]],
  [0.159, [0.314, 0, 0.686]],
  [0.16, [0.322, 0, 0.678]],
  [0.162, [0.322, 0, 0.678]],
  [0.164, [0.329, 0, 0.671]],
  [0.166, [0.329, 0, 0.671]],
  [0.168, [0.337, 0, 0.663]],
  [0.17, [0.337, 0, 0.663]],
  [0.172, [0.345, 0, 0.655]],
  [0.174, [0.345, 0, 0.655]],
  [0.176, [0.353, 0, 0.647]],
  [0.178, [0.353, 0, 0.647]],
  [0.18, [0.361, 0, 0.639]],
  [0.182, [0.361, 0, 0.639]],
  [0.184, [0.369, 0, 0.631]],
  [0.186, [0.369, 0, 0.631]],
  [0.188, [0.376, 0, 0.624]],
  [0.19, [0.376, 0, 0.624]],
  [0.192, [0.384, 0, 0.616]],
  [0.194, [0.384, 0, 0.616]],
  [0.196, [0.392, 0, 0.608]],
  [0.198, [0.392, 0, 0.608]],
  [0.2, [0.4, 0, 0.6]],
  [0.202, [0.4, 0, 0.6]],
  [0.204, [0.408, 0, 0.592]],
  [0.205, [0.408, 0, 0.592]],
  [0.207, [0.416, 0, 0.584]],
  [0.209, [0.416, 0, 0.584]],
  [0.211, [0.424, 0, 0.576]],
  [0.213, [0.424, 0, 0.576]],
  [0.215, [0.431, 0, 0.569]],
  [0.217, [0.431, 0, 0.569]],
  [0.219, [0.439, 0, 0.561]],
  [0.221, [0.439, 0, 0.561]],
  [0.223, [0.447, 0, 0.553]],
  [0.225, [0.447, 0, 0.553]],
  [0.227, [0.455, 0, 0.545]],
  [0.229, [0.455, 0, 0.545]],
  [0.231, [0.463, 0, 0.537]],
  [0.233, [0.463, 0, 0.537]],
  [0.235, [0.471, 0, 0.529]],
  [0.237, [0.471, 0, 0.529]],
  [0.239, [0.478, 0, 0.522]],
  [0.241, [0.478, 0, 0.522]],
  [0.243, [0.486, 0, 0.514]],
  [0.245, [0.486, 0, 0.514]],
  [0.247, [0.494, 0, 0.506]],
  [0.249, [0.494, 0, 0.506]],
  [0.25, [0.502, 0, 0.498]],
  [0.252, [0.502, 0, 0.498]],
  [0.254, [0.51, 0, 0.49]],
  [0.256, [0.51, 0, 0.49]],
  [0.258, [0.518, 0, 0.482]],
  [0.26, [0.518, 0, 0.482]],
  [0.262, [0.525, 0, 0.475]],
  [0.264, [0.525, 0, 0.475]],
  [0.266, [0.533, 0, 0.467]],
  [0.268, [0.533, 0, 0.467]],
  [0.27, [0.541, 0, 0.459]],
  [0.272, [0.541, 0, 0.459]],
  [0.274, [0.549, 0, 0.451]],
  [0.276, [0.549, 0, 0.451]],
  [0.278, [0.557, 0, 0.443]],
  [0.28, [0.557, 0, 0.443]],
  [0.282, [0.565, 0, 0.435]],
  [0.284, [0.565, 0, 0.435]],
  [0.286, [0.573, 0, 0.427]],
  [0.288, [0.573, 0, 0.427]],
  [0.29, [0.58, 0, 0.42]],
  [0.292, [0.58, 0, 0.42]],
  [0.294, [0.588, 0, 0.412]],
  [0.295, [0.588, 0, 0.412]],
  [0.297, [0.596, 0, 0.404]],
  [0.299, [0.596, 0, 0.404]],
  [0.301, [0.604, 0, 0.396]],
  [0.303, [0.604, 0, 0.396]],
  [0.305, [0.612, 0, 0.388]],
  [0.307, [0.612, 0, 0.388]],
  [0.309, [0.62, 0, 0.38]],
  [0.311, [0.62, 0, 0.38]],
  [0.313, [0.627, 0, 0.373]],
  [0.315, [0.627, 0, 0.373]],
  [0.317, [0.635, 0, 0.365]],
  [0.319, [0.635, 0, 0.365]],
  [0.321, [0.643, 0, 0.357]],
  [0.323, [0.643, 0, 0.357]],
  [0.325, [0.651, 0, 0.349]],
  [0.327, [0.651, 0, 0.349]],
  [0.329, [0.659, 0, 0.341]],
  [0.331, [0.659, 0, 0.341]],
  [0.333, [0.667, 0, 0.333]],
  [0.335, [0.667, 0, 0.333]],
  [0.337, [0.675, 0, 0.325]],
  [0.339, [0.675, 0, 0.325]],
  [0.341, [0.682, 0, 0.318]],
  [0.342, [0.682, 0, 0.318]],
  [0.344, [0.69, 0, 0.31]],
  [0.346, [0.69, 0, 0.31]],
  [0.348, [0.698, 0, 0.302]],
  [0.35, [0.698, 0, 0.302]],
  [0.352, [0.706, 0, 0.294]],
  [0.354, [0.706, 0, 0.294]],
  [0.356, [0.714, 0, 0.286]],
  [0.358, [0.714, 0, 0.286]],
  [0.36, [0.722, 0, 0.278]],
  [0.362, [0.722, 0, 0.278]],
  [0.364, [0.729, 0, 0.271]],
  [0.366, [0.729, 0, 0.271]],
  [0.368, [0.737, 0, 0.263]],
  [0.37, [0.737, 0, 0.263]],
  [0.372, [0.745, 0, 0.255]],
  [0.374, [0.745, 0, 0.255]],
  [0.376, [0.753, 0, 0.247]],
  [0.378, [0.753, 0, 0.247]],
  [0.38, [0.761, 0, 0.239]],
  [0.382, [0.761, 0, 0.239]],
  [0.384, [0.769, 0, 0.231]],
  [0.386, [0.769, 0, 0.231]],
  [0.387, [0.776, 0, 0.224]],
  [0.389, [0.776, 0, 0.224]],
  [0.391, [0.784, 0, 0.216]],
  [0.393, [0.784, 0, 0.216]],
  [0.395, [0.792, 0, 0.208]],
  [0.397, [0.792, 0, 0.208]],
  [0.399, [0.8, 0, 0.2]],
  [0.401, [0.8, 0, 0.2]],
  [0.403, [0.808, 0, 0.192]],
  [0.405, [0.808, 0, 0.192]],
  [0.407, [0.816, 0, 0.184]],
  [0.409, [0.816, 0, 0.184]],
  [0.411, [0.824, 0, 0.176]],
  [0.413, [0.824, 0, 0.176]],
  [0.415, [0.831, 0, 0.169]],
  [0.417, [0.831, 0, 0.169]],
  [0.419, [0.839, 0, 0.161]],
  [0.421, [0.839, 0, 0.161]],
  [0.423, [0.847, 0, 0.153]],
  [0.425, [0.847, 0, 0.153]],
  [0.427, [0.855, 0, 0.145]],
  [0.429, [0.855, 0, 0.145]],
  [0.431, [0.863, 0, 0.137]],
  [0.432, [0.863, 0, 0.137]],
  [0.434, [0.871, 0, 0.129]],
  [0.436, [0.871, 0, 0.129]],
  [0.438, [0.878, 0, 0.122]],
  [0.44, [0.878, 0, 0.122]],
  [0.442, [0.886, 0, 0.114]],
  [0.444, [0.886, 0, 0.114]],
  [0.446, [0.894, 0, 0.106]],
  [0.448, [0.894, 0, 0.106]],
  [0.45, [0.902, 0, 0.098]],
  [0.452, [0.902, 0, 0.098]],
  [0.454, [0.91, 0, 0.09]],
  [0.456, [0.91, 0, 0.09]],
  [0.458, [0.918, 0, 0.082]],
  [0.46, [0.918, 0, 0.082]],
  [0.462, [0.925, 0, 0.075]],
  [0.464, [0.925, 0, 0.075]],
  [0.466, [0.933, 0, 0.067]],
  [0.468, [0.933, 0, 0.067]],
  [0.47, [0.941, 0, 0.059]],
  [0.472, [0.941, 0, 0.059]],
  [0.474, [0.949, 0, 0.051]],
  [0.476, [0.949, 0, 0.051]],
  [0.477, [0.957, 0, 0.043]],
  [0.479, [0.957, 0, 0.043]],
  [0.481, [0.965, 0, 0.035]],
  [0.483, [0.965, 0, 0.035]],
  [0.485, [0.973, 0, 0.027]],
  [0.487, [0.973, 0, 0.027]],
  [0.489, [0.98, 0, 0.02]],
  [0.491, [0.98, 0, 0.02]],
  [0.493, [0.988, 0, 0.012]],
  [0.495, [0.988, 0, 0.012]],
  [0.497, [0.996, 0, 4e-3]],
  [0.499, [0.996, 0, 4e-3]],
  [0.501, [0.996, 4e-3, 0]],
  [0.503, [0.996, 4e-3, 0]],
  [0.505, [0.988, 0.012, 0]],
  [0.507, [0.988, 0.012, 0]],
  [0.509, [0.98, 0.02, 0]],
  [0.511, [0.98, 0.02, 0]],
  [0.513, [0.973, 0.027, 0]],
  [0.515, [0.973, 0.027, 0]],
  [0.517, [0.965, 0.035, 0]],
  [0.519, [0.965, 0.035, 0]],
  [0.521, [0.957, 0.043, 0]],
  [0.523, [0.957, 0.043, 0]],
  [0.524, [0.949, 0.051, 0]],
  [0.526, [0.949, 0.051, 0]],
  [0.528, [0.941, 0.059, 0]],
  [0.53, [0.941, 0.059, 0]],
  [0.532, [0.933, 0.067, 0]],
  [0.534, [0.933, 0.067, 0]],
  [0.536, [0.925, 0.075, 0]],
  [0.538, [0.925, 0.075, 0]],
  [0.54, [0.918, 0.082, 0]],
  [0.542, [0.918, 0.082, 0]],
  [0.544, [0.91, 0.09, 0]],
  [0.546, [0.91, 0.09, 0]],
  [0.548, [0.902, 0.098, 0]],
  [0.55, [0.902, 0.098, 0]],
  [0.552, [0.894, 0.106, 0]],
  [0.554, [0.894, 0.106, 0]],
  [0.556, [0.886, 0.114, 0]],
  [0.558, [0.886, 0.114, 0]],
  [0.56, [0.878, 0.122, 0]],
  [0.562, [0.878, 0.122, 0]],
  [0.564, [0.871, 0.129, 0]],
  [0.566, [0.871, 0.129, 0]],
  [0.568, [0.863, 0.137, 0]],
  [0.569, [0.863, 0.137, 0]],
  [0.571, [0.855, 0.145, 0]],
  [0.573, [0.855, 0.145, 0]],
  [0.575, [0.847, 0.153, 0]],
  [0.577, [0.847, 0.153, 0]],
  [0.579, [0.839, 0.161, 0]],
  [0.581, [0.839, 0.161, 0]],
  [0.583, [0.831, 0.169, 0]],
  [0.585, [0.831, 0.169, 0]],
  [0.587, [0.824, 0.176, 0]],
  [0.589, [0.824, 0.176, 0]],
  [0.591, [0.816, 0.184, 0]],
  [0.593, [0.816, 0.184, 0]],
  [0.595, [0.808, 0.192, 0]],
  [0.597, [0.808, 0.192, 0]],
  [0.599, [0.8, 0.2, 0]],
  [0.601, [0.8, 0.2, 0]],
  [0.603, [0.792, 0.208, 0]],
  [0.605, [0.792, 0.208, 0]],
  [0.607, [0.784, 0.216, 0]],
  [0.609, [0.784, 0.216, 0]],
  [0.611, [0.776, 0.224, 0]],
  [0.613, [0.776, 0.224, 0]],
  [0.614, [0.769, 0.231, 0]],
  [0.616, [0.769, 0.231, 0]],
  [0.618, [0.761, 0.239, 0]],
  [0.62, [0.761, 0.239, 0]],
  [0.622, [0.753, 0.247, 0]],
  [0.624, [0.753, 0.247, 0]],
  [0.626, [0.745, 0.255, 0]],
  [0.628, [0.745, 0.255, 0]],
  [0.63, [0.737, 0.263, 0]],
  [0.632, [0.737, 0.263, 0]],
  [0.634, [0.729, 0.271, 0]],
  [0.636, [0.729, 0.271, 0]],
  [0.638, [0.722, 0.278, 0]],
  [0.64, [0.722, 0.278, 0]],
  [0.642, [0.714, 0.286, 0]],
  [0.644, [0.714, 0.286, 0]],
  [0.646, [0.706, 0.294, 0]],
  [0.648, [0.706, 0.294, 0]],
  [0.65, [0.698, 0.302, 0]],
  [0.652, [0.698, 0.302, 0]],
  [0.654, [0.69, 0.31, 0]],
  [0.656, [0.69, 0.31, 0]],
  [0.658, [0.682, 0.318, 0]],
  [0.659, [0.682, 0.318, 0]],
  [0.661, [0.675, 0.325, 0]],
  [0.663, [0.675, 0.325, 0]],
  [0.665, [0.667, 0.333, 0]],
  [0.667, [0.667, 0.333, 0]],
  [0.669, [0.659, 0.341, 0]],
  [0.671, [0.659, 0.341, 0]],
  [0.673, [0.651, 0.349, 0]],
  [0.675, [0.651, 0.349, 0]],
  [0.677, [0.643, 0.357, 0]],
  [0.679, [0.643, 0.357, 0]],
  [0.681, [0.635, 0.365, 0]],
  [0.683, [0.635, 0.365, 0]],
  [0.685, [0.627, 0.373, 0]],
  [0.687, [0.627, 0.373, 0]],
  [0.689, [0.62, 0.38, 0]],
  [0.691, [0.62, 0.38, 0]],
  [0.693, [0.612, 0.388, 0]],
  [0.695, [0.612, 0.388, 0]],
  [0.697, [0.604, 0.396, 0]],
  [0.699, [0.604, 0.396, 0]],
  [0.701, [0.596, 0.404, 0]],
  [0.703, [0.596, 0.404, 0]],
  [0.705, [0.588, 0.412, 0]],
  [0.706, [0.588, 0.412, 0]],
  [0.708, [0.58, 0.42, 0]],
  [0.71, [0.58, 0.42, 0]],
  [0.712, [0.573, 0.427, 0]],
  [0.714, [0.573, 0.427, 0]],
  [0.716, [0.565, 0.435, 0]],
  [0.718, [0.565, 0.435, 0]],
  [0.72, [0.557, 0.443, 0]],
  [0.722, [0.557, 0.443, 0]],
  [0.724, [0.549, 0.451, 0]],
  [0.726, [0.549, 0.451, 0]],
  [0.728, [0.541, 0.459, 0]],
  [0.73, [0.541, 0.459, 0]],
  [0.732, [0.533, 0.467, 0]],
  [0.734, [0.533, 0.467, 0]],
  [0.736, [0.525, 0.475, 0]],
  [0.738, [0.525, 0.475, 0]],
  [0.74, [0.518, 0.482, 0]],
  [0.742, [0.518, 0.482, 0]],
  [0.744, [0.51, 0.49, 0]],
  [0.746, [0.51, 0.49, 0]],
  [0.748, [0.502, 0.498, 0]],
  [0.75, [0.502, 0.498, 0]],
  [0.751, [0.494, 0.506, 0]],
  [0.753, [0.494, 0.506, 0]],
  [0.755, [0.486, 0.514, 0]],
  [0.757, [0.486, 0.514, 0]],
  [0.759, [0.478, 0.522, 0]],
  [0.761, [0.478, 0.522, 0]],
  [0.763, [0.471, 0.529, 0]],
  [0.765, [0.471, 0.529, 0]],
  [0.767, [0.463, 0.537, 0]],
  [0.769, [0.463, 0.537, 0]],
  [0.771, [0.455, 0.545, 0]],
  [0.773, [0.455, 0.545, 0]],
  [0.775, [0.447, 0.553, 0]],
  [0.777, [0.447, 0.553, 0]],
  [0.779, [0.439, 0.561, 0]],
  [0.781, [0.439, 0.561, 0]],
  [0.783, [0.431, 0.569, 0]],
  [0.785, [0.431, 0.569, 0]],
  [0.787, [0.424, 0.576, 0]],
  [0.789, [0.424, 0.576, 0]],
  [0.791, [0.416, 0.584, 0]],
  [0.793, [0.416, 0.584, 0]],
  [0.795, [0.408, 0.592, 0]],
  [0.796, [0.408, 0.592, 0]],
  [0.798, [0.4, 0.6, 0]],
  [0.8, [0.4, 0.6, 0]],
  [0.802, [0.392, 0.608, 0]],
  [0.804, [0.392, 0.608, 0]],
  [0.806, [0.384, 0.616, 0]],
  [0.808, [0.384, 0.616, 0]],
  [0.81, [0.376, 0.624, 0]],
  [0.812, [0.376, 0.624, 0]],
  [0.814, [0.369, 0.631, 0]],
  [0.816, [0.369, 0.631, 0]],
  [0.818, [0.361, 0.639, 0]],
  [0.82, [0.361, 0.639, 0]],
  [0.822, [0.353, 0.647, 0]],
  [0.824, [0.353, 0.647, 0]],
  [0.826, [0.345, 0.655, 0]],
  [0.828, [0.345, 0.655, 0]],
  [0.83, [0.337, 0.663, 0]],
  [0.832, [0.337, 0.663, 0]],
  [0.834, [0.329, 0.671, 0]],
  [0.836, [0.329, 0.671, 0]],
  [0.838, [0.322, 0.678, 0]],
  [0.84, [0.322, 0.678, 0]],
  [0.841, [0.314, 0.686, 0]],
  [0.843, [0.314, 0.686, 0]],
  [0.845, [0.306, 0.694, 0]],
  [0.847, [0.306, 0.694, 0]],
  [0.849, [0.298, 0.702, 0]],
  [0.851, [0.298, 0.702, 0]],
  [0.853, [0.29, 0.71, 0]],
  [0.855, [0.29, 0.71, 0]],
  [0.857, [0.282, 0.718, 0]],
  [0.859, [0.282, 0.718, 0]],
  [0.861, [0.275, 0.725, 0]],
  [0.863, [0.275, 0.725, 0]],
  [0.865, [0.267, 0.733, 0]],
  [0.867, [0.267, 0.733, 0]],
  [0.869, [0.259, 0.741, 0]],
  [0.871, [0.259, 0.741, 0]],
  [0.873, [0.251, 0.749, 0]],
  [0.875, [0.251, 0.749, 0]],
  [0.877, [0.243, 0.757, 0]],
  [0.879, [0.243, 0.757, 0]],
  [0.881, [0.235, 0.765, 0]],
  [0.883, [0.235, 0.765, 0]],
  [0.885, [0.227, 0.773, 0]],
  [0.886, [0.227, 0.773, 0]],
  [0.888, [0.22, 0.78, 0]],
  [0.89, [0.22, 0.78, 0]],
  [0.892, [0.212, 0.788, 0]],
  [0.894, [0.212, 0.788, 0]],
  [0.896, [0.204, 0.796, 0]],
  [0.898, [0.204, 0.796, 0]],
  [0.9, [0.196, 0.804, 0]],
  [0.902, [0.196, 0.804, 0]],
  [0.904, [0.188, 0.812, 0]],
  [0.906, [0.188, 0.812, 0]],
  [0.908, [0.18, 0.82, 0]],
  [0.91, [0.18, 0.82, 0]],
  [0.912, [0.173, 0.827, 0]],
  [0.914, [0.173, 0.827, 0]],
  [0.916, [0.165, 0.835, 0]],
  [0.918, [0.165, 0.835, 0]],
  [0.92, [0.157, 0.843, 0]],
  [0.922, [0.157, 0.843, 0]],
  [0.924, [0.149, 0.851, 0]],
  [0.926, [0.149, 0.851, 0]],
  [0.928, [0.141, 0.859, 0]],
  [0.93, [0.141, 0.859, 0]],
  [0.932, [0.133, 0.867, 0]],
  [0.933, [0.133, 0.867, 0]],
  [0.935, [0.125, 0.875, 0]],
  [0.937, [0.125, 0.875, 0]],
  [0.939, [0.118, 0.882, 0]],
  [0.941, [0.118, 0.882, 0]],
  [0.943, [0.11, 0.89, 0]],
  [0.945, [0.11, 0.89, 0]],
  [0.947, [0.102, 0.898, 0]],
  [0.949, [0.102, 0.898, 0]],
  [0.951, [0.094, 0.906, 0]],
  [0.953, [0.094, 0.906, 0]],
  [0.955, [0.086, 0.914, 0]],
  [0.957, [0.086, 0.914, 0]],
  [0.959, [0.078, 0.922, 0]],
  [0.961, [0.078, 0.922, 0]],
  [0.963, [0.071, 0.929, 0]],
  [0.965, [0.071, 0.929, 0]],
  [0.967, [0.063, 0.937, 0]],
  [0.969, [0.063, 0.937, 0]],
  [0.971, [0.055, 0.945, 0]],
  [0.973, [0.055, 0.945, 0]],
  [0.975, [0.047, 0.953, 0]],
  [0.977, [0.047, 0.953, 0]],
  [0.978, [0.039, 0.961, 0]],
  [0.98, [0.039, 0.961, 0]],
  [0.982, [0.031, 0.969, 0]],
  [0.984, [0.031, 0.969, 0]],
  [0.986, [0.024, 0.976, 0]],
  [0.988, [0.024, 0.976, 0]],
  [0.99, [0.016, 0.984, 0]],
  [0.992, [0.016, 0.984, 0]],
  [0.994, [8e-3, 0.992, 0]],
  [0.996, [8e-3, 0.992, 0]],
  [0.998, [0, 1, 0]],
  [1, [0, 1, 0]]
], Up = [
  [0, [0, 0, 0]],
  [2e-3, [0, 0, 0]],
  [4e-3, [7e-3, 2e-3, 6e-3]],
  [6e-3, [7e-3, 2e-3, 6e-3]],
  [8e-3, [0.013, 4e-3, 0.012]],
  [0.01, [0.013, 4e-3, 0.012]],
  [0.012, [0.02, 7e-3, 0.019]],
  [0.014, [0.02, 7e-3, 0.019]],
  [0.016, [0.026, 9e-3, 0.025]],
  [0.018, [0.026, 9e-3, 0.025]],
  [0.02, [0.032, 0.011, 0.032]],
  [0.022, [0.032, 0.011, 0.032]],
  [0.023, [0.037, 0.014, 0.039]],
  [0.025, [0.037, 0.014, 0.039]],
  [0.027, [0.043, 0.016, 0.046]],
  [0.029, [0.043, 0.016, 0.046]],
  [0.031, [0.048, 0.019, 0.053]],
  [0.033, [0.048, 0.019, 0.053]],
  [0.035, [0.053, 0.021, 0.061]],
  [0.037, [0.053, 0.021, 0.061]],
  [0.039, [0.058, 0.024, 0.068]],
  [0.041, [0.058, 0.024, 0.068]],
  [0.043, [0.063, 0.027, 0.076]],
  [0.045, [0.063, 0.027, 0.076]],
  [0.047, [0.067, 0.03, 0.083]],
  [0.049, [0.067, 0.03, 0.083]],
  [0.051, [0.071, 0.033, 0.091]],
  [0.053, [0.071, 0.033, 0.091]],
  [0.055, [0.075, 0.036, 0.099]],
  [0.057, [0.075, 0.036, 0.099]],
  [0.059, [0.079, 0.04, 0.107]],
  [0.061, [0.079, 0.04, 0.107]],
  [0.063, [0.082, 0.043, 0.115]],
  [0.065, [0.082, 0.043, 0.115]],
  [0.067, [0.085, 0.047, 0.123]],
  [0.068, [0.085, 0.047, 0.123]],
  [0.07, [0.088, 0.051, 0.131]],
  [0.072, [0.088, 0.051, 0.131]],
  [0.074, [0.09, 0.054, 0.139]],
  [0.076, [0.09, 0.054, 0.139]],
  [0.078, [0.093, 0.058, 0.146]],
  [0.08, [0.093, 0.058, 0.146]],
  [0.082, [0.095, 0.063, 0.154]],
  [0.084, [0.095, 0.063, 0.154]],
  [0.086, [0.097, 0.067, 0.162]],
  [0.088, [0.097, 0.067, 0.162]],
  [0.09, [0.099, 0.071, 0.17]],
  [0.092, [0.099, 0.071, 0.17]],
  [0.094, [0.1, 0.076, 0.177]],
  [0.096, [0.1, 0.076, 0.177]],
  [0.098, [0.101, 0.08, 0.185]],
  [0.1, [0.101, 0.08, 0.185]],
  [0.102, [0.102, 0.085, 0.192]],
  [0.104, [0.102, 0.085, 0.192]],
  [0.106, [0.103, 0.09, 0.199]],
  [0.108, [0.103, 0.09, 0.199]],
  [0.11, [0.104, 0.095, 0.206]],
  [0.112, [0.104, 0.095, 0.206]],
  [0.114, [0.104, 0.1, 0.213]],
  [0.115, [0.104, 0.1, 0.213]],
  [0.117, [0.104, 0.105, 0.22]],
  [0.119, [0.104, 0.105, 0.22]],
  [0.121, [0.104, 0.111, 0.226]],
  [0.123, [0.104, 0.111, 0.226]],
  [0.125, [0.104, 0.116, 0.233]],
  [0.127, [0.104, 0.116, 0.233]],
  [0.129, [0.104, 0.122, 0.239]],
  [0.131, [0.104, 0.122, 0.239]],
  [0.133, [0.104, 0.128, 0.245]],
  [0.135, [0.104, 0.128, 0.245]],
  [0.137, [0.103, 0.134, 0.251]],
  [0.139, [0.103, 0.134, 0.251]],
  [0.141, [0.102, 0.14, 0.256]],
  [0.143, [0.102, 0.14, 0.256]],
  [0.145, [0.102, 0.146, 0.261]],
  [0.147, [0.102, 0.146, 0.261]],
  [0.149, [0.101, 0.152, 0.266]],
  [0.151, [0.101, 0.152, 0.266]],
  [0.153, [0.1, 0.158, 0.271]],
  [0.155, [0.1, 0.158, 0.271]],
  [0.157, [0.099, 0.164, 0.275]],
  [0.159, [0.099, 0.164, 0.275]],
  [0.16, [0.098, 0.171, 0.28]],
  [0.162, [0.098, 0.171, 0.28]],
  [0.164, [0.096, 0.177, 0.283]],
  [0.166, [0.096, 0.177, 0.283]],
  [0.168, [0.095, 0.184, 0.287]],
  [0.17, [0.095, 0.184, 0.287]],
  [0.172, [0.094, 0.19, 0.29]],
  [0.174, [0.094, 0.19, 0.29]],
  [0.176, [0.093, 0.197, 0.293]],
  [0.178, [0.093, 0.197, 0.293]],
  [0.18, [0.092, 0.204, 0.296]],
  [0.182, [0.092, 0.204, 0.296]],
  [0.184, [0.09, 0.211, 0.299]],
  [0.186, [0.09, 0.211, 0.299]],
  [0.188, [0.089, 0.218, 0.301]],
  [0.19, [0.089, 0.218, 0.301]],
  [0.192, [0.088, 0.224, 0.303]],
  [0.194, [0.088, 0.224, 0.303]],
  [0.196, [0.087, 0.231, 0.304]],
  [0.198, [0.087, 0.231, 0.304]],
  [0.2, [0.086, 0.238, 0.306]],
  [0.202, [0.086, 0.238, 0.306]],
  [0.204, [0.085, 0.245, 0.307]],
  [0.205, [0.085, 0.245, 0.307]],
  [0.207, [0.084, 0.252, 0.307]],
  [0.209, [0.084, 0.252, 0.307]],
  [0.211, [0.084, 0.259, 0.308]],
  [0.213, [0.084, 0.259, 0.308]],
  [0.215, [0.083, 0.266, 0.308]],
  [0.217, [0.083, 0.266, 0.308]],
  [0.219, [0.083, 0.273, 0.308]],
  [0.221, [0.083, 0.273, 0.308]],
  [0.223, [0.082, 0.28, 0.307]],
  [0.225, [0.082, 0.28, 0.307]],
  [0.227, [0.082, 0.287, 0.307]],
  [0.229, [0.082, 0.287, 0.307]],
  [0.231, [0.082, 0.293, 0.306]],
  [0.233, [0.082, 0.293, 0.306]],
  [0.235, [0.082, 0.3, 0.304]],
  [0.237, [0.082, 0.3, 0.304]],
  [0.239, [0.083, 0.307, 0.303]],
  [0.241, [0.083, 0.307, 0.303]],
  [0.243, [0.083, 0.314, 0.301]],
  [0.245, [0.083, 0.314, 0.301]],
  [0.247, [0.084, 0.32, 0.299]],
  [0.249, [0.084, 0.32, 0.299]],
  [0.25, [0.085, 0.327, 0.297]],
  [0.252, [0.085, 0.327, 0.297]],
  [0.254, [0.087, 0.333, 0.295]],
  [0.256, [0.087, 0.333, 0.295]],
  [0.258, [0.088, 0.339, 0.292]],
  [0.26, [0.088, 0.339, 0.292]],
  [0.262, [0.09, 0.346, 0.29]],
  [0.264, [0.09, 0.346, 0.29]],
  [0.266, [0.092, 0.352, 0.287]],
  [0.268, [0.092, 0.352, 0.287]],
  [0.27, [0.094, 0.358, 0.284]],
  [0.272, [0.094, 0.358, 0.284]],
  [0.274, [0.097, 0.364, 0.281]],
  [0.276, [0.097, 0.364, 0.281]],
  [0.278, [0.099, 0.37, 0.277]],
  [0.28, [0.099, 0.37, 0.277]],
  [0.282, [0.103, 0.375, 0.274]],
  [0.284, [0.103, 0.375, 0.274]],
  [0.286, [0.106, 0.381, 0.27]],
  [0.288, [0.106, 0.381, 0.27]],
  [0.29, [0.11, 0.386, 0.266]],
  [0.292, [0.11, 0.386, 0.266]],
  [0.294, [0.114, 0.392, 0.263]],
  [0.295, [0.114, 0.392, 0.263]],
  [0.297, [0.118, 0.397, 0.259]],
  [0.299, [0.118, 0.397, 0.259]],
  [0.301, [0.122, 0.402, 0.255]],
  [0.303, [0.122, 0.402, 0.255]],
  [0.305, [0.127, 0.407, 0.251]],
  [0.307, [0.127, 0.407, 0.251]],
  [0.309, [0.133, 0.412, 0.247]],
  [0.311, [0.133, 0.412, 0.247]],
  [0.313, [0.138, 0.416, 0.243]],
  [0.315, [0.138, 0.416, 0.243]],
  [0.317, [0.144, 0.421, 0.239]],
  [0.319, [0.144, 0.421, 0.239]],
  [0.321, [0.15, 0.425, 0.235]],
  [0.323, [0.15, 0.425, 0.235]],
  [0.325, [0.156, 0.429, 0.231]],
  [0.327, [0.156, 0.429, 0.231]],
  [0.329, [0.163, 0.433, 0.228]],
  [0.331, [0.163, 0.433, 0.228]],
  [0.333, [0.17, 0.437, 0.224]],
  [0.335, [0.17, 0.437, 0.224]],
  [0.337, [0.177, 0.44, 0.22]],
  [0.339, [0.177, 0.44, 0.22]],
  [0.341, [0.185, 0.444, 0.216]],
  [0.342, [0.185, 0.444, 0.216]],
  [0.344, [0.193, 0.447, 0.213]],
  [0.346, [0.193, 0.447, 0.213]],
  [0.348, [0.201, 0.45, 0.21]],
  [0.35, [0.201, 0.45, 0.21]],
  [0.352, [0.209, 0.453, 0.206]],
  [0.354, [0.209, 0.453, 0.206]],
  [0.356, [0.218, 0.456, 0.203]],
  [0.358, [0.218, 0.456, 0.203]],
  [0.36, [0.227, 0.459, 0.2]],
  [0.362, [0.227, 0.459, 0.2]],
  [0.364, [0.236, 0.461, 0.198]],
  [0.366, [0.236, 0.461, 0.198]],
  [0.368, [0.246, 0.463, 0.195]],
  [0.37, [0.246, 0.463, 0.195]],
  [0.372, [0.255, 0.466, 0.193]],
  [0.374, [0.255, 0.466, 0.193]],
  [0.376, [0.265, 0.468, 0.191]],
  [0.378, [0.265, 0.468, 0.191]],
  [0.38, [0.276, 0.469, 0.189]],
  [0.382, [0.276, 0.469, 0.189]],
  [0.384, [0.286, 0.471, 0.187]],
  [0.386, [0.286, 0.471, 0.187]],
  [0.387, [0.296, 0.473, 0.186]],
  [0.389, [0.296, 0.473, 0.186]],
  [0.391, [0.307, 0.474, 0.185]],
  [0.393, [0.307, 0.474, 0.185]],
  [0.395, [0.318, 0.475, 0.184]],
  [0.397, [0.318, 0.475, 0.184]],
  [0.399, [0.329, 0.476, 0.184]],
  [0.401, [0.329, 0.476, 0.184]],
  [0.403, [0.341, 0.477, 0.184]],
  [0.405, [0.341, 0.477, 0.184]],
  [0.407, [0.352, 0.478, 0.184]],
  [0.409, [0.352, 0.478, 0.184]],
  [0.411, [0.363, 0.479, 0.184]],
  [0.413, [0.363, 0.479, 0.184]],
  [0.415, [0.375, 0.479, 0.185]],
  [0.417, [0.375, 0.479, 0.185]],
  [0.419, [0.387, 0.48, 0.186]],
  [0.421, [0.387, 0.48, 0.186]],
  [0.423, [0.399, 0.48, 0.187]],
  [0.425, [0.399, 0.48, 0.187]],
  [0.427, [0.411, 0.48, 0.189]],
  [0.429, [0.411, 0.48, 0.189]],
  [0.431, [0.423, 0.481, 0.191]],
  [0.432, [0.423, 0.481, 0.191]],
  [0.434, [0.435, 0.481, 0.194]],
  [0.436, [0.435, 0.481, 0.194]],
  [0.438, [0.447, 0.481, 0.197]],
  [0.44, [0.447, 0.481, 0.197]],
  [0.442, [0.459, 0.481, 0.2]],
  [0.444, [0.459, 0.481, 0.2]],
  [0.446, [0.471, 0.48, 0.203]],
  [0.448, [0.471, 0.48, 0.203]],
  [0.45, [0.483, 0.48, 0.207]],
  [0.452, [0.483, 0.48, 0.207]],
  [0.454, [0.495, 0.48, 0.211]],
  [0.456, [0.495, 0.48, 0.211]],
  [0.458, [0.507, 0.48, 0.216]],
  [0.46, [0.507, 0.48, 0.216]],
  [0.462, [0.519, 0.479, 0.221]],
  [0.464, [0.519, 0.479, 0.221]],
  [0.466, [0.531, 0.479, 0.227]],
  [0.468, [0.531, 0.479, 0.227]],
  [0.47, [0.543, 0.478, 0.232]],
  [0.472, [0.543, 0.478, 0.232]],
  [0.474, [0.554, 0.478, 0.238]],
  [0.476, [0.554, 0.478, 0.238]],
  [0.477, [0.566, 0.477, 0.245]],
  [0.479, [0.566, 0.477, 0.245]],
  [0.481, [0.578, 0.477, 0.252]],
  [0.483, [0.578, 0.477, 0.252]],
  [0.485, [0.589, 0.476, 0.259]],
  [0.487, [0.589, 0.476, 0.259]],
  [0.489, [0.6, 0.476, 0.266]],
  [0.491, [0.6, 0.476, 0.266]],
  [0.493, [0.611, 0.476, 0.274]],
  [0.495, [0.611, 0.476, 0.274]],
  [0.497, [0.622, 0.475, 0.282]],
  [0.499, [0.622, 0.475, 0.282]],
  [0.501, [0.633, 0.475, 0.291]],
  [0.503, [0.633, 0.475, 0.291]],
  [0.505, [0.643, 0.474, 0.299]],
  [0.507, [0.643, 0.474, 0.299]],
  [0.509, [0.654, 0.474, 0.309]],
  [0.511, [0.654, 0.474, 0.309]],
  [0.513, [0.664, 0.474, 0.318]],
  [0.515, [0.664, 0.474, 0.318]],
  [0.517, [0.674, 0.474, 0.328]],
  [0.519, [0.674, 0.474, 0.328]],
  [0.521, [0.683, 0.474, 0.338]],
  [0.523, [0.683, 0.474, 0.338]],
  [0.524, [0.693, 0.474, 0.348]],
  [0.526, [0.693, 0.474, 0.348]],
  [0.528, [0.702, 0.474, 0.358]],
  [0.53, [0.702, 0.474, 0.358]],
  [0.532, [0.711, 0.474, 0.369]],
  [0.534, [0.711, 0.474, 0.369]],
  [0.536, [0.719, 0.474, 0.38]],
  [0.538, [0.719, 0.474, 0.38]],
  [0.54, [0.727, 0.474, 0.391]],
  [0.542, [0.727, 0.474, 0.391]],
  [0.544, [0.735, 0.475, 0.403]],
  [0.546, [0.735, 0.475, 0.403]],
  [0.548, [0.743, 0.475, 0.414]],
  [0.55, [0.743, 0.475, 0.414]],
  [0.552, [0.751, 0.476, 0.426]],
  [0.554, [0.751, 0.476, 0.426]],
  [0.556, [0.758, 0.477, 0.438]],
  [0.558, [0.758, 0.477, 0.438]],
  [0.56, [0.764, 0.478, 0.45]],
  [0.562, [0.764, 0.478, 0.45]],
  [0.564, [0.771, 0.479, 0.462]],
  [0.566, [0.771, 0.479, 0.462]],
  [0.568, [0.777, 0.48, 0.474]],
  [0.569, [0.777, 0.48, 0.474]],
  [0.571, [0.783, 0.482, 0.487]],
  [0.573, [0.783, 0.482, 0.487]],
  [0.575, [0.788, 0.483, 0.499]],
  [0.577, [0.788, 0.483, 0.499]],
  [0.579, [0.794, 0.485, 0.512]],
  [0.581, [0.794, 0.485, 0.512]],
  [0.583, [0.798, 0.487, 0.524]],
  [0.585, [0.798, 0.487, 0.524]],
  [0.587, [0.803, 0.489, 0.537]],
  [0.589, [0.803, 0.489, 0.537]],
  [0.591, [0.807, 0.491, 0.55]],
  [0.593, [0.807, 0.491, 0.55]],
  [0.595, [0.811, 0.493, 0.563]],
  [0.597, [0.811, 0.493, 0.563]],
  [0.599, [0.815, 0.495, 0.575]],
  [0.601, [0.815, 0.495, 0.575]],
  [0.603, [0.818, 0.498, 0.588]],
  [0.605, [0.818, 0.498, 0.588]],
  [0.607, [0.821, 0.501, 0.601]],
  [0.609, [0.821, 0.501, 0.601]],
  [0.611, [0.823, 0.504, 0.613]],
  [0.613, [0.823, 0.504, 0.613]],
  [0.614, [0.826, 0.507, 0.626]],
  [0.616, [0.826, 0.507, 0.626]],
  [0.618, [0.828, 0.51, 0.638]],
  [0.62, [0.828, 0.51, 0.638]],
  [0.622, [0.829, 0.514, 0.651]],
  [0.624, [0.829, 0.514, 0.651]],
  [0.626, [0.831, 0.518, 0.663]],
  [0.628, [0.831, 0.518, 0.663]],
  [0.63, [0.832, 0.521, 0.675]],
  [0.632, [0.832, 0.521, 0.675]],
  [0.634, [0.833, 0.525, 0.687]],
  [0.636, [0.833, 0.525, 0.687]],
  [0.638, [0.833, 0.53, 0.699]],
  [0.64, [0.833, 0.53, 0.699]],
  [0.642, [0.833, 0.534, 0.71]],
  [0.644, [0.833, 0.534, 0.71]],
  [0.646, [0.833, 0.538, 0.722]],
  [0.648, [0.833, 0.538, 0.722]],
  [0.65, [0.833, 0.543, 0.733]],
  [0.652, [0.833, 0.543, 0.733]],
  [0.654, [0.833, 0.548, 0.744]],
  [0.656, [0.833, 0.548, 0.744]],
  [0.658, [0.832, 0.553, 0.755]],
  [0.659, [0.832, 0.553, 0.755]],
  [0.661, [0.831, 0.558, 0.766]],
  [0.663, [0.831, 0.558, 0.766]],
  [0.665, [0.83, 0.563, 0.776]],
  [0.667, [0.83, 0.563, 0.776]],
  [0.669, [0.829, 0.569, 0.786]],
  [0.671, [0.829, 0.569, 0.786]],
  [0.673, [0.827, 0.574, 0.796]],
  [0.675, [0.827, 0.574, 0.796]],
  [0.677, [0.825, 0.58, 0.806]],
  [0.679, [0.825, 0.58, 0.806]],
  [0.681, [0.824, 0.586, 0.815]],
  [0.683, [0.824, 0.586, 0.815]],
  [0.685, [0.822, 0.592, 0.824]],
  [0.687, [0.822, 0.592, 0.824]],
  [0.689, [0.819, 0.598, 0.833]],
  [0.691, [0.819, 0.598, 0.833]],
  [0.693, [0.817, 0.604, 0.842]],
  [0.695, [0.817, 0.604, 0.842]],
  [0.697, [0.815, 0.61, 0.85]],
  [0.699, [0.815, 0.61, 0.85]],
  [0.701, [0.812, 0.617, 0.858]],
  [0.703, [0.812, 0.617, 0.858]],
  [0.705, [0.81, 0.623, 0.865]],
  [0.706, [0.81, 0.623, 0.865]],
  [0.708, [0.807, 0.63, 0.873]],
  [0.71, [0.807, 0.63, 0.873]],
  [0.712, [0.805, 0.637, 0.88]],
  [0.714, [0.805, 0.637, 0.88]],
  [0.716, [0.802, 0.643, 0.886]],
  [0.718, [0.802, 0.643, 0.886]],
  [0.72, [0.799, 0.65, 0.893]],
  [0.722, [0.799, 0.65, 0.893]],
  [0.724, [0.796, 0.657, 0.899]],
  [0.726, [0.796, 0.657, 0.899]],
  [0.728, [0.794, 0.664, 0.904]],
  [0.73, [0.794, 0.664, 0.904]],
  [0.732, [0.791, 0.671, 0.91]],
  [0.734, [0.791, 0.671, 0.91]],
  [0.736, [0.788, 0.678, 0.915]],
  [0.738, [0.788, 0.678, 0.915]],
  [0.74, [0.786, 0.685, 0.919]],
  [0.742, [0.786, 0.685, 0.919]],
  [0.744, [0.783, 0.693, 0.924]],
  [0.746, [0.783, 0.693, 0.924]],
  [0.748, [0.78, 0.7, 0.928]],
  [0.75, [0.78, 0.7, 0.928]],
  [0.751, [0.778, 0.707, 0.931]],
  [0.753, [0.778, 0.707, 0.931]],
  [0.755, [0.776, 0.714, 0.935]],
  [0.757, [0.776, 0.714, 0.935]],
  [0.759, [0.773, 0.721, 0.938]],
  [0.761, [0.773, 0.721, 0.938]],
  [0.763, [0.771, 0.729, 0.941]],
  [0.765, [0.771, 0.729, 0.941]],
  [0.767, [0.769, 0.736, 0.943]],
  [0.769, [0.769, 0.736, 0.943]],
  [0.771, [0.767, 0.743, 0.946]],
  [0.773, [0.767, 0.743, 0.946]],
  [0.775, [0.765, 0.75, 0.948]],
  [0.777, [0.765, 0.75, 0.948]],
  [0.779, [0.764, 0.757, 0.949]],
  [0.781, [0.764, 0.757, 0.949]],
  [0.783, [0.762, 0.764, 0.951]],
  [0.785, [0.762, 0.764, 0.951]],
  [0.787, [0.761, 0.771, 0.952]],
  [0.789, [0.761, 0.771, 0.952]],
  [0.791, [0.76, 0.778, 0.953]],
  [0.793, [0.76, 0.778, 0.953]],
  [0.795, [0.759, 0.785, 0.954]],
  [0.796, [0.759, 0.785, 0.954]],
  [0.798, [0.759, 0.792, 0.954]],
  [0.8, [0.759, 0.792, 0.954]],
  [0.802, [0.758, 0.799, 0.955]],
  [0.804, [0.758, 0.799, 0.955]],
  [0.806, [0.758, 0.806, 0.955]],
  [0.808, [0.758, 0.806, 0.955]],
  [0.81, [0.758, 0.812, 0.955]],
  [0.812, [0.758, 0.812, 0.955]],
  [0.814, [0.758, 0.819, 0.955]],
  [0.816, [0.758, 0.819, 0.955]],
  [0.818, [0.759, 0.825, 0.954]],
  [0.82, [0.759, 0.825, 0.954]],
  [0.822, [0.76, 0.832, 0.954]],
  [0.824, [0.76, 0.832, 0.954]],
  [0.826, [0.761, 0.838, 0.953]],
  [0.828, [0.761, 0.838, 0.953]],
  [0.83, [0.762, 0.844, 0.952]],
  [0.832, [0.762, 0.844, 0.952]],
  [0.834, [0.763, 0.85, 0.952]],
  [0.836, [0.763, 0.85, 0.952]],
  [0.838, [0.765, 0.856, 0.951]],
  [0.84, [0.765, 0.856, 0.951]],
  [0.841, [0.767, 0.862, 0.95]],
  [0.843, [0.767, 0.862, 0.95]],
  [0.845, [0.769, 0.868, 0.949]],
  [0.847, [0.769, 0.868, 0.949]],
  [0.849, [0.772, 0.873, 0.947]],
  [0.851, [0.772, 0.873, 0.947]],
  [0.853, [0.775, 0.879, 0.946]],
  [0.855, [0.775, 0.879, 0.946]],
  [0.857, [0.778, 0.884, 0.945]],
  [0.859, [0.778, 0.884, 0.945]],
  [0.861, [0.781, 0.889, 0.944]],
  [0.863, [0.781, 0.889, 0.944]],
  [0.865, [0.784, 0.894, 0.943]],
  [0.867, [0.784, 0.894, 0.943]],
  [0.869, [0.788, 0.899, 0.942]],
  [0.871, [0.788, 0.899, 0.942]],
  [0.873, [0.792, 0.904, 0.941]],
  [0.875, [0.792, 0.904, 0.941]],
  [0.877, [0.796, 0.909, 0.94]],
  [0.879, [0.796, 0.909, 0.94]],
  [0.881, [0.801, 0.913, 0.939]],
  [0.883, [0.801, 0.913, 0.939]],
  [0.885, [0.806, 0.918, 0.938]],
  [0.886, [0.806, 0.918, 0.938]],
  [0.888, [0.811, 0.922, 0.937]],
  [0.89, [0.811, 0.922, 0.937]],
  [0.892, [0.816, 0.926, 0.937]],
  [0.894, [0.816, 0.926, 0.937]],
  [0.896, [0.821, 0.93, 0.936]],
  [0.898, [0.821, 0.93, 0.936]],
  [0.9, [0.827, 0.934, 0.936]],
  [0.902, [0.827, 0.934, 0.936]],
  [0.904, [0.833, 0.938, 0.936]],
  [0.906, [0.833, 0.938, 0.936]],
  [0.908, [0.839, 0.941, 0.936]],
  [0.91, [0.839, 0.941, 0.936]],
  [0.912, [0.845, 0.945, 0.936]],
  [0.914, [0.845, 0.945, 0.936]],
  [0.916, [0.851, 0.948, 0.936]],
  [0.918, [0.851, 0.948, 0.936]],
  [0.92, [0.857, 0.951, 0.937]],
  [0.922, [0.857, 0.951, 0.937]],
  [0.924, [0.864, 0.954, 0.938]],
  [0.926, [0.864, 0.954, 0.938]],
  [0.928, [0.871, 0.957, 0.939]],
  [0.93, [0.871, 0.957, 0.939]],
  [0.932, [0.878, 0.96, 0.94]],
  [0.933, [0.878, 0.96, 0.94]],
  [0.935, [0.885, 0.963, 0.941]],
  [0.937, [0.885, 0.963, 0.941]],
  [0.939, [0.892, 0.966, 0.943]],
  [0.941, [0.892, 0.966, 0.943]],
  [0.943, [0.899, 0.969, 0.945]],
  [0.945, [0.899, 0.969, 0.945]],
  [0.947, [0.906, 0.971, 0.947]],
  [0.949, [0.906, 0.971, 0.947]],
  [0.951, [0.913, 0.974, 0.949]],
  [0.953, [0.913, 0.974, 0.949]],
  [0.955, [0.921, 0.976, 0.952]],
  [0.957, [0.921, 0.976, 0.952]],
  [0.959, [0.928, 0.979, 0.955]],
  [0.961, [0.928, 0.979, 0.955]],
  [0.963, [0.935, 0.981, 0.958]],
  [0.965, [0.935, 0.981, 0.958]],
  [0.967, [0.943, 0.983, 0.962]],
  [0.969, [0.943, 0.983, 0.962]],
  [0.971, [0.95, 0.985, 0.966]],
  [0.973, [0.95, 0.985, 0.966]],
  [0.975, [0.957, 0.987, 0.97]],
  [0.977, [0.957, 0.987, 0.97]],
  [0.978, [0.965, 0.99, 0.974]],
  [0.98, [0.965, 0.99, 0.974]],
  [0.982, [0.972, 0.992, 0.979]],
  [0.984, [0.972, 0.992, 0.979]],
  [0.986, [0.979, 0.994, 0.984]],
  [0.988, [0.979, 0.994, 0.984]],
  [0.99, [0.986, 0.996, 0.989]],
  [0.992, [0.986, 0.996, 0.989]],
  [0.994, [0.993, 0.998, 0.994]],
  [0.996, [0.993, 0.998, 0.994]],
  [0.998, [1, 1, 1]],
  [1, [1, 1, 1]]
], Fp = [
  [0, [1, 0, 0]],
  [2e-3, [1, 0, 0]],
  [4e-3, [1, 0.378, 0.21]],
  [6e-3, [1, 0.378, 0.21]],
  [8e-3, [1, 0.701, 0.493]],
  [0.01, [1, 0.701, 0.493]],
  [0.012, [1, 0.918, 0.777]],
  [0.014, [1, 0.918, 0.777]],
  [0.016, [1, 1, 1]],
  [0.018, [1, 1, 1]],
  [0.02, [0.803, 0.932, 1]],
  [0.022, [0.803, 0.932, 1]],
  [0.023, [0.521, 0.726, 1]],
  [0.025, [0.521, 0.726, 1]],
  [0.027, [0.236, 0.412, 1]],
  [0.029, [0.236, 0.412, 1]],
  [0.031, [0, 0.037, 1]],
  [0.033, [0, 0.037, 1]],
  [0.035, [0, 0, 0.816]],
  [0.037, [0, 0, 0.816]],
  [0.039, [0, 0, 0.535]],
  [0.041, [0, 0, 0.535]],
  [0.043, [0, 0, 0.249]],
  [0.045, [0, 0, 0.249]],
  [0.047, [0, 0, 0]],
  [0.049, [0, 0, 0]],
  [0.051, [0.172, 0, 0]],
  [0.053, [0.172, 0, 0]],
  [0.055, [0.452, 0, 0]],
  [0.057, [0.452, 0, 0]],
  [0.059, [0.738, 0, 0]],
  [0.061, [0.738, 0, 0]],
  [0.063, [0.99, 0, 0]],
  [0.065, [0.99, 0, 0]],
  [0.067, [1, 0.309, 0.16]],
  [0.068, [1, 0.309, 0.16]],
  [0.07, [1, 0.646, 0.438]],
  [0.072, [1, 0.646, 0.438]],
  [0.074, [1, 0.887, 0.725]],
  [0.076, [1, 0.887, 0.725]],
  [0.078, [1, 0.996, 0.979]],
  [0.08, [1, 0.996, 0.979]],
  [0.082, [0.853, 0.957, 1]],
  [0.084, [0.853, 0.957, 1]],
  [0.086, [0.576, 0.775, 1]],
  [0.088, [0.576, 0.775, 1]],
  [0.09, [0.288, 0.479, 1]],
  [0.092, [0.288, 0.479, 1]],
  [0.094, [0.032, 0.111, 1]],
  [0.096, [0.032, 0.111, 1]],
  [0.098, [0, 0, 0.865]],
  [0.1, [0, 0, 0.865]],
  [0.102, [0, 0, 0.59]],
  [0.104, [0, 0, 0.59]],
  [0.106, [0, 0, 0.301]],
  [0.108, [0, 0, 0.301]],
  [0.11, [0, 0, 0.043]],
  [0.112, [0, 0, 0.043]],
  [0.114, [0.123, 0, 0]],
  [0.115, [0.123, 0, 0]],
  [0.117, [0.396, 0, 0]],
  [0.119, [0.396, 0, 0]],
  [0.121, [0.685, 0, 0]],
  [0.123, [0.685, 0, 0]],
  [0.125, [0.946, 0, 0]],
  [0.127, [0.946, 0, 0]],
  [0.129, [1, 0.238, 0.111]],
  [0.131, [1, 0.238, 0.111]],
  [0.133, [1, 0.588, 0.383]],
  [0.135, [1, 0.588, 0.383]],
  [0.137, [1, 0.85, 0.672]],
  [0.139, [1, 0.85, 0.672]],
  [0.141, [1, 0.986, 0.935]],
  [0.143, [1, 0.986, 0.935]],
  [0.145, [0.901, 0.976, 1]],
  [0.147, [0.901, 0.976, 1]],
  [0.149, [0.631, 0.82, 1]],
  [0.151, [0.631, 0.82, 1]],
  [0.153, [0.342, 0.542, 1]],
  [0.155, [0.342, 0.542, 1]],
  [0.157, [0.076, 0.184, 1]],
  [0.159, [0.076, 0.184, 1]],
  [0.16, [0, 0, 0.912]],
  [0.162, [0, 0, 0.912]],
  [0.164, [0, 0, 0.645]],
  [0.166, [0, 0, 0.645]],
  [0.168, [0, 0, 0.355]],
  [0.17, [0, 0, 0.355]],
  [0.172, [0, 0, 0.088]],
  [0.174, [0, 0, 0.088]],
  [0.176, [0.076, 0, 0]],
  [0.178, [0.076, 0, 0]],
  [0.18, [0.342, 0, 0]],
  [0.182, [0.342, 0, 0]],
  [0.184, [0.631, 0, 0]],
  [0.186, [0.631, 0, 0]],
  [0.188, [0.901, 0, 0]],
  [0.19, [0.901, 0, 0]],
  [0.192, [1, 0.166, 0.065]],
  [0.194, [1, 0.166, 0.065]],
  [0.196, [1, 0.526, 0.328]],
  [0.198, [1, 0.526, 0.328]],
  [0.2, [1, 0.809, 0.617]],
  [0.202, [1, 0.809, 0.617]],
  [0.204, [1, 0.971, 0.889]],
  [0.205, [1, 0.971, 0.889]],
  [0.207, [0.946, 0.989, 1]],
  [0.209, [0.946, 0.989, 1]],
  [0.211, [0.685, 0.86, 1]],
  [0.213, [0.685, 0.86, 1]],
  [0.215, [0.396, 0.603, 1]],
  [0.217, [0.396, 0.603, 1]],
  [0.219, [0.123, 0.256, 1]],
  [0.221, [0.123, 0.256, 1]],
  [0.223, [0, 0, 0.957]],
  [0.225, [0, 0, 0.957]],
  [0.227, [0, 0, 0.699]],
  [0.229, [0, 0, 0.699]],
  [0.231, [0, 0, 0.41]],
  [0.233, [0, 0, 0.41]],
  [0.235, [0, 0, 0.135]],
  [0.237, [0, 0, 0.135]],
  [0.239, [0.032, 0, 0]],
  [0.241, [0.032, 0, 0]],
  [0.243, [0.288, 0, 0]],
  [0.245, [0.288, 0, 0]],
  [0.247, [0.576, 0, 0]],
  [0.249, [0.576, 0, 0]],
  [0.25, [0.853, 0, 0]],
  [0.252, [0.853, 0, 0]],
  [0.254, [1, 0.092, 0.021]],
  [0.256, [1, 0.092, 0.021]],
  [0.258, [1, 0.462, 0.275]],
  [0.26, [1, 0.462, 0.275]],
  [0.262, [1, 0.763, 0.562]],
  [0.264, [1, 0.763, 0.562]],
  [0.266, [1, 0.951, 0.84]],
  [0.268, [1, 0.951, 0.84]],
  [0.27, [0.99, 0.997, 1]],
  [0.272, [0.99, 0.997, 1]],
  [0.274, [0.738, 0.895, 1]],
  [0.276, [0.738, 0.895, 1]],
  [0.278, [0.452, 0.66, 1]],
  [0.28, [0.452, 0.66, 1]],
  [0.282, [0.172, 0.327, 1]],
  [0.284, [0.172, 0.327, 1]],
  [0.286, [0, 0, 1]],
  [0.288, [0, 0, 1]],
  [0.29, [0, 0, 0.751]],
  [0.292, [0, 0, 0.751]],
  [0.294, [0, 0, 0.465]],
  [0.295, [0, 0, 0.465]],
  [0.297, [0, 0, 0.184]],
  [0.299, [0, 0, 0.184]],
  [0.301, [0, 0, 0]],
  [0.303, [0, 0, 0]],
  [0.305, [0.236, 0, 0]],
  [0.307, [0.236, 0, 0]],
  [0.309, [0.521, 0, 0]],
  [0.311, [0.521, 0, 0]],
  [0.313, [0.803, 0, 0]],
  [0.315, [0.803, 0, 0]],
  [0.317, [1, 0.018, 0]],
  [0.319, [1, 0.018, 0]],
  [0.321, [1, 0.395, 0.223]],
  [0.323, [1, 0.395, 0.223]],
  [0.325, [1, 0.714, 0.507]],
  [0.327, [1, 0.714, 0.507]],
  [0.329, [1, 0.926, 0.79]],
  [0.331, [1, 0.926, 0.79]],
  [0.333, [1, 1, 1]],
  [0.335, [1, 1, 1]],
  [0.337, [0.79, 0.926, 1]],
  [0.339, [0.79, 0.926, 1]],
  [0.341, [0.507, 0.714, 1]],
  [0.342, [0.507, 0.714, 1]],
  [0.344, [0.223, 0.395, 1]],
  [0.346, [0.223, 0.395, 1]],
  [0.348, [0, 0.018, 1]],
  [0.35, [0, 0.018, 1]],
  [0.352, [0, 0, 0.803]],
  [0.354, [0, 0, 0.803]],
  [0.356, [0, 0, 0.521]],
  [0.358, [0, 0, 0.521]],
  [0.36, [0, 0, 0.236]],
  [0.362, [0, 0, 0.236]],
  [0.364, [0, 0, 0]],
  [0.366, [0, 0, 0]],
  [0.368, [0.184, 0, 0]],
  [0.37, [0.184, 0, 0]],
  [0.372, [0.465, 0, 0]],
  [0.374, [0.465, 0, 0]],
  [0.376, [0.751, 0, 0]],
  [0.378, [0.751, 0, 0]],
  [0.38, [1, 0, 0]],
  [0.382, [1, 0, 0]],
  [0.384, [1, 0.327, 0.172]],
  [0.386, [1, 0.327, 0.172]],
  [0.387, [1, 0.66, 0.452]],
  [0.389, [1, 0.66, 0.452]],
  [0.391, [1, 0.895, 0.738]],
  [0.393, [1, 0.895, 0.738]],
  [0.395, [1, 0.997, 0.99]],
  [0.397, [1, 0.997, 0.99]],
  [0.399, [0.84, 0.951, 1]],
  [0.401, [0.84, 0.951, 1]],
  [0.403, [0.562, 0.763, 1]],
  [0.405, [0.562, 0.763, 1]],
  [0.407, [0.275, 0.462, 1]],
  [0.409, [0.275, 0.462, 1]],
  [0.411, [0.021, 0.092, 1]],
  [0.413, [0.021, 0.092, 1]],
  [0.415, [0, 0, 0.853]],
  [0.417, [0, 0, 0.853]],
  [0.419, [0, 0, 0.576]],
  [0.421, [0, 0, 0.576]],
  [0.423, [0, 0, 0.288]],
  [0.425, [0, 0, 0.288]],
  [0.427, [0, 0, 0.032]],
  [0.429, [0, 0, 0.032]],
  [0.431, [0.135, 0, 0]],
  [0.432, [0.135, 0, 0]],
  [0.434, [0.41, 0, 0]],
  [0.436, [0.41, 0, 0]],
  [0.438, [0.699, 0, 0]],
  [0.44, [0.699, 0, 0]],
  [0.442, [0.957, 0, 0]],
  [0.444, [0.957, 0, 0]],
  [0.446, [1, 0.256, 0.123]],
  [0.448, [1, 0.256, 0.123]],
  [0.45, [1, 0.603, 0.396]],
  [0.452, [1, 0.603, 0.396]],
  [0.454, [1, 0.86, 0.685]],
  [0.456, [1, 0.86, 0.685]],
  [0.458, [1, 0.989, 0.946]],
  [0.46, [1, 0.989, 0.946]],
  [0.462, [0.889, 0.971, 1]],
  [0.464, [0.889, 0.971, 1]],
  [0.466, [0.617, 0.809, 1]],
  [0.468, [0.617, 0.809, 1]],
  [0.47, [0.328, 0.526, 1]],
  [0.472, [0.328, 0.526, 1]],
  [0.474, [0.065, 0.166, 1]],
  [0.476, [0.065, 0.166, 1]],
  [0.477, [0, 0, 0.901]],
  [0.479, [0, 0, 0.901]],
  [0.481, [0, 0, 0.631]],
  [0.483, [0, 0, 0.631]],
  [0.485, [0, 0, 0.342]],
  [0.487, [0, 0, 0.342]],
  [0.489, [0, 0, 0.076]],
  [0.491, [0, 0, 0.076]],
  [0.493, [0.088, 0, 0]],
  [0.495, [0.088, 0, 0]],
  [0.497, [0.355, 0, 0]],
  [0.499, [0.355, 0, 0]],
  [0.501, [0.645, 0, 0]],
  [0.503, [0.645, 0, 0]],
  [0.505, [0.912, 0, 0]],
  [0.507, [0.912, 0, 0]],
  [0.509, [1, 0.184, 0.076]],
  [0.511, [1, 0.184, 0.076]],
  [0.513, [1, 0.542, 0.342]],
  [0.515, [1, 0.542, 0.342]],
  [0.517, [1, 0.82, 0.631]],
  [0.519, [1, 0.82, 0.631]],
  [0.521, [1, 0.976, 0.901]],
  [0.523, [1, 0.976, 0.901]],
  [0.524, [0.935, 0.986, 1]],
  [0.526, [0.935, 0.986, 1]],
  [0.528, [0.672, 0.85, 1]],
  [0.53, [0.672, 0.85, 1]],
  [0.532, [0.383, 0.588, 1]],
  [0.534, [0.383, 0.588, 1]],
  [0.536, [0.111, 0.238, 1]],
  [0.538, [0.111, 0.238, 1]],
  [0.54, [0, 0, 0.946]],
  [0.542, [0, 0, 0.946]],
  [0.544, [0, 0, 0.685]],
  [0.546, [0, 0, 0.685]],
  [0.548, [0, 0, 0.396]],
  [0.55, [0, 0, 0.396]],
  [0.552, [0, 0, 0.123]],
  [0.554, [0, 0, 0.123]],
  [0.556, [0.043, 0, 0]],
  [0.558, [0.043, 0, 0]],
  [0.56, [0.301, 0, 0]],
  [0.562, [0.301, 0, 0]],
  [0.564, [0.59, 0, 0]],
  [0.566, [0.59, 0, 0]],
  [0.568, [0.865, 0, 0]],
  [0.569, [0.865, 0, 0]],
  [0.571, [1, 0.111, 0.032]],
  [0.573, [1, 0.111, 0.032]],
  [0.575, [1, 0.479, 0.288]],
  [0.577, [1, 0.479, 0.288]],
  [0.579, [1, 0.775, 0.576]],
  [0.581, [1, 0.775, 0.576]],
  [0.583, [1, 0.957, 0.853]],
  [0.585, [1, 0.957, 0.853]],
  [0.587, [0.979, 0.996, 1]],
  [0.589, [0.979, 0.996, 1]],
  [0.591, [0.725, 0.887, 1]],
  [0.593, [0.725, 0.887, 1]],
  [0.595, [0.438, 0.646, 1]],
  [0.597, [0.438, 0.646, 1]],
  [0.599, [0.16, 0.309, 1]],
  [0.601, [0.16, 0.309, 1]],
  [0.603, [0, 0, 0.99]],
  [0.605, [0, 0, 0.99]],
  [0.607, [0, 0, 0.738]],
  [0.609, [0, 0, 0.738]],
  [0.611, [0, 0, 0.452]],
  [0.613, [0, 0, 0.452]],
  [0.614, [0, 0, 0.172]],
  [0.616, [0, 0, 0.172]],
  [0.618, [0, 0, 0]],
  [0.62, [0, 0, 0]],
  [0.622, [0.249, 0, 0]],
  [0.624, [0.249, 0, 0]],
  [0.626, [0.535, 0, 0]],
  [0.628, [0.535, 0, 0]],
  [0.63, [0.816, 0, 0]],
  [0.632, [0.816, 0, 0]],
  [0.634, [1, 0.037, 0]],
  [0.636, [1, 0.037, 0]],
  [0.638, [1, 0.412, 0.236]],
  [0.64, [1, 0.412, 0.236]],
  [0.642, [1, 0.726, 0.521]],
  [0.644, [1, 0.726, 0.521]],
  [0.646, [1, 0.932, 0.803]],
  [0.648, [1, 0.932, 0.803]],
  [0.65, [1, 1, 1]],
  [0.652, [1, 1, 1]],
  [0.654, [0.777, 0.918, 1]],
  [0.656, [0.777, 0.918, 1]],
  [0.658, [0.493, 0.701, 1]],
  [0.659, [0.493, 0.701, 1]],
  [0.661, [0.21, 0.378, 1]],
  [0.663, [0.21, 0.378, 1]],
  [0.665, [0, 0, 1]],
  [0.667, [0, 0, 1]],
  [0.669, [0, 0, 0.79]],
  [0.671, [0, 0, 0.79]],
  [0.673, [0, 0, 0.507]],
  [0.675, [0, 0, 0.507]],
  [0.677, [0, 0, 0.223]],
  [0.679, [0, 0, 0.223]],
  [0.681, [0, 0, 0]],
  [0.683, [0, 0, 0]],
  [0.685, [0.197, 0, 0]],
  [0.687, [0.197, 0, 0]],
  [0.689, [0.479, 0, 0]],
  [0.691, [0.479, 0, 0]],
  [0.693, [0.764, 0, 0]],
  [0.695, [0.764, 0, 0]],
  [0.697, [1, 0, 0]],
  [0.699, [1, 0, 0]],
  [0.701, [1, 0.344, 0.184]],
  [0.703, [1, 0.344, 0.184]],
  [0.705, [1, 0.674, 0.465]],
  [0.706, [1, 0.674, 0.465]],
  [0.708, [1, 0.903, 0.751]],
  [0.71, [1, 0.903, 0.751]],
  [0.712, [1, 0.998, 1]],
  [0.714, [1, 0.998, 1]],
  [0.716, [0.828, 0.945, 1]],
  [0.718, [0.828, 0.945, 1]],
  [0.72, [0.548, 0.751, 1]],
  [0.722, [0.548, 0.751, 1]],
  [0.724, [0.262, 0.446, 1]],
  [0.726, [0.262, 0.446, 1]],
  [0.728, [0.01, 0.074, 1]],
  [0.73, [0.01, 0.074, 1]],
  [0.732, [0, 0, 0.84]],
  [0.734, [0, 0, 0.84]],
  [0.736, [0, 0, 0.562]],
  [0.738, [0, 0, 0.562]],
  [0.74, [0, 0, 0.275]],
  [0.742, [0, 0, 0.275]],
  [0.744, [0, 0, 0.021]],
  [0.746, [0, 0, 0.021]],
  [0.748, [0.147, 0, 0]],
  [0.75, [0.147, 0, 0]],
  [0.751, [0.424, 0, 0]],
  [0.753, [0.424, 0, 0]],
  [0.755, [0.712, 0, 0]],
  [0.757, [0.712, 0, 0]],
  [0.759, [0.968, 0, 0]],
  [0.761, [0.968, 0, 0]],
  [0.763, [1, 0.274, 0.135]],
  [0.765, [1, 0.274, 0.135]],
  [0.767, [1, 0.617, 0.41]],
  [0.769, [1, 0.617, 0.41]],
  [0.771, [1, 0.869, 0.699]],
  [0.773, [1, 0.869, 0.699]],
  [0.775, [1, 0.992, 0.957]],
  [0.777, [1, 0.992, 0.957]],
  [0.779, [0.877, 0.967, 1]],
  [0.781, [0.877, 0.967, 1]],
  [0.783, [0.604, 0.798, 1]],
  [0.785, [0.604, 0.798, 1]],
  [0.787, [0.315, 0.511, 1]],
  [0.789, [0.315, 0.511, 1]],
  [0.791, [0.054, 0.147, 1]],
  [0.793, [0.054, 0.147, 1]],
  [0.795, [0, 0, 0.889]],
  [0.796, [0, 0, 0.889]],
  [0.798, [0, 0, 0.617]],
  [0.8, [0, 0, 0.617]],
  [0.802, [0, 0, 0.328]],
  [0.804, [0, 0, 0.328]],
  [0.806, [0, 0, 0.065]],
  [0.808, [0, 0, 0.065]],
  [0.81, [0.099, 0, 0]],
  [0.812, [0.099, 0, 0]],
  [0.814, [0.369, 0, 0]],
  [0.816, [0.369, 0, 0]],
  [0.818, [0.658, 0, 0]],
  [0.82, [0.658, 0, 0]],
  [0.822, [0.924, 0, 0]],
  [0.824, [0.924, 0, 0]],
  [0.826, [1, 0.202, 0.088]],
  [0.828, [1, 0.202, 0.088]],
  [0.83, [1, 0.557, 0.355]],
  [0.832, [1, 0.557, 0.355]],
  [0.834, [1, 0.83, 0.645]],
  [0.836, [1, 0.83, 0.645]],
  [0.838, [1, 0.979, 0.912]],
  [0.84, [1, 0.979, 0.912]],
  [0.841, [0.924, 0.983, 1]],
  [0.843, [0.924, 0.983, 1]],
  [0.845, [0.658, 0.84, 1]],
  [0.847, [0.658, 0.84, 1]],
  [0.849, [0.369, 0.573, 1]],
  [0.851, [0.369, 0.573, 1]],
  [0.853, [0.099, 0.22, 1]],
  [0.855, [0.099, 0.22, 1]],
  [0.857, [0, 0, 0.935]],
  [0.859, [0, 0, 0.935]],
  [0.861, [0, 0, 0.672]],
  [0.863, [0, 0, 0.672]],
  [0.865, [0, 0, 0.383]],
  [0.867, [0, 0, 0.383]],
  [0.869, [0, 0, 0.111]],
  [0.871, [0, 0, 0.111]],
  [0.873, [0.054, 0, 0]],
  [0.875, [0.054, 0, 0]],
  [0.877, [0.315, 0, 0]],
  [0.879, [0.315, 0, 0]],
  [0.881, [0.604, 0, 0]],
  [0.883, [0.604, 0, 0]],
  [0.885, [0.877, 0, 0]],
  [0.886, [0.877, 0, 0]],
  [0.888, [1, 0.129, 0.043]],
  [0.89, [1, 0.129, 0.043]],
  [0.892, [1, 0.495, 0.301]],
  [0.894, [1, 0.495, 0.301]],
  [0.896, [1, 0.787, 0.59]],
  [0.898, [1, 0.787, 0.59]],
  [0.9, [1, 0.962, 0.865]],
  [0.902, [1, 0.962, 0.865]],
  [0.904, [0.968, 0.994, 1]],
  [0.906, [0.968, 0.994, 1]],
  [0.908, [0.712, 0.878, 1]],
  [0.91, [0.712, 0.878, 1]],
  [0.912, [0.424, 0.632, 1]],
  [0.914, [0.424, 0.632, 1]],
  [0.916, [0.147, 0.291, 1]],
  [0.918, [0.147, 0.291, 1]],
  [0.92, [0, 0, 0.979]],
  [0.922, [0, 0, 0.979]],
  [0.924, [0, 0, 0.725]],
  [0.926, [0, 0, 0.725]],
  [0.928, [0, 0, 0.438]],
  [0.93, [0, 0, 0.438]],
  [0.932, [0, 0, 0.16]],
  [0.933, [0, 0, 0.16]],
  [0.935, [0.01, 0, 0]],
  [0.937, [0.01, 0, 0]],
  [0.939, [0.262, 0, 0]],
  [0.941, [0.262, 0, 0]],
  [0.943, [0.548, 0, 0]],
  [0.945, [0.548, 0, 0]],
  [0.947, [0.828, 0, 0]],
  [0.949, [0.828, 0, 0]],
  [0.951, [1, 0.055, 0]],
  [0.953, [1, 0.055, 0]],
  [0.955, [1, 0.429, 0.249]],
  [0.957, [1, 0.429, 0.249]],
  [0.959, [1, 0.739, 0.535]],
  [0.961, [1, 0.739, 0.535]],
  [0.963, [1, 0.939, 0.816]],
  [0.965, [1, 0.939, 0.816]],
  [0.967, [1, 0.999, 1]],
  [0.969, [1, 0.999, 1]],
  [0.971, [0.764, 0.911, 1]],
  [0.973, [0.764, 0.911, 1]],
  [0.975, [0.479, 0.687, 1]],
  [0.977, [0.479, 0.687, 1]],
  [0.978, [0.197, 0.361, 1]],
  [0.98, [0.197, 0.361, 1]],
  [0.982, [0, 0, 1]],
  [0.984, [0, 0, 1]],
  [0.986, [0, 0, 0.777]],
  [0.988, [0, 0, 0.777]],
  [0.99, [0, 0, 0.493]],
  [0.992, [0, 0, 0.493]],
  [0.994, [0, 0, 0.21]],
  [0.996, [0, 0, 0.21]],
  [0.998, [0, 0, 0]],
  [1, [0, 0, 0]]
], zp = [
  [0, [0, 0, 0]],
  [2e-3, [0, 0, 0]],
  [4e-3, [3e-3, 0, 0.169]],
  [6e-3, [3e-3, 0, 0.169]],
  [8e-3, [5e-3, 0, 0.222]],
  [0.01, [5e-3, 0, 0.222]],
  [0.012, [8e-3, 0, 0.264]],
  [0.014, [8e-3, 0, 0.264]],
  [0.016, [0.01, 0, 0.306]],
  [0.018, [0.01, 0, 0.306]],
  [0.02, [0.013, 0, 0.348]],
  [0.022, [0.013, 0, 0.348]],
  [0.023, [0.016, 0, 0.39]],
  [0.025, [0.016, 0, 0.39]],
  [0.027, [0.018, 0, 0.432]],
  [0.029, [0.018, 0, 0.432]],
  [0.031, [0.021, 9e-3, 0.455]],
  [0.033, [0.021, 9e-3, 0.455]],
  [0.035, [0.024, 0.018, 0.456]],
  [0.037, [0.024, 0.018, 0.456]],
  [0.039, [0.026, 0.027, 0.456]],
  [0.041, [0.026, 0.027, 0.456]],
  [0.043, [0.029, 0.036, 0.457]],
  [0.045, [0.029, 0.036, 0.457]],
  [0.047, [0.031, 0.045, 0.458]],
  [0.049, [0.031, 0.045, 0.458]],
  [0.051, [0.034, 0.054, 0.458]],
  [0.053, [0.034, 0.054, 0.458]],
  [0.055, [0.037, 0.063, 0.459]],
  [0.057, [0.037, 0.063, 0.459]],
  [0.059, [0.039, 0.072, 0.46]],
  [0.061, [0.039, 0.072, 0.46]],
  [0.063, [0.042, 0.081, 0.461]],
  [0.065, [0.042, 0.081, 0.461]],
  [0.067, [0.044, 0.09, 0.461]],
  [0.068, [0.044, 0.09, 0.461]],
  [0.07, [0.047, 0.099, 0.462]],
  [0.072, [0.047, 0.099, 0.462]],
  [0.074, [0.05, 0.108, 0.463]],
  [0.076, [0.05, 0.108, 0.463]],
  [0.078, [0.052, 0.117, 0.463]],
  [0.08, [0.052, 0.117, 0.463]],
  [0.082, [0.055, 0.126, 0.464]],
  [0.084, [0.055, 0.126, 0.464]],
  [0.086, [0.057, 0.135, 0.465]],
  [0.088, [0.057, 0.135, 0.465]],
  [0.09, [0.06, 0.144, 0.466]],
  [0.092, [0.06, 0.144, 0.466]],
  [0.094, [0.063, 0.153, 0.466]],
  [0.096, [0.063, 0.153, 0.466]],
  [0.098, [0.065, 0.162, 0.467]],
  [0.1, [0.065, 0.162, 0.467]],
  [0.102, [0.068, 0.171, 0.468]],
  [0.104, [0.068, 0.171, 0.468]],
  [0.106, [0.071, 0.18, 0.468]],
  [0.108, [0.071, 0.18, 0.468]],
  [0.11, [0.073, 0.189, 0.469]],
  [0.112, [0.073, 0.189, 0.469]],
  [0.114, [0.076, 0.197, 0.47]],
  [0.115, [0.076, 0.197, 0.47]],
  [0.117, [0.078, 0.206, 0.471]],
  [0.119, [0.078, 0.206, 0.471]],
  [0.121, [0.081, 0.214, 0.471]],
  [0.123, [0.081, 0.214, 0.471]],
  [0.125, [0.084, 0.222, 0.472]],
  [0.127, [0.084, 0.222, 0.472]],
  [0.129, [0.086, 0.23, 0.473]],
  [0.131, [0.086, 0.23, 0.473]],
  [0.133, [0.089, 0.238, 0.473]],
  [0.135, [0.089, 0.238, 0.473]],
  [0.137, [0.091, 0.246, 0.474]],
  [0.139, [0.091, 0.246, 0.474]],
  [0.141, [0.094, 0.255, 0.475]],
  [0.143, [0.094, 0.255, 0.475]],
  [0.145, [0.097, 0.263, 0.476]],
  [0.147, [0.097, 0.263, 0.476]],
  [0.149, [0.099, 0.271, 0.476]],
  [0.151, [0.099, 0.271, 0.476]],
  [0.153, [0.102, 0.279, 0.477]],
  [0.155, [0.102, 0.279, 0.477]],
  [0.157, [0.105, 0.287, 0.478]],
  [0.159, [0.105, 0.287, 0.478]],
  [0.16, [0.107, 0.295, 0.478]],
  [0.162, [0.107, 0.295, 0.478]],
  [0.164, [0.11, 0.304, 0.479]],
  [0.166, [0.11, 0.304, 0.479]],
  [0.168, [0.112, 0.311, 0.48]],
  [0.17, [0.112, 0.311, 0.48]],
  [0.172, [0.115, 0.318, 0.48]],
  [0.174, [0.115, 0.318, 0.48]],
  [0.176, [0.118, 0.326, 0.481]],
  [0.178, [0.118, 0.326, 0.481]],
  [0.18, [0.12, 0.333, 0.482]],
  [0.182, [0.12, 0.333, 0.482]],
  [0.184, [0.123, 0.34, 0.483]],
  [0.186, [0.123, 0.34, 0.483]],
  [0.188, [0.125, 0.348, 0.483]],
  [0.19, [0.125, 0.348, 0.483]],
  [0.192, [0.128, 0.355, 0.484]],
  [0.194, [0.128, 0.355, 0.484]],
  [0.196, [0.131, 0.362, 0.485]],
  [0.198, [0.131, 0.362, 0.485]],
  [0.2, [0.133, 0.37, 0.485]],
  [0.202, [0.133, 0.37, 0.485]],
  [0.204, [0.136, 0.377, 0.486]],
  [0.205, [0.136, 0.377, 0.486]],
  [0.207, [0.139, 0.384, 0.487]],
  [0.209, [0.139, 0.384, 0.487]],
  [0.211, [0.141, 0.39, 0.488]],
  [0.213, [0.141, 0.39, 0.488]],
  [0.215, [0.144, 0.397, 0.488]],
  [0.217, [0.144, 0.397, 0.488]],
  [0.219, [0.146, 0.403, 0.489]],
  [0.221, [0.146, 0.403, 0.489]],
  [0.223, [0.149, 0.409, 0.49]],
  [0.225, [0.149, 0.409, 0.49]],
  [0.227, [0.152, 0.415, 0.49]],
  [0.229, [0.152, 0.415, 0.49]],
  [0.231, [0.154, 0.421, 0.491]],
  [0.233, [0.154, 0.421, 0.491]],
  [0.235, [0.157, 0.428, 0.492]],
  [0.237, [0.157, 0.428, 0.492]],
  [0.239, [0.159, 0.434, 0.493]],
  [0.241, [0.159, 0.434, 0.493]],
  [0.243, [0.162, 0.44, 0.493]],
  [0.245, [0.162, 0.44, 0.493]],
  [0.247, [0.165, 0.446, 0.494]],
  [0.249, [0.165, 0.446, 0.494]],
  [0.25, [0.167, 0.452, 0.495]],
  [0.252, [0.167, 0.452, 0.495]],
  [0.254, [0.17, 0.459, 0.495]],
  [0.256, [0.17, 0.459, 0.495]],
  [0.258, [0.172, 0.465, 0.496]],
  [0.26, [0.172, 0.465, 0.496]],
  [0.262, [0.175, 0.471, 0.497]],
  [0.264, [0.175, 0.471, 0.497]],
  [0.266, [0.178, 0.477, 0.498]],
  [0.268, [0.178, 0.477, 0.498]],
  [0.27, [0.18, 0.483, 0.498]],
  [0.272, [0.18, 0.483, 0.498]],
  [0.274, [0.183, 0.49, 0.499]],
  [0.276, [0.183, 0.49, 0.499]],
  [0.278, [0.186, 0.496, 0.5]],
  [0.28, [0.186, 0.496, 0.5]],
  [0.282, [0.188, 0.502, 0.5]],
  [0.284, [0.188, 0.502, 0.5]],
  [0.286, [0.19, 0.504, 0.496]],
  [0.288, [0.19, 0.504, 0.496]],
  [0.29, [0.192, 0.506, 0.491]],
  [0.292, [0.192, 0.506, 0.491]],
  [0.294, [0.194, 0.509, 0.486]],
  [0.295, [0.194, 0.509, 0.486]],
  [0.297, [0.196, 0.511, 0.481]],
  [0.299, [0.196, 0.511, 0.481]],
  [0.301, [0.197, 0.513, 0.476]],
  [0.303, [0.197, 0.513, 0.476]],
  [0.305, [0.199, 0.516, 0.472]],
  [0.307, [0.199, 0.516, 0.472]],
  [0.309, [0.201, 0.518, 0.467]],
  [0.311, [0.201, 0.518, 0.467]],
  [0.313, [0.203, 0.52, 0.462]],
  [0.315, [0.203, 0.52, 0.462]],
  [0.317, [0.205, 0.522, 0.457]],
  [0.319, [0.205, 0.522, 0.457]],
  [0.321, [0.207, 0.525, 0.452]],
  [0.323, [0.207, 0.525, 0.452]],
  [0.325, [0.209, 0.527, 0.448]],
  [0.327, [0.209, 0.527, 0.448]],
  [0.329, [0.21, 0.529, 0.443]],
  [0.331, [0.21, 0.529, 0.443]],
  [0.333, [0.212, 0.531, 0.438]],
  [0.335, [0.212, 0.531, 0.438]],
  [0.337, [0.214, 0.534, 0.433]],
  [0.339, [0.214, 0.534, 0.433]],
  [0.341, [0.216, 0.536, 0.428]],
  [0.342, [0.216, 0.536, 0.428]],
  [0.344, [0.218, 0.538, 0.424]],
  [0.346, [0.218, 0.538, 0.424]],
  [0.348, [0.22, 0.54, 0.419]],
  [0.35, [0.22, 0.54, 0.419]],
  [0.352, [0.221, 0.543, 0.414]],
  [0.354, [0.221, 0.543, 0.414]],
  [0.356, [0.223, 0.545, 0.409]],
  [0.358, [0.223, 0.545, 0.409]],
  [0.36, [0.225, 0.547, 0.404]],
  [0.362, [0.225, 0.547, 0.404]],
  [0.364, [0.227, 0.549, 0.4]],
  [0.366, [0.227, 0.549, 0.4]],
  [0.368, [0.229, 0.552, 0.395]],
  [0.37, [0.229, 0.552, 0.395]],
  [0.372, [0.231, 0.554, 0.39]],
  [0.374, [0.231, 0.554, 0.39]],
  [0.376, [0.233, 0.556, 0.385]],
  [0.378, [0.233, 0.556, 0.385]],
  [0.38, [0.234, 0.558, 0.38]],
  [0.382, [0.234, 0.558, 0.38]],
  [0.384, [0.236, 0.561, 0.376]],
  [0.386, [0.236, 0.561, 0.376]],
  [0.387, [0.238, 0.563, 0.371]],
  [0.389, [0.238, 0.563, 0.371]],
  [0.391, [0.24, 0.565, 0.366]],
  [0.393, [0.24, 0.565, 0.366]],
  [0.395, [0.242, 0.567, 0.361]],
  [0.397, [0.242, 0.567, 0.361]],
  [0.399, [0.244, 0.57, 0.356]],
  [0.401, [0.244, 0.57, 0.356]],
  [0.403, [0.246, 0.572, 0.352]],
  [0.405, [0.246, 0.572, 0.352]],
  [0.407, [0.247, 0.574, 0.347]],
  [0.409, [0.247, 0.574, 0.347]],
  [0.411, [0.249, 0.576, 0.342]],
  [0.413, [0.249, 0.576, 0.342]],
  [0.415, [0.251, 0.579, 0.337]],
  [0.417, [0.251, 0.579, 0.337]],
  [0.419, [0.253, 0.581, 0.332]],
  [0.421, [0.253, 0.581, 0.332]],
  [0.423, [0.255, 0.583, 0.328]],
  [0.425, [0.255, 0.583, 0.328]],
  [0.427, [0.257, 0.586, 0.323]],
  [0.429, [0.257, 0.586, 0.323]],
  [0.431, [0.258, 0.588, 0.318]],
  [0.432, [0.258, 0.588, 0.318]],
  [0.434, [0.26, 0.59, 0.313]],
  [0.436, [0.26, 0.59, 0.313]],
  [0.438, [0.262, 0.592, 0.308]],
  [0.44, [0.262, 0.592, 0.308]],
  [0.442, [0.264, 0.595, 0.304]],
  [0.444, [0.264, 0.595, 0.304]],
  [0.446, [0.266, 0.597, 0.299]],
  [0.448, [0.266, 0.597, 0.299]],
  [0.45, [0.268, 0.599, 0.294]],
  [0.452, [0.268, 0.599, 0.294]],
  [0.454, [0.27, 0.601, 0.289]],
  [0.456, [0.27, 0.601, 0.289]],
  [0.458, [0.271, 0.604, 0.284]],
  [0.46, [0.271, 0.604, 0.284]],
  [0.462, [0.28, 0.606, 0.28]],
  [0.464, [0.28, 0.606, 0.28]],
  [0.466, [0.289, 0.608, 0.275]],
  [0.468, [0.289, 0.608, 0.275]],
  [0.47, [0.298, 0.61, 0.277]],
  [0.472, [0.298, 0.61, 0.277]],
  [0.474, [0.306, 0.613, 0.279]],
  [0.476, [0.306, 0.613, 0.279]],
  [0.477, [0.315, 0.615, 0.282]],
  [0.479, [0.315, 0.615, 0.282]],
  [0.481, [0.324, 0.617, 0.284]],
  [0.483, [0.324, 0.617, 0.284]],
  [0.485, [0.332, 0.619, 0.286]],
  [0.487, [0.332, 0.619, 0.286]],
  [0.489, [0.341, 0.622, 0.288]],
  [0.491, [0.341, 0.622, 0.288]],
  [0.493, [0.35, 0.624, 0.291]],
  [0.495, [0.35, 0.624, 0.291]],
  [0.497, [0.359, 0.626, 0.293]],
  [0.499, [0.359, 0.626, 0.293]],
  [0.501, [0.367, 0.628, 0.295]],
  [0.503, [0.367, 0.628, 0.295]],
  [0.505, [0.376, 0.631, 0.298]],
  [0.507, [0.376, 0.631, 0.298]],
  [0.509, [0.385, 0.633, 0.3]],
  [0.511, [0.385, 0.633, 0.3]],
  [0.513, [0.393, 0.635, 0.302]],
  [0.515, [0.393, 0.635, 0.302]],
  [0.517, [0.402, 0.637, 0.304]],
  [0.519, [0.402, 0.637, 0.304]],
  [0.521, [0.411, 0.64, 0.307]],
  [0.523, [0.411, 0.64, 0.307]],
  [0.524, [0.42, 0.641, 0.309]],
  [0.526, [0.42, 0.641, 0.309]],
  [0.528, [0.428, 0.643, 0.311]],
  [0.53, [0.428, 0.643, 0.311]],
  [0.532, [0.437, 0.645, 0.314]],
  [0.534, [0.437, 0.645, 0.314]],
  [0.536, [0.446, 0.647, 0.316]],
  [0.538, [0.446, 0.647, 0.316]],
  [0.54, [0.455, 0.648, 0.318]],
  [0.542, [0.455, 0.648, 0.318]],
  [0.544, [0.463, 0.65, 0.32]],
  [0.546, [0.463, 0.65, 0.32]],
  [0.548, [0.472, 0.652, 0.322]],
  [0.55, [0.472, 0.652, 0.322]],
  [0.552, [0.478, 0.653, 0.323]],
  [0.554, [0.478, 0.653, 0.323]],
  [0.556, [0.485, 0.655, 0.324]],
  [0.558, [0.485, 0.655, 0.324]],
  [0.56, [0.491, 0.657, 0.325]],
  [0.562, [0.491, 0.657, 0.325]],
  [0.564, [0.498, 0.659, 0.327]],
  [0.566, [0.498, 0.659, 0.327]],
  [0.568, [0.504, 0.66, 0.328]],
  [0.569, [0.504, 0.66, 0.328]],
  [0.571, [0.511, 0.662, 0.329]],
  [0.573, [0.511, 0.662, 0.329]],
  [0.575, [0.517, 0.664, 0.33]],
  [0.577, [0.517, 0.664, 0.33]],
  [0.579, [0.524, 0.665, 0.332]],
  [0.581, [0.524, 0.665, 0.332]],
  [0.583, [0.53, 0.667, 0.333]],
  [0.585, [0.53, 0.667, 0.333]],
  [0.587, [0.537, 0.669, 0.334]],
  [0.589, [0.537, 0.669, 0.334]],
  [0.591, [0.543, 0.671, 0.335]],
  [0.593, [0.543, 0.671, 0.335]],
  [0.595, [0.55, 0.672, 0.337]],
  [0.597, [0.55, 0.672, 0.337]],
  [0.599, [0.556, 0.674, 0.338]],
  [0.601, [0.556, 0.674, 0.338]],
  [0.603, [0.562, 0.676, 0.339]],
  [0.605, [0.562, 0.676, 0.339]],
  [0.607, [0.569, 0.678, 0.34]],
  [0.609, [0.569, 0.678, 0.34]],
  [0.611, [0.575, 0.679, 0.342]],
  [0.613, [0.575, 0.679, 0.342]],
  [0.614, [0.582, 0.681, 0.343]],
  [0.616, [0.582, 0.681, 0.343]],
  [0.618, [0.588, 0.683, 0.344]],
  [0.62, [0.588, 0.683, 0.344]],
  [0.622, [0.595, 0.684, 0.345]],
  [0.624, [0.595, 0.684, 0.345]],
  [0.626, [0.601, 0.686, 0.347]],
  [0.628, [0.601, 0.686, 0.347]],
  [0.63, [0.608, 0.688, 0.348]],
  [0.632, [0.608, 0.688, 0.348]],
  [0.634, [0.614, 0.69, 0.349]],
  [0.636, [0.614, 0.69, 0.349]],
  [0.638, [0.621, 0.691, 0.35]],
  [0.64, [0.621, 0.691, 0.35]],
  [0.642, [0.627, 0.693, 0.351]],
  [0.644, [0.627, 0.693, 0.351]],
  [0.646, [0.634, 0.695, 0.353]],
  [0.648, [0.634, 0.695, 0.353]],
  [0.65, [0.64, 0.696, 0.354]],
  [0.652, [0.64, 0.696, 0.354]],
  [0.654, [0.647, 0.698, 0.355]],
  [0.656, [0.647, 0.698, 0.355]],
  [0.658, [0.653, 0.7, 0.356]],
  [0.659, [0.653, 0.7, 0.356]],
  [0.661, [0.659, 0.702, 0.358]],
  [0.663, [0.659, 0.702, 0.358]],
  [0.665, [0.666, 0.703, 0.359]],
  [0.667, [0.666, 0.703, 0.359]],
  [0.669, [0.672, 0.705, 0.36]],
  [0.671, [0.672, 0.705, 0.36]],
  [0.673, [0.679, 0.707, 0.361]],
  [0.675, [0.679, 0.707, 0.361]],
  [0.677, [0.685, 0.709, 0.363]],
  [0.679, [0.685, 0.709, 0.363]],
  [0.681, [0.692, 0.71, 0.364]],
  [0.683, [0.692, 0.71, 0.364]],
  [0.685, [0.698, 0.712, 0.365]],
  [0.687, [0.698, 0.712, 0.365]],
  [0.689, [0.705, 0.714, 0.366]],
  [0.691, [0.705, 0.714, 0.366]],
  [0.693, [0.711, 0.715, 0.368]],
  [0.695, [0.711, 0.715, 0.368]],
  [0.697, [0.718, 0.717, 0.369]],
  [0.699, [0.718, 0.717, 0.369]],
  [0.701, [0.719, 0.714, 0.37]],
  [0.703, [0.719, 0.714, 0.37]],
  [0.705, [0.721, 0.71, 0.371]],
  [0.706, [0.721, 0.71, 0.371]],
  [0.708, [0.723, 0.707, 0.373]],
  [0.71, [0.723, 0.707, 0.373]],
  [0.712, [0.724, 0.704, 0.374]],
  [0.714, [0.724, 0.704, 0.374]],
  [0.716, [0.726, 0.7, 0.375]],
  [0.718, [0.726, 0.7, 0.375]],
  [0.72, [0.727, 0.697, 0.376]],
  [0.722, [0.727, 0.697, 0.376]],
  [0.724, [0.729, 0.693, 0.378]],
  [0.726, [0.729, 0.693, 0.378]],
  [0.728, [0.731, 0.69, 0.379]],
  [0.73, [0.731, 0.69, 0.379]],
  [0.732, [0.732, 0.687, 0.38]],
  [0.734, [0.732, 0.687, 0.38]],
  [0.736, [0.734, 0.683, 0.381]],
  [0.738, [0.734, 0.683, 0.381]],
  [0.74, [0.736, 0.68, 0.382]],
  [0.742, [0.736, 0.68, 0.382]],
  [0.744, [0.737, 0.676, 0.384]],
  [0.746, [0.737, 0.676, 0.384]],
  [0.748, [0.739, 0.673, 0.385]],
  [0.75, [0.739, 0.673, 0.385]],
  [0.751, [0.741, 0.67, 0.386]],
  [0.753, [0.741, 0.67, 0.386]],
  [0.755, [0.742, 0.666, 0.387]],
  [0.757, [0.742, 0.666, 0.387]],
  [0.759, [0.744, 0.663, 0.389]],
  [0.761, [0.744, 0.663, 0.389]],
  [0.763, [0.745, 0.659, 0.39]],
  [0.765, [0.745, 0.659, 0.39]],
  [0.767, [0.747, 0.656, 0.391]],
  [0.769, [0.747, 0.656, 0.391]],
  [0.771, [0.749, 0.653, 0.392]],
  [0.773, [0.749, 0.653, 0.392]],
  [0.775, [0.75, 0.649, 0.394]],
  [0.777, [0.75, 0.649, 0.394]],
  [0.779, [0.752, 0.646, 0.395]],
  [0.781, [0.752, 0.646, 0.395]],
  [0.783, [0.754, 0.643, 0.396]],
  [0.785, [0.754, 0.643, 0.396]],
  [0.787, [0.755, 0.639, 0.406]],
  [0.789, [0.755, 0.639, 0.406]],
  [0.791, [0.76, 0.641, 0.415]],
  [0.793, [0.76, 0.641, 0.415]],
  [0.795, [0.764, 0.643, 0.425]],
  [0.796, [0.764, 0.643, 0.425]],
  [0.798, [0.768, 0.645, 0.435]],
  [0.8, [0.768, 0.645, 0.435]],
  [0.802, [0.773, 0.646, 0.444]],
  [0.804, [0.773, 0.646, 0.444]],
  [0.806, [0.777, 0.648, 0.454]],
  [0.808, [0.777, 0.648, 0.454]],
  [0.81, [0.782, 0.652, 0.463]],
  [0.812, [0.782, 0.652, 0.463]],
  [0.814, [0.786, 0.655, 0.473]],
  [0.816, [0.786, 0.655, 0.473]],
  [0.818, [0.79, 0.658, 0.483]],
  [0.82, [0.79, 0.658, 0.483]],
  [0.822, [0.795, 0.662, 0.492]],
  [0.824, [0.795, 0.662, 0.492]],
  [0.826, [0.799, 0.665, 0.502]],
  [0.828, [0.799, 0.665, 0.502]],
  [0.83, [0.804, 0.668, 0.511]],
  [0.832, [0.804, 0.668, 0.511]],
  [0.834, [0.808, 0.672, 0.521]],
  [0.836, [0.808, 0.672, 0.521]],
  [0.838, [0.812, 0.675, 0.531]],
  [0.84, [0.812, 0.675, 0.531]],
  [0.841, [0.817, 0.679, 0.54]],
  [0.843, [0.817, 0.679, 0.54]],
  [0.845, [0.821, 0.682, 0.55]],
  [0.847, [0.821, 0.682, 0.55]],
  [0.849, [0.826, 0.685, 0.559]],
  [0.851, [0.826, 0.685, 0.559]],
  [0.853, [0.83, 0.689, 0.569]],
  [0.855, [0.83, 0.689, 0.569]],
  [0.857, [0.834, 0.692, 0.579]],
  [0.859, [0.834, 0.692, 0.579]],
  [0.861, [0.839, 0.696, 0.588]],
  [0.863, [0.839, 0.696, 0.588]],
  [0.865, [0.843, 0.699, 0.598]],
  [0.867, [0.843, 0.699, 0.598]],
  [0.869, [0.847, 0.705, 0.607]],
  [0.871, [0.847, 0.705, 0.607]],
  [0.873, [0.852, 0.71, 0.617]],
  [0.875, [0.852, 0.71, 0.617]],
  [0.877, [0.856, 0.716, 0.627]],
  [0.879, [0.856, 0.716, 0.627]],
  [0.881, [0.861, 0.722, 0.636]],
  [0.883, [0.861, 0.722, 0.636]],
  [0.885, [0.865, 0.727, 0.646]],
  [0.886, [0.865, 0.727, 0.646]],
  [0.888, [0.869, 0.732, 0.656]],
  [0.89, [0.869, 0.732, 0.656]],
  [0.892, [0.874, 0.738, 0.665]],
  [0.894, [0.874, 0.738, 0.665]],
  [0.896, [0.878, 0.743, 0.677]],
  [0.898, [0.878, 0.743, 0.677]],
  [0.9, [0.883, 0.751, 0.689]],
  [0.902, [0.883, 0.751, 0.689]],
  [0.904, [0.887, 0.758, 0.701]],
  [0.906, [0.887, 0.758, 0.701]],
  [0.908, [0.891, 0.766, 0.712]],
  [0.91, [0.891, 0.766, 0.712]],
  [0.912, [0.896, 0.774, 0.724]],
  [0.914, [0.896, 0.774, 0.724]],
  [0.916, [0.9, 0.781, 0.736]],
  [0.918, [0.9, 0.781, 0.736]],
  [0.92, [0.904, 0.789, 0.748]],
  [0.922, [0.904, 0.789, 0.748]],
  [0.924, [0.909, 0.797, 0.76]],
  [0.926, [0.909, 0.797, 0.76]],
  [0.928, [0.913, 0.804, 0.772]],
  [0.93, [0.913, 0.804, 0.772]],
  [0.932, [0.918, 0.812, 0.783]],
  [0.933, [0.918, 0.812, 0.783]],
  [0.935, [0.922, 0.82, 0.795]],
  [0.937, [0.922, 0.82, 0.795]],
  [0.939, [0.926, 0.827, 0.807]],
  [0.941, [0.926, 0.827, 0.807]],
  [0.943, [0.931, 0.836, 0.819]],
  [0.945, [0.931, 0.836, 0.819]],
  [0.947, [0.935, 0.845, 0.831]],
  [0.949, [0.935, 0.845, 0.831]],
  [0.951, [0.94, 0.854, 0.842]],
  [0.953, [0.94, 0.854, 0.842]],
  [0.955, [0.944, 0.863, 0.854]],
  [0.957, [0.944, 0.863, 0.854]],
  [0.959, [0.948, 0.873, 0.866]],
  [0.961, [0.948, 0.873, 0.866]],
  [0.963, [0.953, 0.882, 0.878]],
  [0.965, [0.953, 0.882, 0.878]],
  [0.967, [0.957, 0.893, 0.89]],
  [0.969, [0.957, 0.893, 0.89]],
  [0.971, [0.961, 0.905, 0.902]],
  [0.973, [0.961, 0.905, 0.902]],
  [0.975, [0.966, 0.916, 0.913]],
  [0.977, [0.966, 0.916, 0.913]],
  [0.978, [0.97, 0.927, 0.925]],
  [0.98, [0.97, 0.927, 0.925]],
  [0.982, [0.975, 0.939, 0.937]],
  [0.984, [0.975, 0.939, 0.937]],
  [0.986, [0.979, 0.95, 0.949]],
  [0.988, [0.979, 0.95, 0.949]],
  [0.99, [0.983, 0.962, 0.961]],
  [0.992, [0.983, 0.962, 0.961]],
  [0.994, [0.988, 0.973, 0.972]],
  [0.996, [0.988, 0.973, 0.972]],
  [0.998, [0.992, 0.984, 0.984]],
  [1, [0.992, 0.984, 0.984]]
], kp = [
  [0, [0, 0, 0.502]],
  [2e-3, [0, 0, 0.502]],
  [4e-3, [0, 0.029, 0.465]],
  [6e-3, [0, 0.029, 0.465]],
  [8e-3, [0, 0.057, 0.428]],
  [0.01, [0, 0.057, 0.428]],
  [0.012, [0, 0.086, 0.391]],
  [0.014, [0, 0.086, 0.391]],
  [0.016, [0, 0.114, 0.354]],
  [0.018, [0, 0.114, 0.354]],
  [0.02, [0, 0.143, 0.318]],
  [0.022, [0, 0.143, 0.318]],
  [0.023, [0, 0.172, 0.281]],
  [0.025, [0, 0.172, 0.281]],
  [0.027, [0, 0.2, 0.244]],
  [0.029, [0, 0.2, 0.244]],
  [0.031, [0, 0.229, 0.207]],
  [0.033, [0, 0.229, 0.207]],
  [0.035, [0, 0.258, 0.17]],
  [0.037, [0, 0.258, 0.17]],
  [0.039, [0, 0.286, 0.133]],
  [0.041, [0, 0.286, 0.133]],
  [0.043, [0, 0.315, 0.096]],
  [0.045, [0, 0.315, 0.096]],
  [0.047, [0, 0.343, 0.059]],
  [0.049, [0, 0.343, 0.059]],
  [0.051, [0, 0.372, 0.022]],
  [0.053, [0, 0.372, 0.022]],
  [0.055, [0, 0.346, 0.087]],
  [0.057, [0, 0.346, 0.087]],
  [0.059, [0, 0.319, 0.152]],
  [0.061, [0, 0.319, 0.152]],
  [0.063, [0, 0.293, 0.218]],
  [0.065, [0, 0.293, 0.218]],
  [0.067, [0, 0.266, 0.283]],
  [0.068, [0, 0.266, 0.283]],
  [0.07, [0, 0.239, 0.348]],
  [0.072, [0, 0.239, 0.348]],
  [0.074, [0, 0.213, 0.413]],
  [0.076, [0, 0.213, 0.413]],
  [0.078, [0, 0.186, 0.478]],
  [0.08, [0, 0.186, 0.478]],
  [0.082, [0, 0.16, 0.544]],
  [0.084, [0, 0.16, 0.544]],
  [0.086, [0, 0.133, 0.609]],
  [0.088, [0, 0.133, 0.609]],
  [0.09, [0, 0.106, 0.674]],
  [0.092, [0, 0.106, 0.674]],
  [0.094, [0, 0.08, 0.739]],
  [0.096, [0, 0.08, 0.739]],
  [0.098, [0, 0.053, 0.804]],
  [0.1, [0, 0.053, 0.804]],
  [0.102, [0, 0.027, 0.87]],
  [0.104, [0, 0.027, 0.87]],
  [0.106, [0, 0, 0.935]],
  [0.108, [0, 0, 0.935]],
  [0.11, [0, 0.055, 1]],
  [0.112, [0, 0.055, 1]],
  [0.114, [0, 0.111, 1]],
  [0.115, [0, 0.111, 1]],
  [0.117, [0, 0.166, 1]],
  [0.119, [0, 0.166, 1]],
  [0.121, [0, 0.221, 1]],
  [0.123, [0, 0.221, 1]],
  [0.125, [0, 0.277, 1]],
  [0.127, [0, 0.277, 1]],
  [0.129, [0, 0.332, 1]],
  [0.131, [0, 0.332, 1]],
  [0.133, [0, 0.387, 1]],
  [0.135, [0, 0.387, 1]],
  [0.137, [0, 0.443, 1]],
  [0.139, [0, 0.443, 1]],
  [0.141, [0, 0.498, 1]],
  [0.143, [0, 0.498, 1]],
  [0.145, [0, 0.554, 1]],
  [0.147, [0, 0.554, 1]],
  [0.149, [0, 0.609, 1]],
  [0.151, [0, 0.609, 1]],
  [0.153, [0, 0.664, 1]],
  [0.155, [0, 0.664, 1]],
  [0.157, [0, 0.72, 1]],
  [0.159, [0, 0.72, 1]],
  [0.16, [0, 0.754, 1]],
  [0.162, [0, 0.754, 1]],
  [0.164, [0, 0.775, 1]],
  [0.166, [0, 0.775, 1]],
  [0.168, [0, 0.793, 1]],
  [0.17, [0, 0.793, 1]],
  [0.172, [0, 0.81, 1]],
  [0.174, [0, 0.81, 1]],
  [0.176, [0, 0.827, 1]],
  [0.178, [0, 0.827, 1]],
  [0.18, [0, 0.844, 1]],
  [0.182, [0, 0.844, 1]],
  [0.184, [0, 0.862, 1]],
  [0.186, [0, 0.862, 1]],
  [0.188, [0, 0.879, 1]],
  [0.19, [0, 0.879, 1]],
  [0.192, [0, 0.896, 1]],
  [0.194, [0, 0.896, 1]],
  [0.196, [0, 0.914, 1]],
  [0.198, [0, 0.914, 1]],
  [0.2, [0, 0.931, 1]],
  [0.202, [0, 0.931, 1]],
  [0.204, [0, 0.948, 1]],
  [0.205, [0, 0.948, 1]],
  [0.207, [0, 0.965, 0.974]],
  [0.209, [0, 0.965, 0.974]],
  [0.211, [0, 0.983, 0.948]],
  [0.213, [0, 0.983, 0.948]],
  [0.215, [0, 1, 0.923]],
  [0.217, [0, 1, 0.923]],
  [0.219, [0, 0.998, 0.897]],
  [0.221, [0, 0.998, 0.897]],
  [0.223, [0, 0.996, 0.871]],
  [0.225, [0, 0.996, 0.871]],
  [0.227, [0, 0.995, 0.846]],
  [0.229, [0, 0.995, 0.846]],
  [0.231, [0, 0.993, 0.82]],
  [0.233, [0, 0.993, 0.82]],
  [0.235, [0, 0.991, 0.794]],
  [0.237, [0, 0.991, 0.794]],
  [0.239, [0, 0.989, 0.768]],
  [0.241, [0, 0.989, 0.768]],
  [0.243, [0, 0.988, 0.743]],
  [0.245, [0, 0.988, 0.743]],
  [0.247, [0, 0.986, 0.717]],
  [0.249, [0, 0.986, 0.717]],
  [0.25, [0, 0.984, 0.691]],
  [0.252, [0, 0.984, 0.691]],
  [0.254, [0, 0.982, 0.666]],
  [0.256, [0, 0.982, 0.666]],
  [0.258, [0, 0.98, 0.64]],
  [0.26, [0, 0.98, 0.64]],
  [0.262, [0, 0.98, 0.614]],
  [0.264, [0, 0.98, 0.614]],
  [0.266, [0, 0.98, 0.573]],
  [0.268, [0, 0.98, 0.573]],
  [0.27, [0, 0.98, 0.532]],
  [0.272, [0, 0.98, 0.532]],
  [0.274, [0, 0.982, 0.491]],
  [0.276, [0, 0.982, 0.491]],
  [0.278, [0, 0.984, 0.45]],
  [0.28, [0, 0.984, 0.45]],
  [0.282, [0, 0.985, 0.409]],
  [0.284, [0, 0.985, 0.409]],
  [0.286, [0, 0.987, 0.369]],
  [0.288, [0, 0.987, 0.369]],
  [0.29, [0, 0.989, 0.328]],
  [0.292, [0, 0.989, 0.328]],
  [0.294, [0, 0.99, 0.287]],
  [0.295, [0, 0.99, 0.287]],
  [0.297, [0, 0.992, 0.246]],
  [0.299, [0, 0.992, 0.246]],
  [0.301, [0, 0.993, 0.205]],
  [0.303, [0, 0.993, 0.205]],
  [0.305, [0, 0.995, 0.164]],
  [0.307, [0, 0.995, 0.164]],
  [0.309, [0, 0.997, 0.123]],
  [0.311, [0, 0.997, 0.123]],
  [0.313, [0.025, 0.998, 0.082]],
  [0.315, [0.025, 0.998, 0.082]],
  [0.317, [0.05, 1, 0.041]],
  [0.319, [0.05, 1, 0.041]],
  [0.321, [0.075, 0.985, 0]],
  [0.323, [0.075, 0.985, 0]],
  [0.325, [0.1, 0.97, 0]],
  [0.327, [0.1, 0.97, 0]],
  [0.329, [0.125, 0.956, 0]],
  [0.331, [0.125, 0.956, 0]],
  [0.333, [0.15, 0.941, 0]],
  [0.335, [0.15, 0.941, 0]],
  [0.337, [0.175, 0.926, 0]],
  [0.339, [0.175, 0.926, 0]],
  [0.341, [0.2, 0.911, 0]],
  [0.342, [0.2, 0.911, 0]],
  [0.344, [0.225, 0.897, 0]],
  [0.346, [0.225, 0.897, 0]],
  [0.348, [0.25, 0.882, 0]],
  [0.35, [0.25, 0.882, 0]],
  [0.352, [0.275, 0.867, 0]],
  [0.354, [0.275, 0.867, 0]],
  [0.356, [0.3, 0.852, 0]],
  [0.358, [0.3, 0.852, 0]],
  [0.36, [0.325, 0.838, 0]],
  [0.362, [0.325, 0.838, 0]],
  [0.364, [0.35, 0.823, 0]],
  [0.366, [0.35, 0.823, 0]],
  [0.368, [0.375, 0.808, 0]],
  [0.37, [0.375, 0.808, 0]],
  [0.372, [0.399, 0.821, 0]],
  [0.374, [0.399, 0.821, 0]],
  [0.376, [0.407, 0.834, 0]],
  [0.378, [0.407, 0.834, 0]],
  [0.38, [0.415, 0.847, 0]],
  [0.382, [0.415, 0.847, 0]],
  [0.384, [0.423, 0.859, 0]],
  [0.386, [0.423, 0.859, 0]],
  [0.387, [0.43, 0.872, 0]],
  [0.389, [0.43, 0.872, 0]],
  [0.391, [0.438, 0.885, 0]],
  [0.393, [0.438, 0.885, 0]],
  [0.395, [0.446, 0.898, 0]],
  [0.397, [0.446, 0.898, 0]],
  [0.399, [0.454, 0.91, 0]],
  [0.401, [0.454, 0.91, 0]],
  [0.403, [0.462, 0.923, 0]],
  [0.405, [0.462, 0.923, 0]],
  [0.407, [0.469, 0.936, 0]],
  [0.409, [0.469, 0.936, 0]],
  [0.411, [0.477, 0.949, 0]],
  [0.413, [0.477, 0.949, 0]],
  [0.415, [0.485, 0.962, 0]],
  [0.417, [0.485, 0.962, 0]],
  [0.419, [0.493, 0.974, 0.016]],
  [0.421, [0.493, 0.974, 0.016]],
  [0.423, [0.5, 0.987, 0.031]],
  [0.425, [0.5, 0.987, 0.031]],
  [0.427, [0.518, 1, 0.047]],
  [0.429, [0.518, 1, 0.047]],
  [0.431, [0.536, 1, 0.062]],
  [0.432, [0.536, 1, 0.062]],
  [0.434, [0.554, 1, 0.078]],
  [0.436, [0.554, 1, 0.078]],
  [0.438, [0.572, 1, 0.094]],
  [0.44, [0.572, 1, 0.094]],
  [0.442, [0.59, 1, 0.109]],
  [0.444, [0.59, 1, 0.109]],
  [0.446, [0.608, 1, 0.125]],
  [0.448, [0.608, 1, 0.125]],
  [0.45, [0.625, 1, 0.141]],
  [0.452, [0.625, 1, 0.141]],
  [0.454, [0.643, 1, 0.156]],
  [0.456, [0.643, 1, 0.156]],
  [0.458, [0.661, 1, 0.172]],
  [0.46, [0.661, 1, 0.172]],
  [0.462, [0.679, 1, 0.187]],
  [0.464, [0.679, 1, 0.187]],
  [0.466, [0.697, 1, 0.203]],
  [0.468, [0.697, 1, 0.203]],
  [0.47, [0.715, 1, 0.219]],
  [0.472, [0.715, 1, 0.219]],
  [0.474, [0.732, 1, 0.234]],
  [0.476, [0.732, 1, 0.234]],
  [0.477, [0.75, 1, 0.219]],
  [0.479, [0.75, 1, 0.219]],
  [0.481, [0.768, 1, 0.203]],
  [0.483, [0.768, 1, 0.203]],
  [0.485, [0.786, 1, 0.187]],
  [0.487, [0.786, 1, 0.187]],
  [0.489, [0.804, 1, 0.172]],
  [0.491, [0.804, 1, 0.172]],
  [0.493, [0.822, 1, 0.156]],
  [0.495, [0.822, 1, 0.156]],
  [0.497, [0.84, 1, 0.14]],
  [0.499, [0.84, 1, 0.14]],
  [0.501, [0.857, 1, 0.125]],
  [0.503, [0.857, 1, 0.125]],
  [0.505, [0.875, 1, 0.109]],
  [0.507, [0.875, 1, 0.109]],
  [0.509, [0.893, 1, 0.094]],
  [0.511, [0.893, 1, 0.094]],
  [0.513, [0.911, 1, 0.078]],
  [0.515, [0.911, 1, 0.078]],
  [0.517, [0.929, 1, 0.062]],
  [0.519, [0.929, 1, 0.062]],
  [0.521, [0.947, 1, 0.047]],
  [0.523, [0.947, 1, 0.047]],
  [0.524, [0.964, 0.99, 0.031]],
  [0.526, [0.964, 0.99, 0.031]],
  [0.528, [0.982, 0.981, 0.015]],
  [0.53, [0.982, 0.981, 0.015]],
  [0.532, [1, 0.971, 0]],
  [0.534, [1, 0.971, 0]],
  [0.536, [1, 0.961, 0]],
  [0.538, [1, 0.961, 0]],
  [0.54, [1, 0.952, 0]],
  [0.542, [1, 0.952, 0]],
  [0.544, [1, 0.942, 0]],
  [0.546, [1, 0.942, 0]],
  [0.548, [1, 0.932, 0]],
  [0.55, [1, 0.932, 0]],
  [0.552, [1, 0.923, 0]],
  [0.554, [1, 0.923, 0]],
  [0.556, [1, 0.913, 0]],
  [0.558, [1, 0.913, 0]],
  [0.56, [1, 0.903, 0]],
  [0.562, [1, 0.903, 0]],
  [0.564, [1, 0.894, 0]],
  [0.566, [1, 0.894, 0]],
  [0.568, [1, 0.884, 0]],
  [0.569, [1, 0.884, 0]],
  [0.571, [1, 0.874, 0]],
  [0.573, [1, 0.874, 0]],
  [0.575, [1, 0.865, 0]],
  [0.577, [1, 0.865, 0]],
  [0.579, [1, 0.855, 0]],
  [0.581, [1, 0.855, 0]],
  [0.583, [1, 0.845, 4e-3]],
  [0.585, [1, 0.845, 4e-3]],
  [0.587, [1, 0.836, 8e-3]],
  [0.589, [1, 0.836, 8e-3]],
  [0.591, [1, 0.826, 0.013]],
  [0.593, [1, 0.826, 0.013]],
  [0.595, [1, 0.816, 0.017]],
  [0.597, [1, 0.816, 0.017]],
  [0.599, [1, 0.807, 0.021]],
  [0.601, [1, 0.807, 0.021]],
  [0.603, [1, 0.797, 0.025]],
  [0.605, [1, 0.797, 0.025]],
  [0.607, [1, 0.787, 0.03]],
  [0.609, [1, 0.787, 0.03]],
  [0.611, [1, 0.778, 0.034]],
  [0.613, [1, 0.778, 0.034]],
  [0.614, [1, 0.768, 0.038]],
  [0.616, [1, 0.768, 0.038]],
  [0.618, [1, 0.758, 0.042]],
  [0.62, [1, 0.758, 0.042]],
  [0.622, [1, 0.749, 0.046]],
  [0.624, [1, 0.749, 0.046]],
  [0.626, [1, 0.739, 0.051]],
  [0.628, [1, 0.739, 0.051]],
  [0.63, [1, 0.729, 0.055]],
  [0.632, [1, 0.729, 0.055]],
  [0.634, [1, 0.697, 0.051]],
  [0.636, [1, 0.697, 0.051]],
  [0.638, [1, 0.665, 0.048]],
  [0.64, [1, 0.665, 0.048]],
  [0.642, [1, 0.633, 0.044]],
  [0.644, [1, 0.633, 0.044]],
  [0.646, [1, 0.601, 0.04]],
  [0.648, [1, 0.601, 0.04]],
  [0.65, [1, 0.569, 0.037]],
  [0.652, [1, 0.569, 0.037]],
  [0.654, [1, 0.537, 0.033]],
  [0.656, [1, 0.537, 0.033]],
  [0.658, [1, 0.505, 0.029]],
  [0.659, [1, 0.505, 0.029]],
  [0.661, [1, 0.473, 0.026]],
  [0.663, [1, 0.473, 0.026]],
  [0.665, [1, 0.44, 0.022]],
  [0.667, [1, 0.44, 0.022]],
  [0.669, [1, 0.408, 0.018]],
  [0.671, [1, 0.408, 0.018]],
  [0.673, [1, 0.376, 0.015]],
  [0.675, [1, 0.376, 0.015]],
  [0.677, [1, 0.344, 0.011]],
  [0.679, [1, 0.344, 0.011]],
  [0.681, [1, 0.312, 7e-3]],
  [0.683, [1, 0.312, 7e-3]],
  [0.685, [1, 0.28, 4e-3]],
  [0.687, [1, 0.28, 4e-3]],
  [0.689, [1, 0.261, 0]],
  [0.691, [1, 0.261, 0]],
  [0.693, [1, 0.242, 0]],
  [0.695, [1, 0.242, 0]],
  [0.697, [1, 0.224, 0]],
  [0.699, [1, 0.224, 0]],
  [0.701, [1, 0.205, 0]],
  [0.703, [1, 0.205, 0]],
  [0.705, [1, 0.186, 0]],
  [0.706, [1, 0.186, 0]],
  [0.708, [1, 0.168, 0]],
  [0.71, [1, 0.168, 0]],
  [0.712, [1, 0.149, 0]],
  [0.714, [1, 0.149, 0]],
  [0.716, [1, 0.131, 0]],
  [0.718, [1, 0.131, 0]],
  [0.72, [1, 0.112, 0]],
  [0.722, [1, 0.112, 0]],
  [0.724, [1, 0.093, 0]],
  [0.726, [1, 0.093, 0]],
  [0.728, [1, 0.075, 0]],
  [0.73, [1, 0.075, 0]],
  [0.732, [1, 0.056, 0]],
  [0.734, [1, 0.056, 0]],
  [0.736, [1, 0.037, 0]],
  [0.738, [1, 0.037, 0]],
  [0.74, [1, 0.019, 0.069]],
  [0.742, [1, 0.019, 0.069]],
  [0.744, [1, 0, 0.138]],
  [0.746, [1, 0, 0.138]],
  [0.748, [1, 0, 0.208]],
  [0.75, [1, 0, 0.208]],
  [0.751, [1, 0, 0.277]],
  [0.753, [1, 0, 0.277]],
  [0.755, [1, 0, 0.347]],
  [0.757, [1, 0, 0.347]],
  [0.759, [1, 0, 0.417]],
  [0.761, [1, 0, 0.417]],
  [0.763, [1, 0, 0.486]],
  [0.765, [1, 0, 0.486]],
  [0.767, [1, 0, 0.556]],
  [0.769, [1, 0, 0.556]],
  [0.771, [1, 0, 0.625]],
  [0.773, [1, 0, 0.625]],
  [0.775, [1, 0, 0.695]],
  [0.777, [1, 0, 0.695]],
  [0.779, [1, 0, 0.764]],
  [0.781, [1, 0, 0.764]],
  [0.783, [1, 0, 0.834]],
  [0.785, [1, 0, 0.834]],
  [0.787, [1, 0, 0.903]],
  [0.789, [1, 0, 0.903]],
  [0.791, [1, 0, 0.973]],
  [0.793, [1, 0, 0.973]],
  [0.795, [0.973, 0.013, 0.987]],
  [0.796, [0.973, 0.013, 0.987]],
  [0.798, [0.946, 0.027, 1]],
  [0.8, [0.946, 0.027, 1]],
  [0.802, [0.919, 0.04, 1]],
  [0.804, [0.919, 0.04, 1]],
  [0.806, [0.892, 0.054, 1]],
  [0.808, [0.892, 0.054, 1]],
  [0.81, [0.865, 0.067, 1]],
  [0.812, [0.865, 0.067, 1]],
  [0.814, [0.838, 0.081, 1]],
  [0.816, [0.838, 0.081, 1]],
  [0.818, [0.811, 0.094, 1]],
  [0.82, [0.811, 0.094, 1]],
  [0.822, [0.784, 0.108, 1]],
  [0.824, [0.784, 0.108, 1]],
  [0.826, [0.757, 0.121, 1]],
  [0.828, [0.757, 0.121, 1]],
  [0.83, [0.73, 0.135, 1]],
  [0.832, [0.73, 0.135, 1]],
  [0.834, [0.703, 0.148, 1]],
  [0.836, [0.703, 0.148, 1]],
  [0.838, [0.676, 0.162, 1]],
  [0.84, [0.676, 0.162, 1]],
  [0.841, [0.649, 0.176, 1]],
  [0.843, [0.649, 0.176, 1]],
  [0.845, [0.622, 0.199, 0.995]],
  [0.847, [0.622, 0.199, 0.995]],
  [0.849, [0.645, 0.222, 0.991]],
  [0.851, [0.645, 0.222, 0.991]],
  [0.853, [0.668, 0.245, 0.986]],
  [0.855, [0.668, 0.245, 0.986]],
  [0.857, [0.691, 0.268, 0.981]],
  [0.859, [0.691, 0.268, 0.981]],
  [0.861, [0.715, 0.291, 0.976]],
  [0.863, [0.715, 0.291, 0.976]],
  [0.865, [0.738, 0.315, 0.972]],
  [0.867, [0.738, 0.315, 0.972]],
  [0.869, [0.761, 0.338, 0.967]],
  [0.871, [0.761, 0.338, 0.967]],
  [0.873, [0.784, 0.361, 0.962]],
  [0.875, [0.784, 0.361, 0.962]],
  [0.877, [0.808, 0.384, 0.958]],
  [0.879, [0.808, 0.384, 0.958]],
  [0.881, [0.831, 0.407, 0.953]],
  [0.883, [0.831, 0.407, 0.953]],
  [0.885, [0.854, 0.431, 0.948]],
  [0.886, [0.854, 0.431, 0.948]],
  [0.888, [0.877, 0.454, 0.943]],
  [0.89, [0.877, 0.454, 0.943]],
  [0.892, [0.9, 0.477, 0.939]],
  [0.894, [0.9, 0.477, 0.939]],
  [0.896, [0.924, 0.5, 0.934]],
  [0.898, [0.924, 0.5, 0.934]],
  [0.9, [0.926, 0.518, 0.937]],
  [0.902, [0.926, 0.518, 0.937]],
  [0.904, [0.929, 0.537, 0.939]],
  [0.906, [0.929, 0.537, 0.939]],
  [0.908, [0.932, 0.555, 0.941]],
  [0.91, [0.932, 0.555, 0.941]],
  [0.912, [0.935, 0.573, 0.944]],
  [0.914, [0.935, 0.573, 0.944]],
  [0.916, [0.937, 0.591, 0.946]],
  [0.918, [0.937, 0.591, 0.946]],
  [0.92, [0.94, 0.609, 0.948]],
  [0.922, [0.94, 0.609, 0.948]],
  [0.924, [0.943, 0.627, 0.951]],
  [0.926, [0.943, 0.627, 0.951]],
  [0.928, [0.946, 0.646, 0.953]],
  [0.93, [0.946, 0.646, 0.953]],
  [0.932, [0.949, 0.664, 0.956]],
  [0.933, [0.949, 0.664, 0.956]],
  [0.935, [0.951, 0.682, 0.958]],
  [0.937, [0.951, 0.682, 0.958]],
  [0.939, [0.954, 0.7, 0.96]],
  [0.941, [0.954, 0.7, 0.96]],
  [0.943, [0.957, 0.718, 0.963]],
  [0.945, [0.957, 0.718, 0.963]],
  [0.947, [0.96, 0.736, 0.965]],
  [0.949, [0.96, 0.736, 0.965]],
  [0.951, [0.963, 0.755, 0.967]],
  [0.953, [0.963, 0.755, 0.967]],
  [0.955, [0.965, 0.773, 0.97]],
  [0.957, [0.965, 0.773, 0.97]],
  [0.959, [0.968, 0.791, 0.972]],
  [0.961, [0.968, 0.791, 0.972]],
  [0.963, [0.971, 0.809, 0.975]],
  [0.965, [0.971, 0.809, 0.975]],
  [0.967, [0.974, 0.827, 0.977]],
  [0.969, [0.974, 0.827, 0.977]],
  [0.971, [0.977, 0.845, 0.979]],
  [0.973, [0.977, 0.845, 0.979]],
  [0.975, [0.979, 0.864, 0.982]],
  [0.977, [0.979, 0.864, 0.982]],
  [0.978, [0.982, 0.882, 0.984]],
  [0.98, [0.982, 0.882, 0.984]],
  [0.982, [0.985, 0.9, 0.987]],
  [0.984, [0.985, 0.9, 0.987]],
  [0.986, [0.988, 0.918, 0.989]],
  [0.988, [0.988, 0.918, 0.989]],
  [0.99, [0.991, 0.936, 0.991]],
  [0.992, [0.991, 0.936, 0.991]],
  [0.994, [0.993, 0.954, 0.994]],
  [0.996, [0.993, 0.954, 0.994]],
  [0.998, [0.996, 0.973, 0.996]],
  [1, [0.996, 0.973, 0.996]]
], Bp = [
  [0, [1, 0, 0.16]],
  [2e-3, [1, 0, 0.16]],
  [4e-3, [1, 0, 0.139]],
  [6e-3, [1, 0, 0.139]],
  [8e-3, [1, 0, 0.118]],
  [0.01, [1, 0, 0.118]],
  [0.012, [1, 0, 0.097]],
  [0.014, [1, 0, 0.097]],
  [0.016, [1, 0, 0.076]],
  [0.018, [1, 0, 0.076]],
  [0.02, [1, 0, 0.055]],
  [0.022, [1, 0, 0.055]],
  [0.023, [1, 0, 0.035]],
  [0.025, [1, 0, 0.035]],
  [0.027, [1, 0, 0.014]],
  [0.029, [1, 0, 0.014]],
  [0.031, [1, 7e-3, 0]],
  [0.033, [1, 7e-3, 0]],
  [0.035, [1, 0.029, 0]],
  [0.037, [1, 0.029, 0]],
  [0.039, [1, 0.05, 0]],
  [0.041, [1, 0.05, 0]],
  [0.043, [1, 0.071, 0]],
  [0.045, [1, 0.071, 0]],
  [0.047, [1, 0.092, 0]],
  [0.049, [1, 0.092, 0]],
  [0.051, [1, 0.113, 0]],
  [0.053, [1, 0.113, 0]],
  [0.055, [1, 0.135, 0]],
  [0.057, [1, 0.135, 0]],
  [0.059, [1, 0.156, 0]],
  [0.061, [1, 0.156, 0]],
  [0.063, [1, 0.177, 0]],
  [0.065, [1, 0.177, 0]],
  [0.067, [1, 0.198, 0]],
  [0.068, [1, 0.198, 0]],
  [0.07, [1, 0.219, 0]],
  [0.072, [1, 0.219, 0]],
  [0.074, [1, 0.241, 0]],
  [0.076, [1, 0.241, 0]],
  [0.078, [1, 0.262, 0]],
  [0.08, [1, 0.262, 0]],
  [0.082, [1, 0.283, 0]],
  [0.084, [1, 0.283, 0]],
  [0.086, [1, 0.304, 0]],
  [0.088, [1, 0.304, 0]],
  [0.09, [1, 0.325, 0]],
  [0.092, [1, 0.325, 0]],
  [0.094, [1, 0.347, 0]],
  [0.096, [1, 0.347, 0]],
  [0.098, [1, 0.368, 0]],
  [0.1, [1, 0.368, 0]],
  [0.102, [1, 0.389, 0]],
  [0.104, [1, 0.389, 0]],
  [0.106, [1, 0.41, 0]],
  [0.108, [1, 0.41, 0]],
  [0.11, [1, 0.431, 0]],
  [0.112, [1, 0.431, 0]],
  [0.114, [1, 0.453, 0]],
  [0.115, [1, 0.453, 0]],
  [0.117, [1, 0.474, 0]],
  [0.119, [1, 0.474, 0]],
  [0.121, [1, 0.495, 0]],
  [0.123, [1, 0.495, 0]],
  [0.125, [1, 0.516, 0]],
  [0.127, [1, 0.516, 0]],
  [0.129, [1, 0.537, 0]],
  [0.131, [1, 0.537, 0]],
  [0.133, [1, 0.559, 0]],
  [0.135, [1, 0.559, 0]],
  [0.137, [1, 0.58, 0]],
  [0.139, [1, 0.58, 0]],
  [0.141, [1, 0.601, 0]],
  [0.143, [1, 0.601, 0]],
  [0.145, [1, 0.622, 0]],
  [0.147, [1, 0.622, 0]],
  [0.149, [1, 0.643, 0]],
  [0.151, [1, 0.643, 0]],
  [0.153, [1, 0.665, 0]],
  [0.155, [1, 0.665, 0]],
  [0.157, [1, 0.686, 0]],
  [0.159, [1, 0.686, 0]],
  [0.16, [1, 0.707, 0]],
  [0.162, [1, 0.707, 0]],
  [0.164, [1, 0.728, 0]],
  [0.166, [1, 0.728, 0]],
  [0.168, [1, 0.749, 0]],
  [0.17, [1, 0.749, 0]],
  [0.172, [1, 0.771, 0]],
  [0.174, [1, 0.771, 0]],
  [0.176, [1, 0.792, 0]],
  [0.178, [1, 0.792, 0]],
  [0.18, [1, 0.813, 0]],
  [0.182, [1, 0.813, 0]],
  [0.184, [1, 0.834, 0]],
  [0.186, [1, 0.834, 0]],
  [0.188, [1, 0.855, 0]],
  [0.19, [1, 0.855, 0]],
  [0.192, [1, 0.877, 0]],
  [0.194, [1, 0.877, 0]],
  [0.196, [1, 0.898, 0]],
  [0.198, [1, 0.898, 0]],
  [0.2, [1, 0.919, 0]],
  [0.202, [1, 0.919, 0]],
  [0.204, [1, 0.94, 0]],
  [0.205, [1, 0.94, 0]],
  [0.207, [1, 0.961, 0]],
  [0.209, [1, 0.961, 0]],
  [0.211, [1, 0.983, 0]],
  [0.213, [1, 0.983, 0]],
  [0.215, [0.996, 1, 0]],
  [0.217, [0.996, 1, 0]],
  [0.219, [0.975, 1, 0]],
  [0.221, [0.975, 1, 0]],
  [0.223, [0.954, 1, 0]],
  [0.225, [0.954, 1, 0]],
  [0.227, [0.933, 1, 0]],
  [0.229, [0.933, 1, 0]],
  [0.231, [0.911, 1, 0]],
  [0.233, [0.911, 1, 0]],
  [0.235, [0.89, 1, 0]],
  [0.237, [0.89, 1, 0]],
  [0.239, [0.869, 1, 0]],
  [0.241, [0.869, 1, 0]],
  [0.243, [0.848, 1, 0]],
  [0.245, [0.848, 1, 0]],
  [0.247, [0.827, 1, 0]],
  [0.249, [0.827, 1, 0]],
  [0.25, [0.806, 1, 0]],
  [0.252, [0.806, 1, 0]],
  [0.254, [0.784, 1, 0]],
  [0.256, [0.784, 1, 0]],
  [0.258, [0.763, 1, 0]],
  [0.26, [0.763, 1, 0]],
  [0.262, [0.742, 1, 0]],
  [0.264, [0.742, 1, 0]],
  [0.266, [0.721, 1, 0]],
  [0.268, [0.721, 1, 0]],
  [0.27, [0.7, 1, 0]],
  [0.272, [0.7, 1, 0]],
  [0.274, [0.678, 1, 0]],
  [0.276, [0.678, 1, 0]],
  [0.278, [0.657, 1, 0]],
  [0.28, [0.657, 1, 0]],
  [0.282, [0.636, 1, 0]],
  [0.284, [0.636, 1, 0]],
  [0.286, [0.615, 1, 0]],
  [0.288, [0.615, 1, 0]],
  [0.29, [0.594, 1, 0]],
  [0.292, [0.594, 1, 0]],
  [0.294, [0.572, 1, 0]],
  [0.295, [0.572, 1, 0]],
  [0.297, [0.551, 1, 0]],
  [0.299, [0.551, 1, 0]],
  [0.301, [0.53, 1, 0]],
  [0.303, [0.53, 1, 0]],
  [0.305, [0.509, 1, 0]],
  [0.307, [0.509, 1, 0]],
  [0.309, [0.488, 1, 0]],
  [0.311, [0.488, 1, 0]],
  [0.313, [0.466, 1, 0]],
  [0.315, [0.466, 1, 0]],
  [0.317, [0.445, 1, 0]],
  [0.319, [0.445, 1, 0]],
  [0.321, [0.424, 1, 0]],
  [0.323, [0.424, 1, 0]],
  [0.325, [0.403, 1, 0]],
  [0.327, [0.403, 1, 0]],
  [0.329, [0.382, 1, 0]],
  [0.331, [0.382, 1, 0]],
  [0.333, [0.36, 1, 0]],
  [0.335, [0.36, 1, 0]],
  [0.337, [0.339, 1, 0]],
  [0.339, [0.339, 1, 0]],
  [0.341, [0.318, 1, 0]],
  [0.342, [0.318, 1, 0]],
  [0.344, [0.297, 1, 0]],
  [0.346, [0.297, 1, 0]],
  [0.348, [0.276, 1, 0]],
  [0.35, [0.276, 1, 0]],
  [0.352, [0.254, 1, 0]],
  [0.354, [0.254, 1, 0]],
  [0.356, [0.233, 1, 0]],
  [0.358, [0.233, 1, 0]],
  [0.36, [0.212, 1, 0]],
  [0.362, [0.212, 1, 0]],
  [0.364, [0.191, 1, 0]],
  [0.366, [0.191, 1, 0]],
  [0.368, [0.17, 1, 0]],
  [0.37, [0.17, 1, 0]],
  [0.372, [0.148, 1, 0]],
  [0.374, [0.148, 1, 0]],
  [0.376, [0.127, 1, 0]],
  [0.378, [0.127, 1, 0]],
  [0.38, [0.106, 1, 0]],
  [0.382, [0.106, 1, 0]],
  [0.384, [0.085, 1, 0]],
  [0.386, [0.085, 1, 0]],
  [0.387, [0.064, 1, 0]],
  [0.389, [0.064, 1, 0]],
  [0.391, [0.042, 1, 0]],
  [0.393, [0.042, 1, 0]],
  [0.395, [0.021, 1, 0]],
  [0.397, [0.021, 1, 0]],
  [0.399, [0, 1, 0]],
  [0.401, [0, 1, 0]],
  [0.403, [0, 1, 0.021]],
  [0.405, [0, 1, 0.021]],
  [0.407, [0, 1, 0.042]],
  [0.409, [0, 1, 0.042]],
  [0.411, [0, 1, 0.063]],
  [0.413, [0, 1, 0.063]],
  [0.415, [0, 1, 0.084]],
  [0.417, [0, 1, 0.084]],
  [0.419, [0, 1, 0.105]],
  [0.421, [0, 1, 0.105]],
  [0.423, [0, 1, 0.127]],
  [0.425, [0, 1, 0.127]],
  [0.427, [0, 1, 0.148]],
  [0.429, [0, 1, 0.148]],
  [0.431, [0, 1, 0.169]],
  [0.432, [0, 1, 0.169]],
  [0.434, [0, 1, 0.19]],
  [0.436, [0, 1, 0.19]],
  [0.438, [0, 1, 0.211]],
  [0.44, [0, 1, 0.211]],
  [0.442, [0, 1, 0.232]],
  [0.444, [0, 1, 0.232]],
  [0.446, [0, 1, 0.253]],
  [0.448, [0, 1, 0.253]],
  [0.45, [0, 1, 0.274]],
  [0.452, [0, 1, 0.274]],
  [0.454, [0, 1, 0.295]],
  [0.456, [0, 1, 0.295]],
  [0.458, [0, 1, 0.316]],
  [0.46, [0, 1, 0.316]],
  [0.462, [0, 1, 0.337]],
  [0.464, [0, 1, 0.337]],
  [0.466, [0, 1, 0.358]],
  [0.468, [0, 1, 0.358]],
  [0.47, [0, 1, 0.38]],
  [0.472, [0, 1, 0.38]],
  [0.474, [0, 1, 0.401]],
  [0.476, [0, 1, 0.401]],
  [0.477, [0, 1, 0.422]],
  [0.479, [0, 1, 0.422]],
  [0.481, [0, 1, 0.443]],
  [0.483, [0, 1, 0.443]],
  [0.485, [0, 1, 0.464]],
  [0.487, [0, 1, 0.464]],
  [0.489, [0, 1, 0.485]],
  [0.491, [0, 1, 0.485]],
  [0.493, [0, 1, 0.506]],
  [0.495, [0, 1, 0.506]],
  [0.497, [0, 1, 0.527]],
  [0.499, [0, 1, 0.527]],
  [0.501, [0, 1, 0.548]],
  [0.503, [0, 1, 0.548]],
  [0.505, [0, 1, 0.569]],
  [0.507, [0, 1, 0.569]],
  [0.509, [0, 1, 0.59]],
  [0.511, [0, 1, 0.59]],
  [0.513, [0, 1, 0.611]],
  [0.515, [0, 1, 0.611]],
  [0.517, [0, 1, 0.633]],
  [0.519, [0, 1, 0.633]],
  [0.521, [0, 1, 0.654]],
  [0.523, [0, 1, 0.654]],
  [0.524, [0, 1, 0.675]],
  [0.526, [0, 1, 0.675]],
  [0.528, [0, 1, 0.696]],
  [0.53, [0, 1, 0.696]],
  [0.532, [0, 1, 0.717]],
  [0.534, [0, 1, 0.717]],
  [0.536, [0, 1, 0.738]],
  [0.538, [0, 1, 0.738]],
  [0.54, [0, 1, 0.759]],
  [0.542, [0, 1, 0.759]],
  [0.544, [0, 1, 0.78]],
  [0.546, [0, 1, 0.78]],
  [0.548, [0, 1, 0.801]],
  [0.55, [0, 1, 0.801]],
  [0.552, [0, 1, 0.822]],
  [0.554, [0, 1, 0.822]],
  [0.556, [0, 1, 0.843]],
  [0.558, [0, 1, 0.843]],
  [0.56, [0, 1, 0.864]],
  [0.562, [0, 1, 0.864]],
  [0.564, [0, 1, 0.886]],
  [0.566, [0, 1, 0.886]],
  [0.568, [0, 1, 0.907]],
  [0.569, [0, 1, 0.907]],
  [0.571, [0, 1, 0.928]],
  [0.573, [0, 1, 0.928]],
  [0.575, [0, 1, 0.949]],
  [0.577, [0, 1, 0.949]],
  [0.579, [0, 1, 0.97]],
  [0.581, [0, 1, 0.97]],
  [0.583, [0, 1, 0.991]],
  [0.585, [0, 1, 0.991]],
  [0.587, [0, 0.988, 1]],
  [0.589, [0, 0.988, 1]],
  [0.591, [0, 0.967, 1]],
  [0.593, [0, 0.967, 1]],
  [0.595, [0, 0.945, 1]],
  [0.597, [0, 0.945, 1]],
  [0.599, [0, 0.924, 1]],
  [0.601, [0, 0.924, 1]],
  [0.603, [0, 0.903, 1]],
  [0.605, [0, 0.903, 1]],
  [0.607, [0, 0.881, 1]],
  [0.609, [0, 0.881, 1]],
  [0.611, [0, 0.86, 1]],
  [0.613, [0, 0.86, 1]],
  [0.614, [0, 0.839, 1]],
  [0.616, [0, 0.839, 1]],
  [0.618, [0, 0.817, 1]],
  [0.62, [0, 0.817, 1]],
  [0.622, [0, 0.796, 1]],
  [0.624, [0, 0.796, 1]],
  [0.626, [0, 0.775, 1]],
  [0.628, [0, 0.775, 1]],
  [0.63, [0, 0.753, 1]],
  [0.632, [0, 0.753, 1]],
  [0.634, [0, 0.732, 1]],
  [0.636, [0, 0.732, 1]],
  [0.638, [0, 0.711, 1]],
  [0.64, [0, 0.711, 1]],
  [0.642, [0, 0.689, 1]],
  [0.644, [0, 0.689, 1]],
  [0.646, [0, 0.668, 1]],
  [0.648, [0, 0.668, 1]],
  [0.65, [0, 0.647, 1]],
  [0.652, [0, 0.647, 1]],
  [0.654, [0, 0.626, 1]],
  [0.656, [0, 0.626, 1]],
  [0.658, [0, 0.604, 1]],
  [0.659, [0, 0.604, 1]],
  [0.661, [0, 0.583, 1]],
  [0.663, [0, 0.583, 1]],
  [0.665, [0, 0.562, 1]],
  [0.667, [0, 0.562, 1]],
  [0.669, [0, 0.54, 1]],
  [0.671, [0, 0.54, 1]],
  [0.673, [0, 0.519, 1]],
  [0.675, [0, 0.519, 1]],
  [0.677, [0, 0.498, 1]],
  [0.679, [0, 0.498, 1]],
  [0.681, [0, 0.476, 1]],
  [0.683, [0, 0.476, 1]],
  [0.685, [0, 0.455, 1]],
  [0.687, [0, 0.455, 1]],
  [0.689, [0, 0.434, 1]],
  [0.691, [0, 0.434, 1]],
  [0.693, [0, 0.412, 1]],
  [0.695, [0, 0.412, 1]],
  [0.697, [0, 0.391, 1]],
  [0.699, [0, 0.391, 1]],
  [0.701, [0, 0.37, 1]],
  [0.703, [0, 0.37, 1]],
  [0.705, [0, 0.348, 1]],
  [0.706, [0, 0.348, 1]],
  [0.708, [0, 0.327, 1]],
  [0.71, [0, 0.327, 1]],
  [0.712, [0, 0.306, 1]],
  [0.714, [0, 0.306, 1]],
  [0.716, [0, 0.285, 1]],
  [0.718, [0, 0.285, 1]],
  [0.72, [0, 0.263, 1]],
  [0.722, [0, 0.263, 1]],
  [0.724, [0, 0.242, 1]],
  [0.726, [0, 0.242, 1]],
  [0.728, [0, 0.221, 1]],
  [0.73, [0, 0.221, 1]],
  [0.732, [0, 0.199, 1]],
  [0.734, [0, 0.199, 1]],
  [0.736, [0, 0.178, 1]],
  [0.738, [0, 0.178, 1]],
  [0.74, [0, 0.157, 1]],
  [0.742, [0, 0.157, 1]],
  [0.744, [0, 0.135, 1]],
  [0.746, [0, 0.135, 1]],
  [0.748, [0, 0.114, 1]],
  [0.75, [0, 0.114, 1]],
  [0.751, [0, 0.093, 1]],
  [0.753, [0, 0.093, 1]],
  [0.755, [0, 0.071, 1]],
  [0.757, [0, 0.071, 1]],
  [0.759, [0, 0.05, 1]],
  [0.761, [0, 0.05, 1]],
  [0.763, [0, 0.029, 1]],
  [0.765, [0, 0.029, 1]],
  [0.767, [0, 7e-3, 1]],
  [0.769, [0, 7e-3, 1]],
  [0.771, [0.014, 0, 1]],
  [0.773, [0.014, 0, 1]],
  [0.775, [0.035, 0, 1]],
  [0.777, [0.035, 0, 1]],
  [0.779, [0.056, 0, 1]],
  [0.781, [0.056, 0, 1]],
  [0.783, [0.078, 0, 1]],
  [0.785, [0.078, 0, 1]],
  [0.787, [0.099, 0, 1]],
  [0.789, [0.099, 0, 1]],
  [0.791, [0.12, 0, 1]],
  [0.793, [0.12, 0, 1]],
  [0.795, [0.142, 0, 1]],
  [0.796, [0.142, 0, 1]],
  [0.798, [0.163, 0, 1]],
  [0.8, [0.163, 0, 1]],
  [0.802, [0.184, 0, 1]],
  [0.804, [0.184, 0, 1]],
  [0.806, [0.206, 0, 1]],
  [0.808, [0.206, 0, 1]],
  [0.81, [0.227, 0, 1]],
  [0.812, [0.227, 0, 1]],
  [0.814, [0.248, 0, 1]],
  [0.816, [0.248, 0, 1]],
  [0.818, [0.27, 0, 1]],
  [0.82, [0.27, 0, 1]],
  [0.822, [0.291, 0, 1]],
  [0.824, [0.291, 0, 1]],
  [0.826, [0.312, 0, 1]],
  [0.828, [0.312, 0, 1]],
  [0.83, [0.334, 0, 1]],
  [0.832, [0.334, 0, 1]],
  [0.834, [0.355, 0, 1]],
  [0.836, [0.355, 0, 1]],
  [0.838, [0.376, 0, 1]],
  [0.84, [0.376, 0, 1]],
  [0.841, [0.397, 0, 1]],
  [0.843, [0.397, 0, 1]],
  [0.845, [0.419, 0, 1]],
  [0.847, [0.419, 0, 1]],
  [0.849, [0.44, 0, 1]],
  [0.851, [0.44, 0, 1]],
  [0.853, [0.461, 0, 1]],
  [0.855, [0.461, 0, 1]],
  [0.857, [0.483, 0, 1]],
  [0.859, [0.483, 0, 1]],
  [0.861, [0.504, 0, 1]],
  [0.863, [0.504, 0, 1]],
  [0.865, [0.525, 0, 1]],
  [0.867, [0.525, 0, 1]],
  [0.869, [0.547, 0, 1]],
  [0.871, [0.547, 0, 1]],
  [0.873, [0.568, 0, 1]],
  [0.875, [0.568, 0, 1]],
  [0.877, [0.589, 0, 1]],
  [0.879, [0.589, 0, 1]],
  [0.881, [0.611, 0, 1]],
  [0.883, [0.611, 0, 1]],
  [0.885, [0.632, 0, 1]],
  [0.886, [0.632, 0, 1]],
  [0.888, [0.653, 0, 1]],
  [0.89, [0.653, 0, 1]],
  [0.892, [0.675, 0, 1]],
  [0.894, [0.675, 0, 1]],
  [0.896, [0.696, 0, 1]],
  [0.898, [0.696, 0, 1]],
  [0.9, [0.717, 0, 1]],
  [0.902, [0.717, 0, 1]],
  [0.904, [0.738, 0, 1]],
  [0.906, [0.738, 0, 1]],
  [0.908, [0.76, 0, 1]],
  [0.91, [0.76, 0, 1]],
  [0.912, [0.781, 0, 1]],
  [0.914, [0.781, 0, 1]],
  [0.916, [0.802, 0, 1]],
  [0.918, [0.802, 0, 1]],
  [0.92, [0.824, 0, 1]],
  [0.922, [0.824, 0, 1]],
  [0.924, [0.845, 0, 1]],
  [0.926, [0.845, 0, 1]],
  [0.928, [0.866, 0, 1]],
  [0.93, [0.866, 0, 1]],
  [0.932, [0.888, 0, 1]],
  [0.933, [0.888, 0, 1]],
  [0.935, [0.909, 0, 1]],
  [0.937, [0.909, 0, 1]],
  [0.939, [0.93, 0, 1]],
  [0.941, [0.93, 0, 1]],
  [0.943, [0.952, 0, 1]],
  [0.945, [0.952, 0, 1]],
  [0.947, [0.973, 0, 1]],
  [0.949, [0.973, 0, 1]],
  [0.951, [0.994, 0, 1]],
  [0.953, [0.994, 0, 1]],
  [0.955, [1, 0, 0.984]],
  [0.957, [1, 0, 0.984]],
  [0.959, [1, 0, 0.963]],
  [0.961, [1, 0, 0.963]],
  [0.963, [1, 0, 0.942]],
  [0.965, [1, 0, 0.942]],
  [0.967, [1, 0, 0.921]],
  [0.969, [1, 0, 0.921]],
  [0.971, [1, 0, 0.899]],
  [0.973, [1, 0, 0.899]],
  [0.975, [1, 0, 0.878]],
  [0.977, [1, 0, 0.878]],
  [0.978, [1, 0, 0.857]],
  [0.98, [1, 0, 0.857]],
  [0.982, [1, 0, 0.835]],
  [0.984, [1, 0, 0.835]],
  [0.986, [1, 0, 0.814]],
  [0.988, [1, 0, 0.814]],
  [0.99, [1, 0, 0.793]],
  [0.992, [1, 0, 0.793]],
  [0.994, [1, 0, 0.771]],
  [0.996, [1, 0, 0.771]],
  [0.998, [1, 0, 0.75]],
  [1, [1, 0, 0.75]]
], Vp = [
  [0, [0, 0, 0]],
  [2e-3, [0, 0, 0]],
  [4e-3, [0.072, 4e-3, 8e-3]],
  [6e-3, [0.072, 4e-3, 8e-3]],
  [8e-3, [0.143, 8e-3, 0.016]],
  [0.01, [0.143, 8e-3, 0.016]],
  [0.012, [0.215, 0.012, 0.024]],
  [0.014, [0.215, 0.012, 0.024]],
  [0.016, [0.287, 0.016, 0.031]],
  [0.018, [0.287, 0.016, 0.031]],
  [0.02, [0.358, 0.02, 0.039]],
  [0.022, [0.358, 0.02, 0.039]],
  [0.023, [0.43, 0.024, 0.047]],
  [0.025, [0.43, 0.024, 0.047]],
  [0.027, [0.502, 0.027, 0.055]],
  [0.029, [0.502, 0.027, 0.055]],
  [0.031, [0.574, 0.031, 0.063]],
  [0.033, [0.574, 0.031, 0.063]],
  [0.035, [0.645, 0.035, 0.071]],
  [0.037, [0.645, 0.035, 0.071]],
  [0.039, [0.717, 0.039, 0.078]],
  [0.041, [0.717, 0.039, 0.078]],
  [0.043, [0.789, 0.043, 0.086]],
  [0.045, [0.789, 0.043, 0.086]],
  [0.047, [0.86, 0.047, 0.094]],
  [0.049, [0.86, 0.047, 0.094]],
  [0.051, [0.932, 0.051, 0.102]],
  [0.053, [0.932, 0.051, 0.102]],
  [0.055, [0.999, 0.055, 0.11]],
  [0.057, [0.999, 0.055, 0.11]],
  [0.059, [0.979, 0.059, 0.118]],
  [0.061, [0.979, 0.059, 0.118]],
  [0.063, [0.96, 0.063, 0.125]],
  [0.065, [0.96, 0.063, 0.125]],
  [0.067, [0.94, 0.067, 0.133]],
  [0.068, [0.94, 0.067, 0.133]],
  [0.07, [0.921, 0.071, 0.141]],
  [0.072, [0.921, 0.071, 0.141]],
  [0.074, [0.901, 0.075, 0.149]],
  [0.076, [0.901, 0.075, 0.149]],
  [0.078, [0.882, 0.078, 0.157]],
  [0.08, [0.882, 0.078, 0.157]],
  [0.082, [0.862, 0.082, 0.165]],
  [0.084, [0.862, 0.082, 0.165]],
  [0.086, [0.843, 0.086, 0.173]],
  [0.088, [0.843, 0.086, 0.173]],
  [0.09, [0.823, 0.09, 0.18]],
  [0.092, [0.823, 0.09, 0.18]],
  [0.094, [0.804, 0.094, 0.188]],
  [0.096, [0.804, 0.094, 0.188]],
  [0.098, [0.784, 0.098, 0.196]],
  [0.1, [0.784, 0.098, 0.196]],
  [0.102, [0.765, 0.102, 0.204]],
  [0.104, [0.765, 0.102, 0.204]],
  [0.106, [0.745, 0.106, 0.212]],
  [0.108, [0.745, 0.106, 0.212]],
  [0.11, [0.725, 0.11, 0.22]],
  [0.112, [0.725, 0.11, 0.22]],
  [0.114, [0.706, 0.114, 0.227]],
  [0.115, [0.706, 0.114, 0.227]],
  [0.117, [0.686, 0.118, 0.235]],
  [0.119, [0.686, 0.118, 0.235]],
  [0.121, [0.667, 0.122, 0.243]],
  [0.123, [0.667, 0.122, 0.243]],
  [0.125, [0.647, 0.125, 0.251]],
  [0.127, [0.647, 0.125, 0.251]],
  [0.129, [0.628, 0.129, 0.259]],
  [0.131, [0.628, 0.129, 0.259]],
  [0.133, [0.608, 0.133, 0.267]],
  [0.135, [0.608, 0.133, 0.267]],
  [0.137, [0.589, 0.137, 0.275]],
  [0.139, [0.589, 0.137, 0.275]],
  [0.141, [0.569, 0.141, 0.282]],
  [0.143, [0.569, 0.141, 0.282]],
  [0.145, [0.55, 0.145, 0.29]],
  [0.147, [0.55, 0.145, 0.29]],
  [0.149, [0.53, 0.149, 0.298]],
  [0.151, [0.53, 0.149, 0.298]],
  [0.153, [0.511, 0.153, 0.306]],
  [0.155, [0.511, 0.153, 0.306]],
  [0.157, [0.491, 0.157, 0.314]],
  [0.159, [0.491, 0.157, 0.314]],
  [0.16, [0.471, 0.161, 0.322]],
  [0.162, [0.471, 0.161, 0.322]],
  [0.164, [0.452, 0.165, 0.329]],
  [0.166, [0.452, 0.165, 0.329]],
  [0.168, [0.432, 0.169, 0.337]],
  [0.17, [0.432, 0.169, 0.337]],
  [0.172, [0.413, 0.173, 0.345]],
  [0.174, [0.413, 0.173, 0.345]],
  [0.176, [0.393, 0.176, 0.353]],
  [0.178, [0.393, 0.176, 0.353]],
  [0.18, [0.374, 0.18, 0.361]],
  [0.182, [0.374, 0.18, 0.361]],
  [0.184, [0.354, 0.184, 0.369]],
  [0.186, [0.354, 0.184, 0.369]],
  [0.188, [0.335, 0.188, 0.376]],
  [0.19, [0.335, 0.188, 0.376]],
  [0.192, [0.315, 0.192, 0.384]],
  [0.194, [0.315, 0.192, 0.384]],
  [0.196, [0.296, 0.196, 0.392]],
  [0.198, [0.296, 0.196, 0.392]],
  [0.2, [0.276, 0.2, 0.4]],
  [0.202, [0.276, 0.2, 0.4]],
  [0.204, [0.257, 0.204, 0.408]],
  [0.205, [0.257, 0.204, 0.408]],
  [0.207, [0.237, 0.208, 0.416]],
  [0.209, [0.237, 0.208, 0.416]],
  [0.211, [0.217, 0.212, 0.424]],
  [0.213, [0.217, 0.212, 0.424]],
  [0.215, [0.198, 0.216, 0.431]],
  [0.217, [0.198, 0.216, 0.431]],
  [0.219, [0.178, 0.22, 0.439]],
  [0.221, [0.178, 0.22, 0.439]],
  [0.223, [0.159, 0.224, 0.447]],
  [0.225, [0.159, 0.224, 0.447]],
  [0.227, [0.139, 0.227, 0.455]],
  [0.229, [0.139, 0.227, 0.455]],
  [0.231, [0.12, 0.231, 0.463]],
  [0.233, [0.12, 0.231, 0.463]],
  [0.235, [0.1, 0.235, 0.471]],
  [0.237, [0.1, 0.235, 0.471]],
  [0.239, [0.081, 0.239, 0.478]],
  [0.241, [0.081, 0.239, 0.478]],
  [0.243, [0.061, 0.243, 0.486]],
  [0.245, [0.061, 0.243, 0.486]],
  [0.247, [0.042, 0.247, 0.494]],
  [0.249, [0.042, 0.247, 0.494]],
  [0.25, [0.251, 0.251, 0.502]],
  [0.252, [0.251, 0.251, 0.502]],
  [0.254, [0.255, 0.255, 0.51]],
  [0.256, [0.255, 0.255, 0.51]],
  [0.258, [0.259, 0.259, 0.518]],
  [0.26, [0.259, 0.259, 0.518]],
  [0.262, [0.263, 0.263, 0.525]],
  [0.264, [0.263, 0.263, 0.525]],
  [0.266, [0.267, 0.267, 0.533]],
  [0.268, [0.267, 0.267, 0.533]],
  [0.27, [0.271, 0.271, 0.541]],
  [0.272, [0.271, 0.271, 0.541]],
  [0.274, [0.275, 0.275, 0.549]],
  [0.276, [0.275, 0.275, 0.549]],
  [0.278, [0.278, 0.278, 0.557]],
  [0.28, [0.278, 0.278, 0.557]],
  [0.282, [0.282, 0.282, 0.565]],
  [0.284, [0.282, 0.282, 0.565]],
  [0.286, [0.286, 0.286, 0.573]],
  [0.288, [0.286, 0.286, 0.573]],
  [0.29, [0.29, 0.29, 0.58]],
  [0.292, [0.29, 0.29, 0.58]],
  [0.294, [0.294, 0.294, 0.588]],
  [0.295, [0.294, 0.294, 0.588]],
  [0.297, [0.298, 0.298, 0.596]],
  [0.299, [0.298, 0.298, 0.596]],
  [0.301, [0.302, 0.302, 0.604]],
  [0.303, [0.302, 0.302, 0.604]],
  [0.305, [0.306, 0.306, 0.612]],
  [0.307, [0.306, 0.306, 0.612]],
  [0.309, [0.31, 0.31, 0.62]],
  [0.311, [0.31, 0.31, 0.62]],
  [0.313, [0.314, 0.314, 0.627]],
  [0.315, [0.314, 0.314, 0.627]],
  [0.317, [0.318, 0.318, 0.635]],
  [0.319, [0.318, 0.318, 0.635]],
  [0.321, [0.322, 0.322, 0.643]],
  [0.323, [0.322, 0.322, 0.643]],
  [0.325, [0.325, 0.325, 0.651]],
  [0.327, [0.325, 0.325, 0.651]],
  [0.329, [0.329, 0.329, 0.659]],
  [0.331, [0.329, 0.329, 0.659]],
  [0.333, [0.333, 0.333, 0.667]],
  [0.335, [0.333, 0.333, 0.667]],
  [0.337, [0.337, 0.337, 0.675]],
  [0.339, [0.337, 0.337, 0.675]],
  [0.341, [0.341, 0.341, 0.682]],
  [0.342, [0.341, 0.341, 0.682]],
  [0.344, [0.345, 0.345, 0.69]],
  [0.346, [0.345, 0.345, 0.69]],
  [0.348, [0.349, 0.349, 0.698]],
  [0.35, [0.349, 0.349, 0.698]],
  [0.352, [0.353, 0.353, 0.706]],
  [0.354, [0.353, 0.353, 0.706]],
  [0.356, [0.357, 0.357, 0.714]],
  [0.358, [0.357, 0.357, 0.714]],
  [0.36, [0.361, 0.361, 0.722]],
  [0.362, [0.361, 0.361, 0.722]],
  [0.364, [0.365, 0.365, 0.729]],
  [0.366, [0.365, 0.365, 0.729]],
  [0.368, [0.369, 0.369, 0.737]],
  [0.37, [0.369, 0.369, 0.737]],
  [0.372, [0.373, 0.373, 0.745]],
  [0.374, [0.373, 0.373, 0.745]],
  [0.376, [0.376, 0.376, 0.753]],
  [0.378, [0.376, 0.376, 0.753]],
  [0.38, [0.38, 0.38, 0.761]],
  [0.382, [0.38, 0.38, 0.761]],
  [0.384, [0.384, 0.384, 0.769]],
  [0.386, [0.384, 0.384, 0.769]],
  [0.387, [0.388, 0.388, 0.776]],
  [0.389, [0.388, 0.388, 0.776]],
  [0.391, [0.392, 0.392, 0.784]],
  [0.393, [0.392, 0.392, 0.784]],
  [0.395, [0.396, 0.396, 0.792]],
  [0.397, [0.396, 0.396, 0.792]],
  [0.399, [0.4, 0.4, 0.8]],
  [0.401, [0.4, 0.4, 0.8]],
  [0.403, [0.404, 0.404, 0.808]],
  [0.405, [0.404, 0.404, 0.808]],
  [0.407, [0.408, 0.408, 0.816]],
  [0.409, [0.408, 0.408, 0.816]],
  [0.411, [0.412, 0.412, 0.824]],
  [0.413, [0.412, 0.412, 0.824]],
  [0.415, [0.416, 0.416, 0.831]],
  [0.417, [0.416, 0.416, 0.831]],
  [0.419, [0.42, 0.42, 0.839]],
  [0.421, [0.42, 0.42, 0.839]],
  [0.423, [0.424, 0.424, 0.847]],
  [0.425, [0.424, 0.424, 0.847]],
  [0.427, [0.427, 0.427, 0.855]],
  [0.429, [0.427, 0.427, 0.855]],
  [0.431, [0.431, 0.431, 0.863]],
  [0.432, [0.431, 0.431, 0.863]],
  [0.434, [0.435, 0.435, 0.871]],
  [0.436, [0.435, 0.435, 0.871]],
  [0.438, [0.439, 0.439, 0.878]],
  [0.44, [0.439, 0.439, 0.878]],
  [0.442, [0.443, 0.443, 0.886]],
  [0.444, [0.443, 0.443, 0.886]],
  [0.446, [0.447, 0.447, 0.894]],
  [0.448, [0.447, 0.447, 0.894]],
  [0.45, [0.451, 0.451, 0.902]],
  [0.452, [0.451, 0.451, 0.902]],
  [0.454, [0.455, 0.455, 0.91]],
  [0.456, [0.455, 0.455, 0.91]],
  [0.458, [0.459, 0.459, 0.918]],
  [0.46, [0.459, 0.459, 0.918]],
  [0.462, [0.463, 0.463, 0.925]],
  [0.464, [0.463, 0.463, 0.925]],
  [0.466, [0.467, 0.467, 0.933]],
  [0.468, [0.467, 0.467, 0.933]],
  [0.47, [0.471, 0.471, 0.941]],
  [0.472, [0.471, 0.471, 0.941]],
  [0.474, [0.475, 0.475, 0.949]],
  [0.476, [0.475, 0.475, 0.949]],
  [0.477, [0.478, 0.478, 0.957]],
  [0.479, [0.478, 0.478, 0.957]],
  [0.481, [0.482, 0.482, 0.965]],
  [0.483, [0.482, 0.482, 0.965]],
  [0.485, [0.486, 0.486, 0.973]],
  [0.487, [0.486, 0.486, 0.973]],
  [0.489, [0.49, 0.49, 0.98]],
  [0.491, [0.49, 0.49, 0.98]],
  [0.493, [0.494, 0.494, 0.988]],
  [0.495, [0.494, 0.494, 0.988]],
  [0.497, [0.498, 0.498, 0.996]],
  [0.499, [0.498, 0.498, 0.996]],
  [0.501, [0.502, 0.502, 0.992]],
  [0.503, [0.502, 0.502, 0.992]],
  [0.505, [0.506, 0.506, 0.975]],
  [0.507, [0.506, 0.506, 0.975]],
  [0.509, [0.51, 0.51, 0.958]],
  [0.511, [0.51, 0.51, 0.958]],
  [0.513, [0.514, 0.514, 0.942]],
  [0.515, [0.514, 0.514, 0.942]],
  [0.517, [0.518, 0.518, 0.925]],
  [0.519, [0.518, 0.518, 0.925]],
  [0.521, [0.522, 0.522, 0.908]],
  [0.523, [0.522, 0.522, 0.908]],
  [0.524, [0.525, 0.525, 0.892]],
  [0.526, [0.525, 0.525, 0.892]],
  [0.528, [0.529, 0.529, 0.875]],
  [0.53, [0.529, 0.529, 0.875]],
  [0.532, [0.533, 0.533, 0.858]],
  [0.534, [0.533, 0.533, 0.858]],
  [0.536, [0.537, 0.537, 0.841]],
  [0.538, [0.537, 0.537, 0.841]],
  [0.54, [0.541, 0.541, 0.825]],
  [0.542, [0.541, 0.541, 0.825]],
  [0.544, [0.545, 0.545, 0.808]],
  [0.546, [0.545, 0.545, 0.808]],
  [0.548, [0.549, 0.549, 0.791]],
  [0.55, [0.549, 0.549, 0.791]],
  [0.552, [0.553, 0.553, 0.775]],
  [0.554, [0.553, 0.553, 0.775]],
  [0.556, [0.557, 0.557, 0.758]],
  [0.558, [0.557, 0.557, 0.758]],
  [0.56, [0.561, 0.561, 0.741]],
  [0.562, [0.561, 0.561, 0.741]],
  [0.564, [0.565, 0.565, 0.725]],
  [0.566, [0.565, 0.565, 0.725]],
  [0.568, [0.569, 0.569, 0.708]],
  [0.569, [0.569, 0.569, 0.708]],
  [0.571, [0.573, 0.573, 0.691]],
  [0.573, [0.573, 0.573, 0.691]],
  [0.575, [0.576, 0.576, 0.675]],
  [0.577, [0.576, 0.576, 0.675]],
  [0.579, [0.58, 0.58, 0.658]],
  [0.581, [0.58, 0.58, 0.658]],
  [0.583, [0.584, 0.584, 0.641]],
  [0.585, [0.584, 0.584, 0.641]],
  [0.587, [0.588, 0.588, 0.625]],
  [0.589, [0.588, 0.588, 0.625]],
  [0.591, [0.592, 0.592, 0.608]],
  [0.593, [0.592, 0.592, 0.608]],
  [0.595, [0.596, 0.596, 0.591]],
  [0.597, [0.596, 0.596, 0.591]],
  [0.599, [0.6, 0.6, 0.574]],
  [0.601, [0.6, 0.6, 0.574]],
  [0.603, [0.604, 0.604, 0.558]],
  [0.605, [0.604, 0.604, 0.558]],
  [0.607, [0.608, 0.608, 0.541]],
  [0.609, [0.608, 0.608, 0.541]],
  [0.611, [0.612, 0.612, 0.524]],
  [0.613, [0.612, 0.612, 0.524]],
  [0.614, [0.616, 0.616, 0.508]],
  [0.616, [0.616, 0.616, 0.508]],
  [0.618, [0.62, 0.62, 0.491]],
  [0.62, [0.62, 0.62, 0.491]],
  [0.622, [0.624, 0.624, 0.474]],
  [0.624, [0.624, 0.624, 0.474]],
  [0.626, [0.627, 0.627, 0.458]],
  [0.628, [0.627, 0.627, 0.458]],
  [0.63, [0.631, 0.631, 0.441]],
  [0.632, [0.631, 0.631, 0.441]],
  [0.634, [0.635, 0.635, 0.424]],
  [0.636, [0.635, 0.635, 0.424]],
  [0.638, [0.639, 0.639, 0.408]],
  [0.64, [0.639, 0.639, 0.408]],
  [0.642, [0.643, 0.643, 0.391]],
  [0.644, [0.643, 0.643, 0.391]],
  [0.646, [0.647, 0.647, 0.374]],
  [0.648, [0.647, 0.647, 0.374]],
  [0.65, [0.651, 0.651, 0.358]],
  [0.652, [0.651, 0.651, 0.358]],
  [0.654, [0.655, 0.655, 0.341]],
  [0.656, [0.655, 0.655, 0.341]],
  [0.658, [0.659, 0.659, 0.324]],
  [0.659, [0.659, 0.659, 0.324]],
  [0.661, [0.663, 0.663, 0.307]],
  [0.663, [0.663, 0.663, 0.307]],
  [0.665, [0.667, 0.667, 0.291]],
  [0.667, [0.667, 0.667, 0.291]],
  [0.669, [0.671, 0.671, 0.274]],
  [0.671, [0.671, 0.671, 0.274]],
  [0.673, [0.675, 0.675, 0.257]],
  [0.675, [0.675, 0.675, 0.257]],
  [0.677, [0.678, 0.678, 0.241]],
  [0.679, [0.678, 0.678, 0.241]],
  [0.681, [0.682, 0.682, 0.224]],
  [0.683, [0.682, 0.682, 0.224]],
  [0.685, [0.686, 0.686, 0.207]],
  [0.687, [0.686, 0.686, 0.207]],
  [0.689, [0.69, 0.69, 0.191]],
  [0.691, [0.69, 0.69, 0.191]],
  [0.693, [0.694, 0.694, 0.174]],
  [0.695, [0.694, 0.694, 0.174]],
  [0.697, [0.698, 0.698, 0.157]],
  [0.699, [0.698, 0.698, 0.157]],
  [0.701, [0.702, 0.702, 0.141]],
  [0.703, [0.702, 0.702, 0.141]],
  [0.705, [0.706, 0.706, 0.124]],
  [0.706, [0.706, 0.706, 0.124]],
  [0.708, [0.71, 0.71, 0.107]],
  [0.71, [0.71, 0.71, 0.107]],
  [0.712, [0.714, 0.714, 0.091]],
  [0.714, [0.714, 0.714, 0.091]],
  [0.716, [0.718, 0.718, 0.074]],
  [0.718, [0.718, 0.718, 0.074]],
  [0.72, [0.722, 0.722, 0.057]],
  [0.722, [0.722, 0.722, 0.057]],
  [0.724, [0.725, 0.725, 0.04]],
  [0.726, [0.725, 0.725, 0.04]],
  [0.728, [0.729, 0.729, 0.024]],
  [0.73, [0.729, 0.729, 0.024]],
  [0.732, [0.733, 0.733, 7e-3]],
  [0.734, [0.733, 0.733, 7e-3]],
  [0.736, [0.737, 0.737, 9e-3]],
  [0.738, [0.737, 0.737, 9e-3]],
  [0.74, [0.741, 0.741, 0.023]],
  [0.742, [0.741, 0.741, 0.023]],
  [0.744, [0.745, 0.745, 0.038]],
  [0.746, [0.745, 0.745, 0.038]],
  [0.748, [0.749, 0.749, 0.053]],
  [0.75, [0.749, 0.749, 0.053]],
  [0.751, [0.753, 0.753, 0.068]],
  [0.753, [0.753, 0.753, 0.068]],
  [0.755, [0.757, 0.757, 0.083]],
  [0.757, [0.757, 0.757, 0.083]],
  [0.759, [0.761, 0.761, 0.097]],
  [0.761, [0.761, 0.761, 0.097]],
  [0.763, [0.765, 0.765, 0.112]],
  [0.765, [0.765, 0.765, 0.112]],
  [0.767, [0.769, 0.769, 0.127]],
  [0.769, [0.769, 0.769, 0.127]],
  [0.771, [0.773, 0.773, 0.142]],
  [0.773, [0.773, 0.773, 0.142]],
  [0.775, [0.776, 0.776, 0.156]],
  [0.777, [0.776, 0.776, 0.156]],
  [0.779, [0.78, 0.78, 0.171]],
  [0.781, [0.78, 0.78, 0.171]],
  [0.783, [0.784, 0.784, 0.186]],
  [0.785, [0.784, 0.784, 0.186]],
  [0.787, [0.788, 0.788, 0.201]],
  [0.789, [0.788, 0.788, 0.201]],
  [0.791, [0.792, 0.792, 0.216]],
  [0.793, [0.792, 0.792, 0.216]],
  [0.795, [0.796, 0.796, 0.23]],
  [0.796, [0.796, 0.796, 0.23]],
  [0.798, [0.8, 0.8, 0.245]],
  [0.8, [0.8, 0.8, 0.245]],
  [0.802, [0.804, 0.804, 0.26]],
  [0.804, [0.804, 0.804, 0.26]],
  [0.806, [0.808, 0.808, 0.275]],
  [0.808, [0.808, 0.808, 0.275]],
  [0.81, [0.812, 0.812, 0.29]],
  [0.812, [0.812, 0.812, 0.29]],
  [0.814, [0.816, 0.816, 0.304]],
  [0.816, [0.816, 0.816, 0.304]],
  [0.818, [0.82, 0.82, 0.319]],
  [0.82, [0.82, 0.82, 0.319]],
  [0.822, [0.824, 0.824, 0.334]],
  [0.824, [0.824, 0.824, 0.334]],
  [0.826, [0.827, 0.827, 0.349]],
  [0.828, [0.827, 0.827, 0.349]],
  [0.83, [0.831, 0.831, 0.364]],
  [0.832, [0.831, 0.831, 0.364]],
  [0.834, [0.835, 0.835, 0.378]],
  [0.836, [0.835, 0.835, 0.378]],
  [0.838, [0.839, 0.839, 0.393]],
  [0.84, [0.839, 0.839, 0.393]],
  [0.841, [0.843, 0.843, 0.408]],
  [0.843, [0.843, 0.843, 0.408]],
  [0.845, [0.847, 0.847, 0.423]],
  [0.847, [0.847, 0.847, 0.423]],
  [0.849, [0.851, 0.851, 0.438]],
  [0.851, [0.851, 0.851, 0.438]],
  [0.853, [0.855, 0.855, 0.452]],
  [0.855, [0.855, 0.855, 0.452]],
  [0.857, [0.859, 0.859, 0.467]],
  [0.859, [0.859, 0.859, 0.467]],
  [0.861, [0.863, 0.863, 0.482]],
  [0.863, [0.863, 0.863, 0.482]],
  [0.865, [0.867, 0.867, 0.497]],
  [0.867, [0.867, 0.867, 0.497]],
  [0.869, [0.871, 0.871, 0.512]],
  [0.871, [0.871, 0.871, 0.512]],
  [0.873, [0.875, 0.875, 0.526]],
  [0.875, [0.875, 0.875, 0.526]],
  [0.877, [0.878, 0.878, 0.541]],
  [0.879, [0.878, 0.878, 0.541]],
  [0.881, [0.882, 0.882, 0.556]],
  [0.883, [0.882, 0.882, 0.556]],
  [0.885, [0.886, 0.886, 0.571]],
  [0.886, [0.886, 0.886, 0.571]],
  [0.888, [0.89, 0.89, 0.586]],
  [0.89, [0.89, 0.89, 0.586]],
  [0.892, [0.894, 0.894, 0.6]],
  [0.894, [0.894, 0.894, 0.6]],
  [0.896, [0.898, 0.898, 0.615]],
  [0.898, [0.898, 0.898, 0.615]],
  [0.9, [0.902, 0.902, 0.63]],
  [0.902, [0.902, 0.902, 0.63]],
  [0.904, [0.906, 0.906, 0.645]],
  [0.906, [0.906, 0.906, 0.645]],
  [0.908, [0.91, 0.91, 0.66]],
  [0.91, [0.91, 0.91, 0.66]],
  [0.912, [0.914, 0.914, 0.674]],
  [0.914, [0.914, 0.914, 0.674]],
  [0.916, [0.918, 0.918, 0.689]],
  [0.918, [0.918, 0.918, 0.689]],
  [0.92, [0.922, 0.922, 0.704]],
  [0.922, [0.922, 0.922, 0.704]],
  [0.924, [0.925, 0.925, 0.719]],
  [0.926, [0.925, 0.925, 0.719]],
  [0.928, [0.929, 0.929, 0.734]],
  [0.93, [0.929, 0.929, 0.734]],
  [0.932, [0.933, 0.933, 0.748]],
  [0.933, [0.933, 0.933, 0.748]],
  [0.935, [0.937, 0.937, 0.763]],
  [0.937, [0.937, 0.937, 0.763]],
  [0.939, [0.941, 0.941, 0.778]],
  [0.941, [0.941, 0.941, 0.778]],
  [0.943, [0.945, 0.945, 0.793]],
  [0.945, [0.945, 0.945, 0.793]],
  [0.947, [0.949, 0.949, 0.808]],
  [0.949, [0.949, 0.949, 0.808]],
  [0.951, [0.953, 0.953, 0.822]],
  [0.953, [0.953, 0.953, 0.822]],
  [0.955, [0.957, 0.957, 0.837]],
  [0.957, [0.957, 0.957, 0.837]],
  [0.959, [0.961, 0.961, 0.852]],
  [0.961, [0.961, 0.961, 0.852]],
  [0.963, [0.965, 0.965, 0.867]],
  [0.965, [0.965, 0.965, 0.867]],
  [0.967, [0.969, 0.969, 0.882]],
  [0.969, [0.969, 0.969, 0.882]],
  [0.971, [0.973, 0.973, 0.896]],
  [0.973, [0.973, 0.973, 0.896]],
  [0.975, [0.976, 0.976, 0.911]],
  [0.977, [0.976, 0.976, 0.911]],
  [0.978, [0.98, 0.98, 0.926]],
  [0.98, [0.98, 0.98, 0.926]],
  [0.982, [0.984, 0.984, 0.941]],
  [0.984, [0.984, 0.984, 0.941]],
  [0.986, [0.988, 0.988, 0.956]],
  [0.988, [0.988, 0.988, 0.956]],
  [0.99, [0.992, 0.992, 0.97]],
  [0.992, [0.992, 0.992, 0.97]],
  [0.994, [0.996, 0.996, 0.985]],
  [0.996, [0.996, 0.996, 0.985]],
  [0.998, [1, 1, 1]],
  [1, [1, 1, 1]]
], Hp = [
  [0, [0, 0, 0]],
  [2e-3, [0, 0, 0]],
  [4e-3, [0.063, 0, 0.025]],
  [6e-3, [0.063, 0, 0.025]],
  [8e-3, [0.089, 0, 0.049]],
  [0.01, [0.089, 0, 0.049]],
  [0.012, [0.108, 0, 0.074]],
  [0.014, [0.108, 0, 0.074]],
  [0.016, [0.125, 0, 0.098]],
  [0.018, [0.125, 0, 0.098]],
  [0.02, [0.14, 0, 0.123]],
  [0.022, [0.14, 0, 0.123]],
  [0.023, [0.153, 0, 0.147]],
  [0.025, [0.153, 0, 0.147]],
  [0.027, [0.166, 0, 0.172]],
  [0.029, [0.166, 0, 0.172]],
  [0.031, [0.177, 0, 0.196]],
  [0.033, [0.177, 0, 0.196]],
  [0.035, [0.188, 0, 0.22]],
  [0.037, [0.188, 0, 0.22]],
  [0.039, [0.198, 0, 0.244]],
  [0.041, [0.198, 0, 0.244]],
  [0.043, [0.208, 0, 0.268]],
  [0.045, [0.208, 0, 0.268]],
  [0.047, [0.217, 0, 0.291]],
  [0.049, [0.217, 0, 0.291]],
  [0.051, [0.226, 0, 0.315]],
  [0.053, [0.226, 0, 0.315]],
  [0.055, [0.234, 0, 0.338]],
  [0.057, [0.234, 0, 0.338]],
  [0.059, [0.243, 0, 0.361]],
  [0.061, [0.243, 0, 0.361]],
  [0.063, [0.25, 0, 0.384]],
  [0.065, [0.25, 0, 0.384]],
  [0.067, [0.258, 0, 0.407]],
  [0.068, [0.258, 0, 0.407]],
  [0.07, [0.266, 0, 0.429]],
  [0.072, [0.266, 0, 0.429]],
  [0.074, [0.273, 0, 0.451]],
  [0.076, [0.273, 0, 0.451]],
  [0.078, [0.28, 0, 0.473]],
  [0.08, [0.28, 0, 0.473]],
  [0.082, [0.287, 1e-3, 0.495]],
  [0.084, [0.287, 1e-3, 0.495]],
  [0.086, [0.294, 1e-3, 0.516]],
  [0.088, [0.294, 1e-3, 0.516]],
  [0.09, [0.3, 1e-3, 0.537]],
  [0.092, [0.3, 1e-3, 0.537]],
  [0.094, [0.307, 1e-3, 0.557]],
  [0.096, [0.307, 1e-3, 0.557]],
  [0.098, [0.313, 1e-3, 0.578]],
  [0.1, [0.313, 1e-3, 0.578]],
  [0.102, [0.319, 1e-3, 0.598]],
  [0.104, [0.319, 1e-3, 0.598]],
  [0.106, [0.325, 1e-3, 0.617]],
  [0.108, [0.325, 1e-3, 0.617]],
  [0.11, [0.331, 1e-3, 0.636]],
  [0.112, [0.331, 1e-3, 0.636]],
  [0.114, [0.337, 1e-3, 0.655]],
  [0.115, [0.337, 1e-3, 0.655]],
  [0.117, [0.343, 2e-3, 0.674]],
  [0.119, [0.343, 2e-3, 0.674]],
  [0.121, [0.349, 2e-3, 0.692]],
  [0.123, [0.349, 2e-3, 0.692]],
  [0.125, [0.354, 2e-3, 0.709]],
  [0.127, [0.354, 2e-3, 0.709]],
  [0.129, [0.36, 2e-3, 0.726]],
  [0.131, [0.36, 2e-3, 0.726]],
  [0.133, [0.365, 2e-3, 0.743]],
  [0.135, [0.365, 2e-3, 0.743]],
  [0.137, [0.37, 3e-3, 0.759]],
  [0.139, [0.37, 3e-3, 0.759]],
  [0.141, [0.376, 3e-3, 0.775]],
  [0.143, [0.376, 3e-3, 0.775]],
  [0.145, [0.381, 3e-3, 0.791]],
  [0.147, [0.381, 3e-3, 0.791]],
  [0.149, [0.386, 3e-3, 0.805]],
  [0.151, [0.386, 3e-3, 0.805]],
  [0.153, [0.391, 4e-3, 0.82]],
  [0.155, [0.391, 4e-3, 0.82]],
  [0.157, [0.396, 4e-3, 0.834]],
  [0.159, [0.396, 4e-3, 0.834]],
  [0.16, [0.401, 4e-3, 0.847]],
  [0.162, [0.401, 4e-3, 0.847]],
  [0.164, [0.406, 4e-3, 0.86]],
  [0.166, [0.406, 4e-3, 0.86]],
  [0.168, [0.411, 5e-3, 0.872]],
  [0.17, [0.411, 5e-3, 0.872]],
  [0.172, [0.415, 5e-3, 0.884]],
  [0.174, [0.415, 5e-3, 0.884]],
  [0.176, [0.42, 5e-3, 0.895]],
  [0.178, [0.42, 5e-3, 0.895]],
  [0.18, [0.425, 6e-3, 0.906]],
  [0.182, [0.425, 6e-3, 0.906]],
  [0.184, [0.429, 6e-3, 0.916]],
  [0.186, [0.429, 6e-3, 0.916]],
  [0.188, [0.434, 7e-3, 0.926]],
  [0.19, [0.434, 7e-3, 0.926]],
  [0.192, [0.438, 7e-3, 0.935]],
  [0.194, [0.438, 7e-3, 0.935]],
  [0.196, [0.443, 8e-3, 0.943]],
  [0.198, [0.443, 8e-3, 0.943]],
  [0.2, [0.447, 8e-3, 0.951]],
  [0.202, [0.447, 8e-3, 0.951]],
  [0.204, [0.452, 8e-3, 0.958]],
  [0.205, [0.452, 8e-3, 0.958]],
  [0.207, [0.456, 9e-3, 0.965]],
  [0.209, [0.456, 9e-3, 0.965]],
  [0.211, [0.46, 9e-3, 0.971]],
  [0.213, [0.46, 9e-3, 0.971]],
  [0.215, [0.464, 0.01, 0.977]],
  [0.217, [0.464, 0.01, 0.977]],
  [0.219, [0.469, 0.011, 0.982]],
  [0.221, [0.469, 0.011, 0.982]],
  [0.223, [0.473, 0.011, 0.986]],
  [0.225, [0.473, 0.011, 0.986]],
  [0.227, [0.477, 0.012, 0.99]],
  [0.229, [0.477, 0.012, 0.99]],
  [0.231, [0.481, 0.012, 0.993]],
  [0.233, [0.481, 0.012, 0.993]],
  [0.235, [0.485, 0.013, 0.996]],
  [0.237, [0.485, 0.013, 0.996]],
  [0.239, [0.489, 0.014, 0.998]],
  [0.241, [0.489, 0.014, 0.998]],
  [0.243, [0.493, 0.014, 0.999]],
  [0.245, [0.493, 0.014, 0.999]],
  [0.247, [0.497, 0.015, 1]],
  [0.249, [0.497, 0.015, 1]],
  [0.25, [0.501, 0.016, 1]],
  [0.252, [0.501, 0.016, 1]],
  [0.254, [0.505, 0.017, 1]],
  [0.256, [0.505, 0.017, 1]],
  [0.258, [0.509, 0.017, 0.998]],
  [0.26, [0.509, 0.017, 0.998]],
  [0.262, [0.513, 0.018, 0.997]],
  [0.264, [0.513, 0.018, 0.997]],
  [0.266, [0.516, 0.019, 0.995]],
  [0.268, [0.516, 0.019, 0.995]],
  [0.27, [0.52, 0.02, 0.992]],
  [0.272, [0.52, 0.02, 0.992]],
  [0.274, [0.524, 0.021, 0.988]],
  [0.276, [0.524, 0.021, 0.988]],
  [0.278, [0.528, 0.022, 0.984]],
  [0.28, [0.528, 0.022, 0.984]],
  [0.282, [0.531, 0.023, 0.979]],
  [0.284, [0.531, 0.023, 0.979]],
  [0.286, [0.535, 0.023, 0.974]],
  [0.288, [0.535, 0.023, 0.974]],
  [0.29, [0.539, 0.024, 0.968]],
  [0.292, [0.539, 0.024, 0.968]],
  [0.294, [0.542, 0.025, 0.962]],
  [0.295, [0.542, 0.025, 0.962]],
  [0.297, [0.546, 0.026, 0.955]],
  [0.299, [0.546, 0.026, 0.955]],
  [0.301, [0.55, 0.028, 0.947]],
  [0.303, [0.55, 0.028, 0.947]],
  [0.305, [0.553, 0.029, 0.939]],
  [0.307, [0.553, 0.029, 0.939]],
  [0.309, [0.557, 0.03, 0.93]],
  [0.311, [0.557, 0.03, 0.93]],
  [0.313, [0.56, 0.031, 0.921]],
  [0.315, [0.56, 0.031, 0.921]],
  [0.317, [0.564, 0.032, 0.911]],
  [0.319, [0.564, 0.032, 0.911]],
  [0.321, [0.567, 0.033, 0.901]],
  [0.323, [0.567, 0.033, 0.901]],
  [0.325, [0.571, 0.034, 0.89]],
  [0.327, [0.571, 0.034, 0.89]],
  [0.329, [0.574, 0.036, 0.878]],
  [0.331, [0.574, 0.036, 0.878]],
  [0.333, [0.577, 0.037, 0.866]],
  [0.335, [0.577, 0.037, 0.866]],
  [0.337, [0.581, 0.038, 0.853]],
  [0.339, [0.581, 0.038, 0.853]],
  [0.341, [0.584, 0.04, 0.84]],
  [0.342, [0.584, 0.04, 0.84]],
  [0.344, [0.587, 0.041, 0.827]],
  [0.346, [0.587, 0.041, 0.827]],
  [0.348, [0.591, 0.043, 0.813]],
  [0.35, [0.591, 0.043, 0.813]],
  [0.352, [0.594, 0.044, 0.798]],
  [0.354, [0.594, 0.044, 0.798]],
  [0.356, [0.597, 0.045, 0.783]],
  [0.358, [0.597, 0.045, 0.783]],
  [0.36, [0.601, 0.047, 0.767]],
  [0.362, [0.601, 0.047, 0.767]],
  [0.364, [0.604, 0.049, 0.751]],
  [0.366, [0.604, 0.049, 0.751]],
  [0.368, [0.607, 0.05, 0.735]],
  [0.37, [0.607, 0.05, 0.735]],
  [0.372, [0.61, 0.052, 0.718]],
  [0.374, [0.61, 0.052, 0.718]],
  [0.376, [0.614, 0.053, 0.701]],
  [0.378, [0.614, 0.053, 0.701]],
  [0.38, [0.617, 0.055, 0.683]],
  [0.382, [0.617, 0.055, 0.683]],
  [0.384, [0.62, 0.057, 0.665]],
  [0.386, [0.62, 0.057, 0.665]],
  [0.387, [0.623, 0.059, 0.646]],
  [0.389, [0.623, 0.059, 0.646]],
  [0.391, [0.626, 0.06, 0.627]],
  [0.393, [0.626, 0.06, 0.627]],
  [0.395, [0.629, 0.062, 0.608]],
  [0.397, [0.629, 0.062, 0.608]],
  [0.399, [0.632, 0.064, 0.588]],
  [0.401, [0.632, 0.064, 0.588]],
  [0.403, [0.636, 0.066, 0.568]],
  [0.405, [0.636, 0.066, 0.568]],
  [0.407, [0.639, 0.068, 0.547]],
  [0.409, [0.639, 0.068, 0.547]],
  [0.411, [0.642, 0.07, 0.526]],
  [0.413, [0.642, 0.07, 0.526]],
  [0.415, [0.645, 0.072, 0.505]],
  [0.417, [0.645, 0.072, 0.505]],
  [0.419, [0.648, 0.074, 0.484]],
  [0.421, [0.648, 0.074, 0.484]],
  [0.423, [0.651, 0.076, 0.462]],
  [0.425, [0.651, 0.076, 0.462]],
  [0.427, [0.654, 0.078, 0.44]],
  [0.429, [0.654, 0.078, 0.44]],
  [0.431, [0.657, 0.08, 0.418]],
  [0.432, [0.657, 0.08, 0.418]],
  [0.434, [0.66, 0.082, 0.395]],
  [0.436, [0.66, 0.082, 0.395]],
  [0.438, [0.663, 0.085, 0.373]],
  [0.44, [0.663, 0.085, 0.373]],
  [0.442, [0.666, 0.087, 0.35]],
  [0.444, [0.666, 0.087, 0.35]],
  [0.446, [0.669, 0.089, 0.327]],
  [0.448, [0.669, 0.089, 0.327]],
  [0.45, [0.672, 0.092, 0.303]],
  [0.452, [0.672, 0.092, 0.303]],
  [0.454, [0.674, 0.094, 0.28]],
  [0.456, [0.674, 0.094, 0.28]],
  [0.458, [0.677, 0.097, 0.256]],
  [0.46, [0.677, 0.097, 0.256]],
  [0.462, [0.68, 0.099, 0.232]],
  [0.464, [0.68, 0.099, 0.232]],
  [0.466, [0.683, 0.102, 0.208]],
  [0.468, [0.683, 0.102, 0.208]],
  [0.47, [0.686, 0.104, 0.184]],
  [0.472, [0.686, 0.104, 0.184]],
  [0.474, [0.689, 0.107, 0.159]],
  [0.476, [0.689, 0.107, 0.159]],
  [0.477, [0.692, 0.11, 0.135]],
  [0.479, [0.692, 0.11, 0.135]],
  [0.481, [0.695, 0.112, 0.111]],
  [0.483, [0.695, 0.112, 0.111]],
  [0.485, [0.697, 0.115, 0.086]],
  [0.487, [0.697, 0.115, 0.086]],
  [0.489, [0.7, 0.118, 0.062]],
  [0.491, [0.7, 0.118, 0.062]],
  [0.493, [0.703, 0.121, 0.037]],
  [0.495, [0.703, 0.121, 0.037]],
  [0.497, [0.706, 0.124, 0.012]],
  [0.499, [0.706, 0.124, 0.012]],
  [0.501, [0.708, 0.126, 0]],
  [0.503, [0.708, 0.126, 0]],
  [0.505, [0.711, 0.129, 0]],
  [0.507, [0.711, 0.129, 0]],
  [0.509, [0.714, 0.132, 0]],
  [0.511, [0.714, 0.132, 0]],
  [0.513, [0.717, 0.136, 0]],
  [0.515, [0.717, 0.136, 0]],
  [0.517, [0.719, 0.139, 0]],
  [0.519, [0.719, 0.139, 0]],
  [0.521, [0.722, 0.142, 0]],
  [0.523, [0.722, 0.142, 0]],
  [0.524, [0.725, 0.145, 0]],
  [0.526, [0.725, 0.145, 0]],
  [0.528, [0.728, 0.148, 0]],
  [0.53, [0.728, 0.148, 0]],
  [0.532, [0.73, 0.152, 0]],
  [0.534, [0.73, 0.152, 0]],
  [0.536, [0.733, 0.155, 0]],
  [0.538, [0.733, 0.155, 0]],
  [0.54, [0.736, 0.158, 0]],
  [0.542, [0.736, 0.158, 0]],
  [0.544, [0.738, 0.162, 0]],
  [0.546, [0.738, 0.162, 0]],
  [0.548, [0.741, 0.165, 0]],
  [0.55, [0.741, 0.165, 0]],
  [0.552, [0.744, 0.169, 0]],
  [0.554, [0.744, 0.169, 0]],
  [0.556, [0.746, 0.173, 0]],
  [0.558, [0.746, 0.173, 0]],
  [0.56, [0.749, 0.176, 0]],
  [0.562, [0.749, 0.176, 0]],
  [0.564, [0.751, 0.18, 0]],
  [0.566, [0.751, 0.18, 0]],
  [0.568, [0.754, 0.184, 0]],
  [0.569, [0.754, 0.184, 0]],
  [0.571, [0.757, 0.188, 0]],
  [0.573, [0.757, 0.188, 0]],
  [0.575, [0.759, 0.192, 0]],
  [0.577, [0.759, 0.192, 0]],
  [0.579, [0.762, 0.196, 0]],
  [0.581, [0.762, 0.196, 0]],
  [0.583, [0.764, 0.199, 0]],
  [0.585, [0.764, 0.199, 0]],
  [0.587, [0.767, 0.204, 0]],
  [0.589, [0.767, 0.204, 0]],
  [0.591, [0.77, 0.208, 0]],
  [0.593, [0.77, 0.208, 0]],
  [0.595, [0.772, 0.212, 0]],
  [0.597, [0.772, 0.212, 0]],
  [0.599, [0.775, 0.216, 0]],
  [0.601, [0.775, 0.216, 0]],
  [0.603, [0.777, 0.22, 0]],
  [0.605, [0.777, 0.22, 0]],
  [0.607, [0.78, 0.225, 0]],
  [0.609, [0.78, 0.225, 0]],
  [0.611, [0.782, 0.229, 0]],
  [0.613, [0.782, 0.229, 0]],
  [0.614, [0.785, 0.233, 0]],
  [0.616, [0.785, 0.233, 0]],
  [0.618, [0.787, 0.238, 0]],
  [0.62, [0.787, 0.238, 0]],
  [0.622, [0.79, 0.242, 0]],
  [0.624, [0.79, 0.242, 0]],
  [0.626, [0.792, 0.247, 0]],
  [0.628, [0.792, 0.247, 0]],
  [0.63, [0.795, 0.252, 0]],
  [0.632, [0.795, 0.252, 0]],
  [0.634, [0.797, 0.256, 0]],
  [0.636, [0.797, 0.256, 0]],
  [0.638, [0.8, 0.261, 0]],
  [0.64, [0.8, 0.261, 0]],
  [0.642, [0.802, 0.266, 0]],
  [0.644, [0.802, 0.266, 0]],
  [0.646, [0.804, 0.271, 0]],
  [0.648, [0.804, 0.271, 0]],
  [0.65, [0.807, 0.276, 0]],
  [0.652, [0.807, 0.276, 0]],
  [0.654, [0.809, 0.281, 0]],
  [0.656, [0.809, 0.281, 0]],
  [0.658, [0.812, 0.286, 0]],
  [0.659, [0.812, 0.286, 0]],
  [0.661, [0.814, 0.291, 0]],
  [0.663, [0.814, 0.291, 0]],
  [0.665, [0.816, 0.296, 0]],
  [0.667, [0.816, 0.296, 0]],
  [0.669, [0.819, 0.302, 0]],
  [0.671, [0.819, 0.302, 0]],
  [0.673, [0.821, 0.307, 0]],
  [0.675, [0.821, 0.307, 0]],
  [0.677, [0.824, 0.312, 0]],
  [0.679, [0.824, 0.312, 0]],
  [0.681, [0.826, 0.318, 0]],
  [0.683, [0.826, 0.318, 0]],
  [0.685, [0.828, 0.323, 0]],
  [0.687, [0.828, 0.323, 0]],
  [0.689, [0.831, 0.329, 0]],
  [0.691, [0.831, 0.329, 0]],
  [0.693, [0.833, 0.334, 0]],
  [0.695, [0.833, 0.334, 0]],
  [0.697, [0.835, 0.34, 0]],
  [0.699, [0.835, 0.34, 0]],
  [0.701, [0.838, 0.346, 0]],
  [0.703, [0.838, 0.346, 0]],
  [0.705, [0.84, 0.352, 0]],
  [0.706, [0.84, 0.352, 0]],
  [0.708, [0.842, 0.358, 0]],
  [0.71, [0.842, 0.358, 0]],
  [0.712, [0.845, 0.364, 0]],
  [0.714, [0.845, 0.364, 0]],
  [0.716, [0.847, 0.37, 0]],
  [0.718, [0.847, 0.37, 0]],
  [0.72, [0.849, 0.376, 0]],
  [0.722, [0.849, 0.376, 0]],
  [0.724, [0.852, 0.382, 0]],
  [0.726, [0.852, 0.382, 0]],
  [0.728, [0.854, 0.388, 0]],
  [0.73, [0.854, 0.388, 0]],
  [0.732, [0.856, 0.394, 0]],
  [0.734, [0.856, 0.394, 0]],
  [0.736, [0.859, 0.401, 0]],
  [0.738, [0.859, 0.401, 0]],
  [0.74, [0.861, 0.407, 0]],
  [0.742, [0.861, 0.407, 0]],
  [0.744, [0.863, 0.414, 0]],
  [0.746, [0.863, 0.414, 0]],
  [0.748, [0.865, 0.42, 0]],
  [0.75, [0.865, 0.42, 0]],
  [0.751, [0.868, 0.427, 0]],
  [0.753, [0.868, 0.427, 0]],
  [0.755, [0.87, 0.434, 0]],
  [0.757, [0.87, 0.434, 0]],
  [0.759, [0.872, 0.44, 0]],
  [0.761, [0.872, 0.44, 0]],
  [0.763, [0.874, 0.447, 0]],
  [0.765, [0.874, 0.447, 0]],
  [0.767, [0.877, 0.454, 0]],
  [0.769, [0.877, 0.454, 0]],
  [0.771, [0.879, 0.461, 0]],
  [0.773, [0.879, 0.461, 0]],
  [0.775, [0.881, 0.468, 0]],
  [0.777, [0.881, 0.468, 0]],
  [0.779, [0.883, 0.475, 0]],
  [0.781, [0.883, 0.475, 0]],
  [0.783, [0.886, 0.482, 0]],
  [0.785, [0.886, 0.482, 0]],
  [0.787, [0.888, 0.49, 0]],
  [0.789, [0.888, 0.49, 0]],
  [0.791, [0.89, 0.497, 0]],
  [0.793, [0.89, 0.497, 0]],
  [0.795, [0.892, 0.505, 0]],
  [0.796, [0.892, 0.505, 0]],
  [0.798, [0.894, 0.512, 0]],
  [0.8, [0.894, 0.512, 0]],
  [0.802, [0.897, 0.52, 0]],
  [0.804, [0.897, 0.52, 0]],
  [0.806, [0.899, 0.527, 0]],
  [0.808, [0.899, 0.527, 0]],
  [0.81, [0.901, 0.535, 0]],
  [0.812, [0.901, 0.535, 0]],
  [0.814, [0.903, 0.543, 0]],
  [0.816, [0.903, 0.543, 0]],
  [0.818, [0.905, 0.551, 0]],
  [0.82, [0.905, 0.551, 0]],
  [0.822, [0.907, 0.559, 0]],
  [0.824, [0.907, 0.559, 0]],
  [0.826, [0.91, 0.567, 0]],
  [0.828, [0.91, 0.567, 0]],
  [0.83, [0.912, 0.575, 0]],
  [0.832, [0.912, 0.575, 0]],
  [0.834, [0.914, 0.583, 0]],
  [0.836, [0.914, 0.583, 0]],
  [0.838, [0.916, 0.591, 0]],
  [0.84, [0.916, 0.591, 0]],
  [0.841, [0.918, 0.599, 0]],
  [0.843, [0.918, 0.599, 0]],
  [0.845, [0.92, 0.608, 0]],
  [0.847, [0.92, 0.608, 0]],
  [0.849, [0.922, 0.616, 0]],
  [0.851, [0.922, 0.616, 0]],
  [0.853, [0.925, 0.625, 0]],
  [0.855, [0.925, 0.625, 0]],
  [0.857, [0.927, 0.633, 0]],
  [0.859, [0.927, 0.633, 0]],
  [0.861, [0.929, 0.642, 0]],
  [0.863, [0.929, 0.642, 0]],
  [0.865, [0.931, 0.651, 0]],
  [0.867, [0.931, 0.651, 0]],
  [0.869, [0.933, 0.66, 0]],
  [0.871, [0.933, 0.66, 0]],
  [0.873, [0.935, 0.669, 0]],
  [0.875, [0.935, 0.669, 0]],
  [0.877, [0.937, 0.678, 0]],
  [0.879, [0.937, 0.678, 0]],
  [0.881, [0.939, 0.687, 0]],
  [0.883, [0.939, 0.687, 0]],
  [0.885, [0.941, 0.696, 0]],
  [0.886, [0.941, 0.696, 0]],
  [0.888, [0.944, 0.705, 0]],
  [0.89, [0.944, 0.705, 0]],
  [0.892, [0.946, 0.715, 0]],
  [0.894, [0.946, 0.715, 0]],
  [0.896, [0.948, 0.724, 0]],
  [0.898, [0.948, 0.724, 0]],
  [0.9, [0.95, 0.734, 0]],
  [0.902, [0.95, 0.734, 0]],
  [0.904, [0.952, 0.743, 0]],
  [0.906, [0.952, 0.743, 0]],
  [0.908, [0.954, 0.753, 0]],
  [0.91, [0.954, 0.753, 0]],
  [0.912, [0.956, 0.763, 0]],
  [0.914, [0.956, 0.763, 0]],
  [0.916, [0.958, 0.773, 0]],
  [0.918, [0.958, 0.773, 0]],
  [0.92, [0.96, 0.783, 0]],
  [0.922, [0.96, 0.783, 0]],
  [0.924, [0.962, 0.793, 0]],
  [0.926, [0.962, 0.793, 0]],
  [0.928, [0.964, 0.803, 0]],
  [0.93, [0.964, 0.803, 0]],
  [0.932, [0.966, 0.813, 0]],
  [0.933, [0.966, 0.813, 0]],
  [0.935, [0.968, 0.823, 0]],
  [0.937, [0.968, 0.823, 0]],
  [0.939, [0.97, 0.834, 0]],
  [0.941, [0.97, 0.834, 0]],
  [0.943, [0.972, 0.844, 0]],
  [0.945, [0.972, 0.844, 0]],
  [0.947, [0.974, 0.855, 0]],
  [0.949, [0.974, 0.855, 0]],
  [0.951, [0.976, 0.865, 0]],
  [0.953, [0.976, 0.865, 0]],
  [0.955, [0.978, 0.876, 0]],
  [0.957, [0.978, 0.876, 0]],
  [0.959, [0.98, 0.887, 0]],
  [0.961, [0.98, 0.887, 0]],
  [0.963, [0.982, 0.898, 0]],
  [0.965, [0.982, 0.898, 0]],
  [0.967, [0.984, 0.909, 0]],
  [0.969, [0.984, 0.909, 0]],
  [0.971, [0.986, 0.92, 0]],
  [0.973, [0.986, 0.92, 0]],
  [0.975, [0.988, 0.931, 0]],
  [0.977, [0.988, 0.931, 0]],
  [0.978, [0.99, 0.942, 0]],
  [0.98, [0.99, 0.942, 0]],
  [0.982, [0.992, 0.954, 0]],
  [0.984, [0.992, 0.954, 0]],
  [0.986, [0.994, 0.965, 0]],
  [0.988, [0.994, 0.965, 0]],
  [0.99, [0.996, 0.977, 0]],
  [0.992, [0.996, 0.977, 0]],
  [0.994, [0.998, 0.988, 0]],
  [0.996, [0.998, 0.988, 0]],
  [0.998, [1, 1, 0]],
  [1, [1, 1, 0]]
], Gp = [
  [0, [0, 0, 0]],
  [2e-3, [0, 0, 0]],
  [4e-3, [0, 0, 0.016]],
  [6e-3, [0, 0, 0.016]],
  [8e-3, [0, 0, 0.031]],
  [0.01, [0, 0, 0.031]],
  [0.012, [0, 0, 0.047]],
  [0.014, [0, 0, 0.047]],
  [0.016, [0, 0, 0.063]],
  [0.018, [0, 0, 0.063]],
  [0.02, [0, 0, 0.078]],
  [0.022, [0, 0, 0.078]],
  [0.023, [0, 0, 0.094]],
  [0.025, [0, 0, 0.094]],
  [0.027, [0, 0, 0.11]],
  [0.029, [0, 0, 0.11]],
  [0.031, [0, 0, 0.125]],
  [0.033, [0, 0, 0.125]],
  [0.035, [0, 0, 0.141]],
  [0.037, [0, 0, 0.141]],
  [0.039, [0, 0, 0.157]],
  [0.041, [0, 0, 0.157]],
  [0.043, [0, 0, 0.173]],
  [0.045, [0, 0, 0.173]],
  [0.047, [0, 0, 0.188]],
  [0.049, [0, 0, 0.188]],
  [0.051, [0, 0, 0.204]],
  [0.053, [0, 0, 0.204]],
  [0.055, [0, 0, 0.22]],
  [0.057, [0, 0, 0.22]],
  [0.059, [0, 0, 0.235]],
  [0.061, [0, 0, 0.235]],
  [0.063, [0, 0, 0.251]],
  [0.065, [0, 0, 0.251]],
  [0.067, [0, 0, 0.267]],
  [0.068, [0, 0, 0.267]],
  [0.07, [0, 0, 0.282]],
  [0.072, [0, 0, 0.282]],
  [0.074, [0, 0, 0.298]],
  [0.076, [0, 0, 0.298]],
  [0.078, [0, 0, 0.314]],
  [0.08, [0, 0, 0.314]],
  [0.082, [0, 0, 0.329]],
  [0.084, [0, 0, 0.329]],
  [0.086, [0, 0, 0.345]],
  [0.088, [0, 0, 0.345]],
  [0.09, [0, 0, 0.361]],
  [0.092, [0, 0, 0.361]],
  [0.094, [0, 0, 0.376]],
  [0.096, [0, 0, 0.376]],
  [0.098, [0, 0, 0.392]],
  [0.1, [0, 0, 0.392]],
  [0.102, [0, 0, 0.408]],
  [0.104, [0, 0, 0.408]],
  [0.106, [0, 0, 0.424]],
  [0.108, [0, 0, 0.424]],
  [0.11, [0, 0, 0.439]],
  [0.112, [0, 0, 0.439]],
  [0.114, [0, 0, 0.455]],
  [0.115, [0, 0, 0.455]],
  [0.117, [0, 0, 0.471]],
  [0.119, [0, 0, 0.471]],
  [0.121, [0, 0, 0.486]],
  [0.123, [0, 0, 0.486]],
  [0.125, [0, 0, 0.502]],
  [0.127, [0, 0, 0.502]],
  [0.129, [0, 0, 0.518]],
  [0.131, [0, 0, 0.518]],
  [0.133, [0, 0, 0.533]],
  [0.135, [0, 0, 0.533]],
  [0.137, [0, 0, 0.549]],
  [0.139, [0, 0, 0.549]],
  [0.141, [0, 0, 0.565]],
  [0.143, [0, 0, 0.565]],
  [0.145, [0, 0, 0.58]],
  [0.147, [0, 0, 0.58]],
  [0.149, [0, 0, 0.596]],
  [0.151, [0, 0, 0.596]],
  [0.153, [0, 0, 0.612]],
  [0.155, [0, 0, 0.612]],
  [0.157, [0, 0, 0.627]],
  [0.159, [0, 0, 0.627]],
  [0.16, [0, 0, 0.643]],
  [0.162, [0, 0, 0.643]],
  [0.164, [0, 0, 0.659]],
  [0.166, [0, 0, 0.659]],
  [0.168, [0, 0, 0.675]],
  [0.17, [0, 0, 0.675]],
  [0.172, [0, 0, 0.69]],
  [0.174, [0, 0, 0.69]],
  [0.176, [0, 0, 0.706]],
  [0.178, [0, 0, 0.706]],
  [0.18, [0, 0, 0.722]],
  [0.182, [0, 0, 0.722]],
  [0.184, [0, 0, 0.737]],
  [0.186, [0, 0, 0.737]],
  [0.188, [0, 0, 0.753]],
  [0.19, [0, 0, 0.753]],
  [0.192, [0, 0, 0.769]],
  [0.194, [0, 0, 0.769]],
  [0.196, [0, 0, 0.784]],
  [0.198, [0, 0, 0.784]],
  [0.2, [0, 0, 0.8]],
  [0.202, [0, 0, 0.8]],
  [0.204, [0, 0, 0.816]],
  [0.205, [0, 0, 0.816]],
  [0.207, [0, 0, 0.831]],
  [0.209, [0, 0, 0.831]],
  [0.211, [0, 0, 0.847]],
  [0.213, [0, 0, 0.847]],
  [0.215, [0, 0, 0.863]],
  [0.217, [0, 0, 0.863]],
  [0.219, [0, 0, 0.878]],
  [0.221, [0, 0, 0.878]],
  [0.223, [0, 0, 0.894]],
  [0.225, [0, 0, 0.894]],
  [0.227, [0, 0, 0.91]],
  [0.229, [0, 0, 0.91]],
  [0.231, [0, 0, 0.925]],
  [0.233, [0, 0, 0.925]],
  [0.235, [0, 0, 0.941]],
  [0.237, [0, 0, 0.941]],
  [0.239, [0, 0, 0.957]],
  [0.241, [0, 0, 0.957]],
  [0.243, [0, 0, 0.973]],
  [0.245, [0, 0, 0.973]],
  [0.247, [0, 0, 0.988]],
  [0.249, [0, 0, 0.988]],
  [0.25, [3e-3, 0, 1]],
  [0.252, [3e-3, 0, 1]],
  [0.254, [0.015, 0, 1]],
  [0.256, [0.015, 0, 1]],
  [0.258, [0.028, 0, 1]],
  [0.26, [0.028, 0, 1]],
  [0.262, [0.04, 0, 1]],
  [0.264, [0.04, 0, 1]],
  [0.266, [0.052, 0, 1]],
  [0.268, [0.052, 0, 1]],
  [0.27, [0.064, 0, 1]],
  [0.272, [0.064, 0, 1]],
  [0.274, [0.077, 0, 1]],
  [0.276, [0.077, 0, 1]],
  [0.278, [0.089, 0, 1]],
  [0.28, [0.089, 0, 1]],
  [0.282, [0.101, 0, 1]],
  [0.284, [0.101, 0, 1]],
  [0.286, [0.113, 0, 1]],
  [0.288, [0.113, 0, 1]],
  [0.29, [0.126, 0, 1]],
  [0.292, [0.126, 0, 1]],
  [0.294, [0.138, 0, 1]],
  [0.295, [0.138, 0, 1]],
  [0.297, [0.15, 0, 1]],
  [0.299, [0.15, 0, 1]],
  [0.301, [0.162, 0, 1]],
  [0.303, [0.162, 0, 1]],
  [0.305, [0.175, 0, 1]],
  [0.307, [0.175, 0, 1]],
  [0.309, [0.187, 0, 1]],
  [0.311, [0.187, 0, 1]],
  [0.313, [0.199, 0, 1]],
  [0.315, [0.199, 0, 1]],
  [0.317, [0.211, 0, 1]],
  [0.319, [0.211, 0, 1]],
  [0.321, [0.224, 0, 1]],
  [0.323, [0.224, 0, 1]],
  [0.325, [0.236, 0, 1]],
  [0.327, [0.236, 0, 1]],
  [0.329, [0.248, 0, 1]],
  [0.331, [0.248, 0, 1]],
  [0.333, [0.26, 0, 1]],
  [0.335, [0.26, 0, 1]],
  [0.337, [0.273, 0, 1]],
  [0.339, [0.273, 0, 1]],
  [0.341, [0.285, 0, 1]],
  [0.342, [0.285, 0, 1]],
  [0.344, [0.297, 0, 1]],
  [0.346, [0.297, 0, 1]],
  [0.348, [0.309, 0, 1]],
  [0.35, [0.309, 0, 1]],
  [0.352, [0.322, 0, 1]],
  [0.354, [0.322, 0, 1]],
  [0.356, [0.334, 0, 1]],
  [0.358, [0.334, 0, 1]],
  [0.36, [0.346, 0, 1]],
  [0.362, [0.346, 0, 1]],
  [0.364, [0.358, 0, 1]],
  [0.366, [0.358, 0, 1]],
  [0.368, [0.371, 0, 1]],
  [0.37, [0.371, 0, 1]],
  [0.372, [0.383, 0, 1]],
  [0.374, [0.383, 0, 1]],
  [0.376, [0.395, 0, 1]],
  [0.378, [0.395, 0, 1]],
  [0.38, [0.407, 0, 1]],
  [0.382, [0.407, 0, 1]],
  [0.384, [0.42, 0, 1]],
  [0.386, [0.42, 0, 1]],
  [0.387, [0.432, 0, 1]],
  [0.389, [0.432, 0, 1]],
  [0.391, [0.444, 0, 1]],
  [0.393, [0.444, 0, 1]],
  [0.395, [0.456, 0, 1]],
  [0.397, [0.456, 0, 1]],
  [0.399, [0.469, 0, 1]],
  [0.401, [0.469, 0, 1]],
  [0.403, [0.481, 0, 1]],
  [0.405, [0.481, 0, 1]],
  [0.407, [0.493, 0, 1]],
  [0.409, [0.493, 0, 1]],
  [0.411, [0.506, 0, 1]],
  [0.413, [0.506, 0, 1]],
  [0.415, [0.518, 0, 1]],
  [0.417, [0.518, 0, 1]],
  [0.419, [0.53, 0, 1]],
  [0.421, [0.53, 0, 1]],
  [0.423, [0.542, 7e-3, 0.993]],
  [0.425, [0.542, 7e-3, 0.993]],
  [0.427, [0.555, 0.015, 0.985]],
  [0.429, [0.555, 0.015, 0.985]],
  [0.431, [0.567, 0.023, 0.977]],
  [0.432, [0.567, 0.023, 0.977]],
  [0.434, [0.579, 0.031, 0.969]],
  [0.436, [0.579, 0.031, 0.969]],
  [0.438, [0.591, 0.038, 0.962]],
  [0.44, [0.591, 0.038, 0.962]],
  [0.442, [0.604, 0.046, 0.954]],
  [0.444, [0.604, 0.046, 0.954]],
  [0.446, [0.616, 0.054, 0.946]],
  [0.448, [0.616, 0.054, 0.946]],
  [0.45, [0.628, 0.062, 0.938]],
  [0.452, [0.628, 0.062, 0.938]],
  [0.454, [0.64, 0.07, 0.93]],
  [0.456, [0.64, 0.07, 0.93]],
  [0.458, [0.653, 0.078, 0.922]],
  [0.46, [0.653, 0.078, 0.922]],
  [0.462, [0.665, 0.085, 0.915]],
  [0.464, [0.665, 0.085, 0.915]],
  [0.466, [0.677, 0.093, 0.907]],
  [0.468, [0.677, 0.093, 0.907]],
  [0.47, [0.689, 0.101, 0.899]],
  [0.472, [0.689, 0.101, 0.899]],
  [0.474, [0.702, 0.109, 0.891]],
  [0.476, [0.702, 0.109, 0.891]],
  [0.477, [0.714, 0.117, 0.883]],
  [0.479, [0.714, 0.117, 0.883]],
  [0.481, [0.726, 0.125, 0.875]],
  [0.483, [0.726, 0.125, 0.875]],
  [0.485, [0.738, 0.133, 0.867]],
  [0.487, [0.738, 0.133, 0.867]],
  [0.489, [0.751, 0.14, 0.86]],
  [0.491, [0.751, 0.14, 0.86]],
  [0.493, [0.763, 0.148, 0.852]],
  [0.495, [0.763, 0.148, 0.852]],
  [0.497, [0.775, 0.156, 0.844]],
  [0.499, [0.775, 0.156, 0.844]],
  [0.501, [0.787, 0.164, 0.836]],
  [0.503, [0.787, 0.164, 0.836]],
  [0.505, [0.8, 0.172, 0.828]],
  [0.507, [0.8, 0.172, 0.828]],
  [0.509, [0.812, 0.18, 0.82]],
  [0.511, [0.812, 0.18, 0.82]],
  [0.513, [0.824, 0.187, 0.813]],
  [0.515, [0.824, 0.187, 0.813]],
  [0.517, [0.836, 0.195, 0.805]],
  [0.519, [0.836, 0.195, 0.805]],
  [0.521, [0.849, 0.203, 0.797]],
  [0.523, [0.849, 0.203, 0.797]],
  [0.524, [0.861, 0.211, 0.789]],
  [0.526, [0.861, 0.211, 0.789]],
  [0.528, [0.873, 0.219, 0.781]],
  [0.53, [0.873, 0.219, 0.781]],
  [0.532, [0.885, 0.227, 0.773]],
  [0.534, [0.885, 0.227, 0.773]],
  [0.536, [0.898, 0.235, 0.765]],
  [0.538, [0.898, 0.235, 0.765]],
  [0.54, [0.91, 0.242, 0.758]],
  [0.542, [0.91, 0.242, 0.758]],
  [0.544, [0.922, 0.25, 0.75]],
  [0.546, [0.922, 0.25, 0.75]],
  [0.548, [0.934, 0.258, 0.742]],
  [0.55, [0.934, 0.258, 0.742]],
  [0.552, [0.947, 0.266, 0.734]],
  [0.554, [0.947, 0.266, 0.734]],
  [0.556, [0.959, 0.274, 0.726]],
  [0.558, [0.959, 0.274, 0.726]],
  [0.56, [0.971, 0.282, 0.718]],
  [0.562, [0.971, 0.282, 0.718]],
  [0.564, [0.983, 0.289, 0.711]],
  [0.566, [0.983, 0.289, 0.711]],
  [0.568, [0.996, 0.297, 0.703]],
  [0.569, [0.996, 0.297, 0.703]],
  [0.571, [1, 0.305, 0.695]],
  [0.573, [1, 0.305, 0.695]],
  [0.575, [1, 0.313, 0.687]],
  [0.577, [1, 0.313, 0.687]],
  [0.579, [1, 0.321, 0.679]],
  [0.581, [1, 0.321, 0.679]],
  [0.583, [1, 0.329, 0.671]],
  [0.585, [1, 0.329, 0.671]],
  [0.587, [1, 0.336, 0.664]],
  [0.589, [1, 0.336, 0.664]],
  [0.591, [1, 0.344, 0.656]],
  [0.593, [1, 0.344, 0.656]],
  [0.595, [1, 0.352, 0.648]],
  [0.597, [1, 0.352, 0.648]],
  [0.599, [1, 0.36, 0.64]],
  [0.601, [1, 0.36, 0.64]],
  [0.603, [1, 0.368, 0.632]],
  [0.605, [1, 0.368, 0.632]],
  [0.607, [1, 0.376, 0.624]],
  [0.609, [1, 0.376, 0.624]],
  [0.611, [1, 0.384, 0.616]],
  [0.613, [1, 0.384, 0.616]],
  [0.614, [1, 0.391, 0.609]],
  [0.616, [1, 0.391, 0.609]],
  [0.618, [1, 0.399, 0.601]],
  [0.62, [1, 0.399, 0.601]],
  [0.622, [1, 0.407, 0.593]],
  [0.624, [1, 0.407, 0.593]],
  [0.626, [1, 0.415, 0.585]],
  [0.628, [1, 0.415, 0.585]],
  [0.63, [1, 0.423, 0.577]],
  [0.632, [1, 0.423, 0.577]],
  [0.634, [1, 0.431, 0.569]],
  [0.636, [1, 0.431, 0.569]],
  [0.638, [1, 0.438, 0.562]],
  [0.64, [1, 0.438, 0.562]],
  [0.642, [1, 0.446, 0.554]],
  [0.644, [1, 0.446, 0.554]],
  [0.646, [1, 0.454, 0.546]],
  [0.648, [1, 0.454, 0.546]],
  [0.65, [1, 0.462, 0.538]],
  [0.652, [1, 0.462, 0.538]],
  [0.654, [1, 0.47, 0.53]],
  [0.656, [1, 0.47, 0.53]],
  [0.658, [1, 0.478, 0.522]],
  [0.659, [1, 0.478, 0.522]],
  [0.661, [1, 0.485, 0.515]],
  [0.663, [1, 0.485, 0.515]],
  [0.665, [1, 0.493, 0.507]],
  [0.667, [1, 0.493, 0.507]],
  [0.669, [1, 0.501, 0.499]],
  [0.671, [1, 0.501, 0.499]],
  [0.673, [1, 0.509, 0.491]],
  [0.675, [1, 0.509, 0.491]],
  [0.677, [1, 0.517, 0.483]],
  [0.679, [1, 0.517, 0.483]],
  [0.681, [1, 0.525, 0.475]],
  [0.683, [1, 0.525, 0.475]],
  [0.685, [1, 0.533, 0.467]],
  [0.687, [1, 0.533, 0.467]],
  [0.689, [1, 0.54, 0.46]],
  [0.691, [1, 0.54, 0.46]],
  [0.693, [1, 0.548, 0.452]],
  [0.695, [1, 0.548, 0.452]],
  [0.697, [1, 0.556, 0.444]],
  [0.699, [1, 0.556, 0.444]],
  [0.701, [1, 0.564, 0.436]],
  [0.703, [1, 0.564, 0.436]],
  [0.705, [1, 0.572, 0.428]],
  [0.706, [1, 0.572, 0.428]],
  [0.708, [1, 0.58, 0.42]],
  [0.71, [1, 0.58, 0.42]],
  [0.712, [1, 0.587, 0.413]],
  [0.714, [1, 0.587, 0.413]],
  [0.716, [1, 0.595, 0.405]],
  [0.718, [1, 0.595, 0.405]],
  [0.72, [1, 0.603, 0.397]],
  [0.722, [1, 0.603, 0.397]],
  [0.724, [1, 0.611, 0.389]],
  [0.726, [1, 0.611, 0.389]],
  [0.728, [1, 0.619, 0.381]],
  [0.73, [1, 0.619, 0.381]],
  [0.732, [1, 0.627, 0.373]],
  [0.734, [1, 0.627, 0.373]],
  [0.736, [1, 0.635, 0.365]],
  [0.738, [1, 0.635, 0.365]],
  [0.74, [1, 0.642, 0.358]],
  [0.742, [1, 0.642, 0.358]],
  [0.744, [1, 0.65, 0.35]],
  [0.746, [1, 0.65, 0.35]],
  [0.748, [1, 0.658, 0.342]],
  [0.75, [1, 0.658, 0.342]],
  [0.751, [1, 0.666, 0.334]],
  [0.753, [1, 0.666, 0.334]],
  [0.755, [1, 0.674, 0.326]],
  [0.757, [1, 0.674, 0.326]],
  [0.759, [1, 0.682, 0.318]],
  [0.761, [1, 0.682, 0.318]],
  [0.763, [1, 0.689, 0.311]],
  [0.765, [1, 0.689, 0.311]],
  [0.767, [1, 0.697, 0.303]],
  [0.769, [1, 0.697, 0.303]],
  [0.771, [1, 0.705, 0.295]],
  [0.773, [1, 0.705, 0.295]],
  [0.775, [1, 0.713, 0.287]],
  [0.777, [1, 0.713, 0.287]],
  [0.779, [1, 0.721, 0.279]],
  [0.781, [1, 0.721, 0.279]],
  [0.783, [1, 0.729, 0.271]],
  [0.785, [1, 0.729, 0.271]],
  [0.787, [1, 0.736, 0.264]],
  [0.789, [1, 0.736, 0.264]],
  [0.791, [1, 0.744, 0.256]],
  [0.793, [1, 0.744, 0.256]],
  [0.795, [1, 0.752, 0.248]],
  [0.796, [1, 0.752, 0.248]],
  [0.798, [1, 0.76, 0.24]],
  [0.8, [1, 0.76, 0.24]],
  [0.802, [1, 0.768, 0.232]],
  [0.804, [1, 0.768, 0.232]],
  [0.806, [1, 0.776, 0.224]],
  [0.808, [1, 0.776, 0.224]],
  [0.81, [1, 0.784, 0.216]],
  [0.812, [1, 0.784, 0.216]],
  [0.814, [1, 0.791, 0.209]],
  [0.816, [1, 0.791, 0.209]],
  [0.818, [1, 0.799, 0.201]],
  [0.82, [1, 0.799, 0.201]],
  [0.822, [1, 0.807, 0.193]],
  [0.824, [1, 0.807, 0.193]],
  [0.826, [1, 0.815, 0.185]],
  [0.828, [1, 0.815, 0.185]],
  [0.83, [1, 0.823, 0.177]],
  [0.832, [1, 0.823, 0.177]],
  [0.834, [1, 0.831, 0.169]],
  [0.836, [1, 0.831, 0.169]],
  [0.838, [1, 0.838, 0.162]],
  [0.84, [1, 0.838, 0.162]],
  [0.841, [1, 0.846, 0.154]],
  [0.843, [1, 0.846, 0.154]],
  [0.845, [1, 0.854, 0.146]],
  [0.847, [1, 0.854, 0.146]],
  [0.849, [1, 0.862, 0.138]],
  [0.851, [1, 0.862, 0.138]],
  [0.853, [1, 0.87, 0.13]],
  [0.855, [1, 0.87, 0.13]],
  [0.857, [1, 0.878, 0.122]],
  [0.859, [1, 0.878, 0.122]],
  [0.861, [1, 0.885, 0.115]],
  [0.863, [1, 0.885, 0.115]],
  [0.865, [1, 0.893, 0.107]],
  [0.867, [1, 0.893, 0.107]],
  [0.869, [1, 0.901, 0.099]],
  [0.871, [1, 0.901, 0.099]],
  [0.873, [1, 0.909, 0.091]],
  [0.875, [1, 0.909, 0.091]],
  [0.877, [1, 0.917, 0.083]],
  [0.879, [1, 0.917, 0.083]],
  [0.881, [1, 0.925, 0.075]],
  [0.883, [1, 0.925, 0.075]],
  [0.885, [1, 0.933, 0.067]],
  [0.886, [1, 0.933, 0.067]],
  [0.888, [1, 0.94, 0.06]],
  [0.89, [1, 0.94, 0.06]],
  [0.892, [1, 0.948, 0.052]],
  [0.894, [1, 0.948, 0.052]],
  [0.896, [1, 0.956, 0.044]],
  [0.898, [1, 0.956, 0.044]],
  [0.9, [1, 0.964, 0.036]],
  [0.902, [1, 0.964, 0.036]],
  [0.904, [1, 0.972, 0.028]],
  [0.906, [1, 0.972, 0.028]],
  [0.908, [1, 0.98, 0.02]],
  [0.91, [1, 0.98, 0.02]],
  [0.912, [1, 0.987, 0.013]],
  [0.914, [1, 0.987, 0.013]],
  [0.916, [1, 0.995, 5e-3]],
  [0.918, [1, 0.995, 5e-3]],
  [0.92, [1, 1, 0.02]],
  [0.922, [1, 1, 0.02]],
  [0.924, [1, 1, 0.069]],
  [0.926, [1, 1, 0.069]],
  [0.928, [1, 1, 0.118]],
  [0.93, [1, 1, 0.118]],
  [0.932, [1, 1, 0.167]],
  [0.933, [1, 1, 0.167]],
  [0.935, [1, 1, 0.216]],
  [0.937, [1, 1, 0.216]],
  [0.939, [1, 1, 0.265]],
  [0.941, [1, 1, 0.265]],
  [0.943, [1, 1, 0.314]],
  [0.945, [1, 1, 0.314]],
  [0.947, [1, 1, 0.363]],
  [0.949, [1, 1, 0.363]],
  [0.951, [1, 1, 0.412]],
  [0.953, [1, 1, 0.412]],
  [0.955, [1, 1, 0.461]],
  [0.957, [1, 1, 0.461]],
  [0.959, [1, 1, 0.51]],
  [0.961, [1, 1, 0.51]],
  [0.963, [1, 1, 0.559]],
  [0.965, [1, 1, 0.559]],
  [0.967, [1, 1, 0.608]],
  [0.969, [1, 1, 0.608]],
  [0.971, [1, 1, 0.657]],
  [0.973, [1, 1, 0.657]],
  [0.975, [1, 1, 0.706]],
  [0.977, [1, 1, 0.706]],
  [0.978, [1, 1, 0.755]],
  [0.98, [1, 1, 0.755]],
  [0.982, [1, 1, 0.804]],
  [0.984, [1, 1, 0.804]],
  [0.986, [1, 1, 0.853]],
  [0.988, [1, 1, 0.853]],
  [0.99, [1, 1, 0.902]],
  [0.992, [1, 1, 0.902]],
  [0.994, [1, 1, 0.951]],
  [0.996, [1, 1, 0.951]],
  [0.998, [1, 1, 1]],
  [1, [1, 1, 1]]
], Wp = [
  [0, [1, 0, 0]],
  [2e-3, [1, 0, 0]],
  [4e-3, [1, 0.023, 0]],
  [6e-3, [1, 0.023, 0]],
  [8e-3, [1, 0.046, 0]],
  [0.01, [1, 0.046, 0]],
  [0.012, [1, 0.069, 0]],
  [0.014, [1, 0.069, 0]],
  [0.016, [1, 0.093, 0]],
  [0.018, [1, 0.093, 0]],
  [0.02, [1, 0.116, 0]],
  [0.022, [1, 0.116, 0]],
  [0.023, [1, 0.139, 0]],
  [0.025, [1, 0.139, 0]],
  [0.027, [1, 0.162, 0]],
  [0.029, [1, 0.162, 0]],
  [0.031, [1, 0.185, 0]],
  [0.033, [1, 0.185, 0]],
  [0.035, [1, 0.208, 0]],
  [0.037, [1, 0.208, 0]],
  [0.039, [1, 0.232, 0]],
  [0.041, [1, 0.232, 0]],
  [0.043, [1, 0.255, 0]],
  [0.045, [1, 0.255, 0]],
  [0.047, [1, 0.278, 0]],
  [0.049, [1, 0.278, 0]],
  [0.051, [1, 0.301, 0]],
  [0.053, [1, 0.301, 0]],
  [0.055, [1, 0.324, 0]],
  [0.057, [1, 0.324, 0]],
  [0.059, [1, 0.347, 0]],
  [0.061, [1, 0.347, 0]],
  [0.063, [1, 0.371, 0]],
  [0.065, [1, 0.371, 0]],
  [0.067, [1, 0.394, 0]],
  [0.068, [1, 0.394, 0]],
  [0.07, [1, 0.417, 0]],
  [0.072, [1, 0.417, 0]],
  [0.074, [1, 0.44, 0]],
  [0.076, [1, 0.44, 0]],
  [0.078, [1, 0.463, 0]],
  [0.08, [1, 0.463, 0]],
  [0.082, [1, 0.486, 0]],
  [0.084, [1, 0.486, 0]],
  [0.086, [1, 0.51, 0]],
  [0.088, [1, 0.51, 0]],
  [0.09, [1, 0.533, 0]],
  [0.092, [1, 0.533, 0]],
  [0.094, [1, 0.556, 0]],
  [0.096, [1, 0.556, 0]],
  [0.098, [1, 0.579, 0]],
  [0.1, [1, 0.579, 0]],
  [0.102, [1, 0.602, 0]],
  [0.104, [1, 0.602, 0]],
  [0.106, [1, 0.625, 0]],
  [0.108, [1, 0.625, 0]],
  [0.11, [1, 0.649, 0]],
  [0.112, [1, 0.649, 0]],
  [0.114, [1, 0.672, 0]],
  [0.115, [1, 0.672, 0]],
  [0.117, [1, 0.695, 0]],
  [0.119, [1, 0.695, 0]],
  [0.121, [1, 0.718, 0]],
  [0.123, [1, 0.718, 0]],
  [0.125, [1, 0.741, 0]],
  [0.127, [1, 0.741, 0]],
  [0.129, [1, 0.764, 0]],
  [0.131, [1, 0.764, 0]],
  [0.133, [1, 0.788, 0]],
  [0.135, [1, 0.788, 0]],
  [0.137, [1, 0.811, 0]],
  [0.139, [1, 0.811, 0]],
  [0.141, [1, 0.834, 0]],
  [0.143, [1, 0.834, 0]],
  [0.145, [1, 0.857, 0]],
  [0.147, [1, 0.857, 0]],
  [0.149, [1, 0.88, 0]],
  [0.151, [1, 0.88, 0]],
  [0.153, [1, 0.903, 0]],
  [0.155, [1, 0.903, 0]],
  [0.157, [1, 0.926, 0]],
  [0.159, [1, 0.926, 0]],
  [0.16, [0.996, 0.946, 0]],
  [0.162, [0.996, 0.946, 0]],
  [0.164, [0.988, 0.961, 0]],
  [0.166, [0.988, 0.961, 0]],
  [0.168, [0.981, 0.976, 0]],
  [0.17, [0.981, 0.976, 0]],
  [0.172, [0.973, 0.992, 0]],
  [0.174, [0.973, 0.992, 0]],
  [0.176, [0.958, 1, 0]],
  [0.178, [0.958, 1, 0]],
  [0.18, [0.935, 1, 0]],
  [0.182, [0.935, 1, 0]],
  [0.184, [0.911, 1, 0]],
  [0.186, [0.911, 1, 0]],
  [0.188, [0.888, 1, 0]],
  [0.19, [0.888, 1, 0]],
  [0.192, [0.865, 1, 0]],
  [0.194, [0.865, 1, 0]],
  [0.196, [0.842, 1, 0]],
  [0.198, [0.842, 1, 0]],
  [0.2, [0.819, 1, 0]],
  [0.202, [0.819, 1, 0]],
  [0.204, [0.796, 1, 0]],
  [0.205, [0.796, 1, 0]],
  [0.207, [0.772, 1, 0]],
  [0.209, [0.772, 1, 0]],
  [0.211, [0.749, 1, 0]],
  [0.213, [0.749, 1, 0]],
  [0.215, [0.726, 1, 0]],
  [0.217, [0.726, 1, 0]],
  [0.219, [0.703, 1, 0]],
  [0.221, [0.703, 1, 0]],
  [0.223, [0.68, 1, 0]],
  [0.225, [0.68, 1, 0]],
  [0.227, [0.657, 1, 0]],
  [0.229, [0.657, 1, 0]],
  [0.231, [0.633, 1, 0]],
  [0.233, [0.633, 1, 0]],
  [0.235, [0.61, 1, 0]],
  [0.237, [0.61, 1, 0]],
  [0.239, [0.587, 1, 0]],
  [0.241, [0.587, 1, 0]],
  [0.243, [0.564, 1, 0]],
  [0.245, [0.564, 1, 0]],
  [0.247, [0.541, 1, 0]],
  [0.249, [0.541, 1, 0]],
  [0.25, [0.518, 1, 0]],
  [0.252, [0.518, 1, 0]],
  [0.254, [0.494, 1, 0]],
  [0.256, [0.494, 1, 0]],
  [0.258, [0.471, 1, 0]],
  [0.26, [0.471, 1, 0]],
  [0.262, [0.448, 1, 0]],
  [0.264, [0.448, 1, 0]],
  [0.266, [0.425, 1, 0]],
  [0.268, [0.425, 1, 0]],
  [0.27, [0.402, 1, 0]],
  [0.272, [0.402, 1, 0]],
  [0.274, [0.379, 1, 0]],
  [0.276, [0.379, 1, 0]],
  [0.278, [0.356, 1, 0]],
  [0.28, [0.356, 1, 0]],
  [0.282, [0.332, 1, 0]],
  [0.284, [0.332, 1, 0]],
  [0.286, [0.309, 1, 0]],
  [0.288, [0.309, 1, 0]],
  [0.29, [0.286, 1, 0]],
  [0.292, [0.286, 1, 0]],
  [0.294, [0.263, 1, 0]],
  [0.295, [0.263, 1, 0]],
  [0.297, [0.24, 1, 0]],
  [0.299, [0.24, 1, 0]],
  [0.301, [0.217, 1, 0]],
  [0.303, [0.217, 1, 0]],
  [0.305, [0.193, 1, 0]],
  [0.307, [0.193, 1, 0]],
  [0.309, [0.17, 1, 0]],
  [0.311, [0.17, 1, 0]],
  [0.313, [0.147, 1, 0]],
  [0.315, [0.147, 1, 0]],
  [0.317, [0.124, 1, 0]],
  [0.319, [0.124, 1, 0]],
  [0.321, [0.101, 1, 0]],
  [0.323, [0.101, 1, 0]],
  [0.325, [0.078, 1, 0]],
  [0.327, [0.078, 1, 0]],
  [0.329, [0.054, 1, 0]],
  [0.331, [0.054, 1, 0]],
  [0.333, [0.031, 1, 0]],
  [0.335, [0.031, 1, 0]],
  [0.337, [0.024, 1, 0.015]],
  [0.339, [0.024, 1, 0.015]],
  [0.341, [0.016, 1, 0.031]],
  [0.342, [0.016, 1, 0.031]],
  [0.344, [8e-3, 1, 0.046]],
  [0.346, [8e-3, 1, 0.046]],
  [0.348, [0, 1, 0.062]],
  [0.35, [0, 1, 0.062]],
  [0.352, [0, 1, 0.085]],
  [0.354, [0, 1, 0.085]],
  [0.356, [0, 1, 0.108]],
  [0.358, [0, 1, 0.108]],
  [0.36, [0, 1, 0.131]],
  [0.362, [0, 1, 0.131]],
  [0.364, [0, 1, 0.154]],
  [0.366, [0, 1, 0.154]],
  [0.368, [0, 1, 0.177]],
  [0.37, [0, 1, 0.177]],
  [0.372, [0, 1, 0.2]],
  [0.374, [0, 1, 0.2]],
  [0.376, [0, 1, 0.224]],
  [0.378, [0, 1, 0.224]],
  [0.38, [0, 1, 0.247]],
  [0.382, [0, 1, 0.247]],
  [0.384, [0, 1, 0.27]],
  [0.386, [0, 1, 0.27]],
  [0.387, [0, 1, 0.293]],
  [0.389, [0, 1, 0.293]],
  [0.391, [0, 1, 0.316]],
  [0.393, [0, 1, 0.316]],
  [0.395, [0, 1, 0.339]],
  [0.397, [0, 1, 0.339]],
  [0.399, [0, 1, 0.363]],
  [0.401, [0, 1, 0.363]],
  [0.403, [0, 1, 0.386]],
  [0.405, [0, 1, 0.386]],
  [0.407, [0, 1, 0.409]],
  [0.409, [0, 1, 0.409]],
  [0.411, [0, 1, 0.432]],
  [0.413, [0, 1, 0.432]],
  [0.415, [0, 1, 0.455]],
  [0.417, [0, 1, 0.455]],
  [0.419, [0, 1, 0.478]],
  [0.421, [0, 1, 0.478]],
  [0.423, [0, 1, 0.501]],
  [0.425, [0, 1, 0.501]],
  [0.427, [0, 1, 0.525]],
  [0.429, [0, 1, 0.525]],
  [0.431, [0, 1, 0.548]],
  [0.432, [0, 1, 0.548]],
  [0.434, [0, 1, 0.571]],
  [0.436, [0, 1, 0.571]],
  [0.438, [0, 1, 0.594]],
  [0.44, [0, 1, 0.594]],
  [0.442, [0, 1, 0.617]],
  [0.444, [0, 1, 0.617]],
  [0.446, [0, 1, 0.64]],
  [0.448, [0, 1, 0.64]],
  [0.45, [0, 1, 0.664]],
  [0.452, [0, 1, 0.664]],
  [0.454, [0, 1, 0.687]],
  [0.456, [0, 1, 0.687]],
  [0.458, [0, 1, 0.71]],
  [0.46, [0, 1, 0.71]],
  [0.462, [0, 1, 0.733]],
  [0.464, [0, 1, 0.733]],
  [0.466, [0, 1, 0.756]],
  [0.468, [0, 1, 0.756]],
  [0.47, [0, 1, 0.779]],
  [0.472, [0, 1, 0.779]],
  [0.474, [0, 1, 0.803]],
  [0.476, [0, 1, 0.803]],
  [0.477, [0, 1, 0.826]],
  [0.479, [0, 1, 0.826]],
  [0.481, [0, 1, 0.849]],
  [0.483, [0, 1, 0.849]],
  [0.485, [0, 1, 0.872]],
  [0.487, [0, 1, 0.872]],
  [0.489, [0, 1, 0.895]],
  [0.491, [0, 1, 0.895]],
  [0.493, [0, 1, 0.918]],
  [0.495, [0, 1, 0.918]],
  [0.497, [0, 1, 0.942]],
  [0.499, [0, 1, 0.942]],
  [0.501, [0, 1, 0.965]],
  [0.503, [0, 1, 0.965]],
  [0.505, [0, 1, 0.988]],
  [0.507, [0, 1, 0.988]],
  [0.509, [0, 0.989, 1]],
  [0.511, [0, 0.989, 1]],
  [0.513, [0, 0.966, 1]],
  [0.515, [0, 0.966, 1]],
  [0.517, [0, 0.943, 1]],
  [0.519, [0, 0.943, 1]],
  [0.521, [0, 0.919, 1]],
  [0.523, [0, 0.919, 1]],
  [0.524, [0, 0.896, 1]],
  [0.526, [0, 0.896, 1]],
  [0.528, [0, 0.873, 1]],
  [0.53, [0, 0.873, 1]],
  [0.532, [0, 0.85, 1]],
  [0.534, [0, 0.85, 1]],
  [0.536, [0, 0.827, 1]],
  [0.538, [0, 0.827, 1]],
  [0.54, [0, 0.804, 1]],
  [0.542, [0, 0.804, 1]],
  [0.544, [0, 0.781, 1]],
  [0.546, [0, 0.781, 1]],
  [0.548, [0, 0.757, 1]],
  [0.55, [0, 0.757, 1]],
  [0.552, [0, 0.734, 1]],
  [0.554, [0, 0.734, 1]],
  [0.556, [0, 0.711, 1]],
  [0.558, [0, 0.711, 1]],
  [0.56, [0, 0.688, 1]],
  [0.562, [0, 0.688, 1]],
  [0.564, [0, 0.665, 1]],
  [0.566, [0, 0.665, 1]],
  [0.568, [0, 0.642, 1]],
  [0.569, [0, 0.642, 1]],
  [0.571, [0, 0.618, 1]],
  [0.573, [0, 0.618, 1]],
  [0.575, [0, 0.595, 1]],
  [0.577, [0, 0.595, 1]],
  [0.579, [0, 0.572, 1]],
  [0.581, [0, 0.572, 1]],
  [0.583, [0, 0.549, 1]],
  [0.585, [0, 0.549, 1]],
  [0.587, [0, 0.526, 1]],
  [0.589, [0, 0.526, 1]],
  [0.591, [0, 0.503, 1]],
  [0.593, [0, 0.503, 1]],
  [0.595, [0, 0.479, 1]],
  [0.597, [0, 0.479, 1]],
  [0.599, [0, 0.456, 1]],
  [0.601, [0, 0.456, 1]],
  [0.603, [0, 0.433, 1]],
  [0.605, [0, 0.433, 1]],
  [0.607, [0, 0.41, 1]],
  [0.609, [0, 0.41, 1]],
  [0.611, [0, 0.387, 1]],
  [0.613, [0, 0.387, 1]],
  [0.614, [0, 0.364, 1]],
  [0.616, [0, 0.364, 1]],
  [0.618, [0, 0.34, 1]],
  [0.62, [0, 0.34, 1]],
  [0.622, [0, 0.317, 1]],
  [0.624, [0, 0.317, 1]],
  [0.626, [0, 0.294, 1]],
  [0.628, [0, 0.294, 1]],
  [0.63, [0, 0.271, 1]],
  [0.632, [0, 0.271, 1]],
  [0.634, [0, 0.248, 1]],
  [0.636, [0, 0.248, 1]],
  [0.638, [0, 0.225, 1]],
  [0.64, [0, 0.225, 1]],
  [0.642, [0, 0.201, 1]],
  [0.644, [0, 0.201, 1]],
  [0.646, [0, 0.178, 1]],
  [0.648, [0, 0.178, 1]],
  [0.65, [0, 0.155, 1]],
  [0.652, [0, 0.155, 1]],
  [0.654, [0, 0.132, 1]],
  [0.656, [0, 0.132, 1]],
  [0.658, [0, 0.109, 1]],
  [0.659, [0, 0.109, 1]],
  [0.661, [0, 0.086, 1]],
  [0.663, [0, 0.086, 1]],
  [0.665, [0, 0.063, 1]],
  [0.667, [0, 0.063, 1]],
  [0.669, [8e-3, 0.047, 1]],
  [0.671, [8e-3, 0.047, 1]],
  [0.673, [0.015, 0.032, 1]],
  [0.675, [0.015, 0.032, 1]],
  [0.677, [0.023, 0.016, 1]],
  [0.679, [0.023, 0.016, 1]],
  [0.681, [0.031, 1e-3, 1]],
  [0.683, [0.031, 1e-3, 1]],
  [0.685, [0.053, 0, 1]],
  [0.687, [0.053, 0, 1]],
  [0.689, [0.076, 0, 1]],
  [0.691, [0.076, 0, 1]],
  [0.693, [0.1, 0, 1]],
  [0.695, [0.1, 0, 1]],
  [0.697, [0.123, 0, 1]],
  [0.699, [0.123, 0, 1]],
  [0.701, [0.146, 0, 1]],
  [0.703, [0.146, 0, 1]],
  [0.705, [0.169, 0, 1]],
  [0.706, [0.169, 0, 1]],
  [0.708, [0.192, 0, 1]],
  [0.71, [0.192, 0, 1]],
  [0.712, [0.215, 0, 1]],
  [0.714, [0.215, 0, 1]],
  [0.716, [0.239, 0, 1]],
  [0.718, [0.239, 0, 1]],
  [0.72, [0.262, 0, 1]],
  [0.722, [0.262, 0, 1]],
  [0.724, [0.285, 0, 1]],
  [0.726, [0.285, 0, 1]],
  [0.728, [0.308, 0, 1]],
  [0.73, [0.308, 0, 1]],
  [0.732, [0.331, 0, 1]],
  [0.734, [0.331, 0, 1]],
  [0.736, [0.354, 0, 1]],
  [0.738, [0.354, 0, 1]],
  [0.74, [0.378, 0, 1]],
  [0.742, [0.378, 0, 1]],
  [0.744, [0.401, 0, 1]],
  [0.746, [0.401, 0, 1]],
  [0.748, [0.424, 0, 1]],
  [0.75, [0.424, 0, 1]],
  [0.751, [0.447, 0, 1]],
  [0.753, [0.447, 0, 1]],
  [0.755, [0.47, 0, 1]],
  [0.757, [0.47, 0, 1]],
  [0.759, [0.493, 0, 1]],
  [0.761, [0.493, 0, 1]],
  [0.763, [0.517, 0, 1]],
  [0.765, [0.517, 0, 1]],
  [0.767, [0.54, 0, 1]],
  [0.769, [0.54, 0, 1]],
  [0.771, [0.563, 0, 1]],
  [0.773, [0.563, 0, 1]],
  [0.775, [0.586, 0, 1]],
  [0.777, [0.586, 0, 1]],
  [0.779, [0.609, 0, 1]],
  [0.781, [0.609, 0, 1]],
  [0.783, [0.632, 0, 1]],
  [0.785, [0.632, 0, 1]],
  [0.787, [0.656, 0, 1]],
  [0.789, [0.656, 0, 1]],
  [0.791, [0.679, 0, 1]],
  [0.793, [0.679, 0, 1]],
  [0.795, [0.702, 0, 1]],
  [0.796, [0.702, 0, 1]],
  [0.798, [0.725, 0, 1]],
  [0.8, [0.725, 0, 1]],
  [0.802, [0.748, 0, 1]],
  [0.804, [0.748, 0, 1]],
  [0.806, [0.771, 0, 1]],
  [0.808, [0.771, 0, 1]],
  [0.81, [0.794, 0, 1]],
  [0.812, [0.794, 0, 1]],
  [0.814, [0.818, 0, 1]],
  [0.816, [0.818, 0, 1]],
  [0.818, [0.841, 0, 1]],
  [0.82, [0.841, 0, 1]],
  [0.822, [0.864, 0, 1]],
  [0.824, [0.864, 0, 1]],
  [0.826, [0.887, 0, 1]],
  [0.828, [0.887, 0, 1]],
  [0.83, [0.91, 0, 1]],
  [0.832, [0.91, 0, 1]],
  [0.834, [0.933, 0, 1]],
  [0.836, [0.933, 0, 1]],
  [0.838, [0.957, 0, 1]],
  [0.84, [0.957, 0, 1]],
  [0.841, [0.972, 0, 0.993]],
  [0.843, [0.972, 0, 0.993]],
  [0.845, [0.98, 0, 0.977]],
  [0.847, [0.98, 0, 0.977]],
  [0.849, [0.988, 0, 0.962]],
  [0.851, [0.988, 0, 0.962]],
  [0.853, [0.996, 0, 0.946]],
  [0.855, [0.996, 0, 0.946]],
  [0.857, [1, 0, 0.928]],
  [0.859, [1, 0, 0.928]],
  [0.861, [1, 0, 0.904]],
  [0.863, [1, 0, 0.904]],
  [0.865, [1, 0, 0.881]],
  [0.867, [1, 0, 0.881]],
  [0.869, [1, 0, 0.858]],
  [0.871, [1, 0, 0.858]],
  [0.873, [1, 0, 0.835]],
  [0.875, [1, 0, 0.835]],
  [0.877, [1, 0, 0.812]],
  [0.879, [1, 0, 0.812]],
  [0.881, [1, 0, 0.789]],
  [0.883, [1, 0, 0.789]],
  [0.885, [1, 0, 0.765]],
  [0.886, [1, 0, 0.765]],
  [0.888, [1, 0, 0.742]],
  [0.89, [1, 0, 0.742]],
  [0.892, [1, 0, 0.719]],
  [0.894, [1, 0, 0.719]],
  [0.896, [1, 0, 0.696]],
  [0.898, [1, 0, 0.696]],
  [0.9, [1, 0, 0.673]],
  [0.902, [1, 0, 0.673]],
  [0.904, [1, 0, 0.65]],
  [0.906, [1, 0, 0.65]],
  [0.908, [1, 0, 0.626]],
  [0.91, [1, 0, 0.626]],
  [0.912, [1, 0, 0.603]],
  [0.914, [1, 0, 0.603]],
  [0.916, [1, 0, 0.58]],
  [0.918, [1, 0, 0.58]],
  [0.92, [1, 0, 0.557]],
  [0.922, [1, 0, 0.557]],
  [0.924, [1, 0, 0.534]],
  [0.926, [1, 0, 0.534]],
  [0.928, [1, 0, 0.511]],
  [0.93, [1, 0, 0.511]],
  [0.932, [1, 0, 0.488]],
  [0.933, [1, 0, 0.488]],
  [0.935, [1, 0, 0.464]],
  [0.937, [1, 0, 0.464]],
  [0.939, [1, 0, 0.441]],
  [0.941, [1, 0, 0.441]],
  [0.943, [1, 0, 0.418]],
  [0.945, [1, 0, 0.418]],
  [0.947, [1, 0, 0.395]],
  [0.949, [1, 0, 0.395]],
  [0.951, [1, 0, 0.372]],
  [0.953, [1, 0, 0.372]],
  [0.955, [1, 0, 0.349]],
  [0.957, [1, 0, 0.349]],
  [0.959, [1, 0, 0.325]],
  [0.961, [1, 0, 0.325]],
  [0.963, [1, 0, 0.302]],
  [0.965, [1, 0, 0.302]],
  [0.967, [1, 0, 0.279]],
  [0.969, [1, 0, 0.279]],
  [0.971, [1, 0, 0.256]],
  [0.973, [1, 0, 0.256]],
  [0.975, [1, 0, 0.233]],
  [0.977, [1, 0, 0.233]],
  [0.978, [1, 0, 0.21]],
  [0.98, [1, 0, 0.21]],
  [0.982, [1, 0, 0.186]],
  [0.984, [1, 0, 0.186]],
  [0.986, [1, 0, 0.163]],
  [0.988, [1, 0, 0.163]],
  [0.99, [1, 0, 0.14]],
  [0.992, [1, 0, 0.14]],
  [0.994, [1, 0, 0.117]],
  [0.996, [1, 0, 0.117]],
  [0.998, [1, 0, 0.094]],
  [1, [1, 0, 0.094]]
], Xp = [
  [0, [0, 0, 0.5]],
  [2e-3, [0, 0, 0.5]],
  [4e-3, [0, 0, 0.518]],
  [6e-3, [0, 0, 0.518]],
  [8e-3, [0, 0, 0.536]],
  [0.01, [0, 0, 0.536]],
  [0.012, [0, 0, 0.553]],
  [0.014, [0, 0, 0.553]],
  [0.016, [0, 0, 0.571]],
  [0.018, [0, 0, 0.571]],
  [0.02, [0, 0, 0.589]],
  [0.022, [0, 0, 0.589]],
  [0.023, [0, 0, 0.607]],
  [0.025, [0, 0, 0.607]],
  [0.027, [0, 0, 0.625]],
  [0.029, [0, 0, 0.625]],
  [0.031, [0, 0, 0.643]],
  [0.033, [0, 0, 0.643]],
  [0.035, [0, 0, 0.66]],
  [0.037, [0, 0, 0.66]],
  [0.039, [0, 0, 0.678]],
  [0.041, [0, 0, 0.678]],
  [0.043, [0, 0, 0.696]],
  [0.045, [0, 0, 0.696]],
  [0.047, [0, 0, 0.714]],
  [0.049, [0, 0, 0.714]],
  [0.051, [0, 0, 0.732]],
  [0.053, [0, 0, 0.732]],
  [0.055, [0, 0, 0.75]],
  [0.057, [0, 0, 0.75]],
  [0.059, [0, 0, 0.767]],
  [0.061, [0, 0, 0.767]],
  [0.063, [0, 0, 0.785]],
  [0.065, [0, 0, 0.785]],
  [0.067, [0, 0, 0.803]],
  [0.068, [0, 0, 0.803]],
  [0.07, [0, 0, 0.821]],
  [0.072, [0, 0, 0.821]],
  [0.074, [0, 0, 0.839]],
  [0.076, [0, 0, 0.839]],
  [0.078, [0, 0, 0.857]],
  [0.08, [0, 0, 0.857]],
  [0.082, [0, 0, 0.874]],
  [0.084, [0, 0, 0.874]],
  [0.086, [0, 0, 0.892]],
  [0.088, [0, 0, 0.892]],
  [0.09, [0, 0, 0.91]],
  [0.092, [0, 0, 0.91]],
  [0.094, [0, 0, 0.928]],
  [0.096, [0, 0, 0.928]],
  [0.098, [0, 0, 0.946]],
  [0.1, [0, 0, 0.946]],
  [0.102, [0, 0, 0.963]],
  [0.104, [0, 0, 0.963]],
  [0.106, [0, 0, 0.981]],
  [0.108, [0, 0, 0.981]],
  [0.11, [0, 0, 0.999]],
  [0.112, [0, 0, 0.999]],
  [0.114, [0, 0, 1]],
  [0.115, [0, 0, 1]],
  [0.117, [0, 0, 1]],
  [0.119, [0, 0, 1]],
  [0.121, [0, 0, 1]],
  [0.123, [0, 0, 1]],
  [0.125, [0, 2e-3, 1]],
  [0.127, [0, 2e-3, 1]],
  [0.129, [0, 0.018, 1]],
  [0.131, [0, 0.018, 1]],
  [0.133, [0, 0.033, 1]],
  [0.135, [0, 0.033, 1]],
  [0.137, [0, 0.049, 1]],
  [0.139, [0, 0.049, 1]],
  [0.141, [0, 0.065, 1]],
  [0.143, [0, 0.065, 1]],
  [0.145, [0, 0.08, 1]],
  [0.147, [0, 0.08, 1]],
  [0.149, [0, 0.096, 1]],
  [0.151, [0, 0.096, 1]],
  [0.153, [0, 0.112, 1]],
  [0.155, [0, 0.112, 1]],
  [0.157, [0, 0.127, 1]],
  [0.159, [0, 0.127, 1]],
  [0.16, [0, 0.143, 1]],
  [0.162, [0, 0.143, 1]],
  [0.164, [0, 0.159, 1]],
  [0.166, [0, 0.159, 1]],
  [0.168, [0, 0.175, 1]],
  [0.17, [0, 0.175, 1]],
  [0.172, [0, 0.19, 1]],
  [0.174, [0, 0.19, 1]],
  [0.176, [0, 0.206, 1]],
  [0.178, [0, 0.206, 1]],
  [0.18, [0, 0.222, 1]],
  [0.182, [0, 0.222, 1]],
  [0.184, [0, 0.237, 1]],
  [0.186, [0, 0.237, 1]],
  [0.188, [0, 0.253, 1]],
  [0.19, [0, 0.253, 1]],
  [0.192, [0, 0.269, 1]],
  [0.194, [0, 0.269, 1]],
  [0.196, [0, 0.284, 1]],
  [0.198, [0, 0.284, 1]],
  [0.2, [0, 0.3, 1]],
  [0.202, [0, 0.3, 1]],
  [0.204, [0, 0.316, 1]],
  [0.205, [0, 0.316, 1]],
  [0.207, [0, 0.331, 1]],
  [0.209, [0, 0.331, 1]],
  [0.211, [0, 0.347, 1]],
  [0.213, [0, 0.347, 1]],
  [0.215, [0, 0.363, 1]],
  [0.217, [0, 0.363, 1]],
  [0.219, [0, 0.378, 1]],
  [0.221, [0, 0.378, 1]],
  [0.223, [0, 0.394, 1]],
  [0.225, [0, 0.394, 1]],
  [0.227, [0, 0.41, 1]],
  [0.229, [0, 0.41, 1]],
  [0.231, [0, 0.425, 1]],
  [0.233, [0, 0.425, 1]],
  [0.235, [0, 0.441, 1]],
  [0.237, [0, 0.441, 1]],
  [0.239, [0, 0.457, 1]],
  [0.241, [0, 0.457, 1]],
  [0.243, [0, 0.473, 1]],
  [0.245, [0, 0.473, 1]],
  [0.247, [0, 0.488, 1]],
  [0.249, [0, 0.488, 1]],
  [0.25, [0, 0.504, 1]],
  [0.252, [0, 0.504, 1]],
  [0.254, [0, 0.52, 1]],
  [0.256, [0, 0.52, 1]],
  [0.258, [0, 0.535, 1]],
  [0.26, [0, 0.535, 1]],
  [0.262, [0, 0.551, 1]],
  [0.264, [0, 0.551, 1]],
  [0.266, [0, 0.567, 1]],
  [0.268, [0, 0.567, 1]],
  [0.27, [0, 0.582, 1]],
  [0.272, [0, 0.582, 1]],
  [0.274, [0, 0.598, 1]],
  [0.276, [0, 0.598, 1]],
  [0.278, [0, 0.614, 1]],
  [0.28, [0, 0.614, 1]],
  [0.282, [0, 0.629, 1]],
  [0.284, [0, 0.629, 1]],
  [0.286, [0, 0.645, 1]],
  [0.288, [0, 0.645, 1]],
  [0.29, [0, 0.661, 1]],
  [0.292, [0, 0.661, 1]],
  [0.294, [0, 0.676, 1]],
  [0.295, [0, 0.676, 1]],
  [0.297, [0, 0.692, 1]],
  [0.299, [0, 0.692, 1]],
  [0.301, [0, 0.708, 1]],
  [0.303, [0, 0.708, 1]],
  [0.305, [0, 0.724, 1]],
  [0.307, [0, 0.724, 1]],
  [0.309, [0, 0.739, 1]],
  [0.311, [0, 0.739, 1]],
  [0.313, [0, 0.755, 1]],
  [0.315, [0, 0.755, 1]],
  [0.317, [0, 0.771, 1]],
  [0.319, [0, 0.771, 1]],
  [0.321, [0, 0.786, 1]],
  [0.323, [0, 0.786, 1]],
  [0.325, [0, 0.802, 1]],
  [0.327, [0, 0.802, 1]],
  [0.329, [0, 0.818, 1]],
  [0.331, [0, 0.818, 1]],
  [0.333, [0, 0.833, 1]],
  [0.335, [0, 0.833, 1]],
  [0.337, [0, 0.849, 1]],
  [0.339, [0, 0.849, 1]],
  [0.341, [0, 0.865, 0.996]],
  [0.342, [0, 0.865, 0.996]],
  [0.344, [0, 0.88, 0.984]],
  [0.346, [0, 0.88, 0.984]],
  [0.348, [0, 0.896, 0.971]],
  [0.35, [0, 0.896, 0.971]],
  [0.352, [9e-3, 0.912, 0.958]],
  [0.354, [9e-3, 0.912, 0.958]],
  [0.356, [0.022, 0.927, 0.946]],
  [0.358, [0.022, 0.927, 0.946]],
  [0.36, [0.035, 0.943, 0.933]],
  [0.362, [0.035, 0.943, 0.933]],
  [0.364, [0.047, 0.959, 0.92]],
  [0.366, [0.047, 0.959, 0.92]],
  [0.368, [0.06, 0.975, 0.908]],
  [0.37, [0.06, 0.975, 0.908]],
  [0.372, [0.073, 0.99, 0.895]],
  [0.374, [0.073, 0.99, 0.895]],
  [0.376, [0.085, 1, 0.882]],
  [0.378, [0.085, 1, 0.882]],
  [0.38, [0.098, 1, 0.87]],
  [0.382, [0.098, 1, 0.87]],
  [0.384, [0.111, 1, 0.857]],
  [0.386, [0.111, 1, 0.857]],
  [0.387, [0.123, 1, 0.844]],
  [0.389, [0.123, 1, 0.844]],
  [0.391, [0.136, 1, 0.832]],
  [0.393, [0.136, 1, 0.832]],
  [0.395, [0.149, 1, 0.819]],
  [0.397, [0.149, 1, 0.819]],
  [0.399, [0.161, 1, 0.806]],
  [0.401, [0.161, 1, 0.806]],
  [0.403, [0.174, 1, 0.794]],
  [0.405, [0.174, 1, 0.794]],
  [0.407, [0.187, 1, 0.781]],
  [0.409, [0.187, 1, 0.781]],
  [0.411, [0.199, 1, 0.769]],
  [0.413, [0.199, 1, 0.769]],
  [0.415, [0.212, 1, 0.756]],
  [0.417, [0.212, 1, 0.756]],
  [0.419, [0.225, 1, 0.743]],
  [0.421, [0.225, 1, 0.743]],
  [0.423, [0.237, 1, 0.731]],
  [0.425, [0.237, 1, 0.731]],
  [0.427, [0.25, 1, 0.718]],
  [0.429, [0.25, 1, 0.718]],
  [0.431, [0.262, 1, 0.705]],
  [0.432, [0.262, 1, 0.705]],
  [0.434, [0.275, 1, 0.693]],
  [0.436, [0.275, 1, 0.693]],
  [0.438, [0.288, 1, 0.68]],
  [0.44, [0.288, 1, 0.68]],
  [0.442, [0.3, 1, 0.667]],
  [0.444, [0.3, 1, 0.667]],
  [0.446, [0.313, 1, 0.655]],
  [0.448, [0.313, 1, 0.655]],
  [0.45, [0.326, 1, 0.642]],
  [0.452, [0.326, 1, 0.642]],
  [0.454, [0.338, 1, 0.629]],
  [0.456, [0.338, 1, 0.629]],
  [0.458, [0.351, 1, 0.617]],
  [0.46, [0.351, 1, 0.617]],
  [0.462, [0.364, 1, 0.604]],
  [0.464, [0.364, 1, 0.604]],
  [0.466, [0.376, 1, 0.591]],
  [0.468, [0.376, 1, 0.591]],
  [0.47, [0.389, 1, 0.579]],
  [0.472, [0.389, 1, 0.579]],
  [0.474, [0.402, 1, 0.566]],
  [0.476, [0.402, 1, 0.566]],
  [0.477, [0.414, 1, 0.553]],
  [0.479, [0.414, 1, 0.553]],
  [0.481, [0.427, 1, 0.541]],
  [0.483, [0.427, 1, 0.541]],
  [0.485, [0.44, 1, 0.528]],
  [0.487, [0.44, 1, 0.528]],
  [0.489, [0.452, 1, 0.515]],
  [0.491, [0.452, 1, 0.515]],
  [0.493, [0.465, 1, 0.503]],
  [0.495, [0.465, 1, 0.503]],
  [0.497, [0.478, 1, 0.49]],
  [0.499, [0.478, 1, 0.49]],
  [0.501, [0.49, 1, 0.478]],
  [0.503, [0.49, 1, 0.478]],
  [0.505, [0.503, 1, 0.465]],
  [0.507, [0.503, 1, 0.465]],
  [0.509, [0.515, 1, 0.452]],
  [0.511, [0.515, 1, 0.452]],
  [0.513, [0.528, 1, 0.44]],
  [0.515, [0.528, 1, 0.44]],
  [0.517, [0.541, 1, 0.427]],
  [0.519, [0.541, 1, 0.427]],
  [0.521, [0.553, 1, 0.414]],
  [0.523, [0.553, 1, 0.414]],
  [0.524, [0.566, 1, 0.402]],
  [0.526, [0.566, 1, 0.402]],
  [0.528, [0.579, 1, 0.389]],
  [0.53, [0.579, 1, 0.389]],
  [0.532, [0.591, 1, 0.376]],
  [0.534, [0.591, 1, 0.376]],
  [0.536, [0.604, 1, 0.364]],
  [0.538, [0.604, 1, 0.364]],
  [0.54, [0.617, 1, 0.351]],
  [0.542, [0.617, 1, 0.351]],
  [0.544, [0.629, 1, 0.338]],
  [0.546, [0.629, 1, 0.338]],
  [0.548, [0.642, 1, 0.326]],
  [0.55, [0.642, 1, 0.326]],
  [0.552, [0.655, 1, 0.313]],
  [0.554, [0.655, 1, 0.313]],
  [0.556, [0.667, 1, 0.3]],
  [0.558, [0.667, 1, 0.3]],
  [0.56, [0.68, 1, 0.288]],
  [0.562, [0.68, 1, 0.288]],
  [0.564, [0.693, 1, 0.275]],
  [0.566, [0.693, 1, 0.275]],
  [0.568, [0.705, 1, 0.262]],
  [0.569, [0.705, 1, 0.262]],
  [0.571, [0.718, 1, 0.25]],
  [0.573, [0.718, 1, 0.25]],
  [0.575, [0.731, 1, 0.237]],
  [0.577, [0.731, 1, 0.237]],
  [0.579, [0.743, 1, 0.225]],
  [0.581, [0.743, 1, 0.225]],
  [0.583, [0.756, 1, 0.212]],
  [0.585, [0.756, 1, 0.212]],
  [0.587, [0.769, 1, 0.199]],
  [0.589, [0.769, 1, 0.199]],
  [0.591, [0.781, 1, 0.187]],
  [0.593, [0.781, 1, 0.187]],
  [0.595, [0.794, 1, 0.174]],
  [0.597, [0.794, 1, 0.174]],
  [0.599, [0.806, 1, 0.161]],
  [0.601, [0.806, 1, 0.161]],
  [0.603, [0.819, 1, 0.149]],
  [0.605, [0.819, 1, 0.149]],
  [0.607, [0.832, 1, 0.136]],
  [0.609, [0.832, 1, 0.136]],
  [0.611, [0.844, 1, 0.123]],
  [0.613, [0.844, 1, 0.123]],
  [0.614, [0.857, 1, 0.111]],
  [0.616, [0.857, 1, 0.111]],
  [0.618, [0.87, 1, 0.098]],
  [0.62, [0.87, 1, 0.098]],
  [0.622, [0.882, 1, 0.085]],
  [0.624, [0.882, 1, 0.085]],
  [0.626, [0.895, 1, 0.073]],
  [0.628, [0.895, 1, 0.073]],
  [0.63, [0.908, 1, 0.06]],
  [0.632, [0.908, 1, 0.06]],
  [0.634, [0.92, 1, 0.047]],
  [0.636, [0.92, 1, 0.047]],
  [0.638, [0.933, 1, 0.035]],
  [0.64, [0.933, 1, 0.035]],
  [0.642, [0.946, 0.988, 0.022]],
  [0.644, [0.946, 0.988, 0.022]],
  [0.646, [0.958, 0.974, 9e-3]],
  [0.648, [0.958, 0.974, 9e-3]],
  [0.65, [0.971, 0.959, 0]],
  [0.652, [0.971, 0.959, 0]],
  [0.654, [0.984, 0.945, 0]],
  [0.656, [0.984, 0.945, 0]],
  [0.658, [0.996, 0.93, 0]],
  [0.659, [0.996, 0.93, 0]],
  [0.661, [1, 0.916, 0]],
  [0.663, [1, 0.916, 0]],
  [0.665, [1, 0.901, 0]],
  [0.667, [1, 0.901, 0]],
  [0.669, [1, 0.887, 0]],
  [0.671, [1, 0.887, 0]],
  [0.673, [1, 0.872, 0]],
  [0.675, [1, 0.872, 0]],
  [0.677, [1, 0.858, 0]],
  [0.679, [1, 0.858, 0]],
  [0.681, [1, 0.843, 0]],
  [0.683, [1, 0.843, 0]],
  [0.685, [1, 0.829, 0]],
  [0.687, [1, 0.829, 0]],
  [0.689, [1, 0.814, 0]],
  [0.691, [1, 0.814, 0]],
  [0.693, [1, 0.8, 0]],
  [0.695, [1, 0.8, 0]],
  [0.697, [1, 0.785, 0]],
  [0.699, [1, 0.785, 0]],
  [0.701, [1, 0.771, 0]],
  [0.703, [1, 0.771, 0]],
  [0.705, [1, 0.756, 0]],
  [0.706, [1, 0.756, 0]],
  [0.708, [1, 0.741, 0]],
  [0.71, [1, 0.741, 0]],
  [0.712, [1, 0.727, 0]],
  [0.714, [1, 0.727, 0]],
  [0.716, [1, 0.712, 0]],
  [0.718, [1, 0.712, 0]],
  [0.72, [1, 0.698, 0]],
  [0.722, [1, 0.698, 0]],
  [0.724, [1, 0.683, 0]],
  [0.726, [1, 0.683, 0]],
  [0.728, [1, 0.669, 0]],
  [0.73, [1, 0.669, 0]],
  [0.732, [1, 0.654, 0]],
  [0.734, [1, 0.654, 0]],
  [0.736, [1, 0.64, 0]],
  [0.738, [1, 0.64, 0]],
  [0.74, [1, 0.625, 0]],
  [0.742, [1, 0.625, 0]],
  [0.744, [1, 0.611, 0]],
  [0.746, [1, 0.611, 0]],
  [0.748, [1, 0.596, 0]],
  [0.75, [1, 0.596, 0]],
  [0.751, [1, 0.582, 0]],
  [0.753, [1, 0.582, 0]],
  [0.755, [1, 0.567, 0]],
  [0.757, [1, 0.567, 0]],
  [0.759, [1, 0.553, 0]],
  [0.761, [1, 0.553, 0]],
  [0.763, [1, 0.538, 0]],
  [0.765, [1, 0.538, 0]],
  [0.767, [1, 0.524, 0]],
  [0.769, [1, 0.524, 0]],
  [0.771, [1, 0.509, 0]],
  [0.773, [1, 0.509, 0]],
  [0.775, [1, 0.495, 0]],
  [0.777, [1, 0.495, 0]],
  [0.779, [1, 0.48, 0]],
  [0.781, [1, 0.48, 0]],
  [0.783, [1, 0.466, 0]],
  [0.785, [1, 0.466, 0]],
  [0.787, [1, 0.451, 0]],
  [0.789, [1, 0.451, 0]],
  [0.791, [1, 0.436, 0]],
  [0.793, [1, 0.436, 0]],
  [0.795, [1, 0.422, 0]],
  [0.796, [1, 0.422, 0]],
  [0.798, [1, 0.407, 0]],
  [0.8, [1, 0.407, 0]],
  [0.802, [1, 0.393, 0]],
  [0.804, [1, 0.393, 0]],
  [0.806, [1, 0.378, 0]],
  [0.808, [1, 0.378, 0]],
  [0.81, [1, 0.364, 0]],
  [0.812, [1, 0.364, 0]],
  [0.814, [1, 0.349, 0]],
  [0.816, [1, 0.349, 0]],
  [0.818, [1, 0.335, 0]],
  [0.82, [1, 0.335, 0]],
  [0.822, [1, 0.32, 0]],
  [0.824, [1, 0.32, 0]],
  [0.826, [1, 0.306, 0]],
  [0.828, [1, 0.306, 0]],
  [0.83, [1, 0.291, 0]],
  [0.832, [1, 0.291, 0]],
  [0.834, [1, 0.277, 0]],
  [0.836, [1, 0.277, 0]],
  [0.838, [1, 0.262, 0]],
  [0.84, [1, 0.262, 0]],
  [0.841, [1, 0.248, 0]],
  [0.843, [1, 0.248, 0]],
  [0.845, [1, 0.233, 0]],
  [0.847, [1, 0.233, 0]],
  [0.849, [1, 0.219, 0]],
  [0.851, [1, 0.219, 0]],
  [0.853, [1, 0.204, 0]],
  [0.855, [1, 0.204, 0]],
  [0.857, [1, 0.19, 0]],
  [0.859, [1, 0.19, 0]],
  [0.861, [1, 0.175, 0]],
  [0.863, [1, 0.175, 0]],
  [0.865, [1, 0.16, 0]],
  [0.867, [1, 0.16, 0]],
  [0.869, [1, 0.146, 0]],
  [0.871, [1, 0.146, 0]],
  [0.873, [1, 0.131, 0]],
  [0.875, [1, 0.131, 0]],
  [0.877, [1, 0.117, 0]],
  [0.879, [1, 0.117, 0]],
  [0.881, [1, 0.102, 0]],
  [0.883, [1, 0.102, 0]],
  [0.885, [1, 0.088, 0]],
  [0.886, [1, 0.088, 0]],
  [0.888, [0.999, 0.073, 0]],
  [0.89, [0.999, 0.073, 0]],
  [0.892, [0.981, 0.059, 0]],
  [0.894, [0.981, 0.059, 0]],
  [0.896, [0.963, 0.044, 0]],
  [0.898, [0.963, 0.044, 0]],
  [0.9, [0.946, 0.03, 0]],
  [0.902, [0.946, 0.03, 0]],
  [0.904, [0.928, 0.015, 0]],
  [0.906, [0.928, 0.015, 0]],
  [0.908, [0.91, 1e-3, 0]],
  [0.91, [0.91, 1e-3, 0]],
  [0.912, [0.892, 0, 0]],
  [0.914, [0.892, 0, 0]],
  [0.916, [0.874, 0, 0]],
  [0.918, [0.874, 0, 0]],
  [0.92, [0.857, 0, 0]],
  [0.922, [0.857, 0, 0]],
  [0.924, [0.839, 0, 0]],
  [0.926, [0.839, 0, 0]],
  [0.928, [0.821, 0, 0]],
  [0.93, [0.821, 0, 0]],
  [0.932, [0.803, 0, 0]],
  [0.933, [0.803, 0, 0]],
  [0.935, [0.785, 0, 0]],
  [0.937, [0.785, 0, 0]],
  [0.939, [0.767, 0, 0]],
  [0.941, [0.767, 0, 0]],
  [0.943, [0.75, 0, 0]],
  [0.945, [0.75, 0, 0]],
  [0.947, [0.732, 0, 0]],
  [0.949, [0.732, 0, 0]],
  [0.951, [0.714, 0, 0]],
  [0.953, [0.714, 0, 0]],
  [0.955, [0.696, 0, 0]],
  [0.957, [0.696, 0, 0]],
  [0.959, [0.678, 0, 0]],
  [0.961, [0.678, 0, 0]],
  [0.963, [0.66, 0, 0]],
  [0.965, [0.66, 0, 0]],
  [0.967, [0.643, 0, 0]],
  [0.969, [0.643, 0, 0]],
  [0.971, [0.625, 0, 0]],
  [0.973, [0.625, 0, 0]],
  [0.975, [0.607, 0, 0]],
  [0.977, [0.607, 0, 0]],
  [0.978, [0.589, 0, 0]],
  [0.98, [0.589, 0, 0]],
  [0.982, [0.571, 0, 0]],
  [0.984, [0.571, 0, 0]],
  [0.986, [0.553, 0, 0]],
  [0.988, [0.553, 0, 0]],
  [0.99, [0.536, 0, 0]],
  [0.992, [0.536, 0, 0]],
  [0.994, [0.518, 0, 0]],
  [0.996, [0.518, 0, 0]],
  [0.998, [0.5, 0, 0]],
  [1, [0.5, 0, 0]]
], Yp = [
  [0, [0, 0, 0]],
  [2e-3, [0, 0, 0]],
  [4e-3, [0.037, 0, 0.042]],
  [6e-3, [0.037, 0, 0.042]],
  [8e-3, [0.073, 0, 0.084]],
  [0.01, [0.073, 0, 0.084]],
  [0.012, [0.11, 0, 0.125]],
  [0.014, [0.11, 0, 0.125]],
  [0.016, [0.146, 0, 0.167]],
  [0.018, [0.146, 0, 0.167]],
  [0.02, [0.183, 0, 0.209]],
  [0.022, [0.183, 0, 0.209]],
  [0.023, [0.22, 0, 0.251]],
  [0.025, [0.22, 0, 0.251]],
  [0.027, [0.256, 0, 0.293]],
  [0.029, [0.256, 0, 0.293]],
  [0.031, [0.293, 0, 0.335]],
  [0.033, [0.293, 0, 0.335]],
  [0.035, [0.329, 0, 0.376]],
  [0.037, [0.329, 0, 0.376]],
  [0.039, [0.366, 0, 0.418]],
  [0.041, [0.366, 0, 0.418]],
  [0.043, [0.403, 0, 0.46]],
  [0.045, [0.403, 0, 0.46]],
  [0.047, [0.439, 0, 0.502]],
  [0.049, [0.439, 0, 0.502]],
  [0.051, [0.468, 0, 0.535]],
  [0.053, [0.468, 0, 0.535]],
  [0.055, [0.473, 0, 0.54]],
  [0.057, [0.473, 0, 0.54]],
  [0.059, [0.478, 0, 0.545]],
  [0.061, [0.478, 0, 0.545]],
  [0.063, [0.484, 0, 0.55]],
  [0.065, [0.484, 0, 0.55]],
  [0.067, [0.489, 0, 0.556]],
  [0.068, [0.489, 0, 0.556]],
  [0.07, [0.494, 0, 0.561]],
  [0.072, [0.494, 0, 0.561]],
  [0.074, [0.499, 0, 0.566]],
  [0.076, [0.499, 0, 0.566]],
  [0.078, [0.505, 0, 0.571]],
  [0.08, [0.505, 0, 0.571]],
  [0.082, [0.51, 0, 0.576]],
  [0.084, [0.51, 0, 0.576]],
  [0.086, [0.515, 0, 0.582]],
  [0.088, [0.515, 0, 0.582]],
  [0.09, [0.52, 0, 0.587]],
  [0.092, [0.52, 0, 0.587]],
  [0.094, [0.525, 0, 0.592]],
  [0.096, [0.525, 0, 0.592]],
  [0.098, [0.531, 0, 0.597]],
  [0.1, [0.531, 0, 0.597]],
  [0.102, [0.512, 0, 0.603]],
  [0.104, [0.512, 0, 0.603]],
  [0.106, [0.471, 0, 0.608]],
  [0.108, [0.471, 0, 0.608]],
  [0.11, [0.429, 0, 0.613]],
  [0.112, [0.429, 0, 0.613]],
  [0.114, [0.387, 0, 0.618]],
  [0.115, [0.387, 0, 0.618]],
  [0.117, [0.345, 0, 0.624]],
  [0.119, [0.345, 0, 0.624]],
  [0.121, [0.303, 0, 0.629]],
  [0.123, [0.303, 0, 0.629]],
  [0.125, [0.261, 0, 0.634]],
  [0.127, [0.261, 0, 0.634]],
  [0.129, [0.22, 0, 0.639]],
  [0.131, [0.22, 0, 0.639]],
  [0.133, [0.178, 0, 0.644]],
  [0.135, [0.178, 0, 0.644]],
  [0.137, [0.136, 0, 0.65]],
  [0.139, [0.136, 0, 0.65]],
  [0.141, [0.094, 0, 0.655]],
  [0.143, [0.094, 0, 0.655]],
  [0.145, [0.052, 0, 0.66]],
  [0.147, [0.052, 0, 0.66]],
  [0.149, [0.01, 0, 0.665]],
  [0.151, [0.01, 0, 0.665]],
  [0.153, [0, 0, 0.678]],
  [0.155, [0, 0, 0.678]],
  [0.157, [0, 0, 0.694]],
  [0.159, [0, 0, 0.694]],
  [0.16, [0, 0, 0.71]],
  [0.162, [0, 0, 0.71]],
  [0.164, [0, 0, 0.726]],
  [0.166, [0, 0, 0.726]],
  [0.168, [0, 0, 0.741]],
  [0.17, [0, 0, 0.741]],
  [0.172, [0, 0, 0.757]],
  [0.174, [0, 0, 0.757]],
  [0.176, [0, 0, 0.773]],
  [0.178, [0, 0, 0.773]],
  [0.18, [0, 0, 0.788]],
  [0.182, [0, 0, 0.788]],
  [0.184, [0, 0, 0.804]],
  [0.186, [0, 0, 0.804]],
  [0.188, [0, 0, 0.82]],
  [0.19, [0, 0, 0.82]],
  [0.192, [0, 0, 0.835]],
  [0.194, [0, 0, 0.835]],
  [0.196, [0, 0, 0.851]],
  [0.198, [0, 0, 0.851]],
  [0.2, [0, 0, 0.867]],
  [0.202, [0, 0, 0.867]],
  [0.204, [0, 0.037, 0.867]],
  [0.205, [0, 0.037, 0.867]],
  [0.207, [0, 0.073, 0.867]],
  [0.209, [0, 0.073, 0.867]],
  [0.211, [0, 0.11, 0.867]],
  [0.213, [0, 0.11, 0.867]],
  [0.215, [0, 0.146, 0.867]],
  [0.217, [0, 0.146, 0.867]],
  [0.219, [0, 0.183, 0.867]],
  [0.221, [0, 0.183, 0.867]],
  [0.223, [0, 0.22, 0.867]],
  [0.225, [0, 0.22, 0.867]],
  [0.227, [0, 0.256, 0.867]],
  [0.229, [0, 0.256, 0.867]],
  [0.231, [0, 0.293, 0.867]],
  [0.233, [0, 0.293, 0.867]],
  [0.235, [0, 0.329, 0.867]],
  [0.237, [0, 0.329, 0.867]],
  [0.239, [0, 0.366, 0.867]],
  [0.241, [0, 0.366, 0.867]],
  [0.243, [0, 0.403, 0.867]],
  [0.245, [0, 0.403, 0.867]],
  [0.247, [0, 0.439, 0.867]],
  [0.249, [0, 0.439, 0.867]],
  [0.25, [0, 0.469, 0.867]],
  [0.252, [0, 0.469, 0.867]],
  [0.254, [0, 0.48, 0.867]],
  [0.256, [0, 0.48, 0.867]],
  [0.258, [0, 0.49, 0.867]],
  [0.26, [0, 0.49, 0.867]],
  [0.262, [0, 0.501, 0.867]],
  [0.264, [0, 0.501, 0.867]],
  [0.266, [0, 0.511, 0.867]],
  [0.268, [0, 0.511, 0.867]],
  [0.27, [0, 0.522, 0.867]],
  [0.272, [0, 0.522, 0.867]],
  [0.274, [0, 0.532, 0.867]],
  [0.276, [0, 0.532, 0.867]],
  [0.278, [0, 0.542, 0.867]],
  [0.28, [0, 0.542, 0.867]],
  [0.282, [0, 0.553, 0.867]],
  [0.284, [0, 0.553, 0.867]],
  [0.286, [0, 0.563, 0.867]],
  [0.288, [0, 0.563, 0.867]],
  [0.29, [0, 0.574, 0.867]],
  [0.292, [0, 0.574, 0.867]],
  [0.294, [0, 0.584, 0.867]],
  [0.295, [0, 0.584, 0.867]],
  [0.297, [0, 0.595, 0.867]],
  [0.299, [0, 0.595, 0.867]],
  [0.301, [0, 0.603, 0.859]],
  [0.303, [0, 0.603, 0.859]],
  [0.305, [0, 0.608, 0.843]],
  [0.307, [0, 0.608, 0.843]],
  [0.309, [0, 0.613, 0.827]],
  [0.311, [0, 0.613, 0.827]],
  [0.313, [0, 0.618, 0.812]],
  [0.315, [0, 0.618, 0.812]],
  [0.317, [0, 0.624, 0.796]],
  [0.319, [0, 0.624, 0.796]],
  [0.321, [0, 0.629, 0.78]],
  [0.323, [0, 0.629, 0.78]],
  [0.325, [0, 0.634, 0.765]],
  [0.327, [0, 0.634, 0.765]],
  [0.329, [0, 0.639, 0.749]],
  [0.331, [0, 0.639, 0.749]],
  [0.333, [0, 0.644, 0.733]],
  [0.335, [0, 0.644, 0.733]],
  [0.337, [0, 0.65, 0.718]],
  [0.339, [0, 0.65, 0.718]],
  [0.341, [0, 0.655, 0.702]],
  [0.342, [0, 0.655, 0.702]],
  [0.344, [0, 0.66, 0.686]],
  [0.346, [0, 0.66, 0.686]],
  [0.348, [0, 0.665, 0.671]],
  [0.35, [0, 0.665, 0.671]],
  [0.352, [0, 0.667, 0.659]],
  [0.354, [0, 0.667, 0.659]],
  [0.356, [0, 0.667, 0.648]],
  [0.358, [0, 0.667, 0.648]],
  [0.36, [0, 0.667, 0.638]],
  [0.362, [0, 0.667, 0.638]],
  [0.364, [0, 0.667, 0.627]],
  [0.366, [0, 0.667, 0.627]],
  [0.368, [0, 0.667, 0.617]],
  [0.37, [0, 0.667, 0.617]],
  [0.372, [0, 0.667, 0.607]],
  [0.374, [0, 0.667, 0.607]],
  [0.376, [0, 0.667, 0.596]],
  [0.378, [0, 0.667, 0.596]],
  [0.38, [0, 0.667, 0.586]],
  [0.382, [0, 0.667, 0.586]],
  [0.384, [0, 0.667, 0.575]],
  [0.386, [0, 0.667, 0.575]],
  [0.387, [0, 0.667, 0.565]],
  [0.389, [0, 0.667, 0.565]],
  [0.391, [0, 0.667, 0.554]],
  [0.393, [0, 0.667, 0.554]],
  [0.395, [0, 0.667, 0.544]],
  [0.397, [0, 0.667, 0.544]],
  [0.399, [0, 0.667, 0.533]],
  [0.401, [0, 0.667, 0.533]],
  [0.403, [0, 0.661, 0.491]],
  [0.405, [0, 0.661, 0.491]],
  [0.407, [0, 0.656, 0.45]],
  [0.409, [0, 0.656, 0.45]],
  [0.411, [0, 0.651, 0.408]],
  [0.413, [0, 0.651, 0.408]],
  [0.415, [0, 0.646, 0.366]],
  [0.417, [0, 0.646, 0.366]],
  [0.419, [0, 0.641, 0.324]],
  [0.421, [0, 0.641, 0.324]],
  [0.423, [0, 0.635, 0.282]],
  [0.425, [0, 0.635, 0.282]],
  [0.427, [0, 0.63, 0.241]],
  [0.429, [0, 0.63, 0.241]],
  [0.431, [0, 0.625, 0.199]],
  [0.432, [0, 0.625, 0.199]],
  [0.434, [0, 0.62, 0.157]],
  [0.436, [0, 0.62, 0.157]],
  [0.438, [0, 0.614, 0.115]],
  [0.44, [0, 0.614, 0.115]],
  [0.442, [0, 0.609, 0.073]],
  [0.444, [0, 0.609, 0.073]],
  [0.446, [0, 0.604, 0.031]],
  [0.448, [0, 0.604, 0.031]],
  [0.45, [0, 0.603, 0]],
  [0.452, [0, 0.603, 0]],
  [0.454, [0, 0.613, 0]],
  [0.456, [0, 0.613, 0]],
  [0.458, [0, 0.624, 0]],
  [0.46, [0, 0.624, 0]],
  [0.462, [0, 0.634, 0]],
  [0.464, [0, 0.634, 0]],
  [0.466, [0, 0.644, 0]],
  [0.468, [0, 0.644, 0]],
  [0.47, [0, 0.655, 0]],
  [0.472, [0, 0.655, 0]],
  [0.474, [0, 0.665, 0]],
  [0.476, [0, 0.665, 0]],
  [0.477, [0, 0.676, 0]],
  [0.479, [0, 0.676, 0]],
  [0.481, [0, 0.686, 0]],
  [0.483, [0, 0.686, 0]],
  [0.485, [0, 0.697, 0]],
  [0.487, [0, 0.697, 0]],
  [0.489, [0, 0.707, 0]],
  [0.491, [0, 0.707, 0]],
  [0.493, [0, 0.718, 0]],
  [0.495, [0, 0.718, 0]],
  [0.497, [0, 0.728, 0]],
  [0.499, [0, 0.728, 0]],
  [0.501, [0, 0.739, 0]],
  [0.503, [0, 0.739, 0]],
  [0.505, [0, 0.749, 0]],
  [0.507, [0, 0.749, 0]],
  [0.509, [0, 0.759, 0]],
  [0.511, [0, 0.759, 0]],
  [0.513, [0, 0.77, 0]],
  [0.515, [0, 0.77, 0]],
  [0.517, [0, 0.78, 0]],
  [0.519, [0, 0.78, 0]],
  [0.521, [0, 0.791, 0]],
  [0.523, [0, 0.791, 0]],
  [0.524, [0, 0.801, 0]],
  [0.526, [0, 0.801, 0]],
  [0.528, [0, 0.812, 0]],
  [0.53, [0, 0.812, 0]],
  [0.532, [0, 0.822, 0]],
  [0.534, [0, 0.822, 0]],
  [0.536, [0, 0.833, 0]],
  [0.538, [0, 0.833, 0]],
  [0.54, [0, 0.843, 0]],
  [0.542, [0, 0.843, 0]],
  [0.544, [0, 0.854, 0]],
  [0.546, [0, 0.854, 0]],
  [0.548, [0, 0.864, 0]],
  [0.55, [0, 0.864, 0]],
  [0.552, [0, 0.875, 0]],
  [0.554, [0, 0.875, 0]],
  [0.556, [0, 0.885, 0]],
  [0.558, [0, 0.885, 0]],
  [0.56, [0, 0.895, 0]],
  [0.562, [0, 0.895, 0]],
  [0.564, [0, 0.906, 0]],
  [0.566, [0, 0.906, 0]],
  [0.568, [0, 0.916, 0]],
  [0.569, [0, 0.916, 0]],
  [0.571, [0, 0.927, 0]],
  [0.573, [0, 0.927, 0]],
  [0.575, [0, 0.937, 0]],
  [0.577, [0, 0.937, 0]],
  [0.579, [0, 0.948, 0]],
  [0.581, [0, 0.948, 0]],
  [0.583, [0, 0.958, 0]],
  [0.585, [0, 0.958, 0]],
  [0.587, [0, 0.969, 0]],
  [0.589, [0, 0.969, 0]],
  [0.591, [0, 0.979, 0]],
  [0.593, [0, 0.979, 0]],
  [0.595, [0, 0.99, 0]],
  [0.597, [0, 0.99, 0]],
  [0.599, [0, 1, 0]],
  [0.601, [0, 1, 0]],
  [0.603, [0.058, 1, 0]],
  [0.605, [0.058, 1, 0]],
  [0.607, [0.115, 1, 0]],
  [0.609, [0.115, 1, 0]],
  [0.611, [0.173, 1, 0]],
  [0.613, [0.173, 1, 0]],
  [0.614, [0.23, 1, 0]],
  [0.616, [0.23, 1, 0]],
  [0.618, [0.288, 1, 0]],
  [0.62, [0.288, 1, 0]],
  [0.622, [0.345, 1, 0]],
  [0.624, [0.345, 1, 0]],
  [0.626, [0.403, 1, 0]],
  [0.628, [0.403, 1, 0]],
  [0.63, [0.46, 1, 0]],
  [0.632, [0.46, 1, 0]],
  [0.634, [0.518, 1, 0]],
  [0.636, [0.518, 1, 0]],
  [0.638, [0.575, 1, 0]],
  [0.64, [0.575, 1, 0]],
  [0.642, [0.633, 1, 0]],
  [0.644, [0.633, 1, 0]],
  [0.646, [0.69, 1, 0]],
  [0.648, [0.69, 1, 0]],
  [0.65, [0.737, 0.999, 0]],
  [0.652, [0.737, 0.999, 0]],
  [0.654, [0.753, 0.993, 0]],
  [0.656, [0.753, 0.993, 0]],
  [0.658, [0.769, 0.988, 0]],
  [0.659, [0.769, 0.988, 0]],
  [0.661, [0.784, 0.983, 0]],
  [0.663, [0.784, 0.983, 0]],
  [0.665, [0.8, 0.978, 0]],
  [0.667, [0.8, 0.978, 0]],
  [0.669, [0.816, 0.973, 0]],
  [0.671, [0.816, 0.973, 0]],
  [0.673, [0.831, 0.967, 0]],
  [0.675, [0.831, 0.967, 0]],
  [0.677, [0.847, 0.962, 0]],
  [0.679, [0.847, 0.962, 0]],
  [0.681, [0.863, 0.957, 0]],
  [0.683, [0.863, 0.957, 0]],
  [0.685, [0.878, 0.952, 0]],
  [0.687, [0.878, 0.952, 0]],
  [0.689, [0.894, 0.946, 0]],
  [0.691, [0.894, 0.946, 0]],
  [0.693, [0.91, 0.941, 0]],
  [0.695, [0.91, 0.941, 0]],
  [0.697, [0.925, 0.936, 0]],
  [0.699, [0.925, 0.936, 0]],
  [0.701, [0.936, 0.928, 0]],
  [0.703, [0.936, 0.928, 0]],
  [0.705, [0.941, 0.918, 0]],
  [0.706, [0.941, 0.918, 0]],
  [0.708, [0.946, 0.907, 0]],
  [0.71, [0.946, 0.907, 0]],
  [0.712, [0.952, 0.897, 0]],
  [0.714, [0.952, 0.897, 0]],
  [0.716, [0.957, 0.886, 0]],
  [0.718, [0.957, 0.886, 0]],
  [0.72, [0.962, 0.876, 0]],
  [0.722, [0.962, 0.876, 0]],
  [0.724, [0.967, 0.865, 0]],
  [0.726, [0.967, 0.865, 0]],
  [0.728, [0.973, 0.855, 0]],
  [0.73, [0.973, 0.855, 0]],
  [0.732, [0.978, 0.844, 0]],
  [0.734, [0.978, 0.844, 0]],
  [0.736, [0.983, 0.834, 0]],
  [0.738, [0.983, 0.834, 0]],
  [0.74, [0.988, 0.824, 0]],
  [0.742, [0.988, 0.824, 0]],
  [0.744, [0.993, 0.813, 0]],
  [0.746, [0.993, 0.813, 0]],
  [0.748, [0.999, 0.803, 0]],
  [0.75, [0.999, 0.803, 0]],
  [0.751, [1, 0.788, 0]],
  [0.753, [1, 0.788, 0]],
  [0.755, [1, 0.773, 0]],
  [0.757, [1, 0.773, 0]],
  [0.759, [1, 0.757, 0]],
  [0.761, [1, 0.757, 0]],
  [0.763, [1, 0.741, 0]],
  [0.765, [1, 0.741, 0]],
  [0.767, [1, 0.725, 0]],
  [0.769, [1, 0.725, 0]],
  [0.771, [1, 0.71, 0]],
  [0.773, [1, 0.71, 0]],
  [0.775, [1, 0.694, 0]],
  [0.777, [1, 0.694, 0]],
  [0.779, [1, 0.678, 0]],
  [0.781, [1, 0.678, 0]],
  [0.783, [1, 0.663, 0]],
  [0.785, [1, 0.663, 0]],
  [0.787, [1, 0.647, 0]],
  [0.789, [1, 0.647, 0]],
  [0.791, [1, 0.631, 0]],
  [0.793, [1, 0.631, 0]],
  [0.795, [1, 0.616, 0]],
  [0.796, [1, 0.616, 0]],
  [0.798, [1, 0.6, 0]],
  [0.8, [1, 0.6, 0]],
  [0.802, [1, 0.553, 0]],
  [0.804, [1, 0.553, 0]],
  [0.806, [1, 0.506, 0]],
  [0.808, [1, 0.506, 0]],
  [0.81, [1, 0.459, 0]],
  [0.812, [1, 0.459, 0]],
  [0.814, [1, 0.412, 0]],
  [0.816, [1, 0.412, 0]],
  [0.818, [1, 0.365, 0]],
  [0.82, [1, 0.365, 0]],
  [0.822, [1, 0.318, 0]],
  [0.824, [1, 0.318, 0]],
  [0.826, [1, 0.271, 0]],
  [0.828, [1, 0.271, 0]],
  [0.83, [1, 0.224, 0]],
  [0.832, [1, 0.224, 0]],
  [0.834, [1, 0.176, 0]],
  [0.836, [1, 0.176, 0]],
  [0.838, [1, 0.129, 0]],
  [0.84, [1, 0.129, 0]],
  [0.841, [1, 0.082, 0]],
  [0.843, [1, 0.082, 0]],
  [0.845, [1, 0.035, 0]],
  [0.847, [1, 0.035, 0]],
  [0.849, [0.997, 0, 0]],
  [0.851, [0.997, 0, 0]],
  [0.853, [0.987, 0, 0]],
  [0.855, [0.987, 0, 0]],
  [0.857, [0.976, 0, 0]],
  [0.859, [0.976, 0, 0]],
  [0.861, [0.966, 0, 0]],
  [0.863, [0.966, 0, 0]],
  [0.865, [0.956, 0, 0]],
  [0.867, [0.956, 0, 0]],
  [0.869, [0.945, 0, 0]],
  [0.871, [0.945, 0, 0]],
  [0.873, [0.935, 0, 0]],
  [0.875, [0.935, 0, 0]],
  [0.877, [0.924, 0, 0]],
  [0.879, [0.924, 0, 0]],
  [0.881, [0.914, 0, 0]],
  [0.883, [0.914, 0, 0]],
  [0.885, [0.903, 0, 0]],
  [0.886, [0.903, 0, 0]],
  [0.888, [0.893, 0, 0]],
  [0.89, [0.893, 0, 0]],
  [0.892, [0.882, 0, 0]],
  [0.894, [0.882, 0, 0]],
  [0.896, [0.872, 0, 0]],
  [0.898, [0.872, 0, 0]],
  [0.9, [0.864, 0, 0]],
  [0.902, [0.864, 0, 0]],
  [0.904, [0.859, 0, 0]],
  [0.906, [0.859, 0, 0]],
  [0.908, [0.854, 0, 0]],
  [0.91, [0.854, 0, 0]],
  [0.912, [0.848, 0, 0]],
  [0.914, [0.848, 0, 0]],
  [0.916, [0.843, 0, 0]],
  [0.918, [0.843, 0, 0]],
  [0.92, [0.838, 0, 0]],
  [0.922, [0.838, 0, 0]],
  [0.924, [0.833, 0, 0]],
  [0.926, [0.833, 0, 0]],
  [0.928, [0.827, 0, 0]],
  [0.93, [0.827, 0, 0]],
  [0.932, [0.822, 0, 0]],
  [0.933, [0.822, 0, 0]],
  [0.935, [0.817, 0, 0]],
  [0.937, [0.817, 0, 0]],
  [0.939, [0.812, 0, 0]],
  [0.941, [0.812, 0, 0]],
  [0.943, [0.807, 0, 0]],
  [0.945, [0.807, 0, 0]],
  [0.947, [0.801, 0, 0]],
  [0.949, [0.801, 0, 0]],
  [0.951, [0.8, 0.047, 0.047]],
  [0.953, [0.8, 0.047, 0.047]],
  [0.955, [0.8, 0.11, 0.11]],
  [0.957, [0.8, 0.11, 0.11]],
  [0.959, [0.8, 0.173, 0.173]],
  [0.961, [0.8, 0.173, 0.173]],
  [0.963, [0.8, 0.235, 0.235]],
  [0.965, [0.8, 0.235, 0.235]],
  [0.967, [0.8, 0.298, 0.298]],
  [0.969, [0.8, 0.298, 0.298]],
  [0.971, [0.8, 0.361, 0.361]],
  [0.973, [0.8, 0.361, 0.361]],
  [0.975, [0.8, 0.424, 0.424]],
  [0.977, [0.8, 0.424, 0.424]],
  [0.978, [0.8, 0.486, 0.486]],
  [0.98, [0.8, 0.486, 0.486]],
  [0.982, [0.8, 0.549, 0.549]],
  [0.984, [0.8, 0.549, 0.549]],
  [0.986, [0.8, 0.612, 0.612]],
  [0.988, [0.8, 0.612, 0.612]],
  [0.99, [0.8, 0.675, 0.675]],
  [0.992, [0.8, 0.675, 0.675]],
  [0.994, [0.8, 0.737, 0.737]],
  [0.996, [0.8, 0.737, 0.737]],
  [0.998, [0.8, 0.8, 0.8]],
  [1, [0.8, 0.8, 0.8]]
], Zp = [
  [0, [0, 0.5, 0]],
  [2e-3, [0, 0.5, 0]],
  [4e-3, [0, 0.494, 4e-3]],
  [6e-3, [0, 0.494, 4e-3]],
  [8e-3, [0, 0.488, 8e-3]],
  [0.01, [0, 0.488, 8e-3]],
  [0.012, [0, 0.482, 0.012]],
  [0.014, [0, 0.482, 0.012]],
  [0.016, [0, 0.476, 0.016]],
  [0.018, [0, 0.476, 0.016]],
  [0.02, [0, 0.471, 0.02]],
  [0.022, [0, 0.471, 0.02]],
  [0.023, [0, 0.465, 0.024]],
  [0.025, [0, 0.465, 0.024]],
  [0.027, [0, 0.459, 0.027]],
  [0.029, [0, 0.459, 0.027]],
  [0.031, [0, 0.453, 0.031]],
  [0.033, [0, 0.453, 0.031]],
  [0.035, [0, 0.447, 0.035]],
  [0.037, [0, 0.447, 0.035]],
  [0.039, [0, 0.441, 0.039]],
  [0.041, [0, 0.441, 0.039]],
  [0.043, [0, 0.435, 0.043]],
  [0.045, [0, 0.435, 0.043]],
  [0.047, [0, 0.429, 0.047]],
  [0.049, [0, 0.429, 0.047]],
  [0.051, [0, 0.424, 0.051]],
  [0.053, [0, 0.424, 0.051]],
  [0.055, [0, 0.418, 0.055]],
  [0.057, [0, 0.418, 0.055]],
  [0.059, [0, 0.412, 0.059]],
  [0.061, [0, 0.412, 0.059]],
  [0.063, [0, 0.406, 0.063]],
  [0.065, [0, 0.406, 0.063]],
  [0.067, [0, 0.4, 0.067]],
  [0.068, [0, 0.4, 0.067]],
  [0.07, [0, 0.394, 0.071]],
  [0.072, [0, 0.394, 0.071]],
  [0.074, [0, 0.388, 0.075]],
  [0.076, [0, 0.388, 0.075]],
  [0.078, [0, 0.382, 0.078]],
  [0.08, [0, 0.382, 0.078]],
  [0.082, [0, 0.376, 0.082]],
  [0.084, [0, 0.376, 0.082]],
  [0.086, [0, 0.371, 0.086]],
  [0.088, [0, 0.371, 0.086]],
  [0.09, [0, 0.365, 0.09]],
  [0.092, [0, 0.365, 0.09]],
  [0.094, [0, 0.359, 0.094]],
  [0.096, [0, 0.359, 0.094]],
  [0.098, [0, 0.353, 0.098]],
  [0.1, [0, 0.353, 0.098]],
  [0.102, [0, 0.347, 0.102]],
  [0.104, [0, 0.347, 0.102]],
  [0.106, [0, 0.341, 0.106]],
  [0.108, [0, 0.341, 0.106]],
  [0.11, [0, 0.335, 0.11]],
  [0.112, [0, 0.335, 0.11]],
  [0.114, [0, 0.329, 0.114]],
  [0.115, [0, 0.329, 0.114]],
  [0.117, [0, 0.324, 0.118]],
  [0.119, [0, 0.324, 0.118]],
  [0.121, [0, 0.318, 0.122]],
  [0.123, [0, 0.318, 0.122]],
  [0.125, [0, 0.312, 0.125]],
  [0.127, [0, 0.312, 0.125]],
  [0.129, [0, 0.306, 0.129]],
  [0.131, [0, 0.306, 0.129]],
  [0.133, [0, 0.3, 0.133]],
  [0.135, [0, 0.3, 0.133]],
  [0.137, [0, 0.294, 0.137]],
  [0.139, [0, 0.294, 0.137]],
  [0.141, [0, 0.288, 0.141]],
  [0.143, [0, 0.288, 0.141]],
  [0.145, [0, 0.282, 0.145]],
  [0.147, [0, 0.282, 0.145]],
  [0.149, [0, 0.276, 0.149]],
  [0.151, [0, 0.276, 0.149]],
  [0.153, [0, 0.271, 0.153]],
  [0.155, [0, 0.271, 0.153]],
  [0.157, [0, 0.265, 0.157]],
  [0.159, [0, 0.265, 0.157]],
  [0.16, [0, 0.259, 0.161]],
  [0.162, [0, 0.259, 0.161]],
  [0.164, [0, 0.253, 0.165]],
  [0.166, [0, 0.253, 0.165]],
  [0.168, [0, 0.247, 0.169]],
  [0.17, [0, 0.247, 0.169]],
  [0.172, [0, 0.241, 0.173]],
  [0.174, [0, 0.241, 0.173]],
  [0.176, [0, 0.235, 0.176]],
  [0.178, [0, 0.235, 0.176]],
  [0.18, [0, 0.229, 0.18]],
  [0.182, [0, 0.229, 0.18]],
  [0.184, [0, 0.224, 0.184]],
  [0.186, [0, 0.224, 0.184]],
  [0.188, [0, 0.218, 0.188]],
  [0.19, [0, 0.218, 0.188]],
  [0.192, [0, 0.212, 0.192]],
  [0.194, [0, 0.212, 0.192]],
  [0.196, [0, 0.206, 0.196]],
  [0.198, [0, 0.206, 0.196]],
  [0.2, [0, 0.2, 0.2]],
  [0.202, [0, 0.2, 0.2]],
  [0.204, [0, 0.194, 0.204]],
  [0.205, [0, 0.194, 0.204]],
  [0.207, [0, 0.188, 0.208]],
  [0.209, [0, 0.188, 0.208]],
  [0.211, [0, 0.182, 0.212]],
  [0.213, [0, 0.182, 0.212]],
  [0.215, [0, 0.176, 0.216]],
  [0.217, [0, 0.176, 0.216]],
  [0.219, [0, 0.171, 0.22]],
  [0.221, [0, 0.171, 0.22]],
  [0.223, [0, 0.165, 0.224]],
  [0.225, [0, 0.165, 0.224]],
  [0.227, [0, 0.159, 0.227]],
  [0.229, [0, 0.159, 0.227]],
  [0.231, [0, 0.153, 0.231]],
  [0.233, [0, 0.153, 0.231]],
  [0.235, [0, 0.147, 0.235]],
  [0.237, [0, 0.147, 0.235]],
  [0.239, [0, 0.141, 0.239]],
  [0.241, [0, 0.141, 0.239]],
  [0.243, [0, 0.135, 0.243]],
  [0.245, [0, 0.135, 0.243]],
  [0.247, [0, 0.129, 0.247]],
  [0.249, [0, 0.129, 0.247]],
  [0.25, [0, 0.124, 0.251]],
  [0.252, [0, 0.124, 0.251]],
  [0.254, [0, 0.118, 0.255]],
  [0.256, [0, 0.118, 0.255]],
  [0.258, [0, 0.112, 0.259]],
  [0.26, [0, 0.112, 0.259]],
  [0.262, [0, 0.106, 0.263]],
  [0.264, [0, 0.106, 0.263]],
  [0.266, [0, 0.1, 0.267]],
  [0.268, [0, 0.1, 0.267]],
  [0.27, [0, 0.094, 0.271]],
  [0.272, [0, 0.094, 0.271]],
  [0.274, [0, 0.088, 0.275]],
  [0.276, [0, 0.088, 0.275]],
  [0.278, [0, 0.082, 0.278]],
  [0.28, [0, 0.082, 0.278]],
  [0.282, [0, 0.076, 0.282]],
  [0.284, [0, 0.076, 0.282]],
  [0.286, [0, 0.071, 0.286]],
  [0.288, [0, 0.071, 0.286]],
  [0.29, [0, 0.065, 0.29]],
  [0.292, [0, 0.065, 0.29]],
  [0.294, [0, 0.059, 0.294]],
  [0.295, [0, 0.059, 0.294]],
  [0.297, [0, 0.053, 0.298]],
  [0.299, [0, 0.053, 0.298]],
  [0.301, [0, 0.047, 0.302]],
  [0.303, [0, 0.047, 0.302]],
  [0.305, [0, 0.041, 0.306]],
  [0.307, [0, 0.041, 0.306]],
  [0.309, [0, 0.035, 0.31]],
  [0.311, [0, 0.035, 0.31]],
  [0.313, [0, 0.029, 0.314]],
  [0.315, [0, 0.029, 0.314]],
  [0.317, [0, 0.024, 0.318]],
  [0.319, [0, 0.024, 0.318]],
  [0.321, [0, 0.018, 0.322]],
  [0.323, [0, 0.018, 0.322]],
  [0.325, [0, 0.012, 0.325]],
  [0.327, [0, 0.012, 0.325]],
  [0.329, [0, 6e-3, 0.329]],
  [0.331, [0, 6e-3, 0.329]],
  [0.333, [0, 0, 0.333]],
  [0.335, [0, 0, 0.333]],
  [0.337, [0, 6e-3, 0.337]],
  [0.339, [0, 6e-3, 0.337]],
  [0.341, [0, 0.012, 0.341]],
  [0.342, [0, 0.012, 0.341]],
  [0.344, [0, 0.018, 0.345]],
  [0.346, [0, 0.018, 0.345]],
  [0.348, [0, 0.024, 0.349]],
  [0.35, [0, 0.024, 0.349]],
  [0.352, [0, 0.029, 0.353]],
  [0.354, [0, 0.029, 0.353]],
  [0.356, [0, 0.035, 0.357]],
  [0.358, [0, 0.035, 0.357]],
  [0.36, [0, 0.041, 0.361]],
  [0.362, [0, 0.041, 0.361]],
  [0.364, [0, 0.047, 0.365]],
  [0.366, [0, 0.047, 0.365]],
  [0.368, [0, 0.053, 0.369]],
  [0.37, [0, 0.053, 0.369]],
  [0.372, [0, 0.059, 0.373]],
  [0.374, [0, 0.059, 0.373]],
  [0.376, [0, 0.065, 0.376]],
  [0.378, [0, 0.065, 0.376]],
  [0.38, [0, 0.071, 0.38]],
  [0.382, [0, 0.071, 0.38]],
  [0.384, [0, 0.076, 0.384]],
  [0.386, [0, 0.076, 0.384]],
  [0.387, [0, 0.082, 0.388]],
  [0.389, [0, 0.082, 0.388]],
  [0.391, [0, 0.088, 0.392]],
  [0.393, [0, 0.088, 0.392]],
  [0.395, [0, 0.094, 0.396]],
  [0.397, [0, 0.094, 0.396]],
  [0.399, [0, 0.1, 0.4]],
  [0.401, [0, 0.1, 0.4]],
  [0.403, [0, 0.106, 0.404]],
  [0.405, [0, 0.106, 0.404]],
  [0.407, [0, 0.112, 0.408]],
  [0.409, [0, 0.112, 0.408]],
  [0.411, [0, 0.118, 0.412]],
  [0.413, [0, 0.118, 0.412]],
  [0.415, [0, 0.124, 0.416]],
  [0.417, [0, 0.124, 0.416]],
  [0.419, [0, 0.129, 0.42]],
  [0.421, [0, 0.129, 0.42]],
  [0.423, [0, 0.135, 0.424]],
  [0.425, [0, 0.135, 0.424]],
  [0.427, [0, 0.141, 0.427]],
  [0.429, [0, 0.141, 0.427]],
  [0.431, [0, 0.147, 0.431]],
  [0.432, [0, 0.147, 0.431]],
  [0.434, [0, 0.153, 0.435]],
  [0.436, [0, 0.153, 0.435]],
  [0.438, [0, 0.159, 0.439]],
  [0.44, [0, 0.159, 0.439]],
  [0.442, [0, 0.165, 0.443]],
  [0.444, [0, 0.165, 0.443]],
  [0.446, [0, 0.171, 0.447]],
  [0.448, [0, 0.171, 0.447]],
  [0.45, [0, 0.176, 0.451]],
  [0.452, [0, 0.176, 0.451]],
  [0.454, [0, 0.182, 0.455]],
  [0.456, [0, 0.182, 0.455]],
  [0.458, [0, 0.188, 0.459]],
  [0.46, [0, 0.188, 0.459]],
  [0.462, [0, 0.194, 0.463]],
  [0.464, [0, 0.194, 0.463]],
  [0.466, [0, 0.2, 0.467]],
  [0.468, [0, 0.2, 0.467]],
  [0.47, [0, 0.206, 0.471]],
  [0.472, [0, 0.206, 0.471]],
  [0.474, [0, 0.212, 0.475]],
  [0.476, [0, 0.212, 0.475]],
  [0.477, [0, 0.218, 0.478]],
  [0.479, [0, 0.218, 0.478]],
  [0.481, [0, 0.224, 0.482]],
  [0.483, [0, 0.224, 0.482]],
  [0.485, [0, 0.229, 0.486]],
  [0.487, [0, 0.229, 0.486]],
  [0.489, [0, 0.235, 0.49]],
  [0.491, [0, 0.235, 0.49]],
  [0.493, [0, 0.241, 0.494]],
  [0.495, [0, 0.241, 0.494]],
  [0.497, [0, 0.247, 0.498]],
  [0.499, [0, 0.247, 0.498]],
  [0.501, [0, 0.253, 0.502]],
  [0.503, [0, 0.253, 0.502]],
  [0.505, [0, 0.259, 0.506]],
  [0.507, [0, 0.259, 0.506]],
  [0.509, [0, 0.265, 0.51]],
  [0.511, [0, 0.265, 0.51]],
  [0.513, [0, 0.271, 0.514]],
  [0.515, [0, 0.271, 0.514]],
  [0.517, [0, 0.276, 0.518]],
  [0.519, [0, 0.276, 0.518]],
  [0.521, [0, 0.282, 0.522]],
  [0.523, [0, 0.282, 0.522]],
  [0.524, [0, 0.288, 0.525]],
  [0.526, [0, 0.288, 0.525]],
  [0.528, [0, 0.294, 0.529]],
  [0.53, [0, 0.294, 0.529]],
  [0.532, [0, 0.3, 0.533]],
  [0.534, [0, 0.3, 0.533]],
  [0.536, [0, 0.306, 0.537]],
  [0.538, [0, 0.306, 0.537]],
  [0.54, [0, 0.312, 0.541]],
  [0.542, [0, 0.312, 0.541]],
  [0.544, [0, 0.318, 0.545]],
  [0.546, [0, 0.318, 0.545]],
  [0.548, [0, 0.324, 0.549]],
  [0.55, [0, 0.324, 0.549]],
  [0.552, [0, 0.329, 0.553]],
  [0.554, [0, 0.329, 0.553]],
  [0.556, [0, 0.335, 0.557]],
  [0.558, [0, 0.335, 0.557]],
  [0.56, [0, 0.341, 0.561]],
  [0.562, [0, 0.341, 0.561]],
  [0.564, [0, 0.347, 0.565]],
  [0.566, [0, 0.347, 0.565]],
  [0.568, [0, 0.353, 0.569]],
  [0.569, [0, 0.353, 0.569]],
  [0.571, [0, 0.359, 0.573]],
  [0.573, [0, 0.359, 0.573]],
  [0.575, [0, 0.365, 0.576]],
  [0.577, [0, 0.365, 0.576]],
  [0.579, [0, 0.371, 0.58]],
  [0.581, [0, 0.371, 0.58]],
  [0.583, [0, 0.376, 0.584]],
  [0.585, [0, 0.376, 0.584]],
  [0.587, [0, 0.382, 0.588]],
  [0.589, [0, 0.382, 0.588]],
  [0.591, [0, 0.388, 0.592]],
  [0.593, [0, 0.388, 0.592]],
  [0.595, [0, 0.394, 0.596]],
  [0.597, [0, 0.394, 0.596]],
  [0.599, [0, 0.4, 0.6]],
  [0.601, [0, 0.4, 0.6]],
  [0.603, [0, 0.406, 0.604]],
  [0.605, [0, 0.406, 0.604]],
  [0.607, [0, 0.412, 0.608]],
  [0.609, [0, 0.412, 0.608]],
  [0.611, [0, 0.418, 0.612]],
  [0.613, [0, 0.418, 0.612]],
  [0.614, [0, 0.424, 0.616]],
  [0.616, [0, 0.424, 0.616]],
  [0.618, [0, 0.429, 0.62]],
  [0.62, [0, 0.429, 0.62]],
  [0.622, [0, 0.435, 0.624]],
  [0.624, [0, 0.435, 0.624]],
  [0.626, [0, 0.441, 0.627]],
  [0.628, [0, 0.441, 0.627]],
  [0.63, [0, 0.447, 0.631]],
  [0.632, [0, 0.447, 0.631]],
  [0.634, [0, 0.453, 0.635]],
  [0.636, [0, 0.453, 0.635]],
  [0.638, [0, 0.459, 0.639]],
  [0.64, [0, 0.459, 0.639]],
  [0.642, [0, 0.465, 0.643]],
  [0.644, [0, 0.465, 0.643]],
  [0.646, [0, 0.471, 0.647]],
  [0.648, [0, 0.471, 0.647]],
  [0.65, [0, 0.476, 0.651]],
  [0.652, [0, 0.476, 0.651]],
  [0.654, [0, 0.482, 0.655]],
  [0.656, [0, 0.482, 0.655]],
  [0.658, [0, 0.488, 0.659]],
  [0.659, [0, 0.488, 0.659]],
  [0.661, [0, 0.494, 0.663]],
  [0.663, [0, 0.494, 0.663]],
  [0.665, [0, 0.5, 0.667]],
  [0.667, [0, 0.5, 0.667]],
  [0.669, [0.012, 0.506, 0.671]],
  [0.671, [0.012, 0.506, 0.671]],
  [0.673, [0.024, 0.512, 0.675]],
  [0.675, [0.024, 0.512, 0.675]],
  [0.677, [0.035, 0.518, 0.678]],
  [0.679, [0.035, 0.518, 0.678]],
  [0.681, [0.047, 0.524, 0.682]],
  [0.683, [0.047, 0.524, 0.682]],
  [0.685, [0.059, 0.529, 0.686]],
  [0.687, [0.059, 0.529, 0.686]],
  [0.689, [0.071, 0.535, 0.69]],
  [0.691, [0.071, 0.535, 0.69]],
  [0.693, [0.082, 0.541, 0.694]],
  [0.695, [0.082, 0.541, 0.694]],
  [0.697, [0.094, 0.547, 0.698]],
  [0.699, [0.094, 0.547, 0.698]],
  [0.701, [0.106, 0.553, 0.702]],
  [0.703, [0.106, 0.553, 0.702]],
  [0.705, [0.118, 0.559, 0.706]],
  [0.706, [0.118, 0.559, 0.706]],
  [0.708, [0.129, 0.565, 0.71]],
  [0.71, [0.129, 0.565, 0.71]],
  [0.712, [0.141, 0.571, 0.714]],
  [0.714, [0.141, 0.571, 0.714]],
  [0.716, [0.153, 0.576, 0.718]],
  [0.718, [0.153, 0.576, 0.718]],
  [0.72, [0.165, 0.582, 0.722]],
  [0.722, [0.165, 0.582, 0.722]],
  [0.724, [0.176, 0.588, 0.725]],
  [0.726, [0.176, 0.588, 0.725]],
  [0.728, [0.188, 0.594, 0.729]],
  [0.73, [0.188, 0.594, 0.729]],
  [0.732, [0.2, 0.6, 0.733]],
  [0.734, [0.2, 0.6, 0.733]],
  [0.736, [0.212, 0.606, 0.737]],
  [0.738, [0.212, 0.606, 0.737]],
  [0.74, [0.224, 0.612, 0.741]],
  [0.742, [0.224, 0.612, 0.741]],
  [0.744, [0.235, 0.618, 0.745]],
  [0.746, [0.235, 0.618, 0.745]],
  [0.748, [0.247, 0.624, 0.749]],
  [0.75, [0.247, 0.624, 0.749]],
  [0.751, [0.259, 0.629, 0.753]],
  [0.753, [0.259, 0.629, 0.753]],
  [0.755, [0.271, 0.635, 0.757]],
  [0.757, [0.271, 0.635, 0.757]],
  [0.759, [0.282, 0.641, 0.761]],
  [0.761, [0.282, 0.641, 0.761]],
  [0.763, [0.294, 0.647, 0.765]],
  [0.765, [0.294, 0.647, 0.765]],
  [0.767, [0.306, 0.653, 0.769]],
  [0.769, [0.306, 0.653, 0.769]],
  [0.771, [0.318, 0.659, 0.773]],
  [0.773, [0.318, 0.659, 0.773]],
  [0.775, [0.329, 0.665, 0.776]],
  [0.777, [0.329, 0.665, 0.776]],
  [0.779, [0.341, 0.671, 0.78]],
  [0.781, [0.341, 0.671, 0.78]],
  [0.783, [0.353, 0.676, 0.784]],
  [0.785, [0.353, 0.676, 0.784]],
  [0.787, [0.365, 0.682, 0.788]],
  [0.789, [0.365, 0.682, 0.788]],
  [0.791, [0.376, 0.688, 0.792]],
  [0.793, [0.376, 0.688, 0.792]],
  [0.795, [0.388, 0.694, 0.796]],
  [0.796, [0.388, 0.694, 0.796]],
  [0.798, [0.4, 0.7, 0.8]],
  [0.8, [0.4, 0.7, 0.8]],
  [0.802, [0.412, 0.706, 0.804]],
  [0.804, [0.412, 0.706, 0.804]],
  [0.806, [0.424, 0.712, 0.808]],
  [0.808, [0.424, 0.712, 0.808]],
  [0.81, [0.435, 0.718, 0.812]],
  [0.812, [0.435, 0.718, 0.812]],
  [0.814, [0.447, 0.724, 0.816]],
  [0.816, [0.447, 0.724, 0.816]],
  [0.818, [0.459, 0.729, 0.82]],
  [0.82, [0.459, 0.729, 0.82]],
  [0.822, [0.471, 0.735, 0.824]],
  [0.824, [0.471, 0.735, 0.824]],
  [0.826, [0.482, 0.741, 0.827]],
  [0.828, [0.482, 0.741, 0.827]],
  [0.83, [0.494, 0.747, 0.831]],
  [0.832, [0.494, 0.747, 0.831]],
  [0.834, [0.506, 0.753, 0.835]],
  [0.836, [0.506, 0.753, 0.835]],
  [0.838, [0.518, 0.759, 0.839]],
  [0.84, [0.518, 0.759, 0.839]],
  [0.841, [0.529, 0.765, 0.843]],
  [0.843, [0.529, 0.765, 0.843]],
  [0.845, [0.541, 0.771, 0.847]],
  [0.847, [0.541, 0.771, 0.847]],
  [0.849, [0.553, 0.776, 0.851]],
  [0.851, [0.553, 0.776, 0.851]],
  [0.853, [0.565, 0.782, 0.855]],
  [0.855, [0.565, 0.782, 0.855]],
  [0.857, [0.576, 0.788, 0.859]],
  [0.859, [0.576, 0.788, 0.859]],
  [0.861, [0.588, 0.794, 0.863]],
  [0.863, [0.588, 0.794, 0.863]],
  [0.865, [0.6, 0.8, 0.867]],
  [0.867, [0.6, 0.8, 0.867]],
  [0.869, [0.612, 0.806, 0.871]],
  [0.871, [0.612, 0.806, 0.871]],
  [0.873, [0.624, 0.812, 0.875]],
  [0.875, [0.624, 0.812, 0.875]],
  [0.877, [0.635, 0.818, 0.878]],
  [0.879, [0.635, 0.818, 0.878]],
  [0.881, [0.647, 0.824, 0.882]],
  [0.883, [0.647, 0.824, 0.882]],
  [0.885, [0.659, 0.829, 0.886]],
  [0.886, [0.659, 0.829, 0.886]],
  [0.888, [0.671, 0.835, 0.89]],
  [0.89, [0.671, 0.835, 0.89]],
  [0.892, [0.682, 0.841, 0.894]],
  [0.894, [0.682, 0.841, 0.894]],
  [0.896, [0.694, 0.847, 0.898]],
  [0.898, [0.694, 0.847, 0.898]],
  [0.9, [0.706, 0.853, 0.902]],
  [0.902, [0.706, 0.853, 0.902]],
  [0.904, [0.718, 0.859, 0.906]],
  [0.906, [0.718, 0.859, 0.906]],
  [0.908, [0.729, 0.865, 0.91]],
  [0.91, [0.729, 0.865, 0.91]],
  [0.912, [0.741, 0.871, 0.914]],
  [0.914, [0.741, 0.871, 0.914]],
  [0.916, [0.753, 0.876, 0.918]],
  [0.918, [0.753, 0.876, 0.918]],
  [0.92, [0.765, 0.882, 0.922]],
  [0.922, [0.765, 0.882, 0.922]],
  [0.924, [0.776, 0.888, 0.925]],
  [0.926, [0.776, 0.888, 0.925]],
  [0.928, [0.788, 0.894, 0.929]],
  [0.93, [0.788, 0.894, 0.929]],
  [0.932, [0.8, 0.9, 0.933]],
  [0.933, [0.8, 0.9, 0.933]],
  [0.935, [0.812, 0.906, 0.937]],
  [0.937, [0.812, 0.906, 0.937]],
  [0.939, [0.824, 0.912, 0.941]],
  [0.941, [0.824, 0.912, 0.941]],
  [0.943, [0.835, 0.918, 0.945]],
  [0.945, [0.835, 0.918, 0.945]],
  [0.947, [0.847, 0.924, 0.949]],
  [0.949, [0.847, 0.924, 0.949]],
  [0.951, [0.859, 0.929, 0.953]],
  [0.953, [0.859, 0.929, 0.953]],
  [0.955, [0.871, 0.935, 0.957]],
  [0.957, [0.871, 0.935, 0.957]],
  [0.959, [0.882, 0.941, 0.961]],
  [0.961, [0.882, 0.941, 0.961]],
  [0.963, [0.894, 0.947, 0.965]],
  [0.965, [0.894, 0.947, 0.965]],
  [0.967, [0.906, 0.953, 0.969]],
  [0.969, [0.906, 0.953, 0.969]],
  [0.971, [0.918, 0.959, 0.973]],
  [0.973, [0.918, 0.959, 0.973]],
  [0.975, [0.929, 0.965, 0.976]],
  [0.977, [0.929, 0.965, 0.976]],
  [0.978, [0.941, 0.971, 0.98]],
  [0.98, [0.941, 0.971, 0.98]],
  [0.982, [0.953, 0.976, 0.984]],
  [0.984, [0.953, 0.976, 0.984]],
  [0.986, [0.965, 0.982, 0.988]],
  [0.988, [0.965, 0.982, 0.988]],
  [0.99, [0.976, 0.988, 0.992]],
  [0.992, [0.976, 0.988, 0.992]],
  [0.994, [0.988, 0.994, 0.996]],
  [0.996, [0.988, 0.994, 0.996]],
  [0.998, [1, 1, 1]],
  [1, [1, 1, 1]]
], qp = [
  [0, [1, 0, -0]],
  [2e-3, [1, 0, -0]],
  [4e-3, [1, 0, 0]],
  [6e-3, [1, 0, 0]],
  [8e-3, [1, 0.13, 0]],
  [0.01, [1, 0.13, 0]],
  [0.012, [1, 0.32, 0]],
  [0.014, [1, 0.32, 0]],
  [0.016, [1, 0.512, 0]],
  [0.018, [1, 0.512, 0]],
  [0.02, [1, 0.691, 0]],
  [0.022, [1, 0.691, 0]],
  [0.023, [1, 0.846, 0]],
  [0.025, [1, 0.846, 0]],
  [0.027, [1, 0.968, 0]],
  [0.029, [1, 0.968, 0]],
  [0.031, [0.889, 1, 0]],
  [0.033, [0.889, 1, 0]],
  [0.035, [0.699, 1, 0]],
  [0.037, [0.699, 1, 0]],
  [0.039, [0.507, 1, 0]],
  [0.041, [0.507, 1, 0]],
  [0.043, [0.326, 0.997, 0]],
  [0.045, [0.326, 0.997, 0]],
  [0.047, [0.168, 0.887, 0]],
  [0.049, [0.168, 0.887, 0]],
  [0.051, [0.043, 0.741, 0.225]],
  [0.053, [0.043, 0.741, 0.225]],
  [0.055, [0, 0.567, 0.492]],
  [0.057, [0, 0.567, 0.492]],
  [0.059, [0, 0.378, 0.726]],
  [0.061, [0, 0.378, 0.726]],
  [0.063, [0, 0.186, 0.912]],
  [0.065, [0, 0.186, 0.912]],
  [0.067, [0, 4e-3, 1]],
  [0.068, [0, 4e-3, 1]],
  [0.07, [0.1, 0, 1]],
  [0.072, [0.1, 0, 1]],
  [0.074, [0.243, 0, 1]],
  [0.076, [0.243, 0, 1]],
  [0.078, [0.414, 0, 0.996]],
  [0.08, [0.414, 0, 0.996]],
  [0.082, [0.602, 0, 0.845]],
  [0.084, [0.602, 0, 0.845]],
  [0.086, [0.795, 0, 0.638]],
  [0.088, [0.795, 0, 0.638]],
  [0.09, [0.979, 0, 0.389]],
  [0.092, [0.979, 0, 0.389]],
  [0.094, [1, 0, 0.114]],
  [0.096, [1, 0, 0.114]],
  [0.098, [1, 0, 0]],
  [0.1, [1, 0, 0]],
  [0.102, [1, 0.056, 0]],
  [0.104, [1, 0.056, 0]],
  [0.106, [1, 0.243, 0]],
  [0.108, [1, 0.243, 0]],
  [0.11, [1, 0.435, 0]],
  [0.112, [1, 0.435, 0]],
  [0.114, [1, 0.621, 0]],
  [0.115, [1, 0.621, 0]],
  [0.117, [1, 0.787, 0]],
  [0.119, [1, 0.787, 0]],
  [0.121, [1, 0.924, 0]],
  [0.123, [1, 0.924, 0]],
  [0.125, [0.962, 1, 0]],
  [0.127, [0.962, 1, 0]],
  [0.129, [0.776, 1, 0]],
  [0.131, [0.776, 1, 0]],
  [0.133, [0.584, 1, 0]],
  [0.135, [0.584, 1, 0]],
  [0.137, [0.397, 1, 0]],
  [0.139, [0.397, 1, 0]],
  [0.141, [0.228, 0.936, 0]],
  [0.143, [0.228, 0.936, 0]],
  [0.145, [0.088, 0.803, 0.112]],
  [0.147, [0.088, 0.803, 0.112]],
  [0.149, [0, 0.64, 0.387]],
  [0.151, [0, 0.64, 0.387]],
  [0.153, [0, 0.456, 0.637]],
  [0.155, [0, 0.456, 0.637]],
  [0.157, [0, 0.263, 0.844]],
  [0.159, [0, 0.263, 0.844]],
  [0.16, [0, 0.075, 0.996]],
  [0.162, [0, 0.075, 0.996]],
  [0.164, [0.053, 0, 1]],
  [0.166, [0.053, 0, 1]],
  [0.168, [0.182, 0, 1]],
  [0.17, [0.182, 0, 1]],
  [0.172, [0.343, 0, 1]],
  [0.174, [0.343, 0, 1]],
  [0.176, [0.525, 0, 0.913]],
  [0.178, [0.525, 0, 0.913]],
  [0.18, [0.718, 0, 0.727]],
  [0.182, [0.718, 0, 0.727]],
  [0.184, [0.907, 0, 0.493]],
  [0.186, [0.907, 0, 0.493]],
  [0.188, [1, 0, 0.226]],
  [0.19, [1, 0, 0.226]],
  [0.192, [1, 0, 0]],
  [0.194, [1, 0, 0]],
  [0.196, [1, 0, 0]],
  [0.198, [1, 0, 0]],
  [0.2, [1, 0.166, 0]],
  [0.202, [1, 0.166, 0]],
  [0.204, [1, 0.358, 0]],
  [0.205, [1, 0.358, 0]],
  [0.207, [1, 0.548, 0]],
  [0.209, [1, 0.548, 0]],
  [0.211, [1, 0.724, 0]],
  [0.213, [1, 0.724, 0]],
  [0.215, [1, 0.873, 0]],
  [0.217, [1, 0.873, 0]],
  [0.219, [1, 0.987, 0]],
  [0.221, [1, 0.987, 0]],
  [0.223, [0.852, 1, 0]],
  [0.225, [0.852, 1, 0]],
  [0.227, [0.661, 1, 0]],
  [0.229, [0.661, 1, 0]],
  [0.231, [0.471, 1, 0]],
  [0.233, [0.471, 1, 0]],
  [0.235, [0.293, 0.978, 0]],
  [0.237, [0.293, 0.978, 0]],
  [0.239, [0.14, 0.861, 0]],
  [0.241, [0.14, 0.861, 0]],
  [0.243, [0.023, 0.709, 0.279]],
  [0.245, [0.023, 0.709, 0.279]],
  [0.247, [0, 0.531, 0.541]],
  [0.249, [0, 0.531, 0.541]],
  [0.25, [0, 0.341, 0.767]],
  [0.252, [0, 0.341, 0.767]],
  [0.254, [0, 0.149, 0.942]],
  [0.256, [0, 0.149, 0.942]],
  [0.258, [0.012, 0, 1]],
  [0.26, [0.012, 0, 1]],
  [0.262, [0.125, 0, 1]],
  [0.264, [0.125, 0, 1]],
  [0.266, [0.275, 0, 1]],
  [0.268, [0.275, 0, 1]],
  [0.27, [0.45, 0, 0.972]],
  [0.272, [0.45, 0, 0.972]],
  [0.274, [0.64, 0, 0.808]],
  [0.276, [0.64, 0, 0.808]],
  [0.278, [0.832, 0, 0.592]],
  [0.28, [0.832, 0, 0.592]],
  [0.282, [1, 0, 0.336]],
  [0.284, [1, 0, 0.336]],
  [0.286, [1, 0, 0.058]],
  [0.288, [1, 0, 0.058]],
  [0.29, [1, 0, 0]],
  [0.292, [1, 0, 0]],
  [0.294, [1, 0.092, 0]],
  [0.295, [1, 0.092, 0]],
  [0.297, [1, 0.281, 0]],
  [0.299, [1, 0.281, 0]],
  [0.301, [1, 0.473, 0]],
  [0.303, [1, 0.473, 0]],
  [0.305, [1, 0.656, 0]],
  [0.307, [1, 0.656, 0]],
  [0.309, [1, 0.817, 0]],
  [0.311, [1, 0.817, 0]],
  [0.313, [1, 0.946, 0]],
  [0.315, [1, 0.946, 0]],
  [0.317, [0.927, 1, 0]],
  [0.319, [0.927, 1, 0]],
  [0.321, [0.739, 1, 0]],
  [0.323, [0.739, 1, 0]],
  [0.325, [0.546, 1, 0]],
  [0.327, [0.546, 1, 0]],
  [0.329, [0.362, 1, 0]],
  [0.331, [0.362, 1, 0]],
  [0.333, [0.198, 0.913, 0]],
  [0.335, [0.198, 0.913, 0]],
  [0.337, [0.065, 0.773, 0.167]],
  [0.339, [0.065, 0.773, 0.167]],
  [0.341, [0, 0.605, 0.439]],
  [0.342, [0, 0.605, 0.439]],
  [0.344, [0, 0.418, 0.681]],
  [0.346, [0, 0.418, 0.681]],
  [0.348, [0, 0.225, 0.879]],
  [0.35, [0, 0.225, 0.879]],
  [0.352, [0, 0.04, 1]],
  [0.354, [0, 0.04, 1]],
  [0.356, [0.075, 0, 1]],
  [0.358, [0.075, 0, 1]],
  [0.36, [0.211, 0, 1]],
  [0.362, [0.211, 0, 1]],
  [0.364, [0.377, 0, 1]],
  [0.366, [0.377, 0, 1]],
  [0.368, [0.563, 0, 0.881]],
  [0.37, [0.563, 0, 0.881]],
  [0.372, [0.755, 0, 0.684]],
  [0.374, [0.755, 0, 0.684]],
  [0.376, [0.942, 0, 0.442]],
  [0.378, [0.942, 0, 0.442]],
  [0.38, [1, 0, 0.171]],
  [0.382, [1, 0, 0.171]],
  [0.384, [1, 0, 0]],
  [0.386, [1, 0, 0]],
  [0.387, [1, 0.019, 0]],
  [0.389, [1, 0.019, 0]],
  [0.391, [1, 0.204, 0]],
  [0.393, [1, 0.204, 0]],
  [0.395, [1, 0.396, 0]],
  [0.397, [1, 0.396, 0]],
  [0.399, [1, 0.584, 0]],
  [0.401, [1, 0.584, 0]],
  [0.403, [1, 0.755, 0]],
  [0.405, [1, 0.755, 0]],
  [0.407, [1, 0.899, 0]],
  [0.409, [1, 0.899, 0]],
  [0.411, [0.998, 1, 0]],
  [0.413, [0.998, 1, 0]],
  [0.415, [0.816, 1, 0]],
  [0.417, [0.816, 1, 0]],
  [0.419, [0.623, 1, 0]],
  [0.421, [0.623, 1, 0]],
  [0.423, [0.434, 1, 0]],
  [0.425, [0.434, 1, 0]],
  [0.427, [0.261, 0.958, 0]],
  [0.429, [0.261, 0.958, 0]],
  [0.431, [0.114, 0.834, 0.054]],
  [0.432, [0.114, 0.834, 0.054]],
  [0.434, [4e-3, 0.675, 0.332]],
  [0.436, [4e-3, 0.675, 0.332]],
  [0.438, [0, 0.495, 0.588]],
  [0.44, [0, 0.495, 0.588]],
  [0.442, [0, 0.303, 0.806]],
  [0.444, [0, 0.303, 0.806]],
  [0.446, [0, 0.113, 0.97]],
  [0.448, [0, 0.113, 0.97]],
  [0.45, [0.031, 0, 1]],
  [0.452, [0.031, 0, 1]],
  [0.454, [0.152, 0, 1]],
  [0.456, [0.152, 0, 1]],
  [0.458, [0.307, 0, 1]],
  [0.46, [0.307, 0, 1]],
  [0.462, [0.487, 0, 0.944]],
  [0.464, [0.487, 0, 0.944]],
  [0.466, [0.678, 0, 0.77]],
  [0.468, [0.678, 0, 0.77]],
  [0.47, [0.869, 0, 0.544]],
  [0.472, [0.869, 0, 0.544]],
  [0.474, [1, 0, 0.283]],
  [0.476, [1, 0, 0.283]],
  [0.477, [1, 0, 3e-3]],
  [0.479, [1, 0, 3e-3]],
  [0.481, [1, 0, 0]],
  [0.483, [1, 0, 0]],
  [0.485, [1, 0.128, 0]],
  [0.487, [1, 0.128, 0]],
  [0.489, [1, 0.318, 0]],
  [0.491, [1, 0.318, 0]],
  [0.493, [1, 0.51, 0]],
  [0.495, [1, 0.51, 0]],
  [0.497, [1, 0.689, 0]],
  [0.499, [1, 0.689, 0]],
  [0.501, [1, 0.845, 0]],
  [0.503, [1, 0.845, 0]],
  [0.505, [1, 0.967, 0]],
  [0.507, [1, 0.967, 0]],
  [0.509, [0.891, 1, 0]],
  [0.511, [0.891, 1, 0]],
  [0.513, [0.701, 1, 0]],
  [0.515, [0.701, 1, 0]],
  [0.517, [0.509, 1, 0]],
  [0.519, [0.509, 1, 0]],
  [0.521, [0.328, 0.997, 0]],
  [0.523, [0.328, 0.997, 0]],
  [0.524, [0.169, 0.888, 0]],
  [0.526, [0.169, 0.888, 0]],
  [0.528, [0.044, 0.742, 0.222]],
  [0.53, [0.044, 0.742, 0.222]],
  [0.532, [0, 0.569, 0.489]],
  [0.534, [0, 0.569, 0.489]],
  [0.536, [0, 0.38, 0.724]],
  [0.538, [0, 0.38, 0.724]],
  [0.54, [0, 0.188, 0.911]],
  [0.542, [0, 0.188, 0.911]],
  [0.544, [0, 5e-3, 1]],
  [0.546, [0, 5e-3, 1]],
  [0.548, [0.099, 0, 1]],
  [0.55, [0.099, 0, 1]],
  [0.552, [0.242, 0, 1]],
  [0.554, [0.242, 0, 1]],
  [0.556, [0.412, 0, 0.998]],
  [0.558, [0.412, 0, 0.998]],
  [0.56, [0.6, 0, 0.847]],
  [0.562, [0.6, 0, 0.847]],
  [0.564, [0.793, 0, 0.64]],
  [0.566, [0.793, 0, 0.64]],
  [0.568, [0.977, 0, 0.391]],
  [0.569, [0.977, 0, 0.391]],
  [0.571, [1, 0, 0.116]],
  [0.573, [1, 0, 0.116]],
  [0.575, [1, 0, 0]],
  [0.577, [1, 0, 0]],
  [0.579, [1, 0.054, 0]],
  [0.581, [1, 0.054, 0]],
  [0.583, [1, 0.241, 0]],
  [0.585, [1, 0.241, 0]],
  [0.587, [1, 0.434, 0]],
  [0.589, [1, 0.434, 0]],
  [0.591, [1, 0.619, 0]],
  [0.593, [1, 0.619, 0]],
  [0.595, [1, 0.786, 0]],
  [0.597, [1, 0.786, 0]],
  [0.599, [1, 0.923, 0]],
  [0.601, [1, 0.923, 0]],
  [0.603, [0.964, 1, 0]],
  [0.605, [0.964, 1, 0]],
  [0.607, [0.778, 1, 0]],
  [0.609, [0.778, 1, 0]],
  [0.611, [0.586, 1, 0]],
  [0.613, [0.586, 1, 0]],
  [0.614, [0.399, 1, 0]],
  [0.616, [0.399, 1, 0]],
  [0.618, [0.23, 0.937, 0]],
  [0.62, [0.23, 0.937, 0]],
  [0.622, [0.089, 0.805, 0.11]],
  [0.624, [0.089, 0.805, 0.11]],
  [0.626, [0, 0.641, 0.385]],
  [0.628, [0, 0.641, 0.385]],
  [0.63, [0, 0.457, 0.634]],
  [0.632, [0, 0.457, 0.634]],
  [0.634, [0, 0.265, 0.842]],
  [0.636, [0, 0.265, 0.842]],
  [0.638, [0, 0.077, 0.995]],
  [0.64, [0, 0.077, 0.995]],
  [0.642, [0.052, 0, 1]],
  [0.644, [0.052, 0, 1]],
  [0.646, [0.18, 0, 1]],
  [0.648, [0.18, 0, 1]],
  [0.65, [0.341, 0, 1]],
  [0.652, [0.341, 0, 1]],
  [0.654, [0.524, 0, 0.915]],
  [0.656, [0.524, 0, 0.915]],
  [0.658, [0.716, 0, 0.729]],
  [0.659, [0.716, 0, 0.729]],
  [0.661, [0.905, 0, 0.495]],
  [0.663, [0.905, 0, 0.495]],
  [0.665, [1, 0, 0.229]],
  [0.667, [1, 0, 0.229]],
  [0.669, [1, 0, 0]],
  [0.671, [1, 0, 0]],
  [0.673, [1, 0, 0]],
  [0.675, [1, 0, 0]],
  [0.677, [1, 0.165, 0]],
  [0.679, [1, 0.165, 0]],
  [0.681, [1, 0.356, 0]],
  [0.683, [1, 0.356, 0]],
  [0.685, [1, 0.546, 0]],
  [0.687, [1, 0.546, 0]],
  [0.689, [1, 0.722, 0]],
  [0.691, [1, 0.722, 0]],
  [0.693, [1, 0.872, 0]],
  [0.695, [1, 0.872, 0]],
  [0.697, [1, 0.986, 0]],
  [0.699, [1, 0.986, 0]],
  [0.701, [0.854, 1, 0]],
  [0.703, [0.854, 1, 0]],
  [0.705, [0.663, 1, 0]],
  [0.706, [0.663, 1, 0]],
  [0.708, [0.472, 1, 0]],
  [0.71, [0.472, 1, 0]],
  [0.712, [0.295, 0.979, 0]],
  [0.714, [0.295, 0.979, 0]],
  [0.716, [0.142, 0.862, 0]],
  [0.718, [0.142, 0.862, 0]],
  [0.72, [0.024, 0.71, 0.276]],
  [0.722, [0.024, 0.71, 0.276]],
  [0.724, [0, 0.533, 0.538]],
  [0.726, [0, 0.533, 0.538]],
  [0.728, [0, 0.342, 0.765]],
  [0.73, [0, 0.342, 0.765]],
  [0.732, [0, 0.151, 0.941]],
  [0.734, [0, 0.151, 0.941]],
  [0.736, [0.011, 0, 1]],
  [0.738, [0.011, 0, 1]],
  [0.74, [0.124, 0, 1]],
  [0.742, [0.124, 0, 1]],
  [0.744, [0.273, 0, 1]],
  [0.746, [0.273, 0, 1]],
  [0.748, [0.448, 0, 0.973]],
  [0.75, [0.448, 0, 0.973]],
  [0.751, [0.638, 0, 0.81]],
  [0.753, [0.638, 0, 0.81]],
  [0.755, [0.83, 0, 0.594]],
  [0.757, [0.83, 0, 0.594]],
  [0.759, [1, 0, 0.339]],
  [0.761, [1, 0, 0.339]],
  [0.763, [1, 0, 0.061]],
  [0.765, [1, 0, 0.061]],
  [0.767, [1, 0, 0]],
  [0.769, [1, 0, 0]],
  [0.771, [1, 0.09, 0]],
  [0.773, [1, 0.09, 0]],
  [0.775, [1, 0.279, 0]],
  [0.777, [1, 0.279, 0]],
  [0.779, [1, 0.471, 0]],
  [0.781, [1, 0.471, 0]],
  [0.783, [1, 0.654, 0]],
  [0.785, [1, 0.654, 0]],
  [0.787, [1, 0.816, 0]],
  [0.789, [1, 0.816, 0]],
  [0.791, [1, 0.945, 0]],
  [0.793, [1, 0.945, 0]],
  [0.795, [0.928, 1, 0]],
  [0.796, [0.928, 1, 0]],
  [0.798, [0.741, 1, 0]],
  [0.8, [0.741, 1, 0]],
  [0.802, [0.548, 1, 0]],
  [0.804, [0.548, 1, 0]],
  [0.806, [0.364, 1, 0]],
  [0.808, [0.364, 1, 0]],
  [0.81, [0.199, 0.914, 0]],
  [0.812, [0.199, 0.914, 0]],
  [0.814, [0.066, 0.775, 0.165]],
  [0.816, [0.066, 0.775, 0.165]],
  [0.818, [0, 0.607, 0.436]],
  [0.82, [0, 0.607, 0.436]],
  [0.822, [0, 0.42, 0.679]],
  [0.824, [0, 0.42, 0.679]],
  [0.826, [0, 0.227, 0.877]],
  [0.828, [0, 0.227, 0.877]],
  [0.83, [0, 0.041, 1]],
  [0.832, [0, 0.041, 1]],
  [0.834, [0.074, 0, 1]],
  [0.836, [0.074, 0, 1]],
  [0.838, [0.21, 0, 1]],
  [0.84, [0.21, 0, 1]],
  [0.841, [0.376, 0, 1]],
  [0.843, [0.376, 0, 1]],
  [0.845, [0.561, 0, 0.883]],
  [0.847, [0.561, 0, 0.883]],
  [0.849, [0.753, 0, 0.686]],
  [0.851, [0.753, 0, 0.686]],
  [0.853, [0.941, 0, 0.445]],
  [0.855, [0.941, 0, 0.445]],
  [0.857, [1, 0, 0.174]],
  [0.859, [1, 0, 0.174]],
  [0.861, [1, 0, 0]],
  [0.863, [1, 0, 0]],
  [0.865, [1, 0.018, 0]],
  [0.867, [1, 0.018, 0]],
  [0.869, [1, 0.202, 0]],
  [0.871, [1, 0.202, 0]],
  [0.873, [1, 0.394, 0]],
  [0.875, [1, 0.394, 0]],
  [0.877, [1, 0.582, 0]],
  [0.879, [1, 0.582, 0]],
  [0.881, [1, 0.754, 0]],
  [0.883, [1, 0.754, 0]],
  [0.885, [1, 0.897, 0]],
  [0.886, [1, 0.897, 0]],
  [0.888, [1, 1, 0]],
  [0.89, [1, 1, 0]],
  [0.892, [0.817, 1, 0]],
  [0.894, [0.817, 1, 0]],
  [0.896, [0.625, 1, 0]],
  [0.898, [0.625, 1, 0]],
  [0.9, [0.436, 1, 0]],
  [0.902, [0.436, 1, 0]],
  [0.904, [0.262, 0.96, 0]],
  [0.906, [0.262, 0.96, 0]],
  [0.908, [0.115, 0.835, 0.051]],
  [0.91, [0.115, 0.835, 0.051]],
  [0.912, [5e-3, 0.677, 0.33]],
  [0.914, [5e-3, 0.677, 0.33]],
  [0.916, [0, 0.496, 0.586]],
  [0.918, [0, 0.496, 0.586]],
  [0.92, [0, 0.305, 0.804]],
  [0.922, [0, 0.305, 0.804]],
  [0.924, [0, 0.115, 0.968]],
  [0.926, [0, 0.115, 0.968]],
  [0.928, [0.03, 0, 1]],
  [0.93, [0.03, 0, 1]],
  [0.932, [0.151, 0, 1]],
  [0.933, [0.151, 0, 1]],
  [0.935, [0.306, 0, 1]],
  [0.937, [0.306, 0, 1]],
  [0.939, [0.485, 0, 0.946]],
  [0.941, [0.485, 0, 0.946]],
  [0.943, [0.676, 0, 0.772]],
  [0.945, [0.676, 0, 0.772]],
  [0.947, [0.867, 0, 0.546]],
  [0.949, [0.867, 0, 0.546]],
  [0.951, [1, 0, 0.285]],
  [0.953, [1, 0, 0.285]],
  [0.955, [1, 0, 5e-3]],
  [0.957, [1, 0, 5e-3]],
  [0.959, [1, 0, 0]],
  [0.961, [1, 0, 0]],
  [0.963, [1, 0.126, 0]],
  [0.965, [1, 0.126, 0]],
  [0.967, [1, 0.317, 0]],
  [0.969, [1, 0.317, 0]],
  [0.971, [1, 0.508, 0]],
  [0.973, [1, 0.508, 0]],
  [0.975, [1, 0.688, 0]],
  [0.977, [1, 0.688, 0]],
  [0.978, [1, 0.844, 0]],
  [0.98, [1, 0.844, 0]],
  [0.982, [1, 0.966, 0]],
  [0.984, [1, 0.966, 0]],
  [0.986, [0.893, 1, 0]],
  [0.988, [0.893, 1, 0]],
  [0.99, [0.703, 1, 0]],
  [0.992, [0.703, 1, 0]],
  [0.994, [0.511, 1, 0]],
  [0.996, [0.511, 1, 0]],
  [0.998, [0.33, 0.998, 0]],
  [1, [0.33, 0.998, 0]]
], $p = [
  [0, [0.5, 0, 1]],
  [2e-3, [0.5, 0, 1]],
  [4e-3, [0.492, 0.012, 1]],
  [6e-3, [0.492, 0.012, 1]],
  [8e-3, [0.484, 0.025, 1]],
  [0.01, [0.484, 0.025, 1]],
  [0.012, [0.476, 0.037, 1]],
  [0.014, [0.476, 0.037, 1]],
  [0.016, [0.469, 0.049, 1]],
  [0.018, [0.469, 0.049, 1]],
  [0.02, [0.461, 0.062, 1]],
  [0.022, [0.461, 0.062, 1]],
  [0.023, [0.453, 0.074, 0.999]],
  [0.025, [0.453, 0.074, 0.999]],
  [0.027, [0.445, 0.086, 0.999]],
  [0.029, [0.445, 0.086, 0.999]],
  [0.031, [0.437, 0.098, 0.999]],
  [0.033, [0.437, 0.098, 0.999]],
  [0.035, [0.429, 0.111, 0.998]],
  [0.037, [0.429, 0.111, 0.998]],
  [0.039, [0.422, 0.123, 0.998]],
  [0.041, [0.422, 0.123, 0.998]],
  [0.043, [0.414, 0.135, 0.998]],
  [0.045, [0.414, 0.135, 0.998]],
  [0.047, [0.406, 0.147, 0.997]],
  [0.049, [0.406, 0.147, 0.997]],
  [0.051, [0.398, 0.159, 0.997]],
  [0.053, [0.398, 0.159, 0.997]],
  [0.055, [0.39, 0.172, 0.996]],
  [0.057, [0.39, 0.172, 0.996]],
  [0.059, [0.382, 0.184, 0.996]],
  [0.061, [0.382, 0.184, 0.996]],
  [0.063, [0.375, 0.196, 0.995]],
  [0.065, [0.375, 0.196, 0.995]],
  [0.067, [0.367, 0.208, 0.995]],
  [0.068, [0.367, 0.208, 0.995]],
  [0.07, [0.359, 0.22, 0.994]],
  [0.072, [0.359, 0.22, 0.994]],
  [0.074, [0.351, 0.232, 0.993]],
  [0.076, [0.351, 0.232, 0.993]],
  [0.078, [0.343, 0.244, 0.992]],
  [0.08, [0.343, 0.244, 0.992]],
  [0.082, [0.335, 0.256, 0.992]],
  [0.084, [0.335, 0.256, 0.992]],
  [0.086, [0.327, 0.268, 0.991]],
  [0.088, [0.327, 0.268, 0.991]],
  [0.09, [0.32, 0.28, 0.99]],
  [0.092, [0.32, 0.28, 0.99]],
  [0.094, [0.312, 0.291, 0.989]],
  [0.096, [0.312, 0.291, 0.989]],
  [0.098, [0.304, 0.303, 0.988]],
  [0.1, [0.304, 0.303, 0.988]],
  [0.102, [0.296, 0.315, 0.987]],
  [0.104, [0.296, 0.315, 0.987]],
  [0.106, [0.288, 0.327, 0.986]],
  [0.108, [0.288, 0.327, 0.986]],
  [0.11, [0.28, 0.338, 0.985]],
  [0.112, [0.28, 0.338, 0.985]],
  [0.114, [0.273, 0.35, 0.984]],
  [0.115, [0.273, 0.35, 0.984]],
  [0.117, [0.265, 0.361, 0.983]],
  [0.119, [0.265, 0.361, 0.983]],
  [0.121, [0.257, 0.373, 0.982]],
  [0.123, [0.257, 0.373, 0.982]],
  [0.125, [0.249, 0.384, 0.981]],
  [0.127, [0.249, 0.384, 0.981]],
  [0.129, [0.241, 0.395, 0.979]],
  [0.131, [0.241, 0.395, 0.979]],
  [0.133, [0.233, 0.407, 0.978]],
  [0.135, [0.233, 0.407, 0.978]],
  [0.137, [0.225, 0.418, 0.977]],
  [0.139, [0.225, 0.418, 0.977]],
  [0.141, [0.218, 0.429, 0.976]],
  [0.143, [0.218, 0.429, 0.976]],
  [0.145, [0.21, 0.44, 0.974]],
  [0.147, [0.21, 0.44, 0.974]],
  [0.149, [0.202, 0.451, 0.973]],
  [0.151, [0.202, 0.451, 0.973]],
  [0.153, [0.194, 0.462, 0.971]],
  [0.155, [0.194, 0.462, 0.971]],
  [0.157, [0.186, 0.473, 0.97]],
  [0.159, [0.186, 0.473, 0.97]],
  [0.16, [0.178, 0.484, 0.968]],
  [0.162, [0.178, 0.484, 0.968]],
  [0.164, [0.171, 0.495, 0.967]],
  [0.166, [0.171, 0.495, 0.967]],
  [0.168, [0.163, 0.505, 0.965]],
  [0.17, [0.163, 0.505, 0.965]],
  [0.172, [0.155, 0.516, 0.963]],
  [0.174, [0.155, 0.516, 0.963]],
  [0.176, [0.147, 0.526, 0.962]],
  [0.178, [0.147, 0.526, 0.962]],
  [0.18, [0.139, 0.537, 0.96]],
  [0.182, [0.139, 0.537, 0.96]],
  [0.184, [0.131, 0.547, 0.958]],
  [0.186, [0.131, 0.547, 0.958]],
  [0.188, [0.124, 0.557, 0.957]],
  [0.19, [0.124, 0.557, 0.957]],
  [0.192, [0.116, 0.568, 0.955]],
  [0.194, [0.116, 0.568, 0.955]],
  [0.196, [0.108, 0.578, 0.953]],
  [0.198, [0.108, 0.578, 0.953]],
  [0.2, [0.1, 0.588, 0.951]],
  [0.202, [0.1, 0.588, 0.951]],
  [0.204, [0.092, 0.598, 0.949]],
  [0.205, [0.092, 0.598, 0.949]],
  [0.207, [0.084, 0.608, 0.947]],
  [0.209, [0.084, 0.608, 0.947]],
  [0.211, [0.076, 0.617, 0.945]],
  [0.213, [0.076, 0.617, 0.945]],
  [0.215, [0.069, 0.627, 0.943]],
  [0.217, [0.069, 0.627, 0.943]],
  [0.219, [0.061, 0.636, 0.941]],
  [0.221, [0.061, 0.636, 0.941]],
  [0.223, [0.053, 0.646, 0.939]],
  [0.225, [0.053, 0.646, 0.939]],
  [0.227, [0.045, 0.655, 0.937]],
  [0.229, [0.045, 0.655, 0.937]],
  [0.231, [0.037, 0.665, 0.935]],
  [0.233, [0.037, 0.665, 0.935]],
  [0.235, [0.029, 0.674, 0.932]],
  [0.237, [0.029, 0.674, 0.932]],
  [0.239, [0.022, 0.683, 0.93]],
  [0.241, [0.022, 0.683, 0.93]],
  [0.243, [0.014, 0.692, 0.928]],
  [0.245, [0.014, 0.692, 0.928]],
  [0.247, [6e-3, 0.701, 0.926]],
  [0.249, [6e-3, 0.701, 0.926]],
  [0.25, [2e-3, 0.709, 0.923]],
  [0.252, [2e-3, 0.709, 0.923]],
  [0.254, [0.01, 0.718, 0.921]],
  [0.256, [0.01, 0.718, 0.921]],
  [0.258, [0.018, 0.726, 0.918]],
  [0.26, [0.018, 0.726, 0.918]],
  [0.262, [0.025, 0.735, 0.916]],
  [0.264, [0.025, 0.735, 0.916]],
  [0.266, [0.033, 0.743, 0.914]],
  [0.268, [0.033, 0.743, 0.914]],
  [0.27, [0.041, 0.751, 0.911]],
  [0.272, [0.041, 0.751, 0.911]],
  [0.274, [0.049, 0.759, 0.908]],
  [0.276, [0.049, 0.759, 0.908]],
  [0.278, [0.057, 0.767, 0.906]],
  [0.28, [0.057, 0.767, 0.906]],
  [0.282, [0.065, 0.775, 0.903]],
  [0.284, [0.065, 0.775, 0.903]],
  [0.286, [0.073, 0.783, 0.901]],
  [0.288, [0.073, 0.783, 0.901]],
  [0.29, [0.08, 0.791, 0.898]],
  [0.292, [0.08, 0.791, 0.898]],
  [0.294, [0.088, 0.798, 0.895]],
  [0.295, [0.088, 0.798, 0.895]],
  [0.297, [0.096, 0.805, 0.892]],
  [0.299, [0.096, 0.805, 0.892]],
  [0.301, [0.104, 0.813, 0.89]],
  [0.303, [0.104, 0.813, 0.89]],
  [0.305, [0.112, 0.82, 0.887]],
  [0.307, [0.112, 0.82, 0.887]],
  [0.309, [0.12, 0.827, 0.884]],
  [0.311, [0.12, 0.827, 0.884]],
  [0.313, [0.127, 0.834, 0.881]],
  [0.315, [0.127, 0.834, 0.881]],
  [0.317, [0.135, 0.84, 0.878]],
  [0.319, [0.135, 0.84, 0.878]],
  [0.321, [0.143, 0.847, 0.875]],
  [0.323, [0.143, 0.847, 0.875]],
  [0.325, [0.151, 0.853, 0.872]],
  [0.327, [0.151, 0.853, 0.872]],
  [0.329, [0.159, 0.86, 0.869]],
  [0.331, [0.159, 0.86, 0.869]],
  [0.333, [0.167, 0.866, 0.866]],
  [0.335, [0.167, 0.866, 0.866]],
  [0.337, [0.175, 0.872, 0.863]],
  [0.339, [0.175, 0.872, 0.863]],
  [0.341, [0.182, 0.878, 0.86]],
  [0.342, [0.182, 0.878, 0.86]],
  [0.344, [0.19, 0.884, 0.857]],
  [0.346, [0.19, 0.884, 0.857]],
  [0.348, [0.198, 0.89, 0.853]],
  [0.35, [0.198, 0.89, 0.853]],
  [0.352, [0.206, 0.895, 0.85]],
  [0.354, [0.206, 0.895, 0.85]],
  [0.356, [0.214, 0.901, 0.847]],
  [0.358, [0.214, 0.901, 0.847]],
  [0.36, [0.222, 0.906, 0.844]],
  [0.362, [0.222, 0.906, 0.844]],
  [0.364, [0.229, 0.911, 0.84]],
  [0.366, [0.229, 0.911, 0.84]],
  [0.368, [0.237, 0.916, 0.837]],
  [0.37, [0.237, 0.916, 0.837]],
  [0.372, [0.245, 0.921, 0.834]],
  [0.374, [0.245, 0.921, 0.834]],
  [0.376, [0.253, 0.926, 0.83]],
  [0.378, [0.253, 0.926, 0.83]],
  [0.38, [0.261, 0.93, 0.827]],
  [0.382, [0.261, 0.93, 0.827]],
  [0.384, [0.269, 0.935, 0.823]],
  [0.386, [0.269, 0.935, 0.823]],
  [0.387, [0.276, 0.939, 0.82]],
  [0.389, [0.276, 0.939, 0.82]],
  [0.391, [0.284, 0.943, 0.816]],
  [0.393, [0.284, 0.943, 0.816]],
  [0.395, [0.292, 0.947, 0.813]],
  [0.397, [0.292, 0.947, 0.813]],
  [0.399, [0.3, 0.951, 0.809]],
  [0.401, [0.3, 0.951, 0.809]],
  [0.403, [0.308, 0.955, 0.805]],
  [0.405, [0.308, 0.955, 0.805]],
  [0.407, [0.316, 0.958, 0.802]],
  [0.409, [0.316, 0.958, 0.802]],
  [0.411, [0.324, 0.962, 0.798]],
  [0.413, [0.324, 0.962, 0.798]],
  [0.415, [0.331, 0.965, 0.794]],
  [0.417, [0.331, 0.965, 0.794]],
  [0.419, [0.339, 0.968, 0.791]],
  [0.421, [0.339, 0.968, 0.791]],
  [0.423, [0.347, 0.971, 0.787]],
  [0.425, [0.347, 0.971, 0.787]],
  [0.427, [0.355, 0.974, 0.783]],
  [0.429, [0.355, 0.974, 0.783]],
  [0.431, [0.363, 0.977, 0.779]],
  [0.432, [0.363, 0.977, 0.779]],
  [0.434, [0.371, 0.979, 0.775]],
  [0.436, [0.371, 0.979, 0.775]],
  [0.438, [0.378, 0.982, 0.771]],
  [0.44, [0.378, 0.982, 0.771]],
  [0.442, [0.386, 0.984, 0.767]],
  [0.444, [0.386, 0.984, 0.767]],
  [0.446, [0.394, 0.986, 0.763]],
  [0.448, [0.394, 0.986, 0.763]],
  [0.45, [0.402, 0.988, 0.759]],
  [0.452, [0.402, 0.988, 0.759]],
  [0.454, [0.41, 0.99, 0.755]],
  [0.456, [0.41, 0.99, 0.755]],
  [0.458, [0.418, 0.992, 0.751]],
  [0.46, [0.418, 0.992, 0.751]],
  [0.462, [0.425, 0.993, 0.747]],
  [0.464, [0.425, 0.993, 0.747]],
  [0.466, [0.433, 0.995, 0.743]],
  [0.468, [0.433, 0.995, 0.743]],
  [0.47, [0.441, 0.996, 0.739]],
  [0.472, [0.441, 0.996, 0.739]],
  [0.474, [0.449, 0.997, 0.735]],
  [0.476, [0.449, 0.997, 0.735]],
  [0.477, [0.457, 0.998, 0.731]],
  [0.479, [0.457, 0.998, 0.731]],
  [0.481, [0.465, 0.998, 0.726]],
  [0.483, [0.465, 0.998, 0.726]],
  [0.485, [0.473, 0.999, 0.722]],
  [0.487, [0.473, 0.999, 0.722]],
  [0.489, [0.48, 1, 0.718]],
  [0.491, [0.48, 1, 0.718]],
  [0.493, [0.488, 1, 0.714]],
  [0.495, [0.488, 1, 0.714]],
  [0.497, [0.496, 1, 0.709]],
  [0.499, [0.496, 1, 0.709]],
  [0.501, [0.504, 1, 0.705]],
  [0.503, [0.504, 1, 0.705]],
  [0.505, [0.512, 1, 0.701]],
  [0.507, [0.512, 1, 0.701]],
  [0.509, [0.52, 1, 0.696]],
  [0.511, [0.52, 1, 0.696]],
  [0.513, [0.527, 0.999, 0.692]],
  [0.515, [0.527, 0.999, 0.692]],
  [0.517, [0.535, 0.998, 0.687]],
  [0.519, [0.535, 0.998, 0.687]],
  [0.521, [0.543, 0.998, 0.683]],
  [0.523, [0.543, 0.998, 0.683]],
  [0.524, [0.551, 0.997, 0.678]],
  [0.526, [0.551, 0.997, 0.678]],
  [0.528, [0.559, 0.996, 0.674]],
  [0.53, [0.559, 0.996, 0.674]],
  [0.532, [0.567, 0.995, 0.669]],
  [0.534, [0.567, 0.995, 0.669]],
  [0.536, [0.575, 0.993, 0.665]],
  [0.538, [0.575, 0.993, 0.665]],
  [0.54, [0.582, 0.992, 0.66]],
  [0.542, [0.582, 0.992, 0.66]],
  [0.544, [0.59, 0.99, 0.655]],
  [0.546, [0.59, 0.99, 0.655]],
  [0.548, [0.598, 0.988, 0.651]],
  [0.55, [0.598, 0.988, 0.651]],
  [0.552, [0.606, 0.986, 0.646]],
  [0.554, [0.606, 0.986, 0.646]],
  [0.556, [0.614, 0.984, 0.641]],
  [0.558, [0.614, 0.984, 0.641]],
  [0.56, [0.622, 0.982, 0.636]],
  [0.562, [0.622, 0.982, 0.636]],
  [0.564, [0.629, 0.979, 0.632]],
  [0.566, [0.629, 0.979, 0.632]],
  [0.568, [0.637, 0.977, 0.627]],
  [0.569, [0.637, 0.977, 0.627]],
  [0.571, [0.645, 0.974, 0.622]],
  [0.573, [0.645, 0.974, 0.622]],
  [0.575, [0.653, 0.971, 0.617]],
  [0.577, [0.653, 0.971, 0.617]],
  [0.579, [0.661, 0.968, 0.612]],
  [0.581, [0.661, 0.968, 0.612]],
  [0.583, [0.669, 0.965, 0.608]],
  [0.585, [0.669, 0.965, 0.608]],
  [0.587, [0.676, 0.962, 0.603]],
  [0.589, [0.676, 0.962, 0.603]],
  [0.591, [0.684, 0.958, 0.598]],
  [0.593, [0.684, 0.958, 0.598]],
  [0.595, [0.692, 0.955, 0.593]],
  [0.597, [0.692, 0.955, 0.593]],
  [0.599, [0.7, 0.951, 0.588]],
  [0.601, [0.7, 0.951, 0.588]],
  [0.603, [0.708, 0.947, 0.583]],
  [0.605, [0.708, 0.947, 0.583]],
  [0.607, [0.716, 0.943, 0.578]],
  [0.609, [0.716, 0.943, 0.578]],
  [0.611, [0.724, 0.939, 0.573]],
  [0.613, [0.724, 0.939, 0.573]],
  [0.614, [0.731, 0.935, 0.568]],
  [0.616, [0.731, 0.935, 0.568]],
  [0.618, [0.739, 0.93, 0.563]],
  [0.62, [0.739, 0.93, 0.563]],
  [0.622, [0.747, 0.926, 0.557]],
  [0.624, [0.747, 0.926, 0.557]],
  [0.626, [0.755, 0.921, 0.552]],
  [0.628, [0.755, 0.921, 0.552]],
  [0.63, [0.763, 0.916, 0.547]],
  [0.632, [0.763, 0.916, 0.547]],
  [0.634, [0.771, 0.911, 0.542]],
  [0.636, [0.771, 0.911, 0.542]],
  [0.638, [0.778, 0.906, 0.537]],
  [0.64, [0.778, 0.906, 0.537]],
  [0.642, [0.786, 0.901, 0.532]],
  [0.644, [0.786, 0.901, 0.532]],
  [0.646, [0.794, 0.895, 0.526]],
  [0.648, [0.794, 0.895, 0.526]],
  [0.65, [0.802, 0.89, 0.521]],
  [0.652, [0.802, 0.89, 0.521]],
  [0.654, [0.81, 0.884, 0.516]],
  [0.656, [0.81, 0.884, 0.516]],
  [0.658, [0.818, 0.878, 0.511]],
  [0.659, [0.818, 0.878, 0.511]],
  [0.661, [0.825, 0.872, 0.505]],
  [0.663, [0.825, 0.872, 0.505]],
  [0.665, [0.833, 0.866, 0.5]],
  [0.667, [0.833, 0.866, 0.5]],
  [0.669, [0.841, 0.86, 0.495]],
  [0.671, [0.841, 0.86, 0.495]],
  [0.673, [0.849, 0.853, 0.489]],
  [0.675, [0.849, 0.853, 0.489]],
  [0.677, [0.857, 0.847, 0.484]],
  [0.679, [0.857, 0.847, 0.484]],
  [0.681, [0.865, 0.84, 0.479]],
  [0.683, [0.865, 0.84, 0.479]],
  [0.685, [0.873, 0.834, 0.473]],
  [0.687, [0.873, 0.834, 0.473]],
  [0.689, [0.88, 0.827, 0.468]],
  [0.691, [0.88, 0.827, 0.468]],
  [0.693, [0.888, 0.82, 0.462]],
  [0.695, [0.888, 0.82, 0.462]],
  [0.697, [0.896, 0.813, 0.457]],
  [0.699, [0.896, 0.813, 0.457]],
  [0.701, [0.904, 0.805, 0.451]],
  [0.703, [0.904, 0.805, 0.451]],
  [0.705, [0.912, 0.798, 0.446]],
  [0.706, [0.912, 0.798, 0.446]],
  [0.708, [0.92, 0.791, 0.44]],
  [0.71, [0.92, 0.791, 0.44]],
  [0.712, [0.927, 0.783, 0.435]],
  [0.714, [0.927, 0.783, 0.435]],
  [0.716, [0.935, 0.775, 0.429]],
  [0.718, [0.935, 0.775, 0.429]],
  [0.72, [0.943, 0.767, 0.424]],
  [0.722, [0.943, 0.767, 0.424]],
  [0.724, [0.951, 0.759, 0.418]],
  [0.726, [0.951, 0.759, 0.418]],
  [0.728, [0.959, 0.751, 0.412]],
  [0.73, [0.959, 0.751, 0.412]],
  [0.732, [0.967, 0.743, 0.407]],
  [0.734, [0.967, 0.743, 0.407]],
  [0.736, [0.975, 0.735, 0.401]],
  [0.738, [0.975, 0.735, 0.401]],
  [0.74, [0.982, 0.726, 0.395]],
  [0.742, [0.982, 0.726, 0.395]],
  [0.744, [0.99, 0.718, 0.39]],
  [0.746, [0.99, 0.718, 0.39]],
  [0.748, [0.998, 0.709, 0.384]],
  [0.75, [0.998, 0.709, 0.384]],
  [0.751, [1, 0.701, 0.378]],
  [0.753, [1, 0.701, 0.378]],
  [0.755, [1, 0.692, 0.373]],
  [0.757, [1, 0.692, 0.373]],
  [0.759, [1, 0.683, 0.367]],
  [0.761, [1, 0.683, 0.367]],
  [0.763, [1, 0.674, 0.361]],
  [0.765, [1, 0.674, 0.361]],
  [0.767, [1, 0.665, 0.355]],
  [0.769, [1, 0.665, 0.355]],
  [0.771, [1, 0.655, 0.35]],
  [0.773, [1, 0.655, 0.35]],
  [0.775, [1, 0.646, 0.344]],
  [0.777, [1, 0.646, 0.344]],
  [0.779, [1, 0.636, 0.338]],
  [0.781, [1, 0.636, 0.338]],
  [0.783, [1, 0.627, 0.332]],
  [0.785, [1, 0.627, 0.332]],
  [0.787, [1, 0.617, 0.327]],
  [0.789, [1, 0.617, 0.327]],
  [0.791, [1, 0.608, 0.321]],
  [0.793, [1, 0.608, 0.321]],
  [0.795, [1, 0.598, 0.315]],
  [0.796, [1, 0.598, 0.315]],
  [0.798, [1, 0.588, 0.309]],
  [0.8, [1, 0.588, 0.309]],
  [0.802, [1, 0.578, 0.303]],
  [0.804, [1, 0.578, 0.303]],
  [0.806, [1, 0.568, 0.297]],
  [0.808, [1, 0.568, 0.297]],
  [0.81, [1, 0.557, 0.291]],
  [0.812, [1, 0.557, 0.291]],
  [0.814, [1, 0.547, 0.285]],
  [0.816, [1, 0.547, 0.285]],
  [0.818, [1, 0.537, 0.28]],
  [0.82, [1, 0.537, 0.28]],
  [0.822, [1, 0.526, 0.274]],
  [0.824, [1, 0.526, 0.274]],
  [0.826, [1, 0.516, 0.268]],
  [0.828, [1, 0.516, 0.268]],
  [0.83, [1, 0.505, 0.262]],
  [0.832, [1, 0.505, 0.262]],
  [0.834, [1, 0.495, 0.256]],
  [0.836, [1, 0.495, 0.256]],
  [0.838, [1, 0.484, 0.25]],
  [0.84, [1, 0.484, 0.25]],
  [0.841, [1, 0.473, 0.244]],
  [0.843, [1, 0.473, 0.244]],
  [0.845, [1, 0.462, 0.238]],
  [0.847, [1, 0.462, 0.238]],
  [0.849, [1, 0.451, 0.232]],
  [0.851, [1, 0.451, 0.232]],
  [0.853, [1, 0.44, 0.226]],
  [0.855, [1, 0.44, 0.226]],
  [0.857, [1, 0.429, 0.22]],
  [0.859, [1, 0.429, 0.22]],
  [0.861, [1, 0.418, 0.214]],
  [0.863, [1, 0.418, 0.214]],
  [0.865, [1, 0.407, 0.208]],
  [0.867, [1, 0.407, 0.208]],
  [0.869, [1, 0.395, 0.202]],
  [0.871, [1, 0.395, 0.202]],
  [0.873, [1, 0.384, 0.196]],
  [0.875, [1, 0.384, 0.196]],
  [0.877, [1, 0.373, 0.19]],
  [0.879, [1, 0.373, 0.19]],
  [0.881, [1, 0.361, 0.184]],
  [0.883, [1, 0.361, 0.184]],
  [0.885, [1, 0.35, 0.178]],
  [0.886, [1, 0.35, 0.178]],
  [0.888, [1, 0.338, 0.172]],
  [0.89, [1, 0.338, 0.172]],
  [0.892, [1, 0.327, 0.166]],
  [0.894, [1, 0.327, 0.166]],
  [0.896, [1, 0.315, 0.159]],
  [0.898, [1, 0.315, 0.159]],
  [0.9, [1, 0.303, 0.153]],
  [0.902, [1, 0.303, 0.153]],
  [0.904, [1, 0.291, 0.147]],
  [0.906, [1, 0.291, 0.147]],
  [0.908, [1, 0.28, 0.141]],
  [0.91, [1, 0.28, 0.141]],
  [0.912, [1, 0.268, 0.135]],
  [0.914, [1, 0.268, 0.135]],
  [0.916, [1, 0.256, 0.129]],
  [0.918, [1, 0.256, 0.129]],
  [0.92, [1, 0.244, 0.123]],
  [0.922, [1, 0.244, 0.123]],
  [0.924, [1, 0.232, 0.117]],
  [0.926, [1, 0.232, 0.117]],
  [0.928, [1, 0.22, 0.111]],
  [0.93, [1, 0.22, 0.111]],
  [0.932, [1, 0.208, 0.105]],
  [0.933, [1, 0.208, 0.105]],
  [0.935, [1, 0.196, 0.098]],
  [0.937, [1, 0.196, 0.098]],
  [0.939, [1, 0.184, 0.092]],
  [0.941, [1, 0.184, 0.092]],
  [0.943, [1, 0.172, 0.086]],
  [0.945, [1, 0.172, 0.086]],
  [0.947, [1, 0.159, 0.08]],
  [0.949, [1, 0.159, 0.08]],
  [0.951, [1, 0.147, 0.074]],
  [0.953, [1, 0.147, 0.074]],
  [0.955, [1, 0.135, 0.068]],
  [0.957, [1, 0.135, 0.068]],
  [0.959, [1, 0.123, 0.062]],
  [0.961, [1, 0.123, 0.062]],
  [0.963, [1, 0.111, 0.055]],
  [0.965, [1, 0.111, 0.055]],
  [0.967, [1, 0.098, 0.049]],
  [0.969, [1, 0.098, 0.049]],
  [0.971, [1, 0.086, 0.043]],
  [0.973, [1, 0.086, 0.043]],
  [0.975, [1, 0.074, 0.037]],
  [0.977, [1, 0.074, 0.037]],
  [0.978, [1, 0.062, 0.031]],
  [0.98, [1, 0.062, 0.031]],
  [0.982, [1, 0.049, 0.025]],
  [0.984, [1, 0.049, 0.025]],
  [0.986, [1, 0.037, 0.018]],
  [0.988, [1, 0.037, 0.018]],
  [0.99, [1, 0.025, 0.012]],
  [0.992, [1, 0.025, 0.012]],
  [0.994, [1, 0.012, 6e-3]],
  [0.996, [1, 0.012, 6e-3]],
  [0.998, [1, 0, 0]],
  [1, [1, 0, 0]]
], jp = [
  [0, [0.2, 0.2, 0.6]],
  [2e-3, [0.2, 0.2, 0.6]],
  [4e-3, [0.195, 0.21, 0.61]],
  [6e-3, [0.195, 0.21, 0.61]],
  [8e-3, [0.19, 0.221, 0.621]],
  [0.01, [0.19, 0.221, 0.621]],
  [0.012, [0.184, 0.231, 0.631]],
  [0.014, [0.184, 0.231, 0.631]],
  [0.016, [0.179, 0.242, 0.642]],
  [0.018, [0.179, 0.242, 0.642]],
  [0.02, [0.174, 0.252, 0.652]],
  [0.022, [0.174, 0.252, 0.652]],
  [0.023, [0.169, 0.263, 0.663]],
  [0.025, [0.169, 0.263, 0.663]],
  [0.027, [0.163, 0.273, 0.673]],
  [0.029, [0.163, 0.273, 0.673]],
  [0.031, [0.158, 0.284, 0.684]],
  [0.033, [0.158, 0.284, 0.684]],
  [0.035, [0.153, 0.294, 0.694]],
  [0.037, [0.153, 0.294, 0.694]],
  [0.039, [0.148, 0.305, 0.705]],
  [0.041, [0.148, 0.305, 0.705]],
  [0.043, [0.142, 0.315, 0.715]],
  [0.045, [0.142, 0.315, 0.715]],
  [0.047, [0.137, 0.325, 0.725]],
  [0.049, [0.137, 0.325, 0.725]],
  [0.051, [0.132, 0.336, 0.736]],
  [0.053, [0.132, 0.336, 0.736]],
  [0.055, [0.127, 0.346, 0.746]],
  [0.057, [0.127, 0.346, 0.746]],
  [0.059, [0.122, 0.357, 0.757]],
  [0.061, [0.122, 0.357, 0.757]],
  [0.063, [0.116, 0.367, 0.767]],
  [0.065, [0.116, 0.367, 0.767]],
  [0.067, [0.111, 0.378, 0.778]],
  [0.068, [0.111, 0.378, 0.778]],
  [0.07, [0.106, 0.388, 0.788]],
  [0.072, [0.106, 0.388, 0.788]],
  [0.074, [0.101, 0.399, 0.799]],
  [0.076, [0.101, 0.399, 0.799]],
  [0.078, [0.095, 0.409, 0.809]],
  [0.08, [0.095, 0.409, 0.809]],
  [0.082, [0.09, 0.42, 0.82]],
  [0.084, [0.09, 0.42, 0.82]],
  [0.086, [0.085, 0.43, 0.83]],
  [0.088, [0.085, 0.43, 0.83]],
  [0.09, [0.08, 0.441, 0.841]],
  [0.092, [0.08, 0.441, 0.841]],
  [0.094, [0.075, 0.451, 0.851]],
  [0.096, [0.075, 0.451, 0.851]],
  [0.098, [0.069, 0.461, 0.861]],
  [0.1, [0.069, 0.461, 0.861]],
  [0.102, [0.064, 0.472, 0.872]],
  [0.104, [0.064, 0.472, 0.872]],
  [0.106, [0.059, 0.482, 0.882]],
  [0.108, [0.059, 0.482, 0.882]],
  [0.11, [0.054, 0.493, 0.893]],
  [0.112, [0.054, 0.493, 0.893]],
  [0.114, [0.048, 0.503, 0.903]],
  [0.115, [0.048, 0.503, 0.903]],
  [0.117, [0.043, 0.514, 0.914]],
  [0.119, [0.043, 0.514, 0.914]],
  [0.121, [0.038, 0.524, 0.924]],
  [0.123, [0.038, 0.524, 0.924]],
  [0.125, [0.033, 0.535, 0.935]],
  [0.127, [0.033, 0.535, 0.935]],
  [0.129, [0.027, 0.545, 0.945]],
  [0.131, [0.027, 0.545, 0.945]],
  [0.133, [0.022, 0.556, 0.956]],
  [0.135, [0.022, 0.556, 0.956]],
  [0.137, [0.017, 0.566, 0.966]],
  [0.139, [0.017, 0.566, 0.966]],
  [0.141, [0.012, 0.576, 0.976]],
  [0.143, [0.012, 0.576, 0.976]],
  [0.145, [7e-3, 0.587, 0.987]],
  [0.147, [7e-3, 0.587, 0.987]],
  [0.149, [1e-3, 0.597, 0.997]],
  [0.151, [1e-3, 0.597, 0.997]],
  [0.153, [0, 0.606, 0.982]],
  [0.155, [0, 0.606, 0.982]],
  [0.157, [0, 0.614, 0.959]],
  [0.159, [0, 0.614, 0.959]],
  [0.16, [0, 0.622, 0.935]],
  [0.162, [0, 0.622, 0.935]],
  [0.164, [0, 0.629, 0.912]],
  [0.166, [0, 0.629, 0.912]],
  [0.168, [0, 0.637, 0.888]],
  [0.17, [0, 0.637, 0.888]],
  [0.172, [0, 0.645, 0.865]],
  [0.174, [0, 0.645, 0.865]],
  [0.176, [0, 0.653, 0.841]],
  [0.178, [0, 0.653, 0.841]],
  [0.18, [0, 0.661, 0.818]],
  [0.182, [0, 0.661, 0.818]],
  [0.184, [0, 0.669, 0.794]],
  [0.186, [0, 0.669, 0.794]],
  [0.188, [0, 0.676, 0.771]],
  [0.19, [0, 0.676, 0.771]],
  [0.192, [0, 0.684, 0.747]],
  [0.194, [0, 0.684, 0.747]],
  [0.196, [0, 0.692, 0.724]],
  [0.198, [0, 0.692, 0.724]],
  [0.2, [0, 0.7, 0.7]],
  [0.202, [0, 0.7, 0.7]],
  [0.204, [0, 0.708, 0.676]],
  [0.205, [0, 0.708, 0.676]],
  [0.207, [0, 0.716, 0.653]],
  [0.209, [0, 0.716, 0.653]],
  [0.211, [0, 0.724, 0.629]],
  [0.213, [0, 0.724, 0.629]],
  [0.215, [0, 0.731, 0.606]],
  [0.217, [0, 0.731, 0.606]],
  [0.219, [0, 0.739, 0.582]],
  [0.221, [0, 0.739, 0.582]],
  [0.223, [0, 0.747, 0.559]],
  [0.225, [0, 0.747, 0.559]],
  [0.227, [0, 0.755, 0.535]],
  [0.229, [0, 0.755, 0.535]],
  [0.231, [0, 0.763, 0.512]],
  [0.233, [0, 0.763, 0.512]],
  [0.235, [0, 0.771, 0.488]],
  [0.237, [0, 0.771, 0.488]],
  [0.239, [0, 0.778, 0.465]],
  [0.241, [0, 0.778, 0.465]],
  [0.243, [0, 0.786, 0.441]],
  [0.245, [0, 0.786, 0.441]],
  [0.247, [0, 0.794, 0.418]],
  [0.249, [0, 0.794, 0.418]],
  [0.25, [4e-3, 0.801, 0.401]],
  [0.252, [4e-3, 0.801, 0.401]],
  [0.254, [0.02, 0.804, 0.404]],
  [0.256, [0.02, 0.804, 0.404]],
  [0.258, [0.035, 0.807, 0.407]],
  [0.26, [0.035, 0.807, 0.407]],
  [0.262, [0.051, 0.81, 0.41]],
  [0.264, [0.051, 0.81, 0.41]],
  [0.266, [0.067, 0.813, 0.413]],
  [0.268, [0.067, 0.813, 0.413]],
  [0.27, [0.082, 0.816, 0.416]],
  [0.272, [0.082, 0.816, 0.416]],
  [0.274, [0.098, 0.82, 0.42]],
  [0.276, [0.098, 0.82, 0.42]],
  [0.278, [0.114, 0.823, 0.423]],
  [0.28, [0.114, 0.823, 0.423]],
  [0.282, [0.129, 0.826, 0.426]],
  [0.284, [0.129, 0.826, 0.426]],
  [0.286, [0.145, 0.829, 0.429]],
  [0.288, [0.145, 0.829, 0.429]],
  [0.29, [0.161, 0.832, 0.432]],
  [0.292, [0.161, 0.832, 0.432]],
  [0.294, [0.176, 0.835, 0.435]],
  [0.295, [0.176, 0.835, 0.435]],
  [0.297, [0.192, 0.838, 0.438]],
  [0.299, [0.192, 0.838, 0.438]],
  [0.301, [0.208, 0.842, 0.442]],
  [0.303, [0.208, 0.842, 0.442]],
  [0.305, [0.224, 0.845, 0.445]],
  [0.307, [0.224, 0.845, 0.445]],
  [0.309, [0.239, 0.848, 0.448]],
  [0.311, [0.239, 0.848, 0.448]],
  [0.313, [0.255, 0.851, 0.451]],
  [0.315, [0.255, 0.851, 0.451]],
  [0.317, [0.271, 0.854, 0.454]],
  [0.319, [0.271, 0.854, 0.454]],
  [0.321, [0.286, 0.857, 0.457]],
  [0.323, [0.286, 0.857, 0.457]],
  [0.325, [0.302, 0.86, 0.46]],
  [0.327, [0.302, 0.86, 0.46]],
  [0.329, [0.318, 0.864, 0.464]],
  [0.331, [0.318, 0.864, 0.464]],
  [0.333, [0.333, 0.867, 0.467]],
  [0.335, [0.333, 0.867, 0.467]],
  [0.337, [0.349, 0.87, 0.47]],
  [0.339, [0.349, 0.87, 0.47]],
  [0.341, [0.365, 0.873, 0.473]],
  [0.342, [0.365, 0.873, 0.473]],
  [0.344, [0.38, 0.876, 0.476]],
  [0.346, [0.38, 0.876, 0.476]],
  [0.348, [0.396, 0.879, 0.479]],
  [0.35, [0.396, 0.879, 0.479]],
  [0.352, [0.412, 0.882, 0.482]],
  [0.354, [0.412, 0.882, 0.482]],
  [0.356, [0.427, 0.885, 0.485]],
  [0.358, [0.427, 0.885, 0.485]],
  [0.36, [0.443, 0.889, 0.489]],
  [0.362, [0.443, 0.889, 0.489]],
  [0.364, [0.459, 0.892, 0.492]],
  [0.366, [0.459, 0.892, 0.492]],
  [0.368, [0.475, 0.895, 0.495]],
  [0.37, [0.475, 0.895, 0.495]],
  [0.372, [0.49, 0.898, 0.498]],
  [0.374, [0.49, 0.898, 0.498]],
  [0.376, [0.506, 0.901, 0.501]],
  [0.378, [0.506, 0.901, 0.501]],
  [0.38, [0.522, 0.904, 0.504]],
  [0.382, [0.522, 0.904, 0.504]],
  [0.384, [0.537, 0.907, 0.507]],
  [0.386, [0.537, 0.907, 0.507]],
  [0.387, [0.553, 0.911, 0.511]],
  [0.389, [0.553, 0.911, 0.511]],
  [0.391, [0.569, 0.914, 0.514]],
  [0.393, [0.569, 0.914, 0.514]],
  [0.395, [0.584, 0.917, 0.517]],
  [0.397, [0.584, 0.917, 0.517]],
  [0.399, [0.6, 0.92, 0.52]],
  [0.401, [0.6, 0.92, 0.52]],
  [0.403, [0.616, 0.923, 0.523]],
  [0.405, [0.616, 0.923, 0.523]],
  [0.407, [0.631, 0.926, 0.526]],
  [0.409, [0.631, 0.926, 0.526]],
  [0.411, [0.647, 0.929, 0.529]],
  [0.413, [0.647, 0.929, 0.529]],
  [0.415, [0.663, 0.933, 0.533]],
  [0.417, [0.663, 0.933, 0.533]],
  [0.419, [0.678, 0.936, 0.536]],
  [0.421, [0.678, 0.936, 0.536]],
  [0.423, [0.694, 0.939, 0.539]],
  [0.425, [0.694, 0.939, 0.539]],
  [0.427, [0.71, 0.942, 0.542]],
  [0.429, [0.71, 0.942, 0.542]],
  [0.431, [0.725, 0.945, 0.545]],
  [0.432, [0.725, 0.945, 0.545]],
  [0.434, [0.741, 0.948, 0.548]],
  [0.436, [0.741, 0.948, 0.548]],
  [0.438, [0.757, 0.951, 0.551]],
  [0.44, [0.757, 0.951, 0.551]],
  [0.442, [0.773, 0.955, 0.555]],
  [0.444, [0.773, 0.955, 0.555]],
  [0.446, [0.788, 0.958, 0.558]],
  [0.448, [0.788, 0.958, 0.558]],
  [0.45, [0.804, 0.961, 0.561]],
  [0.452, [0.804, 0.961, 0.561]],
  [0.454, [0.82, 0.964, 0.564]],
  [0.456, [0.82, 0.964, 0.564]],
  [0.458, [0.835, 0.967, 0.567]],
  [0.46, [0.835, 0.967, 0.567]],
  [0.462, [0.851, 0.97, 0.57]],
  [0.464, [0.851, 0.97, 0.57]],
  [0.466, [0.867, 0.973, 0.573]],
  [0.468, [0.867, 0.973, 0.573]],
  [0.47, [0.882, 0.976, 0.576]],
  [0.472, [0.882, 0.976, 0.576]],
  [0.474, [0.898, 0.98, 0.58]],
  [0.476, [0.898, 0.98, 0.58]],
  [0.477, [0.914, 0.983, 0.583]],
  [0.479, [0.914, 0.983, 0.583]],
  [0.481, [0.929, 0.986, 0.586]],
  [0.483, [0.929, 0.986, 0.586]],
  [0.485, [0.945, 0.989, 0.589]],
  [0.487, [0.945, 0.989, 0.589]],
  [0.489, [0.961, 0.992, 0.592]],
  [0.491, [0.961, 0.992, 0.592]],
  [0.493, [0.976, 0.995, 0.595]],
  [0.495, [0.976, 0.995, 0.595]],
  [0.497, [0.992, 0.998, 0.598]],
  [0.499, [0.992, 0.998, 0.598]],
  [0.501, [0.996, 0.995, 0.598]],
  [0.503, [0.996, 0.995, 0.598]],
  [0.505, [0.988, 0.985, 0.594]],
  [0.507, [0.988, 0.985, 0.594]],
  [0.509, [0.98, 0.975, 0.589]],
  [0.511, [0.98, 0.975, 0.589]],
  [0.513, [0.973, 0.965, 0.585]],
  [0.515, [0.973, 0.965, 0.585]],
  [0.517, [0.965, 0.955, 0.581]],
  [0.519, [0.965, 0.955, 0.581]],
  [0.521, [0.957, 0.945, 0.577]],
  [0.523, [0.957, 0.945, 0.577]],
  [0.524, [0.949, 0.935, 0.572]],
  [0.526, [0.949, 0.935, 0.572]],
  [0.528, [0.941, 0.925, 0.568]],
  [0.53, [0.941, 0.925, 0.568]],
  [0.532, [0.933, 0.915, 0.564]],
  [0.534, [0.933, 0.915, 0.564]],
  [0.536, [0.925, 0.905, 0.56]],
  [0.538, [0.925, 0.905, 0.56]],
  [0.54, [0.918, 0.895, 0.556]],
  [0.542, [0.918, 0.895, 0.556]],
  [0.544, [0.91, 0.885, 0.551]],
  [0.546, [0.91, 0.885, 0.551]],
  [0.548, [0.902, 0.875, 0.547]],
  [0.55, [0.902, 0.875, 0.547]],
  [0.552, [0.894, 0.864, 0.543]],
  [0.554, [0.894, 0.864, 0.543]],
  [0.556, [0.886, 0.854, 0.539]],
  [0.558, [0.886, 0.854, 0.539]],
  [0.56, [0.878, 0.844, 0.534]],
  [0.562, [0.878, 0.844, 0.534]],
  [0.564, [0.871, 0.834, 0.53]],
  [0.566, [0.871, 0.834, 0.53]],
  [0.568, [0.863, 0.824, 0.526]],
  [0.569, [0.863, 0.824, 0.526]],
  [0.571, [0.855, 0.814, 0.522]],
  [0.573, [0.855, 0.814, 0.522]],
  [0.575, [0.847, 0.804, 0.517]],
  [0.577, [0.847, 0.804, 0.517]],
  [0.579, [0.839, 0.794, 0.513]],
  [0.581, [0.839, 0.794, 0.513]],
  [0.583, [0.831, 0.784, 0.509]],
  [0.585, [0.831, 0.784, 0.509]],
  [0.587, [0.824, 0.774, 0.505]],
  [0.589, [0.824, 0.774, 0.505]],
  [0.591, [0.816, 0.764, 0.5]],
  [0.593, [0.816, 0.764, 0.5]],
  [0.595, [0.808, 0.754, 0.496]],
  [0.597, [0.808, 0.754, 0.496]],
  [0.599, [0.8, 0.744, 0.492]],
  [0.601, [0.8, 0.744, 0.492]],
  [0.603, [0.792, 0.734, 0.488]],
  [0.605, [0.792, 0.734, 0.488]],
  [0.607, [0.784, 0.724, 0.484]],
  [0.609, [0.784, 0.724, 0.484]],
  [0.611, [0.776, 0.714, 0.479]],
  [0.613, [0.776, 0.714, 0.479]],
  [0.614, [0.769, 0.704, 0.475]],
  [0.616, [0.769, 0.704, 0.475]],
  [0.618, [0.761, 0.694, 0.471]],
  [0.62, [0.761, 0.694, 0.471]],
  [0.622, [0.753, 0.684, 0.467]],
  [0.624, [0.753, 0.684, 0.467]],
  [0.626, [0.745, 0.674, 0.462]],
  [0.628, [0.745, 0.674, 0.462]],
  [0.63, [0.737, 0.664, 0.458]],
  [0.632, [0.737, 0.664, 0.458]],
  [0.634, [0.729, 0.654, 0.454]],
  [0.636, [0.729, 0.654, 0.454]],
  [0.638, [0.722, 0.644, 0.45]],
  [0.64, [0.722, 0.644, 0.45]],
  [0.642, [0.714, 0.634, 0.445]],
  [0.644, [0.714, 0.634, 0.445]],
  [0.646, [0.706, 0.624, 0.441]],
  [0.648, [0.706, 0.624, 0.441]],
  [0.65, [0.698, 0.613, 0.437]],
  [0.652, [0.698, 0.613, 0.437]],
  [0.654, [0.69, 0.603, 0.433]],
  [0.656, [0.69, 0.603, 0.433]],
  [0.658, [0.682, 0.593, 0.428]],
  [0.659, [0.682, 0.593, 0.428]],
  [0.661, [0.675, 0.583, 0.424]],
  [0.663, [0.675, 0.583, 0.424]],
  [0.665, [0.667, 0.573, 0.42]],
  [0.667, [0.667, 0.573, 0.42]],
  [0.669, [0.659, 0.563, 0.416]],
  [0.671, [0.659, 0.563, 0.416]],
  [0.673, [0.651, 0.553, 0.412]],
  [0.675, [0.651, 0.553, 0.412]],
  [0.677, [0.643, 0.543, 0.407]],
  [0.679, [0.643, 0.543, 0.407]],
  [0.681, [0.635, 0.533, 0.403]],
  [0.683, [0.635, 0.533, 0.403]],
  [0.685, [0.627, 0.523, 0.399]],
  [0.687, [0.627, 0.523, 0.399]],
  [0.689, [0.62, 0.513, 0.395]],
  [0.691, [0.62, 0.513, 0.395]],
  [0.693, [0.612, 0.503, 0.39]],
  [0.695, [0.612, 0.503, 0.39]],
  [0.697, [0.604, 0.493, 0.386]],
  [0.699, [0.604, 0.493, 0.386]],
  [0.701, [0.596, 0.483, 0.382]],
  [0.703, [0.596, 0.483, 0.382]],
  [0.705, [0.588, 0.473, 0.378]],
  [0.706, [0.588, 0.473, 0.378]],
  [0.708, [0.58, 0.463, 0.373]],
  [0.71, [0.58, 0.463, 0.373]],
  [0.712, [0.573, 0.453, 0.369]],
  [0.714, [0.573, 0.453, 0.369]],
  [0.716, [0.565, 0.443, 0.365]],
  [0.718, [0.565, 0.443, 0.365]],
  [0.72, [0.557, 0.433, 0.361]],
  [0.722, [0.557, 0.433, 0.361]],
  [0.724, [0.549, 0.423, 0.356]],
  [0.726, [0.549, 0.423, 0.356]],
  [0.728, [0.541, 0.413, 0.352]],
  [0.73, [0.541, 0.413, 0.352]],
  [0.732, [0.533, 0.403, 0.348]],
  [0.734, [0.533, 0.403, 0.348]],
  [0.736, [0.525, 0.393, 0.344]],
  [0.738, [0.525, 0.393, 0.344]],
  [0.74, [0.518, 0.383, 0.34]],
  [0.742, [0.518, 0.383, 0.34]],
  [0.744, [0.51, 0.373, 0.335]],
  [0.746, [0.51, 0.373, 0.335]],
  [0.748, [0.502, 0.363, 0.331]],
  [0.75, [0.502, 0.363, 0.331]],
  [0.751, [0.506, 0.368, 0.338]],
  [0.753, [0.506, 0.368, 0.338]],
  [0.755, [0.514, 0.378, 0.348]],
  [0.757, [0.514, 0.378, 0.348]],
  [0.759, [0.522, 0.388, 0.359]],
  [0.761, [0.522, 0.388, 0.359]],
  [0.763, [0.529, 0.398, 0.369]],
  [0.765, [0.529, 0.398, 0.369]],
  [0.767, [0.537, 0.408, 0.38]],
  [0.769, [0.537, 0.408, 0.38]],
  [0.771, [0.545, 0.418, 0.39]],
  [0.773, [0.545, 0.418, 0.39]],
  [0.775, [0.553, 0.428, 0.401]],
  [0.777, [0.553, 0.428, 0.401]],
  [0.779, [0.561, 0.438, 0.411]],
  [0.781, [0.561, 0.438, 0.411]],
  [0.783, [0.569, 0.448, 0.422]],
  [0.785, [0.569, 0.448, 0.422]],
  [0.787, [0.576, 0.458, 0.432]],
  [0.789, [0.576, 0.458, 0.432]],
  [0.791, [0.584, 0.468, 0.443]],
  [0.793, [0.584, 0.468, 0.443]],
  [0.795, [0.592, 0.478, 0.453]],
  [0.796, [0.592, 0.478, 0.453]],
  [0.798, [0.6, 0.488, 0.464]],
  [0.8, [0.6, 0.488, 0.464]],
  [0.802, [0.608, 0.498, 0.475]],
  [0.804, [0.608, 0.498, 0.475]],
  [0.806, [0.616, 0.508, 0.485]],
  [0.808, [0.616, 0.508, 0.485]],
  [0.81, [0.624, 0.518, 0.496]],
  [0.812, [0.624, 0.518, 0.496]],
  [0.814, [0.631, 0.528, 0.506]],
  [0.816, [0.631, 0.528, 0.506]],
  [0.818, [0.639, 0.538, 0.517]],
  [0.82, [0.639, 0.538, 0.517]],
  [0.822, [0.647, 0.548, 0.527]],
  [0.824, [0.647, 0.548, 0.527]],
  [0.826, [0.655, 0.558, 0.538]],
  [0.828, [0.655, 0.558, 0.538]],
  [0.83, [0.663, 0.568, 0.548]],
  [0.832, [0.663, 0.568, 0.548]],
  [0.834, [0.671, 0.578, 0.559]],
  [0.836, [0.671, 0.578, 0.559]],
  [0.838, [0.678, 0.588, 0.569]],
  [0.84, [0.678, 0.588, 0.569]],
  [0.841, [0.686, 0.598, 0.58]],
  [0.843, [0.686, 0.598, 0.58]],
  [0.845, [0.694, 0.608, 0.59]],
  [0.847, [0.694, 0.608, 0.59]],
  [0.849, [0.702, 0.619, 0.601]],
  [0.851, [0.702, 0.619, 0.601]],
  [0.853, [0.71, 0.629, 0.611]],
  [0.855, [0.71, 0.629, 0.611]],
  [0.857, [0.718, 0.639, 0.622]],
  [0.859, [0.718, 0.639, 0.622]],
  [0.861, [0.725, 0.649, 0.632]],
  [0.863, [0.725, 0.649, 0.632]],
  [0.865, [0.733, 0.659, 0.643]],
  [0.867, [0.733, 0.659, 0.643]],
  [0.869, [0.741, 0.669, 0.653]],
  [0.871, [0.741, 0.669, 0.653]],
  [0.873, [0.749, 0.679, 0.664]],
  [0.875, [0.749, 0.679, 0.664]],
  [0.877, [0.757, 0.689, 0.674]],
  [0.879, [0.757, 0.689, 0.674]],
  [0.881, [0.765, 0.699, 0.685]],
  [0.883, [0.765, 0.699, 0.685]],
  [0.885, [0.773, 0.709, 0.695]],
  [0.886, [0.773, 0.709, 0.695]],
  [0.888, [0.78, 0.719, 0.706]],
  [0.89, [0.78, 0.719, 0.706]],
  [0.892, [0.788, 0.729, 0.716]],
  [0.894, [0.788, 0.729, 0.716]],
  [0.896, [0.796, 0.739, 0.727]],
  [0.898, [0.796, 0.739, 0.727]],
  [0.9, [0.804, 0.749, 0.737]],
  [0.902, [0.804, 0.749, 0.737]],
  [0.904, [0.812, 0.759, 0.748]],
  [0.906, [0.812, 0.759, 0.748]],
  [0.908, [0.82, 0.769, 0.758]],
  [0.91, [0.82, 0.769, 0.758]],
  [0.912, [0.827, 0.779, 0.769]],
  [0.914, [0.827, 0.779, 0.769]],
  [0.916, [0.835, 0.789, 0.779]],
  [0.918, [0.835, 0.789, 0.779]],
  [0.92, [0.843, 0.799, 0.79]],
  [0.922, [0.843, 0.799, 0.79]],
  [0.924, [0.851, 0.809, 0.8]],
  [0.926, [0.851, 0.809, 0.8]],
  [0.928, [0.859, 0.819, 0.811]],
  [0.93, [0.859, 0.819, 0.811]],
  [0.932, [0.867, 0.829, 0.821]],
  [0.933, [0.867, 0.829, 0.821]],
  [0.935, [0.875, 0.839, 0.832]],
  [0.937, [0.875, 0.839, 0.832]],
  [0.939, [0.882, 0.849, 0.842]],
  [0.941, [0.882, 0.849, 0.842]],
  [0.943, [0.89, 0.859, 0.853]],
  [0.945, [0.89, 0.859, 0.853]],
  [0.947, [0.898, 0.869, 0.863]],
  [0.949, [0.898, 0.869, 0.863]],
  [0.951, [0.906, 0.88, 0.874]],
  [0.953, [0.906, 0.88, 0.874]],
  [0.955, [0.914, 0.89, 0.884]],
  [0.957, [0.914, 0.89, 0.884]],
  [0.959, [0.922, 0.9, 0.895]],
  [0.961, [0.922, 0.9, 0.895]],
  [0.963, [0.929, 0.91, 0.905]],
  [0.965, [0.929, 0.91, 0.905]],
  [0.967, [0.937, 0.92, 0.916]],
  [0.969, [0.937, 0.92, 0.916]],
  [0.971, [0.945, 0.93, 0.926]],
  [0.973, [0.945, 0.93, 0.926]],
  [0.975, [0.953, 0.94, 0.937]],
  [0.977, [0.953, 0.94, 0.937]],
  [0.978, [0.961, 0.95, 0.947]],
  [0.98, [0.961, 0.95, 0.947]],
  [0.982, [0.969, 0.96, 0.958]],
  [0.984, [0.969, 0.96, 0.958]],
  [0.986, [0.976, 0.97, 0.968]],
  [0.988, [0.976, 0.97, 0.968]],
  [0.99, [0.984, 0.98, 0.979]],
  [0.992, [0.984, 0.98, 0.979]],
  [0.994, [0.992, 0.99, 0.989]],
  [0.996, [0.992, 0.99, 0.989]],
  [0.998, [1, 1, 1]],
  [1, [1, 1, 1]]
], Jp = {
  Greys: cp,
  Purples: mp,
  Blues: sp,
  Greens: lp,
  Oranges: up,
  Reds: _p,
  YlOrBr: xp,
  YlOrRd: bp,
  OrRd: hp,
  PuRd: pp,
  RdPu: gp,
  BuPu: ap,
  GnBu: op,
  PuBu: dp,
  YlGnBu: yp,
  PuBuGn: fp,
  BuGn: rp,
  YlGn: vp,
  gray: Cp,
  bone: Sp,
  pink: Lp,
  spring: Rp,
  summer: Pp,
  autumn: Mp,
  winter: Dp,
  cool: Ep,
  hot: Ip,
  afmhot: wp,
  gist_heat: Ap,
  copper: Tp,
  PiYG: Bf,
  PRGn: kf,
  BrBG: zf,
  PuOr: Vf,
  RdGy: Gf,
  RdBu: Hf,
  RdYlBu: Wf,
  RdYlGn: Xf,
  Spectral: Yf,
  coolwarm: qf,
  bwr: Zf,
  seismic: $f,
  hsv: Wp,
  Pastel1: Qf,
  Pastel2: ep,
  Paired: Kf,
  Accent: jf,
  Dark2: Jf,
  Set1: tp,
  Set2: np,
  Set3: ip,
  flag: Fp,
  prism: qp,
  ocean: Zp,
  gist_earth: zp,
  terrain: jp,
  gist_stern: Vp,
  gnuplot: Hp,
  gnuplot2: Gp,
  CMRmap: Np,
  cubehelix: Up,
  brg: Op,
  gist_rainbow: Bp,
  rainbow: $p,
  jet: Xp,
  nipy_spectral: Yp,
  gist_ncar: kp
};
let gt = {
  Sequential: {},
  Sequential2: {},
  Diverging: {},
  Cyclic: {},
  Qualitative: {},
  Miscellaneous: {}
};
Ff.map((i) => {
  for (let e in gt)
    i.sequenceName == e && i.sequenceCmapList.map((t) => {
      gt[e][t] = Jp[t];
    });
});
class EC {
  constructor(e) {
    I(this, "currentMapName", "");
    I(this, "Sequential", gt.Sequential);
    I(this, "Sequential2", gt.Sequential2);
    I(this, "Diverging", gt.Diverging);
    I(this, "Cyclic", gt.Cyclic);
    I(this, "Qualitative", gt.Qualitative);
    I(this, "Miscellaneous", gt.Miscellaneous);
    I(this, "CustomCmap", {});
    I(this, "currentColorMap", null);
    I(this, "getColorMaps", () => gt);
    e ? (this.currentColorMap = this.getColorMap(e), this.currentMapName = e) : (this.currentColorMap = gt.Sequential.Greys, this.currentMapName = "Greys");
  }
  getColorMap(e) {
    e == null && (e = this.currentMapName);
    let t = 0;
    for (let n in gt) {
      if (Object.keys(gt[n]).indexOf(e) >= 0)
        return this.currentMapName = e, gt[n][e];
      if (t++, t == Object.keys(gt).length)
        return gt.Sequential.Greys;
    }
  }
  addCustomColorMap(e) {
  }
}
/**
 * @license
 * Copyright 2010-2023 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
const $r = "151", Kp = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 }, Qp = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 }, gc = 0, q3 = 1, _c = 2, em = 3, tm = 0, i2 = 1, vc = 2, P9 = 3, an = 0, ut = 1, Nt = 2, nm = 2, rn = 0, Ri = 1, $3 = 2, j3 = 3, J3 = 4, yc = 5, vi = 100, xc = 101, bc = 102, K3 = 103, Q3 = 104, wc = 200, Mc = 201, Sc = 202, Ec = 203, s2 = 204, r2 = 205, Tc = 206, Ac = 207, Cc = 208, Ic = 209, Lc = 210, Rc = 0, Pc = 1, Dc = 2, Dr = 3, Nc = 4, Oc = 5, Uc = 6, Fc = 7, Ls = 0, zc = 1, kc = 2, D1 = 0, Bc = 1, Vc = 2, Hc = 3, Gc = 4, Wc = 5, jr = 300, Yn = 301, Zn = 302, is = 303, ss = 304, e8 = 306, rs = 1e3, ht = 1001, as = 1002, ke = 1003, Nr = 1004, im = 1004, k8 = 1005, sm = 1005, Pe = 1006, a2 = 1007, rm = 1007, qn = 1008, am = 1008, $n = 1009, Xc = 1010, Yc = 1011, o2 = 1012, Zc = 1013, Un = 1014, P1 = 1015, q9 = 1016, qc = 1017, $c = 1018, Pi = 1020, jc = 1021, Ot = 1023, Jc = 1024, Kc = 1025, Hn = 1026, Oi = 1027, l2 = 1028, Qc = 1029, eh = 1030, th = 1031, nh = 1033, dr = 33776, fr = 33777, pr = 33778, mr = 33779, e5 = 35840, t5 = 35841, n5 = 35842, i5 = 35843, ih = 36196, s5 = 37492, r5 = 37496, a5 = 37808, o5 = 37809, l5 = 37810, c5 = 37811, h5 = 37812, u5 = 37813, d5 = 37814, f5 = 37815, p5 = 37816, m5 = 37817, g5 = 37818, _5 = 37819, v5 = 37820, y5 = 37821, gr = 36492, sh = 36283, x5 = 36284, b5 = 36285, w5 = 36286, rh = 2200, ah = 2201, oh = 2202, os = 2300, ls = 2301, _r = 2302, xi = 2400, bi = 2401, cs = 2402, Jr = 2500, c2 = 2501, lh = 0, ch = 1, M5 = 2, jn = 3e3, ve = 3001, hh = 3200, uh = 3201, Qn = 0, dh = 1, om = "", i1 = "srgb", $9 = "srgb-linear", h2 = "display-p3", lm = 0, vr = 7680, cm = 7681, hm = 7682, um = 7683, dm = 34055, fm = 34056, pm = 5386, mm = 512, gm = 513, _m = 514, vm = 515, ym = 516, xm = 517, bm = 518, fh = 519, hs = 35044, wm = 35048, Mm = 35040, Sm = 35045, Em = 35049, Tm = 35041, Am = 35046, Cm = 35050, Im = 35042, Lm = "100", S5 = "300 es", Or = 1035;
let ln = class {
  addEventListener(e, t) {
    this._listeners === void 0 && (this._listeners = {});
    const n = this._listeners;
    n[e] === void 0 && (n[e] = []), n[e].indexOf(t) === -1 && n[e].push(t);
  }
  hasEventListener(e, t) {
    if (this._listeners === void 0)
      return !1;
    const n = this._listeners;
    return n[e] !== void 0 && n[e].indexOf(t) !== -1;
  }
  removeEventListener(e, t) {
    if (this._listeners === void 0)
      return;
    const s = this._listeners[e];
    if (s !== void 0) {
      const r = s.indexOf(t);
      r !== -1 && s.splice(r, 1);
    }
  }
  dispatchEvent(e) {
    if (this._listeners === void 0)
      return;
    const n = this._listeners[e.type];
    if (n !== void 0) {
      e.target = this;
      const s = n.slice(0);
      for (let r = 0, a = s.length; r < a; r++)
        s[r].call(this, e);
      e.target = null;
    }
  }
};
const at = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
let x4 = 1234567;
const Di = Math.PI / 180, j9 = 180 / Math.PI;
function kt() {
  const i = Math.random() * 4294967295 | 0, e = Math.random() * 4294967295 | 0, t = Math.random() * 4294967295 | 0, n = Math.random() * 4294967295 | 0;
  return (at[i & 255] + at[i >> 8 & 255] + at[i >> 16 & 255] + at[i >> 24 & 255] + "-" + at[e & 255] + at[e >> 8 & 255] + "-" + at[e >> 16 & 15 | 64] + at[e >> 24 & 255] + "-" + at[t & 63 | 128] + at[t >> 8 & 255] + "-" + at[t >> 16 & 255] + at[t >> 24 & 255] + at[n & 255] + at[n >> 8 & 255] + at[n >> 16 & 255] + at[n >> 24 & 255]).toLowerCase();
}
function De(i, e, t) {
  return Math.max(e, Math.min(t, i));
}
function u2(i, e) {
  return (i % e + e) % e;
}
function Rm(i, e, t, n, s) {
  return n + (i - e) * (s - n) / (t - e);
}
function Pm(i, e, t) {
  return i !== e ? (t - i) / (e - i) : 0;
}
function B8(i, e, t) {
  return (1 - t) * i + t * e;
}
function Dm(i, e, t, n) {
  return B8(i, e, 1 - Math.exp(-t * n));
}
function Nm(i, e = 1) {
  return e - Math.abs(u2(i, e * 2) - e);
}
function Om(i, e, t) {
  return i <= e ? 0 : i >= t ? 1 : (i = (i - e) / (t - e), i * i * (3 - 2 * i));
}
function Um(i, e, t) {
  return i <= e ? 0 : i >= t ? 1 : (i = (i - e) / (t - e), i * i * i * (i * (i * 6 - 15) + 10));
}
function Fm(i, e) {
  return i + Math.floor(Math.random() * (e - i + 1));
}
function zm(i, e) {
  return i + Math.random() * (e - i);
}
function km(i) {
  return i * (0.5 - Math.random());
}
function Bm(i) {
  i !== void 0 && (x4 = i);
  let e = x4 += 1831565813;
  return e = Math.imul(e ^ e >>> 15, e | 1), e ^= e + Math.imul(e ^ e >>> 7, e | 61), ((e ^ e >>> 14) >>> 0) / 4294967296;
}
function Vm(i) {
  return i * Di;
}
function Hm(i) {
  return i * j9;
}
function E5(i) {
  return (i & i - 1) === 0 && i !== 0;
}
function ph(i) {
  return Math.pow(2, Math.ceil(Math.log(i) / Math.LN2));
}
function mh(i) {
  return Math.pow(2, Math.floor(Math.log(i) / Math.LN2));
}
function Gm(i, e, t, n, s) {
  const r = Math.cos, a = Math.sin, o = r(t / 2), c = a(t / 2), l = r((e + n) / 2), h = a((e + n) / 2), d = r((e - n) / 2), u = a((e - n) / 2), f = r((n - e) / 2), p = a((n - e) / 2);
  switch (s) {
    case "XYX":
      i.set(o * h, c * d, c * u, o * l);
      break;
    case "YZY":
      i.set(c * u, o * h, c * d, o * l);
      break;
    case "ZXZ":
      i.set(c * d, c * u, o * h, o * l);
      break;
    case "XZX":
      i.set(o * h, c * p, c * f, o * l);
      break;
    case "YXY":
      i.set(c * f, o * h, c * p, o * l);
      break;
    case "ZYZ":
      i.set(c * p, c * f, o * h, o * l);
      break;
    default:
      console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + s);
  }
}
function Ut(i, e) {
  switch (e.constructor) {
    case Float32Array:
      return i;
    case Uint16Array:
      return i / 65535;
    case Uint8Array:
      return i / 255;
    case Int16Array:
      return Math.max(i / 32767, -1);
    case Int8Array:
      return Math.max(i / 127, -1);
    default:
      throw new Error("Invalid component type.");
  }
}
function Z0(i, e) {
  switch (e.constructor) {
    case Float32Array:
      return i;
    case Uint16Array:
      return Math.round(i * 65535);
    case Uint8Array:
      return Math.round(i * 255);
    case Int16Array:
      return Math.round(i * 32767);
    case Int8Array:
      return Math.round(i * 127);
    default:
      throw new Error("Invalid component type.");
  }
}
const D8 = {
  DEG2RAD: Di,
  RAD2DEG: j9,
  generateUUID: kt,
  clamp: De,
  euclideanModulo: u2,
  mapLinear: Rm,
  inverseLerp: Pm,
  lerp: B8,
  damp: Dm,
  pingpong: Nm,
  smoothstep: Om,
  smootherstep: Um,
  randInt: Fm,
  randFloat: zm,
  randFloatSpread: km,
  seededRandom: Bm,
  degToRad: Vm,
  radToDeg: Hm,
  isPowerOfTwo: E5,
  ceilPowerOfTwo: ph,
  floorPowerOfTwo: mh,
  setQuaternionFromProperEuler: Gm,
  normalize: Z0,
  denormalize: Ut
};
class o0 {
  constructor(e = 0, t = 0) {
    o0.prototype.isVector2 = !0, this.x = e, this.y = t;
  }
  get width() {
    return this.x;
  }
  set width(e) {
    this.x = e;
  }
  get height() {
    return this.y;
  }
  set height(e) {
    this.y = e;
  }
  set(e, t) {
    return this.x = e, this.y = t, this;
  }
  setScalar(e) {
    return this.x = e, this.y = e, this;
  }
  setX(e) {
    return this.x = e, this;
  }
  setY(e) {
    return this.y = e, this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y);
  }
  copy(e) {
    return this.x = e.x, this.y = e.y, this;
  }
  add(e) {
    return this.x += e.x, this.y += e.y, this;
  }
  addScalar(e) {
    return this.x += e, this.y += e, this;
  }
  addVectors(e, t) {
    return this.x = e.x + t.x, this.y = e.y + t.y, this;
  }
  addScaledVector(e, t) {
    return this.x += e.x * t, this.y += e.y * t, this;
  }
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this;
  }
  subScalar(e) {
    return this.x -= e, this.y -= e, this;
  }
  subVectors(e, t) {
    return this.x = e.x - t.x, this.y = e.y - t.y, this;
  }
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this;
  }
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this;
  }
  divide(e) {
    return this.x /= e.x, this.y /= e.y, this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  applyMatrix3(e) {
    const t = this.x, n = this.y, s = e.elements;
    return this.x = s[0] * t + s[3] * n + s[6], this.y = s[1] * t + s[4] * n + s[7], this;
  }
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this;
  }
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this;
  }
  clamp(e, t) {
    return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this;
  }
  clampScalar(e, t) {
    return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this;
  }
  clampLength(e, t) {
    const n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this;
  }
  roundToZero() {
    return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y;
  }
  cross(e) {
    return this.x * e.y - this.y * e.x;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  angle() {
    return Math.atan2(-this.y, -this.x) + Math.PI;
  }
  angleTo(e) {
    const t = Math.sqrt(this.lengthSq() * e.lengthSq());
    if (t === 0)
      return Math.PI / 2;
    const n = this.dot(e) / t;
    return Math.acos(De(n, -1, 1));
  }
  distanceTo(e) {
    return Math.sqrt(this.distanceToSquared(e));
  }
  distanceToSquared(e) {
    const t = this.x - e.x, n = this.y - e.y;
    return t * t + n * n;
  }
  manhattanDistanceTo(e) {
    return Math.abs(this.x - e.x) + Math.abs(this.y - e.y);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this;
  }
  lerpVectors(e, t, n) {
    return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y;
  }
  fromArray(e, t = 0) {
    return this.x = e[t], this.y = e[t + 1], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.x, e[t + 1] = this.y, e;
  }
  fromBufferAttribute(e, t) {
    return this.x = e.getX(t), this.y = e.getY(t), this;
  }
  rotateAround(e, t) {
    const n = Math.cos(t), s = Math.sin(t), r = this.x - e.x, a = this.y - e.y;
    return this.x = r * n - a * s + e.x, this.y = r * s + a * n + e.y, this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y;
  }
}
class $0 {
  constructor() {
    $0.prototype.isMatrix3 = !0, this.elements = [
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ];
  }
  set(e, t, n, s, r, a, o, c, l) {
    const h = this.elements;
    return h[0] = e, h[1] = s, h[2] = o, h[3] = t, h[4] = r, h[5] = c, h[6] = n, h[7] = a, h[8] = l, this;
  }
  identity() {
    return this.set(
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ), this;
  }
  copy(e) {
    const t = this.elements, n = e.elements;
    return t[0] = n[0], t[1] = n[1], t[2] = n[2], t[3] = n[3], t[4] = n[4], t[5] = n[5], t[6] = n[6], t[7] = n[7], t[8] = n[8], this;
  }
  extractBasis(e, t, n) {
    return e.setFromMatrix3Column(this, 0), t.setFromMatrix3Column(this, 1), n.setFromMatrix3Column(this, 2), this;
  }
  setFromMatrix4(e) {
    const t = e.elements;
    return this.set(
      t[0],
      t[4],
      t[8],
      t[1],
      t[5],
      t[9],
      t[2],
      t[6],
      t[10]
    ), this;
  }
  multiply(e) {
    return this.multiplyMatrices(this, e);
  }
  premultiply(e) {
    return this.multiplyMatrices(e, this);
  }
  multiplyMatrices(e, t) {
    const n = e.elements, s = t.elements, r = this.elements, a = n[0], o = n[3], c = n[6], l = n[1], h = n[4], d = n[7], u = n[2], f = n[5], p = n[8], _ = s[0], g = s[3], m = s[6], v = s[1], y = s[4], b = s[7], w = s[2], x = s[5], S = s[8];
    return r[0] = a * _ + o * v + c * w, r[3] = a * g + o * y + c * x, r[6] = a * m + o * b + c * S, r[1] = l * _ + h * v + d * w, r[4] = l * g + h * y + d * x, r[7] = l * m + h * b + d * S, r[2] = u * _ + f * v + p * w, r[5] = u * g + f * y + p * x, r[8] = u * m + f * b + p * S, this;
  }
  multiplyScalar(e) {
    const t = this.elements;
    return t[0] *= e, t[3] *= e, t[6] *= e, t[1] *= e, t[4] *= e, t[7] *= e, t[2] *= e, t[5] *= e, t[8] *= e, this;
  }
  determinant() {
    const e = this.elements, t = e[0], n = e[1], s = e[2], r = e[3], a = e[4], o = e[5], c = e[6], l = e[7], h = e[8];
    return t * a * h - t * o * l - n * r * h + n * o * c + s * r * l - s * a * c;
  }
  invert() {
    const e = this.elements, t = e[0], n = e[1], s = e[2], r = e[3], a = e[4], o = e[5], c = e[6], l = e[7], h = e[8], d = h * a - o * l, u = o * c - h * r, f = l * r - a * c, p = t * d + n * u + s * f;
    if (p === 0)
      return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
    const _ = 1 / p;
    return e[0] = d * _, e[1] = (s * l - h * n) * _, e[2] = (o * n - s * a) * _, e[3] = u * _, e[4] = (h * t - s * c) * _, e[5] = (s * r - o * t) * _, e[6] = f * _, e[7] = (n * c - l * t) * _, e[8] = (a * t - n * r) * _, this;
  }
  transpose() {
    let e;
    const t = this.elements;
    return e = t[1], t[1] = t[3], t[3] = e, e = t[2], t[2] = t[6], t[6] = e, e = t[5], t[5] = t[7], t[7] = e, this;
  }
  getNormalMatrix(e) {
    return this.setFromMatrix4(e).invert().transpose();
  }
  transposeIntoArray(e) {
    const t = this.elements;
    return e[0] = t[0], e[1] = t[3], e[2] = t[6], e[3] = t[1], e[4] = t[4], e[5] = t[7], e[6] = t[2], e[7] = t[5], e[8] = t[8], this;
  }
  setUvTransform(e, t, n, s, r, a, o) {
    const c = Math.cos(r), l = Math.sin(r);
    return this.set(
      n * c,
      n * l,
      -n * (c * a + l * o) + a + e,
      -s * l,
      s * c,
      -s * (-l * a + c * o) + o + t,
      0,
      0,
      1
    ), this;
  }
  //
  scale(e, t) {
    return this.premultiply(A6.makeScale(e, t)), this;
  }
  rotate(e) {
    return this.premultiply(A6.makeRotation(-e)), this;
  }
  translate(e, t) {
    return this.premultiply(A6.makeTranslation(e, t)), this;
  }
  // for 2D Transforms
  makeTranslation(e, t) {
    return this.set(
      1,
      0,
      e,
      0,
      1,
      t,
      0,
      0,
      1
    ), this;
  }
  makeRotation(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      t,
      -n,
      0,
      n,
      t,
      0,
      0,
      0,
      1
    ), this;
  }
  makeScale(e, t) {
    return this.set(
      e,
      0,
      0,
      0,
      t,
      0,
      0,
      0,
      1
    ), this;
  }
  //
  equals(e) {
    const t = this.elements, n = e.elements;
    for (let s = 0; s < 9; s++)
      if (t[s] !== n[s])
        return !1;
    return !0;
  }
  fromArray(e, t = 0) {
    for (let n = 0; n < 9; n++)
      this.elements[n] = e[n + t];
    return this;
  }
  toArray(e = [], t = 0) {
    const n = this.elements;
    return e[t] = n[0], e[t + 1] = n[1], e[t + 2] = n[2], e[t + 3] = n[3], e[t + 4] = n[4], e[t + 5] = n[5], e[t + 6] = n[6], e[t + 7] = n[7], e[t + 8] = n[8], e;
  }
  clone() {
    return new this.constructor().fromArray(this.elements);
  }
}
const A6 = /* @__PURE__ */ new $0();
function gh(i) {
  for (let e = i.length - 1; e >= 0; --e)
    if (i[e] >= 65535)
      return !0;
  return !1;
}
const Wm = {
  Int8Array,
  Uint8Array,
  Uint8ClampedArray,
  Int16Array,
  Uint16Array,
  Int32Array,
  Uint32Array,
  Float32Array,
  Float64Array
};
function D9(i, e) {
  return new Wm[i](e);
}
function us(i) {
  return document.createElementNS("http://www.w3.org/1999/xhtml", i);
}
function z9(i) {
  return i < 0.04045 ? i * 0.0773993808 : Math.pow(i * 0.9478672986 + 0.0521327014, 2.4);
}
function C6(i) {
  return i < 31308e-7 ? i * 12.92 : 1.055 * Math.pow(i, 0.41666) - 0.055;
}
const Xm = /* @__PURE__ */ new $0().fromArray([
  0.8224621,
  0.0331941,
  0.0170827,
  0.177538,
  0.9668058,
  0.0723974,
  -1e-7,
  1e-7,
  0.9105199
]), Ym = /* @__PURE__ */ new $0().fromArray([
  1.2249401,
  -0.0420569,
  -0.0196376,
  -0.2249404,
  1.0420571,
  -0.0786361,
  1e-7,
  0,
  1.0982735
]);
function Zm(i) {
  return i.convertSRGBToLinear().applyMatrix3(Ym);
}
function qm(i) {
  return i.applyMatrix3(Xm).convertLinearToSRGB();
}
const $m = {
  [$9]: (i) => i,
  [i1]: (i) => i.convertSRGBToLinear(),
  [h2]: Zm
}, jm = {
  [$9]: (i) => i,
  [i1]: (i) => i.convertLinearToSRGB(),
  [h2]: qm
}, Mt = {
  enabled: !1,
  get legacyMode() {
    return console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."), !this.enabled;
  },
  set legacyMode(i) {
    console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."), this.enabled = !i;
  },
  get workingColorSpace() {
    return $9;
  },
  set workingColorSpace(i) {
    console.warn("THREE.ColorManagement: .workingColorSpace is readonly.");
  },
  convert: function(i, e, t) {
    if (this.enabled === !1 || e === t || !e || !t)
      return i;
    const n = $m[e], s = jm[t];
    if (n === void 0 || s === void 0)
      throw new Error(`Unsupported color space conversion, "${e}" to "${t}".`);
    return s(n(i));
  },
  fromWorkingColorSpace: function(i, e) {
    return this.convert(i, this.workingColorSpace, e);
  },
  toWorkingColorSpace: function(i, e) {
    return this.convert(i, e, this.workingColorSpace);
  }
};
let e9;
class d2 {
  static getDataURL(e) {
    if (/^data:/i.test(e.src) || typeof HTMLCanvasElement > "u")
      return e.src;
    let t;
    if (e instanceof HTMLCanvasElement)
      t = e;
    else {
      e9 === void 0 && (e9 = us("canvas")), e9.width = e.width, e9.height = e.height;
      const n = e9.getContext("2d");
      e instanceof ImageData ? n.putImageData(e, 0, 0) : n.drawImage(e, 0, 0, e.width, e.height), t = e9;
    }
    return t.width > 2048 || t.height > 2048 ? (console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", e), t.toDataURL("image/jpeg", 0.6)) : t.toDataURL("image/png");
  }
  static sRGBToLinear(e) {
    if (typeof HTMLImageElement < "u" && e instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && e instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && e instanceof ImageBitmap) {
      const t = us("canvas");
      t.width = e.width, t.height = e.height;
      const n = t.getContext("2d");
      n.drawImage(e, 0, 0, e.width, e.height);
      const s = n.getImageData(0, 0, e.width, e.height), r = s.data;
      for (let a = 0; a < r.length; a++)
        r[a] = z9(r[a] / 255) * 255;
      return n.putImageData(s, 0, 0), t;
    } else if (e.data) {
      const t = e.data.slice(0);
      for (let n = 0; n < t.length; n++)
        t instanceof Uint8Array || t instanceof Uint8ClampedArray ? t[n] = Math.floor(z9(t[n] / 255) * 255) : t[n] = z9(t[n]);
      return {
        data: t,
        width: e.width,
        height: e.height
      };
    } else
      return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."), e;
  }
}
class wi {
  constructor(e = null) {
    this.isSource = !0, this.uuid = kt(), this.data = e, this.version = 0;
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    if (!t && e.images[this.uuid] !== void 0)
      return e.images[this.uuid];
    const n = {
      uuid: this.uuid,
      url: ""
    }, s = this.data;
    if (s !== null) {
      let r;
      if (Array.isArray(s)) {
        r = [];
        for (let a = 0, o = s.length; a < o; a++)
          s[a].isDataTexture ? r.push(I6(s[a].image)) : r.push(I6(s[a]));
      } else
        r = I6(s);
      n.url = r;
    }
    return t || (e.images[this.uuid] = n), n;
  }
}
function I6(i) {
  return typeof HTMLImageElement < "u" && i instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && i instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && i instanceof ImageBitmap ? d2.getDataURL(i) : i.data ? {
    data: Array.from(i.data),
    width: i.width,
    height: i.height,
    type: i.data.constructor.name
  } : (console.warn("THREE.Texture: Unable to serialize Texture."), {});
}
let Jm = 0;
class Be extends ln {
  constructor(e = Be.DEFAULT_IMAGE, t = Be.DEFAULT_MAPPING, n = ht, s = ht, r = Pe, a = qn, o = Ot, c = $n, l = Be.DEFAULT_ANISOTROPY, h = jn) {
    super(), this.isTexture = !0, Object.defineProperty(this, "id", { value: Jm++ }), this.uuid = kt(), this.name = "", this.source = new wi(e), this.mipmaps = [], this.mapping = t, this.channel = 0, this.wrapS = n, this.wrapT = s, this.magFilter = r, this.minFilter = a, this.anisotropy = l, this.format = o, this.internalFormat = null, this.type = c, this.offset = new o0(0, 0), this.repeat = new o0(1, 1), this.center = new o0(0, 0), this.rotation = 0, this.matrixAutoUpdate = !0, this.matrix = new $0(), this.generateMipmaps = !0, this.premultiplyAlpha = !1, this.flipY = !0, this.unpackAlignment = 4, this.encoding = h, this.userData = {}, this.version = 0, this.onUpdate = null, this.isRenderTargetTexture = !1, this.needsPMREMUpdate = !1;
  }
  get image() {
    return this.source.data;
  }
  set image(e = null) {
    this.source.data = e;
  }
  updateMatrix() {
    this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.name = e.name, this.source = e.source, this.mipmaps = e.mipmaps.slice(0), this.mapping = e.mapping, this.channel = e.channel, this.wrapS = e.wrapS, this.wrapT = e.wrapT, this.magFilter = e.magFilter, this.minFilter = e.minFilter, this.anisotropy = e.anisotropy, this.format = e.format, this.internalFormat = e.internalFormat, this.type = e.type, this.offset.copy(e.offset), this.repeat.copy(e.repeat), this.center.copy(e.center), this.rotation = e.rotation, this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrix.copy(e.matrix), this.generateMipmaps = e.generateMipmaps, this.premultiplyAlpha = e.premultiplyAlpha, this.flipY = e.flipY, this.unpackAlignment = e.unpackAlignment, this.encoding = e.encoding, this.userData = JSON.parse(JSON.stringify(e.userData)), this.needsUpdate = !0, this;
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    if (!t && e.textures[this.uuid] !== void 0)
      return e.textures[this.uuid];
    const n = {
      metadata: {
        version: 4.5,
        type: "Texture",
        generator: "Texture.toJSON"
      },
      uuid: this.uuid,
      name: this.name,
      image: this.source.toJSON(e).uuid,
      mapping: this.mapping,
      channel: this.channel,
      repeat: [this.repeat.x, this.repeat.y],
      offset: [this.offset.x, this.offset.y],
      center: [this.center.x, this.center.y],
      rotation: this.rotation,
      wrap: [this.wrapS, this.wrapT],
      format: this.format,
      internalFormat: this.internalFormat,
      type: this.type,
      encoding: this.encoding,
      minFilter: this.minFilter,
      magFilter: this.magFilter,
      anisotropy: this.anisotropy,
      flipY: this.flipY,
      generateMipmaps: this.generateMipmaps,
      premultiplyAlpha: this.premultiplyAlpha,
      unpackAlignment: this.unpackAlignment
    };
    return Object.keys(this.userData).length > 0 && (n.userData = this.userData), t || (e.textures[this.uuid] = n), n;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  transformUv(e) {
    if (this.mapping !== jr)
      return e;
    if (e.applyMatrix3(this.matrix), e.x < 0 || e.x > 1)
      switch (this.wrapS) {
        case rs:
          e.x = e.x - Math.floor(e.x);
          break;
        case ht:
          e.x = e.x < 0 ? 0 : 1;
          break;
        case as:
          Math.abs(Math.floor(e.x) % 2) === 1 ? e.x = Math.ceil(e.x) - e.x : e.x = e.x - Math.floor(e.x);
          break;
      }
    if (e.y < 0 || e.y > 1)
      switch (this.wrapT) {
        case rs:
          e.y = e.y - Math.floor(e.y);
          break;
        case ht:
          e.y = e.y < 0 ? 0 : 1;
          break;
        case as:
          Math.abs(Math.floor(e.y) % 2) === 1 ? e.y = Math.ceil(e.y) - e.y : e.y = e.y - Math.floor(e.y);
          break;
      }
    return this.flipY && (e.y = 1 - e.y), e;
  }
  set needsUpdate(e) {
    e === !0 && (this.version++, this.source.needsUpdate = !0);
  }
}
Be.DEFAULT_IMAGE = null;
Be.DEFAULT_MAPPING = jr;
Be.DEFAULT_ANISOTROPY = 1;
class pe {
  constructor(e = 0, t = 0, n = 0, s = 1) {
    pe.prototype.isVector4 = !0, this.x = e, this.y = t, this.z = n, this.w = s;
  }
  get width() {
    return this.z;
  }
  set width(e) {
    this.z = e;
  }
  get height() {
    return this.w;
  }
  set height(e) {
    this.w = e;
  }
  set(e, t, n, s) {
    return this.x = e, this.y = t, this.z = n, this.w = s, this;
  }
  setScalar(e) {
    return this.x = e, this.y = e, this.z = e, this.w = e, this;
  }
  setX(e) {
    return this.x = e, this;
  }
  setY(e) {
    return this.y = e, this;
  }
  setZ(e) {
    return this.z = e, this;
  }
  setW(e) {
    return this.w = e, this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      case 2:
        this.z = t;
        break;
      case 3:
        this.w = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z, this.w);
  }
  copy(e) {
    return this.x = e.x, this.y = e.y, this.z = e.z, this.w = e.w !== void 0 ? e.w : 1, this;
  }
  add(e) {
    return this.x += e.x, this.y += e.y, this.z += e.z, this.w += e.w, this;
  }
  addScalar(e) {
    return this.x += e, this.y += e, this.z += e, this.w += e, this;
  }
  addVectors(e, t) {
    return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this.w = e.w + t.w, this;
  }
  addScaledVector(e, t) {
    return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this.w += e.w * t, this;
  }
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this.z -= e.z, this.w -= e.w, this;
  }
  subScalar(e) {
    return this.x -= e, this.y -= e, this.z -= e, this.w -= e, this;
  }
  subVectors(e, t) {
    return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this.w = e.w - t.w, this;
  }
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this.z *= e.z, this.w *= e.w, this;
  }
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this.z *= e, this.w *= e, this;
  }
  applyMatrix4(e) {
    const t = this.x, n = this.y, s = this.z, r = this.w, a = e.elements;
    return this.x = a[0] * t + a[4] * n + a[8] * s + a[12] * r, this.y = a[1] * t + a[5] * n + a[9] * s + a[13] * r, this.z = a[2] * t + a[6] * n + a[10] * s + a[14] * r, this.w = a[3] * t + a[7] * n + a[11] * s + a[15] * r, this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  setAxisAngleFromQuaternion(e) {
    this.w = 2 * Math.acos(e.w);
    const t = Math.sqrt(1 - e.w * e.w);
    return t < 1e-4 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = e.x / t, this.y = e.y / t, this.z = e.z / t), this;
  }
  setAxisAngleFromRotationMatrix(e) {
    let t, n, s, r;
    const c = e.elements, l = c[0], h = c[4], d = c[8], u = c[1], f = c[5], p = c[9], _ = c[2], g = c[6], m = c[10];
    if (Math.abs(h - u) < 0.01 && Math.abs(d - _) < 0.01 && Math.abs(p - g) < 0.01) {
      if (Math.abs(h + u) < 0.1 && Math.abs(d + _) < 0.1 && Math.abs(p + g) < 0.1 && Math.abs(l + f + m - 3) < 0.1)
        return this.set(1, 0, 0, 0), this;
      t = Math.PI;
      const y = (l + 1) / 2, b = (f + 1) / 2, w = (m + 1) / 2, x = (h + u) / 4, S = (d + _) / 4, T = (p + g) / 4;
      return y > b && y > w ? y < 0.01 ? (n = 0, s = 0.707106781, r = 0.707106781) : (n = Math.sqrt(y), s = x / n, r = S / n) : b > w ? b < 0.01 ? (n = 0.707106781, s = 0, r = 0.707106781) : (s = Math.sqrt(b), n = x / s, r = T / s) : w < 0.01 ? (n = 0.707106781, s = 0.707106781, r = 0) : (r = Math.sqrt(w), n = S / r, s = T / r), this.set(n, s, r, t), this;
    }
    let v = Math.sqrt((g - p) * (g - p) + (d - _) * (d - _) + (u - h) * (u - h));
    return Math.abs(v) < 1e-3 && (v = 1), this.x = (g - p) / v, this.y = (d - _) / v, this.z = (u - h) / v, this.w = Math.acos((l + f + m - 1) / 2), this;
  }
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this.w = Math.min(this.w, e.w), this;
  }
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this.w = Math.max(this.w, e.w), this;
  }
  clamp(e, t) {
    return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this.z = Math.max(e.z, Math.min(t.z, this.z)), this.w = Math.max(e.w, Math.min(t.w, this.w)), this;
  }
  clampScalar(e, t) {
    return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this.z = Math.max(e, Math.min(t, this.z)), this.w = Math.max(e, Math.min(t, this.w)), this;
  }
  clampLength(e, t) {
    const n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this;
  }
  roundToZero() {
    return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z), this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y + this.z * e.z + this.w * e.w;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this.w += (e.w - this.w) * t, this;
  }
  lerpVectors(e, t, n) {
    return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this.z = e.z + (t.z - e.z) * n, this.w = e.w + (t.w - e.w) * n, this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y && e.z === this.z && e.w === this.w;
  }
  fromArray(e, t = 0) {
    return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this.w = e[t + 3], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e[t + 3] = this.w, e;
  }
  fromBufferAttribute(e, t) {
    return this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this.w = e.getW(t), this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this.w = Math.random(), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y, yield this.z, yield this.w;
  }
}
class o1 extends ln {
  constructor(e = 1, t = 1, n = {}) {
    super(), this.isWebGLRenderTarget = !0, this.width = e, this.height = t, this.depth = 1, this.scissor = new pe(0, 0, e, t), this.scissorTest = !1, this.viewport = new pe(0, 0, e, t);
    const s = { width: e, height: t, depth: 1 };
    this.texture = new Be(s, n.mapping, n.wrapS, n.wrapT, n.magFilter, n.minFilter, n.format, n.type, n.anisotropy, n.encoding), this.texture.isRenderTargetTexture = !0, this.texture.flipY = !1, this.texture.generateMipmaps = n.generateMipmaps !== void 0 ? n.generateMipmaps : !1, this.texture.internalFormat = n.internalFormat !== void 0 ? n.internalFormat : null, this.texture.minFilter = n.minFilter !== void 0 ? n.minFilter : Pe, this.depthBuffer = n.depthBuffer !== void 0 ? n.depthBuffer : !0, this.stencilBuffer = n.stencilBuffer !== void 0 ? n.stencilBuffer : !1, this.depthTexture = n.depthTexture !== void 0 ? n.depthTexture : null, this.samples = n.samples !== void 0 ? n.samples : 0;
  }
  setSize(e, t, n = 1) {
    (this.width !== e || this.height !== t || this.depth !== n) && (this.width = e, this.height = t, this.depth = n, this.texture.image.width = e, this.texture.image.height = t, this.texture.image.depth = n, this.dispose()), this.viewport.set(0, 0, e, t), this.scissor.set(0, 0, e, t);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.width = e.width, this.height = e.height, this.depth = e.depth, this.viewport.copy(e.viewport), this.texture = e.texture.clone(), this.texture.isRenderTargetTexture = !0;
    const t = Object.assign({}, e.texture.image);
    return this.texture.source = new wi(t), this.depthBuffer = e.depthBuffer, this.stencilBuffer = e.stencilBuffer, e.depthTexture !== null && (this.depthTexture = e.depthTexture.clone()), this.samples = e.samples, this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
class Kr extends Be {
  constructor(e = null, t = 1, n = 1, s = 1) {
    super(null), this.isDataArrayTexture = !0, this.image = { data: e, width: t, height: n, depth: s }, this.magFilter = ke, this.minFilter = ke, this.wrapR = ht, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
  }
}
class Km extends o1 {
  constructor(e = 1, t = 1, n = 1) {
    super(e, t), this.isWebGLArrayRenderTarget = !0, this.depth = n, this.texture = new Kr(null, e, t, n), this.texture.isRenderTargetTexture = !0;
  }
}
class Qr extends Be {
  constructor(e = null, t = 1, n = 1, s = 1) {
    super(null), this.isData3DTexture = !0, this.image = { data: e, width: t, height: n, depth: s }, this.magFilter = ke, this.minFilter = ke, this.wrapR = ht, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
  }
}
class Qm extends o1 {
  constructor(e = 1, t = 1, n = 1) {
    super(e, t), this.isWebGL3DRenderTarget = !0, this.depth = n, this.texture = new Qr(null, e, t, n), this.texture.isRenderTargetTexture = !0;
  }
}
class eg extends o1 {
  constructor(e = 1, t = 1, n = 1, s = {}) {
    super(e, t, s), this.isWebGLMultipleRenderTargets = !0;
    const r = this.texture;
    this.texture = [];
    for (let a = 0; a < n; a++)
      this.texture[a] = r.clone(), this.texture[a].isRenderTargetTexture = !0;
  }
  setSize(e, t, n = 1) {
    if (this.width !== e || this.height !== t || this.depth !== n) {
      this.width = e, this.height = t, this.depth = n;
      for (let s = 0, r = this.texture.length; s < r; s++)
        this.texture[s].image.width = e, this.texture[s].image.height = t, this.texture[s].image.depth = n;
      this.dispose();
    }
    return this.viewport.set(0, 0, e, t), this.scissor.set(0, 0, e, t), this;
  }
  copy(e) {
    this.dispose(), this.width = e.width, this.height = e.height, this.depth = e.depth, this.viewport.set(0, 0, this.width, this.height), this.scissor.set(0, 0, this.width, this.height), this.depthBuffer = e.depthBuffer, this.stencilBuffer = e.stencilBuffer, e.depthTexture !== null && (this.depthTexture = e.depthTexture.clone()), this.texture.length = 0;
    for (let t = 0, n = e.texture.length; t < n; t++)
      this.texture[t] = e.texture[t].clone(), this.texture[t].isRenderTargetTexture = !0;
    return this;
  }
}
class Ee {
  constructor(e = 0, t = 0, n = 0, s = 1) {
    this.isQuaternion = !0, this._x = e, this._y = t, this._z = n, this._w = s;
  }
  static slerpFlat(e, t, n, s, r, a, o) {
    let c = n[s + 0], l = n[s + 1], h = n[s + 2], d = n[s + 3];
    const u = r[a + 0], f = r[a + 1], p = r[a + 2], _ = r[a + 3];
    if (o === 0) {
      e[t + 0] = c, e[t + 1] = l, e[t + 2] = h, e[t + 3] = d;
      return;
    }
    if (o === 1) {
      e[t + 0] = u, e[t + 1] = f, e[t + 2] = p, e[t + 3] = _;
      return;
    }
    if (d !== _ || c !== u || l !== f || h !== p) {
      let g = 1 - o;
      const m = c * u + l * f + h * p + d * _, v = m >= 0 ? 1 : -1, y = 1 - m * m;
      if (y > Number.EPSILON) {
        const w = Math.sqrt(y), x = Math.atan2(w, m * v);
        g = Math.sin(g * x) / w, o = Math.sin(o * x) / w;
      }
      const b = o * v;
      if (c = c * g + u * b, l = l * g + f * b, h = h * g + p * b, d = d * g + _ * b, g === 1 - o) {
        const w = 1 / Math.sqrt(c * c + l * l + h * h + d * d);
        c *= w, l *= w, h *= w, d *= w;
      }
    }
    e[t] = c, e[t + 1] = l, e[t + 2] = h, e[t + 3] = d;
  }
  static multiplyQuaternionsFlat(e, t, n, s, r, a) {
    const o = n[s], c = n[s + 1], l = n[s + 2], h = n[s + 3], d = r[a], u = r[a + 1], f = r[a + 2], p = r[a + 3];
    return e[t] = o * p + h * d + c * f - l * u, e[t + 1] = c * p + h * u + l * d - o * f, e[t + 2] = l * p + h * f + o * u - c * d, e[t + 3] = h * p - o * d - c * u - l * f, e;
  }
  get x() {
    return this._x;
  }
  set x(e) {
    this._x = e, this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(e) {
    this._y = e, this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(e) {
    this._z = e, this._onChangeCallback();
  }
  get w() {
    return this._w;
  }
  set w(e) {
    this._w = e, this._onChangeCallback();
  }
  set(e, t, n, s) {
    return this._x = e, this._y = t, this._z = n, this._w = s, this._onChangeCallback(), this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._w);
  }
  copy(e) {
    return this._x = e.x, this._y = e.y, this._z = e.z, this._w = e.w, this._onChangeCallback(), this;
  }
  setFromEuler(e, t) {
    const n = e._x, s = e._y, r = e._z, a = e._order, o = Math.cos, c = Math.sin, l = o(n / 2), h = o(s / 2), d = o(r / 2), u = c(n / 2), f = c(s / 2), p = c(r / 2);
    switch (a) {
      case "XYZ":
        this._x = u * h * d + l * f * p, this._y = l * f * d - u * h * p, this._z = l * h * p + u * f * d, this._w = l * h * d - u * f * p;
        break;
      case "YXZ":
        this._x = u * h * d + l * f * p, this._y = l * f * d - u * h * p, this._z = l * h * p - u * f * d, this._w = l * h * d + u * f * p;
        break;
      case "ZXY":
        this._x = u * h * d - l * f * p, this._y = l * f * d + u * h * p, this._z = l * h * p + u * f * d, this._w = l * h * d - u * f * p;
        break;
      case "ZYX":
        this._x = u * h * d - l * f * p, this._y = l * f * d + u * h * p, this._z = l * h * p - u * f * d, this._w = l * h * d + u * f * p;
        break;
      case "YZX":
        this._x = u * h * d + l * f * p, this._y = l * f * d + u * h * p, this._z = l * h * p - u * f * d, this._w = l * h * d - u * f * p;
        break;
      case "XZY":
        this._x = u * h * d - l * f * p, this._y = l * f * d - u * h * p, this._z = l * h * p + u * f * d, this._w = l * h * d + u * f * p;
        break;
      default:
        console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + a);
    }
    return t !== !1 && this._onChangeCallback(), this;
  }
  setFromAxisAngle(e, t) {
    const n = t / 2, s = Math.sin(n);
    return this._x = e.x * s, this._y = e.y * s, this._z = e.z * s, this._w = Math.cos(n), this._onChangeCallback(), this;
  }
  setFromRotationMatrix(e) {
    const t = e.elements, n = t[0], s = t[4], r = t[8], a = t[1], o = t[5], c = t[9], l = t[2], h = t[6], d = t[10], u = n + o + d;
    if (u > 0) {
      const f = 0.5 / Math.sqrt(u + 1);
      this._w = 0.25 / f, this._x = (h - c) * f, this._y = (r - l) * f, this._z = (a - s) * f;
    } else if (n > o && n > d) {
      const f = 2 * Math.sqrt(1 + n - o - d);
      this._w = (h - c) / f, this._x = 0.25 * f, this._y = (s + a) / f, this._z = (r + l) / f;
    } else if (o > d) {
      const f = 2 * Math.sqrt(1 + o - n - d);
      this._w = (r - l) / f, this._x = (s + a) / f, this._y = 0.25 * f, this._z = (c + h) / f;
    } else {
      const f = 2 * Math.sqrt(1 + d - n - o);
      this._w = (a - s) / f, this._x = (r + l) / f, this._y = (c + h) / f, this._z = 0.25 * f;
    }
    return this._onChangeCallback(), this;
  }
  setFromUnitVectors(e, t) {
    let n = e.dot(t) + 1;
    return n < Number.EPSILON ? (n = 0, Math.abs(e.x) > Math.abs(e.z) ? (this._x = -e.y, this._y = e.x, this._z = 0, this._w = n) : (this._x = 0, this._y = -e.z, this._z = e.y, this._w = n)) : (this._x = e.y * t.z - e.z * t.y, this._y = e.z * t.x - e.x * t.z, this._z = e.x * t.y - e.y * t.x, this._w = n), this.normalize();
  }
  angleTo(e) {
    return 2 * Math.acos(Math.abs(De(this.dot(e), -1, 1)));
  }
  rotateTowards(e, t) {
    const n = this.angleTo(e);
    if (n === 0)
      return this;
    const s = Math.min(1, t / n);
    return this.slerp(e, s), this;
  }
  identity() {
    return this.set(0, 0, 0, 1);
  }
  invert() {
    return this.conjugate();
  }
  conjugate() {
    return this._x *= -1, this._y *= -1, this._z *= -1, this._onChangeCallback(), this;
  }
  dot(e) {
    return this._x * e._x + this._y * e._y + this._z * e._z + this._w * e._w;
  }
  lengthSq() {
    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
  }
  length() {
    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
  }
  normalize() {
    let e = this.length();
    return e === 0 ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (e = 1 / e, this._x = this._x * e, this._y = this._y * e, this._z = this._z * e, this._w = this._w * e), this._onChangeCallback(), this;
  }
  multiply(e) {
    return this.multiplyQuaternions(this, e);
  }
  premultiply(e) {
    return this.multiplyQuaternions(e, this);
  }
  multiplyQuaternions(e, t) {
    const n = e._x, s = e._y, r = e._z, a = e._w, o = t._x, c = t._y, l = t._z, h = t._w;
    return this._x = n * h + a * o + s * l - r * c, this._y = s * h + a * c + r * o - n * l, this._z = r * h + a * l + n * c - s * o, this._w = a * h - n * o - s * c - r * l, this._onChangeCallback(), this;
  }
  slerp(e, t) {
    if (t === 0)
      return this;
    if (t === 1)
      return this.copy(e);
    const n = this._x, s = this._y, r = this._z, a = this._w;
    let o = a * e._w + n * e._x + s * e._y + r * e._z;
    if (o < 0 ? (this._w = -e._w, this._x = -e._x, this._y = -e._y, this._z = -e._z, o = -o) : this.copy(e), o >= 1)
      return this._w = a, this._x = n, this._y = s, this._z = r, this;
    const c = 1 - o * o;
    if (c <= Number.EPSILON) {
      const f = 1 - t;
      return this._w = f * a + t * this._w, this._x = f * n + t * this._x, this._y = f * s + t * this._y, this._z = f * r + t * this._z, this.normalize(), this._onChangeCallback(), this;
    }
    const l = Math.sqrt(c), h = Math.atan2(l, o), d = Math.sin((1 - t) * h) / l, u = Math.sin(t * h) / l;
    return this._w = a * d + this._w * u, this._x = n * d + this._x * u, this._y = s * d + this._y * u, this._z = r * d + this._z * u, this._onChangeCallback(), this;
  }
  slerpQuaternions(e, t, n) {
    return this.copy(e).slerp(t, n);
  }
  random() {
    const e = Math.random(), t = Math.sqrt(1 - e), n = Math.sqrt(e), s = 2 * Math.PI * Math.random(), r = 2 * Math.PI * Math.random();
    return this.set(
      t * Math.cos(s),
      n * Math.sin(r),
      n * Math.cos(r),
      t * Math.sin(s)
    );
  }
  equals(e) {
    return e._x === this._x && e._y === this._y && e._z === this._z && e._w === this._w;
  }
  fromArray(e, t = 0) {
    return this._x = e[t], this._y = e[t + 1], this._z = e[t + 2], this._w = e[t + 3], this._onChangeCallback(), this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._w, e;
  }
  fromBufferAttribute(e, t) {
    return this._x = e.getX(t), this._y = e.getY(t), this._z = e.getZ(t), this._w = e.getW(t), this;
  }
  toJSON() {
    return this.toArray();
  }
  _onChange(e) {
    return this._onChangeCallback = e, this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x, yield this._y, yield this._z, yield this._w;
  }
}
class C {
  constructor(e = 0, t = 0, n = 0) {
    C.prototype.isVector3 = !0, this.x = e, this.y = t, this.z = n;
  }
  set(e, t, n) {
    return n === void 0 && (n = this.z), this.x = e, this.y = t, this.z = n, this;
  }
  setScalar(e) {
    return this.x = e, this.y = e, this.z = e, this;
  }
  setX(e) {
    return this.x = e, this;
  }
  setY(e) {
    return this.y = e, this;
  }
  setZ(e) {
    return this.z = e, this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      case 2:
        this.z = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z);
  }
  copy(e) {
    return this.x = e.x, this.y = e.y, this.z = e.z, this;
  }
  add(e) {
    return this.x += e.x, this.y += e.y, this.z += e.z, this;
  }
  addScalar(e) {
    return this.x += e, this.y += e, this.z += e, this;
  }
  addVectors(e, t) {
    return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this;
  }
  addScaledVector(e, t) {
    return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this;
  }
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this.z -= e.z, this;
  }
  subScalar(e) {
    return this.x -= e, this.y -= e, this.z -= e, this;
  }
  subVectors(e, t) {
    return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this;
  }
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this.z *= e.z, this;
  }
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this.z *= e, this;
  }
  multiplyVectors(e, t) {
    return this.x = e.x * t.x, this.y = e.y * t.y, this.z = e.z * t.z, this;
  }
  applyEuler(e) {
    return this.applyQuaternion(b4.setFromEuler(e));
  }
  applyAxisAngle(e, t) {
    return this.applyQuaternion(b4.setFromAxisAngle(e, t));
  }
  applyMatrix3(e) {
    const t = this.x, n = this.y, s = this.z, r = e.elements;
    return this.x = r[0] * t + r[3] * n + r[6] * s, this.y = r[1] * t + r[4] * n + r[7] * s, this.z = r[2] * t + r[5] * n + r[8] * s, this;
  }
  applyNormalMatrix(e) {
    return this.applyMatrix3(e).normalize();
  }
  applyMatrix4(e) {
    const t = this.x, n = this.y, s = this.z, r = e.elements, a = 1 / (r[3] * t + r[7] * n + r[11] * s + r[15]);
    return this.x = (r[0] * t + r[4] * n + r[8] * s + r[12]) * a, this.y = (r[1] * t + r[5] * n + r[9] * s + r[13]) * a, this.z = (r[2] * t + r[6] * n + r[10] * s + r[14]) * a, this;
  }
  applyQuaternion(e) {
    const t = this.x, n = this.y, s = this.z, r = e.x, a = e.y, o = e.z, c = e.w, l = c * t + a * s - o * n, h = c * n + o * t - r * s, d = c * s + r * n - a * t, u = -r * t - a * n - o * s;
    return this.x = l * c + u * -r + h * -o - d * -a, this.y = h * c + u * -a + d * -r - l * -o, this.z = d * c + u * -o + l * -a - h * -r, this;
  }
  project(e) {
    return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix);
  }
  unproject(e) {
    return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld);
  }
  transformDirection(e) {
    const t = this.x, n = this.y, s = this.z, r = e.elements;
    return this.x = r[0] * t + r[4] * n + r[8] * s, this.y = r[1] * t + r[5] * n + r[9] * s, this.z = r[2] * t + r[6] * n + r[10] * s, this.normalize();
  }
  divide(e) {
    return this.x /= e.x, this.y /= e.y, this.z /= e.z, this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this;
  }
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this;
  }
  clamp(e, t) {
    return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this.z = Math.max(e.z, Math.min(t.z, this.z)), this;
  }
  clampScalar(e, t) {
    return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this.z = Math.max(e, Math.min(t, this.z)), this;
  }
  clampLength(e, t) {
    const n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this;
  }
  roundToZero() {
    return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this.z = -this.z, this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y + this.z * e.z;
  }
  // TODO lengthSquared?
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this;
  }
  lerpVectors(e, t, n) {
    return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this.z = e.z + (t.z - e.z) * n, this;
  }
  cross(e) {
    return this.crossVectors(this, e);
  }
  crossVectors(e, t) {
    const n = e.x, s = e.y, r = e.z, a = t.x, o = t.y, c = t.z;
    return this.x = s * c - r * o, this.y = r * a - n * c, this.z = n * o - s * a, this;
  }
  projectOnVector(e) {
    const t = e.lengthSq();
    if (t === 0)
      return this.set(0, 0, 0);
    const n = e.dot(this) / t;
    return this.copy(e).multiplyScalar(n);
  }
  projectOnPlane(e) {
    return L6.copy(this).projectOnVector(e), this.sub(L6);
  }
  reflect(e) {
    return this.sub(L6.copy(e).multiplyScalar(2 * this.dot(e)));
  }
  angleTo(e) {
    const t = Math.sqrt(this.lengthSq() * e.lengthSq());
    if (t === 0)
      return Math.PI / 2;
    const n = this.dot(e) / t;
    return Math.acos(De(n, -1, 1));
  }
  distanceTo(e) {
    return Math.sqrt(this.distanceToSquared(e));
  }
  distanceToSquared(e) {
    const t = this.x - e.x, n = this.y - e.y, s = this.z - e.z;
    return t * t + n * n + s * s;
  }
  manhattanDistanceTo(e) {
    return Math.abs(this.x - e.x) + Math.abs(this.y - e.y) + Math.abs(this.z - e.z);
  }
  setFromSpherical(e) {
    return this.setFromSphericalCoords(e.radius, e.phi, e.theta);
  }
  setFromSphericalCoords(e, t, n) {
    const s = Math.sin(t) * e;
    return this.x = s * Math.sin(n), this.y = Math.cos(t) * e, this.z = s * Math.cos(n), this;
  }
  setFromCylindrical(e) {
    return this.setFromCylindricalCoords(e.radius, e.theta, e.y);
  }
  setFromCylindricalCoords(e, t, n) {
    return this.x = e * Math.sin(t), this.y = n, this.z = e * Math.cos(t), this;
  }
  setFromMatrixPosition(e) {
    const t = e.elements;
    return this.x = t[12], this.y = t[13], this.z = t[14], this;
  }
  setFromMatrixScale(e) {
    const t = this.setFromMatrixColumn(e, 0).length(), n = this.setFromMatrixColumn(e, 1).length(), s = this.setFromMatrixColumn(e, 2).length();
    return this.x = t, this.y = n, this.z = s, this;
  }
  setFromMatrixColumn(e, t) {
    return this.fromArray(e.elements, t * 4);
  }
  setFromMatrix3Column(e, t) {
    return this.fromArray(e.elements, t * 3);
  }
  setFromEuler(e) {
    return this.x = e._x, this.y = e._y, this.z = e._z, this;
  }
  setFromColor(e) {
    return this.x = e.r, this.y = e.g, this.z = e.b, this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y && e.z === this.z;
  }
  fromArray(e, t = 0) {
    return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e;
  }
  fromBufferAttribute(e, t) {
    return this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this;
  }
  randomDirection() {
    const e = (Math.random() - 0.5) * 2, t = Math.random() * Math.PI * 2, n = Math.sqrt(1 - e ** 2);
    return this.x = n * Math.cos(t), this.y = n * Math.sin(t), this.z = e, this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y, yield this.z;
  }
}
const L6 = /* @__PURE__ */ new C(), b4 = /* @__PURE__ */ new Ee();
class F1 {
  constructor(e = new C(1 / 0, 1 / 0, 1 / 0), t = new C(-1 / 0, -1 / 0, -1 / 0)) {
    this.isBox3 = !0, this.min = e, this.max = t;
  }
  set(e, t) {
    return this.min.copy(e), this.max.copy(t), this;
  }
  setFromArray(e) {
    this.makeEmpty();
    for (let t = 0, n = e.length; t < n; t += 3)
      this.expandByPoint(H1.fromArray(e, t));
    return this;
  }
  setFromBufferAttribute(e) {
    this.makeEmpty();
    for (let t = 0, n = e.count; t < n; t++)
      this.expandByPoint(H1.fromBufferAttribute(e, t));
    return this;
  }
  setFromPoints(e) {
    this.makeEmpty();
    for (let t = 0, n = e.length; t < n; t++)
      this.expandByPoint(e[t]);
    return this;
  }
  setFromCenterAndSize(e, t) {
    const n = H1.copy(t).multiplyScalar(0.5);
    return this.min.copy(e).sub(n), this.max.copy(e).add(n), this;
  }
  setFromObject(e, t = !1) {
    return this.makeEmpty(), this.expandByObject(e, t);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.min.copy(e.min), this.max.copy(e.max), this;
  }
  makeEmpty() {
    return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
  }
  getCenter(e) {
    return this.isEmpty() ? e.set(0, 0, 0) : e.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(e) {
    return this.isEmpty() ? e.set(0, 0, 0) : e.subVectors(this.max, this.min);
  }
  expandByPoint(e) {
    return this.min.min(e), this.max.max(e), this;
  }
  expandByVector(e) {
    return this.min.sub(e), this.max.add(e), this;
  }
  expandByScalar(e) {
    return this.min.addScalar(-e), this.max.addScalar(e), this;
  }
  expandByObject(e, t = !1) {
    if (e.updateWorldMatrix(!1, !1), e.boundingBox !== void 0)
      e.boundingBox === null && e.computeBoundingBox(), t9.copy(e.boundingBox), t9.applyMatrix4(e.matrixWorld), this.union(t9);
    else {
      const s = e.geometry;
      if (s !== void 0)
        if (t && s.attributes !== void 0 && s.attributes.position !== void 0) {
          const r = s.attributes.position;
          for (let a = 0, o = r.count; a < o; a++)
            H1.fromBufferAttribute(r, a).applyMatrix4(e.matrixWorld), this.expandByPoint(H1);
        } else
          s.boundingBox === null && s.computeBoundingBox(), t9.copy(s.boundingBox), t9.applyMatrix4(e.matrixWorld), this.union(t9);
    }
    const n = e.children;
    for (let s = 0, r = n.length; s < r; s++)
      this.expandByObject(n[s], t);
    return this;
  }
  containsPoint(e) {
    return !(e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y || e.z < this.min.z || e.z > this.max.z);
  }
  containsBox(e) {
    return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y && this.min.z <= e.min.z && e.max.z <= this.max.z;
  }
  getParameter(e, t) {
    return t.set(
      (e.x - this.min.x) / (this.max.x - this.min.x),
      (e.y - this.min.y) / (this.max.y - this.min.y),
      (e.z - this.min.z) / (this.max.z - this.min.z)
    );
  }
  intersectsBox(e) {
    return !(e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y || e.max.z < this.min.z || e.min.z > this.max.z);
  }
  intersectsSphere(e) {
    return this.clampPoint(e.center, H1), H1.distanceToSquared(e.center) <= e.radius * e.radius;
  }
  intersectsPlane(e) {
    let t, n;
    return e.normal.x > 0 ? (t = e.normal.x * this.min.x, n = e.normal.x * this.max.x) : (t = e.normal.x * this.max.x, n = e.normal.x * this.min.x), e.normal.y > 0 ? (t += e.normal.y * this.min.y, n += e.normal.y * this.max.y) : (t += e.normal.y * this.max.y, n += e.normal.y * this.min.y), e.normal.z > 0 ? (t += e.normal.z * this.min.z, n += e.normal.z * this.max.z) : (t += e.normal.z * this.max.z, n += e.normal.z * this.min.z), t <= -e.constant && n >= -e.constant;
  }
  intersectsTriangle(e) {
    if (this.isEmpty())
      return !1;
    this.getCenter(f8), i7.subVectors(this.max, f8), n9.subVectors(e.a, f8), i9.subVectors(e.b, f8), s9.subVectors(e.c, f8), pn.subVectors(i9, n9), mn.subVectors(s9, i9), si.subVectors(n9, s9);
    let t = [
      0,
      -pn.z,
      pn.y,
      0,
      -mn.z,
      mn.y,
      0,
      -si.z,
      si.y,
      pn.z,
      0,
      -pn.x,
      mn.z,
      0,
      -mn.x,
      si.z,
      0,
      -si.x,
      -pn.y,
      pn.x,
      0,
      -mn.y,
      mn.x,
      0,
      -si.y,
      si.x,
      0
    ];
    return !R6(t, n9, i9, s9, i7) || (t = [1, 0, 0, 0, 1, 0, 0, 0, 1], !R6(t, n9, i9, s9, i7)) ? !1 : (s7.crossVectors(pn, mn), t = [s7.x, s7.y, s7.z], R6(t, n9, i9, s9, i7));
  }
  clampPoint(e, t) {
    return t.copy(e).clamp(this.min, this.max);
  }
  distanceToPoint(e) {
    return this.clampPoint(e, H1).distanceTo(e);
  }
  getBoundingSphere(e) {
    return this.isEmpty() ? e.makeEmpty() : (this.getCenter(e.center), e.radius = this.getSize(H1).length() * 0.5), e;
  }
  intersect(e) {
    return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
  }
  union(e) {
    return this.min.min(e.min), this.max.max(e.max), this;
  }
  applyMatrix4(e) {
    return this.isEmpty() ? this : (V1[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(e), V1[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(e), V1[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(e), V1[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(e), V1[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(e), V1[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(e), V1[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(e), V1[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(e), this.setFromPoints(V1), this);
  }
  translate(e) {
    return this.min.add(e), this.max.add(e), this;
  }
  equals(e) {
    return e.min.equals(this.min) && e.max.equals(this.max);
  }
}
const V1 = [
  /* @__PURE__ */ new C(),
  /* @__PURE__ */ new C(),
  /* @__PURE__ */ new C(),
  /* @__PURE__ */ new C(),
  /* @__PURE__ */ new C(),
  /* @__PURE__ */ new C(),
  /* @__PURE__ */ new C(),
  /* @__PURE__ */ new C()
], H1 = /* @__PURE__ */ new C(), t9 = /* @__PURE__ */ new F1(), n9 = /* @__PURE__ */ new C(), i9 = /* @__PURE__ */ new C(), s9 = /* @__PURE__ */ new C(), pn = /* @__PURE__ */ new C(), mn = /* @__PURE__ */ new C(), si = /* @__PURE__ */ new C(), f8 = /* @__PURE__ */ new C(), i7 = /* @__PURE__ */ new C(), s7 = /* @__PURE__ */ new C(), ri = /* @__PURE__ */ new C();
function R6(i, e, t, n, s) {
  for (let r = 0, a = i.length - 3; r <= a; r += 3) {
    ri.fromArray(i, r);
    const o = s.x * Math.abs(ri.x) + s.y * Math.abs(ri.y) + s.z * Math.abs(ri.z), c = e.dot(ri), l = t.dot(ri), h = n.dot(ri);
    if (Math.max(-Math.max(c, l, h), Math.min(c, l, h)) > o)
      return !1;
  }
  return !0;
}
const tg = /* @__PURE__ */ new F1(), p8 = /* @__PURE__ */ new C(), P6 = /* @__PURE__ */ new C();
class z1 {
  constructor(e = new C(), t = -1) {
    this.center = e, this.radius = t;
  }
  set(e, t) {
    return this.center.copy(e), this.radius = t, this;
  }
  setFromPoints(e, t) {
    const n = this.center;
    t !== void 0 ? n.copy(t) : tg.setFromPoints(e).getCenter(n);
    let s = 0;
    for (let r = 0, a = e.length; r < a; r++)
      s = Math.max(s, n.distanceToSquared(e[r]));
    return this.radius = Math.sqrt(s), this;
  }
  copy(e) {
    return this.center.copy(e.center), this.radius = e.radius, this;
  }
  isEmpty() {
    return this.radius < 0;
  }
  makeEmpty() {
    return this.center.set(0, 0, 0), this.radius = -1, this;
  }
  containsPoint(e) {
    return e.distanceToSquared(this.center) <= this.radius * this.radius;
  }
  distanceToPoint(e) {
    return e.distanceTo(this.center) - this.radius;
  }
  intersectsSphere(e) {
    const t = this.radius + e.radius;
    return e.center.distanceToSquared(this.center) <= t * t;
  }
  intersectsBox(e) {
    return e.intersectsSphere(this);
  }
  intersectsPlane(e) {
    return Math.abs(e.distanceToPoint(this.center)) <= this.radius;
  }
  clampPoint(e, t) {
    const n = this.center.distanceToSquared(e);
    return t.copy(e), n > this.radius * this.radius && (t.sub(this.center).normalize(), t.multiplyScalar(this.radius).add(this.center)), t;
  }
  getBoundingBox(e) {
    return this.isEmpty() ? (e.makeEmpty(), e) : (e.set(this.center, this.center), e.expandByScalar(this.radius), e);
  }
  applyMatrix4(e) {
    return this.center.applyMatrix4(e), this.radius = this.radius * e.getMaxScaleOnAxis(), this;
  }
  translate(e) {
    return this.center.add(e), this;
  }
  expandByPoint(e) {
    if (this.isEmpty())
      return this.center.copy(e), this.radius = 0, this;
    p8.subVectors(e, this.center);
    const t = p8.lengthSq();
    if (t > this.radius * this.radius) {
      const n = Math.sqrt(t), s = (n - this.radius) * 0.5;
      this.center.addScaledVector(p8, s / n), this.radius += s;
    }
    return this;
  }
  union(e) {
    return e.isEmpty() ? this : this.isEmpty() ? (this.copy(e), this) : (this.center.equals(e.center) === !0 ? this.radius = Math.max(this.radius, e.radius) : (P6.subVectors(e.center, this.center).setLength(e.radius), this.expandByPoint(p8.copy(e.center).add(P6)), this.expandByPoint(p8.copy(e.center).sub(P6))), this);
  }
  equals(e) {
    return e.center.equals(this.center) && e.radius === this.radius;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const G1 = /* @__PURE__ */ new C(), D6 = /* @__PURE__ */ new C(), r7 = /* @__PURE__ */ new C(), gn = /* @__PURE__ */ new C(), N6 = /* @__PURE__ */ new C(), a7 = /* @__PURE__ */ new C(), O6 = /* @__PURE__ */ new C();
class Rs {
  constructor(e = new C(), t = new C(0, 0, -1)) {
    this.origin = e, this.direction = t;
  }
  set(e, t) {
    return this.origin.copy(e), this.direction.copy(t), this;
  }
  copy(e) {
    return this.origin.copy(e.origin), this.direction.copy(e.direction), this;
  }
  at(e, t) {
    return t.copy(this.origin).addScaledVector(this.direction, e);
  }
  lookAt(e) {
    return this.direction.copy(e).sub(this.origin).normalize(), this;
  }
  recast(e) {
    return this.origin.copy(this.at(e, G1)), this;
  }
  closestPointToPoint(e, t) {
    t.subVectors(e, this.origin);
    const n = t.dot(this.direction);
    return n < 0 ? t.copy(this.origin) : t.copy(this.origin).addScaledVector(this.direction, n);
  }
  distanceToPoint(e) {
    return Math.sqrt(this.distanceSqToPoint(e));
  }
  distanceSqToPoint(e) {
    const t = G1.subVectors(e, this.origin).dot(this.direction);
    return t < 0 ? this.origin.distanceToSquared(e) : (G1.copy(this.origin).addScaledVector(this.direction, t), G1.distanceToSquared(e));
  }
  distanceSqToSegment(e, t, n, s) {
    D6.copy(e).add(t).multiplyScalar(0.5), r7.copy(t).sub(e).normalize(), gn.copy(this.origin).sub(D6);
    const r = e.distanceTo(t) * 0.5, a = -this.direction.dot(r7), o = gn.dot(this.direction), c = -gn.dot(r7), l = gn.lengthSq(), h = Math.abs(1 - a * a);
    let d, u, f, p;
    if (h > 0)
      if (d = a * c - o, u = a * o - c, p = r * h, d >= 0)
        if (u >= -p)
          if (u <= p) {
            const _ = 1 / h;
            d *= _, u *= _, f = d * (d + a * u + 2 * o) + u * (a * d + u + 2 * c) + l;
          } else
            u = r, d = Math.max(0, -(a * u + o)), f = -d * d + u * (u + 2 * c) + l;
        else
          u = -r, d = Math.max(0, -(a * u + o)), f = -d * d + u * (u + 2 * c) + l;
      else
        u <= -p ? (d = Math.max(0, -(-a * r + o)), u = d > 0 ? -r : Math.min(Math.max(-r, -c), r), f = -d * d + u * (u + 2 * c) + l) : u <= p ? (d = 0, u = Math.min(Math.max(-r, -c), r), f = u * (u + 2 * c) + l) : (d = Math.max(0, -(a * r + o)), u = d > 0 ? r : Math.min(Math.max(-r, -c), r), f = -d * d + u * (u + 2 * c) + l);
    else
      u = a > 0 ? -r : r, d = Math.max(0, -(a * u + o)), f = -d * d + u * (u + 2 * c) + l;
    return n && n.copy(this.origin).addScaledVector(this.direction, d), s && s.copy(D6).addScaledVector(r7, u), f;
  }
  intersectSphere(e, t) {
    G1.subVectors(e.center, this.origin);
    const n = G1.dot(this.direction), s = G1.dot(G1) - n * n, r = e.radius * e.radius;
    if (s > r)
      return null;
    const a = Math.sqrt(r - s), o = n - a, c = n + a;
    return c < 0 ? null : o < 0 ? this.at(c, t) : this.at(o, t);
  }
  intersectsSphere(e) {
    return this.distanceSqToPoint(e.center) <= e.radius * e.radius;
  }
  distanceToPlane(e) {
    const t = e.normal.dot(this.direction);
    if (t === 0)
      return e.distanceToPoint(this.origin) === 0 ? 0 : null;
    const n = -(this.origin.dot(e.normal) + e.constant) / t;
    return n >= 0 ? n : null;
  }
  intersectPlane(e, t) {
    const n = this.distanceToPlane(e);
    return n === null ? null : this.at(n, t);
  }
  intersectsPlane(e) {
    const t = e.distanceToPoint(this.origin);
    return t === 0 || e.normal.dot(this.direction) * t < 0;
  }
  intersectBox(e, t) {
    let n, s, r, a, o, c;
    const l = 1 / this.direction.x, h = 1 / this.direction.y, d = 1 / this.direction.z, u = this.origin;
    return l >= 0 ? (n = (e.min.x - u.x) * l, s = (e.max.x - u.x) * l) : (n = (e.max.x - u.x) * l, s = (e.min.x - u.x) * l), h >= 0 ? (r = (e.min.y - u.y) * h, a = (e.max.y - u.y) * h) : (r = (e.max.y - u.y) * h, a = (e.min.y - u.y) * h), n > a || r > s || ((r > n || isNaN(n)) && (n = r), (a < s || isNaN(s)) && (s = a), d >= 0 ? (o = (e.min.z - u.z) * d, c = (e.max.z - u.z) * d) : (o = (e.max.z - u.z) * d, c = (e.min.z - u.z) * d), n > c || o > s) || ((o > n || n !== n) && (n = o), (c < s || s !== s) && (s = c), s < 0) ? null : this.at(n >= 0 ? n : s, t);
  }
  intersectsBox(e) {
    return this.intersectBox(e, G1) !== null;
  }
  intersectTriangle(e, t, n, s, r) {
    N6.subVectors(t, e), a7.subVectors(n, e), O6.crossVectors(N6, a7);
    let a = this.direction.dot(O6), o;
    if (a > 0) {
      if (s)
        return null;
      o = 1;
    } else if (a < 0)
      o = -1, a = -a;
    else
      return null;
    gn.subVectors(this.origin, e);
    const c = o * this.direction.dot(a7.crossVectors(gn, a7));
    if (c < 0)
      return null;
    const l = o * this.direction.dot(N6.cross(gn));
    if (l < 0 || c + l > a)
      return null;
    const h = -o * gn.dot(O6);
    return h < 0 ? null : this.at(h / a, r);
  }
  applyMatrix4(e) {
    return this.origin.applyMatrix4(e), this.direction.transformDirection(e), this;
  }
  equals(e) {
    return e.origin.equals(this.origin) && e.direction.equals(this.direction);
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class k0 {
  constructor() {
    k0.prototype.isMatrix4 = !0, this.elements = [
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ];
  }
  set(e, t, n, s, r, a, o, c, l, h, d, u, f, p, _, g) {
    const m = this.elements;
    return m[0] = e, m[4] = t, m[8] = n, m[12] = s, m[1] = r, m[5] = a, m[9] = o, m[13] = c, m[2] = l, m[6] = h, m[10] = d, m[14] = u, m[3] = f, m[7] = p, m[11] = _, m[15] = g, this;
  }
  identity() {
    return this.set(
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  clone() {
    return new k0().fromArray(this.elements);
  }
  copy(e) {
    const t = this.elements, n = e.elements;
    return t[0] = n[0], t[1] = n[1], t[2] = n[2], t[3] = n[3], t[4] = n[4], t[5] = n[5], t[6] = n[6], t[7] = n[7], t[8] = n[8], t[9] = n[9], t[10] = n[10], t[11] = n[11], t[12] = n[12], t[13] = n[13], t[14] = n[14], t[15] = n[15], this;
  }
  copyPosition(e) {
    const t = this.elements, n = e.elements;
    return t[12] = n[12], t[13] = n[13], t[14] = n[14], this;
  }
  setFromMatrix3(e) {
    const t = e.elements;
    return this.set(
      t[0],
      t[3],
      t[6],
      0,
      t[1],
      t[4],
      t[7],
      0,
      t[2],
      t[5],
      t[8],
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  extractBasis(e, t, n) {
    return e.setFromMatrixColumn(this, 0), t.setFromMatrixColumn(this, 1), n.setFromMatrixColumn(this, 2), this;
  }
  makeBasis(e, t, n) {
    return this.set(
      e.x,
      t.x,
      n.x,
      0,
      e.y,
      t.y,
      n.y,
      0,
      e.z,
      t.z,
      n.z,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  extractRotation(e) {
    const t = this.elements, n = e.elements, s = 1 / r9.setFromMatrixColumn(e, 0).length(), r = 1 / r9.setFromMatrixColumn(e, 1).length(), a = 1 / r9.setFromMatrixColumn(e, 2).length();
    return t[0] = n[0] * s, t[1] = n[1] * s, t[2] = n[2] * s, t[3] = 0, t[4] = n[4] * r, t[5] = n[5] * r, t[6] = n[6] * r, t[7] = 0, t[8] = n[8] * a, t[9] = n[9] * a, t[10] = n[10] * a, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this;
  }
  makeRotationFromEuler(e) {
    const t = this.elements, n = e.x, s = e.y, r = e.z, a = Math.cos(n), o = Math.sin(n), c = Math.cos(s), l = Math.sin(s), h = Math.cos(r), d = Math.sin(r);
    if (e.order === "XYZ") {
      const u = a * h, f = a * d, p = o * h, _ = o * d;
      t[0] = c * h, t[4] = -c * d, t[8] = l, t[1] = f + p * l, t[5] = u - _ * l, t[9] = -o * c, t[2] = _ - u * l, t[6] = p + f * l, t[10] = a * c;
    } else if (e.order === "YXZ") {
      const u = c * h, f = c * d, p = l * h, _ = l * d;
      t[0] = u + _ * o, t[4] = p * o - f, t[8] = a * l, t[1] = a * d, t[5] = a * h, t[9] = -o, t[2] = f * o - p, t[6] = _ + u * o, t[10] = a * c;
    } else if (e.order === "ZXY") {
      const u = c * h, f = c * d, p = l * h, _ = l * d;
      t[0] = u - _ * o, t[4] = -a * d, t[8] = p + f * o, t[1] = f + p * o, t[5] = a * h, t[9] = _ - u * o, t[2] = -a * l, t[6] = o, t[10] = a * c;
    } else if (e.order === "ZYX") {
      const u = a * h, f = a * d, p = o * h, _ = o * d;
      t[0] = c * h, t[4] = p * l - f, t[8] = u * l + _, t[1] = c * d, t[5] = _ * l + u, t[9] = f * l - p, t[2] = -l, t[6] = o * c, t[10] = a * c;
    } else if (e.order === "YZX") {
      const u = a * c, f = a * l, p = o * c, _ = o * l;
      t[0] = c * h, t[4] = _ - u * d, t[8] = p * d + f, t[1] = d, t[5] = a * h, t[9] = -o * h, t[2] = -l * h, t[6] = f * d + p, t[10] = u - _ * d;
    } else if (e.order === "XZY") {
      const u = a * c, f = a * l, p = o * c, _ = o * l;
      t[0] = c * h, t[4] = -d, t[8] = l * h, t[1] = u * d + _, t[5] = a * h, t[9] = f * d - p, t[2] = p * d - f, t[6] = o * h, t[10] = _ * d + u;
    }
    return t[3] = 0, t[7] = 0, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this;
  }
  makeRotationFromQuaternion(e) {
    return this.compose(ng, e, ig);
  }
  lookAt(e, t, n) {
    const s = this.elements;
    return Lt.subVectors(e, t), Lt.lengthSq() === 0 && (Lt.z = 1), Lt.normalize(), _n.crossVectors(n, Lt), _n.lengthSq() === 0 && (Math.abs(n.z) === 1 ? Lt.x += 1e-4 : Lt.z += 1e-4, Lt.normalize(), _n.crossVectors(n, Lt)), _n.normalize(), o7.crossVectors(Lt, _n), s[0] = _n.x, s[4] = o7.x, s[8] = Lt.x, s[1] = _n.y, s[5] = o7.y, s[9] = Lt.y, s[2] = _n.z, s[6] = o7.z, s[10] = Lt.z, this;
  }
  multiply(e) {
    return this.multiplyMatrices(this, e);
  }
  premultiply(e) {
    return this.multiplyMatrices(e, this);
  }
  multiplyMatrices(e, t) {
    const n = e.elements, s = t.elements, r = this.elements, a = n[0], o = n[4], c = n[8], l = n[12], h = n[1], d = n[5], u = n[9], f = n[13], p = n[2], _ = n[6], g = n[10], m = n[14], v = n[3], y = n[7], b = n[11], w = n[15], x = s[0], S = s[4], T = s[8], M = s[12], A = s[1], D = s[5], z = s[9], O = s[13], U = s[2], V = s[6], Y = s[10], W = s[14], X = s[3], i0 = s[7], a0 = s[11], x0 = s[15];
    return r[0] = a * x + o * A + c * U + l * X, r[4] = a * S + o * D + c * V + l * i0, r[8] = a * T + o * z + c * Y + l * a0, r[12] = a * M + o * O + c * W + l * x0, r[1] = h * x + d * A + u * U + f * X, r[5] = h * S + d * D + u * V + f * i0, r[9] = h * T + d * z + u * Y + f * a0, r[13] = h * M + d * O + u * W + f * x0, r[2] = p * x + _ * A + g * U + m * X, r[6] = p * S + _ * D + g * V + m * i0, r[10] = p * T + _ * z + g * Y + m * a0, r[14] = p * M + _ * O + g * W + m * x0, r[3] = v * x + y * A + b * U + w * X, r[7] = v * S + y * D + b * V + w * i0, r[11] = v * T + y * z + b * Y + w * a0, r[15] = v * M + y * O + b * W + w * x0, this;
  }
  multiplyScalar(e) {
    const t = this.elements;
    return t[0] *= e, t[4] *= e, t[8] *= e, t[12] *= e, t[1] *= e, t[5] *= e, t[9] *= e, t[13] *= e, t[2] *= e, t[6] *= e, t[10] *= e, t[14] *= e, t[3] *= e, t[7] *= e, t[11] *= e, t[15] *= e, this;
  }
  determinant() {
    const e = this.elements, t = e[0], n = e[4], s = e[8], r = e[12], a = e[1], o = e[5], c = e[9], l = e[13], h = e[2], d = e[6], u = e[10], f = e[14], p = e[3], _ = e[7], g = e[11], m = e[15];
    return p * (+r * c * d - s * l * d - r * o * u + n * l * u + s * o * f - n * c * f) + _ * (+t * c * f - t * l * u + r * a * u - s * a * f + s * l * h - r * c * h) + g * (+t * l * d - t * o * f - r * a * d + n * a * f + r * o * h - n * l * h) + m * (-s * o * h - t * c * d + t * o * u + s * a * d - n * a * u + n * c * h);
  }
  transpose() {
    const e = this.elements;
    let t;
    return t = e[1], e[1] = e[4], e[4] = t, t = e[2], e[2] = e[8], e[8] = t, t = e[6], e[6] = e[9], e[9] = t, t = e[3], e[3] = e[12], e[12] = t, t = e[7], e[7] = e[13], e[13] = t, t = e[11], e[11] = e[14], e[14] = t, this;
  }
  setPosition(e, t, n) {
    const s = this.elements;
    return e.isVector3 ? (s[12] = e.x, s[13] = e.y, s[14] = e.z) : (s[12] = e, s[13] = t, s[14] = n), this;
  }
  invert() {
    const e = this.elements, t = e[0], n = e[1], s = e[2], r = e[3], a = e[4], o = e[5], c = e[6], l = e[7], h = e[8], d = e[9], u = e[10], f = e[11], p = e[12], _ = e[13], g = e[14], m = e[15], v = d * g * l - _ * u * l + _ * c * f - o * g * f - d * c * m + o * u * m, y = p * u * l - h * g * l - p * c * f + a * g * f + h * c * m - a * u * m, b = h * _ * l - p * d * l + p * o * f - a * _ * f - h * o * m + a * d * m, w = p * d * c - h * _ * c - p * o * u + a * _ * u + h * o * g - a * d * g, x = t * v + n * y + s * b + r * w;
    if (x === 0)
      return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    const S = 1 / x;
    return e[0] = v * S, e[1] = (_ * u * r - d * g * r - _ * s * f + n * g * f + d * s * m - n * u * m) * S, e[2] = (o * g * r - _ * c * r + _ * s * l - n * g * l - o * s * m + n * c * m) * S, e[3] = (d * c * r - o * u * r - d * s * l + n * u * l + o * s * f - n * c * f) * S, e[4] = y * S, e[5] = (h * g * r - p * u * r + p * s * f - t * g * f - h * s * m + t * u * m) * S, e[6] = (p * c * r - a * g * r - p * s * l + t * g * l + a * s * m - t * c * m) * S, e[7] = (a * u * r - h * c * r + h * s * l - t * u * l - a * s * f + t * c * f) * S, e[8] = b * S, e[9] = (p * d * r - h * _ * r - p * n * f + t * _ * f + h * n * m - t * d * m) * S, e[10] = (a * _ * r - p * o * r + p * n * l - t * _ * l - a * n * m + t * o * m) * S, e[11] = (h * o * r - a * d * r - h * n * l + t * d * l + a * n * f - t * o * f) * S, e[12] = w * S, e[13] = (h * _ * s - p * d * s + p * n * u - t * _ * u - h * n * g + t * d * g) * S, e[14] = (p * o * s - a * _ * s - p * n * c + t * _ * c + a * n * g - t * o * g) * S, e[15] = (a * d * s - h * o * s + h * n * c - t * d * c - a * n * u + t * o * u) * S, this;
  }
  scale(e) {
    const t = this.elements, n = e.x, s = e.y, r = e.z;
    return t[0] *= n, t[4] *= s, t[8] *= r, t[1] *= n, t[5] *= s, t[9] *= r, t[2] *= n, t[6] *= s, t[10] *= r, t[3] *= n, t[7] *= s, t[11] *= r, this;
  }
  getMaxScaleOnAxis() {
    const e = this.elements, t = e[0] * e[0] + e[1] * e[1] + e[2] * e[2], n = e[4] * e[4] + e[5] * e[5] + e[6] * e[6], s = e[8] * e[8] + e[9] * e[9] + e[10] * e[10];
    return Math.sqrt(Math.max(t, n, s));
  }
  makeTranslation(e, t, n) {
    return this.set(
      1,
      0,
      0,
      e,
      0,
      1,
      0,
      t,
      0,
      0,
      1,
      n,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationX(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      1,
      0,
      0,
      0,
      0,
      t,
      -n,
      0,
      0,
      n,
      t,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationY(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      t,
      0,
      n,
      0,
      0,
      1,
      0,
      0,
      -n,
      0,
      t,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationZ(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      t,
      -n,
      0,
      0,
      n,
      t,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationAxis(e, t) {
    const n = Math.cos(t), s = Math.sin(t), r = 1 - n, a = e.x, o = e.y, c = e.z, l = r * a, h = r * o;
    return this.set(
      l * a + n,
      l * o - s * c,
      l * c + s * o,
      0,
      l * o + s * c,
      h * o + n,
      h * c - s * a,
      0,
      l * c - s * o,
      h * c + s * a,
      r * c * c + n,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeScale(e, t, n) {
    return this.set(
      e,
      0,
      0,
      0,
      0,
      t,
      0,
      0,
      0,
      0,
      n,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeShear(e, t, n, s, r, a) {
    return this.set(
      1,
      n,
      r,
      0,
      e,
      1,
      a,
      0,
      t,
      s,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  compose(e, t, n) {
    const s = this.elements, r = t._x, a = t._y, o = t._z, c = t._w, l = r + r, h = a + a, d = o + o, u = r * l, f = r * h, p = r * d, _ = a * h, g = a * d, m = o * d, v = c * l, y = c * h, b = c * d, w = n.x, x = n.y, S = n.z;
    return s[0] = (1 - (_ + m)) * w, s[1] = (f + b) * w, s[2] = (p - y) * w, s[3] = 0, s[4] = (f - b) * x, s[5] = (1 - (u + m)) * x, s[6] = (g + v) * x, s[7] = 0, s[8] = (p + y) * S, s[9] = (g - v) * S, s[10] = (1 - (u + _)) * S, s[11] = 0, s[12] = e.x, s[13] = e.y, s[14] = e.z, s[15] = 1, this;
  }
  decompose(e, t, n) {
    const s = this.elements;
    let r = r9.set(s[0], s[1], s[2]).length();
    const a = r9.set(s[4], s[5], s[6]).length(), o = r9.set(s[8], s[9], s[10]).length();
    this.determinant() < 0 && (r = -r), e.x = s[12], e.y = s[13], e.z = s[14], Qt.copy(this);
    const l = 1 / r, h = 1 / a, d = 1 / o;
    return Qt.elements[0] *= l, Qt.elements[1] *= l, Qt.elements[2] *= l, Qt.elements[4] *= h, Qt.elements[5] *= h, Qt.elements[6] *= h, Qt.elements[8] *= d, Qt.elements[9] *= d, Qt.elements[10] *= d, t.setFromRotationMatrix(Qt), n.x = r, n.y = a, n.z = o, this;
  }
  makePerspective(e, t, n, s, r, a) {
    const o = this.elements, c = 2 * r / (t - e), l = 2 * r / (n - s), h = (t + e) / (t - e), d = (n + s) / (n - s), u = -(a + r) / (a - r), f = -2 * a * r / (a - r);
    return o[0] = c, o[4] = 0, o[8] = h, o[12] = 0, o[1] = 0, o[5] = l, o[9] = d, o[13] = 0, o[2] = 0, o[6] = 0, o[10] = u, o[14] = f, o[3] = 0, o[7] = 0, o[11] = -1, o[15] = 0, this;
  }
  makeOrthographic(e, t, n, s, r, a) {
    const o = this.elements, c = 1 / (t - e), l = 1 / (n - s), h = 1 / (a - r), d = (t + e) * c, u = (n + s) * l, f = (a + r) * h;
    return o[0] = 2 * c, o[4] = 0, o[8] = 0, o[12] = -d, o[1] = 0, o[5] = 2 * l, o[9] = 0, o[13] = -u, o[2] = 0, o[6] = 0, o[10] = -2 * h, o[14] = -f, o[3] = 0, o[7] = 0, o[11] = 0, o[15] = 1, this;
  }
  equals(e) {
    const t = this.elements, n = e.elements;
    for (let s = 0; s < 16; s++)
      if (t[s] !== n[s])
        return !1;
    return !0;
  }
  fromArray(e, t = 0) {
    for (let n = 0; n < 16; n++)
      this.elements[n] = e[n + t];
    return this;
  }
  toArray(e = [], t = 0) {
    const n = this.elements;
    return e[t] = n[0], e[t + 1] = n[1], e[t + 2] = n[2], e[t + 3] = n[3], e[t + 4] = n[4], e[t + 5] = n[5], e[t + 6] = n[6], e[t + 7] = n[7], e[t + 8] = n[8], e[t + 9] = n[9], e[t + 10] = n[10], e[t + 11] = n[11], e[t + 12] = n[12], e[t + 13] = n[13], e[t + 14] = n[14], e[t + 15] = n[15], e;
  }
}
const r9 = /* @__PURE__ */ new C(), Qt = /* @__PURE__ */ new k0(), ng = /* @__PURE__ */ new C(0, 0, 0), ig = /* @__PURE__ */ new C(1, 1, 1), _n = /* @__PURE__ */ new C(), o7 = /* @__PURE__ */ new C(), Lt = /* @__PURE__ */ new C(), w4 = /* @__PURE__ */ new k0(), M4 = /* @__PURE__ */ new Ee();
class t8 {
  constructor(e = 0, t = 0, n = 0, s = t8.DEFAULT_ORDER) {
    this.isEuler = !0, this._x = e, this._y = t, this._z = n, this._order = s;
  }
  get x() {
    return this._x;
  }
  set x(e) {
    this._x = e, this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(e) {
    this._y = e, this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(e) {
    this._z = e, this._onChangeCallback();
  }
  get order() {
    return this._order;
  }
  set order(e) {
    this._order = e, this._onChangeCallback();
  }
  set(e, t, n, s = this._order) {
    return this._x = e, this._y = t, this._z = n, this._order = s, this._onChangeCallback(), this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._order);
  }
  copy(e) {
    return this._x = e._x, this._y = e._y, this._z = e._z, this._order = e._order, this._onChangeCallback(), this;
  }
  setFromRotationMatrix(e, t = this._order, n = !0) {
    const s = e.elements, r = s[0], a = s[4], o = s[8], c = s[1], l = s[5], h = s[9], d = s[2], u = s[6], f = s[10];
    switch (t) {
      case "XYZ":
        this._y = Math.asin(De(o, -1, 1)), Math.abs(o) < 0.9999999 ? (this._x = Math.atan2(-h, f), this._z = Math.atan2(-a, r)) : (this._x = Math.atan2(u, l), this._z = 0);
        break;
      case "YXZ":
        this._x = Math.asin(-De(h, -1, 1)), Math.abs(h) < 0.9999999 ? (this._y = Math.atan2(o, f), this._z = Math.atan2(c, l)) : (this._y = Math.atan2(-d, r), this._z = 0);
        break;
      case "ZXY":
        this._x = Math.asin(De(u, -1, 1)), Math.abs(u) < 0.9999999 ? (this._y = Math.atan2(-d, f), this._z = Math.atan2(-a, l)) : (this._y = 0, this._z = Math.atan2(c, r));
        break;
      case "ZYX":
        this._y = Math.asin(-De(d, -1, 1)), Math.abs(d) < 0.9999999 ? (this._x = Math.atan2(u, f), this._z = Math.atan2(c, r)) : (this._x = 0, this._z = Math.atan2(-a, l));
        break;
      case "YZX":
        this._z = Math.asin(De(c, -1, 1)), Math.abs(c) < 0.9999999 ? (this._x = Math.atan2(-h, l), this._y = Math.atan2(-d, r)) : (this._x = 0, this._y = Math.atan2(o, f));
        break;
      case "XZY":
        this._z = Math.asin(-De(a, -1, 1)), Math.abs(a) < 0.9999999 ? (this._x = Math.atan2(u, l), this._y = Math.atan2(o, r)) : (this._x = Math.atan2(-h, f), this._y = 0);
        break;
      default:
        console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + t);
    }
    return this._order = t, n === !0 && this._onChangeCallback(), this;
  }
  setFromQuaternion(e, t, n) {
    return w4.makeRotationFromQuaternion(e), this.setFromRotationMatrix(w4, t, n);
  }
  setFromVector3(e, t = this._order) {
    return this.set(e.x, e.y, e.z, t);
  }
  reorder(e) {
    return M4.setFromEuler(this), this.setFromQuaternion(M4, e);
  }
  equals(e) {
    return e._x === this._x && e._y === this._y && e._z === this._z && e._order === this._order;
  }
  fromArray(e) {
    return this._x = e[0], this._y = e[1], this._z = e[2], e[3] !== void 0 && (this._order = e[3]), this._onChangeCallback(), this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._order, e;
  }
  _onChange(e) {
    return this._onChangeCallback = e, this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x, yield this._y, yield this._z, yield this._order;
  }
}
t8.DEFAULT_ORDER = "XYZ";
class e6 {
  constructor() {
    this.mask = 1;
  }
  set(e) {
    this.mask = (1 << e | 0) >>> 0;
  }
  enable(e) {
    this.mask |= 1 << e | 0;
  }
  enableAll() {
    this.mask = -1;
  }
  toggle(e) {
    this.mask ^= 1 << e | 0;
  }
  disable(e) {
    this.mask &= ~(1 << e | 0);
  }
  disableAll() {
    this.mask = 0;
  }
  test(e) {
    return (this.mask & e.mask) !== 0;
  }
  isEnabled(e) {
    return (this.mask & (1 << e | 0)) !== 0;
  }
}
let sg = 0;
const S4 = /* @__PURE__ */ new C(), a9 = /* @__PURE__ */ new Ee(), W1 = /* @__PURE__ */ new k0(), l7 = /* @__PURE__ */ new C(), m8 = /* @__PURE__ */ new C(), rg = /* @__PURE__ */ new C(), ag = /* @__PURE__ */ new Ee(), E4 = /* @__PURE__ */ new C(1, 0, 0), T4 = /* @__PURE__ */ new C(0, 1, 0), A4 = /* @__PURE__ */ new C(0, 0, 1), og = { type: "added" }, C4 = { type: "removed" };
class G0 extends ln {
  constructor() {
    super(), this.isObject3D = !0, Object.defineProperty(this, "id", { value: sg++ }), this.uuid = kt(), this.name = "", this.type = "Object3D", this.parent = null, this.children = [], this.up = G0.DEFAULT_UP.clone();
    const e = new C(), t = new t8(), n = new Ee(), s = new C(1, 1, 1);
    function r() {
      n.setFromEuler(t, !1);
    }
    function a() {
      t.setFromQuaternion(n, void 0, !1);
    }
    t._onChange(r), n._onChange(a), Object.defineProperties(this, {
      position: {
        configurable: !0,
        enumerable: !0,
        value: e
      },
      rotation: {
        configurable: !0,
        enumerable: !0,
        value: t
      },
      quaternion: {
        configurable: !0,
        enumerable: !0,
        value: n
      },
      scale: {
        configurable: !0,
        enumerable: !0,
        value: s
      },
      modelViewMatrix: {
        value: new k0()
      },
      normalMatrix: {
        value: new $0()
      }
    }), this.matrix = new k0(), this.matrixWorld = new k0(), this.matrixAutoUpdate = G0.DEFAULT_MATRIX_AUTO_UPDATE, this.matrixWorldNeedsUpdate = !1, this.matrixWorldAutoUpdate = G0.DEFAULT_MATRIX_WORLD_AUTO_UPDATE, this.layers = new e6(), this.visible = !0, this.castShadow = !1, this.receiveShadow = !1, this.frustumCulled = !0, this.renderOrder = 0, this.animations = [], this.userData = {};
  }
  onBeforeRender() {
  }
  onAfterRender() {
  }
  applyMatrix4(e) {
    this.matrixAutoUpdate && this.updateMatrix(), this.matrix.premultiply(e), this.matrix.decompose(this.position, this.quaternion, this.scale);
  }
  applyQuaternion(e) {
    return this.quaternion.premultiply(e), this;
  }
  setRotationFromAxisAngle(e, t) {
    this.quaternion.setFromAxisAngle(e, t);
  }
  setRotationFromEuler(e) {
    this.quaternion.setFromEuler(e, !0);
  }
  setRotationFromMatrix(e) {
    this.quaternion.setFromRotationMatrix(e);
  }
  setRotationFromQuaternion(e) {
    this.quaternion.copy(e);
  }
  rotateOnAxis(e, t) {
    return a9.setFromAxisAngle(e, t), this.quaternion.multiply(a9), this;
  }
  rotateOnWorldAxis(e, t) {
    return a9.setFromAxisAngle(e, t), this.quaternion.premultiply(a9), this;
  }
  rotateX(e) {
    return this.rotateOnAxis(E4, e);
  }
  rotateY(e) {
    return this.rotateOnAxis(T4, e);
  }
  rotateZ(e) {
    return this.rotateOnAxis(A4, e);
  }
  translateOnAxis(e, t) {
    return S4.copy(e).applyQuaternion(this.quaternion), this.position.add(S4.multiplyScalar(t)), this;
  }
  translateX(e) {
    return this.translateOnAxis(E4, e);
  }
  translateY(e) {
    return this.translateOnAxis(T4, e);
  }
  translateZ(e) {
    return this.translateOnAxis(A4, e);
  }
  localToWorld(e) {
    return this.updateWorldMatrix(!0, !1), e.applyMatrix4(this.matrixWorld);
  }
  worldToLocal(e) {
    return this.updateWorldMatrix(!0, !1), e.applyMatrix4(W1.copy(this.matrixWorld).invert());
  }
  lookAt(e, t, n) {
    e.isVector3 ? l7.copy(e) : l7.set(e, t, n);
    const s = this.parent;
    this.updateWorldMatrix(!0, !1), m8.setFromMatrixPosition(this.matrixWorld), this.isCamera || this.isLight ? W1.lookAt(m8, l7, this.up) : W1.lookAt(l7, m8, this.up), this.quaternion.setFromRotationMatrix(W1), s && (W1.extractRotation(s.matrixWorld), a9.setFromRotationMatrix(W1), this.quaternion.premultiply(a9.invert()));
  }
  add(e) {
    if (arguments.length > 1) {
      for (let t = 0; t < arguments.length; t++)
        this.add(arguments[t]);
      return this;
    }
    return e === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", e), this) : (e && e.isObject3D ? (e.parent !== null && e.parent.remove(e), e.parent = this, this.children.push(e), e.dispatchEvent(og)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", e), this);
  }
  remove(e) {
    if (arguments.length > 1) {
      for (let n = 0; n < arguments.length; n++)
        this.remove(arguments[n]);
      return this;
    }
    const t = this.children.indexOf(e);
    return t !== -1 && (e.parent = null, this.children.splice(t, 1), e.dispatchEvent(C4)), this;
  }
  removeFromParent() {
    const e = this.parent;
    return e !== null && e.remove(this), this;
  }
  clear() {
    for (let e = 0; e < this.children.length; e++) {
      const t = this.children[e];
      t.parent = null, t.dispatchEvent(C4);
    }
    return this.children.length = 0, this;
  }
  attach(e) {
    return this.updateWorldMatrix(!0, !1), W1.copy(this.matrixWorld).invert(), e.parent !== null && (e.parent.updateWorldMatrix(!0, !1), W1.multiply(e.parent.matrixWorld)), e.applyMatrix4(W1), this.add(e), e.updateWorldMatrix(!1, !0), this;
  }
  getObjectById(e) {
    return this.getObjectByProperty("id", e);
  }
  getObjectByName(e) {
    return this.getObjectByProperty("name", e);
  }
  getObjectByProperty(e, t) {
    if (this[e] === t)
      return this;
    for (let n = 0, s = this.children.length; n < s; n++) {
      const a = this.children[n].getObjectByProperty(e, t);
      if (a !== void 0)
        return a;
    }
  }
  getObjectsByProperty(e, t) {
    let n = [];
    this[e] === t && n.push(this);
    for (let s = 0, r = this.children.length; s < r; s++) {
      const a = this.children[s].getObjectsByProperty(e, t);
      a.length > 0 && (n = n.concat(a));
    }
    return n;
  }
  getWorldPosition(e) {
    return this.updateWorldMatrix(!0, !1), e.setFromMatrixPosition(this.matrixWorld);
  }
  getWorldQuaternion(e) {
    return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(m8, e, rg), e;
  }
  getWorldScale(e) {
    return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(m8, ag, e), e;
  }
  getWorldDirection(e) {
    this.updateWorldMatrix(!0, !1);
    const t = this.matrixWorld.elements;
    return e.set(t[8], t[9], t[10]).normalize();
  }
  raycast() {
  }
  traverse(e) {
    e(this);
    const t = this.children;
    for (let n = 0, s = t.length; n < s; n++)
      t[n].traverse(e);
  }
  traverseVisible(e) {
    if (this.visible === !1)
      return;
    e(this);
    const t = this.children;
    for (let n = 0, s = t.length; n < s; n++)
      t[n].traverseVisible(e);
  }
  traverseAncestors(e) {
    const t = this.parent;
    t !== null && (e(t), t.traverseAncestors(e));
  }
  updateMatrix() {
    this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = !0;
  }
  updateMatrixWorld(e) {
    this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || e) && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = !1, e = !0);
    const t = this.children;
    for (let n = 0, s = t.length; n < s; n++) {
      const r = t[n];
      (r.matrixWorldAutoUpdate === !0 || e === !0) && r.updateMatrixWorld(e);
    }
  }
  updateWorldMatrix(e, t) {
    const n = this.parent;
    if (e === !0 && n !== null && n.matrixWorldAutoUpdate === !0 && n.updateWorldMatrix(!0, !1), this.matrixAutoUpdate && this.updateMatrix(), this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), t === !0) {
      const s = this.children;
      for (let r = 0, a = s.length; r < a; r++) {
        const o = s[r];
        o.matrixWorldAutoUpdate === !0 && o.updateWorldMatrix(!1, !0);
      }
    }
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string", n = {};
    t && (e = {
      geometries: {},
      materials: {},
      textures: {},
      images: {},
      shapes: {},
      skeletons: {},
      animations: {},
      nodes: {}
    }, n.metadata = {
      version: 4.5,
      type: "Object",
      generator: "Object3D.toJSON"
    });
    const s = {};
    s.uuid = this.uuid, s.type = this.type, this.name !== "" && (s.name = this.name), this.castShadow === !0 && (s.castShadow = !0), this.receiveShadow === !0 && (s.receiveShadow = !0), this.visible === !1 && (s.visible = !1), this.frustumCulled === !1 && (s.frustumCulled = !1), this.renderOrder !== 0 && (s.renderOrder = this.renderOrder), Object.keys(this.userData).length > 0 && (s.userData = this.userData), s.layers = this.layers.mask, s.matrix = this.matrix.toArray(), s.up = this.up.toArray(), this.matrixAutoUpdate === !1 && (s.matrixAutoUpdate = !1), this.isInstancedMesh && (s.type = "InstancedMesh", s.count = this.count, s.instanceMatrix = this.instanceMatrix.toJSON(), this.instanceColor !== null && (s.instanceColor = this.instanceColor.toJSON()));
    function r(o, c) {
      return o[c.uuid] === void 0 && (o[c.uuid] = c.toJSON(e)), c.uuid;
    }
    if (this.isScene)
      this.background && (this.background.isColor ? s.background = this.background.toJSON() : this.background.isTexture && (s.background = this.background.toJSON(e).uuid)), this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== !0 && (s.environment = this.environment.toJSON(e).uuid);
    else if (this.isMesh || this.isLine || this.isPoints) {
      s.geometry = r(e.geometries, this.geometry);
      const o = this.geometry.parameters;
      if (o !== void 0 && o.shapes !== void 0) {
        const c = o.shapes;
        if (Array.isArray(c))
          for (let l = 0, h = c.length; l < h; l++) {
            const d = c[l];
            r(e.shapes, d);
          }
        else
          r(e.shapes, c);
      }
    }
    if (this.isSkinnedMesh && (s.bindMode = this.bindMode, s.bindMatrix = this.bindMatrix.toArray(), this.skeleton !== void 0 && (r(e.skeletons, this.skeleton), s.skeleton = this.skeleton.uuid)), this.material !== void 0)
      if (Array.isArray(this.material)) {
        const o = [];
        for (let c = 0, l = this.material.length; c < l; c++)
          o.push(r(e.materials, this.material[c]));
        s.material = o;
      } else
        s.material = r(e.materials, this.material);
    if (this.children.length > 0) {
      s.children = [];
      for (let o = 0; o < this.children.length; o++)
        s.children.push(this.children[o].toJSON(e).object);
    }
    if (this.animations.length > 0) {
      s.animations = [];
      for (let o = 0; o < this.animations.length; o++) {
        const c = this.animations[o];
        s.animations.push(r(e.animations, c));
      }
    }
    if (t) {
      const o = a(e.geometries), c = a(e.materials), l = a(e.textures), h = a(e.images), d = a(e.shapes), u = a(e.skeletons), f = a(e.animations), p = a(e.nodes);
      o.length > 0 && (n.geometries = o), c.length > 0 && (n.materials = c), l.length > 0 && (n.textures = l), h.length > 0 && (n.images = h), d.length > 0 && (n.shapes = d), u.length > 0 && (n.skeletons = u), f.length > 0 && (n.animations = f), p.length > 0 && (n.nodes = p);
    }
    return n.object = s, n;
    function a(o) {
      const c = [];
      for (const l in o) {
        const h = o[l];
        delete h.metadata, c.push(h);
      }
      return c;
    }
  }
  clone(e) {
    return new this.constructor().copy(this, e);
  }
  copy(e, t = !0) {
    if (this.name = e.name, this.up.copy(e.up), this.position.copy(e.position), this.rotation.order = e.rotation.order, this.quaternion.copy(e.quaternion), this.scale.copy(e.scale), this.matrix.copy(e.matrix), this.matrixWorld.copy(e.matrixWorld), this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrixWorldNeedsUpdate = e.matrixWorldNeedsUpdate, this.matrixWorldAutoUpdate = e.matrixWorldAutoUpdate, this.layers.mask = e.layers.mask, this.visible = e.visible, this.castShadow = e.castShadow, this.receiveShadow = e.receiveShadow, this.frustumCulled = e.frustumCulled, this.renderOrder = e.renderOrder, this.userData = JSON.parse(JSON.stringify(e.userData)), t === !0)
      for (let n = 0; n < e.children.length; n++) {
        const s = e.children[n];
        this.add(s.clone());
      }
    return this;
  }
}
G0.DEFAULT_UP = /* @__PURE__ */ new C(0, 1, 0);
G0.DEFAULT_MATRIX_AUTO_UPDATE = !0;
G0.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = !0;
const e1 = /* @__PURE__ */ new C(), X1 = /* @__PURE__ */ new C(), U6 = /* @__PURE__ */ new C(), Y1 = /* @__PURE__ */ new C(), o9 = /* @__PURE__ */ new C(), l9 = /* @__PURE__ */ new C(), I4 = /* @__PURE__ */ new C(), F6 = /* @__PURE__ */ new C(), z6 = /* @__PURE__ */ new C(), k6 = /* @__PURE__ */ new C();
let c7 = !1;
class Et {
  constructor(e = new C(), t = new C(), n = new C()) {
    this.a = e, this.b = t, this.c = n;
  }
  static getNormal(e, t, n, s) {
    s.subVectors(n, t), e1.subVectors(e, t), s.cross(e1);
    const r = s.lengthSq();
    return r > 0 ? s.multiplyScalar(1 / Math.sqrt(r)) : s.set(0, 0, 0);
  }
  // static/instance method to calculate barycentric coordinates
  // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
  static getBarycoord(e, t, n, s, r) {
    e1.subVectors(s, t), X1.subVectors(n, t), U6.subVectors(e, t);
    const a = e1.dot(e1), o = e1.dot(X1), c = e1.dot(U6), l = X1.dot(X1), h = X1.dot(U6), d = a * l - o * o;
    if (d === 0)
      return r.set(-2, -1, -1);
    const u = 1 / d, f = (l * c - o * h) * u, p = (a * h - o * c) * u;
    return r.set(1 - f - p, p, f);
  }
  static containsPoint(e, t, n, s) {
    return this.getBarycoord(e, t, n, s, Y1), Y1.x >= 0 && Y1.y >= 0 && Y1.x + Y1.y <= 1;
  }
  static getUV(e, t, n, s, r, a, o, c) {
    return c7 === !1 && (console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."), c7 = !0), this.getInterpolation(e, t, n, s, r, a, o, c);
  }
  static getInterpolation(e, t, n, s, r, a, o, c) {
    return this.getBarycoord(e, t, n, s, Y1), c.setScalar(0), c.addScaledVector(r, Y1.x), c.addScaledVector(a, Y1.y), c.addScaledVector(o, Y1.z), c;
  }
  static isFrontFacing(e, t, n, s) {
    return e1.subVectors(n, t), X1.subVectors(e, t), e1.cross(X1).dot(s) < 0;
  }
  set(e, t, n) {
    return this.a.copy(e), this.b.copy(t), this.c.copy(n), this;
  }
  setFromPointsAndIndices(e, t, n, s) {
    return this.a.copy(e[t]), this.b.copy(e[n]), this.c.copy(e[s]), this;
  }
  setFromAttributeAndIndices(e, t, n, s) {
    return this.a.fromBufferAttribute(e, t), this.b.fromBufferAttribute(e, n), this.c.fromBufferAttribute(e, s), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.a.copy(e.a), this.b.copy(e.b), this.c.copy(e.c), this;
  }
  getArea() {
    return e1.subVectors(this.c, this.b), X1.subVectors(this.a, this.b), e1.cross(X1).length() * 0.5;
  }
  getMidpoint(e) {
    return e.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
  }
  getNormal(e) {
    return Et.getNormal(this.a, this.b, this.c, e);
  }
  getPlane(e) {
    return e.setFromCoplanarPoints(this.a, this.b, this.c);
  }
  getBarycoord(e, t) {
    return Et.getBarycoord(e, this.a, this.b, this.c, t);
  }
  getUV(e, t, n, s, r) {
    return c7 === !1 && (console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."), c7 = !0), Et.getInterpolation(e, this.a, this.b, this.c, t, n, s, r);
  }
  getInterpolation(e, t, n, s, r) {
    return Et.getInterpolation(e, this.a, this.b, this.c, t, n, s, r);
  }
  containsPoint(e) {
    return Et.containsPoint(e, this.a, this.b, this.c);
  }
  isFrontFacing(e) {
    return Et.isFrontFacing(this.a, this.b, this.c, e);
  }
  intersectsBox(e) {
    return e.intersectsTriangle(this);
  }
  closestPointToPoint(e, t) {
    const n = this.a, s = this.b, r = this.c;
    let a, o;
    o9.subVectors(s, n), l9.subVectors(r, n), F6.subVectors(e, n);
    const c = o9.dot(F6), l = l9.dot(F6);
    if (c <= 0 && l <= 0)
      return t.copy(n);
    z6.subVectors(e, s);
    const h = o9.dot(z6), d = l9.dot(z6);
    if (h >= 0 && d <= h)
      return t.copy(s);
    const u = c * d - h * l;
    if (u <= 0 && c >= 0 && h <= 0)
      return a = c / (c - h), t.copy(n).addScaledVector(o9, a);
    k6.subVectors(e, r);
    const f = o9.dot(k6), p = l9.dot(k6);
    if (p >= 0 && f <= p)
      return t.copy(r);
    const _ = f * l - c * p;
    if (_ <= 0 && l >= 0 && p <= 0)
      return o = l / (l - p), t.copy(n).addScaledVector(l9, o);
    const g = h * p - f * d;
    if (g <= 0 && d - h >= 0 && f - p >= 0)
      return I4.subVectors(r, s), o = (d - h) / (d - h + (f - p)), t.copy(s).addScaledVector(I4, o);
    const m = 1 / (g + _ + u);
    return a = _ * m, o = u * m, t.copy(n).addScaledVector(o9, a).addScaledVector(l9, o);
  }
  equals(e) {
    return e.a.equals(this.a) && e.b.equals(this.b) && e.c.equals(this.c);
  }
}
let lg = 0;
class et extends ln {
  constructor() {
    super(), this.isMaterial = !0, Object.defineProperty(this, "id", { value: lg++ }), this.uuid = kt(), this.name = "", this.type = "Material", this.blending = Ri, this.side = an, this.vertexColors = !1, this.opacity = 1, this.transparent = !1, this.blendSrc = s2, this.blendDst = r2, this.blendEquation = vi, this.blendSrcAlpha = null, this.blendDstAlpha = null, this.blendEquationAlpha = null, this.depthFunc = Dr, this.depthTest = !0, this.depthWrite = !0, this.stencilWriteMask = 255, this.stencilFunc = fh, this.stencilRef = 0, this.stencilFuncMask = 255, this.stencilFail = vr, this.stencilZFail = vr, this.stencilZPass = vr, this.stencilWrite = !1, this.clippingPlanes = null, this.clipIntersection = !1, this.clipShadows = !1, this.shadowSide = null, this.colorWrite = !0, this.precision = null, this.polygonOffset = !1, this.polygonOffsetFactor = 0, this.polygonOffsetUnits = 0, this.dithering = !1, this.alphaToCoverage = !1, this.premultipliedAlpha = !1, this.forceSinglePass = !1, this.visible = !0, this.toneMapped = !0, this.userData = {}, this.version = 0, this._alphaTest = 0;
  }
  get alphaTest() {
    return this._alphaTest;
  }
  set alphaTest(e) {
    this._alphaTest > 0 != e > 0 && this.version++, this._alphaTest = e;
  }
  onBuild() {
  }
  onBeforeRender() {
  }
  onBeforeCompile() {
  }
  customProgramCacheKey() {
    return this.onBeforeCompile.toString();
  }
  setValues(e) {
    if (e !== void 0)
      for (const t in e) {
        const n = e[t];
        if (n === void 0) {
          console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);
          continue;
        }
        const s = this[t];
        if (s === void 0) {
          console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);
          continue;
        }
        s && s.isColor ? s.set(n) : s && s.isVector3 && n && n.isVector3 ? s.copy(n) : this[t] = n;
      }
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    t && (e = {
      textures: {},
      images: {}
    });
    const n = {
      metadata: {
        version: 4.5,
        type: "Material",
        generator: "Material.toJSON"
      }
    };
    n.uuid = this.uuid, n.type = this.type, this.name !== "" && (n.name = this.name), this.color && this.color.isColor && (n.color = this.color.getHex()), this.roughness !== void 0 && (n.roughness = this.roughness), this.metalness !== void 0 && (n.metalness = this.metalness), this.sheen !== void 0 && (n.sheen = this.sheen), this.sheenColor && this.sheenColor.isColor && (n.sheenColor = this.sheenColor.getHex()), this.sheenRoughness !== void 0 && (n.sheenRoughness = this.sheenRoughness), this.emissive && this.emissive.isColor && (n.emissive = this.emissive.getHex()), this.emissiveIntensity && this.emissiveIntensity !== 1 && (n.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (n.specular = this.specular.getHex()), this.specularIntensity !== void 0 && (n.specularIntensity = this.specularIntensity), this.specularColor && this.specularColor.isColor && (n.specularColor = this.specularColor.getHex()), this.shininess !== void 0 && (n.shininess = this.shininess), this.clearcoat !== void 0 && (n.clearcoat = this.clearcoat), this.clearcoatRoughness !== void 0 && (n.clearcoatRoughness = this.clearcoatRoughness), this.clearcoatMap && this.clearcoatMap.isTexture && (n.clearcoatMap = this.clearcoatMap.toJSON(e).uuid), this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (n.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(e).uuid), this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (n.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(e).uuid, n.clearcoatNormalScale = this.clearcoatNormalScale.toArray()), this.iridescence !== void 0 && (n.iridescence = this.iridescence), this.iridescenceIOR !== void 0 && (n.iridescenceIOR = this.iridescenceIOR), this.iridescenceThicknessRange !== void 0 && (n.iridescenceThicknessRange = this.iridescenceThicknessRange), this.iridescenceMap && this.iridescenceMap.isTexture && (n.iridescenceMap = this.iridescenceMap.toJSON(e).uuid), this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture && (n.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(e).uuid), this.map && this.map.isTexture && (n.map = this.map.toJSON(e).uuid), this.matcap && this.matcap.isTexture && (n.matcap = this.matcap.toJSON(e).uuid), this.alphaMap && this.alphaMap.isTexture && (n.alphaMap = this.alphaMap.toJSON(e).uuid), this.lightMap && this.lightMap.isTexture && (n.lightMap = this.lightMap.toJSON(e).uuid, n.lightMapIntensity = this.lightMapIntensity), this.aoMap && this.aoMap.isTexture && (n.aoMap = this.aoMap.toJSON(e).uuid, n.aoMapIntensity = this.aoMapIntensity), this.bumpMap && this.bumpMap.isTexture && (n.bumpMap = this.bumpMap.toJSON(e).uuid, n.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (n.normalMap = this.normalMap.toJSON(e).uuid, n.normalMapType = this.normalMapType, n.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (n.displacementMap = this.displacementMap.toJSON(e).uuid, n.displacementScale = this.displacementScale, n.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (n.roughnessMap = this.roughnessMap.toJSON(e).uuid), this.metalnessMap && this.metalnessMap.isTexture && (n.metalnessMap = this.metalnessMap.toJSON(e).uuid), this.emissiveMap && this.emissiveMap.isTexture && (n.emissiveMap = this.emissiveMap.toJSON(e).uuid), this.specularMap && this.specularMap.isTexture && (n.specularMap = this.specularMap.toJSON(e).uuid), this.specularIntensityMap && this.specularIntensityMap.isTexture && (n.specularIntensityMap = this.specularIntensityMap.toJSON(e).uuid), this.specularColorMap && this.specularColorMap.isTexture && (n.specularColorMap = this.specularColorMap.toJSON(e).uuid), this.envMap && this.envMap.isTexture && (n.envMap = this.envMap.toJSON(e).uuid, this.combine !== void 0 && (n.combine = this.combine)), this.envMapIntensity !== void 0 && (n.envMapIntensity = this.envMapIntensity), this.reflectivity !== void 0 && (n.reflectivity = this.reflectivity), this.refractionRatio !== void 0 && (n.refractionRatio = this.refractionRatio), this.gradientMap && this.gradientMap.isTexture && (n.gradientMap = this.gradientMap.toJSON(e).uuid), this.transmission !== void 0 && (n.transmission = this.transmission), this.transmissionMap && this.transmissionMap.isTexture && (n.transmissionMap = this.transmissionMap.toJSON(e).uuid), this.thickness !== void 0 && (n.thickness = this.thickness), this.thicknessMap && this.thicknessMap.isTexture && (n.thicknessMap = this.thicknessMap.toJSON(e).uuid), this.attenuationDistance !== void 0 && this.attenuationDistance !== 1 / 0 && (n.attenuationDistance = this.attenuationDistance), this.attenuationColor !== void 0 && (n.attenuationColor = this.attenuationColor.getHex()), this.size !== void 0 && (n.size = this.size), this.shadowSide !== null && (n.shadowSide = this.shadowSide), this.sizeAttenuation !== void 0 && (n.sizeAttenuation = this.sizeAttenuation), this.blending !== Ri && (n.blending = this.blending), this.side !== an && (n.side = this.side), this.vertexColors && (n.vertexColors = !0), this.opacity < 1 && (n.opacity = this.opacity), this.transparent === !0 && (n.transparent = this.transparent), n.depthFunc = this.depthFunc, n.depthTest = this.depthTest, n.depthWrite = this.depthWrite, n.colorWrite = this.colorWrite, n.stencilWrite = this.stencilWrite, n.stencilWriteMask = this.stencilWriteMask, n.stencilFunc = this.stencilFunc, n.stencilRef = this.stencilRef, n.stencilFuncMask = this.stencilFuncMask, n.stencilFail = this.stencilFail, n.stencilZFail = this.stencilZFail, n.stencilZPass = this.stencilZPass, this.rotation !== void 0 && this.rotation !== 0 && (n.rotation = this.rotation), this.polygonOffset === !0 && (n.polygonOffset = !0), this.polygonOffsetFactor !== 0 && (n.polygonOffsetFactor = this.polygonOffsetFactor), this.polygonOffsetUnits !== 0 && (n.polygonOffsetUnits = this.polygonOffsetUnits), this.linewidth !== void 0 && this.linewidth !== 1 && (n.linewidth = this.linewidth), this.dashSize !== void 0 && (n.dashSize = this.dashSize), this.gapSize !== void 0 && (n.gapSize = this.gapSize), this.scale !== void 0 && (n.scale = this.scale), this.dithering === !0 && (n.dithering = !0), this.alphaTest > 0 && (n.alphaTest = this.alphaTest), this.alphaToCoverage === !0 && (n.alphaToCoverage = this.alphaToCoverage), this.premultipliedAlpha === !0 && (n.premultipliedAlpha = this.premultipliedAlpha), this.forceSinglePass === !0 && (n.forceSinglePass = this.forceSinglePass), this.wireframe === !0 && (n.wireframe = this.wireframe), this.wireframeLinewidth > 1 && (n.wireframeLinewidth = this.wireframeLinewidth), this.wireframeLinecap !== "round" && (n.wireframeLinecap = this.wireframeLinecap), this.wireframeLinejoin !== "round" && (n.wireframeLinejoin = this.wireframeLinejoin), this.flatShading === !0 && (n.flatShading = this.flatShading), this.visible === !1 && (n.visible = !1), this.toneMapped === !1 && (n.toneMapped = !1), this.fog === !1 && (n.fog = !1), Object.keys(this.userData).length > 0 && (n.userData = this.userData);
    function s(r) {
      const a = [];
      for (const o in r) {
        const c = r[o];
        delete c.metadata, a.push(c);
      }
      return a;
    }
    if (t) {
      const r = s(e.textures), a = s(e.images);
      r.length > 0 && (n.textures = r), a.length > 0 && (n.images = a);
    }
    return n;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.name = e.name, this.blending = e.blending, this.side = e.side, this.vertexColors = e.vertexColors, this.opacity = e.opacity, this.transparent = e.transparent, this.blendSrc = e.blendSrc, this.blendDst = e.blendDst, this.blendEquation = e.blendEquation, this.blendSrcAlpha = e.blendSrcAlpha, this.blendDstAlpha = e.blendDstAlpha, this.blendEquationAlpha = e.blendEquationAlpha, this.depthFunc = e.depthFunc, this.depthTest = e.depthTest, this.depthWrite = e.depthWrite, this.stencilWriteMask = e.stencilWriteMask, this.stencilFunc = e.stencilFunc, this.stencilRef = e.stencilRef, this.stencilFuncMask = e.stencilFuncMask, this.stencilFail = e.stencilFail, this.stencilZFail = e.stencilZFail, this.stencilZPass = e.stencilZPass, this.stencilWrite = e.stencilWrite;
    const t = e.clippingPlanes;
    let n = null;
    if (t !== null) {
      const s = t.length;
      n = new Array(s);
      for (let r = 0; r !== s; ++r)
        n[r] = t[r].clone();
    }
    return this.clippingPlanes = n, this.clipIntersection = e.clipIntersection, this.clipShadows = e.clipShadows, this.shadowSide = e.shadowSide, this.colorWrite = e.colorWrite, this.precision = e.precision, this.polygonOffset = e.polygonOffset, this.polygonOffsetFactor = e.polygonOffsetFactor, this.polygonOffsetUnits = e.polygonOffsetUnits, this.dithering = e.dithering, this.alphaTest = e.alphaTest, this.alphaToCoverage = e.alphaToCoverage, this.premultipliedAlpha = e.premultipliedAlpha, this.forceSinglePass = e.forceSinglePass, this.visible = e.visible, this.toneMapped = e.toneMapped, this.userData = JSON.parse(JSON.stringify(e.userData)), this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
}
const _h = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
}, t1 = { h: 0, s: 0, l: 0 }, h7 = { h: 0, s: 0, l: 0 };
function B6(i, e, t) {
  return t < 0 && (t += 1), t > 1 && (t -= 1), t < 1 / 6 ? i + (e - i) * 6 * t : t < 1 / 2 ? e : t < 2 / 3 ? i + (e - i) * 6 * (2 / 3 - t) : i;
}
class f0 {
  constructor(e, t, n) {
    return this.isColor = !0, this.r = 1, this.g = 1, this.b = 1, t === void 0 && n === void 0 ? this.set(e) : this.setRGB(e, t, n);
  }
  set(e) {
    return e && e.isColor ? this.copy(e) : typeof e == "number" ? this.setHex(e) : typeof e == "string" && this.setStyle(e), this;
  }
  setScalar(e) {
    return this.r = e, this.g = e, this.b = e, this;
  }
  setHex(e, t = i1) {
    return e = Math.floor(e), this.r = (e >> 16 & 255) / 255, this.g = (e >> 8 & 255) / 255, this.b = (e & 255) / 255, Mt.toWorkingColorSpace(this, t), this;
  }
  setRGB(e, t, n, s = Mt.workingColorSpace) {
    return this.r = e, this.g = t, this.b = n, Mt.toWorkingColorSpace(this, s), this;
  }
  setHSL(e, t, n, s = Mt.workingColorSpace) {
    if (e = u2(e, 1), t = De(t, 0, 1), n = De(n, 0, 1), t === 0)
      this.r = this.g = this.b = n;
    else {
      const r = n <= 0.5 ? n * (1 + t) : n + t - n * t, a = 2 * n - r;
      this.r = B6(a, r, e + 1 / 3), this.g = B6(a, r, e), this.b = B6(a, r, e - 1 / 3);
    }
    return Mt.toWorkingColorSpace(this, s), this;
  }
  setStyle(e, t = i1) {
    function n(r) {
      r !== void 0 && parseFloat(r) < 1 && console.warn("THREE.Color: Alpha component of " + e + " will be ignored.");
    }
    let s;
    if (s = /^(\w+)\(([^\)]*)\)/.exec(e)) {
      let r;
      const a = s[1], o = s[2];
      switch (a) {
        case "rgb":
        case "rgba":
          if (r = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))
            return this.r = Math.min(255, parseInt(r[1], 10)) / 255, this.g = Math.min(255, parseInt(r[2], 10)) / 255, this.b = Math.min(255, parseInt(r[3], 10)) / 255, Mt.toWorkingColorSpace(this, t), n(r[4]), this;
          if (r = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))
            return this.r = Math.min(100, parseInt(r[1], 10)) / 100, this.g = Math.min(100, parseInt(r[2], 10)) / 100, this.b = Math.min(100, parseInt(r[3], 10)) / 100, Mt.toWorkingColorSpace(this, t), n(r[4]), this;
          break;
        case "hsl":
        case "hsla":
          if (r = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o)) {
            const c = parseFloat(r[1]) / 360, l = parseFloat(r[2]) / 100, h = parseFloat(r[3]) / 100;
            return n(r[4]), this.setHSL(c, l, h, t);
          }
          break;
        default:
          console.warn("THREE.Color: Unknown color model " + e);
      }
    } else if (s = /^\#([A-Fa-f\d]+)$/.exec(e)) {
      const r = s[1], a = r.length;
      if (a === 3)
        return this.setRGB(
          parseInt(r.charAt(0), 16) / 15,
          parseInt(r.charAt(1), 16) / 15,
          parseInt(r.charAt(2), 16) / 15,
          t
        );
      if (a === 6)
        return this.setHex(parseInt(r, 16), t);
      console.warn("THREE.Color: Invalid hex color " + e);
    } else if (e && e.length > 0)
      return this.setColorName(e, t);
    return this;
  }
  setColorName(e, t = i1) {
    const n = _h[e.toLowerCase()];
    return n !== void 0 ? this.setHex(n, t) : console.warn("THREE.Color: Unknown color " + e), this;
  }
  clone() {
    return new this.constructor(this.r, this.g, this.b);
  }
  copy(e) {
    return this.r = e.r, this.g = e.g, this.b = e.b, this;
  }
  copySRGBToLinear(e) {
    return this.r = z9(e.r), this.g = z9(e.g), this.b = z9(e.b), this;
  }
  copyLinearToSRGB(e) {
    return this.r = C6(e.r), this.g = C6(e.g), this.b = C6(e.b), this;
  }
  convertSRGBToLinear() {
    return this.copySRGBToLinear(this), this;
  }
  convertLinearToSRGB() {
    return this.copyLinearToSRGB(this), this;
  }
  getHex(e = i1) {
    return Mt.fromWorkingColorSpace(ot.copy(this), e), De(ot.r * 255, 0, 255) << 16 ^ De(ot.g * 255, 0, 255) << 8 ^ De(ot.b * 255, 0, 255) << 0;
  }
  getHexString(e = i1) {
    return ("000000" + this.getHex(e).toString(16)).slice(-6);
  }
  getHSL(e, t = Mt.workingColorSpace) {
    Mt.fromWorkingColorSpace(ot.copy(this), t);
    const n = ot.r, s = ot.g, r = ot.b, a = Math.max(n, s, r), o = Math.min(n, s, r);
    let c, l;
    const h = (o + a) / 2;
    if (o === a)
      c = 0, l = 0;
    else {
      const d = a - o;
      switch (l = h <= 0.5 ? d / (a + o) : d / (2 - a - o), a) {
        case n:
          c = (s - r) / d + (s < r ? 6 : 0);
          break;
        case s:
          c = (r - n) / d + 2;
          break;
        case r:
          c = (n - s) / d + 4;
          break;
      }
      c /= 6;
    }
    return e.h = c, e.s = l, e.l = h, e;
  }
  getRGB(e, t = Mt.workingColorSpace) {
    return Mt.fromWorkingColorSpace(ot.copy(this), t), e.r = ot.r, e.g = ot.g, e.b = ot.b, e;
  }
  getStyle(e = i1) {
    Mt.fromWorkingColorSpace(ot.copy(this), e);
    const t = ot.r, n = ot.g, s = ot.b;
    return e !== i1 ? `color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${s.toFixed(3)})` : `rgb(${t * 255 | 0},${n * 255 | 0},${s * 255 | 0})`;
  }
  offsetHSL(e, t, n) {
    return this.getHSL(t1), t1.h += e, t1.s += t, t1.l += n, this.setHSL(t1.h, t1.s, t1.l), this;
  }
  add(e) {
    return this.r += e.r, this.g += e.g, this.b += e.b, this;
  }
  addColors(e, t) {
    return this.r = e.r + t.r, this.g = e.g + t.g, this.b = e.b + t.b, this;
  }
  addScalar(e) {
    return this.r += e, this.g += e, this.b += e, this;
  }
  sub(e) {
    return this.r = Math.max(0, this.r - e.r), this.g = Math.max(0, this.g - e.g), this.b = Math.max(0, this.b - e.b), this;
  }
  multiply(e) {
    return this.r *= e.r, this.g *= e.g, this.b *= e.b, this;
  }
  multiplyScalar(e) {
    return this.r *= e, this.g *= e, this.b *= e, this;
  }
  lerp(e, t) {
    return this.r += (e.r - this.r) * t, this.g += (e.g - this.g) * t, this.b += (e.b - this.b) * t, this;
  }
  lerpColors(e, t, n) {
    return this.r = e.r + (t.r - e.r) * n, this.g = e.g + (t.g - e.g) * n, this.b = e.b + (t.b - e.b) * n, this;
  }
  lerpHSL(e, t) {
    this.getHSL(t1), e.getHSL(h7);
    const n = B8(t1.h, h7.h, t), s = B8(t1.s, h7.s, t), r = B8(t1.l, h7.l, t);
    return this.setHSL(n, s, r), this;
  }
  setFromVector3(e) {
    return this.r = e.x, this.g = e.y, this.b = e.z, this;
  }
  applyMatrix3(e) {
    const t = this.r, n = this.g, s = this.b, r = e.elements;
    return this.r = r[0] * t + r[3] * n + r[6] * s, this.g = r[1] * t + r[4] * n + r[7] * s, this.b = r[2] * t + r[5] * n + r[8] * s, this;
  }
  equals(e) {
    return e.r === this.r && e.g === this.g && e.b === this.b;
  }
  fromArray(e, t = 0) {
    return this.r = e[t], this.g = e[t + 1], this.b = e[t + 2], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.r, e[t + 1] = this.g, e[t + 2] = this.b, e;
  }
  fromBufferAttribute(e, t) {
    return this.r = e.getX(t), this.g = e.getY(t), this.b = e.getZ(t), this;
  }
  toJSON() {
    return this.getHex();
  }
  *[Symbol.iterator]() {
    yield this.r, yield this.g, yield this.b;
  }
}
const ot = /* @__PURE__ */ new f0();
f0.NAMES = _h;
class c1 extends et {
  constructor(e) {
    super(), this.isMeshBasicMaterial = !0, this.type = "MeshBasicMaterial", this.color = new f0(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = Ls, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.fog = e.fog, this;
  }
}
const en = /* @__PURE__ */ cg();
function cg() {
  const i = new ArrayBuffer(4), e = new Float32Array(i), t = new Uint32Array(i), n = new Uint32Array(512), s = new Uint32Array(512);
  for (let c = 0; c < 256; ++c) {
    const l = c - 127;
    l < -27 ? (n[c] = 0, n[c | 256] = 32768, s[c] = 24, s[c | 256] = 24) : l < -14 ? (n[c] = 1024 >> -l - 14, n[c | 256] = 1024 >> -l - 14 | 32768, s[c] = -l - 1, s[c | 256] = -l - 1) : l <= 15 ? (n[c] = l + 15 << 10, n[c | 256] = l + 15 << 10 | 32768, s[c] = 13, s[c | 256] = 13) : l < 128 ? (n[c] = 31744, n[c | 256] = 64512, s[c] = 24, s[c | 256] = 24) : (n[c] = 31744, n[c | 256] = 64512, s[c] = 13, s[c | 256] = 13);
  }
  const r = new Uint32Array(2048), a = new Uint32Array(64), o = new Uint32Array(64);
  for (let c = 1; c < 1024; ++c) {
    let l = c << 13, h = 0;
    for (; !(l & 8388608); )
      l <<= 1, h -= 8388608;
    l &= -8388609, h += 947912704, r[c] = l | h;
  }
  for (let c = 1024; c < 2048; ++c)
    r[c] = 939524096 + (c - 1024 << 13);
  for (let c = 1; c < 31; ++c)
    a[c] = c << 23;
  a[31] = 1199570944, a[32] = 2147483648;
  for (let c = 33; c < 63; ++c)
    a[c] = 2147483648 + (c - 32 << 23);
  a[63] = 3347054592;
  for (let c = 1; c < 64; ++c)
    c !== 32 && (o[c] = 1024);
  return {
    floatView: e,
    uint32View: t,
    baseTable: n,
    shiftTable: s,
    mantissaTable: r,
    exponentTable: a,
    offsetTable: o
  };
}
function St(i) {
  Math.abs(i) > 65504 && console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."), i = De(i, -65504, 65504), en.floatView[0] = i;
  const e = en.uint32View[0], t = e >> 23 & 511;
  return en.baseTable[t] + ((e & 8388607) >> en.shiftTable[t]);
}
function N8(i) {
  const e = i >> 10;
  return en.uint32View[0] = en.mantissaTable[en.offsetTable[e] + (i & 1023)] + en.exponentTable[e], en.floatView[0];
}
const hg = {
  toHalfFloat: St,
  fromHalfFloat: N8
}, He = /* @__PURE__ */ new C(), u7 = /* @__PURE__ */ new o0();
class ee {
  constructor(e, t, n = !1) {
    if (Array.isArray(e))
      throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    this.isBufferAttribute = !0, this.name = "", this.array = e, this.itemSize = t, this.count = e !== void 0 ? e.length / t : 0, this.normalized = n, this.usage = hs, this.updateRange = { offset: 0, count: -1 }, this.version = 0;
  }
  onUploadCallback() {
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  setUsage(e) {
    return this.usage = e, this;
  }
  copy(e) {
    return this.name = e.name, this.array = new e.array.constructor(e.array), this.itemSize = e.itemSize, this.count = e.count, this.normalized = e.normalized, this.usage = e.usage, this;
  }
  copyAt(e, t, n) {
    e *= this.itemSize, n *= t.itemSize;
    for (let s = 0, r = this.itemSize; s < r; s++)
      this.array[e + s] = t.array[n + s];
    return this;
  }
  copyArray(e) {
    return this.array.set(e), this;
  }
  applyMatrix3(e) {
    if (this.itemSize === 2)
      for (let t = 0, n = this.count; t < n; t++)
        u7.fromBufferAttribute(this, t), u7.applyMatrix3(e), this.setXY(t, u7.x, u7.y);
    else if (this.itemSize === 3)
      for (let t = 0, n = this.count; t < n; t++)
        He.fromBufferAttribute(this, t), He.applyMatrix3(e), this.setXYZ(t, He.x, He.y, He.z);
    return this;
  }
  applyMatrix4(e) {
    for (let t = 0, n = this.count; t < n; t++)
      He.fromBufferAttribute(this, t), He.applyMatrix4(e), this.setXYZ(t, He.x, He.y, He.z);
    return this;
  }
  applyNormalMatrix(e) {
    for (let t = 0, n = this.count; t < n; t++)
      He.fromBufferAttribute(this, t), He.applyNormalMatrix(e), this.setXYZ(t, He.x, He.y, He.z);
    return this;
  }
  transformDirection(e) {
    for (let t = 0, n = this.count; t < n; t++)
      He.fromBufferAttribute(this, t), He.transformDirection(e), this.setXYZ(t, He.x, He.y, He.z);
    return this;
  }
  set(e, t = 0) {
    return this.array.set(e, t), this;
  }
  getX(e) {
    let t = this.array[e * this.itemSize];
    return this.normalized && (t = Ut(t, this.array)), t;
  }
  setX(e, t) {
    return this.normalized && (t = Z0(t, this.array)), this.array[e * this.itemSize] = t, this;
  }
  getY(e) {
    let t = this.array[e * this.itemSize + 1];
    return this.normalized && (t = Ut(t, this.array)), t;
  }
  setY(e, t) {
    return this.normalized && (t = Z0(t, this.array)), this.array[e * this.itemSize + 1] = t, this;
  }
  getZ(e) {
    let t = this.array[e * this.itemSize + 2];
    return this.normalized && (t = Ut(t, this.array)), t;
  }
  setZ(e, t) {
    return this.normalized && (t = Z0(t, this.array)), this.array[e * this.itemSize + 2] = t, this;
  }
  getW(e) {
    let t = this.array[e * this.itemSize + 3];
    return this.normalized && (t = Ut(t, this.array)), t;
  }
  setW(e, t) {
    return this.normalized && (t = Z0(t, this.array)), this.array[e * this.itemSize + 3] = t, this;
  }
  setXY(e, t, n) {
    return e *= this.itemSize, this.normalized && (t = Z0(t, this.array), n = Z0(n, this.array)), this.array[e + 0] = t, this.array[e + 1] = n, this;
  }
  setXYZ(e, t, n, s) {
    return e *= this.itemSize, this.normalized && (t = Z0(t, this.array), n = Z0(n, this.array), s = Z0(s, this.array)), this.array[e + 0] = t, this.array[e + 1] = n, this.array[e + 2] = s, this;
  }
  setXYZW(e, t, n, s, r) {
    return e *= this.itemSize, this.normalized && (t = Z0(t, this.array), n = Z0(n, this.array), s = Z0(s, this.array), r = Z0(r, this.array)), this.array[e + 0] = t, this.array[e + 1] = n, this.array[e + 2] = s, this.array[e + 3] = r, this;
  }
  onUpload(e) {
    return this.onUploadCallback = e, this;
  }
  clone() {
    return new this.constructor(this.array, this.itemSize).copy(this);
  }
  toJSON() {
    const e = {
      itemSize: this.itemSize,
      type: this.array.constructor.name,
      array: Array.from(this.array),
      normalized: this.normalized
    };
    return this.name !== "" && (e.name = this.name), this.usage !== hs && (e.usage = this.usage), (this.updateRange.offset !== 0 || this.updateRange.count !== -1) && (e.updateRange = this.updateRange), e;
  }
  copyColorsArray() {
    console.error("THREE.BufferAttribute: copyColorsArray() was removed in r144.");
  }
  copyVector2sArray() {
    console.error("THREE.BufferAttribute: copyVector2sArray() was removed in r144.");
  }
  copyVector3sArray() {
    console.error("THREE.BufferAttribute: copyVector3sArray() was removed in r144.");
  }
  copyVector4sArray() {
    console.error("THREE.BufferAttribute: copyVector4sArray() was removed in r144.");
  }
}
class ug extends ee {
  constructor(e, t, n) {
    super(new Int8Array(e), t, n);
  }
}
class dg extends ee {
  constructor(e, t, n) {
    super(new Uint8Array(e), t, n);
  }
}
class fg extends ee {
  constructor(e, t, n) {
    super(new Uint8ClampedArray(e), t, n);
  }
}
class pg extends ee {
  constructor(e, t, n) {
    super(new Int16Array(e), t, n);
  }
}
class f2 extends ee {
  constructor(e, t, n) {
    super(new Uint16Array(e), t, n);
  }
}
class mg extends ee {
  constructor(e, t, n) {
    super(new Int32Array(e), t, n);
  }
}
class p2 extends ee {
  constructor(e, t, n) {
    super(new Uint32Array(e), t, n);
  }
}
class gg extends ee {
  constructor(e, t, n) {
    super(new Uint16Array(e), t, n), this.isFloat16BufferAttribute = !0;
  }
  getX(e) {
    let t = N8(this.array[e * this.itemSize]);
    return this.normalized && (t = Ut(t, this.array)), t;
  }
  setX(e, t) {
    return this.normalized && (t = Z0(t, this.array)), this.array[e * this.itemSize] = St(t), this;
  }
  getY(e) {
    let t = N8(this.array[e * this.itemSize + 1]);
    return this.normalized && (t = Ut(t, this.array)), t;
  }
  setY(e, t) {
    return this.normalized && (t = Z0(t, this.array)), this.array[e * this.itemSize + 1] = St(t), this;
  }
  getZ(e) {
    let t = N8(this.array[e * this.itemSize + 2]);
    return this.normalized && (t = Ut(t, this.array)), t;
  }
  setZ(e, t) {
    return this.normalized && (t = Z0(t, this.array)), this.array[e * this.itemSize + 2] = St(t), this;
  }
  getW(e) {
    let t = N8(this.array[e * this.itemSize + 3]);
    return this.normalized && (t = Ut(t, this.array)), t;
  }
  setW(e, t) {
    return this.normalized && (t = Z0(t, this.array)), this.array[e * this.itemSize + 3] = St(t), this;
  }
  setXY(e, t, n) {
    return e *= this.itemSize, this.normalized && (t = Z0(t, this.array), n = Z0(n, this.array)), this.array[e + 0] = St(t), this.array[e + 1] = St(n), this;
  }
  setXYZ(e, t, n, s) {
    return e *= this.itemSize, this.normalized && (t = Z0(t, this.array), n = Z0(n, this.array), s = Z0(s, this.array)), this.array[e + 0] = St(t), this.array[e + 1] = St(n), this.array[e + 2] = St(s), this;
  }
  setXYZW(e, t, n, s, r) {
    return e *= this.itemSize, this.normalized && (t = Z0(t, this.array), n = Z0(n, this.array), s = Z0(s, this.array), r = Z0(r, this.array)), this.array[e + 0] = St(t), this.array[e + 1] = St(n), this.array[e + 2] = St(s), this.array[e + 3] = St(r), this;
  }
}
class v0 extends ee {
  constructor(e, t, n) {
    super(new Float32Array(e), t, n);
  }
}
class _g extends ee {
  constructor(e, t, n) {
    super(new Float64Array(e), t, n);
  }
}
let vg = 0;
const Vt = /* @__PURE__ */ new k0(), V6 = /* @__PURE__ */ new G0(), c9 = /* @__PURE__ */ new C(), Rt = /* @__PURE__ */ new F1(), g8 = /* @__PURE__ */ new F1(), $e = /* @__PURE__ */ new C();
class F0 extends ln {
  constructor() {
    super(), this.isBufferGeometry = !0, Object.defineProperty(this, "id", { value: vg++ }), this.uuid = kt(), this.name = "", this.type = "BufferGeometry", this.index = null, this.attributes = {}, this.morphAttributes = {}, this.morphTargetsRelative = !1, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.drawRange = { start: 0, count: 1 / 0 }, this.userData = {};
  }
  getIndex() {
    return this.index;
  }
  setIndex(e) {
    return Array.isArray(e) ? this.index = new (gh(e) ? p2 : f2)(e, 1) : this.index = e, this;
  }
  getAttribute(e) {
    return this.attributes[e];
  }
  setAttribute(e, t) {
    return this.attributes[e] = t, this;
  }
  deleteAttribute(e) {
    return delete this.attributes[e], this;
  }
  hasAttribute(e) {
    return this.attributes[e] !== void 0;
  }
  addGroup(e, t, n = 0) {
    this.groups.push({
      start: e,
      count: t,
      materialIndex: n
    });
  }
  clearGroups() {
    this.groups = [];
  }
  setDrawRange(e, t) {
    this.drawRange.start = e, this.drawRange.count = t;
  }
  applyMatrix4(e) {
    const t = this.attributes.position;
    t !== void 0 && (t.applyMatrix4(e), t.needsUpdate = !0);
    const n = this.attributes.normal;
    if (n !== void 0) {
      const r = new $0().getNormalMatrix(e);
      n.applyNormalMatrix(r), n.needsUpdate = !0;
    }
    const s = this.attributes.tangent;
    return s !== void 0 && (s.transformDirection(e), s.needsUpdate = !0), this.boundingBox !== null && this.computeBoundingBox(), this.boundingSphere !== null && this.computeBoundingSphere(), this;
  }
  applyQuaternion(e) {
    return Vt.makeRotationFromQuaternion(e), this.applyMatrix4(Vt), this;
  }
  rotateX(e) {
    return Vt.makeRotationX(e), this.applyMatrix4(Vt), this;
  }
  rotateY(e) {
    return Vt.makeRotationY(e), this.applyMatrix4(Vt), this;
  }
  rotateZ(e) {
    return Vt.makeRotationZ(e), this.applyMatrix4(Vt), this;
  }
  translate(e, t, n) {
    return Vt.makeTranslation(e, t, n), this.applyMatrix4(Vt), this;
  }
  scale(e, t, n) {
    return Vt.makeScale(e, t, n), this.applyMatrix4(Vt), this;
  }
  lookAt(e) {
    return V6.lookAt(e), V6.updateMatrix(), this.applyMatrix4(V6.matrix), this;
  }
  center() {
    return this.computeBoundingBox(), this.boundingBox.getCenter(c9).negate(), this.translate(c9.x, c9.y, c9.z), this;
  }
  setFromPoints(e) {
    const t = [];
    for (let n = 0, s = e.length; n < s; n++) {
      const r = e[n];
      t.push(r.x, r.y, r.z || 0);
    }
    return this.setAttribute("position", new v0(t, 3)), this;
  }
  computeBoundingBox() {
    this.boundingBox === null && (this.boundingBox = new F1());
    const e = this.attributes.position, t = this.morphAttributes.position;
    if (e && e.isGLBufferAttribute) {
      console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this), this.boundingBox.set(
        new C(-1 / 0, -1 / 0, -1 / 0),
        new C(1 / 0, 1 / 0, 1 / 0)
      );
      return;
    }
    if (e !== void 0) {
      if (this.boundingBox.setFromBufferAttribute(e), t)
        for (let n = 0, s = t.length; n < s; n++) {
          const r = t[n];
          Rt.setFromBufferAttribute(r), this.morphTargetsRelative ? ($e.addVectors(this.boundingBox.min, Rt.min), this.boundingBox.expandByPoint($e), $e.addVectors(this.boundingBox.max, Rt.max), this.boundingBox.expandByPoint($e)) : (this.boundingBox.expandByPoint(Rt.min), this.boundingBox.expandByPoint(Rt.max));
        }
    } else
      this.boundingBox.makeEmpty();
    (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
  }
  computeBoundingSphere() {
    this.boundingSphere === null && (this.boundingSphere = new z1());
    const e = this.attributes.position, t = this.morphAttributes.position;
    if (e && e.isGLBufferAttribute) {
      console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this), this.boundingSphere.set(new C(), 1 / 0);
      return;
    }
    if (e) {
      const n = this.boundingSphere.center;
      if (Rt.setFromBufferAttribute(e), t)
        for (let r = 0, a = t.length; r < a; r++) {
          const o = t[r];
          g8.setFromBufferAttribute(o), this.morphTargetsRelative ? ($e.addVectors(Rt.min, g8.min), Rt.expandByPoint($e), $e.addVectors(Rt.max, g8.max), Rt.expandByPoint($e)) : (Rt.expandByPoint(g8.min), Rt.expandByPoint(g8.max));
        }
      Rt.getCenter(n);
      let s = 0;
      for (let r = 0, a = e.count; r < a; r++)
        $e.fromBufferAttribute(e, r), s = Math.max(s, n.distanceToSquared($e));
      if (t)
        for (let r = 0, a = t.length; r < a; r++) {
          const o = t[r], c = this.morphTargetsRelative;
          for (let l = 0, h = o.count; l < h; l++)
            $e.fromBufferAttribute(o, l), c && (c9.fromBufferAttribute(e, l), $e.add(c9)), s = Math.max(s, n.distanceToSquared($e));
        }
      this.boundingSphere.radius = Math.sqrt(s), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
    }
  }
  computeTangents() {
    const e = this.index, t = this.attributes;
    if (e === null || t.position === void 0 || t.normal === void 0 || t.uv === void 0) {
      console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
      return;
    }
    const n = e.array, s = t.position.array, r = t.normal.array, a = t.uv.array, o = s.length / 3;
    this.hasAttribute("tangent") === !1 && this.setAttribute("tangent", new ee(new Float32Array(4 * o), 4));
    const c = this.getAttribute("tangent").array, l = [], h = [];
    for (let A = 0; A < o; A++)
      l[A] = new C(), h[A] = new C();
    const d = new C(), u = new C(), f = new C(), p = new o0(), _ = new o0(), g = new o0(), m = new C(), v = new C();
    function y(A, D, z) {
      d.fromArray(s, A * 3), u.fromArray(s, D * 3), f.fromArray(s, z * 3), p.fromArray(a, A * 2), _.fromArray(a, D * 2), g.fromArray(a, z * 2), u.sub(d), f.sub(d), _.sub(p), g.sub(p);
      const O = 1 / (_.x * g.y - g.x * _.y);
      isFinite(O) && (m.copy(u).multiplyScalar(g.y).addScaledVector(f, -_.y).multiplyScalar(O), v.copy(f).multiplyScalar(_.x).addScaledVector(u, -g.x).multiplyScalar(O), l[A].add(m), l[D].add(m), l[z].add(m), h[A].add(v), h[D].add(v), h[z].add(v));
    }
    let b = this.groups;
    b.length === 0 && (b = [{
      start: 0,
      count: n.length
    }]);
    for (let A = 0, D = b.length; A < D; ++A) {
      const z = b[A], O = z.start, U = z.count;
      for (let V = O, Y = O + U; V < Y; V += 3)
        y(
          n[V + 0],
          n[V + 1],
          n[V + 2]
        );
    }
    const w = new C(), x = new C(), S = new C(), T = new C();
    function M(A) {
      S.fromArray(r, A * 3), T.copy(S);
      const D = l[A];
      w.copy(D), w.sub(S.multiplyScalar(S.dot(D))).normalize(), x.crossVectors(T, D);
      const O = x.dot(h[A]) < 0 ? -1 : 1;
      c[A * 4] = w.x, c[A * 4 + 1] = w.y, c[A * 4 + 2] = w.z, c[A * 4 + 3] = O;
    }
    for (let A = 0, D = b.length; A < D; ++A) {
      const z = b[A], O = z.start, U = z.count;
      for (let V = O, Y = O + U; V < Y; V += 3)
        M(n[V + 0]), M(n[V + 1]), M(n[V + 2]);
    }
  }
  computeVertexNormals() {
    const e = this.index, t = this.getAttribute("position");
    if (t !== void 0) {
      let n = this.getAttribute("normal");
      if (n === void 0)
        n = new ee(new Float32Array(t.count * 3), 3), this.setAttribute("normal", n);
      else
        for (let u = 0, f = n.count; u < f; u++)
          n.setXYZ(u, 0, 0, 0);
      const s = new C(), r = new C(), a = new C(), o = new C(), c = new C(), l = new C(), h = new C(), d = new C();
      if (e)
        for (let u = 0, f = e.count; u < f; u += 3) {
          const p = e.getX(u + 0), _ = e.getX(u + 1), g = e.getX(u + 2);
          s.fromBufferAttribute(t, p), r.fromBufferAttribute(t, _), a.fromBufferAttribute(t, g), h.subVectors(a, r), d.subVectors(s, r), h.cross(d), o.fromBufferAttribute(n, p), c.fromBufferAttribute(n, _), l.fromBufferAttribute(n, g), o.add(h), c.add(h), l.add(h), n.setXYZ(p, o.x, o.y, o.z), n.setXYZ(_, c.x, c.y, c.z), n.setXYZ(g, l.x, l.y, l.z);
        }
      else
        for (let u = 0, f = t.count; u < f; u += 3)
          s.fromBufferAttribute(t, u + 0), r.fromBufferAttribute(t, u + 1), a.fromBufferAttribute(t, u + 2), h.subVectors(a, r), d.subVectors(s, r), h.cross(d), n.setXYZ(u + 0, h.x, h.y, h.z), n.setXYZ(u + 1, h.x, h.y, h.z), n.setXYZ(u + 2, h.x, h.y, h.z);
      this.normalizeNormals(), n.needsUpdate = !0;
    }
  }
  merge() {
    return console.error("THREE.BufferGeometry.merge() has been removed. Use THREE.BufferGeometryUtils.mergeGeometries() instead."), this;
  }
  normalizeNormals() {
    const e = this.attributes.normal;
    for (let t = 0, n = e.count; t < n; t++)
      $e.fromBufferAttribute(e, t), $e.normalize(), e.setXYZ(t, $e.x, $e.y, $e.z);
  }
  toNonIndexed() {
    function e(o, c) {
      const l = o.array, h = o.itemSize, d = o.normalized, u = new l.constructor(c.length * h);
      let f = 0, p = 0;
      for (let _ = 0, g = c.length; _ < g; _++) {
        o.isInterleavedBufferAttribute ? f = c[_] * o.data.stride + o.offset : f = c[_] * h;
        for (let m = 0; m < h; m++)
          u[p++] = l[f++];
      }
      return new ee(u, h, d);
    }
    if (this.index === null)
      return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."), this;
    const t = new F0(), n = this.index.array, s = this.attributes;
    for (const o in s) {
      const c = s[o], l = e(c, n);
      t.setAttribute(o, l);
    }
    const r = this.morphAttributes;
    for (const o in r) {
      const c = [], l = r[o];
      for (let h = 0, d = l.length; h < d; h++) {
        const u = l[h], f = e(u, n);
        c.push(f);
      }
      t.morphAttributes[o] = c;
    }
    t.morphTargetsRelative = this.morphTargetsRelative;
    const a = this.groups;
    for (let o = 0, c = a.length; o < c; o++) {
      const l = a[o];
      t.addGroup(l.start, l.count, l.materialIndex);
    }
    return t;
  }
  toJSON() {
    const e = {
      metadata: {
        version: 4.5,
        type: "BufferGeometry",
        generator: "BufferGeometry.toJSON"
      }
    };
    if (e.uuid = this.uuid, e.type = this.type, this.name !== "" && (e.name = this.name), Object.keys(this.userData).length > 0 && (e.userData = this.userData), this.parameters !== void 0) {
      const c = this.parameters;
      for (const l in c)
        c[l] !== void 0 && (e[l] = c[l]);
      return e;
    }
    e.data = { attributes: {} };
    const t = this.index;
    t !== null && (e.data.index = {
      type: t.array.constructor.name,
      array: Array.prototype.slice.call(t.array)
    });
    const n = this.attributes;
    for (const c in n) {
      const l = n[c];
      e.data.attributes[c] = l.toJSON(e.data);
    }
    const s = {};
    let r = !1;
    for (const c in this.morphAttributes) {
      const l = this.morphAttributes[c], h = [];
      for (let d = 0, u = l.length; d < u; d++) {
        const f = l[d];
        h.push(f.toJSON(e.data));
      }
      h.length > 0 && (s[c] = h, r = !0);
    }
    r && (e.data.morphAttributes = s, e.data.morphTargetsRelative = this.morphTargetsRelative);
    const a = this.groups;
    a.length > 0 && (e.data.groups = JSON.parse(JSON.stringify(a)));
    const o = this.boundingSphere;
    return o !== null && (e.data.boundingSphere = {
      center: o.center.toArray(),
      radius: o.radius
    }), e;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null;
    const t = {};
    this.name = e.name;
    const n = e.index;
    n !== null && this.setIndex(n.clone(t));
    const s = e.attributes;
    for (const l in s) {
      const h = s[l];
      this.setAttribute(l, h.clone(t));
    }
    const r = e.morphAttributes;
    for (const l in r) {
      const h = [], d = r[l];
      for (let u = 0, f = d.length; u < f; u++)
        h.push(d[u].clone(t));
      this.morphAttributes[l] = h;
    }
    this.morphTargetsRelative = e.morphTargetsRelative;
    const a = e.groups;
    for (let l = 0, h = a.length; l < h; l++) {
      const d = a[l];
      this.addGroup(d.start, d.count, d.materialIndex);
    }
    const o = e.boundingBox;
    o !== null && (this.boundingBox = o.clone());
    const c = e.boundingSphere;
    return c !== null && (this.boundingSphere = c.clone()), this.drawRange.start = e.drawRange.start, this.drawRange.count = e.drawRange.count, this.userData = e.userData, this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
const L4 = /* @__PURE__ */ new k0(), m1 = /* @__PURE__ */ new Rs(), d7 = /* @__PURE__ */ new z1(), R4 = /* @__PURE__ */ new C(), h9 = /* @__PURE__ */ new C(), u9 = /* @__PURE__ */ new C(), d9 = /* @__PURE__ */ new C(), H6 = /* @__PURE__ */ new C(), f7 = /* @__PURE__ */ new C(), p7 = /* @__PURE__ */ new o0(), m7 = /* @__PURE__ */ new o0(), g7 = /* @__PURE__ */ new o0(), P4 = /* @__PURE__ */ new C(), D4 = /* @__PURE__ */ new C(), N4 = /* @__PURE__ */ new C(), _7 = /* @__PURE__ */ new C(), v7 = /* @__PURE__ */ new C();
class y0 extends G0 {
  constructor(e = new F0(), t = new c1()) {
    super(), this.isMesh = !0, this.type = "Mesh", this.geometry = e, this.material = t, this.updateMorphTargets();
  }
  copy(e, t) {
    return super.copy(e, t), e.morphTargetInfluences !== void 0 && (this.morphTargetInfluences = e.morphTargetInfluences.slice()), e.morphTargetDictionary !== void 0 && (this.morphTargetDictionary = Object.assign({}, e.morphTargetDictionary)), this.material = e.material, this.geometry = e.geometry, this;
  }
  updateMorphTargets() {
    const t = this.geometry.morphAttributes, n = Object.keys(t);
    if (n.length > 0) {
      const s = t[n[0]];
      if (s !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let r = 0, a = s.length; r < a; r++) {
          const o = s[r].name || String(r);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[o] = r;
        }
      }
    }
  }
  getVertexPosition(e, t) {
    const n = this.geometry, s = n.attributes.position, r = n.morphAttributes.position, a = n.morphTargetsRelative;
    t.fromBufferAttribute(s, e);
    const o = this.morphTargetInfluences;
    if (r && o) {
      f7.set(0, 0, 0);
      for (let c = 0, l = r.length; c < l; c++) {
        const h = o[c], d = r[c];
        h !== 0 && (H6.fromBufferAttribute(d, e), a ? f7.addScaledVector(H6, h) : f7.addScaledVector(H6.sub(t), h));
      }
      t.add(f7);
    }
    return this.isSkinnedMesh && this.applyBoneTransform(e, t), t;
  }
  raycast(e, t) {
    const n = this.geometry, s = this.material, r = this.matrixWorld;
    if (s === void 0 || (n.boundingSphere === null && n.computeBoundingSphere(), d7.copy(n.boundingSphere), d7.applyMatrix4(r), m1.copy(e.ray).recast(e.near), d7.containsPoint(m1.origin) === !1 && (m1.intersectSphere(d7, R4) === null || m1.origin.distanceToSquared(R4) > (e.far - e.near) ** 2)) || (L4.copy(r).invert(), m1.copy(e.ray).applyMatrix4(L4), n.boundingBox !== null && m1.intersectsBox(n.boundingBox) === !1))
      return;
    let a;
    const o = n.index, c = n.attributes.position, l = n.attributes.uv, h = n.attributes.uv2, d = n.attributes.normal, u = n.groups, f = n.drawRange;
    if (o !== null)
      if (Array.isArray(s))
        for (let p = 0, _ = u.length; p < _; p++) {
          const g = u[p], m = s[g.materialIndex], v = Math.max(g.start, f.start), y = Math.min(o.count, Math.min(g.start + g.count, f.start + f.count));
          for (let b = v, w = y; b < w; b += 3) {
            const x = o.getX(b), S = o.getX(b + 1), T = o.getX(b + 2);
            a = y7(this, m, e, m1, l, h, d, x, S, T), a && (a.faceIndex = Math.floor(b / 3), a.face.materialIndex = g.materialIndex, t.push(a));
          }
        }
      else {
        const p = Math.max(0, f.start), _ = Math.min(o.count, f.start + f.count);
        for (let g = p, m = _; g < m; g += 3) {
          const v = o.getX(g), y = o.getX(g + 1), b = o.getX(g + 2);
          a = y7(this, s, e, m1, l, h, d, v, y, b), a && (a.faceIndex = Math.floor(g / 3), t.push(a));
        }
      }
    else if (c !== void 0)
      if (Array.isArray(s))
        for (let p = 0, _ = u.length; p < _; p++) {
          const g = u[p], m = s[g.materialIndex], v = Math.max(g.start, f.start), y = Math.min(c.count, Math.min(g.start + g.count, f.start + f.count));
          for (let b = v, w = y; b < w; b += 3) {
            const x = b, S = b + 1, T = b + 2;
            a = y7(this, m, e, m1, l, h, d, x, S, T), a && (a.faceIndex = Math.floor(b / 3), a.face.materialIndex = g.materialIndex, t.push(a));
          }
        }
      else {
        const p = Math.max(0, f.start), _ = Math.min(c.count, f.start + f.count);
        for (let g = p, m = _; g < m; g += 3) {
          const v = g, y = g + 1, b = g + 2;
          a = y7(this, s, e, m1, l, h, d, v, y, b), a && (a.faceIndex = Math.floor(g / 3), t.push(a));
        }
      }
  }
}
function yg(i, e, t, n, s, r, a, o) {
  let c;
  if (e.side === ut ? c = n.intersectTriangle(a, r, s, !0, o) : c = n.intersectTriangle(s, r, a, e.side === an, o), c === null)
    return null;
  v7.copy(o), v7.applyMatrix4(i.matrixWorld);
  const l = t.ray.origin.distanceTo(v7);
  return l < t.near || l > t.far ? null : {
    distance: l,
    point: v7.clone(),
    object: i
  };
}
function y7(i, e, t, n, s, r, a, o, c, l) {
  i.getVertexPosition(o, h9), i.getVertexPosition(c, u9), i.getVertexPosition(l, d9);
  const h = yg(i, e, t, n, h9, u9, d9, _7);
  if (h) {
    s && (p7.fromBufferAttribute(s, o), m7.fromBufferAttribute(s, c), g7.fromBufferAttribute(s, l), h.uv = Et.getInterpolation(_7, h9, u9, d9, p7, m7, g7, new o0())), r && (p7.fromBufferAttribute(r, o), m7.fromBufferAttribute(r, c), g7.fromBufferAttribute(r, l), h.uv2 = Et.getInterpolation(_7, h9, u9, d9, p7, m7, g7, new o0())), a && (P4.fromBufferAttribute(a, o), D4.fromBufferAttribute(a, c), N4.fromBufferAttribute(a, l), h.normal = Et.getInterpolation(_7, h9, u9, d9, P4, D4, N4, new C()), h.normal.dot(n.direction) > 0 && h.normal.multiplyScalar(-1));
    const d = {
      a: o,
      b: c,
      c: l,
      normal: new C(),
      materialIndex: 0
    };
    Et.getNormal(h9, u9, d9, d.normal), h.face = d;
  }
  return h;
}
class ct extends F0 {
  constructor(e = 1, t = 1, n = 1, s = 1, r = 1, a = 1) {
    super(), this.type = "BoxGeometry", this.parameters = {
      width: e,
      height: t,
      depth: n,
      widthSegments: s,
      heightSegments: r,
      depthSegments: a
    };
    const o = this;
    s = Math.floor(s), r = Math.floor(r), a = Math.floor(a);
    const c = [], l = [], h = [], d = [];
    let u = 0, f = 0;
    p("z", "y", "x", -1, -1, n, t, e, a, r, 0), p("z", "y", "x", 1, -1, n, t, -e, a, r, 1), p("x", "z", "y", 1, 1, e, n, t, s, a, 2), p("x", "z", "y", 1, -1, e, n, -t, s, a, 3), p("x", "y", "z", 1, -1, e, t, n, s, r, 4), p("x", "y", "z", -1, -1, e, t, -n, s, r, 5), this.setIndex(c), this.setAttribute("position", new v0(l, 3)), this.setAttribute("normal", new v0(h, 3)), this.setAttribute("uv", new v0(d, 2));
    function p(_, g, m, v, y, b, w, x, S, T, M) {
      const A = b / S, D = w / T, z = b / 2, O = w / 2, U = x / 2, V = S + 1, Y = T + 1;
      let W = 0, X = 0;
      const i0 = new C();
      for (let a0 = 0; a0 < Y; a0++) {
        const x0 = a0 * D - O;
        for (let u0 = 0; u0 < V; u0++) {
          const E = u0 * A - z;
          i0[_] = E * v, i0[g] = x0 * y, i0[m] = U, l.push(i0.x, i0.y, i0.z), i0[_] = 0, i0[g] = 0, i0[m] = x > 0 ? 1 : -1, h.push(i0.x, i0.y, i0.z), d.push(u0 / S), d.push(1 - a0 / T), W += 1;
        }
      }
      for (let a0 = 0; a0 < T; a0++)
        for (let x0 = 0; x0 < S; x0++) {
          const u0 = u + x0 + V * a0, E = u + x0 + V * (a0 + 1), F = u + (x0 + 1) + V * (a0 + 1), R = u + (x0 + 1) + V * a0;
          c.push(u0, E, R), c.push(E, F, R), X += 6;
        }
      o.addGroup(f, X, M), f += X, u += W;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new ct(e.width, e.height, e.depth, e.widthSegments, e.heightSegments, e.depthSegments);
  }
}
function J9(i) {
  const e = {};
  for (const t in i) {
    e[t] = {};
    for (const n in i[t]) {
      const s = i[t][n];
      s && (s.isColor || s.isMatrix3 || s.isMatrix4 || s.isVector2 || s.isVector3 || s.isVector4 || s.isTexture || s.isQuaternion) ? s.isRenderTargetTexture ? (console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."), e[t][n] = null) : e[t][n] = s.clone() : Array.isArray(s) ? e[t][n] = s.slice() : e[t][n] = s;
    }
  }
  return e;
}
function _t(i) {
  const e = {};
  for (let t = 0; t < i.length; t++) {
    const n = J9(i[t]);
    for (const s in n)
      e[s] = n[s];
  }
  return e;
}
function xg(i) {
  const e = [];
  for (let t = 0; t < i.length; t++)
    e.push(i[t].clone());
  return e;
}
function vh(i) {
  return i.getRenderTarget() === null && i.outputEncoding === ve ? i1 : $9;
}
const m2 = { clone: J9, merge: _t };
var bg = `void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`, wg = `void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;
class l1 extends et {
  constructor(e) {
    super(), this.isShaderMaterial = !0, this.type = "ShaderMaterial", this.defines = {}, this.uniforms = {}, this.uniformsGroups = [], this.vertexShader = bg, this.fragmentShader = wg, this.linewidth = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.lights = !1, this.clipping = !1, this.forceSinglePass = !0, this.extensions = {
      derivatives: !1,
      // set to use derivatives
      fragDepth: !1,
      // set to use fragment depth values
      drawBuffers: !1,
      // set to use draw buffers
      shaderTextureLOD: !1
      // set to use shader texture LOD
    }, this.defaultAttributeValues = {
      color: [1, 1, 1],
      uv: [0, 0],
      uv2: [0, 0]
    }, this.index0AttributeName = void 0, this.uniformsNeedUpdate = !1, this.glslVersion = null, e !== void 0 && this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.fragmentShader = e.fragmentShader, this.vertexShader = e.vertexShader, this.uniforms = J9(e.uniforms), this.uniformsGroups = xg(e.uniformsGroups), this.defines = Object.assign({}, e.defines), this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.fog = e.fog, this.lights = e.lights, this.clipping = e.clipping, this.extensions = Object.assign({}, e.extensions), this.glslVersion = e.glslVersion, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    t.glslVersion = this.glslVersion, t.uniforms = {};
    for (const s in this.uniforms) {
      const a = this.uniforms[s].value;
      a && a.isTexture ? t.uniforms[s] = {
        type: "t",
        value: a.toJSON(e).uuid
      } : a && a.isColor ? t.uniforms[s] = {
        type: "c",
        value: a.getHex()
      } : a && a.isVector2 ? t.uniforms[s] = {
        type: "v2",
        value: a.toArray()
      } : a && a.isVector3 ? t.uniforms[s] = {
        type: "v3",
        value: a.toArray()
      } : a && a.isVector4 ? t.uniforms[s] = {
        type: "v4",
        value: a.toArray()
      } : a && a.isMatrix3 ? t.uniforms[s] = {
        type: "m3",
        value: a.toArray()
      } : a && a.isMatrix4 ? t.uniforms[s] = {
        type: "m4",
        value: a.toArray()
      } : t.uniforms[s] = {
        value: a
      };
    }
    Object.keys(this.defines).length > 0 && (t.defines = this.defines), t.vertexShader = this.vertexShader, t.fragmentShader = this.fragmentShader;
    const n = {};
    for (const s in this.extensions)
      this.extensions[s] === !0 && (n[s] = !0);
    return Object.keys(n).length > 0 && (t.extensions = n), t;
  }
}
class t6 extends G0 {
  constructor() {
    super(), this.isCamera = !0, this.type = "Camera", this.matrixWorldInverse = new k0(), this.projectionMatrix = new k0(), this.projectionMatrixInverse = new k0();
  }
  copy(e, t) {
    return super.copy(e, t), this.matrixWorldInverse.copy(e.matrixWorldInverse), this.projectionMatrix.copy(e.projectionMatrix), this.projectionMatrixInverse.copy(e.projectionMatrixInverse), this;
  }
  getWorldDirection(e) {
    this.updateWorldMatrix(!0, !1);
    const t = this.matrixWorld.elements;
    return e.set(-t[8], -t[9], -t[10]).normalize();
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e), this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  updateWorldMatrix(e, t) {
    super.updateWorldMatrix(e, t), this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class Qe extends t6 {
  constructor(e = 50, t = 1, n = 0.1, s = 2e3) {
    super(), this.isPerspectiveCamera = !0, this.type = "PerspectiveCamera", this.fov = e, this.zoom = 1, this.near = n, this.far = s, this.focus = 10, this.aspect = t, this.view = null, this.filmGauge = 35, this.filmOffset = 0, this.updateProjectionMatrix();
  }
  copy(e, t) {
    return super.copy(e, t), this.fov = e.fov, this.zoom = e.zoom, this.near = e.near, this.far = e.far, this.focus = e.focus, this.aspect = e.aspect, this.view = e.view === null ? null : Object.assign({}, e.view), this.filmGauge = e.filmGauge, this.filmOffset = e.filmOffset, this;
  }
  /**
   * Sets the FOV by focal length in respect to the current .filmGauge.
   *
   * The default film gauge is 35, so that the focal length can be specified for
   * a 35mm (full frame) camera.
   *
   * Values for focal length and film gauge must have the same unit.
   */
  setFocalLength(e) {
    const t = 0.5 * this.getFilmHeight() / e;
    this.fov = j9 * 2 * Math.atan(t), this.updateProjectionMatrix();
  }
  /**
   * Calculates the focal length from the current .fov and .filmGauge.
   */
  getFocalLength() {
    const e = Math.tan(Di * 0.5 * this.fov);
    return 0.5 * this.getFilmHeight() / e;
  }
  getEffectiveFOV() {
    return j9 * 2 * Math.atan(
      Math.tan(Di * 0.5 * this.fov) / this.zoom
    );
  }
  getFilmWidth() {
    return this.filmGauge * Math.min(this.aspect, 1);
  }
  getFilmHeight() {
    return this.filmGauge / Math.max(this.aspect, 1);
  }
  /**
   * Sets an offset in a larger frustum. This is useful for multi-window or
   * multi-monitor/multi-machine setups.
   *
   * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
   * the monitors are in grid like this
   *
   *   +---+---+---+
   *   | A | B | C |
   *   +---+---+---+
   *   | D | E | F |
   *   +---+---+---+
   *
   * then for each monitor you would call it like this
   *
   *   const w = 1920;
   *   const h = 1080;
   *   const fullWidth = w * 3;
   *   const fullHeight = h * 2;
   *
   *   --A--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
   *   --B--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
   *   --C--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
   *   --D--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
   *   --E--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
   *   --F--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
   *
   *   Note there is no reason monitors have to be the same size or in a grid.
   */
  setViewOffset(e, t, n, s, r, a) {
    this.aspect = e / t, this.view === null && (this.view = {
      enabled: !0,
      fullWidth: 1,
      fullHeight: 1,
      offsetX: 0,
      offsetY: 0,
      width: 1,
      height: 1
    }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = n, this.view.offsetY = s, this.view.width = r, this.view.height = a, this.updateProjectionMatrix();
  }
  clearViewOffset() {
    this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    const e = this.near;
    let t = e * Math.tan(Di * 0.5 * this.fov) / this.zoom, n = 2 * t, s = this.aspect * n, r = -0.5 * s;
    const a = this.view;
    if (this.view !== null && this.view.enabled) {
      const c = a.fullWidth, l = a.fullHeight;
      r += a.offsetX * s / c, t -= a.offsetY * n / l, s *= a.width / c, n *= a.height / l;
    }
    const o = this.filmOffset;
    o !== 0 && (r += e * o / this.getFilmWidth()), this.projectionMatrix.makePerspective(r, r + s, t, t - n, e, this.far), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.fov = this.fov, t.object.zoom = this.zoom, t.object.near = this.near, t.object.far = this.far, t.object.focus = this.focus, t.object.aspect = this.aspect, this.view !== null && (t.object.view = Object.assign({}, this.view)), t.object.filmGauge = this.filmGauge, t.object.filmOffset = this.filmOffset, t;
  }
}
const f9 = -90, p9 = 1;
class yh extends G0 {
  constructor(e, t, n) {
    super(), this.type = "CubeCamera", this.renderTarget = n;
    const s = new Qe(f9, p9, e, t);
    s.layers = this.layers, s.up.set(0, 1, 0), s.lookAt(1, 0, 0), this.add(s);
    const r = new Qe(f9, p9, e, t);
    r.layers = this.layers, r.up.set(0, 1, 0), r.lookAt(-1, 0, 0), this.add(r);
    const a = new Qe(f9, p9, e, t);
    a.layers = this.layers, a.up.set(0, 0, -1), a.lookAt(0, 1, 0), this.add(a);
    const o = new Qe(f9, p9, e, t);
    o.layers = this.layers, o.up.set(0, 0, 1), o.lookAt(0, -1, 0), this.add(o);
    const c = new Qe(f9, p9, e, t);
    c.layers = this.layers, c.up.set(0, 1, 0), c.lookAt(0, 0, 1), this.add(c);
    const l = new Qe(f9, p9, e, t);
    l.layers = this.layers, l.up.set(0, 1, 0), l.lookAt(0, 0, -1), this.add(l);
  }
  update(e, t) {
    this.parent === null && this.updateMatrixWorld();
    const n = this.renderTarget, [s, r, a, o, c, l] = this.children, h = e.getRenderTarget(), d = e.toneMapping, u = e.xr.enabled;
    e.toneMapping = D1, e.xr.enabled = !1;
    const f = n.texture.generateMipmaps;
    n.texture.generateMipmaps = !1, e.setRenderTarget(n, 0), e.render(t, s), e.setRenderTarget(n, 1), e.render(t, r), e.setRenderTarget(n, 2), e.render(t, a), e.setRenderTarget(n, 3), e.render(t, o), e.setRenderTarget(n, 4), e.render(t, c), n.texture.generateMipmaps = f, e.setRenderTarget(n, 5), e.render(t, l), e.setRenderTarget(h), e.toneMapping = d, e.xr.enabled = u, n.texture.needsPMREMUpdate = !0;
  }
}
class Ps extends Be {
  constructor(e, t, n, s, r, a, o, c, l, h) {
    e = e !== void 0 ? e : [], t = t !== void 0 ? t : Yn, super(e, t, n, s, r, a, o, c, l, h), this.isCubeTexture = !0, this.flipY = !1;
  }
  get images() {
    return this.image;
  }
  set images(e) {
    this.image = e;
  }
}
class xh extends o1 {
  constructor(e = 1, t = {}) {
    super(e, e, t), this.isWebGLCubeRenderTarget = !0;
    const n = { width: e, height: e, depth: 1 }, s = [n, n, n, n, n, n];
    this.texture = new Ps(s, t.mapping, t.wrapS, t.wrapT, t.magFilter, t.minFilter, t.format, t.type, t.anisotropy, t.encoding), this.texture.isRenderTargetTexture = !0, this.texture.generateMipmaps = t.generateMipmaps !== void 0 ? t.generateMipmaps : !1, this.texture.minFilter = t.minFilter !== void 0 ? t.minFilter : Pe;
  }
  fromEquirectangularTexture(e, t) {
    this.texture.type = t.type, this.texture.encoding = t.encoding, this.texture.generateMipmaps = t.generateMipmaps, this.texture.minFilter = t.minFilter, this.texture.magFilter = t.magFilter;
    const n = {
      uniforms: {
        tEquirect: { value: null }
      },
      vertexShader: (
        /* glsl */
        `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`
      ),
      fragmentShader: (
        /* glsl */
        `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
      )
    }, s = new ct(5, 5, 5), r = new l1({
      name: "CubemapFromEquirect",
      uniforms: J9(n.uniforms),
      vertexShader: n.vertexShader,
      fragmentShader: n.fragmentShader,
      side: ut,
      blending: rn
    });
    r.uniforms.tEquirect.value = t;
    const a = new y0(s, r), o = t.minFilter;
    return t.minFilter === qn && (t.minFilter = Pe), new yh(1, 10, this).update(e, a), t.minFilter = o, a.geometry.dispose(), a.material.dispose(), this;
  }
  clear(e, t, n, s) {
    const r = e.getRenderTarget();
    for (let a = 0; a < 6; a++)
      e.setRenderTarget(this, a), e.clear(t, n, s);
    e.setRenderTarget(r);
  }
}
const G6 = /* @__PURE__ */ new C(), Mg = /* @__PURE__ */ new C(), Sg = /* @__PURE__ */ new $0();
class Dn {
  constructor(e = new C(1, 0, 0), t = 0) {
    this.isPlane = !0, this.normal = e, this.constant = t;
  }
  set(e, t) {
    return this.normal.copy(e), this.constant = t, this;
  }
  setComponents(e, t, n, s) {
    return this.normal.set(e, t, n), this.constant = s, this;
  }
  setFromNormalAndCoplanarPoint(e, t) {
    return this.normal.copy(e), this.constant = -t.dot(this.normal), this;
  }
  setFromCoplanarPoints(e, t, n) {
    const s = G6.subVectors(n, t).cross(Mg.subVectors(e, t)).normalize();
    return this.setFromNormalAndCoplanarPoint(s, e), this;
  }
  copy(e) {
    return this.normal.copy(e.normal), this.constant = e.constant, this;
  }
  normalize() {
    const e = 1 / this.normal.length();
    return this.normal.multiplyScalar(e), this.constant *= e, this;
  }
  negate() {
    return this.constant *= -1, this.normal.negate(), this;
  }
  distanceToPoint(e) {
    return this.normal.dot(e) + this.constant;
  }
  distanceToSphere(e) {
    return this.distanceToPoint(e.center) - e.radius;
  }
  projectPoint(e, t) {
    return t.copy(e).addScaledVector(this.normal, -this.distanceToPoint(e));
  }
  intersectLine(e, t) {
    const n = e.delta(G6), s = this.normal.dot(n);
    if (s === 0)
      return this.distanceToPoint(e.start) === 0 ? t.copy(e.start) : null;
    const r = -(e.start.dot(this.normal) + this.constant) / s;
    return r < 0 || r > 1 ? null : t.copy(e.start).addScaledVector(n, r);
  }
  intersectsLine(e) {
    const t = this.distanceToPoint(e.start), n = this.distanceToPoint(e.end);
    return t < 0 && n > 0 || n < 0 && t > 0;
  }
  intersectsBox(e) {
    return e.intersectsPlane(this);
  }
  intersectsSphere(e) {
    return e.intersectsPlane(this);
  }
  coplanarPoint(e) {
    return e.copy(this.normal).multiplyScalar(-this.constant);
  }
  applyMatrix4(e, t) {
    const n = t || Sg.getNormalMatrix(e), s = this.coplanarPoint(G6).applyMatrix4(e), r = this.normal.applyMatrix3(n).normalize();
    return this.constant = -s.dot(r), this;
  }
  translate(e) {
    return this.constant -= e.dot(this.normal), this;
  }
  equals(e) {
    return e.normal.equals(this.normal) && e.constant === this.constant;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const ai = /* @__PURE__ */ new z1(), x7 = /* @__PURE__ */ new C();
class n6 {
  constructor(e = new Dn(), t = new Dn(), n = new Dn(), s = new Dn(), r = new Dn(), a = new Dn()) {
    this.planes = [e, t, n, s, r, a];
  }
  set(e, t, n, s, r, a) {
    const o = this.planes;
    return o[0].copy(e), o[1].copy(t), o[2].copy(n), o[3].copy(s), o[4].copy(r), o[5].copy(a), this;
  }
  copy(e) {
    const t = this.planes;
    for (let n = 0; n < 6; n++)
      t[n].copy(e.planes[n]);
    return this;
  }
  setFromProjectionMatrix(e) {
    const t = this.planes, n = e.elements, s = n[0], r = n[1], a = n[2], o = n[3], c = n[4], l = n[5], h = n[6], d = n[7], u = n[8], f = n[9], p = n[10], _ = n[11], g = n[12], m = n[13], v = n[14], y = n[15];
    return t[0].setComponents(o - s, d - c, _ - u, y - g).normalize(), t[1].setComponents(o + s, d + c, _ + u, y + g).normalize(), t[2].setComponents(o + r, d + l, _ + f, y + m).normalize(), t[3].setComponents(o - r, d - l, _ - f, y - m).normalize(), t[4].setComponents(o - a, d - h, _ - p, y - v).normalize(), t[5].setComponents(o + a, d + h, _ + p, y + v).normalize(), this;
  }
  intersectsObject(e) {
    if (e.boundingSphere !== void 0)
      e.boundingSphere === null && e.computeBoundingSphere(), ai.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);
    else {
      const t = e.geometry;
      t.boundingSphere === null && t.computeBoundingSphere(), ai.copy(t.boundingSphere).applyMatrix4(e.matrixWorld);
    }
    return this.intersectsSphere(ai);
  }
  intersectsSprite(e) {
    return ai.center.set(0, 0, 0), ai.radius = 0.7071067811865476, ai.applyMatrix4(e.matrixWorld), this.intersectsSphere(ai);
  }
  intersectsSphere(e) {
    const t = this.planes, n = e.center, s = -e.radius;
    for (let r = 0; r < 6; r++)
      if (t[r].distanceToPoint(n) < s)
        return !1;
    return !0;
  }
  intersectsBox(e) {
    const t = this.planes;
    for (let n = 0; n < 6; n++) {
      const s = t[n];
      if (x7.x = s.normal.x > 0 ? e.max.x : e.min.x, x7.y = s.normal.y > 0 ? e.max.y : e.min.y, x7.z = s.normal.z > 0 ? e.max.z : e.min.z, s.distanceToPoint(x7) < 0)
        return !1;
    }
    return !0;
  }
  containsPoint(e) {
    const t = this.planes;
    for (let n = 0; n < 6; n++)
      if (t[n].distanceToPoint(e) < 0)
        return !1;
    return !0;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
function bh() {
  let i = null, e = !1, t = null, n = null;
  function s(r, a) {
    t(r, a), n = i.requestAnimationFrame(s);
  }
  return {
    start: function() {
      e !== !0 && t !== null && (n = i.requestAnimationFrame(s), e = !0);
    },
    stop: function() {
      i.cancelAnimationFrame(n), e = !1;
    },
    setAnimationLoop: function(r) {
      t = r;
    },
    setContext: function(r) {
      i = r;
    }
  };
}
function Eg(i, e) {
  const t = e.isWebGL2, n = /* @__PURE__ */ new WeakMap();
  function s(l, h) {
    const d = l.array, u = l.usage, f = i.createBuffer();
    i.bindBuffer(h, f), i.bufferData(h, d, u), l.onUploadCallback();
    let p;
    if (d instanceof Float32Array)
      p = 5126;
    else if (d instanceof Uint16Array)
      if (l.isFloat16BufferAttribute)
        if (t)
          p = 5131;
        else
          throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");
      else
        p = 5123;
    else if (d instanceof Int16Array)
      p = 5122;
    else if (d instanceof Uint32Array)
      p = 5125;
    else if (d instanceof Int32Array)
      p = 5124;
    else if (d instanceof Int8Array)
      p = 5120;
    else if (d instanceof Uint8Array)
      p = 5121;
    else if (d instanceof Uint8ClampedArray)
      p = 5121;
    else
      throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + d);
    return {
      buffer: f,
      type: p,
      bytesPerElement: d.BYTES_PER_ELEMENT,
      version: l.version
    };
  }
  function r(l, h, d) {
    const u = h.array, f = h.updateRange;
    i.bindBuffer(d, l), f.count === -1 ? i.bufferSubData(d, 0, u) : (t ? i.bufferSubData(
      d,
      f.offset * u.BYTES_PER_ELEMENT,
      u,
      f.offset,
      f.count
    ) : i.bufferSubData(
      d,
      f.offset * u.BYTES_PER_ELEMENT,
      u.subarray(f.offset, f.offset + f.count)
    ), f.count = -1), h.onUploadCallback();
  }
  function a(l) {
    return l.isInterleavedBufferAttribute && (l = l.data), n.get(l);
  }
  function o(l) {
    l.isInterleavedBufferAttribute && (l = l.data);
    const h = n.get(l);
    h && (i.deleteBuffer(h.buffer), n.delete(l));
  }
  function c(l, h) {
    if (l.isGLBufferAttribute) {
      const u = n.get(l);
      (!u || u.version < l.version) && n.set(l, {
        buffer: l.buffer,
        type: l.type,
        bytesPerElement: l.elementSize,
        version: l.version
      });
      return;
    }
    l.isInterleavedBufferAttribute && (l = l.data);
    const d = n.get(l);
    d === void 0 ? n.set(l, s(l, h)) : d.version < l.version && (r(d.buffer, l, h), d.version = l.version);
  }
  return {
    get: a,
    remove: o,
    update: c
  };
}
class Dt extends F0 {
  constructor(e = 1, t = 1, n = 1, s = 1) {
    super(), this.type = "PlaneGeometry", this.parameters = {
      width: e,
      height: t,
      widthSegments: n,
      heightSegments: s
    };
    const r = e / 2, a = t / 2, o = Math.floor(n), c = Math.floor(s), l = o + 1, h = c + 1, d = e / o, u = t / c, f = [], p = [], _ = [], g = [];
    for (let m = 0; m < h; m++) {
      const v = m * u - a;
      for (let y = 0; y < l; y++) {
        const b = y * d - r;
        p.push(b, -v, 0), _.push(0, 0, 1), g.push(y / o), g.push(1 - m / c);
      }
    }
    for (let m = 0; m < c; m++)
      for (let v = 0; v < o; v++) {
        const y = v + l * m, b = v + l * (m + 1), w = v + 1 + l * (m + 1), x = v + 1 + l * m;
        f.push(y, b, x), f.push(b, w, x);
      }
    this.setIndex(f), this.setAttribute("position", new v0(p, 3)), this.setAttribute("normal", new v0(_, 3)), this.setAttribute("uv", new v0(g, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Dt(e.width, e.height, e.widthSegments, e.heightSegments);
  }
}
var Tg = `#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`, Ag = `#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, Cg = `#ifdef USE_ALPHATEST
	if ( diffuseColor.a < alphaTest ) discard;
#endif`, Ig = `#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`, Lg = `#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`, Rg = `#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`, Pg = "vec3 transformed = vec3( position );", Dg = `vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`, Ng = `float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`, Og = `#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			 return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float R21 = R12;
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`, Ug = `#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = dFdx( surf_pos.xyz );
		vec3 vSigmaY = dFdy( surf_pos.xyz );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`, Fg = `#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`, zg = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`, kg = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`, Bg = `#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`, Vg = `#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`, Hg = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`, Gg = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`, Wg = `#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`, Xg = `#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
struct GeometricContext {
	vec3 position;
	vec3 normal;
	vec3 viewDir;
#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal;
#endif
};
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float luminance( const in vec3 rgb ) {
	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );
	return dot( weights, rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`, Yg = `#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_v0 0.339
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_v1 0.276
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_v4 0.046
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_v5 0.016
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_v6 0.0038
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`, Zg = `vec3 transformedNormal = objectNormal;
#ifdef USE_INSTANCING
	mat3 m = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
	transformedNormal = m * transformedNormal;
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`, qg = `#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`, $g = `#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`, jg = `#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`, Jg = `#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`, Kg = "gl_FragColor = linearToOutputTexel( gl_FragColor );", Qg = `vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 LinearTosRGB( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`, e_ = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`, t_ = `#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`, n_ = `#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`, i_ = `#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`, s_ = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`, r_ = `#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`, a_ = `#ifdef USE_FOG
	varying float vFogDepth;
#endif`, o_ = `#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`, l_ = `#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`, c_ = `#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`, h_ = `#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`, u_ = `#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`, d_ = `LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`, f_ = `varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`, p_ = `uniform bool receiveShadow;
uniform vec3 ambientLightColor;
uniform vec3 lightProbe[ 9 ];
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( LEGACY_LIGHTS )
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#else
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometry.position;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometry.position;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`, m_ = `#if defined( USE_ENVMAP )
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
#endif`, g_ = `ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`, __ = `varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`, v_ = `BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`, y_ = `varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`, x_ = `PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif`, b_ = `struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
};
vec3 clearcoatSpecular = vec3( 0.0 );
vec3 sheenSpecular = vec3( 0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
	float D = D_GGX( alpha, dotNH );
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometry.normal;
		vec3 viewDir = geometry.viewDir;
		vec3 position = geometry.position;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecular += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`, w_ = `
GeometricContext geometry;
geometry.position = - vViewPosition;
geometry.normal = normal;
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
#ifdef USE_CLEARCOAT
	geometry.clearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometry.viewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometry, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`, M_ = `#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometry.normal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`, S_ = `#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );
#endif`, E_ = `#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`, T_ = `#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`, A_ = `#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`, C_ = `#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`, I_ = `#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`, L_ = `#ifdef USE_MAP
	uniform sampler2D map;
#endif`, R_ = `#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`, P_ = `#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, D_ = `float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`, N_ = `#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`, O_ = `#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`, U_ = `#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
	#endif
#endif`, F_ = `#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
		uniform sampler2DArray morphTargetsTexture;
		uniform ivec2 morphTargetsTextureSize;
		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
			int y = texelIndex / morphTargetsTextureSize.x;
			int x = texelIndex - y * morphTargetsTextureSize.x;
			ivec3 morphUV = ivec3( x, y, morphTargetIndex );
			return texelFetch( morphTargetsTexture, morphUV, 0 );
		}
	#else
		#ifndef USE_MORPHNORMALS
			uniform float morphTargetInfluences[ 8 ];
		#else
			uniform float morphTargetInfluences[ 4 ];
		#endif
	#endif
#endif`, z_ = `#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		transformed += morphTarget0 * morphTargetInfluences[ 0 ];
		transformed += morphTarget1 * morphTargetInfluences[ 1 ];
		transformed += morphTarget2 * morphTargetInfluences[ 2 ];
		transformed += morphTarget3 * morphTargetInfluences[ 3 ];
		#ifndef USE_MORPHNORMALS
			transformed += morphTarget4 * morphTargetInfluences[ 4 ];
			transformed += morphTarget5 * morphTargetInfluences[ 5 ];
			transformed += morphTarget6 * morphTargetInfluences[ 6 ];
			transformed += morphTarget7 * morphTargetInfluences[ 7 ];
		#endif
	#endif
#endif`, k_ = `float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#ifdef USE_NORMALMAP_TANGENTSPACE
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal, vNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 geometryNormal = normal;`, B_ = `#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`, V_ = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, H_ = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, G_ = `#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`, W_ = `#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`, X_ = `#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = geometryNormal;
#endif`, Y_ = `#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`, Z_ = `#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`, q_ = `#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`, $_ = `#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha + 0.1;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`, j_ = `vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec2 packDepthToRG( in highp float v ) {
	return packDepthToRGBA( v ).yx;
}
float unpackRGToDepth( const in highp vec2 v ) {
	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`, J_ = `#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`, K_ = `vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`, Q_ = `#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`, ev = `#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`, tv = `float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`, nv = `#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`, iv = `#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`, sv = `#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`, rv = `#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`, av = `float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`, ov = `#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`, lv = `#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	uniform int boneTextureSize;
	mat4 getBoneMatrix( const in float i ) {
		float j = i * 4.0;
		float x = mod( j, float( boneTextureSize ) );
		float y = floor( j / float( boneTextureSize ) );
		float dx = 1.0 / float( boneTextureSize );
		float dy = 1.0 / float( boneTextureSize );
		y = dy * ( y + 0.5 );
		vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
		vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
		vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
		vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
		mat4 bone = mat4( v1, v2, v3, v4 );
		return bone;
	}
#endif`, cv = `#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`, hv = `#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`, uv = `float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`, dv = `#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`, fv = `#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`, pv = `#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return toneMappingExposure * color;
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`, mv = `#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmission = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmission.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );
#endif`, gv = `#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, vec2 fullSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		
		vec2 lodFudge = pow( 1.95, lod ) / fullSize;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec2 fullSize = vec2( textureSize( sampler, 0 ) );
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), fullSize, floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), fullSize, ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return radiance;
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance * radiance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );
	}
#endif`, _v = `#ifdef USE_UV
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, vv = `#ifdef USE_UV
	varying vec2 vUv;
#endif
#ifdef USE_UV2
	attribute vec2 uv2;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, yv = `#ifdef USE_UV
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`, xv = `#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;
const bv = `varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`, wv = `uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`, Mv = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, Sv = `#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`, Ev = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, Tv = `uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`, Av = `#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`, Cv = `#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`, Iv = `#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`, Lv = `#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`, Rv = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`, Pv = `uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`, Dv = `uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, Nv = `uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, Ov = `#include <common>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`, Uv = `uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, Fv = `#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, zv = `#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, kv = `#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`, Bv = `#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, Vv = `#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`, Hv = `#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`, Gv = `#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, Wv = `#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, Xv = `#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`, Yv = `#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;
	#endif
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, Zv = `#define TOON
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, qv = `#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, $v = `uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`, jv = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, Jv = `#include <common>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, Kv = `uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`, Qv = `uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, ey = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`, Y0 = {
  alphamap_fragment: Tg,
  alphamap_pars_fragment: Ag,
  alphatest_fragment: Cg,
  alphatest_pars_fragment: Ig,
  aomap_fragment: Lg,
  aomap_pars_fragment: Rg,
  begin_vertex: Pg,
  beginnormal_vertex: Dg,
  bsdfs: Ng,
  iridescence_fragment: Og,
  bumpmap_pars_fragment: Ug,
  clipping_planes_fragment: Fg,
  clipping_planes_pars_fragment: zg,
  clipping_planes_pars_vertex: kg,
  clipping_planes_vertex: Bg,
  color_fragment: Vg,
  color_pars_fragment: Hg,
  color_pars_vertex: Gg,
  color_vertex: Wg,
  common: Xg,
  cube_uv_reflection_fragment: Yg,
  defaultnormal_vertex: Zg,
  displacementmap_pars_vertex: qg,
  displacementmap_vertex: $g,
  emissivemap_fragment: jg,
  emissivemap_pars_fragment: Jg,
  encodings_fragment: Kg,
  encodings_pars_fragment: Qg,
  envmap_fragment: e_,
  envmap_common_pars_fragment: t_,
  envmap_pars_fragment: n_,
  envmap_pars_vertex: i_,
  envmap_physical_pars_fragment: m_,
  envmap_vertex: s_,
  fog_vertex: r_,
  fog_pars_vertex: a_,
  fog_fragment: o_,
  fog_pars_fragment: l_,
  gradientmap_pars_fragment: c_,
  lightmap_fragment: h_,
  lightmap_pars_fragment: u_,
  lights_lambert_fragment: d_,
  lights_lambert_pars_fragment: f_,
  lights_pars_begin: p_,
  lights_toon_fragment: g_,
  lights_toon_pars_fragment: __,
  lights_phong_fragment: v_,
  lights_phong_pars_fragment: y_,
  lights_physical_fragment: x_,
  lights_physical_pars_fragment: b_,
  lights_fragment_begin: w_,
  lights_fragment_maps: M_,
  lights_fragment_end: S_,
  logdepthbuf_fragment: E_,
  logdepthbuf_pars_fragment: T_,
  logdepthbuf_pars_vertex: A_,
  logdepthbuf_vertex: C_,
  map_fragment: I_,
  map_pars_fragment: L_,
  map_particle_fragment: R_,
  map_particle_pars_fragment: P_,
  metalnessmap_fragment: D_,
  metalnessmap_pars_fragment: N_,
  morphcolor_vertex: O_,
  morphnormal_vertex: U_,
  morphtarget_pars_vertex: F_,
  morphtarget_vertex: z_,
  normal_fragment_begin: k_,
  normal_fragment_maps: B_,
  normal_pars_fragment: V_,
  normal_pars_vertex: H_,
  normal_vertex: G_,
  normalmap_pars_fragment: W_,
  clearcoat_normal_fragment_begin: X_,
  clearcoat_normal_fragment_maps: Y_,
  clearcoat_pars_fragment: Z_,
  iridescence_pars_fragment: q_,
  output_fragment: $_,
  packing: j_,
  premultiplied_alpha_fragment: J_,
  project_vertex: K_,
  dithering_fragment: Q_,
  dithering_pars_fragment: ev,
  roughnessmap_fragment: tv,
  roughnessmap_pars_fragment: nv,
  shadowmap_pars_fragment: iv,
  shadowmap_pars_vertex: sv,
  shadowmap_vertex: rv,
  shadowmask_pars_fragment: av,
  skinbase_vertex: ov,
  skinning_pars_vertex: lv,
  skinning_vertex: cv,
  skinnormal_vertex: hv,
  specularmap_fragment: uv,
  specularmap_pars_fragment: dv,
  tonemapping_fragment: fv,
  tonemapping_pars_fragment: pv,
  transmission_fragment: mv,
  transmission_pars_fragment: gv,
  uv_pars_fragment: _v,
  uv_pars_vertex: vv,
  uv_vertex: yv,
  worldpos_vertex: xv,
  background_vert: bv,
  background_frag: wv,
  backgroundCube_vert: Mv,
  backgroundCube_frag: Sv,
  cube_vert: Ev,
  cube_frag: Tv,
  depth_vert: Av,
  depth_frag: Cv,
  distanceRGBA_vert: Iv,
  distanceRGBA_frag: Lv,
  equirect_vert: Rv,
  equirect_frag: Pv,
  linedashed_vert: Dv,
  linedashed_frag: Nv,
  meshbasic_vert: Ov,
  meshbasic_frag: Uv,
  meshlambert_vert: Fv,
  meshlambert_frag: zv,
  meshmatcap_vert: kv,
  meshmatcap_frag: Bv,
  meshnormal_vert: Vv,
  meshnormal_frag: Hv,
  meshphong_vert: Gv,
  meshphong_frag: Wv,
  meshphysical_vert: Xv,
  meshphysical_frag: Yv,
  meshtoon_vert: Zv,
  meshtoon_frag: qv,
  points_vert: $v,
  points_frag: jv,
  shadow_vert: Jv,
  shadow_frag: Kv,
  sprite_vert: Qv,
  sprite_frag: ey
}, _0 = {
  common: {
    diffuse: { value: /* @__PURE__ */ new f0(16777215) },
    opacity: { value: 1 },
    map: { value: null },
    mapTransform: { value: /* @__PURE__ */ new $0() },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new $0() },
    alphaTest: { value: 0 }
  },
  specularmap: {
    specularMap: { value: null },
    specularMapTransform: { value: /* @__PURE__ */ new $0() }
  },
  envmap: {
    envMap: { value: null },
    flipEnvMap: { value: -1 },
    reflectivity: { value: 1 },
    // basic, lambert, phong
    ior: { value: 1.5 },
    // physical
    refractionRatio: { value: 0.98 }
    // basic, lambert, phong
  },
  aomap: {
    aoMap: { value: null },
    aoMapIntensity: { value: 1 },
    aoMapTransform: { value: /* @__PURE__ */ new $0() }
  },
  lightmap: {
    lightMap: { value: null },
    lightMapIntensity: { value: 1 },
    lightMapTransform: { value: /* @__PURE__ */ new $0() }
  },
  bumpmap: {
    bumpMap: { value: null },
    bumpMapTransform: { value: /* @__PURE__ */ new $0() },
    bumpScale: { value: 1 }
  },
  normalmap: {
    normalMap: { value: null },
    normalMapTransform: { value: /* @__PURE__ */ new $0() },
    normalScale: { value: /* @__PURE__ */ new o0(1, 1) }
  },
  displacementmap: {
    displacementMap: { value: null },
    displacementMapTransform: { value: /* @__PURE__ */ new $0() },
    displacementScale: { value: 1 },
    displacementBias: { value: 0 }
  },
  emissivemap: {
    emissiveMap: { value: null },
    emissiveMapTransform: { value: /* @__PURE__ */ new $0() }
  },
  metalnessmap: {
    metalnessMap: { value: null },
    metalnessMapTransform: { value: /* @__PURE__ */ new $0() }
  },
  roughnessmap: {
    roughnessMap: { value: null },
    roughnessMapTransform: { value: /* @__PURE__ */ new $0() }
  },
  gradientmap: {
    gradientMap: { value: null }
  },
  fog: {
    fogDensity: { value: 25e-5 },
    fogNear: { value: 1 },
    fogFar: { value: 2e3 },
    fogColor: { value: /* @__PURE__ */ new f0(16777215) }
  },
  lights: {
    ambientLightColor: { value: [] },
    lightProbe: { value: [] },
    directionalLights: { value: [], properties: {
      direction: {},
      color: {}
    } },
    directionalLightShadows: { value: [], properties: {
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    directionalShadowMap: { value: [] },
    directionalShadowMatrix: { value: [] },
    spotLights: { value: [], properties: {
      color: {},
      position: {},
      direction: {},
      distance: {},
      coneCos: {},
      penumbraCos: {},
      decay: {}
    } },
    spotLightShadows: { value: [], properties: {
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    spotLightMap: { value: [] },
    spotShadowMap: { value: [] },
    spotLightMatrix: { value: [] },
    pointLights: { value: [], properties: {
      color: {},
      position: {},
      decay: {},
      distance: {}
    } },
    pointLightShadows: { value: [], properties: {
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {},
      shadowCameraNear: {},
      shadowCameraFar: {}
    } },
    pointShadowMap: { value: [] },
    pointShadowMatrix: { value: [] },
    hemisphereLights: { value: [], properties: {
      direction: {},
      skyColor: {},
      groundColor: {}
    } },
    // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
    rectAreaLights: { value: [], properties: {
      color: {},
      position: {},
      width: {},
      height: {}
    } },
    ltc_1: { value: null },
    ltc_2: { value: null }
  },
  points: {
    diffuse: { value: /* @__PURE__ */ new f0(16777215) },
    opacity: { value: 1 },
    size: { value: 1 },
    scale: { value: 1 },
    map: { value: null },
    alphaMap: { value: null },
    alphaTest: { value: 0 },
    uvTransform: { value: /* @__PURE__ */ new $0() }
  },
  sprite: {
    diffuse: { value: /* @__PURE__ */ new f0(16777215) },
    opacity: { value: 1 },
    center: { value: /* @__PURE__ */ new o0(0.5, 0.5) },
    rotation: { value: 0 },
    map: { value: null },
    mapTransform: { value: /* @__PURE__ */ new $0() },
    alphaMap: { value: null },
    alphaTest: { value: 0 }
  }
}, s1 = {
  basic: {
    uniforms: /* @__PURE__ */ _t([
      _0.common,
      _0.specularmap,
      _0.envmap,
      _0.aomap,
      _0.lightmap,
      _0.fog
    ]),
    vertexShader: Y0.meshbasic_vert,
    fragmentShader: Y0.meshbasic_frag
  },
  lambert: {
    uniforms: /* @__PURE__ */ _t([
      _0.common,
      _0.specularmap,
      _0.envmap,
      _0.aomap,
      _0.lightmap,
      _0.emissivemap,
      _0.bumpmap,
      _0.normalmap,
      _0.displacementmap,
      _0.fog,
      _0.lights,
      {
        emissive: { value: /* @__PURE__ */ new f0(0) }
      }
    ]),
    vertexShader: Y0.meshlambert_vert,
    fragmentShader: Y0.meshlambert_frag
  },
  phong: {
    uniforms: /* @__PURE__ */ _t([
      _0.common,
      _0.specularmap,
      _0.envmap,
      _0.aomap,
      _0.lightmap,
      _0.emissivemap,
      _0.bumpmap,
      _0.normalmap,
      _0.displacementmap,
      _0.fog,
      _0.lights,
      {
        emissive: { value: /* @__PURE__ */ new f0(0) },
        specular: { value: /* @__PURE__ */ new f0(1118481) },
        shininess: { value: 30 }
      }
    ]),
    vertexShader: Y0.meshphong_vert,
    fragmentShader: Y0.meshphong_frag
  },
  standard: {
    uniforms: /* @__PURE__ */ _t([
      _0.common,
      _0.envmap,
      _0.aomap,
      _0.lightmap,
      _0.emissivemap,
      _0.bumpmap,
      _0.normalmap,
      _0.displacementmap,
      _0.roughnessmap,
      _0.metalnessmap,
      _0.fog,
      _0.lights,
      {
        emissive: { value: /* @__PURE__ */ new f0(0) },
        roughness: { value: 1 },
        metalness: { value: 0 },
        envMapIntensity: { value: 1 }
        // temporary
      }
    ]),
    vertexShader: Y0.meshphysical_vert,
    fragmentShader: Y0.meshphysical_frag
  },
  toon: {
    uniforms: /* @__PURE__ */ _t([
      _0.common,
      _0.aomap,
      _0.lightmap,
      _0.emissivemap,
      _0.bumpmap,
      _0.normalmap,
      _0.displacementmap,
      _0.gradientmap,
      _0.fog,
      _0.lights,
      {
        emissive: { value: /* @__PURE__ */ new f0(0) }
      }
    ]),
    vertexShader: Y0.meshtoon_vert,
    fragmentShader: Y0.meshtoon_frag
  },
  matcap: {
    uniforms: /* @__PURE__ */ _t([
      _0.common,
      _0.bumpmap,
      _0.normalmap,
      _0.displacementmap,
      _0.fog,
      {
        matcap: { value: null }
      }
    ]),
    vertexShader: Y0.meshmatcap_vert,
    fragmentShader: Y0.meshmatcap_frag
  },
  points: {
    uniforms: /* @__PURE__ */ _t([
      _0.points,
      _0.fog
    ]),
    vertexShader: Y0.points_vert,
    fragmentShader: Y0.points_frag
  },
  dashed: {
    uniforms: /* @__PURE__ */ _t([
      _0.common,
      _0.fog,
      {
        scale: { value: 1 },
        dashSize: { value: 1 },
        totalSize: { value: 2 }
      }
    ]),
    vertexShader: Y0.linedashed_vert,
    fragmentShader: Y0.linedashed_frag
  },
  depth: {
    uniforms: /* @__PURE__ */ _t([
      _0.common,
      _0.displacementmap
    ]),
    vertexShader: Y0.depth_vert,
    fragmentShader: Y0.depth_frag
  },
  normal: {
    uniforms: /* @__PURE__ */ _t([
      _0.common,
      _0.bumpmap,
      _0.normalmap,
      _0.displacementmap,
      {
        opacity: { value: 1 }
      }
    ]),
    vertexShader: Y0.meshnormal_vert,
    fragmentShader: Y0.meshnormal_frag
  },
  sprite: {
    uniforms: /* @__PURE__ */ _t([
      _0.sprite,
      _0.fog
    ]),
    vertexShader: Y0.sprite_vert,
    fragmentShader: Y0.sprite_frag
  },
  background: {
    uniforms: {
      uvTransform: { value: /* @__PURE__ */ new $0() },
      t2D: { value: null },
      backgroundIntensity: { value: 1 }
    },
    vertexShader: Y0.background_vert,
    fragmentShader: Y0.background_frag
  },
  backgroundCube: {
    uniforms: {
      envMap: { value: null },
      flipEnvMap: { value: -1 },
      backgroundBlurriness: { value: 0 },
      backgroundIntensity: { value: 1 }
    },
    vertexShader: Y0.backgroundCube_vert,
    fragmentShader: Y0.backgroundCube_frag
  },
  cube: {
    uniforms: {
      tCube: { value: null },
      tFlip: { value: -1 },
      opacity: { value: 1 }
    },
    vertexShader: Y0.cube_vert,
    fragmentShader: Y0.cube_frag
  },
  equirect: {
    uniforms: {
      tEquirect: { value: null }
    },
    vertexShader: Y0.equirect_vert,
    fragmentShader: Y0.equirect_frag
  },
  distanceRGBA: {
    uniforms: /* @__PURE__ */ _t([
      _0.common,
      _0.displacementmap,
      {
        referencePosition: { value: /* @__PURE__ */ new C() },
        nearDistance: { value: 1 },
        farDistance: { value: 1e3 }
      }
    ]),
    vertexShader: Y0.distanceRGBA_vert,
    fragmentShader: Y0.distanceRGBA_frag
  },
  shadow: {
    uniforms: /* @__PURE__ */ _t([
      _0.lights,
      _0.fog,
      {
        color: { value: /* @__PURE__ */ new f0(0) },
        opacity: { value: 1 }
      }
    ]),
    vertexShader: Y0.shadow_vert,
    fragmentShader: Y0.shadow_frag
  }
};
s1.physical = {
  uniforms: /* @__PURE__ */ _t([
    s1.standard.uniforms,
    {
      clearcoat: { value: 0 },
      clearcoatMap: { value: null },
      clearcoatMapTransform: { value: /* @__PURE__ */ new $0() },
      clearcoatNormalMap: { value: null },
      clearcoatNormalMapTransform: { value: /* @__PURE__ */ new $0() },
      clearcoatNormalScale: { value: /* @__PURE__ */ new o0(1, 1) },
      clearcoatRoughness: { value: 0 },
      clearcoatRoughnessMap: { value: null },
      clearcoatRoughnessMapTransform: { value: /* @__PURE__ */ new $0() },
      iridescence: { value: 0 },
      iridescenceMap: { value: null },
      iridescenceMapTransform: { value: /* @__PURE__ */ new $0() },
      iridescenceIOR: { value: 1.3 },
      iridescenceThicknessMinimum: { value: 100 },
      iridescenceThicknessMaximum: { value: 400 },
      iridescenceThicknessMap: { value: null },
      iridescenceThicknessMapTransform: { value: /* @__PURE__ */ new $0() },
      sheen: { value: 0 },
      sheenColor: { value: /* @__PURE__ */ new f0(0) },
      sheenColorMap: { value: null },
      sheenColorMapTransform: { value: /* @__PURE__ */ new $0() },
      sheenRoughness: { value: 1 },
      sheenRoughnessMap: { value: null },
      sheenRoughnessMapTransform: { value: /* @__PURE__ */ new $0() },
      transmission: { value: 0 },
      transmissionMap: { value: null },
      transmissionMapTransform: { value: /* @__PURE__ */ new $0() },
      transmissionSamplerSize: { value: /* @__PURE__ */ new o0() },
      transmissionSamplerMap: { value: null },
      thickness: { value: 0 },
      thicknessMap: { value: null },
      thicknessMapTransform: { value: /* @__PURE__ */ new $0() },
      attenuationDistance: { value: 0 },
      attenuationColor: { value: /* @__PURE__ */ new f0(0) },
      specularColor: { value: /* @__PURE__ */ new f0(1, 1, 1) },
      specularColorMap: { value: null },
      specularColorMapTransform: { value: /* @__PURE__ */ new $0() },
      specularIntensity: { value: 1 },
      specularIntensityMap: { value: null },
      specularIntensityMapTransform: { value: /* @__PURE__ */ new $0() }
    }
  ]),
  vertexShader: Y0.meshphysical_vert,
  fragmentShader: Y0.meshphysical_frag
};
const b7 = { r: 0, b: 0, g: 0 };
function ty(i, e, t, n, s, r, a) {
  const o = new f0(0);
  let c = r === !0 ? 0 : 1, l, h, d = null, u = 0, f = null;
  function p(g, m) {
    let v = !1, y = m.isScene === !0 ? m.background : null;
    y && y.isTexture && (y = (m.backgroundBlurriness > 0 ? t : e).get(y));
    const b = i.xr, w = b.getSession && b.getSession();
    w && w.environmentBlendMode === "additive" && (y = null), y === null ? _(o, c) : y && y.isColor && (_(y, 1), v = !0), (i.autoClear || v) && i.clear(i.autoClearColor, i.autoClearDepth, i.autoClearStencil), y && (y.isCubeTexture || y.mapping === e8) ? (h === void 0 && (h = new y0(
      new ct(1, 1, 1),
      new l1({
        name: "BackgroundCubeMaterial",
        uniforms: J9(s1.backgroundCube.uniforms),
        vertexShader: s1.backgroundCube.vertexShader,
        fragmentShader: s1.backgroundCube.fragmentShader,
        side: ut,
        depthTest: !1,
        depthWrite: !1,
        fog: !1
      })
    ), h.geometry.deleteAttribute("normal"), h.geometry.deleteAttribute("uv"), h.onBeforeRender = function(x, S, T) {
      this.matrixWorld.copyPosition(T.matrixWorld);
    }, Object.defineProperty(h.material, "envMap", {
      get: function() {
        return this.uniforms.envMap.value;
      }
    }), s.update(h)), h.material.uniforms.envMap.value = y, h.material.uniforms.flipEnvMap.value = y.isCubeTexture && y.isRenderTargetTexture === !1 ? -1 : 1, h.material.uniforms.backgroundBlurriness.value = m.backgroundBlurriness, h.material.uniforms.backgroundIntensity.value = m.backgroundIntensity, h.material.toneMapped = y.encoding !== ve, (d !== y || u !== y.version || f !== i.toneMapping) && (h.material.needsUpdate = !0, d = y, u = y.version, f = i.toneMapping), h.layers.enableAll(), g.unshift(h, h.geometry, h.material, 0, 0, null)) : y && y.isTexture && (l === void 0 && (l = new y0(
      new Dt(2, 2),
      new l1({
        name: "BackgroundMaterial",
        uniforms: J9(s1.background.uniforms),
        vertexShader: s1.background.vertexShader,
        fragmentShader: s1.background.fragmentShader,
        side: an,
        depthTest: !1,
        depthWrite: !1,
        fog: !1
      })
    ), l.geometry.deleteAttribute("normal"), Object.defineProperty(l.material, "map", {
      get: function() {
        return this.uniforms.t2D.value;
      }
    }), s.update(l)), l.material.uniforms.t2D.value = y, l.material.uniforms.backgroundIntensity.value = m.backgroundIntensity, l.material.toneMapped = y.encoding !== ve, y.matrixAutoUpdate === !0 && y.updateMatrix(), l.material.uniforms.uvTransform.value.copy(y.matrix), (d !== y || u !== y.version || f !== i.toneMapping) && (l.material.needsUpdate = !0, d = y, u = y.version, f = i.toneMapping), l.layers.enableAll(), g.unshift(l, l.geometry, l.material, 0, 0, null));
  }
  function _(g, m) {
    g.getRGB(b7, vh(i)), n.buffers.color.setClear(b7.r, b7.g, b7.b, m, a);
  }
  return {
    getClearColor: function() {
      return o;
    },
    setClearColor: function(g, m = 1) {
      o.set(g), c = m, _(o, c);
    },
    getClearAlpha: function() {
      return c;
    },
    setClearAlpha: function(g) {
      c = g, _(o, c);
    },
    render: p
  };
}
function ny(i, e, t, n) {
  const s = i.getParameter(34921), r = n.isWebGL2 ? null : e.get("OES_vertex_array_object"), a = n.isWebGL2 || r !== null, o = {}, c = g(null);
  let l = c, h = !1;
  function d(U, V, Y, W, X) {
    let i0 = !1;
    if (a) {
      const a0 = _(W, Y, V);
      l !== a0 && (l = a0, f(l.object)), i0 = m(U, W, Y, X), i0 && v(U, W, Y, X);
    } else {
      const a0 = V.wireframe === !0;
      (l.geometry !== W.id || l.program !== Y.id || l.wireframe !== a0) && (l.geometry = W.id, l.program = Y.id, l.wireframe = a0, i0 = !0);
    }
    X !== null && t.update(X, 34963), (i0 || h) && (h = !1, T(U, V, Y, W), X !== null && i.bindBuffer(34963, t.get(X).buffer));
  }
  function u() {
    return n.isWebGL2 ? i.createVertexArray() : r.createVertexArrayOES();
  }
  function f(U) {
    return n.isWebGL2 ? i.bindVertexArray(U) : r.bindVertexArrayOES(U);
  }
  function p(U) {
    return n.isWebGL2 ? i.deleteVertexArray(U) : r.deleteVertexArrayOES(U);
  }
  function _(U, V, Y) {
    const W = Y.wireframe === !0;
    let X = o[U.id];
    X === void 0 && (X = {}, o[U.id] = X);
    let i0 = X[V.id];
    i0 === void 0 && (i0 = {}, X[V.id] = i0);
    let a0 = i0[W];
    return a0 === void 0 && (a0 = g(u()), i0[W] = a0), a0;
  }
  function g(U) {
    const V = [], Y = [], W = [];
    for (let X = 0; X < s; X++)
      V[X] = 0, Y[X] = 0, W[X] = 0;
    return {
      // for backward compatibility on non-VAO support browser
      geometry: null,
      program: null,
      wireframe: !1,
      newAttributes: V,
      enabledAttributes: Y,
      attributeDivisors: W,
      object: U,
      attributes: {},
      index: null
    };
  }
  function m(U, V, Y, W) {
    const X = l.attributes, i0 = V.attributes;
    let a0 = 0;
    const x0 = Y.getAttributes();
    for (const u0 in x0)
      if (x0[u0].location >= 0) {
        const F = X[u0];
        let R = i0[u0];
        if (R === void 0 && (u0 === "instanceMatrix" && U.instanceMatrix && (R = U.instanceMatrix), u0 === "instanceColor" && U.instanceColor && (R = U.instanceColor)), F === void 0 || F.attribute !== R || R && F.data !== R.data)
          return !0;
        a0++;
      }
    return l.attributesNum !== a0 || l.index !== W;
  }
  function v(U, V, Y, W) {
    const X = {}, i0 = V.attributes;
    let a0 = 0;
    const x0 = Y.getAttributes();
    for (const u0 in x0)
      if (x0[u0].location >= 0) {
        let F = i0[u0];
        F === void 0 && (u0 === "instanceMatrix" && U.instanceMatrix && (F = U.instanceMatrix), u0 === "instanceColor" && U.instanceColor && (F = U.instanceColor));
        const R = {};
        R.attribute = F, F && F.data && (R.data = F.data), X[u0] = R, a0++;
      }
    l.attributes = X, l.attributesNum = a0, l.index = W;
  }
  function y() {
    const U = l.newAttributes;
    for (let V = 0, Y = U.length; V < Y; V++)
      U[V] = 0;
  }
  function b(U) {
    w(U, 0);
  }
  function w(U, V) {
    const Y = l.newAttributes, W = l.enabledAttributes, X = l.attributeDivisors;
    Y[U] = 1, W[U] === 0 && (i.enableVertexAttribArray(U), W[U] = 1), X[U] !== V && ((n.isWebGL2 ? i : e.get("ANGLE_instanced_arrays"))[n.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](U, V), X[U] = V);
  }
  function x() {
    const U = l.newAttributes, V = l.enabledAttributes;
    for (let Y = 0, W = V.length; Y < W; Y++)
      V[Y] !== U[Y] && (i.disableVertexAttribArray(Y), V[Y] = 0);
  }
  function S(U, V, Y, W, X, i0) {
    n.isWebGL2 === !0 && (Y === 5124 || Y === 5125) ? i.vertexAttribIPointer(U, V, Y, X, i0) : i.vertexAttribPointer(U, V, Y, W, X, i0);
  }
  function T(U, V, Y, W) {
    if (n.isWebGL2 === !1 && (U.isInstancedMesh || W.isInstancedBufferGeometry) && e.get("ANGLE_instanced_arrays") === null)
      return;
    y();
    const X = W.attributes, i0 = Y.getAttributes(), a0 = V.defaultAttributeValues;
    for (const x0 in i0) {
      const u0 = i0[x0];
      if (u0.location >= 0) {
        let E = X[x0];
        if (E === void 0 && (x0 === "instanceMatrix" && U.instanceMatrix && (E = U.instanceMatrix), x0 === "instanceColor" && U.instanceColor && (E = U.instanceColor)), E !== void 0) {
          const F = E.normalized, R = E.itemSize, j = t.get(E);
          if (j === void 0)
            continue;
          const B = j.buffer, m0 = j.type, b0 = j.bytesPerElement;
          if (E.isInterleavedBufferAttribute) {
            const e0 = E.data, M0 = e0.stride, r0 = E.offset;
            if (e0.isInstancedInterleavedBuffer) {
              for (let Z = 0; Z < u0.locationSize; Z++)
                w(u0.location + Z, e0.meshPerAttribute);
              U.isInstancedMesh !== !0 && W._maxInstanceCount === void 0 && (W._maxInstanceCount = e0.meshPerAttribute * e0.count);
            } else
              for (let Z = 0; Z < u0.locationSize; Z++)
                b(u0.location + Z);
            i.bindBuffer(34962, B);
            for (let Z = 0; Z < u0.locationSize; Z++)
              S(
                u0.location + Z,
                R / u0.locationSize,
                m0,
                F,
                M0 * b0,
                (r0 + R / u0.locationSize * Z) * b0
              );
          } else {
            if (E.isInstancedBufferAttribute) {
              for (let e0 = 0; e0 < u0.locationSize; e0++)
                w(u0.location + e0, E.meshPerAttribute);
              U.isInstancedMesh !== !0 && W._maxInstanceCount === void 0 && (W._maxInstanceCount = E.meshPerAttribute * E.count);
            } else
              for (let e0 = 0; e0 < u0.locationSize; e0++)
                b(u0.location + e0);
            i.bindBuffer(34962, B);
            for (let e0 = 0; e0 < u0.locationSize; e0++)
              S(
                u0.location + e0,
                R / u0.locationSize,
                m0,
                F,
                R * b0,
                R / u0.locationSize * e0 * b0
              );
          }
        } else if (a0 !== void 0) {
          const F = a0[x0];
          if (F !== void 0)
            switch (F.length) {
              case 2:
                i.vertexAttrib2fv(u0.location, F);
                break;
              case 3:
                i.vertexAttrib3fv(u0.location, F);
                break;
              case 4:
                i.vertexAttrib4fv(u0.location, F);
                break;
              default:
                i.vertexAttrib1fv(u0.location, F);
            }
        }
      }
    }
    x();
  }
  function M() {
    z();
    for (const U in o) {
      const V = o[U];
      for (const Y in V) {
        const W = V[Y];
        for (const X in W)
          p(W[X].object), delete W[X];
        delete V[Y];
      }
      delete o[U];
    }
  }
  function A(U) {
    if (o[U.id] === void 0)
      return;
    const V = o[U.id];
    for (const Y in V) {
      const W = V[Y];
      for (const X in W)
        p(W[X].object), delete W[X];
      delete V[Y];
    }
    delete o[U.id];
  }
  function D(U) {
    for (const V in o) {
      const Y = o[V];
      if (Y[U.id] === void 0)
        continue;
      const W = Y[U.id];
      for (const X in W)
        p(W[X].object), delete W[X];
      delete Y[U.id];
    }
  }
  function z() {
    O(), h = !0, l !== c && (l = c, f(l.object));
  }
  function O() {
    c.geometry = null, c.program = null, c.wireframe = !1;
  }
  return {
    setup: d,
    reset: z,
    resetDefaultState: O,
    dispose: M,
    releaseStatesOfGeometry: A,
    releaseStatesOfProgram: D,
    initAttributes: y,
    enableAttribute: b,
    disableUnusedAttributes: x
  };
}
function iy(i, e, t, n) {
  const s = n.isWebGL2;
  let r;
  function a(l) {
    r = l;
  }
  function o(l, h) {
    i.drawArrays(r, l, h), t.update(h, r, 1);
  }
  function c(l, h, d) {
    if (d === 0)
      return;
    let u, f;
    if (s)
      u = i, f = "drawArraysInstanced";
    else if (u = e.get("ANGLE_instanced_arrays"), f = "drawArraysInstancedANGLE", u === null) {
      console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
      return;
    }
    u[f](r, l, h, d), t.update(h, r, d);
  }
  this.setMode = a, this.render = o, this.renderInstances = c;
}
function sy(i, e, t) {
  let n;
  function s() {
    if (n !== void 0)
      return n;
    if (e.has("EXT_texture_filter_anisotropic") === !0) {
      const S = e.get("EXT_texture_filter_anisotropic");
      n = i.getParameter(S.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    } else
      n = 0;
    return n;
  }
  function r(S) {
    if (S === "highp") {
      if (i.getShaderPrecisionFormat(35633, 36338).precision > 0 && i.getShaderPrecisionFormat(35632, 36338).precision > 0)
        return "highp";
      S = "mediump";
    }
    return S === "mediump" && i.getShaderPrecisionFormat(35633, 36337).precision > 0 && i.getShaderPrecisionFormat(35632, 36337).precision > 0 ? "mediump" : "lowp";
  }
  const a = typeof WebGL2RenderingContext < "u" && i.constructor.name === "WebGL2RenderingContext";
  let o = t.precision !== void 0 ? t.precision : "highp";
  const c = r(o);
  c !== o && (console.warn("THREE.WebGLRenderer:", o, "not supported, using", c, "instead."), o = c);
  const l = a || e.has("WEBGL_draw_buffers"), h = t.logarithmicDepthBuffer === !0, d = i.getParameter(34930), u = i.getParameter(35660), f = i.getParameter(3379), p = i.getParameter(34076), _ = i.getParameter(34921), g = i.getParameter(36347), m = i.getParameter(36348), v = i.getParameter(36349), y = u > 0, b = a || e.has("OES_texture_float"), w = y && b, x = a ? i.getParameter(36183) : 0;
  return {
    isWebGL2: a,
    drawBuffers: l,
    getMaxAnisotropy: s,
    getMaxPrecision: r,
    precision: o,
    logarithmicDepthBuffer: h,
    maxTextures: d,
    maxVertexTextures: u,
    maxTextureSize: f,
    maxCubemapSize: p,
    maxAttributes: _,
    maxVertexUniforms: g,
    maxVaryings: m,
    maxFragmentUniforms: v,
    vertexTextures: y,
    floatFragmentTextures: b,
    floatVertexTextures: w,
    maxSamples: x
  };
}
function ry(i) {
  const e = this;
  let t = null, n = 0, s = !1, r = !1;
  const a = new Dn(), o = new $0(), c = { value: null, needsUpdate: !1 };
  this.uniform = c, this.numPlanes = 0, this.numIntersection = 0, this.init = function(d, u) {
    const f = d.length !== 0 || u || // enable state of previous frame - the clipping code has to
    // run another frame in order to reset the state:
    n !== 0 || s;
    return s = u, n = d.length, f;
  }, this.beginShadows = function() {
    r = !0, h(null);
  }, this.endShadows = function() {
    r = !1;
  }, this.setGlobalState = function(d, u) {
    t = h(d, u, 0);
  }, this.setState = function(d, u, f) {
    const p = d.clippingPlanes, _ = d.clipIntersection, g = d.clipShadows, m = i.get(d);
    if (!s || p === null || p.length === 0 || r && !g)
      r ? h(null) : l();
    else {
      const v = r ? 0 : n, y = v * 4;
      let b = m.clippingState || null;
      c.value = b, b = h(p, u, y, f);
      for (let w = 0; w !== y; ++w)
        b[w] = t[w];
      m.clippingState = b, this.numIntersection = _ ? this.numPlanes : 0, this.numPlanes += v;
    }
  };
  function l() {
    c.value !== t && (c.value = t, c.needsUpdate = n > 0), e.numPlanes = n, e.numIntersection = 0;
  }
  function h(d, u, f, p) {
    const _ = d !== null ? d.length : 0;
    let g = null;
    if (_ !== 0) {
      if (g = c.value, p !== !0 || g === null) {
        const m = f + _ * 4, v = u.matrixWorldInverse;
        o.getNormalMatrix(v), (g === null || g.length < m) && (g = new Float32Array(m));
        for (let y = 0, b = f; y !== _; ++y, b += 4)
          a.copy(d[y]).applyMatrix4(v, o), a.normal.toArray(g, b), g[b + 3] = a.constant;
      }
      c.value = g, c.needsUpdate = !0;
    }
    return e.numPlanes = _, e.numIntersection = 0, g;
  }
}
function ay(i) {
  let e = /* @__PURE__ */ new WeakMap();
  function t(a, o) {
    return o === is ? a.mapping = Yn : o === ss && (a.mapping = Zn), a;
  }
  function n(a) {
    if (a && a.isTexture && a.isRenderTargetTexture === !1) {
      const o = a.mapping;
      if (o === is || o === ss)
        if (e.has(a)) {
          const c = e.get(a).texture;
          return t(c, a.mapping);
        } else {
          const c = a.image;
          if (c && c.height > 0) {
            const l = new xh(c.height / 2);
            return l.fromEquirectangularTexture(i, a), e.set(a, l), a.addEventListener("dispose", s), t(l.texture, a.mapping);
          } else
            return null;
        }
    }
    return a;
  }
  function s(a) {
    const o = a.target;
    o.removeEventListener("dispose", s);
    const c = e.get(o);
    c !== void 0 && (e.delete(o), c.dispose());
  }
  function r() {
    e = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: n,
    dispose: r
  };
}
class i6 extends t6 {
  constructor(e = -1, t = 1, n = 1, s = -1, r = 0.1, a = 2e3) {
    super(), this.isOrthographicCamera = !0, this.type = "OrthographicCamera", this.zoom = 1, this.view = null, this.left = e, this.right = t, this.top = n, this.bottom = s, this.near = r, this.far = a, this.updateProjectionMatrix();
  }
  copy(e, t) {
    return super.copy(e, t), this.left = e.left, this.right = e.right, this.top = e.top, this.bottom = e.bottom, this.near = e.near, this.far = e.far, this.zoom = e.zoom, this.view = e.view === null ? null : Object.assign({}, e.view), this;
  }
  setViewOffset(e, t, n, s, r, a) {
    this.view === null && (this.view = {
      enabled: !0,
      fullWidth: 1,
      fullHeight: 1,
      offsetX: 0,
      offsetY: 0,
      width: 1,
      height: 1
    }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = n, this.view.offsetY = s, this.view.width = r, this.view.height = a, this.updateProjectionMatrix();
  }
  clearViewOffset() {
    this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    const e = (this.right - this.left) / (2 * this.zoom), t = (this.top - this.bottom) / (2 * this.zoom), n = (this.right + this.left) / 2, s = (this.top + this.bottom) / 2;
    let r = n - e, a = n + e, o = s + t, c = s - t;
    if (this.view !== null && this.view.enabled) {
      const l = (this.right - this.left) / this.view.fullWidth / this.zoom, h = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
      r += l * this.view.offsetX, a = r + l * this.view.width, o -= h * this.view.offsetY, c = o - h * this.view.height;
    }
    this.projectionMatrix.makeOrthographic(r, a, o, c, this.near, this.far), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.zoom = this.zoom, t.object.left = this.left, t.object.right = this.right, t.object.top = this.top, t.object.bottom = this.bottom, t.object.near = this.near, t.object.far = this.far, this.view !== null && (t.object.view = Object.assign({}, this.view)), t;
  }
}
const N9 = 4, O4 = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582], yi = 20, W6 = /* @__PURE__ */ new i6(), U4 = /* @__PURE__ */ new f0();
let X6 = null;
const mi = (1 + Math.sqrt(5)) / 2, m9 = 1 / mi, F4 = [
  /* @__PURE__ */ new C(1, 1, 1),
  /* @__PURE__ */ new C(-1, 1, 1),
  /* @__PURE__ */ new C(1, 1, -1),
  /* @__PURE__ */ new C(-1, 1, -1),
  /* @__PURE__ */ new C(0, mi, m9),
  /* @__PURE__ */ new C(0, mi, -m9),
  /* @__PURE__ */ new C(m9, 0, mi),
  /* @__PURE__ */ new C(-m9, 0, mi),
  /* @__PURE__ */ new C(mi, m9, 0),
  /* @__PURE__ */ new C(-mi, m9, 0)
];
class T5 {
  constructor(e) {
    this._renderer = e, this._pingPongRenderTarget = null, this._lodMax = 0, this._cubeSize = 0, this._lodPlanes = [], this._sizeLods = [], this._sigmas = [], this._blurMaterial = null, this._cubemapMaterial = null, this._equirectMaterial = null, this._compileMaterial(this._blurMaterial);
  }
  /**
   * Generates a PMREM from a supplied Scene, which can be faster than using an
   * image if networking bandwidth is low. Optional sigma specifies a blur radius
   * in radians to be applied to the scene before PMREM generation. Optional near
   * and far planes ensure the scene is rendered in its entirety (the cubeCamera
   * is placed at the origin).
   */
  fromScene(e, t = 0, n = 0.1, s = 100) {
    X6 = this._renderer.getRenderTarget(), this._setSize(256);
    const r = this._allocateTargets();
    return r.depthBuffer = !0, this._sceneToCubeUV(e, n, s, r), t > 0 && this._blur(r, 0, 0, t), this._applyPMREM(r), this._cleanup(r), r;
  }
  /**
   * Generates a PMREM from an equirectangular texture, which can be either LDR
   * or HDR. The ideal input image size is 1k (1024 x 512),
   * as this matches best with the 256 x 256 cubemap output.
   */
  fromEquirectangular(e, t = null) {
    return this._fromTexture(e, t);
  }
  /**
   * Generates a PMREM from an cubemap texture, which can be either LDR
   * or HDR. The ideal input cube size is 256 x 256,
   * as this matches best with the 256 x 256 cubemap output.
   */
  fromCubemap(e, t = null) {
    return this._fromTexture(e, t);
  }
  /**
   * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileCubemapShader() {
    this._cubemapMaterial === null && (this._cubemapMaterial = B4(), this._compileMaterial(this._cubemapMaterial));
  }
  /**
   * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileEquirectangularShader() {
    this._equirectMaterial === null && (this._equirectMaterial = k4(), this._compileMaterial(this._equirectMaterial));
  }
  /**
   * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
   * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
   * one of them will cause any others to also become unusable.
   */
  dispose() {
    this._dispose(), this._cubemapMaterial !== null && this._cubemapMaterial.dispose(), this._equirectMaterial !== null && this._equirectMaterial.dispose();
  }
  // private interface
  _setSize(e) {
    this._lodMax = Math.floor(Math.log2(e)), this._cubeSize = Math.pow(2, this._lodMax);
  }
  _dispose() {
    this._blurMaterial !== null && this._blurMaterial.dispose(), this._pingPongRenderTarget !== null && this._pingPongRenderTarget.dispose();
    for (let e = 0; e < this._lodPlanes.length; e++)
      this._lodPlanes[e].dispose();
  }
  _cleanup(e) {
    this._renderer.setRenderTarget(X6), e.scissorTest = !1, w7(e, 0, 0, e.width, e.height);
  }
  _fromTexture(e, t) {
    e.mapping === Yn || e.mapping === Zn ? this._setSize(e.image.length === 0 ? 16 : e.image[0].width || e.image[0].image.width) : this._setSize(e.image.width / 4), X6 = this._renderer.getRenderTarget();
    const n = t || this._allocateTargets();
    return this._textureToCubeUV(e, n), this._applyPMREM(n), this._cleanup(n), n;
  }
  _allocateTargets() {
    const e = 3 * Math.max(this._cubeSize, 112), t = 4 * this._cubeSize, n = {
      magFilter: Pe,
      minFilter: Pe,
      generateMipmaps: !1,
      type: q9,
      format: Ot,
      encoding: jn,
      depthBuffer: !1
    }, s = z4(e, t, n);
    if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== e || this._pingPongRenderTarget.height !== t) {
      this._pingPongRenderTarget !== null && this._dispose(), this._pingPongRenderTarget = z4(e, t, n);
      const { _lodMax: r } = this;
      ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = oy(r)), this._blurMaterial = ly(r, e, t);
    }
    return s;
  }
  _compileMaterial(e) {
    const t = new y0(this._lodPlanes[0], e);
    this._renderer.compile(t, W6);
  }
  _sceneToCubeUV(e, t, n, s) {
    const o = new Qe(90, 1, t, n), c = [1, -1, 1, 1, 1, 1], l = [1, 1, 1, -1, -1, -1], h = this._renderer, d = h.autoClear, u = h.toneMapping;
    h.getClearColor(U4), h.toneMapping = D1, h.autoClear = !1;
    const f = new c1({
      name: "PMREM.Background",
      side: ut,
      depthWrite: !1,
      depthTest: !1
    }), p = new y0(new ct(), f);
    let _ = !1;
    const g = e.background;
    g ? g.isColor && (f.color.copy(g), e.background = null, _ = !0) : (f.color.copy(U4), _ = !0);
    for (let m = 0; m < 6; m++) {
      const v = m % 3;
      v === 0 ? (o.up.set(0, c[m], 0), o.lookAt(l[m], 0, 0)) : v === 1 ? (o.up.set(0, 0, c[m]), o.lookAt(0, l[m], 0)) : (o.up.set(0, c[m], 0), o.lookAt(0, 0, l[m]));
      const y = this._cubeSize;
      w7(s, v * y, m > 2 ? y : 0, y, y), h.setRenderTarget(s), _ && h.render(p, o), h.render(e, o);
    }
    p.geometry.dispose(), p.material.dispose(), h.toneMapping = u, h.autoClear = d, e.background = g;
  }
  _textureToCubeUV(e, t) {
    const n = this._renderer, s = e.mapping === Yn || e.mapping === Zn;
    s ? (this._cubemapMaterial === null && (this._cubemapMaterial = B4()), this._cubemapMaterial.uniforms.flipEnvMap.value = e.isRenderTargetTexture === !1 ? -1 : 1) : this._equirectMaterial === null && (this._equirectMaterial = k4());
    const r = s ? this._cubemapMaterial : this._equirectMaterial, a = new y0(this._lodPlanes[0], r), o = r.uniforms;
    o.envMap.value = e;
    const c = this._cubeSize;
    w7(t, 0, 0, 3 * c, 2 * c), n.setRenderTarget(t), n.render(a, W6);
  }
  _applyPMREM(e) {
    const t = this._renderer, n = t.autoClear;
    t.autoClear = !1;
    for (let s = 1; s < this._lodPlanes.length; s++) {
      const r = Math.sqrt(this._sigmas[s] * this._sigmas[s] - this._sigmas[s - 1] * this._sigmas[s - 1]), a = F4[(s - 1) % F4.length];
      this._blur(e, s - 1, s, r, a);
    }
    t.autoClear = n;
  }
  /**
   * This is a two-pass Gaussian blur for a cubemap. Normally this is done
   * vertically and horizontally, but this breaks down on a cube. Here we apply
   * the blur latitudinally (around the poles), and then longitudinally (towards
   * the poles) to approximate the orthogonally-separable blur. It is least
   * accurate at the poles, but still does a decent job.
   */
  _blur(e, t, n, s, r) {
    const a = this._pingPongRenderTarget;
    this._halfBlur(
      e,
      a,
      t,
      n,
      s,
      "latitudinal",
      r
    ), this._halfBlur(
      a,
      e,
      n,
      n,
      s,
      "longitudinal",
      r
    );
  }
  _halfBlur(e, t, n, s, r, a, o) {
    const c = this._renderer, l = this._blurMaterial;
    a !== "latitudinal" && a !== "longitudinal" && console.error(
      "blur direction must be either latitudinal or longitudinal!"
    );
    const h = 3, d = new y0(this._lodPlanes[s], l), u = l.uniforms, f = this._sizeLods[n] - 1, p = isFinite(r) ? Math.PI / (2 * f) : 2 * Math.PI / (2 * yi - 1), _ = r / p, g = isFinite(r) ? 1 + Math.floor(h * _) : yi;
    g > yi && console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${g} samples when the maximum is set to ${yi}`);
    const m = [];
    let v = 0;
    for (let S = 0; S < yi; ++S) {
      const T = S / _, M = Math.exp(-T * T / 2);
      m.push(M), S === 0 ? v += M : S < g && (v += 2 * M);
    }
    for (let S = 0; S < m.length; S++)
      m[S] = m[S] / v;
    u.envMap.value = e.texture, u.samples.value = g, u.weights.value = m, u.latitudinal.value = a === "latitudinal", o && (u.poleAxis.value = o);
    const { _lodMax: y } = this;
    u.dTheta.value = p, u.mipInt.value = y - n;
    const b = this._sizeLods[s], w = 3 * b * (s > y - N9 ? s - y + N9 : 0), x = 4 * (this._cubeSize - b);
    w7(t, w, x, 3 * b, 2 * b), c.setRenderTarget(t), c.render(d, W6);
  }
}
function oy(i) {
  const e = [], t = [], n = [];
  let s = i;
  const r = i - N9 + 1 + O4.length;
  for (let a = 0; a < r; a++) {
    const o = Math.pow(2, s);
    t.push(o);
    let c = 1 / o;
    a > i - N9 ? c = O4[a - i + N9 - 1] : a === 0 && (c = 0), n.push(c);
    const l = 1 / (o - 2), h = -l, d = 1 + l, u = [h, h, d, h, d, d, h, h, d, d, h, d], f = 6, p = 6, _ = 3, g = 2, m = 1, v = new Float32Array(_ * p * f), y = new Float32Array(g * p * f), b = new Float32Array(m * p * f);
    for (let x = 0; x < f; x++) {
      const S = x % 3 * 2 / 3 - 1, T = x > 2 ? 0 : -1, M = [
        S,
        T,
        0,
        S + 2 / 3,
        T,
        0,
        S + 2 / 3,
        T + 1,
        0,
        S,
        T,
        0,
        S + 2 / 3,
        T + 1,
        0,
        S,
        T + 1,
        0
      ];
      v.set(M, _ * p * x), y.set(u, g * p * x);
      const A = [x, x, x, x, x, x];
      b.set(A, m * p * x);
    }
    const w = new F0();
    w.setAttribute("position", new ee(v, _)), w.setAttribute("uv", new ee(y, g)), w.setAttribute("faceIndex", new ee(b, m)), e.push(w), s > N9 && s--;
  }
  return { lodPlanes: e, sizeLods: t, sigmas: n };
}
function z4(i, e, t) {
  const n = new o1(i, e, t);
  return n.texture.mapping = e8, n.texture.name = "PMREM.cubeUv", n.scissorTest = !0, n;
}
function w7(i, e, t, n, s) {
  i.viewport.set(e, t, n, s), i.scissor.set(e, t, n, s);
}
function ly(i, e, t) {
  const n = new Float32Array(yi), s = new C(0, 1, 0);
  return new l1({
    name: "SphericalGaussianBlur",
    defines: {
      n: yi,
      CUBEUV_TEXEL_WIDTH: 1 / e,
      CUBEUV_TEXEL_HEIGHT: 1 / t,
      CUBEUV_MAX_MIP: `${i}.0`
    },
    uniforms: {
      envMap: { value: null },
      samples: { value: 1 },
      weights: { value: n },
      latitudinal: { value: !1 },
      dTheta: { value: 0 },
      mipInt: { value: 0 },
      poleAxis: { value: s }
    },
    vertexShader: g2(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`
    ),
    blending: rn,
    depthTest: !1,
    depthWrite: !1
  });
}
function k4() {
  return new l1({
    name: "EquirectangularToCubeUV",
    uniforms: {
      envMap: { value: null }
    },
    vertexShader: g2(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`
    ),
    blending: rn,
    depthTest: !1,
    depthWrite: !1
  });
}
function B4() {
  return new l1({
    name: "CubemapToCubeUV",
    uniforms: {
      envMap: { value: null },
      flipEnvMap: { value: -1 }
    },
    vertexShader: g2(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`
    ),
    blending: rn,
    depthTest: !1,
    depthWrite: !1
  });
}
function g2() {
  return (
    /* glsl */
    `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`
  );
}
function cy(i) {
  let e = /* @__PURE__ */ new WeakMap(), t = null;
  function n(o) {
    if (o && o.isTexture) {
      const c = o.mapping, l = c === is || c === ss, h = c === Yn || c === Zn;
      if (l || h)
        if (o.isRenderTargetTexture && o.needsPMREMUpdate === !0) {
          o.needsPMREMUpdate = !1;
          let d = e.get(o);
          return t === null && (t = new T5(i)), d = l ? t.fromEquirectangular(o, d) : t.fromCubemap(o, d), e.set(o, d), d.texture;
        } else {
          if (e.has(o))
            return e.get(o).texture;
          {
            const d = o.image;
            if (l && d && d.height > 0 || h && d && s(d)) {
              t === null && (t = new T5(i));
              const u = l ? t.fromEquirectangular(o) : t.fromCubemap(o);
              return e.set(o, u), o.addEventListener("dispose", r), u.texture;
            } else
              return null;
          }
        }
    }
    return o;
  }
  function s(o) {
    let c = 0;
    const l = 6;
    for (let h = 0; h < l; h++)
      o[h] !== void 0 && c++;
    return c === l;
  }
  function r(o) {
    const c = o.target;
    c.removeEventListener("dispose", r);
    const l = e.get(c);
    l !== void 0 && (e.delete(c), l.dispose());
  }
  function a() {
    e = /* @__PURE__ */ new WeakMap(), t !== null && (t.dispose(), t = null);
  }
  return {
    get: n,
    dispose: a
  };
}
function hy(i) {
  const e = {};
  function t(n) {
    if (e[n] !== void 0)
      return e[n];
    let s;
    switch (n) {
      case "WEBGL_depth_texture":
        s = i.getExtension("WEBGL_depth_texture") || i.getExtension("MOZ_WEBGL_depth_texture") || i.getExtension("WEBKIT_WEBGL_depth_texture");
        break;
      case "EXT_texture_filter_anisotropic":
        s = i.getExtension("EXT_texture_filter_anisotropic") || i.getExtension("MOZ_EXT_texture_filter_anisotropic") || i.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
        break;
      case "WEBGL_compressed_texture_s3tc":
        s = i.getExtension("WEBGL_compressed_texture_s3tc") || i.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || i.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
        break;
      case "WEBGL_compressed_texture_pvrtc":
        s = i.getExtension("WEBGL_compressed_texture_pvrtc") || i.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
        break;
      default:
        s = i.getExtension(n);
    }
    return e[n] = s, s;
  }
  return {
    has: function(n) {
      return t(n) !== null;
    },
    init: function(n) {
      n.isWebGL2 ? t("EXT_color_buffer_float") : (t("WEBGL_depth_texture"), t("OES_texture_float"), t("OES_texture_half_float"), t("OES_texture_half_float_linear"), t("OES_standard_derivatives"), t("OES_element_index_uint"), t("OES_vertex_array_object"), t("ANGLE_instanced_arrays")), t("OES_texture_float_linear"), t("EXT_color_buffer_half_float"), t("WEBGL_multisampled_render_to_texture");
    },
    get: function(n) {
      const s = t(n);
      return s === null && console.warn("THREE.WebGLRenderer: " + n + " extension not supported."), s;
    }
  };
}
function uy(i, e, t, n) {
  const s = {}, r = /* @__PURE__ */ new WeakMap();
  function a(d) {
    const u = d.target;
    u.index !== null && e.remove(u.index);
    for (const p in u.attributes)
      e.remove(u.attributes[p]);
    u.removeEventListener("dispose", a), delete s[u.id];
    const f = r.get(u);
    f && (e.remove(f), r.delete(u)), n.releaseStatesOfGeometry(u), u.isInstancedBufferGeometry === !0 && delete u._maxInstanceCount, t.memory.geometries--;
  }
  function o(d, u) {
    return s[u.id] === !0 || (u.addEventListener("dispose", a), s[u.id] = !0, t.memory.geometries++), u;
  }
  function c(d) {
    const u = d.attributes;
    for (const p in u)
      e.update(u[p], 34962);
    const f = d.morphAttributes;
    for (const p in f) {
      const _ = f[p];
      for (let g = 0, m = _.length; g < m; g++)
        e.update(_[g], 34962);
    }
  }
  function l(d) {
    const u = [], f = d.index, p = d.attributes.position;
    let _ = 0;
    if (f !== null) {
      const v = f.array;
      _ = f.version;
      for (let y = 0, b = v.length; y < b; y += 3) {
        const w = v[y + 0], x = v[y + 1], S = v[y + 2];
        u.push(w, x, x, S, S, w);
      }
    } else {
      const v = p.array;
      _ = p.version;
      for (let y = 0, b = v.length / 3 - 1; y < b; y += 3) {
        const w = y + 0, x = y + 1, S = y + 2;
        u.push(w, x, x, S, S, w);
      }
    }
    const g = new (gh(u) ? p2 : f2)(u, 1);
    g.version = _;
    const m = r.get(d);
    m && e.remove(m), r.set(d, g);
  }
  function h(d) {
    const u = r.get(d);
    if (u) {
      const f = d.index;
      f !== null && u.version < f.version && l(d);
    } else
      l(d);
    return r.get(d);
  }
  return {
    get: o,
    update: c,
    getWireframeAttribute: h
  };
}
function dy(i, e, t, n) {
  const s = n.isWebGL2;
  let r;
  function a(u) {
    r = u;
  }
  let o, c;
  function l(u) {
    o = u.type, c = u.bytesPerElement;
  }
  function h(u, f) {
    i.drawElements(r, f, o, u * c), t.update(f, r, 1);
  }
  function d(u, f, p) {
    if (p === 0)
      return;
    let _, g;
    if (s)
      _ = i, g = "drawElementsInstanced";
    else if (_ = e.get("ANGLE_instanced_arrays"), g = "drawElementsInstancedANGLE", _ === null) {
      console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
      return;
    }
    _[g](r, f, o, u * c, p), t.update(f, r, p);
  }
  this.setMode = a, this.setIndex = l, this.render = h, this.renderInstances = d;
}
function fy(i) {
  const e = {
    geometries: 0,
    textures: 0
  }, t = {
    frame: 0,
    calls: 0,
    triangles: 0,
    points: 0,
    lines: 0
  };
  function n(r, a, o) {
    switch (t.calls++, a) {
      case 4:
        t.triangles += o * (r / 3);
        break;
      case 1:
        t.lines += o * (r / 2);
        break;
      case 3:
        t.lines += o * (r - 1);
        break;
      case 2:
        t.lines += o * r;
        break;
      case 0:
        t.points += o * r;
        break;
      default:
        console.error("THREE.WebGLInfo: Unknown draw mode:", a);
        break;
    }
  }
  function s() {
    t.frame++, t.calls = 0, t.triangles = 0, t.points = 0, t.lines = 0;
  }
  return {
    memory: e,
    render: t,
    programs: null,
    autoReset: !0,
    reset: s,
    update: n
  };
}
function py(i, e) {
  return i[0] - e[0];
}
function my(i, e) {
  return Math.abs(e[1]) - Math.abs(i[1]);
}
function gy(i, e, t) {
  const n = {}, s = new Float32Array(8), r = /* @__PURE__ */ new WeakMap(), a = new pe(), o = [];
  for (let l = 0; l < 8; l++)
    o[l] = [l, 0];
  function c(l, h, d) {
    const u = l.morphTargetInfluences;
    if (e.isWebGL2 === !0) {
      const f = h.morphAttributes.position || h.morphAttributes.normal || h.morphAttributes.color, p = f !== void 0 ? f.length : 0;
      let _ = r.get(h);
      if (_ === void 0 || _.count !== p) {
        let U = function() {
          z.dispose(), r.delete(h), h.removeEventListener("dispose", U);
        };
        _ !== void 0 && _.texture.dispose();
        const v = h.morphAttributes.position !== void 0, y = h.morphAttributes.normal !== void 0, b = h.morphAttributes.color !== void 0, w = h.morphAttributes.position || [], x = h.morphAttributes.normal || [], S = h.morphAttributes.color || [];
        let T = 0;
        v === !0 && (T = 1), y === !0 && (T = 2), b === !0 && (T = 3);
        let M = h.attributes.position.count * T, A = 1;
        M > e.maxTextureSize && (A = Math.ceil(M / e.maxTextureSize), M = e.maxTextureSize);
        const D = new Float32Array(M * A * 4 * p), z = new Kr(D, M, A, p);
        z.type = P1, z.needsUpdate = !0;
        const O = T * 4;
        for (let V = 0; V < p; V++) {
          const Y = w[V], W = x[V], X = S[V], i0 = M * A * 4 * V;
          for (let a0 = 0; a0 < Y.count; a0++) {
            const x0 = a0 * O;
            v === !0 && (a.fromBufferAttribute(Y, a0), D[i0 + x0 + 0] = a.x, D[i0 + x0 + 1] = a.y, D[i0 + x0 + 2] = a.z, D[i0 + x0 + 3] = 0), y === !0 && (a.fromBufferAttribute(W, a0), D[i0 + x0 + 4] = a.x, D[i0 + x0 + 5] = a.y, D[i0 + x0 + 6] = a.z, D[i0 + x0 + 7] = 0), b === !0 && (a.fromBufferAttribute(X, a0), D[i0 + x0 + 8] = a.x, D[i0 + x0 + 9] = a.y, D[i0 + x0 + 10] = a.z, D[i0 + x0 + 11] = X.itemSize === 4 ? a.w : 1);
          }
        }
        _ = {
          count: p,
          texture: z,
          size: new o0(M, A)
        }, r.set(h, _), h.addEventListener("dispose", U);
      }
      let g = 0;
      for (let v = 0; v < u.length; v++)
        g += u[v];
      const m = h.morphTargetsRelative ? 1 : 1 - g;
      d.getUniforms().setValue(i, "morphTargetBaseInfluence", m), d.getUniforms().setValue(i, "morphTargetInfluences", u), d.getUniforms().setValue(i, "morphTargetsTexture", _.texture, t), d.getUniforms().setValue(i, "morphTargetsTextureSize", _.size);
    } else {
      const f = u === void 0 ? 0 : u.length;
      let p = n[h.id];
      if (p === void 0 || p.length !== f) {
        p = [];
        for (let y = 0; y < f; y++)
          p[y] = [y, 0];
        n[h.id] = p;
      }
      for (let y = 0; y < f; y++) {
        const b = p[y];
        b[0] = y, b[1] = u[y];
      }
      p.sort(my);
      for (let y = 0; y < 8; y++)
        y < f && p[y][1] ? (o[y][0] = p[y][0], o[y][1] = p[y][1]) : (o[y][0] = Number.MAX_SAFE_INTEGER, o[y][1] = 0);
      o.sort(py);
      const _ = h.morphAttributes.position, g = h.morphAttributes.normal;
      let m = 0;
      for (let y = 0; y < 8; y++) {
        const b = o[y], w = b[0], x = b[1];
        w !== Number.MAX_SAFE_INTEGER && x ? (_ && h.getAttribute("morphTarget" + y) !== _[w] && h.setAttribute("morphTarget" + y, _[w]), g && h.getAttribute("morphNormal" + y) !== g[w] && h.setAttribute("morphNormal" + y, g[w]), s[y] = x, m += x) : (_ && h.hasAttribute("morphTarget" + y) === !0 && h.deleteAttribute("morphTarget" + y), g && h.hasAttribute("morphNormal" + y) === !0 && h.deleteAttribute("morphNormal" + y), s[y] = 0);
      }
      const v = h.morphTargetsRelative ? 1 : 1 - m;
      d.getUniforms().setValue(i, "morphTargetBaseInfluence", v), d.getUniforms().setValue(i, "morphTargetInfluences", s);
    }
  }
  return {
    update: c
  };
}
function _y(i, e, t, n) {
  let s = /* @__PURE__ */ new WeakMap();
  function r(c) {
    const l = n.render.frame, h = c.geometry, d = e.get(c, h);
    return s.get(d) !== l && (e.update(d), s.set(d, l)), c.isInstancedMesh && (c.hasEventListener("dispose", o) === !1 && c.addEventListener("dispose", o), t.update(c.instanceMatrix, 34962), c.instanceColor !== null && t.update(c.instanceColor, 34962)), d;
  }
  function a() {
    s = /* @__PURE__ */ new WeakMap();
  }
  function o(c) {
    const l = c.target;
    l.removeEventListener("dispose", o), t.remove(l.instanceMatrix), l.instanceColor !== null && t.remove(l.instanceColor);
  }
  return {
    update: r,
    dispose: a
  };
}
const wh = /* @__PURE__ */ new Be(), Mh = /* @__PURE__ */ new Kr(), Sh = /* @__PURE__ */ new Qr(), Eh = /* @__PURE__ */ new Ps(), V4 = [], H4 = [], G4 = new Float32Array(16), W4 = new Float32Array(9), X4 = new Float32Array(4);
function n8(i, e, t) {
  const n = i[0];
  if (n <= 0 || n > 0)
    return i;
  const s = e * t;
  let r = V4[s];
  if (r === void 0 && (r = new Float32Array(s), V4[s] = r), e !== 0) {
    n.toArray(r, 0);
    for (let a = 1, o = 0; a !== e; ++a)
      o += t, i[a].toArray(r, o);
  }
  return r;
}
function Ye(i, e) {
  if (i.length !== e.length)
    return !1;
  for (let t = 0, n = i.length; t < n; t++)
    if (i[t] !== e[t])
      return !1;
  return !0;
}
function Ze(i, e) {
  for (let t = 0, n = e.length; t < n; t++)
    i[t] = e[t];
}
function s6(i, e) {
  let t = H4[e];
  t === void 0 && (t = new Int32Array(e), H4[e] = t);
  for (let n = 0; n !== e; ++n)
    t[n] = i.allocateTextureUnit();
  return t;
}
function vy(i, e) {
  const t = this.cache;
  t[0] !== e && (i.uniform1f(this.addr, e), t[0] = e);
}
function yy(i, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y) && (i.uniform2f(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
  else {
    if (Ye(t, e))
      return;
    i.uniform2fv(this.addr, e), Ze(t, e);
  }
}
function xy(i, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (i.uniform3f(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
  else if (e.r !== void 0)
    (t[0] !== e.r || t[1] !== e.g || t[2] !== e.b) && (i.uniform3f(this.addr, e.r, e.g, e.b), t[0] = e.r, t[1] = e.g, t[2] = e.b);
  else {
    if (Ye(t, e))
      return;
    i.uniform3fv(this.addr, e), Ze(t, e);
  }
}
function by(i, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (i.uniform4f(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
  else {
    if (Ye(t, e))
      return;
    i.uniform4fv(this.addr, e), Ze(t, e);
  }
}
function wy(i, e) {
  const t = this.cache, n = e.elements;
  if (n === void 0) {
    if (Ye(t, e))
      return;
    i.uniformMatrix2fv(this.addr, !1, e), Ze(t, e);
  } else {
    if (Ye(t, n))
      return;
    X4.set(n), i.uniformMatrix2fv(this.addr, !1, X4), Ze(t, n);
  }
}
function My(i, e) {
  const t = this.cache, n = e.elements;
  if (n === void 0) {
    if (Ye(t, e))
      return;
    i.uniformMatrix3fv(this.addr, !1, e), Ze(t, e);
  } else {
    if (Ye(t, n))
      return;
    W4.set(n), i.uniformMatrix3fv(this.addr, !1, W4), Ze(t, n);
  }
}
function Sy(i, e) {
  const t = this.cache, n = e.elements;
  if (n === void 0) {
    if (Ye(t, e))
      return;
    i.uniformMatrix4fv(this.addr, !1, e), Ze(t, e);
  } else {
    if (Ye(t, n))
      return;
    G4.set(n), i.uniformMatrix4fv(this.addr, !1, G4), Ze(t, n);
  }
}
function Ey(i, e) {
  const t = this.cache;
  t[0] !== e && (i.uniform1i(this.addr, e), t[0] = e);
}
function Ty(i, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y) && (i.uniform2i(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
  else {
    if (Ye(t, e))
      return;
    i.uniform2iv(this.addr, e), Ze(t, e);
  }
}
function Ay(i, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (i.uniform3i(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
  else {
    if (Ye(t, e))
      return;
    i.uniform3iv(this.addr, e), Ze(t, e);
  }
}
function Cy(i, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (i.uniform4i(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
  else {
    if (Ye(t, e))
      return;
    i.uniform4iv(this.addr, e), Ze(t, e);
  }
}
function Iy(i, e) {
  const t = this.cache;
  t[0] !== e && (i.uniform1ui(this.addr, e), t[0] = e);
}
function Ly(i, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y) && (i.uniform2ui(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
  else {
    if (Ye(t, e))
      return;
    i.uniform2uiv(this.addr, e), Ze(t, e);
  }
}
function Ry(i, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (i.uniform3ui(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
  else {
    if (Ye(t, e))
      return;
    i.uniform3uiv(this.addr, e), Ze(t, e);
  }
}
function Py(i, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (i.uniform4ui(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
  else {
    if (Ye(t, e))
      return;
    i.uniform4uiv(this.addr, e), Ze(t, e);
  }
}
function Dy(i, e, t) {
  const n = this.cache, s = t.allocateTextureUnit();
  n[0] !== s && (i.uniform1i(this.addr, s), n[0] = s), t.setTexture2D(e || wh, s);
}
function Ny(i, e, t) {
  const n = this.cache, s = t.allocateTextureUnit();
  n[0] !== s && (i.uniform1i(this.addr, s), n[0] = s), t.setTexture3D(e || Sh, s);
}
function Oy(i, e, t) {
  const n = this.cache, s = t.allocateTextureUnit();
  n[0] !== s && (i.uniform1i(this.addr, s), n[0] = s), t.setTextureCube(e || Eh, s);
}
function Uy(i, e, t) {
  const n = this.cache, s = t.allocateTextureUnit();
  n[0] !== s && (i.uniform1i(this.addr, s), n[0] = s), t.setTexture2DArray(e || Mh, s);
}
function Fy(i) {
  switch (i) {
    case 5126:
      return vy;
    case 35664:
      return yy;
    case 35665:
      return xy;
    case 35666:
      return by;
    case 35674:
      return wy;
    case 35675:
      return My;
    case 35676:
      return Sy;
    case 5124:
    case 35670:
      return Ey;
    case 35667:
    case 35671:
      return Ty;
    case 35668:
    case 35672:
      return Ay;
    case 35669:
    case 35673:
      return Cy;
    case 5125:
      return Iy;
    case 36294:
      return Ly;
    case 36295:
      return Ry;
    case 36296:
      return Py;
    case 35678:
    case 36198:
    case 36298:
    case 36306:
    case 35682:
      return Dy;
    case 35679:
    case 36299:
    case 36307:
      return Ny;
    case 35680:
    case 36300:
    case 36308:
    case 36293:
      return Oy;
    case 36289:
    case 36303:
    case 36311:
    case 36292:
      return Uy;
  }
}
function zy(i, e) {
  i.uniform1fv(this.addr, e);
}
function ky(i, e) {
  const t = n8(e, this.size, 2);
  i.uniform2fv(this.addr, t);
}
function By(i, e) {
  const t = n8(e, this.size, 3);
  i.uniform3fv(this.addr, t);
}
function Vy(i, e) {
  const t = n8(e, this.size, 4);
  i.uniform4fv(this.addr, t);
}
function Hy(i, e) {
  const t = n8(e, this.size, 4);
  i.uniformMatrix2fv(this.addr, !1, t);
}
function Gy(i, e) {
  const t = n8(e, this.size, 9);
  i.uniformMatrix3fv(this.addr, !1, t);
}
function Wy(i, e) {
  const t = n8(e, this.size, 16);
  i.uniformMatrix4fv(this.addr, !1, t);
}
function Xy(i, e) {
  i.uniform1iv(this.addr, e);
}
function Yy(i, e) {
  i.uniform2iv(this.addr, e);
}
function Zy(i, e) {
  i.uniform3iv(this.addr, e);
}
function qy(i, e) {
  i.uniform4iv(this.addr, e);
}
function $y(i, e) {
  i.uniform1uiv(this.addr, e);
}
function jy(i, e) {
  i.uniform2uiv(this.addr, e);
}
function Jy(i, e) {
  i.uniform3uiv(this.addr, e);
}
function Ky(i, e) {
  i.uniform4uiv(this.addr, e);
}
function Qy(i, e, t) {
  const n = this.cache, s = e.length, r = s6(t, s);
  Ye(n, r) || (i.uniform1iv(this.addr, r), Ze(n, r));
  for (let a = 0; a !== s; ++a)
    t.setTexture2D(e[a] || wh, r[a]);
}
function ex(i, e, t) {
  const n = this.cache, s = e.length, r = s6(t, s);
  Ye(n, r) || (i.uniform1iv(this.addr, r), Ze(n, r));
  for (let a = 0; a !== s; ++a)
    t.setTexture3D(e[a] || Sh, r[a]);
}
function tx(i, e, t) {
  const n = this.cache, s = e.length, r = s6(t, s);
  Ye(n, r) || (i.uniform1iv(this.addr, r), Ze(n, r));
  for (let a = 0; a !== s; ++a)
    t.setTextureCube(e[a] || Eh, r[a]);
}
function nx(i, e, t) {
  const n = this.cache, s = e.length, r = s6(t, s);
  Ye(n, r) || (i.uniform1iv(this.addr, r), Ze(n, r));
  for (let a = 0; a !== s; ++a)
    t.setTexture2DArray(e[a] || Mh, r[a]);
}
function ix(i) {
  switch (i) {
    case 5126:
      return zy;
    case 35664:
      return ky;
    case 35665:
      return By;
    case 35666:
      return Vy;
    case 35674:
      return Hy;
    case 35675:
      return Gy;
    case 35676:
      return Wy;
    case 5124:
    case 35670:
      return Xy;
    case 35667:
    case 35671:
      return Yy;
    case 35668:
    case 35672:
      return Zy;
    case 35669:
    case 35673:
      return qy;
    case 5125:
      return $y;
    case 36294:
      return jy;
    case 36295:
      return Jy;
    case 36296:
      return Ky;
    case 35678:
    case 36198:
    case 36298:
    case 36306:
    case 35682:
      return Qy;
    case 35679:
    case 36299:
    case 36307:
      return ex;
    case 35680:
    case 36300:
    case 36308:
    case 36293:
      return tx;
    case 36289:
    case 36303:
    case 36311:
    case 36292:
      return nx;
  }
}
class sx {
  constructor(e, t, n) {
    this.id = e, this.addr = n, this.cache = [], this.setValue = Fy(t.type);
  }
}
class rx {
  constructor(e, t, n) {
    this.id = e, this.addr = n, this.cache = [], this.size = t.size, this.setValue = ix(t.type);
  }
}
class ax {
  constructor(e) {
    this.id = e, this.seq = [], this.map = {};
  }
  setValue(e, t, n) {
    const s = this.seq;
    for (let r = 0, a = s.length; r !== a; ++r) {
      const o = s[r];
      o.setValue(e, t[o.id], n);
    }
  }
}
const Y6 = /(\w+)(\])?(\[|\.)?/g;
function Y4(i, e) {
  i.seq.push(e), i.map[e.id] = e;
}
function ox(i, e, t) {
  const n = i.name, s = n.length;
  for (Y6.lastIndex = 0; ; ) {
    const r = Y6.exec(n), a = Y6.lastIndex;
    let o = r[1];
    const c = r[2] === "]", l = r[3];
    if (c && (o = o | 0), l === void 0 || l === "[" && a + 2 === s) {
      Y4(t, l === void 0 ? new sx(o, i, e) : new rx(o, i, e));
      break;
    } else {
      let d = t.map[o];
      d === void 0 && (d = new ax(o), Y4(t, d)), t = d;
    }
  }
}
class yr {
  constructor(e, t) {
    this.seq = [], this.map = {};
    const n = e.getProgramParameter(t, 35718);
    for (let s = 0; s < n; ++s) {
      const r = e.getActiveUniform(t, s), a = e.getUniformLocation(t, r.name);
      ox(r, a, this);
    }
  }
  setValue(e, t, n, s) {
    const r = this.map[t];
    r !== void 0 && r.setValue(e, n, s);
  }
  setOptional(e, t, n) {
    const s = t[n];
    s !== void 0 && this.setValue(e, n, s);
  }
  static upload(e, t, n, s) {
    for (let r = 0, a = t.length; r !== a; ++r) {
      const o = t[r], c = n[o.id];
      c.needsUpdate !== !1 && o.setValue(e, c.value, s);
    }
  }
  static seqWithValue(e, t) {
    const n = [];
    for (let s = 0, r = e.length; s !== r; ++s) {
      const a = e[s];
      a.id in t && n.push(a);
    }
    return n;
  }
}
function Z4(i, e, t) {
  const n = i.createShader(e);
  return i.shaderSource(n, t), i.compileShader(n), n;
}
let lx = 0;
function cx(i, e) {
  const t = i.split(`
`), n = [], s = Math.max(e - 6, 0), r = Math.min(e + 6, t.length);
  for (let a = s; a < r; a++) {
    const o = a + 1;
    n.push(`${o === e ? ">" : " "} ${o}: ${t[a]}`);
  }
  return n.join(`
`);
}
function hx(i) {
  switch (i) {
    case jn:
      return ["Linear", "( value )"];
    case ve:
      return ["sRGB", "( value )"];
    default:
      return console.warn("THREE.WebGLProgram: Unsupported encoding:", i), ["Linear", "( value )"];
  }
}
function q4(i, e, t) {
  const n = i.getShaderParameter(e, 35713), s = i.getShaderInfoLog(e).trim();
  if (n && s === "")
    return "";
  const r = /ERROR: 0:(\d+)/.exec(s);
  if (r) {
    const a = parseInt(r[1]);
    return t.toUpperCase() + `

` + s + `

` + cx(i.getShaderSource(e), a);
  } else
    return s;
}
function ux(i, e) {
  const t = hx(e);
  return "vec4 " + i + "( vec4 value ) { return LinearTo" + t[0] + t[1] + "; }";
}
function dx(i, e) {
  let t;
  switch (e) {
    case Bc:
      t = "Linear";
      break;
    case Vc:
      t = "Reinhard";
      break;
    case Hc:
      t = "OptimizedCineon";
      break;
    case Gc:
      t = "ACESFilmic";
      break;
    case Wc:
      t = "Custom";
      break;
    default:
      console.warn("THREE.WebGLProgram: Unsupported toneMapping:", e), t = "Linear";
  }
  return "vec3 " + i + "( vec3 color ) { return " + t + "ToneMapping( color ); }";
}
function fx(i) {
  return [
    i.extensionDerivatives || i.envMapCubeUVHeight || i.bumpMap || i.normalMapTangentSpace || i.clearcoatNormalMap || i.flatShading || i.shaderID === "physical" ? "#extension GL_OES_standard_derivatives : enable" : "",
    (i.extensionFragDepth || i.logarithmicDepthBuffer) && i.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "",
    i.extensionDrawBuffers && i.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "",
    (i.extensionShaderTextureLOD || i.envMap || i.transmission) && i.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""
  ].filter(O8).join(`
`);
}
function px(i) {
  const e = [];
  for (const t in i) {
    const n = i[t];
    n !== !1 && e.push("#define " + t + " " + n);
  }
  return e.join(`
`);
}
function mx(i, e) {
  const t = {}, n = i.getProgramParameter(e, 35721);
  for (let s = 0; s < n; s++) {
    const r = i.getActiveAttrib(e, s), a = r.name;
    let o = 1;
    r.type === 35674 && (o = 2), r.type === 35675 && (o = 3), r.type === 35676 && (o = 4), t[a] = {
      type: r.type,
      location: i.getAttribLocation(e, a),
      locationSize: o
    };
  }
  return t;
}
function O8(i) {
  return i !== "";
}
function $4(i, e) {
  const t = e.numSpotLightShadows + e.numSpotLightMaps - e.numSpotLightShadowsWithMaps;
  return i.replace(/NUM_DIR_LIGHTS/g, e.numDirLights).replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, t).replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, e.numPointLights).replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows);
}
function j4(i, e) {
  return i.replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection);
}
const gx = /^[ \t]*#include +<([\w\d./]+)>/gm;
function A5(i) {
  return i.replace(gx, _x);
}
function _x(i, e) {
  const t = Y0[e];
  if (t === void 0)
    throw new Error("Can not resolve #include <" + e + ">");
  return A5(t);
}
const vx = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function J4(i) {
  return i.replace(vx, yx);
}
function yx(i, e, t, n) {
  let s = "";
  for (let r = parseInt(e); r < parseInt(t); r++)
    s += n.replace(/\[\s*i\s*\]/g, "[ " + r + " ]").replace(/UNROLLED_LOOP_INDEX/g, r);
  return s;
}
function K4(i) {
  let e = "precision " + i.precision + ` float;
precision ` + i.precision + " int;";
  return i.precision === "highp" ? e += `
#define HIGH_PRECISION` : i.precision === "mediump" ? e += `
#define MEDIUM_PRECISION` : i.precision === "lowp" && (e += `
#define LOW_PRECISION`), e;
}
function xx(i) {
  let e = "SHADOWMAP_TYPE_BASIC";
  return i.shadowMapType === i2 ? e = "SHADOWMAP_TYPE_PCF" : i.shadowMapType === vc ? e = "SHADOWMAP_TYPE_PCF_SOFT" : i.shadowMapType === P9 && (e = "SHADOWMAP_TYPE_VSM"), e;
}
function bx(i) {
  let e = "ENVMAP_TYPE_CUBE";
  if (i.envMap)
    switch (i.envMapMode) {
      case Yn:
      case Zn:
        e = "ENVMAP_TYPE_CUBE";
        break;
      case e8:
        e = "ENVMAP_TYPE_CUBE_UV";
        break;
    }
  return e;
}
function wx(i) {
  let e = "ENVMAP_MODE_REFLECTION";
  if (i.envMap)
    switch (i.envMapMode) {
      case Zn:
        e = "ENVMAP_MODE_REFRACTION";
        break;
    }
  return e;
}
function Mx(i) {
  let e = "ENVMAP_BLENDING_NONE";
  if (i.envMap)
    switch (i.combine) {
      case Ls:
        e = "ENVMAP_BLENDING_MULTIPLY";
        break;
      case zc:
        e = "ENVMAP_BLENDING_MIX";
        break;
      case kc:
        e = "ENVMAP_BLENDING_ADD";
        break;
    }
  return e;
}
function Sx(i) {
  const e = i.envMapCubeUVHeight;
  if (e === null)
    return null;
  const t = Math.log2(e) - 2, n = 1 / e;
  return { texelWidth: 1 / (3 * Math.max(Math.pow(2, t), 7 * 16)), texelHeight: n, maxMip: t };
}
function Ex(i, e, t, n) {
  const s = i.getContext(), r = t.defines;
  let a = t.vertexShader, o = t.fragmentShader;
  const c = xx(t), l = bx(t), h = wx(t), d = Mx(t), u = Sx(t), f = t.isWebGL2 ? "" : fx(t), p = px(r), _ = s.createProgram();
  let g, m, v = t.glslVersion ? "#version " + t.glslVersion + `
` : "";
  t.isRawShaderMaterial ? (g = [
    p
  ].filter(O8).join(`
`), g.length > 0 && (g += `
`), m = [
    f,
    p
  ].filter(O8).join(`
`), m.length > 0 && (m += `
`)) : (g = [
    K4(t),
    "#define SHADER_NAME " + t.shaderName,
    p,
    t.instancing ? "#define USE_INSTANCING" : "",
    t.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
    t.useFog && t.fog ? "#define USE_FOG" : "",
    t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
    t.map ? "#define USE_MAP" : "",
    t.envMap ? "#define USE_ENVMAP" : "",
    t.envMap ? "#define " + h : "",
    t.lightMap ? "#define USE_LIGHTMAP" : "",
    t.aoMap ? "#define USE_AOMAP" : "",
    t.bumpMap ? "#define USE_BUMPMAP" : "",
    t.normalMap ? "#define USE_NORMALMAP" : "",
    t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
    t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
    t.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
    t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
    t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
    t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
    t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
    t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
    t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
    t.specularMap ? "#define USE_SPECULARMAP" : "",
    t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
    t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
    t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
    t.metalnessMap ? "#define USE_METALNESSMAP" : "",
    t.alphaMap ? "#define USE_ALPHAMAP" : "",
    t.transmission ? "#define USE_TRANSMISSION" : "",
    t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
    t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
    t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
    t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
    //
    t.mapUv ? "#define MAP_UV " + t.mapUv : "",
    t.alphaMapUv ? "#define ALPHAMAP_UV " + t.alphaMapUv : "",
    t.lightMapUv ? "#define LIGHTMAP_UV " + t.lightMapUv : "",
    t.aoMapUv ? "#define AOMAP_UV " + t.aoMapUv : "",
    t.emissiveMapUv ? "#define EMISSIVEMAP_UV " + t.emissiveMapUv : "",
    t.bumpMapUv ? "#define BUMPMAP_UV " + t.bumpMapUv : "",
    t.normalMapUv ? "#define NORMALMAP_UV " + t.normalMapUv : "",
    t.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + t.displacementMapUv : "",
    t.metalnessMapUv ? "#define METALNESSMAP_UV " + t.metalnessMapUv : "",
    t.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + t.roughnessMapUv : "",
    t.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + t.clearcoatMapUv : "",
    t.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + t.clearcoatNormalMapUv : "",
    t.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + t.clearcoatRoughnessMapUv : "",
    t.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + t.iridescenceMapUv : "",
    t.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + t.iridescenceThicknessMapUv : "",
    t.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + t.sheenColorMapUv : "",
    t.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + t.sheenRoughnessMapUv : "",
    t.specularMapUv ? "#define SPECULARMAP_UV " + t.specularMapUv : "",
    t.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + t.specularColorMapUv : "",
    t.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + t.specularIntensityMapUv : "",
    t.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + t.transmissionMapUv : "",
    t.thicknessMapUv ? "#define THICKNESSMAP_UV " + t.thicknessMapUv : "",
    //
    t.vertexTangents ? "#define USE_TANGENT" : "",
    t.vertexColors ? "#define USE_COLOR" : "",
    t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
    t.vertexUvs2 ? "#define USE_UV2" : "",
    t.pointsUvs ? "#define USE_POINTS_UV" : "",
    t.flatShading ? "#define FLAT_SHADED" : "",
    t.skinning ? "#define USE_SKINNING" : "",
    t.morphTargets ? "#define USE_MORPHTARGETS" : "",
    t.morphNormals && t.flatShading === !1 ? "#define USE_MORPHNORMALS" : "",
    t.morphColors && t.isWebGL2 ? "#define USE_MORPHCOLORS" : "",
    t.morphTargetsCount > 0 && t.isWebGL2 ? "#define MORPHTARGETS_TEXTURE" : "",
    t.morphTargetsCount > 0 && t.isWebGL2 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + t.morphTextureStride : "",
    t.morphTargetsCount > 0 && t.isWebGL2 ? "#define MORPHTARGETS_COUNT " + t.morphTargetsCount : "",
    t.doubleSided ? "#define DOUBLE_SIDED" : "",
    t.flipSided ? "#define FLIP_SIDED" : "",
    t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
    t.shadowMapEnabled ? "#define " + c : "",
    t.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
    t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
    t.logarithmicDepthBuffer && t.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
    "uniform mat4 modelMatrix;",
    "uniform mat4 modelViewMatrix;",
    "uniform mat4 projectionMatrix;",
    "uniform mat4 viewMatrix;",
    "uniform mat3 normalMatrix;",
    "uniform vec3 cameraPosition;",
    "uniform bool isOrthographic;",
    "#ifdef USE_INSTANCING",
    "	attribute mat4 instanceMatrix;",
    "#endif",
    "#ifdef USE_INSTANCING_COLOR",
    "	attribute vec3 instanceColor;",
    "#endif",
    "attribute vec3 position;",
    "attribute vec3 normal;",
    "attribute vec2 uv;",
    "#ifdef USE_TANGENT",
    "	attribute vec4 tangent;",
    "#endif",
    "#if defined( USE_COLOR_ALPHA )",
    "	attribute vec4 color;",
    "#elif defined( USE_COLOR )",
    "	attribute vec3 color;",
    "#endif",
    "#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )",
    "	attribute vec3 morphTarget0;",
    "	attribute vec3 morphTarget1;",
    "	attribute vec3 morphTarget2;",
    "	attribute vec3 morphTarget3;",
    "	#ifdef USE_MORPHNORMALS",
    "		attribute vec3 morphNormal0;",
    "		attribute vec3 morphNormal1;",
    "		attribute vec3 morphNormal2;",
    "		attribute vec3 morphNormal3;",
    "	#else",
    "		attribute vec3 morphTarget4;",
    "		attribute vec3 morphTarget5;",
    "		attribute vec3 morphTarget6;",
    "		attribute vec3 morphTarget7;",
    "	#endif",
    "#endif",
    "#ifdef USE_SKINNING",
    "	attribute vec4 skinIndex;",
    "	attribute vec4 skinWeight;",
    "#endif",
    `
`
  ].filter(O8).join(`
`), m = [
    f,
    K4(t),
    "#define SHADER_NAME " + t.shaderName,
    p,
    t.useFog && t.fog ? "#define USE_FOG" : "",
    t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
    t.map ? "#define USE_MAP" : "",
    t.matcap ? "#define USE_MATCAP" : "",
    t.envMap ? "#define USE_ENVMAP" : "",
    t.envMap ? "#define " + l : "",
    t.envMap ? "#define " + h : "",
    t.envMap ? "#define " + d : "",
    u ? "#define CUBEUV_TEXEL_WIDTH " + u.texelWidth : "",
    u ? "#define CUBEUV_TEXEL_HEIGHT " + u.texelHeight : "",
    u ? "#define CUBEUV_MAX_MIP " + u.maxMip + ".0" : "",
    t.lightMap ? "#define USE_LIGHTMAP" : "",
    t.aoMap ? "#define USE_AOMAP" : "",
    t.bumpMap ? "#define USE_BUMPMAP" : "",
    t.normalMap ? "#define USE_NORMALMAP" : "",
    t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
    t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
    t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
    t.clearcoat ? "#define USE_CLEARCOAT" : "",
    t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
    t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
    t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
    t.iridescence ? "#define USE_IRIDESCENCE" : "",
    t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
    t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
    t.specularMap ? "#define USE_SPECULARMAP" : "",
    t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
    t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
    t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
    t.metalnessMap ? "#define USE_METALNESSMAP" : "",
    t.alphaMap ? "#define USE_ALPHAMAP" : "",
    t.alphaTest ? "#define USE_ALPHATEST" : "",
    t.sheen ? "#define USE_SHEEN" : "",
    t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
    t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
    t.transmission ? "#define USE_TRANSMISSION" : "",
    t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
    t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
    t.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
    t.vertexTangents ? "#define USE_TANGENT" : "",
    t.vertexColors || t.instancingColor ? "#define USE_COLOR" : "",
    t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
    t.vertexUvs2 ? "#define USE_UV2" : "",
    t.pointsUvs ? "#define USE_POINTS_UV" : "",
    t.gradientMap ? "#define USE_GRADIENTMAP" : "",
    t.flatShading ? "#define FLAT_SHADED" : "",
    t.doubleSided ? "#define DOUBLE_SIDED" : "",
    t.flipSided ? "#define FLIP_SIDED" : "",
    t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
    t.shadowMapEnabled ? "#define " + c : "",
    t.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
    t.useLegacyLights ? "#define LEGACY_LIGHTS" : "",
    t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
    t.logarithmicDepthBuffer && t.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
    "uniform mat4 viewMatrix;",
    "uniform vec3 cameraPosition;",
    "uniform bool isOrthographic;",
    t.toneMapping !== D1 ? "#define TONE_MAPPING" : "",
    t.toneMapping !== D1 ? Y0.tonemapping_pars_fragment : "",
    // this code is required here because it is used by the toneMapping() function defined below
    t.toneMapping !== D1 ? dx("toneMapping", t.toneMapping) : "",
    t.dithering ? "#define DITHERING" : "",
    t.opaque ? "#define OPAQUE" : "",
    Y0.encodings_pars_fragment,
    // this code is required here because it is used by the various encoding/decoding function defined below
    ux("linearToOutputTexel", t.outputEncoding),
    t.useDepthPacking ? "#define DEPTH_PACKING " + t.depthPacking : "",
    `
`
  ].filter(O8).join(`
`)), a = A5(a), a = $4(a, t), a = j4(a, t), o = A5(o), o = $4(o, t), o = j4(o, t), a = J4(a), o = J4(o), t.isWebGL2 && t.isRawShaderMaterial !== !0 && (v = `#version 300 es
`, g = [
    "precision mediump sampler2DArray;",
    "#define attribute in",
    "#define varying out",
    "#define texture2D texture"
  ].join(`
`) + `
` + g, m = [
    "#define varying in",
    t.glslVersion === S5 ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
    t.glslVersion === S5 ? "" : "#define gl_FragColor pc_fragColor",
    "#define gl_FragDepthEXT gl_FragDepth",
    "#define texture2D texture",
    "#define textureCube texture",
    "#define texture2DProj textureProj",
    "#define texture2DLodEXT textureLod",
    "#define texture2DProjLodEXT textureProjLod",
    "#define textureCubeLodEXT textureLod",
    "#define texture2DGradEXT textureGrad",
    "#define texture2DProjGradEXT textureProjGrad",
    "#define textureCubeGradEXT textureGrad"
  ].join(`
`) + `
` + m);
  const y = v + g + a, b = v + m + o, w = Z4(s, 35633, y), x = Z4(s, 35632, b);
  if (s.attachShader(_, w), s.attachShader(_, x), t.index0AttributeName !== void 0 ? s.bindAttribLocation(_, 0, t.index0AttributeName) : t.morphTargets === !0 && s.bindAttribLocation(_, 0, "position"), s.linkProgram(_), i.debug.checkShaderErrors) {
    const M = s.getProgramInfoLog(_).trim(), A = s.getShaderInfoLog(w).trim(), D = s.getShaderInfoLog(x).trim();
    let z = !0, O = !0;
    if (s.getProgramParameter(_, 35714) === !1)
      if (z = !1, typeof i.debug.onShaderError == "function")
        i.debug.onShaderError(s, _, w, x);
      else {
        const U = q4(s, w, "vertex"), V = q4(s, x, "fragment");
        console.error(
          "THREE.WebGLProgram: Shader Error " + s.getError() + " - VALIDATE_STATUS " + s.getProgramParameter(_, 35715) + `

Program Info Log: ` + M + `
` + U + `
` + V
        );
      }
    else
      M !== "" ? console.warn("THREE.WebGLProgram: Program Info Log:", M) : (A === "" || D === "") && (O = !1);
    O && (this.diagnostics = {
      runnable: z,
      programLog: M,
      vertexShader: {
        log: A,
        prefix: g
      },
      fragmentShader: {
        log: D,
        prefix: m
      }
    });
  }
  s.deleteShader(w), s.deleteShader(x);
  let S;
  this.getUniforms = function() {
    return S === void 0 && (S = new yr(s, _)), S;
  };
  let T;
  return this.getAttributes = function() {
    return T === void 0 && (T = mx(s, _)), T;
  }, this.destroy = function() {
    n.releaseStatesOfProgram(this), s.deleteProgram(_), this.program = void 0;
  }, this.name = t.shaderName, this.id = lx++, this.cacheKey = e, this.usedTimes = 1, this.program = _, this.vertexShader = w, this.fragmentShader = x, this;
}
let Tx = 0;
class Ax {
  constructor() {
    this.shaderCache = /* @__PURE__ */ new Map(), this.materialCache = /* @__PURE__ */ new Map();
  }
  update(e) {
    const t = e.vertexShader, n = e.fragmentShader, s = this._getShaderStage(t), r = this._getShaderStage(n), a = this._getShaderCacheForMaterial(e);
    return a.has(s) === !1 && (a.add(s), s.usedTimes++), a.has(r) === !1 && (a.add(r), r.usedTimes++), this;
  }
  remove(e) {
    const t = this.materialCache.get(e);
    for (const n of t)
      n.usedTimes--, n.usedTimes === 0 && this.shaderCache.delete(n.code);
    return this.materialCache.delete(e), this;
  }
  getVertexShaderID(e) {
    return this._getShaderStage(e.vertexShader).id;
  }
  getFragmentShaderID(e) {
    return this._getShaderStage(e.fragmentShader).id;
  }
  dispose() {
    this.shaderCache.clear(), this.materialCache.clear();
  }
  _getShaderCacheForMaterial(e) {
    const t = this.materialCache;
    let n = t.get(e);
    return n === void 0 && (n = /* @__PURE__ */ new Set(), t.set(e, n)), n;
  }
  _getShaderStage(e) {
    const t = this.shaderCache;
    let n = t.get(e);
    return n === void 0 && (n = new Cx(e), t.set(e, n)), n;
  }
}
class Cx {
  constructor(e) {
    this.id = Tx++, this.code = e, this.usedTimes = 0;
  }
}
function Ix(i, e, t, n, s, r, a) {
  const o = new e6(), c = new Ax(), l = [], h = s.isWebGL2, d = s.logarithmicDepthBuffer, u = s.vertexTextures;
  let f = s.precision;
  const p = {
    MeshDepthMaterial: "depth",
    MeshDistanceMaterial: "distanceRGBA",
    MeshNormalMaterial: "normal",
    MeshBasicMaterial: "basic",
    MeshLambertMaterial: "lambert",
    MeshPhongMaterial: "phong",
    MeshToonMaterial: "toon",
    MeshStandardMaterial: "physical",
    MeshPhysicalMaterial: "physical",
    MeshMatcapMaterial: "matcap",
    LineBasicMaterial: "basic",
    LineDashedMaterial: "dashed",
    PointsMaterial: "points",
    ShadowMaterial: "shadow",
    SpriteMaterial: "sprite"
  };
  function _(M) {
    return M === 1 ? "uv2" : "uv";
  }
  function g(M, A, D, z, O) {
    const U = z.fog, V = O.geometry, Y = M.isMeshStandardMaterial ? z.environment : null, W = (M.isMeshStandardMaterial ? t : e).get(M.envMap || Y), X = W && W.mapping === e8 ? W.image.height : null, i0 = p[M.type];
    M.precision !== null && (f = s.getMaxPrecision(M.precision), f !== M.precision && console.warn("THREE.WebGLProgram.getParameters:", M.precision, "not supported, using", f, "instead."));
    const a0 = V.morphAttributes.position || V.morphAttributes.normal || V.morphAttributes.color, x0 = a0 !== void 0 ? a0.length : 0;
    let u0 = 0;
    V.morphAttributes.position !== void 0 && (u0 = 1), V.morphAttributes.normal !== void 0 && (u0 = 2), V.morphAttributes.color !== void 0 && (u0 = 3);
    let E, F, R, j;
    if (i0) {
      const E0 = s1[i0];
      E = E0.vertexShader, F = E0.fragmentShader;
    } else
      E = M.vertexShader, F = M.fragmentShader, c.update(M), R = c.getVertexShaderID(M), j = c.getFragmentShaderID(M);
    const B = i.getRenderTarget(), m0 = O.isInstancedMesh === !0, b0 = !!M.map, e0 = !!M.matcap, M0 = !!W, r0 = !!M.aoMap, Z = !!M.lightMap, n0 = !!M.bumpMap, S0 = !!M.normalMap, p0 = !!M.displacementMap, P0 = !!M.emissiveMap, D0 = !!M.metalnessMap, N0 = !!M.roughnessMap, j0 = M.clearcoat > 0, ce = M.iridescence > 0, N = M.sheen > 0, L = M.transmission > 0, q = j0 && !!M.clearcoatMap, l0 = j0 && !!M.clearcoatNormalMap, h0 = j0 && !!M.clearcoatRoughnessMap, w0 = ce && !!M.iridescenceMap, B0 = ce && !!M.iridescenceThicknessMap, T0 = N && !!M.sheenColorMap, Q = N && !!M.sheenRoughnessMap, C0 = !!M.specularMap, O0 = !!M.specularColorMap, z0 = !!M.specularIntensityMap, A0 = L && !!M.transmissionMap, I0 = L && !!M.thicknessMap, se = !!M.gradientMap, me = !!M.alphaMap, Oe = M.alphaTest > 0, k = !!M.extensions, K = !!V.attributes.uv2;
    return {
      isWebGL2: h,
      shaderID: i0,
      shaderName: M.type,
      vertexShader: E,
      fragmentShader: F,
      defines: M.defines,
      customVertexShaderID: R,
      customFragmentShaderID: j,
      isRawShaderMaterial: M.isRawShaderMaterial === !0,
      glslVersion: M.glslVersion,
      precision: f,
      instancing: m0,
      instancingColor: m0 && O.instanceColor !== null,
      supportsVertexTextures: u,
      outputEncoding: B === null ? i.outputEncoding : B.isXRRenderTarget === !0 ? B.texture.encoding : jn,
      map: b0,
      matcap: e0,
      envMap: M0,
      envMapMode: M0 && W.mapping,
      envMapCubeUVHeight: X,
      aoMap: r0,
      lightMap: Z,
      bumpMap: n0,
      normalMap: S0,
      displacementMap: u && p0,
      emissiveMap: P0,
      normalMapObjectSpace: S0 && M.normalMapType === dh,
      normalMapTangentSpace: S0 && M.normalMapType === Qn,
      decodeVideoTexture: b0 && M.map.isVideoTexture === !0 && M.map.encoding === ve,
      metalnessMap: D0,
      roughnessMap: N0,
      clearcoat: j0,
      clearcoatMap: q,
      clearcoatNormalMap: l0,
      clearcoatRoughnessMap: h0,
      iridescence: ce,
      iridescenceMap: w0,
      iridescenceThicknessMap: B0,
      sheen: N,
      sheenColorMap: T0,
      sheenRoughnessMap: Q,
      specularMap: C0,
      specularColorMap: O0,
      specularIntensityMap: z0,
      transmission: L,
      transmissionMap: A0,
      thicknessMap: I0,
      gradientMap: se,
      opaque: M.transparent === !1 && M.blending === Ri,
      alphaMap: me,
      alphaTest: Oe,
      combine: M.combine,
      //
      mapUv: b0 && _(M.map.channel),
      aoMapUv: r0 && _(M.aoMap.channel),
      lightMapUv: Z && _(M.lightMap.channel),
      bumpMapUv: n0 && _(M.bumpMap.channel),
      normalMapUv: S0 && _(M.normalMap.channel),
      displacementMapUv: p0 && _(M.displacementMap.channel),
      emissiveMapUv: P0 && _(M.emissiveMap.channel),
      metalnessMapUv: D0 && _(M.metalnessMap.channel),
      roughnessMapUv: N0 && _(M.roughnessMap.channel),
      clearcoatMapUv: q && _(M.clearcoatMap.channel),
      clearcoatNormalMapUv: l0 && _(M.clearcoatNormalMap.channel),
      clearcoatRoughnessMapUv: h0 && _(M.clearcoatRoughnessMap.channel),
      iridescenceMapUv: w0 && _(M.iridescenceMap.channel),
      iridescenceThicknessMapUv: B0 && _(M.iridescenceThicknessMap.channel),
      sheenColorMapUv: T0 && _(M.sheenColorMap.channel),
      sheenRoughnessMapUv: Q && _(M.sheenRoughnessMap.channel),
      specularMapUv: C0 && _(M.specularMap.channel),
      specularColorMapUv: O0 && _(M.specularColorMap.channel),
      specularIntensityMapUv: z0 && _(M.specularIntensityMap.channel),
      transmissionMapUv: A0 && _(M.transmissionMap.channel),
      thicknessMapUv: I0 && _(M.thicknessMap.channel),
      alphaMapUv: me && _(M.alphaMap.channel),
      //
      vertexTangents: S0 && !!V.attributes.tangent,
      vertexColors: M.vertexColors,
      vertexAlphas: M.vertexColors === !0 && !!V.attributes.color && V.attributes.color.itemSize === 4,
      vertexUvs2: K,
      pointsUvs: O.isPoints === !0 && !!V.attributes.uv && (b0 || me),
      fog: !!U,
      useFog: M.fog === !0,
      fogExp2: U && U.isFogExp2,
      flatShading: M.flatShading === !0,
      sizeAttenuation: M.sizeAttenuation === !0,
      logarithmicDepthBuffer: d,
      skinning: O.isSkinnedMesh === !0,
      morphTargets: V.morphAttributes.position !== void 0,
      morphNormals: V.morphAttributes.normal !== void 0,
      morphColors: V.morphAttributes.color !== void 0,
      morphTargetsCount: x0,
      morphTextureStride: u0,
      numDirLights: A.directional.length,
      numPointLights: A.point.length,
      numSpotLights: A.spot.length,
      numSpotLightMaps: A.spotLightMap.length,
      numRectAreaLights: A.rectArea.length,
      numHemiLights: A.hemi.length,
      numDirLightShadows: A.directionalShadowMap.length,
      numPointLightShadows: A.pointShadowMap.length,
      numSpotLightShadows: A.spotShadowMap.length,
      numSpotLightShadowsWithMaps: A.numSpotLightShadowsWithMaps,
      numClippingPlanes: a.numPlanes,
      numClipIntersection: a.numIntersection,
      dithering: M.dithering,
      shadowMapEnabled: i.shadowMap.enabled && D.length > 0,
      shadowMapType: i.shadowMap.type,
      toneMapping: M.toneMapped ? i.toneMapping : D1,
      useLegacyLights: i.useLegacyLights,
      premultipliedAlpha: M.premultipliedAlpha,
      doubleSided: M.side === Nt,
      flipSided: M.side === ut,
      useDepthPacking: M.depthPacking >= 0,
      depthPacking: M.depthPacking || 0,
      index0AttributeName: M.index0AttributeName,
      extensionDerivatives: k && M.extensions.derivatives === !0,
      extensionFragDepth: k && M.extensions.fragDepth === !0,
      extensionDrawBuffers: k && M.extensions.drawBuffers === !0,
      extensionShaderTextureLOD: k && M.extensions.shaderTextureLOD === !0,
      rendererExtensionFragDepth: h || n.has("EXT_frag_depth"),
      rendererExtensionDrawBuffers: h || n.has("WEBGL_draw_buffers"),
      rendererExtensionShaderTextureLod: h || n.has("EXT_shader_texture_lod"),
      customProgramCacheKey: M.customProgramCacheKey()
    };
  }
  function m(M) {
    const A = [];
    if (M.shaderID ? A.push(M.shaderID) : (A.push(M.customVertexShaderID), A.push(M.customFragmentShaderID)), M.defines !== void 0)
      for (const D in M.defines)
        A.push(D), A.push(M.defines[D]);
    return M.isRawShaderMaterial === !1 && (v(A, M), y(A, M), A.push(i.outputEncoding)), A.push(M.customProgramCacheKey), A.join();
  }
  function v(M, A) {
    M.push(A.precision), M.push(A.outputEncoding), M.push(A.envMapMode), M.push(A.envMapCubeUVHeight), M.push(A.mapUv), M.push(A.alphaMapUv), M.push(A.lightMapUv), M.push(A.aoMapUv), M.push(A.bumpMapUv), M.push(A.normalMapUv), M.push(A.displacementMapUv), M.push(A.emissiveMapUv), M.push(A.metalnessMapUv), M.push(A.roughnessMapUv), M.push(A.clearcoatMapUv), M.push(A.clearcoatNormalMapUv), M.push(A.clearcoatRoughnessMapUv), M.push(A.iridescenceMapUv), M.push(A.iridescenceThicknessMapUv), M.push(A.sheenColorMapUv), M.push(A.sheenRoughnessMapUv), M.push(A.specularMapUv), M.push(A.specularColorMapUv), M.push(A.specularIntensityMapUv), M.push(A.transmissionMapUv), M.push(A.thicknessMapUv), M.push(A.combine), M.push(A.fogExp2), M.push(A.sizeAttenuation), M.push(A.morphTargetsCount), M.push(A.morphAttributeCount), M.push(A.numDirLights), M.push(A.numPointLights), M.push(A.numSpotLights), M.push(A.numSpotLightMaps), M.push(A.numHemiLights), M.push(A.numRectAreaLights), M.push(A.numDirLightShadows), M.push(A.numPointLightShadows), M.push(A.numSpotLightShadows), M.push(A.numSpotLightShadowsWithMaps), M.push(A.shadowMapType), M.push(A.toneMapping), M.push(A.numClippingPlanes), M.push(A.numClipIntersection), M.push(A.depthPacking);
  }
  function y(M, A) {
    o.disableAll(), A.isWebGL2 && o.enable(0), A.supportsVertexTextures && o.enable(1), A.instancing && o.enable(2), A.instancingColor && o.enable(3), A.matcap && o.enable(4), A.envMap && o.enable(5), A.normalMapObjectSpace && o.enable(6), A.normalMapTangentSpace && o.enable(7), A.clearcoat && o.enable(8), A.iridescence && o.enable(9), A.alphaTest && o.enable(10), A.vertexColors && o.enable(11), A.vertexAlphas && o.enable(12), A.vertexUvs2 && o.enable(13), A.vertexTangents && o.enable(14), M.push(o.mask), o.disableAll(), A.fog && o.enable(0), A.useFog && o.enable(1), A.flatShading && o.enable(2), A.logarithmicDepthBuffer && o.enable(3), A.skinning && o.enable(4), A.morphTargets && o.enable(5), A.morphNormals && o.enable(6), A.morphColors && o.enable(7), A.premultipliedAlpha && o.enable(8), A.shadowMapEnabled && o.enable(9), A.useLegacyLights && o.enable(10), A.doubleSided && o.enable(11), A.flipSided && o.enable(12), A.useDepthPacking && o.enable(13), A.dithering && o.enable(14), A.transmission && o.enable(15), A.sheen && o.enable(16), A.decodeVideoTexture && o.enable(17), A.opaque && o.enable(18), A.pointsUvs && o.enable(19), M.push(o.mask);
  }
  function b(M) {
    const A = p[M.type];
    let D;
    if (A) {
      const z = s1[A];
      D = m2.clone(z.uniforms);
    } else
      D = M.uniforms;
    return D;
  }
  function w(M, A) {
    let D;
    for (let z = 0, O = l.length; z < O; z++) {
      const U = l[z];
      if (U.cacheKey === A) {
        D = U, ++D.usedTimes;
        break;
      }
    }
    return D === void 0 && (D = new Ex(i, A, M, r), l.push(D)), D;
  }
  function x(M) {
    if (--M.usedTimes === 0) {
      const A = l.indexOf(M);
      l[A] = l[l.length - 1], l.pop(), M.destroy();
    }
  }
  function S(M) {
    c.remove(M);
  }
  function T() {
    c.dispose();
  }
  return {
    getParameters: g,
    getProgramCacheKey: m,
    getUniforms: b,
    acquireProgram: w,
    releaseProgram: x,
    releaseShaderCache: S,
    // Exposed for resource monitoring & error feedback via renderer.info:
    programs: l,
    dispose: T
  };
}
function Lx() {
  let i = /* @__PURE__ */ new WeakMap();
  function e(r) {
    let a = i.get(r);
    return a === void 0 && (a = {}, i.set(r, a)), a;
  }
  function t(r) {
    i.delete(r);
  }
  function n(r, a, o) {
    i.get(r)[a] = o;
  }
  function s() {
    i = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: e,
    remove: t,
    update: n,
    dispose: s
  };
}
function Rx(i, e) {
  return i.groupOrder !== e.groupOrder ? i.groupOrder - e.groupOrder : i.renderOrder !== e.renderOrder ? i.renderOrder - e.renderOrder : i.material.id !== e.material.id ? i.material.id - e.material.id : i.z !== e.z ? i.z - e.z : i.id - e.id;
}
function Q4(i, e) {
  return i.groupOrder !== e.groupOrder ? i.groupOrder - e.groupOrder : i.renderOrder !== e.renderOrder ? i.renderOrder - e.renderOrder : i.z !== e.z ? e.z - i.z : i.id - e.id;
}
function ea() {
  const i = [];
  let e = 0;
  const t = [], n = [], s = [];
  function r() {
    e = 0, t.length = 0, n.length = 0, s.length = 0;
  }
  function a(d, u, f, p, _, g) {
    let m = i[e];
    return m === void 0 ? (m = {
      id: d.id,
      object: d,
      geometry: u,
      material: f,
      groupOrder: p,
      renderOrder: d.renderOrder,
      z: _,
      group: g
    }, i[e] = m) : (m.id = d.id, m.object = d, m.geometry = u, m.material = f, m.groupOrder = p, m.renderOrder = d.renderOrder, m.z = _, m.group = g), e++, m;
  }
  function o(d, u, f, p, _, g) {
    const m = a(d, u, f, p, _, g);
    f.transmission > 0 ? n.push(m) : f.transparent === !0 ? s.push(m) : t.push(m);
  }
  function c(d, u, f, p, _, g) {
    const m = a(d, u, f, p, _, g);
    f.transmission > 0 ? n.unshift(m) : f.transparent === !0 ? s.unshift(m) : t.unshift(m);
  }
  function l(d, u) {
    t.length > 1 && t.sort(d || Rx), n.length > 1 && n.sort(u || Q4), s.length > 1 && s.sort(u || Q4);
  }
  function h() {
    for (let d = e, u = i.length; d < u; d++) {
      const f = i[d];
      if (f.id === null)
        break;
      f.id = null, f.object = null, f.geometry = null, f.material = null, f.group = null;
    }
  }
  return {
    opaque: t,
    transmissive: n,
    transparent: s,
    init: r,
    push: o,
    unshift: c,
    finish: h,
    sort: l
  };
}
function Px() {
  let i = /* @__PURE__ */ new WeakMap();
  function e(n, s) {
    const r = i.get(n);
    let a;
    return r === void 0 ? (a = new ea(), i.set(n, [a])) : s >= r.length ? (a = new ea(), r.push(a)) : a = r[s], a;
  }
  function t() {
    i = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: e,
    dispose: t
  };
}
function Dx() {
  const i = {};
  return {
    get: function(e) {
      if (i[e.id] !== void 0)
        return i[e.id];
      let t;
      switch (e.type) {
        case "DirectionalLight":
          t = {
            direction: new C(),
            color: new f0()
          };
          break;
        case "SpotLight":
          t = {
            position: new C(),
            direction: new C(),
            color: new f0(),
            distance: 0,
            coneCos: 0,
            penumbraCos: 0,
            decay: 0
          };
          break;
        case "PointLight":
          t = {
            position: new C(),
            color: new f0(),
            distance: 0,
            decay: 0
          };
          break;
        case "HemisphereLight":
          t = {
            direction: new C(),
            skyColor: new f0(),
            groundColor: new f0()
          };
          break;
        case "RectAreaLight":
          t = {
            color: new f0(),
            position: new C(),
            halfWidth: new C(),
            halfHeight: new C()
          };
          break;
      }
      return i[e.id] = t, t;
    }
  };
}
function Nx() {
  const i = {};
  return {
    get: function(e) {
      if (i[e.id] !== void 0)
        return i[e.id];
      let t;
      switch (e.type) {
        case "DirectionalLight":
          t = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new o0()
          };
          break;
        case "SpotLight":
          t = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new o0()
          };
          break;
        case "PointLight":
          t = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new o0(),
            shadowCameraNear: 1,
            shadowCameraFar: 1e3
          };
          break;
      }
      return i[e.id] = t, t;
    }
  };
}
let Ox = 0;
function Ux(i, e) {
  return (e.castShadow ? 2 : 0) - (i.castShadow ? 2 : 0) + (e.map ? 1 : 0) - (i.map ? 1 : 0);
}
function Fx(i, e) {
  const t = new Dx(), n = Nx(), s = {
    version: 0,
    hash: {
      directionalLength: -1,
      pointLength: -1,
      spotLength: -1,
      rectAreaLength: -1,
      hemiLength: -1,
      numDirectionalShadows: -1,
      numPointShadows: -1,
      numSpotShadows: -1,
      numSpotMaps: -1
    },
    ambient: [0, 0, 0],
    probe: [],
    directional: [],
    directionalShadow: [],
    directionalShadowMap: [],
    directionalShadowMatrix: [],
    spot: [],
    spotLightMap: [],
    spotShadow: [],
    spotShadowMap: [],
    spotLightMatrix: [],
    rectArea: [],
    rectAreaLTC1: null,
    rectAreaLTC2: null,
    point: [],
    pointShadow: [],
    pointShadowMap: [],
    pointShadowMatrix: [],
    hemi: [],
    numSpotLightShadowsWithMaps: 0
  };
  for (let h = 0; h < 9; h++)
    s.probe.push(new C());
  const r = new C(), a = new k0(), o = new k0();
  function c(h, d) {
    let u = 0, f = 0, p = 0;
    for (let D = 0; D < 9; D++)
      s.probe[D].set(0, 0, 0);
    let _ = 0, g = 0, m = 0, v = 0, y = 0, b = 0, w = 0, x = 0, S = 0, T = 0;
    h.sort(Ux);
    const M = d === !0 ? Math.PI : 1;
    for (let D = 0, z = h.length; D < z; D++) {
      const O = h[D], U = O.color, V = O.intensity, Y = O.distance, W = O.shadow && O.shadow.map ? O.shadow.map.texture : null;
      if (O.isAmbientLight)
        u += U.r * V * M, f += U.g * V * M, p += U.b * V * M;
      else if (O.isLightProbe)
        for (let X = 0; X < 9; X++)
          s.probe[X].addScaledVector(O.sh.coefficients[X], V);
      else if (O.isDirectionalLight) {
        const X = t.get(O);
        if (X.color.copy(O.color).multiplyScalar(O.intensity * M), O.castShadow) {
          const i0 = O.shadow, a0 = n.get(O);
          a0.shadowBias = i0.bias, a0.shadowNormalBias = i0.normalBias, a0.shadowRadius = i0.radius, a0.shadowMapSize = i0.mapSize, s.directionalShadow[_] = a0, s.directionalShadowMap[_] = W, s.directionalShadowMatrix[_] = O.shadow.matrix, b++;
        }
        s.directional[_] = X, _++;
      } else if (O.isSpotLight) {
        const X = t.get(O);
        X.position.setFromMatrixPosition(O.matrixWorld), X.color.copy(U).multiplyScalar(V * M), X.distance = Y, X.coneCos = Math.cos(O.angle), X.penumbraCos = Math.cos(O.angle * (1 - O.penumbra)), X.decay = O.decay, s.spot[m] = X;
        const i0 = O.shadow;
        if (O.map && (s.spotLightMap[S] = O.map, S++, i0.updateMatrices(O), O.castShadow && T++), s.spotLightMatrix[m] = i0.matrix, O.castShadow) {
          const a0 = n.get(O);
          a0.shadowBias = i0.bias, a0.shadowNormalBias = i0.normalBias, a0.shadowRadius = i0.radius, a0.shadowMapSize = i0.mapSize, s.spotShadow[m] = a0, s.spotShadowMap[m] = W, x++;
        }
        m++;
      } else if (O.isRectAreaLight) {
        const X = t.get(O);
        X.color.copy(U).multiplyScalar(V), X.halfWidth.set(O.width * 0.5, 0, 0), X.halfHeight.set(0, O.height * 0.5, 0), s.rectArea[v] = X, v++;
      } else if (O.isPointLight) {
        const X = t.get(O);
        if (X.color.copy(O.color).multiplyScalar(O.intensity * M), X.distance = O.distance, X.decay = O.decay, O.castShadow) {
          const i0 = O.shadow, a0 = n.get(O);
          a0.shadowBias = i0.bias, a0.shadowNormalBias = i0.normalBias, a0.shadowRadius = i0.radius, a0.shadowMapSize = i0.mapSize, a0.shadowCameraNear = i0.camera.near, a0.shadowCameraFar = i0.camera.far, s.pointShadow[g] = a0, s.pointShadowMap[g] = W, s.pointShadowMatrix[g] = O.shadow.matrix, w++;
        }
        s.point[g] = X, g++;
      } else if (O.isHemisphereLight) {
        const X = t.get(O);
        X.skyColor.copy(O.color).multiplyScalar(V * M), X.groundColor.copy(O.groundColor).multiplyScalar(V * M), s.hemi[y] = X, y++;
      }
    }
    v > 0 && (e.isWebGL2 || i.has("OES_texture_float_linear") === !0 ? (s.rectAreaLTC1 = _0.LTC_FLOAT_1, s.rectAreaLTC2 = _0.LTC_FLOAT_2) : i.has("OES_texture_half_float_linear") === !0 ? (s.rectAreaLTC1 = _0.LTC_HALF_1, s.rectAreaLTC2 = _0.LTC_HALF_2) : console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")), s.ambient[0] = u, s.ambient[1] = f, s.ambient[2] = p;
    const A = s.hash;
    (A.directionalLength !== _ || A.pointLength !== g || A.spotLength !== m || A.rectAreaLength !== v || A.hemiLength !== y || A.numDirectionalShadows !== b || A.numPointShadows !== w || A.numSpotShadows !== x || A.numSpotMaps !== S) && (s.directional.length = _, s.spot.length = m, s.rectArea.length = v, s.point.length = g, s.hemi.length = y, s.directionalShadow.length = b, s.directionalShadowMap.length = b, s.pointShadow.length = w, s.pointShadowMap.length = w, s.spotShadow.length = x, s.spotShadowMap.length = x, s.directionalShadowMatrix.length = b, s.pointShadowMatrix.length = w, s.spotLightMatrix.length = x + S - T, s.spotLightMap.length = S, s.numSpotLightShadowsWithMaps = T, A.directionalLength = _, A.pointLength = g, A.spotLength = m, A.rectAreaLength = v, A.hemiLength = y, A.numDirectionalShadows = b, A.numPointShadows = w, A.numSpotShadows = x, A.numSpotMaps = S, s.version = Ox++);
  }
  function l(h, d) {
    let u = 0, f = 0, p = 0, _ = 0, g = 0;
    const m = d.matrixWorldInverse;
    for (let v = 0, y = h.length; v < y; v++) {
      const b = h[v];
      if (b.isDirectionalLight) {
        const w = s.directional[u];
        w.direction.setFromMatrixPosition(b.matrixWorld), r.setFromMatrixPosition(b.target.matrixWorld), w.direction.sub(r), w.direction.transformDirection(m), u++;
      } else if (b.isSpotLight) {
        const w = s.spot[p];
        w.position.setFromMatrixPosition(b.matrixWorld), w.position.applyMatrix4(m), w.direction.setFromMatrixPosition(b.matrixWorld), r.setFromMatrixPosition(b.target.matrixWorld), w.direction.sub(r), w.direction.transformDirection(m), p++;
      } else if (b.isRectAreaLight) {
        const w = s.rectArea[_];
        w.position.setFromMatrixPosition(b.matrixWorld), w.position.applyMatrix4(m), o.identity(), a.copy(b.matrixWorld), a.premultiply(m), o.extractRotation(a), w.halfWidth.set(b.width * 0.5, 0, 0), w.halfHeight.set(0, b.height * 0.5, 0), w.halfWidth.applyMatrix4(o), w.halfHeight.applyMatrix4(o), _++;
      } else if (b.isPointLight) {
        const w = s.point[f];
        w.position.setFromMatrixPosition(b.matrixWorld), w.position.applyMatrix4(m), f++;
      } else if (b.isHemisphereLight) {
        const w = s.hemi[g];
        w.direction.setFromMatrixPosition(b.matrixWorld), w.direction.transformDirection(m), g++;
      }
    }
  }
  return {
    setup: c,
    setupView: l,
    state: s
  };
}
function ta(i, e) {
  const t = new Fx(i, e), n = [], s = [];
  function r() {
    n.length = 0, s.length = 0;
  }
  function a(d) {
    n.push(d);
  }
  function o(d) {
    s.push(d);
  }
  function c(d) {
    t.setup(n, d);
  }
  function l(d) {
    t.setupView(n, d);
  }
  return {
    init: r,
    state: {
      lightsArray: n,
      shadowsArray: s,
      lights: t
    },
    setupLights: c,
    setupLightsView: l,
    pushLight: a,
    pushShadow: o
  };
}
function zx(i, e) {
  let t = /* @__PURE__ */ new WeakMap();
  function n(r, a = 0) {
    const o = t.get(r);
    let c;
    return o === void 0 ? (c = new ta(i, e), t.set(r, [c])) : a >= o.length ? (c = new ta(i, e), o.push(c)) : c = o[a], c;
  }
  function s() {
    t = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: n,
    dispose: s
  };
}
class _2 extends et {
  constructor(e) {
    super(), this.isMeshDepthMaterial = !0, this.type = "MeshDepthMaterial", this.depthPacking = hh, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.depthPacking = e.depthPacking, this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this;
  }
}
class v2 extends et {
  constructor(e) {
    super(), this.isMeshDistanceMaterial = !0, this.type = "MeshDistanceMaterial", this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this;
  }
}
const kx = `void main() {
	gl_Position = vec4( position, 1.0 );
}`, Bx = `uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;
function Vx(i, e, t) {
  let n = new n6();
  const s = new o0(), r = new o0(), a = new pe(), o = new _2({ depthPacking: uh }), c = new v2(), l = {}, h = t.maxTextureSize, d = { [an]: ut, [ut]: an, [Nt]: Nt }, u = new l1({
    defines: {
      VSM_SAMPLES: 8
    },
    uniforms: {
      shadow_pass: { value: null },
      resolution: { value: new o0() },
      radius: { value: 4 }
    },
    vertexShader: kx,
    fragmentShader: Bx
  }), f = u.clone();
  f.defines.HORIZONTAL_PASS = 1;
  const p = new F0();
  p.setAttribute(
    "position",
    new ee(
      new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]),
      3
    )
  );
  const _ = new y0(p, u), g = this;
  this.enabled = !1, this.autoUpdate = !0, this.needsUpdate = !1, this.type = i2, this.render = function(b, w, x) {
    if (g.enabled === !1 || g.autoUpdate === !1 && g.needsUpdate === !1 || b.length === 0)
      return;
    const S = i.getRenderTarget(), T = i.getActiveCubeFace(), M = i.getActiveMipmapLevel(), A = i.state;
    A.setBlending(rn), A.buffers.color.setClear(1, 1, 1, 1), A.buffers.depth.setTest(!0), A.setScissorTest(!1);
    for (let D = 0, z = b.length; D < z; D++) {
      const O = b[D], U = O.shadow;
      if (U === void 0) {
        console.warn("THREE.WebGLShadowMap:", O, "has no shadow.");
        continue;
      }
      if (U.autoUpdate === !1 && U.needsUpdate === !1)
        continue;
      s.copy(U.mapSize);
      const V = U.getFrameExtents();
      if (s.multiply(V), r.copy(U.mapSize), (s.x > h || s.y > h) && (s.x > h && (r.x = Math.floor(h / V.x), s.x = r.x * V.x, U.mapSize.x = r.x), s.y > h && (r.y = Math.floor(h / V.y), s.y = r.y * V.y, U.mapSize.y = r.y)), U.map === null) {
        const W = this.type !== P9 ? { minFilter: ke, magFilter: ke } : {};
        U.map = new o1(s.x, s.y, W), U.map.texture.name = O.name + ".shadowMap", U.camera.updateProjectionMatrix();
      }
      i.setRenderTarget(U.map), i.clear();
      const Y = U.getViewportCount();
      for (let W = 0; W < Y; W++) {
        const X = U.getViewport(W);
        a.set(
          r.x * X.x,
          r.y * X.y,
          r.x * X.z,
          r.y * X.w
        ), A.viewport(a), U.updateMatrices(O, W), n = U.getFrustum(), y(w, x, U.camera, O, this.type);
      }
      U.isPointLightShadow !== !0 && this.type === P9 && m(U, x), U.needsUpdate = !1;
    }
    g.needsUpdate = !1, i.setRenderTarget(S, T, M);
  };
  function m(b, w) {
    const x = e.update(_);
    u.defines.VSM_SAMPLES !== b.blurSamples && (u.defines.VSM_SAMPLES = b.blurSamples, f.defines.VSM_SAMPLES = b.blurSamples, u.needsUpdate = !0, f.needsUpdate = !0), b.mapPass === null && (b.mapPass = new o1(s.x, s.y)), u.uniforms.shadow_pass.value = b.map.texture, u.uniforms.resolution.value = b.mapSize, u.uniforms.radius.value = b.radius, i.setRenderTarget(b.mapPass), i.clear(), i.renderBufferDirect(w, null, x, u, _, null), f.uniforms.shadow_pass.value = b.mapPass.texture, f.uniforms.resolution.value = b.mapSize, f.uniforms.radius.value = b.radius, i.setRenderTarget(b.map), i.clear(), i.renderBufferDirect(w, null, x, f, _, null);
  }
  function v(b, w, x, S) {
    let T = null;
    const M = x.isPointLight === !0 ? b.customDistanceMaterial : b.customDepthMaterial;
    if (M !== void 0)
      T = M;
    else if (T = x.isPointLight === !0 ? c : o, i.localClippingEnabled && w.clipShadows === !0 && Array.isArray(w.clippingPlanes) && w.clippingPlanes.length !== 0 || w.displacementMap && w.displacementScale !== 0 || w.alphaMap && w.alphaTest > 0 || w.map && w.alphaTest > 0) {
      const A = T.uuid, D = w.uuid;
      let z = l[A];
      z === void 0 && (z = {}, l[A] = z);
      let O = z[D];
      O === void 0 && (O = T.clone(), z[D] = O), T = O;
    }
    if (T.visible = w.visible, T.wireframe = w.wireframe, S === P9 ? T.side = w.shadowSide !== null ? w.shadowSide : w.side : T.side = w.shadowSide !== null ? w.shadowSide : d[w.side], T.alphaMap = w.alphaMap, T.alphaTest = w.alphaTest, T.map = w.map, T.clipShadows = w.clipShadows, T.clippingPlanes = w.clippingPlanes, T.clipIntersection = w.clipIntersection, T.displacementMap = w.displacementMap, T.displacementScale = w.displacementScale, T.displacementBias = w.displacementBias, T.wireframeLinewidth = w.wireframeLinewidth, T.linewidth = w.linewidth, x.isPointLight === !0 && T.isMeshDistanceMaterial === !0) {
      const A = i.properties.get(T);
      A.light = x;
    }
    return T;
  }
  function y(b, w, x, S, T) {
    if (b.visible === !1)
      return;
    if (b.layers.test(w.layers) && (b.isMesh || b.isLine || b.isPoints) && (b.castShadow || b.receiveShadow && T === P9) && (!b.frustumCulled || n.intersectsObject(b))) {
      b.modelViewMatrix.multiplyMatrices(x.matrixWorldInverse, b.matrixWorld);
      const D = e.update(b), z = b.material;
      if (Array.isArray(z)) {
        const O = D.groups;
        for (let U = 0, V = O.length; U < V; U++) {
          const Y = O[U], W = z[Y.materialIndex];
          if (W && W.visible) {
            const X = v(b, W, S, T);
            i.renderBufferDirect(x, null, D, X, b, Y);
          }
        }
      } else if (z.visible) {
        const O = v(b, z, S, T);
        i.renderBufferDirect(x, null, D, O, b, null);
      }
    }
    const A = b.children;
    for (let D = 0, z = A.length; D < z; D++)
      y(A[D], w, x, S, T);
  }
}
function Hx(i, e, t) {
  const n = t.isWebGL2;
  function s() {
    let k = !1;
    const K = new pe();
    let c0 = null;
    const E0 = new pe(0, 0, 0, 0);
    return {
      setMask: function(L0) {
        c0 !== L0 && !k && (i.colorMask(L0, L0, L0, L0), c0 = L0);
      },
      setLocked: function(L0) {
        k = L0;
      },
      setClear: function(L0, ye, Ce, rt, fn) {
        fn === !0 && (L0 *= rt, ye *= rt, Ce *= rt), K.set(L0, ye, Ce, rt), E0.equals(K) === !1 && (i.clearColor(L0, ye, Ce, rt), E0.copy(K));
      },
      reset: function() {
        k = !1, c0 = null, E0.set(-1, 0, 0, 0);
      }
    };
  }
  function r() {
    let k = !1, K = null, c0 = null, E0 = null;
    return {
      setTest: function(L0) {
        L0 ? B(2929) : m0(2929);
      },
      setMask: function(L0) {
        K !== L0 && !k && (i.depthMask(L0), K = L0);
      },
      setFunc: function(L0) {
        if (c0 !== L0) {
          switch (L0) {
            case Rc:
              i.depthFunc(512);
              break;
            case Pc:
              i.depthFunc(519);
              break;
            case Dc:
              i.depthFunc(513);
              break;
            case Dr:
              i.depthFunc(515);
              break;
            case Nc:
              i.depthFunc(514);
              break;
            case Oc:
              i.depthFunc(518);
              break;
            case Uc:
              i.depthFunc(516);
              break;
            case Fc:
              i.depthFunc(517);
              break;
            default:
              i.depthFunc(515);
          }
          c0 = L0;
        }
      },
      setLocked: function(L0) {
        k = L0;
      },
      setClear: function(L0) {
        E0 !== L0 && (i.clearDepth(L0), E0 = L0);
      },
      reset: function() {
        k = !1, K = null, c0 = null, E0 = null;
      }
    };
  }
  function a() {
    let k = !1, K = null, c0 = null, E0 = null, L0 = null, ye = null, Ce = null, rt = null, fn = null;
    return {
      setTest: function(Ue) {
        k || (Ue ? B(2960) : m0(2960));
      },
      setMask: function(Ue) {
        K !== Ue && !k && (i.stencilMask(Ue), K = Ue);
      },
      setFunc: function(Ue, Bt, p1) {
        (c0 !== Ue || E0 !== Bt || L0 !== p1) && (i.stencilFunc(Ue, Bt, p1), c0 = Ue, E0 = Bt, L0 = p1);
      },
      setOp: function(Ue, Bt, p1) {
        (ye !== Ue || Ce !== Bt || rt !== p1) && (i.stencilOp(Ue, Bt, p1), ye = Ue, Ce = Bt, rt = p1);
      },
      setLocked: function(Ue) {
        k = Ue;
      },
      setClear: function(Ue) {
        fn !== Ue && (i.clearStencil(Ue), fn = Ue);
      },
      reset: function() {
        k = !1, K = null, c0 = null, E0 = null, L0 = null, ye = null, Ce = null, rt = null, fn = null;
      }
    };
  }
  const o = new s(), c = new r(), l = new a(), h = /* @__PURE__ */ new WeakMap(), d = /* @__PURE__ */ new WeakMap();
  let u = {}, f = {}, p = /* @__PURE__ */ new WeakMap(), _ = [], g = null, m = !1, v = null, y = null, b = null, w = null, x = null, S = null, T = null, M = !1, A = null, D = null, z = null, O = null, U = null;
  const V = i.getParameter(35661);
  let Y = !1, W = 0;
  const X = i.getParameter(7938);
  X.indexOf("WebGL") !== -1 ? (W = parseFloat(/^WebGL (\d)/.exec(X)[1]), Y = W >= 1) : X.indexOf("OpenGL ES") !== -1 && (W = parseFloat(/^OpenGL ES (\d)/.exec(X)[1]), Y = W >= 2);
  let i0 = null, a0 = {};
  const x0 = i.getParameter(3088), u0 = i.getParameter(2978), E = new pe().fromArray(x0), F = new pe().fromArray(u0);
  function R(k, K, c0) {
    const E0 = new Uint8Array(4), L0 = i.createTexture();
    i.bindTexture(k, L0), i.texParameteri(k, 10241, 9728), i.texParameteri(k, 10240, 9728);
    for (let ye = 0; ye < c0; ye++)
      i.texImage2D(K + ye, 0, 6408, 1, 1, 0, 6408, 5121, E0);
    return L0;
  }
  const j = {};
  j[3553] = R(3553, 3553, 1), j[34067] = R(34067, 34069, 6), o.setClear(0, 0, 0, 1), c.setClear(1), l.setClear(0), B(2929), c.setFunc(Dr), p0(!1), P0(q3), B(2884), n0(rn);
  function B(k) {
    u[k] !== !0 && (i.enable(k), u[k] = !0);
  }
  function m0(k) {
    u[k] !== !1 && (i.disable(k), u[k] = !1);
  }
  function b0(k, K) {
    return f[k] !== K ? (i.bindFramebuffer(k, K), f[k] = K, n && (k === 36009 && (f[36160] = K), k === 36160 && (f[36009] = K)), !0) : !1;
  }
  function e0(k, K) {
    let c0 = _, E0 = !1;
    if (k)
      if (c0 = p.get(K), c0 === void 0 && (c0 = [], p.set(K, c0)), k.isWebGLMultipleRenderTargets) {
        const L0 = k.texture;
        if (c0.length !== L0.length || c0[0] !== 36064) {
          for (let ye = 0, Ce = L0.length; ye < Ce; ye++)
            c0[ye] = 36064 + ye;
          c0.length = L0.length, E0 = !0;
        }
      } else
        c0[0] !== 36064 && (c0[0] = 36064, E0 = !0);
    else
      c0[0] !== 1029 && (c0[0] = 1029, E0 = !0);
    E0 && (t.isWebGL2 ? i.drawBuffers(c0) : e.get("WEBGL_draw_buffers").drawBuffersWEBGL(c0));
  }
  function M0(k) {
    return g !== k ? (i.useProgram(k), g = k, !0) : !1;
  }
  const r0 = {
    [vi]: 32774,
    [xc]: 32778,
    [bc]: 32779
  };
  if (n)
    r0[K3] = 32775, r0[Q3] = 32776;
  else {
    const k = e.get("EXT_blend_minmax");
    k !== null && (r0[K3] = k.MIN_EXT, r0[Q3] = k.MAX_EXT);
  }
  const Z = {
    [wc]: 0,
    [Mc]: 1,
    [Sc]: 768,
    [s2]: 770,
    [Lc]: 776,
    [Cc]: 774,
    [Tc]: 772,
    [Ec]: 769,
    [r2]: 771,
    [Ic]: 775,
    [Ac]: 773
  };
  function n0(k, K, c0, E0, L0, ye, Ce, rt) {
    if (k === rn) {
      m === !0 && (m0(3042), m = !1);
      return;
    }
    if (m === !1 && (B(3042), m = !0), k !== yc) {
      if (k !== v || rt !== M) {
        if ((y !== vi || x !== vi) && (i.blendEquation(32774), y = vi, x = vi), rt)
          switch (k) {
            case Ri:
              i.blendFuncSeparate(1, 771, 1, 771);
              break;
            case $3:
              i.blendFunc(1, 1);
              break;
            case j3:
              i.blendFuncSeparate(0, 769, 0, 1);
              break;
            case J3:
              i.blendFuncSeparate(0, 768, 0, 770);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", k);
              break;
          }
        else
          switch (k) {
            case Ri:
              i.blendFuncSeparate(770, 771, 1, 771);
              break;
            case $3:
              i.blendFunc(770, 1);
              break;
            case j3:
              i.blendFuncSeparate(0, 769, 0, 1);
              break;
            case J3:
              i.blendFunc(0, 768);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", k);
              break;
          }
        b = null, w = null, S = null, T = null, v = k, M = rt;
      }
      return;
    }
    L0 = L0 || K, ye = ye || c0, Ce = Ce || E0, (K !== y || L0 !== x) && (i.blendEquationSeparate(r0[K], r0[L0]), y = K, x = L0), (c0 !== b || E0 !== w || ye !== S || Ce !== T) && (i.blendFuncSeparate(Z[c0], Z[E0], Z[ye], Z[Ce]), b = c0, w = E0, S = ye, T = Ce), v = k, M = !1;
  }
  function S0(k, K) {
    k.side === Nt ? m0(2884) : B(2884);
    let c0 = k.side === ut;
    K && (c0 = !c0), p0(c0), k.blending === Ri && k.transparent === !1 ? n0(rn) : n0(k.blending, k.blendEquation, k.blendSrc, k.blendDst, k.blendEquationAlpha, k.blendSrcAlpha, k.blendDstAlpha, k.premultipliedAlpha), c.setFunc(k.depthFunc), c.setTest(k.depthTest), c.setMask(k.depthWrite), o.setMask(k.colorWrite);
    const E0 = k.stencilWrite;
    l.setTest(E0), E0 && (l.setMask(k.stencilWriteMask), l.setFunc(k.stencilFunc, k.stencilRef, k.stencilFuncMask), l.setOp(k.stencilFail, k.stencilZFail, k.stencilZPass)), N0(k.polygonOffset, k.polygonOffsetFactor, k.polygonOffsetUnits), k.alphaToCoverage === !0 ? B(32926) : m0(32926);
  }
  function p0(k) {
    A !== k && (k ? i.frontFace(2304) : i.frontFace(2305), A = k);
  }
  function P0(k) {
    k !== gc ? (B(2884), k !== D && (k === q3 ? i.cullFace(1029) : k === _c ? i.cullFace(1028) : i.cullFace(1032))) : m0(2884), D = k;
  }
  function D0(k) {
    k !== z && (Y && i.lineWidth(k), z = k);
  }
  function N0(k, K, c0) {
    k ? (B(32823), (O !== K || U !== c0) && (i.polygonOffset(K, c0), O = K, U = c0)) : m0(32823);
  }
  function j0(k) {
    k ? B(3089) : m0(3089);
  }
  function ce(k) {
    k === void 0 && (k = 33984 + V - 1), i0 !== k && (i.activeTexture(k), i0 = k);
  }
  function N(k, K, c0) {
    c0 === void 0 && (i0 === null ? c0 = 33984 + V - 1 : c0 = i0);
    let E0 = a0[c0];
    E0 === void 0 && (E0 = { type: void 0, texture: void 0 }, a0[c0] = E0), (E0.type !== k || E0.texture !== K) && (i0 !== c0 && (i.activeTexture(c0), i0 = c0), i.bindTexture(k, K || j[k]), E0.type = k, E0.texture = K);
  }
  function L() {
    const k = a0[i0];
    k !== void 0 && k.type !== void 0 && (i.bindTexture(k.type, null), k.type = void 0, k.texture = void 0);
  }
  function q() {
    try {
      i.compressedTexImage2D.apply(i, arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function l0() {
    try {
      i.compressedTexImage3D.apply(i, arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function h0() {
    try {
      i.texSubImage2D.apply(i, arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function w0() {
    try {
      i.texSubImage3D.apply(i, arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function B0() {
    try {
      i.compressedTexSubImage2D.apply(i, arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function T0() {
    try {
      i.compressedTexSubImage3D.apply(i, arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function Q() {
    try {
      i.texStorage2D.apply(i, arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function C0() {
    try {
      i.texStorage3D.apply(i, arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function O0() {
    try {
      i.texImage2D.apply(i, arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function z0() {
    try {
      i.texImage3D.apply(i, arguments);
    } catch (k) {
      console.error("THREE.WebGLState:", k);
    }
  }
  function A0(k) {
    E.equals(k) === !1 && (i.scissor(k.x, k.y, k.z, k.w), E.copy(k));
  }
  function I0(k) {
    F.equals(k) === !1 && (i.viewport(k.x, k.y, k.z, k.w), F.copy(k));
  }
  function se(k, K) {
    let c0 = d.get(K);
    c0 === void 0 && (c0 = /* @__PURE__ */ new WeakMap(), d.set(K, c0));
    let E0 = c0.get(k);
    E0 === void 0 && (E0 = i.getUniformBlockIndex(K, k.name), c0.set(k, E0));
  }
  function me(k, K) {
    const E0 = d.get(K).get(k);
    h.get(K) !== E0 && (i.uniformBlockBinding(K, E0, k.__bindingPointIndex), h.set(K, E0));
  }
  function Oe() {
    i.disable(3042), i.disable(2884), i.disable(2929), i.disable(32823), i.disable(3089), i.disable(2960), i.disable(32926), i.blendEquation(32774), i.blendFunc(1, 0), i.blendFuncSeparate(1, 0, 1, 0), i.colorMask(!0, !0, !0, !0), i.clearColor(0, 0, 0, 0), i.depthMask(!0), i.depthFunc(513), i.clearDepth(1), i.stencilMask(4294967295), i.stencilFunc(519, 0, 4294967295), i.stencilOp(7680, 7680, 7680), i.clearStencil(0), i.cullFace(1029), i.frontFace(2305), i.polygonOffset(0, 0), i.activeTexture(33984), i.bindFramebuffer(36160, null), n === !0 && (i.bindFramebuffer(36009, null), i.bindFramebuffer(36008, null)), i.useProgram(null), i.lineWidth(1), i.scissor(0, 0, i.canvas.width, i.canvas.height), i.viewport(0, 0, i.canvas.width, i.canvas.height), u = {}, i0 = null, a0 = {}, f = {}, p = /* @__PURE__ */ new WeakMap(), _ = [], g = null, m = !1, v = null, y = null, b = null, w = null, x = null, S = null, T = null, M = !1, A = null, D = null, z = null, O = null, U = null, E.set(0, 0, i.canvas.width, i.canvas.height), F.set(0, 0, i.canvas.width, i.canvas.height), o.reset(), c.reset(), l.reset();
  }
  return {
    buffers: {
      color: o,
      depth: c,
      stencil: l
    },
    enable: B,
    disable: m0,
    bindFramebuffer: b0,
    drawBuffers: e0,
    useProgram: M0,
    setBlending: n0,
    setMaterial: S0,
    setFlipSided: p0,
    setCullFace: P0,
    setLineWidth: D0,
    setPolygonOffset: N0,
    setScissorTest: j0,
    activeTexture: ce,
    bindTexture: N,
    unbindTexture: L,
    compressedTexImage2D: q,
    compressedTexImage3D: l0,
    texImage2D: O0,
    texImage3D: z0,
    updateUBOMapping: se,
    uniformBlockBinding: me,
    texStorage2D: Q,
    texStorage3D: C0,
    texSubImage2D: h0,
    texSubImage3D: w0,
    compressedTexSubImage2D: B0,
    compressedTexSubImage3D: T0,
    scissor: A0,
    viewport: I0,
    reset: Oe
  };
}
function Gx(i, e, t, n, s, r, a) {
  const o = s.isWebGL2, c = s.maxTextures, l = s.maxCubemapSize, h = s.maxTextureSize, d = s.maxSamples, u = e.has("WEBGL_multisampled_render_to_texture") ? e.get("WEBGL_multisampled_render_to_texture") : null, f = typeof navigator > "u" ? !1 : /OculusBrowser/g.test(navigator.userAgent), p = /* @__PURE__ */ new WeakMap();
  let _;
  const g = /* @__PURE__ */ new WeakMap();
  let m = !1;
  try {
    m = typeof OffscreenCanvas < "u" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
  } catch {
  }
  function v(N, L) {
    return m ? (
      // eslint-disable-next-line compat/compat
      new OffscreenCanvas(N, L)
    ) : us("canvas");
  }
  function y(N, L, q, l0) {
    let h0 = 1;
    if ((N.width > l0 || N.height > l0) && (h0 = l0 / Math.max(N.width, N.height)), h0 < 1 || L === !0)
      if (typeof HTMLImageElement < "u" && N instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && N instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && N instanceof ImageBitmap) {
        const w0 = L ? mh : Math.floor, B0 = w0(h0 * N.width), T0 = w0(h0 * N.height);
        _ === void 0 && (_ = v(B0, T0));
        const Q = q ? v(B0, T0) : _;
        return Q.width = B0, Q.height = T0, Q.getContext("2d").drawImage(N, 0, 0, B0, T0), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + N.width + "x" + N.height + ") to (" + B0 + "x" + T0 + ")."), Q;
      } else
        return "data" in N && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + N.width + "x" + N.height + ")."), N;
    return N;
  }
  function b(N) {
    return E5(N.width) && E5(N.height);
  }
  function w(N) {
    return o ? !1 : N.wrapS !== ht || N.wrapT !== ht || N.minFilter !== ke && N.minFilter !== Pe;
  }
  function x(N, L) {
    return N.generateMipmaps && L && N.minFilter !== ke && N.minFilter !== Pe;
  }
  function S(N) {
    i.generateMipmap(N);
  }
  function T(N, L, q, l0, h0 = !1) {
    if (o === !1)
      return L;
    if (N !== null) {
      if (i[N] !== void 0)
        return i[N];
      console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + N + "'");
    }
    let w0 = L;
    return L === 6403 && (q === 5126 && (w0 = 33326), q === 5131 && (w0 = 33325), q === 5121 && (w0 = 33321)), L === 33319 && (q === 5126 && (w0 = 33328), q === 5131 && (w0 = 33327), q === 5121 && (w0 = 33323)), L === 6408 && (q === 5126 && (w0 = 34836), q === 5131 && (w0 = 34842), q === 5121 && (w0 = l0 === ve && h0 === !1 ? 35907 : 32856), q === 32819 && (w0 = 32854), q === 32820 && (w0 = 32855)), (w0 === 33325 || w0 === 33326 || w0 === 33327 || w0 === 33328 || w0 === 34842 || w0 === 34836) && e.get("EXT_color_buffer_float"), w0;
  }
  function M(N, L, q) {
    return x(N, q) === !0 || N.isFramebufferTexture && N.minFilter !== ke && N.minFilter !== Pe ? Math.log2(Math.max(L.width, L.height)) + 1 : N.mipmaps !== void 0 && N.mipmaps.length > 0 ? N.mipmaps.length : N.isCompressedTexture && Array.isArray(N.image) ? L.mipmaps.length : 1;
  }
  function A(N) {
    return N === ke || N === Nr || N === k8 ? 9728 : 9729;
  }
  function D(N) {
    const L = N.target;
    L.removeEventListener("dispose", D), O(L), L.isVideoTexture && p.delete(L);
  }
  function z(N) {
    const L = N.target;
    L.removeEventListener("dispose", z), V(L);
  }
  function O(N) {
    const L = n.get(N);
    if (L.__webglInit === void 0)
      return;
    const q = N.source, l0 = g.get(q);
    if (l0) {
      const h0 = l0[L.__cacheKey];
      h0.usedTimes--, h0.usedTimes === 0 && U(N), Object.keys(l0).length === 0 && g.delete(q);
    }
    n.remove(N);
  }
  function U(N) {
    const L = n.get(N);
    i.deleteTexture(L.__webglTexture);
    const q = N.source, l0 = g.get(q);
    delete l0[L.__cacheKey], a.memory.textures--;
  }
  function V(N) {
    const L = N.texture, q = n.get(N), l0 = n.get(L);
    if (l0.__webglTexture !== void 0 && (i.deleteTexture(l0.__webglTexture), a.memory.textures--), N.depthTexture && N.depthTexture.dispose(), N.isWebGLCubeRenderTarget)
      for (let h0 = 0; h0 < 6; h0++)
        i.deleteFramebuffer(q.__webglFramebuffer[h0]), q.__webglDepthbuffer && i.deleteRenderbuffer(q.__webglDepthbuffer[h0]);
    else {
      if (i.deleteFramebuffer(q.__webglFramebuffer), q.__webglDepthbuffer && i.deleteRenderbuffer(q.__webglDepthbuffer), q.__webglMultisampledFramebuffer && i.deleteFramebuffer(q.__webglMultisampledFramebuffer), q.__webglColorRenderbuffer)
        for (let h0 = 0; h0 < q.__webglColorRenderbuffer.length; h0++)
          q.__webglColorRenderbuffer[h0] && i.deleteRenderbuffer(q.__webglColorRenderbuffer[h0]);
      q.__webglDepthRenderbuffer && i.deleteRenderbuffer(q.__webglDepthRenderbuffer);
    }
    if (N.isWebGLMultipleRenderTargets)
      for (let h0 = 0, w0 = L.length; h0 < w0; h0++) {
        const B0 = n.get(L[h0]);
        B0.__webglTexture && (i.deleteTexture(B0.__webglTexture), a.memory.textures--), n.remove(L[h0]);
      }
    n.remove(L), n.remove(N);
  }
  let Y = 0;
  function W() {
    Y = 0;
  }
  function X() {
    const N = Y;
    return N >= c && console.warn("THREE.WebGLTextures: Trying to use " + N + " texture units while this GPU supports only " + c), Y += 1, N;
  }
  function i0(N) {
    const L = [];
    return L.push(N.wrapS), L.push(N.wrapT), L.push(N.wrapR || 0), L.push(N.magFilter), L.push(N.minFilter), L.push(N.anisotropy), L.push(N.internalFormat), L.push(N.format), L.push(N.type), L.push(N.generateMipmaps), L.push(N.premultiplyAlpha), L.push(N.flipY), L.push(N.unpackAlignment), L.push(N.encoding), L.join();
  }
  function a0(N, L) {
    const q = n.get(N);
    if (N.isVideoTexture && j0(N), N.isRenderTargetTexture === !1 && N.version > 0 && q.__version !== N.version) {
      const l0 = N.image;
      if (l0 === null)
        console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
      else if (l0.complete === !1)
        console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
      else {
        m0(q, N, L);
        return;
      }
    }
    t.bindTexture(3553, q.__webglTexture, 33984 + L);
  }
  function x0(N, L) {
    const q = n.get(N);
    if (N.version > 0 && q.__version !== N.version) {
      m0(q, N, L);
      return;
    }
    t.bindTexture(35866, q.__webglTexture, 33984 + L);
  }
  function u0(N, L) {
    const q = n.get(N);
    if (N.version > 0 && q.__version !== N.version) {
      m0(q, N, L);
      return;
    }
    t.bindTexture(32879, q.__webglTexture, 33984 + L);
  }
  function E(N, L) {
    const q = n.get(N);
    if (N.version > 0 && q.__version !== N.version) {
      b0(q, N, L);
      return;
    }
    t.bindTexture(34067, q.__webglTexture, 33984 + L);
  }
  const F = {
    [rs]: 10497,
    [ht]: 33071,
    [as]: 33648
  }, R = {
    [ke]: 9728,
    [Nr]: 9984,
    [k8]: 9986,
    [Pe]: 9729,
    [a2]: 9985,
    [qn]: 9987
  };
  function j(N, L, q) {
    if (q ? (i.texParameteri(N, 10242, F[L.wrapS]), i.texParameteri(N, 10243, F[L.wrapT]), (N === 32879 || N === 35866) && i.texParameteri(N, 32882, F[L.wrapR]), i.texParameteri(N, 10240, R[L.magFilter]), i.texParameteri(N, 10241, R[L.minFilter])) : (i.texParameteri(N, 10242, 33071), i.texParameteri(N, 10243, 33071), (N === 32879 || N === 35866) && i.texParameteri(N, 32882, 33071), (L.wrapS !== ht || L.wrapT !== ht) && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."), i.texParameteri(N, 10240, A(L.magFilter)), i.texParameteri(N, 10241, A(L.minFilter)), L.minFilter !== ke && L.minFilter !== Pe && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")), e.has("EXT_texture_filter_anisotropic") === !0) {
      const l0 = e.get("EXT_texture_filter_anisotropic");
      if (L.magFilter === ke || L.minFilter !== k8 && L.minFilter !== qn || L.type === P1 && e.has("OES_texture_float_linear") === !1 || o === !1 && L.type === q9 && e.has("OES_texture_half_float_linear") === !1)
        return;
      (L.anisotropy > 1 || n.get(L).__currentAnisotropy) && (i.texParameterf(N, l0.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(L.anisotropy, s.getMaxAnisotropy())), n.get(L).__currentAnisotropy = L.anisotropy);
    }
  }
  function B(N, L) {
    let q = !1;
    N.__webglInit === void 0 && (N.__webglInit = !0, L.addEventListener("dispose", D));
    const l0 = L.source;
    let h0 = g.get(l0);
    h0 === void 0 && (h0 = {}, g.set(l0, h0));
    const w0 = i0(L);
    if (w0 !== N.__cacheKey) {
      h0[w0] === void 0 && (h0[w0] = {
        texture: i.createTexture(),
        usedTimes: 0
      }, a.memory.textures++, q = !0), h0[w0].usedTimes++;
      const B0 = h0[N.__cacheKey];
      B0 !== void 0 && (h0[N.__cacheKey].usedTimes--, B0.usedTimes === 0 && U(L)), N.__cacheKey = w0, N.__webglTexture = h0[w0].texture;
    }
    return q;
  }
  function m0(N, L, q) {
    let l0 = 3553;
    (L.isDataArrayTexture || L.isCompressedArrayTexture) && (l0 = 35866), L.isData3DTexture && (l0 = 32879);
    const h0 = B(N, L), w0 = L.source;
    t.bindTexture(l0, N.__webglTexture, 33984 + q);
    const B0 = n.get(w0);
    if (w0.version !== B0.__version || h0 === !0) {
      t.activeTexture(33984 + q), i.pixelStorei(37440, L.flipY), i.pixelStorei(37441, L.premultiplyAlpha), i.pixelStorei(3317, L.unpackAlignment), i.pixelStorei(37443, 0);
      const T0 = w(L) && b(L.image) === !1;
      let Q = y(L.image, T0, !1, h);
      Q = ce(L, Q);
      const C0 = b(Q) || o, O0 = r.convert(L.format, L.encoding);
      let z0 = r.convert(L.type), A0 = T(L.internalFormat, O0, z0, L.encoding, L.isVideoTexture);
      j(l0, L, C0);
      let I0;
      const se = L.mipmaps, me = o && L.isVideoTexture !== !0, Oe = B0.__version === void 0 || h0 === !0, k = M(L, Q, C0);
      if (L.isDepthTexture)
        A0 = 6402, o ? L.type === P1 ? A0 = 36012 : L.type === Un ? A0 = 33190 : L.type === Pi ? A0 = 35056 : A0 = 33189 : L.type === P1 && console.error("WebGLRenderer: Floating point depth texture requires WebGL2."), L.format === Hn && A0 === 6402 && L.type !== o2 && L.type !== Un && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."), L.type = Un, z0 = r.convert(L.type)), L.format === Oi && A0 === 6402 && (A0 = 34041, L.type !== Pi && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."), L.type = Pi, z0 = r.convert(L.type))), Oe && (me ? t.texStorage2D(3553, 1, A0, Q.width, Q.height) : t.texImage2D(3553, 0, A0, Q.width, Q.height, 0, O0, z0, null));
      else if (L.isDataTexture)
        if (se.length > 0 && C0) {
          me && Oe && t.texStorage2D(3553, k, A0, se[0].width, se[0].height);
          for (let K = 0, c0 = se.length; K < c0; K++)
            I0 = se[K], me ? t.texSubImage2D(3553, K, 0, 0, I0.width, I0.height, O0, z0, I0.data) : t.texImage2D(3553, K, A0, I0.width, I0.height, 0, O0, z0, I0.data);
          L.generateMipmaps = !1;
        } else
          me ? (Oe && t.texStorage2D(3553, k, A0, Q.width, Q.height), t.texSubImage2D(3553, 0, 0, 0, Q.width, Q.height, O0, z0, Q.data)) : t.texImage2D(3553, 0, A0, Q.width, Q.height, 0, O0, z0, Q.data);
      else if (L.isCompressedTexture)
        if (L.isCompressedArrayTexture) {
          me && Oe && t.texStorage3D(35866, k, A0, se[0].width, se[0].height, Q.depth);
          for (let K = 0, c0 = se.length; K < c0; K++)
            I0 = se[K], L.format !== Ot ? O0 !== null ? me ? t.compressedTexSubImage3D(35866, K, 0, 0, 0, I0.width, I0.height, Q.depth, O0, I0.data, 0, 0) : t.compressedTexImage3D(35866, K, A0, I0.width, I0.height, Q.depth, 0, I0.data, 0, 0) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : me ? t.texSubImage3D(35866, K, 0, 0, 0, I0.width, I0.height, Q.depth, O0, z0, I0.data) : t.texImage3D(35866, K, A0, I0.width, I0.height, Q.depth, 0, O0, z0, I0.data);
        } else {
          me && Oe && t.texStorage2D(3553, k, A0, se[0].width, se[0].height);
          for (let K = 0, c0 = se.length; K < c0; K++)
            I0 = se[K], L.format !== Ot ? O0 !== null ? me ? t.compressedTexSubImage2D(3553, K, 0, 0, I0.width, I0.height, O0, I0.data) : t.compressedTexImage2D(3553, K, A0, I0.width, I0.height, 0, I0.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : me ? t.texSubImage2D(3553, K, 0, 0, I0.width, I0.height, O0, z0, I0.data) : t.texImage2D(3553, K, A0, I0.width, I0.height, 0, O0, z0, I0.data);
        }
      else if (L.isDataArrayTexture)
        me ? (Oe && t.texStorage3D(35866, k, A0, Q.width, Q.height, Q.depth), t.texSubImage3D(35866, 0, 0, 0, 0, Q.width, Q.height, Q.depth, O0, z0, Q.data)) : t.texImage3D(35866, 0, A0, Q.width, Q.height, Q.depth, 0, O0, z0, Q.data);
      else if (L.isData3DTexture)
        me ? (Oe && t.texStorage3D(32879, k, A0, Q.width, Q.height, Q.depth), t.texSubImage3D(32879, 0, 0, 0, 0, Q.width, Q.height, Q.depth, O0, z0, Q.data)) : t.texImage3D(32879, 0, A0, Q.width, Q.height, Q.depth, 0, O0, z0, Q.data);
      else if (L.isFramebufferTexture) {
        if (Oe)
          if (me)
            t.texStorage2D(3553, k, A0, Q.width, Q.height);
          else {
            let K = Q.width, c0 = Q.height;
            for (let E0 = 0; E0 < k; E0++)
              t.texImage2D(3553, E0, A0, K, c0, 0, O0, z0, null), K >>= 1, c0 >>= 1;
          }
      } else if (se.length > 0 && C0) {
        me && Oe && t.texStorage2D(3553, k, A0, se[0].width, se[0].height);
        for (let K = 0, c0 = se.length; K < c0; K++)
          I0 = se[K], me ? t.texSubImage2D(3553, K, 0, 0, O0, z0, I0) : t.texImage2D(3553, K, A0, O0, z0, I0);
        L.generateMipmaps = !1;
      } else
        me ? (Oe && t.texStorage2D(3553, k, A0, Q.width, Q.height), t.texSubImage2D(3553, 0, 0, 0, O0, z0, Q)) : t.texImage2D(3553, 0, A0, O0, z0, Q);
      x(L, C0) && S(l0), B0.__version = w0.version, L.onUpdate && L.onUpdate(L);
    }
    N.__version = L.version;
  }
  function b0(N, L, q) {
    if (L.image.length !== 6)
      return;
    const l0 = B(N, L), h0 = L.source;
    t.bindTexture(34067, N.__webglTexture, 33984 + q);
    const w0 = n.get(h0);
    if (h0.version !== w0.__version || l0 === !0) {
      t.activeTexture(33984 + q), i.pixelStorei(37440, L.flipY), i.pixelStorei(37441, L.premultiplyAlpha), i.pixelStorei(3317, L.unpackAlignment), i.pixelStorei(37443, 0);
      const B0 = L.isCompressedTexture || L.image[0].isCompressedTexture, T0 = L.image[0] && L.image[0].isDataTexture, Q = [];
      for (let K = 0; K < 6; K++)
        !B0 && !T0 ? Q[K] = y(L.image[K], !1, !0, l) : Q[K] = T0 ? L.image[K].image : L.image[K], Q[K] = ce(L, Q[K]);
      const C0 = Q[0], O0 = b(C0) || o, z0 = r.convert(L.format, L.encoding), A0 = r.convert(L.type), I0 = T(L.internalFormat, z0, A0, L.encoding), se = o && L.isVideoTexture !== !0, me = w0.__version === void 0 || l0 === !0;
      let Oe = M(L, C0, O0);
      j(34067, L, O0);
      let k;
      if (B0) {
        se && me && t.texStorage2D(34067, Oe, I0, C0.width, C0.height);
        for (let K = 0; K < 6; K++) {
          k = Q[K].mipmaps;
          for (let c0 = 0; c0 < k.length; c0++) {
            const E0 = k[c0];
            L.format !== Ot ? z0 !== null ? se ? t.compressedTexSubImage2D(34069 + K, c0, 0, 0, E0.width, E0.height, z0, E0.data) : t.compressedTexImage2D(34069 + K, c0, I0, E0.width, E0.height, 0, E0.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : se ? t.texSubImage2D(34069 + K, c0, 0, 0, E0.width, E0.height, z0, A0, E0.data) : t.texImage2D(34069 + K, c0, I0, E0.width, E0.height, 0, z0, A0, E0.data);
          }
        }
      } else {
        k = L.mipmaps, se && me && (k.length > 0 && Oe++, t.texStorage2D(34067, Oe, I0, Q[0].width, Q[0].height));
        for (let K = 0; K < 6; K++)
          if (T0) {
            se ? t.texSubImage2D(34069 + K, 0, 0, 0, Q[K].width, Q[K].height, z0, A0, Q[K].data) : t.texImage2D(34069 + K, 0, I0, Q[K].width, Q[K].height, 0, z0, A0, Q[K].data);
            for (let c0 = 0; c0 < k.length; c0++) {
              const L0 = k[c0].image[K].image;
              se ? t.texSubImage2D(34069 + K, c0 + 1, 0, 0, L0.width, L0.height, z0, A0, L0.data) : t.texImage2D(34069 + K, c0 + 1, I0, L0.width, L0.height, 0, z0, A0, L0.data);
            }
          } else {
            se ? t.texSubImage2D(34069 + K, 0, 0, 0, z0, A0, Q[K]) : t.texImage2D(34069 + K, 0, I0, z0, A0, Q[K]);
            for (let c0 = 0; c0 < k.length; c0++) {
              const E0 = k[c0];
              se ? t.texSubImage2D(34069 + K, c0 + 1, 0, 0, z0, A0, E0.image[K]) : t.texImage2D(34069 + K, c0 + 1, I0, z0, A0, E0.image[K]);
            }
          }
      }
      x(L, O0) && S(34067), w0.__version = h0.version, L.onUpdate && L.onUpdate(L);
    }
    N.__version = L.version;
  }
  function e0(N, L, q, l0, h0) {
    const w0 = r.convert(q.format, q.encoding), B0 = r.convert(q.type), T0 = T(q.internalFormat, w0, B0, q.encoding);
    n.get(L).__hasExternalTextures || (h0 === 32879 || h0 === 35866 ? t.texImage3D(h0, 0, T0, L.width, L.height, L.depth, 0, w0, B0, null) : t.texImage2D(h0, 0, T0, L.width, L.height, 0, w0, B0, null)), t.bindFramebuffer(36160, N), N0(L) ? u.framebufferTexture2DMultisampleEXT(36160, l0, h0, n.get(q).__webglTexture, 0, D0(L)) : (h0 === 3553 || h0 >= 34069 && h0 <= 34074) && i.framebufferTexture2D(36160, l0, h0, n.get(q).__webglTexture, 0), t.bindFramebuffer(36160, null);
  }
  function M0(N, L, q) {
    if (i.bindRenderbuffer(36161, N), L.depthBuffer && !L.stencilBuffer) {
      let l0 = 33189;
      if (q || N0(L)) {
        const h0 = L.depthTexture;
        h0 && h0.isDepthTexture && (h0.type === P1 ? l0 = 36012 : h0.type === Un && (l0 = 33190));
        const w0 = D0(L);
        N0(L) ? u.renderbufferStorageMultisampleEXT(36161, w0, l0, L.width, L.height) : i.renderbufferStorageMultisample(36161, w0, l0, L.width, L.height);
      } else
        i.renderbufferStorage(36161, l0, L.width, L.height);
      i.framebufferRenderbuffer(36160, 36096, 36161, N);
    } else if (L.depthBuffer && L.stencilBuffer) {
      const l0 = D0(L);
      q && N0(L) === !1 ? i.renderbufferStorageMultisample(36161, l0, 35056, L.width, L.height) : N0(L) ? u.renderbufferStorageMultisampleEXT(36161, l0, 35056, L.width, L.height) : i.renderbufferStorage(36161, 34041, L.width, L.height), i.framebufferRenderbuffer(36160, 33306, 36161, N);
    } else {
      const l0 = L.isWebGLMultipleRenderTargets === !0 ? L.texture : [L.texture];
      for (let h0 = 0; h0 < l0.length; h0++) {
        const w0 = l0[h0], B0 = r.convert(w0.format, w0.encoding), T0 = r.convert(w0.type), Q = T(w0.internalFormat, B0, T0, w0.encoding), C0 = D0(L);
        q && N0(L) === !1 ? i.renderbufferStorageMultisample(36161, C0, Q, L.width, L.height) : N0(L) ? u.renderbufferStorageMultisampleEXT(36161, C0, Q, L.width, L.height) : i.renderbufferStorage(36161, Q, L.width, L.height);
      }
    }
    i.bindRenderbuffer(36161, null);
  }
  function r0(N, L) {
    if (L && L.isWebGLCubeRenderTarget)
      throw new Error("Depth Texture with cube render targets is not supported");
    if (t.bindFramebuffer(36160, N), !(L.depthTexture && L.depthTexture.isDepthTexture))
      throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
    (!n.get(L.depthTexture).__webglTexture || L.depthTexture.image.width !== L.width || L.depthTexture.image.height !== L.height) && (L.depthTexture.image.width = L.width, L.depthTexture.image.height = L.height, L.depthTexture.needsUpdate = !0), a0(L.depthTexture, 0);
    const l0 = n.get(L.depthTexture).__webglTexture, h0 = D0(L);
    if (L.depthTexture.format === Hn)
      N0(L) ? u.framebufferTexture2DMultisampleEXT(36160, 36096, 3553, l0, 0, h0) : i.framebufferTexture2D(36160, 36096, 3553, l0, 0);
    else if (L.depthTexture.format === Oi)
      N0(L) ? u.framebufferTexture2DMultisampleEXT(36160, 33306, 3553, l0, 0, h0) : i.framebufferTexture2D(36160, 33306, 3553, l0, 0);
    else
      throw new Error("Unknown depthTexture format");
  }
  function Z(N) {
    const L = n.get(N), q = N.isWebGLCubeRenderTarget === !0;
    if (N.depthTexture && !L.__autoAllocateDepthBuffer) {
      if (q)
        throw new Error("target.depthTexture not supported in Cube render targets");
      r0(L.__webglFramebuffer, N);
    } else if (q) {
      L.__webglDepthbuffer = [];
      for (let l0 = 0; l0 < 6; l0++)
        t.bindFramebuffer(36160, L.__webglFramebuffer[l0]), L.__webglDepthbuffer[l0] = i.createRenderbuffer(), M0(L.__webglDepthbuffer[l0], N, !1);
    } else
      t.bindFramebuffer(36160, L.__webglFramebuffer), L.__webglDepthbuffer = i.createRenderbuffer(), M0(L.__webglDepthbuffer, N, !1);
    t.bindFramebuffer(36160, null);
  }
  function n0(N, L, q) {
    const l0 = n.get(N);
    L !== void 0 && e0(l0.__webglFramebuffer, N, N.texture, 36064, 3553), q !== void 0 && Z(N);
  }
  function S0(N) {
    const L = N.texture, q = n.get(N), l0 = n.get(L);
    N.addEventListener("dispose", z), N.isWebGLMultipleRenderTargets !== !0 && (l0.__webglTexture === void 0 && (l0.__webglTexture = i.createTexture()), l0.__version = L.version, a.memory.textures++);
    const h0 = N.isWebGLCubeRenderTarget === !0, w0 = N.isWebGLMultipleRenderTargets === !0, B0 = b(N) || o;
    if (h0) {
      q.__webglFramebuffer = [];
      for (let T0 = 0; T0 < 6; T0++)
        q.__webglFramebuffer[T0] = i.createFramebuffer();
    } else {
      if (q.__webglFramebuffer = i.createFramebuffer(), w0)
        if (s.drawBuffers) {
          const T0 = N.texture;
          for (let Q = 0, C0 = T0.length; Q < C0; Q++) {
            const O0 = n.get(T0[Q]);
            O0.__webglTexture === void 0 && (O0.__webglTexture = i.createTexture(), a.memory.textures++);
          }
        } else
          console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");
      if (o && N.samples > 0 && N0(N) === !1) {
        const T0 = w0 ? L : [L];
        q.__webglMultisampledFramebuffer = i.createFramebuffer(), q.__webglColorRenderbuffer = [], t.bindFramebuffer(36160, q.__webglMultisampledFramebuffer);
        for (let Q = 0; Q < T0.length; Q++) {
          const C0 = T0[Q];
          q.__webglColorRenderbuffer[Q] = i.createRenderbuffer(), i.bindRenderbuffer(36161, q.__webglColorRenderbuffer[Q]);
          const O0 = r.convert(C0.format, C0.encoding), z0 = r.convert(C0.type), A0 = T(C0.internalFormat, O0, z0, C0.encoding, N.isXRRenderTarget === !0), I0 = D0(N);
          i.renderbufferStorageMultisample(36161, I0, A0, N.width, N.height), i.framebufferRenderbuffer(36160, 36064 + Q, 36161, q.__webglColorRenderbuffer[Q]);
        }
        i.bindRenderbuffer(36161, null), N.depthBuffer && (q.__webglDepthRenderbuffer = i.createRenderbuffer(), M0(q.__webglDepthRenderbuffer, N, !0)), t.bindFramebuffer(36160, null);
      }
    }
    if (h0) {
      t.bindTexture(34067, l0.__webglTexture), j(34067, L, B0);
      for (let T0 = 0; T0 < 6; T0++)
        e0(q.__webglFramebuffer[T0], N, L, 36064, 34069 + T0);
      x(L, B0) && S(34067), t.unbindTexture();
    } else if (w0) {
      const T0 = N.texture;
      for (let Q = 0, C0 = T0.length; Q < C0; Q++) {
        const O0 = T0[Q], z0 = n.get(O0);
        t.bindTexture(3553, z0.__webglTexture), j(3553, O0, B0), e0(q.__webglFramebuffer, N, O0, 36064 + Q, 3553), x(O0, B0) && S(3553);
      }
      t.unbindTexture();
    } else {
      let T0 = 3553;
      (N.isWebGL3DRenderTarget || N.isWebGLArrayRenderTarget) && (o ? T0 = N.isWebGL3DRenderTarget ? 32879 : 35866 : console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")), t.bindTexture(T0, l0.__webglTexture), j(T0, L, B0), e0(q.__webglFramebuffer, N, L, 36064, T0), x(L, B0) && S(T0), t.unbindTexture();
    }
    N.depthBuffer && Z(N);
  }
  function p0(N) {
    const L = b(N) || o, q = N.isWebGLMultipleRenderTargets === !0 ? N.texture : [N.texture];
    for (let l0 = 0, h0 = q.length; l0 < h0; l0++) {
      const w0 = q[l0];
      if (x(w0, L)) {
        const B0 = N.isWebGLCubeRenderTarget ? 34067 : 3553, T0 = n.get(w0).__webglTexture;
        t.bindTexture(B0, T0), S(B0), t.unbindTexture();
      }
    }
  }
  function P0(N) {
    if (o && N.samples > 0 && N0(N) === !1) {
      const L = N.isWebGLMultipleRenderTargets ? N.texture : [N.texture], q = N.width, l0 = N.height;
      let h0 = 16384;
      const w0 = [], B0 = N.stencilBuffer ? 33306 : 36096, T0 = n.get(N), Q = N.isWebGLMultipleRenderTargets === !0;
      if (Q)
        for (let C0 = 0; C0 < L.length; C0++)
          t.bindFramebuffer(36160, T0.__webglMultisampledFramebuffer), i.framebufferRenderbuffer(36160, 36064 + C0, 36161, null), t.bindFramebuffer(36160, T0.__webglFramebuffer), i.framebufferTexture2D(36009, 36064 + C0, 3553, null, 0);
      t.bindFramebuffer(36008, T0.__webglMultisampledFramebuffer), t.bindFramebuffer(36009, T0.__webglFramebuffer);
      for (let C0 = 0; C0 < L.length; C0++) {
        w0.push(36064 + C0), N.depthBuffer && w0.push(B0);
        const O0 = T0.__ignoreDepthValues !== void 0 ? T0.__ignoreDepthValues : !1;
        if (O0 === !1 && (N.depthBuffer && (h0 |= 256), N.stencilBuffer && (h0 |= 1024)), Q && i.framebufferRenderbuffer(36008, 36064, 36161, T0.__webglColorRenderbuffer[C0]), O0 === !0 && (i.invalidateFramebuffer(36008, [B0]), i.invalidateFramebuffer(36009, [B0])), Q) {
          const z0 = n.get(L[C0]).__webglTexture;
          i.framebufferTexture2D(36009, 36064, 3553, z0, 0);
        }
        i.blitFramebuffer(0, 0, q, l0, 0, 0, q, l0, h0, 9728), f && i.invalidateFramebuffer(36008, w0);
      }
      if (t.bindFramebuffer(36008, null), t.bindFramebuffer(36009, null), Q)
        for (let C0 = 0; C0 < L.length; C0++) {
          t.bindFramebuffer(36160, T0.__webglMultisampledFramebuffer), i.framebufferRenderbuffer(36160, 36064 + C0, 36161, T0.__webglColorRenderbuffer[C0]);
          const O0 = n.get(L[C0]).__webglTexture;
          t.bindFramebuffer(36160, T0.__webglFramebuffer), i.framebufferTexture2D(36009, 36064 + C0, 3553, O0, 0);
        }
      t.bindFramebuffer(36009, T0.__webglMultisampledFramebuffer);
    }
  }
  function D0(N) {
    return Math.min(d, N.samples);
  }
  function N0(N) {
    const L = n.get(N);
    return o && N.samples > 0 && e.has("WEBGL_multisampled_render_to_texture") === !0 && L.__useRenderToTexture !== !1;
  }
  function j0(N) {
    const L = a.render.frame;
    p.get(N) !== L && (p.set(N, L), N.update());
  }
  function ce(N, L) {
    const q = N.encoding, l0 = N.format, h0 = N.type;
    return N.isCompressedTexture === !0 || N.isVideoTexture === !0 || N.format === Or || q !== jn && (q === ve ? o === !1 ? e.has("EXT_sRGB") === !0 && l0 === Ot ? (N.format = Or, N.minFilter = Pe, N.generateMipmaps = !1) : L = d2.sRGBToLinear(L) : (l0 !== Ot || h0 !== $n) && console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.") : console.error("THREE.WebGLTextures: Unsupported texture encoding:", q)), L;
  }
  this.allocateTextureUnit = X, this.resetTextureUnits = W, this.setTexture2D = a0, this.setTexture2DArray = x0, this.setTexture3D = u0, this.setTextureCube = E, this.rebindTextures = n0, this.setupRenderTarget = S0, this.updateRenderTargetMipmap = p0, this.updateMultisampleRenderTarget = P0, this.setupDepthRenderbuffer = Z, this.setupFrameBufferTexture = e0, this.useMultisampledRTT = N0;
}
function Th(i, e, t) {
  const n = t.isWebGL2;
  function s(r, a = null) {
    let o;
    if (r === $n)
      return 5121;
    if (r === qc)
      return 32819;
    if (r === $c)
      return 32820;
    if (r === Xc)
      return 5120;
    if (r === Yc)
      return 5122;
    if (r === o2)
      return 5123;
    if (r === Zc)
      return 5124;
    if (r === Un)
      return 5125;
    if (r === P1)
      return 5126;
    if (r === q9)
      return n ? 5131 : (o = e.get("OES_texture_half_float"), o !== null ? o.HALF_FLOAT_OES : null);
    if (r === jc)
      return 6406;
    if (r === Ot)
      return 6408;
    if (r === Jc)
      return 6409;
    if (r === Kc)
      return 6410;
    if (r === Hn)
      return 6402;
    if (r === Oi)
      return 34041;
    if (r === Or)
      return o = e.get("EXT_sRGB"), o !== null ? o.SRGB_ALPHA_EXT : null;
    if (r === l2)
      return 6403;
    if (r === Qc)
      return 36244;
    if (r === eh)
      return 33319;
    if (r === th)
      return 33320;
    if (r === nh)
      return 36249;
    if (r === dr || r === fr || r === pr || r === mr)
      if (a === ve)
        if (o = e.get("WEBGL_compressed_texture_s3tc_srgb"), o !== null) {
          if (r === dr)
            return o.COMPRESSED_SRGB_S3TC_DXT1_EXT;
          if (r === fr)
            return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
          if (r === pr)
            return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
          if (r === mr)
            return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
        } else
          return null;
      else if (o = e.get("WEBGL_compressed_texture_s3tc"), o !== null) {
        if (r === dr)
          return o.COMPRESSED_RGB_S3TC_DXT1_EXT;
        if (r === fr)
          return o.COMPRESSED_RGBA_S3TC_DXT1_EXT;
        if (r === pr)
          return o.COMPRESSED_RGBA_S3TC_DXT3_EXT;
        if (r === mr)
          return o.COMPRESSED_RGBA_S3TC_DXT5_EXT;
      } else
        return null;
    if (r === e5 || r === t5 || r === n5 || r === i5)
      if (o = e.get("WEBGL_compressed_texture_pvrtc"), o !== null) {
        if (r === e5)
          return o.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
        if (r === t5)
          return o.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
        if (r === n5)
          return o.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
        if (r === i5)
          return o.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
      } else
        return null;
    if (r === ih)
      return o = e.get("WEBGL_compressed_texture_etc1"), o !== null ? o.COMPRESSED_RGB_ETC1_WEBGL : null;
    if (r === s5 || r === r5)
      if (o = e.get("WEBGL_compressed_texture_etc"), o !== null) {
        if (r === s5)
          return a === ve ? o.COMPRESSED_SRGB8_ETC2 : o.COMPRESSED_RGB8_ETC2;
        if (r === r5)
          return a === ve ? o.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : o.COMPRESSED_RGBA8_ETC2_EAC;
      } else
        return null;
    if (r === a5 || r === o5 || r === l5 || r === c5 || r === h5 || r === u5 || r === d5 || r === f5 || r === p5 || r === m5 || r === g5 || r === _5 || r === v5 || r === y5)
      if (o = e.get("WEBGL_compressed_texture_astc"), o !== null) {
        if (r === a5)
          return a === ve ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : o.COMPRESSED_RGBA_ASTC_4x4_KHR;
        if (r === o5)
          return a === ve ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : o.COMPRESSED_RGBA_ASTC_5x4_KHR;
        if (r === l5)
          return a === ve ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : o.COMPRESSED_RGBA_ASTC_5x5_KHR;
        if (r === c5)
          return a === ve ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : o.COMPRESSED_RGBA_ASTC_6x5_KHR;
        if (r === h5)
          return a === ve ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : o.COMPRESSED_RGBA_ASTC_6x6_KHR;
        if (r === u5)
          return a === ve ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : o.COMPRESSED_RGBA_ASTC_8x5_KHR;
        if (r === d5)
          return a === ve ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : o.COMPRESSED_RGBA_ASTC_8x6_KHR;
        if (r === f5)
          return a === ve ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : o.COMPRESSED_RGBA_ASTC_8x8_KHR;
        if (r === p5)
          return a === ve ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : o.COMPRESSED_RGBA_ASTC_10x5_KHR;
        if (r === m5)
          return a === ve ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : o.COMPRESSED_RGBA_ASTC_10x6_KHR;
        if (r === g5)
          return a === ve ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : o.COMPRESSED_RGBA_ASTC_10x8_KHR;
        if (r === _5)
          return a === ve ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : o.COMPRESSED_RGBA_ASTC_10x10_KHR;
        if (r === v5)
          return a === ve ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : o.COMPRESSED_RGBA_ASTC_12x10_KHR;
        if (r === y5)
          return a === ve ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : o.COMPRESSED_RGBA_ASTC_12x12_KHR;
      } else
        return null;
    if (r === gr)
      if (o = e.get("EXT_texture_compression_bptc"), o !== null) {
        if (r === gr)
          return a === ve ? o.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : o.COMPRESSED_RGBA_BPTC_UNORM_EXT;
      } else
        return null;
    if (r === sh || r === x5 || r === b5 || r === w5)
      if (o = e.get("EXT_texture_compression_rgtc"), o !== null) {
        if (r === gr)
          return o.COMPRESSED_RED_RGTC1_EXT;
        if (r === x5)
          return o.COMPRESSED_SIGNED_RED_RGTC1_EXT;
        if (r === b5)
          return o.COMPRESSED_RED_GREEN_RGTC2_EXT;
        if (r === w5)
          return o.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
      } else
        return null;
    return r === Pi ? n ? 34042 : (o = e.get("WEBGL_depth_texture"), o !== null ? o.UNSIGNED_INT_24_8_WEBGL : null) : i[r] !== void 0 ? i[r] : null;
  }
  return { convert: s };
}
class Ah extends Qe {
  constructor(e = []) {
    super(), this.isArrayCamera = !0, this.cameras = e;
  }
}
class Mi extends G0 {
  constructor() {
    super(), this.isGroup = !0, this.type = "Group";
  }
}
const Wx = { type: "move" };
class Z6 {
  constructor() {
    this._targetRay = null, this._grip = null, this._hand = null;
  }
  getHandSpace() {
    return this._hand === null && (this._hand = new Mi(), this._hand.matrixAutoUpdate = !1, this._hand.visible = !1, this._hand.joints = {}, this._hand.inputState = { pinching: !1 }), this._hand;
  }
  getTargetRaySpace() {
    return this._targetRay === null && (this._targetRay = new Mi(), this._targetRay.matrixAutoUpdate = !1, this._targetRay.visible = !1, this._targetRay.hasLinearVelocity = !1, this._targetRay.linearVelocity = new C(), this._targetRay.hasAngularVelocity = !1, this._targetRay.angularVelocity = new C()), this._targetRay;
  }
  getGripSpace() {
    return this._grip === null && (this._grip = new Mi(), this._grip.matrixAutoUpdate = !1, this._grip.visible = !1, this._grip.hasLinearVelocity = !1, this._grip.linearVelocity = new C(), this._grip.hasAngularVelocity = !1, this._grip.angularVelocity = new C()), this._grip;
  }
  dispatchEvent(e) {
    return this._targetRay !== null && this._targetRay.dispatchEvent(e), this._grip !== null && this._grip.dispatchEvent(e), this._hand !== null && this._hand.dispatchEvent(e), this;
  }
  connect(e) {
    if (e && e.hand) {
      const t = this._hand;
      if (t)
        for (const n of e.hand.values())
          this._getHandJoint(t, n);
    }
    return this.dispatchEvent({ type: "connected", data: e }), this;
  }
  disconnect(e) {
    return this.dispatchEvent({ type: "disconnected", data: e }), this._targetRay !== null && (this._targetRay.visible = !1), this._grip !== null && (this._grip.visible = !1), this._hand !== null && (this._hand.visible = !1), this;
  }
  update(e, t, n) {
    let s = null, r = null, a = null;
    const o = this._targetRay, c = this._grip, l = this._hand;
    if (e && t.session.visibilityState !== "visible-blurred") {
      if (l && e.hand) {
        a = !0;
        for (const _ of e.hand.values()) {
          const g = t.getJointPose(_, n), m = this._getHandJoint(l, _);
          g !== null && (m.matrix.fromArray(g.transform.matrix), m.matrix.decompose(m.position, m.rotation, m.scale), m.jointRadius = g.radius), m.visible = g !== null;
        }
        const h = l.joints["index-finger-tip"], d = l.joints["thumb-tip"], u = h.position.distanceTo(d.position), f = 0.02, p = 5e-3;
        l.inputState.pinching && u > f + p ? (l.inputState.pinching = !1, this.dispatchEvent({
          type: "pinchend",
          handedness: e.handedness,
          target: this
        })) : !l.inputState.pinching && u <= f - p && (l.inputState.pinching = !0, this.dispatchEvent({
          type: "pinchstart",
          handedness: e.handedness,
          target: this
        }));
      } else
        c !== null && e.gripSpace && (r = t.getPose(e.gripSpace, n), r !== null && (c.matrix.fromArray(r.transform.matrix), c.matrix.decompose(c.position, c.rotation, c.scale), r.linearVelocity ? (c.hasLinearVelocity = !0, c.linearVelocity.copy(r.linearVelocity)) : c.hasLinearVelocity = !1, r.angularVelocity ? (c.hasAngularVelocity = !0, c.angularVelocity.copy(r.angularVelocity)) : c.hasAngularVelocity = !1));
      o !== null && (s = t.getPose(e.targetRaySpace, n), s === null && r !== null && (s = r), s !== null && (o.matrix.fromArray(s.transform.matrix), o.matrix.decompose(o.position, o.rotation, o.scale), s.linearVelocity ? (o.hasLinearVelocity = !0, o.linearVelocity.copy(s.linearVelocity)) : o.hasLinearVelocity = !1, s.angularVelocity ? (o.hasAngularVelocity = !0, o.angularVelocity.copy(s.angularVelocity)) : o.hasAngularVelocity = !1, this.dispatchEvent(Wx)));
    }
    return o !== null && (o.visible = s !== null), c !== null && (c.visible = r !== null), l !== null && (l.visible = a !== null), this;
  }
  // private method
  _getHandJoint(e, t) {
    if (e.joints[t.jointName] === void 0) {
      const n = new Mi();
      n.matrixAutoUpdate = !1, n.visible = !1, e.joints[t.jointName] = n, e.add(n);
    }
    return e.joints[t.jointName];
  }
}
class Ch extends Be {
  constructor(e, t, n, s, r, a, o, c, l, h) {
    if (h = h !== void 0 ? h : Hn, h !== Hn && h !== Oi)
      throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
    n === void 0 && h === Hn && (n = Un), n === void 0 && h === Oi && (n = Pi), super(null, s, r, a, o, c, h, n, l), this.isDepthTexture = !0, this.image = { width: e, height: t }, this.magFilter = o !== void 0 ? o : ke, this.minFilter = c !== void 0 ? c : ke, this.flipY = !1, this.generateMipmaps = !1;
  }
}
class Xx extends ln {
  constructor(e, t) {
    super();
    const n = this;
    let s = null, r = 1, a = null, o = "local-floor", c = 1, l = null, h = null, d = null, u = null, f = null, p = null;
    const _ = t.getContextAttributes();
    let g = null, m = null;
    const v = [], y = [], b = /* @__PURE__ */ new Set(), w = /* @__PURE__ */ new Map(), x = new Qe();
    x.layers.enable(1), x.viewport = new pe();
    const S = new Qe();
    S.layers.enable(2), S.viewport = new pe();
    const T = [x, S], M = new Ah();
    M.layers.enable(1), M.layers.enable(2);
    let A = null, D = null;
    this.cameraAutoUpdate = !0, this.enabled = !1, this.isPresenting = !1, this.getController = function(E) {
      let F = v[E];
      return F === void 0 && (F = new Z6(), v[E] = F), F.getTargetRaySpace();
    }, this.getControllerGrip = function(E) {
      let F = v[E];
      return F === void 0 && (F = new Z6(), v[E] = F), F.getGripSpace();
    }, this.getHand = function(E) {
      let F = v[E];
      return F === void 0 && (F = new Z6(), v[E] = F), F.getHandSpace();
    };
    function z(E) {
      const F = y.indexOf(E.inputSource);
      if (F === -1)
        return;
      const R = v[F];
      R !== void 0 && R.dispatchEvent({ type: E.type, data: E.inputSource });
    }
    function O() {
      s.removeEventListener("select", z), s.removeEventListener("selectstart", z), s.removeEventListener("selectend", z), s.removeEventListener("squeeze", z), s.removeEventListener("squeezestart", z), s.removeEventListener("squeezeend", z), s.removeEventListener("end", O), s.removeEventListener("inputsourceschange", U);
      for (let E = 0; E < v.length; E++) {
        const F = y[E];
        F !== null && (y[E] = null, v[E].disconnect(F));
      }
      A = null, D = null, e.setRenderTarget(g), f = null, u = null, d = null, s = null, m = null, u0.stop(), n.isPresenting = !1, n.dispatchEvent({ type: "sessionend" });
    }
    this.setFramebufferScaleFactor = function(E) {
      r = E, n.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
    }, this.setReferenceSpaceType = function(E) {
      o = E, n.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
    }, this.getReferenceSpace = function() {
      return l || a;
    }, this.setReferenceSpace = function(E) {
      l = E;
    }, this.getBaseLayer = function() {
      return u !== null ? u : f;
    }, this.getBinding = function() {
      return d;
    }, this.getFrame = function() {
      return p;
    }, this.getSession = function() {
      return s;
    }, this.setSession = async function(E) {
      if (s = E, s !== null) {
        if (g = e.getRenderTarget(), s.addEventListener("select", z), s.addEventListener("selectstart", z), s.addEventListener("selectend", z), s.addEventListener("squeeze", z), s.addEventListener("squeezestart", z), s.addEventListener("squeezeend", z), s.addEventListener("end", O), s.addEventListener("inputsourceschange", U), _.xrCompatible !== !0 && await t.makeXRCompatible(), s.renderState.layers === void 0 || e.capabilities.isWebGL2 === !1) {
          const F = {
            antialias: s.renderState.layers === void 0 ? _.antialias : !0,
            alpha: _.alpha,
            depth: _.depth,
            stencil: _.stencil,
            framebufferScaleFactor: r
          };
          f = new XRWebGLLayer(s, t, F), s.updateRenderState({ baseLayer: f }), m = new o1(
            f.framebufferWidth,
            f.framebufferHeight,
            {
              format: Ot,
              type: $n,
              encoding: e.outputEncoding,
              stencilBuffer: _.stencil
            }
          );
        } else {
          let F = null, R = null, j = null;
          _.depth && (j = _.stencil ? 35056 : 33190, F = _.stencil ? Oi : Hn, R = _.stencil ? Pi : Un);
          const B = {
            colorFormat: 32856,
            depthFormat: j,
            scaleFactor: r
          };
          d = new XRWebGLBinding(s, t), u = d.createProjectionLayer(B), s.updateRenderState({ layers: [u] }), m = new o1(
            u.textureWidth,
            u.textureHeight,
            {
              format: Ot,
              type: $n,
              depthTexture: new Ch(u.textureWidth, u.textureHeight, R, void 0, void 0, void 0, void 0, void 0, void 0, F),
              stencilBuffer: _.stencil,
              encoding: e.outputEncoding,
              samples: _.antialias ? 4 : 0
            }
          );
          const m0 = e.properties.get(m);
          m0.__ignoreDepthValues = u.ignoreDepthValues;
        }
        m.isXRRenderTarget = !0, this.setFoveation(c), l = null, a = await s.requestReferenceSpace(o), u0.setContext(s), u0.start(), n.isPresenting = !0, n.dispatchEvent({ type: "sessionstart" });
      }
    };
    function U(E) {
      for (let F = 0; F < E.removed.length; F++) {
        const R = E.removed[F], j = y.indexOf(R);
        j >= 0 && (y[j] = null, v[j].disconnect(R));
      }
      for (let F = 0; F < E.added.length; F++) {
        const R = E.added[F];
        let j = y.indexOf(R);
        if (j === -1) {
          for (let m0 = 0; m0 < v.length; m0++)
            if (m0 >= y.length) {
              y.push(R), j = m0;
              break;
            } else if (y[m0] === null) {
              y[m0] = R, j = m0;
              break;
            }
          if (j === -1)
            break;
        }
        const B = v[j];
        B && B.connect(R);
      }
    }
    const V = new C(), Y = new C();
    function W(E, F, R) {
      V.setFromMatrixPosition(F.matrixWorld), Y.setFromMatrixPosition(R.matrixWorld);
      const j = V.distanceTo(Y), B = F.projectionMatrix.elements, m0 = R.projectionMatrix.elements, b0 = B[14] / (B[10] - 1), e0 = B[14] / (B[10] + 1), M0 = (B[9] + 1) / B[5], r0 = (B[9] - 1) / B[5], Z = (B[8] - 1) / B[0], n0 = (m0[8] + 1) / m0[0], S0 = b0 * Z, p0 = b0 * n0, P0 = j / (-Z + n0), D0 = P0 * -Z;
      F.matrixWorld.decompose(E.position, E.quaternion, E.scale), E.translateX(D0), E.translateZ(P0), E.matrixWorld.compose(E.position, E.quaternion, E.scale), E.matrixWorldInverse.copy(E.matrixWorld).invert();
      const N0 = b0 + P0, j0 = e0 + P0, ce = S0 - D0, N = p0 + (j - D0), L = M0 * e0 / j0 * N0, q = r0 * e0 / j0 * N0;
      E.projectionMatrix.makePerspective(ce, N, L, q, N0, j0), E.projectionMatrixInverse.copy(E.projectionMatrix).invert();
    }
    function X(E, F) {
      F === null ? E.matrixWorld.copy(E.matrix) : E.matrixWorld.multiplyMatrices(F.matrixWorld, E.matrix), E.matrixWorldInverse.copy(E.matrixWorld).invert();
    }
    this.updateCamera = function(E) {
      if (s === null)
        return;
      M.near = S.near = x.near = E.near, M.far = S.far = x.far = E.far, (A !== M.near || D !== M.far) && (s.updateRenderState({
        depthNear: M.near,
        depthFar: M.far
      }), A = M.near, D = M.far);
      const F = E.parent, R = M.cameras;
      X(M, F);
      for (let j = 0; j < R.length; j++)
        X(R[j], F);
      R.length === 2 ? W(M, x, S) : M.projectionMatrix.copy(x.projectionMatrix), i0(E, M, F);
    };
    function i0(E, F, R) {
      R === null ? E.matrix.copy(F.matrixWorld) : (E.matrix.copy(R.matrixWorld), E.matrix.invert(), E.matrix.multiply(F.matrixWorld)), E.matrix.decompose(E.position, E.quaternion, E.scale), E.updateMatrixWorld(!0);
      const j = E.children;
      for (let B = 0, m0 = j.length; B < m0; B++)
        j[B].updateMatrixWorld(!0);
      E.projectionMatrix.copy(F.projectionMatrix), E.projectionMatrixInverse.copy(F.projectionMatrixInverse), E.isPerspectiveCamera && (E.fov = j9 * 2 * Math.atan(1 / E.projectionMatrix.elements[5]), E.zoom = 1);
    }
    this.getCamera = function() {
      return M;
    }, this.getFoveation = function() {
      if (!(u === null && f === null))
        return c;
    }, this.setFoveation = function(E) {
      c = E, u !== null && (u.fixedFoveation = E), f !== null && f.fixedFoveation !== void 0 && (f.fixedFoveation = E);
    }, this.getPlanes = function() {
      return b;
    };
    let a0 = null;
    function x0(E, F) {
      if (h = F.getViewerPose(l || a), p = F, h !== null) {
        const R = h.views;
        f !== null && (e.setRenderTargetFramebuffer(m, f.framebuffer), e.setRenderTarget(m));
        let j = !1;
        R.length !== M.cameras.length && (M.cameras.length = 0, j = !0);
        for (let B = 0; B < R.length; B++) {
          const m0 = R[B];
          let b0 = null;
          if (f !== null)
            b0 = f.getViewport(m0);
          else {
            const M0 = d.getViewSubImage(u, m0);
            b0 = M0.viewport, B === 0 && (e.setRenderTargetTextures(
              m,
              M0.colorTexture,
              u.ignoreDepthValues ? void 0 : M0.depthStencilTexture
            ), e.setRenderTarget(m));
          }
          let e0 = T[B];
          e0 === void 0 && (e0 = new Qe(), e0.layers.enable(B), e0.viewport = new pe(), T[B] = e0), e0.matrix.fromArray(m0.transform.matrix), e0.matrix.decompose(e0.position, e0.quaternion, e0.scale), e0.projectionMatrix.fromArray(m0.projectionMatrix), e0.projectionMatrixInverse.copy(e0.projectionMatrix).invert(), e0.viewport.set(b0.x, b0.y, b0.width, b0.height), B === 0 && (M.matrix.copy(e0.matrix), M.matrix.decompose(M.position, M.quaternion, M.scale)), j === !0 && M.cameras.push(e0);
        }
      }
      for (let R = 0; R < v.length; R++) {
        const j = y[R], B = v[R];
        j !== null && B !== void 0 && B.update(j, F, l || a);
      }
      if (a0 && a0(E, F), F.detectedPlanes) {
        n.dispatchEvent({ type: "planesdetected", data: F.detectedPlanes });
        let R = null;
        for (const j of b)
          F.detectedPlanes.has(j) || (R === null && (R = []), R.push(j));
        if (R !== null)
          for (const j of R)
            b.delete(j), w.delete(j), n.dispatchEvent({ type: "planeremoved", data: j });
        for (const j of F.detectedPlanes)
          if (!b.has(j))
            b.add(j), w.set(j, F.lastChangedTime), n.dispatchEvent({ type: "planeadded", data: j });
          else {
            const B = w.get(j);
            j.lastChangedTime > B && (w.set(j, j.lastChangedTime), n.dispatchEvent({ type: "planechanged", data: j }));
          }
      }
      p = null;
    }
    const u0 = new bh();
    u0.setAnimationLoop(x0), this.setAnimationLoop = function(E) {
      a0 = E;
    }, this.dispose = function() {
    };
  }
}
function Yx(i, e) {
  function t(g, m) {
    g.matrixAutoUpdate === !0 && g.updateMatrix(), m.value.copy(g.matrix);
  }
  function n(g, m) {
    m.color.getRGB(g.fogColor.value, vh(i)), m.isFog ? (g.fogNear.value = m.near, g.fogFar.value = m.far) : m.isFogExp2 && (g.fogDensity.value = m.density);
  }
  function s(g, m, v, y, b) {
    m.isMeshBasicMaterial || m.isMeshLambertMaterial ? r(g, m) : m.isMeshToonMaterial ? (r(g, m), d(g, m)) : m.isMeshPhongMaterial ? (r(g, m), h(g, m)) : m.isMeshStandardMaterial ? (r(g, m), u(g, m), m.isMeshPhysicalMaterial && f(g, m, b)) : m.isMeshMatcapMaterial ? (r(g, m), p(g, m)) : m.isMeshDepthMaterial ? r(g, m) : m.isMeshDistanceMaterial ? (r(g, m), _(g, m)) : m.isMeshNormalMaterial ? r(g, m) : m.isLineBasicMaterial ? (a(g, m), m.isLineDashedMaterial && o(g, m)) : m.isPointsMaterial ? c(g, m, v, y) : m.isSpriteMaterial ? l(g, m) : m.isShadowMaterial ? (g.color.value.copy(m.color), g.opacity.value = m.opacity) : m.isShaderMaterial && (m.uniformsNeedUpdate = !1);
  }
  function r(g, m) {
    g.opacity.value = m.opacity, m.color && g.diffuse.value.copy(m.color), m.emissive && g.emissive.value.copy(m.emissive).multiplyScalar(m.emissiveIntensity), m.map && (g.map.value = m.map, t(m.map, g.mapTransform)), m.alphaMap && (g.alphaMap.value = m.alphaMap, t(m.alphaMap, g.alphaMapTransform)), m.bumpMap && (g.bumpMap.value = m.bumpMap, t(m.bumpMap, g.bumpMapTransform), g.bumpScale.value = m.bumpScale, m.side === ut && (g.bumpScale.value *= -1)), m.normalMap && (g.normalMap.value = m.normalMap, t(m.normalMap, g.normalMapTransform), g.normalScale.value.copy(m.normalScale), m.side === ut && g.normalScale.value.negate()), m.displacementMap && (g.displacementMap.value = m.displacementMap, t(m.displacementMap, g.displacementMapTransform), g.displacementScale.value = m.displacementScale, g.displacementBias.value = m.displacementBias), m.emissiveMap && (g.emissiveMap.value = m.emissiveMap, t(m.emissiveMap, g.emissiveMapTransform)), m.specularMap && (g.specularMap.value = m.specularMap, t(m.specularMap, g.specularMapTransform)), m.alphaTest > 0 && (g.alphaTest.value = m.alphaTest);
    const v = e.get(m).envMap;
    if (v && (g.envMap.value = v, g.flipEnvMap.value = v.isCubeTexture && v.isRenderTargetTexture === !1 ? -1 : 1, g.reflectivity.value = m.reflectivity, g.ior.value = m.ior, g.refractionRatio.value = m.refractionRatio), m.lightMap) {
      g.lightMap.value = m.lightMap;
      const y = i.useLegacyLights === !0 ? Math.PI : 1;
      g.lightMapIntensity.value = m.lightMapIntensity * y, t(m.lightMap, g.lightMapTransform);
    }
    m.aoMap && (g.aoMap.value = m.aoMap, g.aoMapIntensity.value = m.aoMapIntensity, t(m.aoMap, g.aoMapTransform));
  }
  function a(g, m) {
    g.diffuse.value.copy(m.color), g.opacity.value = m.opacity, m.map && (g.map.value = m.map, t(m.map, g.mapTransform));
  }
  function o(g, m) {
    g.dashSize.value = m.dashSize, g.totalSize.value = m.dashSize + m.gapSize, g.scale.value = m.scale;
  }
  function c(g, m, v, y) {
    g.diffuse.value.copy(m.color), g.opacity.value = m.opacity, g.size.value = m.size * v, g.scale.value = y * 0.5, m.map && (g.map.value = m.map, t(m.map, g.uvTransform)), m.alphaMap && (g.alphaMap.value = m.alphaMap), m.alphaTest > 0 && (g.alphaTest.value = m.alphaTest);
  }
  function l(g, m) {
    g.diffuse.value.copy(m.color), g.opacity.value = m.opacity, g.rotation.value = m.rotation, m.map && (g.map.value = m.map, t(m.map, g.mapTransform)), m.alphaMap && (g.alphaMap.value = m.alphaMap), m.alphaTest > 0 && (g.alphaTest.value = m.alphaTest);
  }
  function h(g, m) {
    g.specular.value.copy(m.specular), g.shininess.value = Math.max(m.shininess, 1e-4);
  }
  function d(g, m) {
    m.gradientMap && (g.gradientMap.value = m.gradientMap);
  }
  function u(g, m) {
    g.metalness.value = m.metalness, m.metalnessMap && (g.metalnessMap.value = m.metalnessMap, t(m.metalnessMap, g.metalnessMapTransform)), g.roughness.value = m.roughness, m.roughnessMap && (g.roughnessMap.value = m.roughnessMap, t(m.roughnessMap, g.roughnessMapTransform)), e.get(m).envMap && (g.envMapIntensity.value = m.envMapIntensity);
  }
  function f(g, m, v) {
    g.ior.value = m.ior, m.sheen > 0 && (g.sheenColor.value.copy(m.sheenColor).multiplyScalar(m.sheen), g.sheenRoughness.value = m.sheenRoughness, m.sheenColorMap && (g.sheenColorMap.value = m.sheenColorMap, t(m.sheenColorMap, g.sheenColorMapTransform)), m.sheenRoughnessMap && (g.sheenRoughnessMap.value = m.sheenRoughnessMap, t(m.sheenRoughnessMap, g.sheenRoughnessMapTransform))), m.clearcoat > 0 && (g.clearcoat.value = m.clearcoat, g.clearcoatRoughness.value = m.clearcoatRoughness, m.clearcoatMap && (g.clearcoatMap.value = m.clearcoatMap, t(m.clearcoatMap, g.clearcoatMapTransform)), m.clearcoatRoughnessMap && (g.clearcoatRoughnessMap.value = m.clearcoatRoughnessMap, t(m.clearcoatRoughnessMap, g.clearcoatRoughnessMapTransform)), m.clearcoatNormalMap && (g.clearcoatNormalMap.value = m.clearcoatNormalMap, t(m.clearcoatNormalMap, g.clearcoatNormalMapTransform), g.clearcoatNormalScale.value.copy(m.clearcoatNormalScale), m.side === ut && g.clearcoatNormalScale.value.negate())), m.iridescence > 0 && (g.iridescence.value = m.iridescence, g.iridescenceIOR.value = m.iridescenceIOR, g.iridescenceThicknessMinimum.value = m.iridescenceThicknessRange[0], g.iridescenceThicknessMaximum.value = m.iridescenceThicknessRange[1], m.iridescenceMap && (g.iridescenceMap.value = m.iridescenceMap, t(m.iridescenceMap, g.iridescenceMapTransform)), m.iridescenceThicknessMap && (g.iridescenceThicknessMap.value = m.iridescenceThicknessMap, t(m.iridescenceThicknessMap, g.iridescenceThicknessMapTransform))), m.transmission > 0 && (g.transmission.value = m.transmission, g.transmissionSamplerMap.value = v.texture, g.transmissionSamplerSize.value.set(v.width, v.height), m.transmissionMap && (g.transmissionMap.value = m.transmissionMap, t(m.transmissionMap, g.transmissionMapTransform)), g.thickness.value = m.thickness, m.thicknessMap && (g.thicknessMap.value = m.thicknessMap, t(m.thicknessMap, g.thicknessMapTransform)), g.attenuationDistance.value = m.attenuationDistance, g.attenuationColor.value.copy(m.attenuationColor)), g.specularIntensity.value = m.specularIntensity, g.specularColor.value.copy(m.specularColor), m.specularColorMap && (g.specularColorMap.value = m.specularColorMap, t(m.specularColorMap, g.specularColorMapTransform)), m.specularIntensityMap && (g.specularIntensityMap.value = m.specularIntensityMap, t(m.specularIntensityMap, g.specularIntensityMapTransform));
  }
  function p(g, m) {
    m.matcap && (g.matcap.value = m.matcap);
  }
  function _(g, m) {
    const v = e.get(m).light;
    g.referencePosition.value.setFromMatrixPosition(v.matrixWorld), g.nearDistance.value = v.shadow.camera.near, g.farDistance.value = v.shadow.camera.far;
  }
  return {
    refreshFogUniforms: n,
    refreshMaterialUniforms: s
  };
}
function Zx(i, e, t, n) {
  let s = {}, r = {}, a = [];
  const o = t.isWebGL2 ? i.getParameter(35375) : 0;
  function c(v, y) {
    const b = y.program;
    n.uniformBlockBinding(v, b);
  }
  function l(v, y) {
    let b = s[v.id];
    b === void 0 && (p(v), b = h(v), s[v.id] = b, v.addEventListener("dispose", g));
    const w = y.program;
    n.updateUBOMapping(v, w);
    const x = e.render.frame;
    r[v.id] !== x && (u(v), r[v.id] = x);
  }
  function h(v) {
    const y = d();
    v.__bindingPointIndex = y;
    const b = i.createBuffer(), w = v.__size, x = v.usage;
    return i.bindBuffer(35345, b), i.bufferData(35345, w, x), i.bindBuffer(35345, null), i.bindBufferBase(35345, y, b), b;
  }
  function d() {
    for (let v = 0; v < o; v++)
      if (a.indexOf(v) === -1)
        return a.push(v), v;
    return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."), 0;
  }
  function u(v) {
    const y = s[v.id], b = v.uniforms, w = v.__cache;
    i.bindBuffer(35345, y);
    for (let x = 0, S = b.length; x < S; x++) {
      const T = b[x];
      if (f(T, x, w) === !0) {
        const M = T.__offset, A = Array.isArray(T.value) ? T.value : [T.value];
        let D = 0;
        for (let z = 0; z < A.length; z++) {
          const O = A[z], U = _(O);
          typeof O == "number" ? (T.__data[0] = O, i.bufferSubData(35345, M + D, T.__data)) : O.isMatrix3 ? (T.__data[0] = O.elements[0], T.__data[1] = O.elements[1], T.__data[2] = O.elements[2], T.__data[3] = O.elements[0], T.__data[4] = O.elements[3], T.__data[5] = O.elements[4], T.__data[6] = O.elements[5], T.__data[7] = O.elements[0], T.__data[8] = O.elements[6], T.__data[9] = O.elements[7], T.__data[10] = O.elements[8], T.__data[11] = O.elements[0]) : (O.toArray(T.__data, D), D += U.storage / Float32Array.BYTES_PER_ELEMENT);
        }
        i.bufferSubData(35345, M, T.__data);
      }
    }
    i.bindBuffer(35345, null);
  }
  function f(v, y, b) {
    const w = v.value;
    if (b[y] === void 0) {
      if (typeof w == "number")
        b[y] = w;
      else {
        const x = Array.isArray(w) ? w : [w], S = [];
        for (let T = 0; T < x.length; T++)
          S.push(x[T].clone());
        b[y] = S;
      }
      return !0;
    } else if (typeof w == "number") {
      if (b[y] !== w)
        return b[y] = w, !0;
    } else {
      const x = Array.isArray(b[y]) ? b[y] : [b[y]], S = Array.isArray(w) ? w : [w];
      for (let T = 0; T < x.length; T++) {
        const M = x[T];
        if (M.equals(S[T]) === !1)
          return M.copy(S[T]), !0;
      }
    }
    return !1;
  }
  function p(v) {
    const y = v.uniforms;
    let b = 0;
    const w = 16;
    let x = 0;
    for (let S = 0, T = y.length; S < T; S++) {
      const M = y[S], A = {
        boundary: 0,
        // bytes
        storage: 0
        // bytes
      }, D = Array.isArray(M.value) ? M.value : [M.value];
      for (let z = 0, O = D.length; z < O; z++) {
        const U = D[z], V = _(U);
        A.boundary += V.boundary, A.storage += V.storage;
      }
      if (M.__data = new Float32Array(A.storage / Float32Array.BYTES_PER_ELEMENT), M.__offset = b, S > 0) {
        x = b % w;
        const z = w - x;
        x !== 0 && z - A.boundary < 0 && (b += w - x, M.__offset = b);
      }
      b += A.storage;
    }
    return x = b % w, x > 0 && (b += w - x), v.__size = b, v.__cache = {}, this;
  }
  function _(v) {
    const y = {
      boundary: 0,
      // bytes
      storage: 0
      // bytes
    };
    return typeof v == "number" ? (y.boundary = 4, y.storage = 4) : v.isVector2 ? (y.boundary = 8, y.storage = 8) : v.isVector3 || v.isColor ? (y.boundary = 16, y.storage = 12) : v.isVector4 ? (y.boundary = 16, y.storage = 16) : v.isMatrix3 ? (y.boundary = 48, y.storage = 48) : v.isMatrix4 ? (y.boundary = 64, y.storage = 64) : v.isTexture ? console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.") : console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", v), y;
  }
  function g(v) {
    const y = v.target;
    y.removeEventListener("dispose", g);
    const b = a.indexOf(y.__bindingPointIndex);
    a.splice(b, 1), i.deleteBuffer(s[y.id]), delete s[y.id], delete r[y.id];
  }
  function m() {
    for (const v in s)
      i.deleteBuffer(s[v]);
    a = [], s = {}, r = {};
  }
  return {
    bind: c,
    update: l,
    dispose: m
  };
}
function qx() {
  const i = us("canvas");
  return i.style.display = "block", i;
}
class y2 {
  constructor(e = {}) {
    const {
      canvas: t = qx(),
      context: n = null,
      depth: s = !0,
      stencil: r = !0,
      alpha: a = !1,
      antialias: o = !1,
      premultipliedAlpha: c = !0,
      preserveDrawingBuffer: l = !1,
      powerPreference: h = "default",
      failIfMajorPerformanceCaveat: d = !1
    } = e;
    this.isWebGLRenderer = !0;
    let u;
    n !== null ? u = n.getContextAttributes().alpha : u = a;
    let f = null, p = null;
    const _ = [], g = [];
    this.domElement = t, this.debug = {
      /**
       * Enables error checking and reporting when shader programs are being compiled
       * @type {boolean}
       */
      checkShaderErrors: !0,
      /**
       * Callback for custom error reporting.
       * @type {?Function}
       */
      onShaderError: null
    }, this.autoClear = !0, this.autoClearColor = !0, this.autoClearDepth = !0, this.autoClearStencil = !0, this.sortObjects = !0, this.clippingPlanes = [], this.localClippingEnabled = !1, this.outputEncoding = jn, this.useLegacyLights = !0, this.toneMapping = D1, this.toneMappingExposure = 1;
    const m = this;
    let v = !1, y = 0, b = 0, w = null, x = -1, S = null;
    const T = new pe(), M = new pe();
    let A = null, D = t.width, z = t.height, O = 1, U = null, V = null;
    const Y = new pe(0, 0, D, z), W = new pe(0, 0, D, z);
    let X = !1;
    const i0 = new n6();
    let a0 = !1, x0 = !1, u0 = null;
    const E = new k0(), F = new C(), R = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: !0 };
    function j() {
      return w === null ? O : 1;
    }
    let B = n;
    function m0(P, G) {
      for (let J = 0; J < P.length; J++) {
        const H = P[J], t0 = t.getContext(H, G);
        if (t0 !== null)
          return t0;
      }
      return null;
    }
    try {
      const P = {
        alpha: !0,
        depth: s,
        stencil: r,
        antialias: o,
        premultipliedAlpha: c,
        preserveDrawingBuffer: l,
        powerPreference: h,
        failIfMajorPerformanceCaveat: d
      };
      if ("setAttribute" in t && t.setAttribute("data-engine", `three.js r${$r}`), t.addEventListener("webglcontextlost", I0, !1), t.addEventListener("webglcontextrestored", se, !1), t.addEventListener("webglcontextcreationerror", me, !1), B === null) {
        const G = ["webgl2", "webgl", "experimental-webgl"];
        if (m.isWebGL1Renderer === !0 && G.shift(), B = m0(G, P), B === null)
          throw m0(G) ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
      }
      B.getShaderPrecisionFormat === void 0 && (B.getShaderPrecisionFormat = function() {
        return { rangeMin: 1, rangeMax: 1, precision: 1 };
      });
    } catch (P) {
      throw console.error("THREE.WebGLRenderer: " + P.message), P;
    }
    let b0, e0, M0, r0, Z, n0, S0, p0, P0, D0, N0, j0, ce, N, L, q, l0, h0, w0, B0, T0, Q, C0, O0;
    function z0() {
      b0 = new hy(B), e0 = new sy(B, b0, e), b0.init(e0), Q = new Th(B, b0, e0), M0 = new Hx(B, b0, e0), r0 = new fy(), Z = new Lx(), n0 = new Gx(B, b0, M0, Z, e0, Q, r0), S0 = new ay(m), p0 = new cy(m), P0 = new Eg(B, e0), C0 = new ny(B, b0, P0, e0), D0 = new uy(B, P0, r0, C0), N0 = new _y(B, D0, P0, r0), w0 = new gy(B, e0, n0), q = new ry(Z), j0 = new Ix(m, S0, p0, b0, e0, C0, q), ce = new Yx(m, Z), N = new Px(), L = new zx(b0, e0), h0 = new ty(m, S0, p0, M0, N0, u, c), l0 = new Vx(m, N0, e0), O0 = new Zx(B, r0, e0, M0), B0 = new iy(B, b0, r0, e0), T0 = new dy(B, b0, r0, e0), r0.programs = j0.programs, m.capabilities = e0, m.extensions = b0, m.properties = Z, m.renderLists = N, m.shadowMap = l0, m.state = M0, m.info = r0;
    }
    z0();
    const A0 = new Xx(m, B);
    this.xr = A0, this.getContext = function() {
      return B;
    }, this.getContextAttributes = function() {
      return B.getContextAttributes();
    }, this.forceContextLoss = function() {
      const P = b0.get("WEBGL_lose_context");
      P && P.loseContext();
    }, this.forceContextRestore = function() {
      const P = b0.get("WEBGL_lose_context");
      P && P.restoreContext();
    }, this.getPixelRatio = function() {
      return O;
    }, this.setPixelRatio = function(P) {
      P !== void 0 && (O = P, this.setSize(D, z, !1));
    }, this.getSize = function(P) {
      return P.set(D, z);
    }, this.setSize = function(P, G, J = !0) {
      if (A0.isPresenting) {
        console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
        return;
      }
      D = P, z = G, t.width = Math.floor(P * O), t.height = Math.floor(G * O), J === !0 && (t.style.width = P + "px", t.style.height = G + "px"), this.setViewport(0, 0, P, G);
    }, this.getDrawingBufferSize = function(P) {
      return P.set(D * O, z * O).floor();
    }, this.setDrawingBufferSize = function(P, G, J) {
      D = P, z = G, O = J, t.width = Math.floor(P * J), t.height = Math.floor(G * J), this.setViewport(0, 0, P, G);
    }, this.getCurrentViewport = function(P) {
      return P.copy(T);
    }, this.getViewport = function(P) {
      return P.copy(Y);
    }, this.setViewport = function(P, G, J, H) {
      P.isVector4 ? Y.set(P.x, P.y, P.z, P.w) : Y.set(P, G, J, H), M0.viewport(T.copy(Y).multiplyScalar(O).floor());
    }, this.getScissor = function(P) {
      return P.copy(W);
    }, this.setScissor = function(P, G, J, H) {
      P.isVector4 ? W.set(P.x, P.y, P.z, P.w) : W.set(P, G, J, H), M0.scissor(M.copy(W).multiplyScalar(O).floor());
    }, this.getScissorTest = function() {
      return X;
    }, this.setScissorTest = function(P) {
      M0.setScissorTest(X = P);
    }, this.setOpaqueSort = function(P) {
      U = P;
    }, this.setTransparentSort = function(P) {
      V = P;
    }, this.getClearColor = function(P) {
      return P.copy(h0.getClearColor());
    }, this.setClearColor = function() {
      h0.setClearColor.apply(h0, arguments);
    }, this.getClearAlpha = function() {
      return h0.getClearAlpha();
    }, this.setClearAlpha = function() {
      h0.setClearAlpha.apply(h0, arguments);
    }, this.clear = function(P = !0, G = !0, J = !0) {
      let H = 0;
      P && (H |= 16384), G && (H |= 256), J && (H |= 1024), B.clear(H);
    }, this.clearColor = function() {
      this.clear(!0, !1, !1);
    }, this.clearDepth = function() {
      this.clear(!1, !0, !1);
    }, this.clearStencil = function() {
      this.clear(!1, !1, !0);
    }, this.dispose = function() {
      t.removeEventListener("webglcontextlost", I0, !1), t.removeEventListener("webglcontextrestored", se, !1), t.removeEventListener("webglcontextcreationerror", me, !1), N.dispose(), L.dispose(), Z.dispose(), S0.dispose(), p0.dispose(), N0.dispose(), C0.dispose(), O0.dispose(), j0.dispose(), A0.dispose(), A0.removeEventListener("sessionstart", L0), A0.removeEventListener("sessionend", ye), u0 && (u0.dispose(), u0 = null), Ce.stop();
    };
    function I0(P) {
      P.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), v = !0;
    }
    function se() {
      console.log("THREE.WebGLRenderer: Context Restored."), v = !1;
      const P = r0.autoReset, G = l0.enabled, J = l0.autoUpdate, H = l0.needsUpdate, t0 = l0.type;
      z0(), r0.autoReset = P, l0.enabled = G, l0.autoUpdate = J, l0.needsUpdate = H, l0.type = t0;
    }
    function me(P) {
      console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", P.statusMessage);
    }
    function Oe(P) {
      const G = P.target;
      G.removeEventListener("dispose", Oe), k(G);
    }
    function k(P) {
      K(P), Z.remove(P);
    }
    function K(P) {
      const G = Z.get(P).programs;
      G !== void 0 && (G.forEach(function(J) {
        j0.releaseProgram(J);
      }), P.isShaderMaterial && j0.releaseShaderCache(P));
    }
    this.renderBufferDirect = function(P, G, J, H, t0, U0) {
      G === null && (G = R);
      const V0 = t0.isMesh && t0.matrixWorld.determinant() < 0, H0 = Rf(P, G, J, H, t0);
      M0.setMaterial(H, V0);
      let q0 = J.index, J0 = 1;
      H.wireframe === !0 && (q0 = D0.getWireframeAttribute(J), J0 = 2);
      const K0 = J.drawRange, te = J.attributes.position;
      let ge = K0.start * J0, dt = (K0.start + K0.count) * J0;
      U0 !== null && (ge = Math.max(ge, U0.start * J0), dt = Math.min(dt, (U0.start + U0.count) * J0)), q0 !== null ? (ge = Math.max(ge, 0), dt = Math.min(dt, q0.count)) : te != null && (ge = Math.max(ge, 0), dt = Math.min(dt, te.count));
      const Kt = dt - ge;
      if (Kt < 0 || Kt === 1 / 0)
        return;
      C0.setup(t0, H, H0, J, q0);
      let ti, Ve = B0;
      if (q0 !== null && (ti = P0.get(q0), Ve = T0, Ve.setIndex(ti)), t0.isMesh)
        H.wireframe === !0 ? (M0.setLineWidth(H.wireframeLinewidth * j()), Ve.setMode(1)) : Ve.setMode(4);
      else if (t0.isLine) {
        let re = H.linewidth;
        re === void 0 && (re = 1), M0.setLineWidth(re * j()), t0.isLineSegments ? Ve.setMode(1) : t0.isLineLoop ? Ve.setMode(2) : Ve.setMode(3);
      } else
        t0.isPoints ? Ve.setMode(0) : t0.isSprite && Ve.setMode(4);
      if (t0.isInstancedMesh)
        Ve.renderInstances(ge, Kt, t0.count);
      else if (J.isInstancedBufferGeometry) {
        const re = J._maxInstanceCount !== void 0 ? J._maxInstanceCount : 1 / 0, M6 = Math.min(J.instanceCount, re);
        Ve.renderInstances(ge, Kt, M6);
      } else
        Ve.render(ge, Kt);
    }, this.compile = function(P, G) {
      function J(H, t0, U0) {
        H.transparent === !0 && H.side === Nt && H.forceSinglePass === !1 ? (H.side = ut, H.needsUpdate = !0, n7(H, t0, U0), H.side = an, H.needsUpdate = !0, n7(H, t0, U0), H.side = Nt) : n7(H, t0, U0);
      }
      p = L.get(P), p.init(), g.push(p), P.traverseVisible(function(H) {
        H.isLight && H.layers.test(G.layers) && (p.pushLight(H), H.castShadow && p.pushShadow(H));
      }), p.setupLights(m.useLegacyLights), P.traverse(function(H) {
        const t0 = H.material;
        if (t0)
          if (Array.isArray(t0))
            for (let U0 = 0; U0 < t0.length; U0++) {
              const V0 = t0[U0];
              J(V0, P, H);
            }
          else
            J(t0, P, H);
      }), g.pop(), p = null;
    };
    let c0 = null;
    function E0(P) {
      c0 && c0(P);
    }
    function L0() {
      Ce.stop();
    }
    function ye() {
      Ce.start();
    }
    const Ce = new bh();
    Ce.setAnimationLoop(E0), typeof self < "u" && Ce.setContext(self), this.setAnimationLoop = function(P) {
      c0 = P, A0.setAnimationLoop(P), P === null ? Ce.stop() : Ce.start();
    }, A0.addEventListener("sessionstart", L0), A0.addEventListener("sessionend", ye), this.render = function(P, G) {
      if (G !== void 0 && G.isCamera !== !0) {
        console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
        return;
      }
      if (v === !0)
        return;
      P.matrixWorldAutoUpdate === !0 && P.updateMatrixWorld(), G.parent === null && G.matrixWorldAutoUpdate === !0 && G.updateMatrixWorld(), A0.enabled === !0 && A0.isPresenting === !0 && (A0.cameraAutoUpdate === !0 && A0.updateCamera(G), G = A0.getCamera()), P.isScene === !0 && P.onBeforeRender(m, P, G, w), p = L.get(P, g.length), p.init(), g.push(p), E.multiplyMatrices(G.projectionMatrix, G.matrixWorldInverse), i0.setFromProjectionMatrix(E), x0 = this.localClippingEnabled, a0 = q.init(this.clippingPlanes, x0), f = N.get(P, _.length), f.init(), _.push(f), rt(P, G, 0, m.sortObjects), f.finish(), m.sortObjects === !0 && f.sort(U, V), a0 === !0 && q.beginShadows();
      const J = p.state.shadowsArray;
      if (l0.render(J, P, G), a0 === !0 && q.endShadows(), this.info.autoReset === !0 && this.info.reset(), h0.render(f, P), p.setupLights(m.useLegacyLights), G.isArrayCamera) {
        const H = G.cameras;
        for (let t0 = 0, U0 = H.length; t0 < U0; t0++) {
          const V0 = H[t0];
          fn(f, P, V0, V0.viewport);
        }
      } else
        fn(f, P, G);
      w !== null && (n0.updateMultisampleRenderTarget(w), n0.updateRenderTargetMipmap(w)), P.isScene === !0 && P.onAfterRender(m, P, G), C0.resetDefaultState(), x = -1, S = null, g.pop(), g.length > 0 ? p = g[g.length - 1] : p = null, _.pop(), _.length > 0 ? f = _[_.length - 1] : f = null;
    };
    function rt(P, G, J, H) {
      if (P.visible === !1)
        return;
      if (P.layers.test(G.layers)) {
        if (P.isGroup)
          J = P.renderOrder;
        else if (P.isLOD)
          P.autoUpdate === !0 && P.update(G);
        else if (P.isLight)
          p.pushLight(P), P.castShadow && p.pushShadow(P);
        else if (P.isSprite) {
          if (!P.frustumCulled || i0.intersectsSprite(P)) {
            H && F.setFromMatrixPosition(P.matrixWorld).applyMatrix4(E);
            const V0 = N0.update(P), H0 = P.material;
            H0.visible && f.push(P, V0, H0, J, F.z, null);
          }
        } else if ((P.isMesh || P.isLine || P.isPoints) && (P.isSkinnedMesh && P.skeleton.frame !== r0.render.frame && (P.skeleton.update(), P.skeleton.frame = r0.render.frame), !P.frustumCulled || i0.intersectsObject(P))) {
          H && F.setFromMatrixPosition(P.matrixWorld).applyMatrix4(E);
          const V0 = N0.update(P), H0 = P.material;
          if (Array.isArray(H0)) {
            const q0 = V0.groups;
            for (let J0 = 0, K0 = q0.length; J0 < K0; J0++) {
              const te = q0[J0], ge = H0[te.materialIndex];
              ge && ge.visible && f.push(P, V0, ge, J, F.z, te);
            }
          } else
            H0.visible && f.push(P, V0, H0, J, F.z, null);
        }
      }
      const U0 = P.children;
      for (let V0 = 0, H0 = U0.length; V0 < H0; V0++)
        rt(U0[V0], G, J, H);
    }
    function fn(P, G, J, H) {
      const t0 = P.opaque, U0 = P.transmissive, V0 = P.transparent;
      p.setupLightsView(J), a0 === !0 && q.setGlobalState(m.clippingPlanes, J), U0.length > 0 && Ue(t0, U0, G, J), H && M0.viewport(T.copy(H)), t0.length > 0 && Bt(t0, G, J), U0.length > 0 && Bt(U0, G, J), V0.length > 0 && Bt(V0, G, J), M0.buffers.depth.setTest(!0), M0.buffers.depth.setMask(!0), M0.buffers.color.setMask(!0), M0.setPolygonOffset(!1);
    }
    function Ue(P, G, J, H) {
      if (u0 === null) {
        const H0 = e0.isWebGL2;
        u0 = new o1(1024, 1024, {
          generateMipmaps: !0,
          type: b0.has("EXT_color_buffer_half_float") ? q9 : $n,
          minFilter: qn,
          samples: H0 && o === !0 ? 4 : 0
        });
      }
      const t0 = m.getRenderTarget();
      m.setRenderTarget(u0), m.clear();
      const U0 = m.toneMapping;
      m.toneMapping = D1, Bt(P, J, H), n0.updateMultisampleRenderTarget(u0), n0.updateRenderTargetMipmap(u0);
      let V0 = !1;
      for (let H0 = 0, q0 = G.length; H0 < q0; H0++) {
        const J0 = G[H0], K0 = J0.object, te = J0.geometry, ge = J0.material, dt = J0.group;
        if (ge.side === Nt && K0.layers.test(H.layers)) {
          const Kt = ge.side;
          ge.side = ut, ge.needsUpdate = !0, p1(K0, J, H, te, ge, dt), ge.side = Kt, ge.needsUpdate = !0, V0 = !0;
        }
      }
      V0 === !0 && (n0.updateMultisampleRenderTarget(u0), n0.updateRenderTargetMipmap(u0)), m.setRenderTarget(t0), m.toneMapping = U0;
    }
    function Bt(P, G, J) {
      const H = G.isScene === !0 ? G.overrideMaterial : null;
      for (let t0 = 0, U0 = P.length; t0 < U0; t0++) {
        const V0 = P[t0], H0 = V0.object, q0 = V0.geometry, J0 = H === null ? V0.material : H, K0 = V0.group;
        H0.layers.test(J.layers) && p1(H0, G, J, q0, J0, K0);
      }
    }
    function p1(P, G, J, H, t0, U0) {
      P.onBeforeRender(m, G, J, H, t0, U0), P.modelViewMatrix.multiplyMatrices(J.matrixWorldInverse, P.matrixWorld), P.normalMatrix.getNormalMatrix(P.modelViewMatrix), t0.onBeforeRender(m, G, J, H, P, U0), t0.transparent === !0 && t0.side === Nt && t0.forceSinglePass === !1 ? (t0.side = ut, t0.needsUpdate = !0, m.renderBufferDirect(J, G, H, t0, P, U0), t0.side = an, t0.needsUpdate = !0, m.renderBufferDirect(J, G, H, t0, P, U0), t0.side = Nt) : m.renderBufferDirect(J, G, H, t0, P, U0), P.onAfterRender(m, G, J, H, t0, U0);
    }
    function n7(P, G, J) {
      G.isScene !== !0 && (G = R);
      const H = Z.get(P), t0 = p.state.lights, U0 = p.state.shadowsArray, V0 = t0.state.version, H0 = j0.getParameters(P, t0.state, U0, G, J), q0 = j0.getProgramCacheKey(H0);
      let J0 = H.programs;
      H.environment = P.isMeshStandardMaterial ? G.environment : null, H.fog = G.fog, H.envMap = (P.isMeshStandardMaterial ? p0 : S0).get(P.envMap || H.environment), J0 === void 0 && (P.addEventListener("dispose", Oe), J0 = /* @__PURE__ */ new Map(), H.programs = J0);
      let K0 = J0.get(q0);
      if (K0 !== void 0) {
        if (H.currentProgram === K0 && H.lightsStateVersion === V0)
          return _4(P, H0), K0;
      } else
        H0.uniforms = j0.getUniforms(P), P.onBuild(J, H0, m), P.onBeforeCompile(H0, m), K0 = j0.acquireProgram(H0, q0), J0.set(q0, K0), H.uniforms = H0.uniforms;
      const te = H.uniforms;
      (!P.isShaderMaterial && !P.isRawShaderMaterial || P.clipping === !0) && (te.clippingPlanes = q.uniform), _4(P, H0), H.needsLights = Df(P), H.lightsStateVersion = V0, H.needsLights && (te.ambientLightColor.value = t0.state.ambient, te.lightProbe.value = t0.state.probe, te.directionalLights.value = t0.state.directional, te.directionalLightShadows.value = t0.state.directionalShadow, te.spotLights.value = t0.state.spot, te.spotLightShadows.value = t0.state.spotShadow, te.rectAreaLights.value = t0.state.rectArea, te.ltc_1.value = t0.state.rectAreaLTC1, te.ltc_2.value = t0.state.rectAreaLTC2, te.pointLights.value = t0.state.point, te.pointLightShadows.value = t0.state.pointShadow, te.hemisphereLights.value = t0.state.hemi, te.directionalShadowMap.value = t0.state.directionalShadowMap, te.directionalShadowMatrix.value = t0.state.directionalShadowMatrix, te.spotShadowMap.value = t0.state.spotShadowMap, te.spotLightMatrix.value = t0.state.spotLightMatrix, te.spotLightMap.value = t0.state.spotLightMap, te.pointShadowMap.value = t0.state.pointShadowMap, te.pointShadowMatrix.value = t0.state.pointShadowMatrix);
      const ge = K0.getUniforms(), dt = yr.seqWithValue(ge.seq, te);
      return H.currentProgram = K0, H.uniformsList = dt, K0;
    }
    function _4(P, G) {
      const J = Z.get(P);
      J.outputEncoding = G.outputEncoding, J.instancing = G.instancing, J.skinning = G.skinning, J.morphTargets = G.morphTargets, J.morphNormals = G.morphNormals, J.morphColors = G.morphColors, J.morphTargetsCount = G.morphTargetsCount, J.numClippingPlanes = G.numClippingPlanes, J.numIntersection = G.numClipIntersection, J.vertexAlphas = G.vertexAlphas, J.vertexTangents = G.vertexTangents, J.toneMapping = G.toneMapping;
    }
    function Rf(P, G, J, H, t0) {
      G.isScene !== !0 && (G = R), n0.resetTextureUnits();
      const U0 = G.fog, V0 = H.isMeshStandardMaterial ? G.environment : null, H0 = w === null ? m.outputEncoding : w.isXRRenderTarget === !0 ? w.texture.encoding : jn, q0 = (H.isMeshStandardMaterial ? p0 : S0).get(H.envMap || V0), J0 = H.vertexColors === !0 && !!J.attributes.color && J.attributes.color.itemSize === 4, K0 = !!H.normalMap && !!J.attributes.tangent, te = !!J.morphAttributes.position, ge = !!J.morphAttributes.normal, dt = !!J.morphAttributes.color, Kt = H.toneMapped ? m.toneMapping : D1, ti = J.morphAttributes.position || J.morphAttributes.normal || J.morphAttributes.color, Ve = ti !== void 0 ? ti.length : 0, re = Z.get(H), M6 = p.state.lights;
      if (a0 === !0 && (x0 === !0 || P !== S)) {
        const It = P === S && H.id === x;
        q.setState(H, P, It);
      }
      let qe = !1;
      H.version === re.__version ? (re.needsLights && re.lightsStateVersion !== M6.state.version || re.outputEncoding !== H0 || t0.isInstancedMesh && re.instancing === !1 || !t0.isInstancedMesh && re.instancing === !0 || t0.isSkinnedMesh && re.skinning === !1 || !t0.isSkinnedMesh && re.skinning === !0 || re.envMap !== q0 || H.fog === !0 && re.fog !== U0 || re.numClippingPlanes !== void 0 && (re.numClippingPlanes !== q.numPlanes || re.numIntersection !== q.numIntersection) || re.vertexAlphas !== J0 || re.vertexTangents !== K0 || re.morphTargets !== te || re.morphNormals !== ge || re.morphColors !== dt || re.toneMapping !== Kt || e0.isWebGL2 === !0 && re.morphTargetsCount !== Ve) && (qe = !0) : (qe = !0, re.__version = H.version);
      let ni = re.currentProgram;
      qe === !0 && (ni = n7(H, G, t0));
      let v4 = !1, d8 = !1, S6 = !1;
      const ft = ni.getUniforms(), ii = re.uniforms;
      if (M0.useProgram(ni.program) && (v4 = !0, d8 = !0, S6 = !0), H.id !== x && (x = H.id, d8 = !0), v4 || S !== P) {
        if (ft.setValue(B, "projectionMatrix", P.projectionMatrix), e0.logarithmicDepthBuffer && ft.setValue(
          B,
          "logDepthBufFC",
          2 / (Math.log(P.far + 1) / Math.LN2)
        ), S !== P && (S = P, d8 = !0, S6 = !0), H.isShaderMaterial || H.isMeshPhongMaterial || H.isMeshToonMaterial || H.isMeshStandardMaterial || H.envMap) {
          const It = ft.map.cameraPosition;
          It !== void 0 && It.setValue(
            B,
            F.setFromMatrixPosition(P.matrixWorld)
          );
        }
        (H.isMeshPhongMaterial || H.isMeshToonMaterial || H.isMeshLambertMaterial || H.isMeshBasicMaterial || H.isMeshStandardMaterial || H.isShaderMaterial) && ft.setValue(B, "isOrthographic", P.isOrthographicCamera === !0), (H.isMeshPhongMaterial || H.isMeshToonMaterial || H.isMeshLambertMaterial || H.isMeshBasicMaterial || H.isMeshStandardMaterial || H.isShaderMaterial || H.isShadowMaterial || t0.isSkinnedMesh) && ft.setValue(B, "viewMatrix", P.matrixWorldInverse);
      }
      if (t0.isSkinnedMesh) {
        ft.setOptional(B, t0, "bindMatrix"), ft.setOptional(B, t0, "bindMatrixInverse");
        const It = t0.skeleton;
        It && (e0.floatVertexTextures ? (It.boneTexture === null && It.computeBoneTexture(), ft.setValue(B, "boneTexture", It.boneTexture, n0), ft.setValue(B, "boneTextureSize", It.boneTextureSize)) : console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."));
      }
      const E6 = J.morphAttributes;
      if ((E6.position !== void 0 || E6.normal !== void 0 || E6.color !== void 0 && e0.isWebGL2 === !0) && w0.update(t0, J, ni), (d8 || re.receiveShadow !== t0.receiveShadow) && (re.receiveShadow = t0.receiveShadow, ft.setValue(B, "receiveShadow", t0.receiveShadow)), H.isMeshGouraudMaterial && H.envMap !== null && (ii.envMap.value = q0, ii.flipEnvMap.value = q0.isCubeTexture && q0.isRenderTargetTexture === !1 ? -1 : 1), d8 && (ft.setValue(B, "toneMappingExposure", m.toneMappingExposure), re.needsLights && Pf(ii, S6), U0 && H.fog === !0 && ce.refreshFogUniforms(ii, U0), ce.refreshMaterialUniforms(ii, H, O, z, u0), yr.upload(B, re.uniformsList, ii, n0)), H.isShaderMaterial && H.uniformsNeedUpdate === !0 && (yr.upload(B, re.uniformsList, ii, n0), H.uniformsNeedUpdate = !1), H.isSpriteMaterial && ft.setValue(B, "center", t0.center), ft.setValue(B, "modelViewMatrix", t0.modelViewMatrix), ft.setValue(B, "normalMatrix", t0.normalMatrix), ft.setValue(B, "modelMatrix", t0.matrixWorld), H.isShaderMaterial || H.isRawShaderMaterial) {
        const It = H.uniformsGroups;
        for (let T6 = 0, Nf = It.length; T6 < Nf; T6++)
          if (e0.isWebGL2) {
            const y4 = It[T6];
            O0.update(y4, ni), O0.bind(y4, ni);
          } else
            console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.");
      }
      return ni;
    }
    function Pf(P, G) {
      P.ambientLightColor.needsUpdate = G, P.lightProbe.needsUpdate = G, P.directionalLights.needsUpdate = G, P.directionalLightShadows.needsUpdate = G, P.pointLights.needsUpdate = G, P.pointLightShadows.needsUpdate = G, P.spotLights.needsUpdate = G, P.spotLightShadows.needsUpdate = G, P.rectAreaLights.needsUpdate = G, P.hemisphereLights.needsUpdate = G;
    }
    function Df(P) {
      return P.isMeshLambertMaterial || P.isMeshToonMaterial || P.isMeshPhongMaterial || P.isMeshStandardMaterial || P.isShadowMaterial || P.isShaderMaterial && P.lights === !0;
    }
    this.getActiveCubeFace = function() {
      return y;
    }, this.getActiveMipmapLevel = function() {
      return b;
    }, this.getRenderTarget = function() {
      return w;
    }, this.setRenderTargetTextures = function(P, G, J) {
      Z.get(P.texture).__webglTexture = G, Z.get(P.depthTexture).__webglTexture = J;
      const H = Z.get(P);
      H.__hasExternalTextures = !0, H.__hasExternalTextures && (H.__autoAllocateDepthBuffer = J === void 0, H.__autoAllocateDepthBuffer || b0.has("WEBGL_multisampled_render_to_texture") === !0 && (console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"), H.__useRenderToTexture = !1));
    }, this.setRenderTargetFramebuffer = function(P, G) {
      const J = Z.get(P);
      J.__webglFramebuffer = G, J.__useDefaultFramebuffer = G === void 0;
    }, this.setRenderTarget = function(P, G = 0, J = 0) {
      w = P, y = G, b = J;
      let H = !0, t0 = null, U0 = !1, V0 = !1;
      if (P) {
        const q0 = Z.get(P);
        q0.__useDefaultFramebuffer !== void 0 ? (M0.bindFramebuffer(36160, null), H = !1) : q0.__webglFramebuffer === void 0 ? n0.setupRenderTarget(P) : q0.__hasExternalTextures && n0.rebindTextures(P, Z.get(P.texture).__webglTexture, Z.get(P.depthTexture).__webglTexture);
        const J0 = P.texture;
        (J0.isData3DTexture || J0.isDataArrayTexture || J0.isCompressedArrayTexture) && (V0 = !0);
        const K0 = Z.get(P).__webglFramebuffer;
        P.isWebGLCubeRenderTarget ? (t0 = K0[G], U0 = !0) : e0.isWebGL2 && P.samples > 0 && n0.useMultisampledRTT(P) === !1 ? t0 = Z.get(P).__webglMultisampledFramebuffer : t0 = K0, T.copy(P.viewport), M.copy(P.scissor), A = P.scissorTest;
      } else
        T.copy(Y).multiplyScalar(O).floor(), M.copy(W).multiplyScalar(O).floor(), A = X;
      if (M0.bindFramebuffer(36160, t0) && e0.drawBuffers && H && M0.drawBuffers(P, t0), M0.viewport(T), M0.scissor(M), M0.setScissorTest(A), U0) {
        const q0 = Z.get(P.texture);
        B.framebufferTexture2D(36160, 36064, 34069 + G, q0.__webglTexture, J);
      } else if (V0) {
        const q0 = Z.get(P.texture), J0 = G || 0;
        B.framebufferTextureLayer(36160, 36064, q0.__webglTexture, J || 0, J0);
      }
      x = -1;
    }, this.readRenderTargetPixels = function(P, G, J, H, t0, U0, V0) {
      if (!(P && P.isWebGLRenderTarget)) {
        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        return;
      }
      let H0 = Z.get(P).__webglFramebuffer;
      if (P.isWebGLCubeRenderTarget && V0 !== void 0 && (H0 = H0[V0]), H0) {
        M0.bindFramebuffer(36160, H0);
        try {
          const q0 = P.texture, J0 = q0.format, K0 = q0.type;
          if (J0 !== Ot && Q.convert(J0) !== B.getParameter(35739)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
            return;
          }
          const te = K0 === q9 && (b0.has("EXT_color_buffer_half_float") || e0.isWebGL2 && b0.has("EXT_color_buffer_float"));
          if (K0 !== $n && Q.convert(K0) !== B.getParameter(35738) && // Edge and Chrome Mac < 52 (#9513)
          !(K0 === P1 && (e0.isWebGL2 || b0.has("OES_texture_float") || b0.has("WEBGL_color_buffer_float"))) && // Chrome Mac >= 52 and Firefox
          !te) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
            return;
          }
          G >= 0 && G <= P.width - H && J >= 0 && J <= P.height - t0 && B.readPixels(G, J, H, t0, Q.convert(J0), Q.convert(K0), U0);
        } finally {
          const q0 = w !== null ? Z.get(w).__webglFramebuffer : null;
          M0.bindFramebuffer(36160, q0);
        }
      }
    }, this.copyFramebufferToTexture = function(P, G, J = 0) {
      const H = Math.pow(2, -J), t0 = Math.floor(G.image.width * H), U0 = Math.floor(G.image.height * H);
      n0.setTexture2D(G, 0), B.copyTexSubImage2D(3553, J, 0, 0, P.x, P.y, t0, U0), M0.unbindTexture();
    }, this.copyTextureToTexture = function(P, G, J, H = 0) {
      const t0 = G.image.width, U0 = G.image.height, V0 = Q.convert(J.format), H0 = Q.convert(J.type);
      n0.setTexture2D(J, 0), B.pixelStorei(37440, J.flipY), B.pixelStorei(37441, J.premultiplyAlpha), B.pixelStorei(3317, J.unpackAlignment), G.isDataTexture ? B.texSubImage2D(3553, H, P.x, P.y, t0, U0, V0, H0, G.image.data) : G.isCompressedTexture ? B.compressedTexSubImage2D(3553, H, P.x, P.y, G.mipmaps[0].width, G.mipmaps[0].height, V0, G.mipmaps[0].data) : B.texSubImage2D(3553, H, P.x, P.y, V0, H0, G.image), H === 0 && J.generateMipmaps && B.generateMipmap(3553), M0.unbindTexture();
    }, this.copyTextureToTexture3D = function(P, G, J, H, t0 = 0) {
      if (m.isWebGL1Renderer) {
        console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");
        return;
      }
      const U0 = P.max.x - P.min.x + 1, V0 = P.max.y - P.min.y + 1, H0 = P.max.z - P.min.z + 1, q0 = Q.convert(H.format), J0 = Q.convert(H.type);
      let K0;
      if (H.isData3DTexture)
        n0.setTexture3D(H, 0), K0 = 32879;
      else if (H.isDataArrayTexture)
        n0.setTexture2DArray(H, 0), K0 = 35866;
      else {
        console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
        return;
      }
      B.pixelStorei(37440, H.flipY), B.pixelStorei(37441, H.premultiplyAlpha), B.pixelStorei(3317, H.unpackAlignment);
      const te = B.getParameter(3314), ge = B.getParameter(32878), dt = B.getParameter(3316), Kt = B.getParameter(3315), ti = B.getParameter(32877), Ve = J.isCompressedTexture ? J.mipmaps[0] : J.image;
      B.pixelStorei(3314, Ve.width), B.pixelStorei(32878, Ve.height), B.pixelStorei(3316, P.min.x), B.pixelStorei(3315, P.min.y), B.pixelStorei(32877, P.min.z), J.isDataTexture || J.isData3DTexture ? B.texSubImage3D(K0, t0, G.x, G.y, G.z, U0, V0, H0, q0, J0, Ve.data) : J.isCompressedArrayTexture ? (console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."), B.compressedTexSubImage3D(K0, t0, G.x, G.y, G.z, U0, V0, H0, q0, Ve.data)) : B.texSubImage3D(K0, t0, G.x, G.y, G.z, U0, V0, H0, q0, J0, Ve), B.pixelStorei(3314, te), B.pixelStorei(32878, ge), B.pixelStorei(3316, dt), B.pixelStorei(3315, Kt), B.pixelStorei(32877, ti), t0 === 0 && H.generateMipmaps && B.generateMipmap(K0), M0.unbindTexture();
    }, this.initTexture = function(P) {
      P.isCubeTexture ? n0.setTextureCube(P, 0) : P.isData3DTexture ? n0.setTexture3D(P, 0) : P.isDataArrayTexture || P.isCompressedArrayTexture ? n0.setTexture2DArray(P, 0) : n0.setTexture2D(P, 0), M0.unbindTexture();
    }, this.resetState = function() {
      y = 0, b = 0, w = null, M0.reset(), C0.reset();
    }, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
  get physicallyCorrectLights() {
    return console.warn("THREE.WebGLRenderer: the property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."), !this.useLegacyLights;
  }
  set physicallyCorrectLights(e) {
    console.warn("THREE.WebGLRenderer: the property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."), this.useLegacyLights = !e;
  }
}
class Ih extends y2 {
}
Ih.prototype.isWebGL1Renderer = !0;
class r6 {
  constructor(e, t = 25e-5) {
    this.isFogExp2 = !0, this.name = "", this.color = new f0(e), this.density = t;
  }
  clone() {
    return new r6(this.color, this.density);
  }
  toJSON() {
    return {
      type: "FogExp2",
      color: this.color.getHex(),
      density: this.density
    };
  }
}
class a6 {
  constructor(e, t = 1, n = 1e3) {
    this.isFog = !0, this.name = "", this.color = new f0(e), this.near = t, this.far = n;
  }
  clone() {
    return new a6(this.color, this.near, this.far);
  }
  toJSON() {
    return {
      type: "Fog",
      color: this.color.getHex(),
      near: this.near,
      far: this.far
    };
  }
}
class x2 extends G0 {
  constructor() {
    super(), this.isScene = !0, this.type = "Scene", this.background = null, this.environment = null, this.fog = null, this.backgroundBlurriness = 0, this.backgroundIntensity = 1, this.overrideMaterial = null, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
  copy(e, t) {
    return super.copy(e, t), e.background !== null && (this.background = e.background.clone()), e.environment !== null && (this.environment = e.environment.clone()), e.fog !== null && (this.fog = e.fog.clone()), this.backgroundBlurriness = e.backgroundBlurriness, this.backgroundIntensity = e.backgroundIntensity, e.overrideMaterial !== null && (this.overrideMaterial = e.overrideMaterial.clone()), this.matrixAutoUpdate = e.matrixAutoUpdate, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return this.fog !== null && (t.object.fog = this.fog.toJSON()), this.backgroundBlurriness > 0 && (t.object.backgroundBlurriness = this.backgroundBlurriness), this.backgroundIntensity !== 1 && (t.object.backgroundIntensity = this.backgroundIntensity), t;
  }
  get autoUpdate() {
    return console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."), this.matrixWorldAutoUpdate;
  }
  set autoUpdate(e) {
    console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."), this.matrixWorldAutoUpdate = e;
  }
}
class Ds {
  constructor(e, t) {
    this.isInterleavedBuffer = !0, this.array = e, this.stride = t, this.count = e !== void 0 ? e.length / t : 0, this.usage = hs, this.updateRange = { offset: 0, count: -1 }, this.version = 0, this.uuid = kt();
  }
  onUploadCallback() {
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  setUsage(e) {
    return this.usage = e, this;
  }
  copy(e) {
    return this.array = new e.array.constructor(e.array), this.count = e.count, this.stride = e.stride, this.usage = e.usage, this;
  }
  copyAt(e, t, n) {
    e *= this.stride, n *= t.stride;
    for (let s = 0, r = this.stride; s < r; s++)
      this.array[e + s] = t.array[n + s];
    return this;
  }
  set(e, t = 0) {
    return this.array.set(e, t), this;
  }
  clone(e) {
    e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = kt()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer);
    const t = new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]), n = new this.constructor(t, this.stride);
    return n.setUsage(this.usage), n;
  }
  onUpload(e) {
    return this.onUploadCallback = e, this;
  }
  toJSON(e) {
    return e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = kt()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer))), {
      uuid: this.uuid,
      buffer: this.array.buffer._uuid,
      type: this.array.constructor.name,
      stride: this.stride
    };
  }
}
const pt = /* @__PURE__ */ new C();
class Jn {
  constructor(e, t, n, s = !1) {
    this.isInterleavedBufferAttribute = !0, this.name = "", this.data = e, this.itemSize = t, this.offset = n, this.normalized = s;
  }
  get count() {
    return this.data.count;
  }
  get array() {
    return this.data.array;
  }
  set needsUpdate(e) {
    this.data.needsUpdate = e;
  }
  applyMatrix4(e) {
    for (let t = 0, n = this.data.count; t < n; t++)
      pt.fromBufferAttribute(this, t), pt.applyMatrix4(e), this.setXYZ(t, pt.x, pt.y, pt.z);
    return this;
  }
  applyNormalMatrix(e) {
    for (let t = 0, n = this.count; t < n; t++)
      pt.fromBufferAttribute(this, t), pt.applyNormalMatrix(e), this.setXYZ(t, pt.x, pt.y, pt.z);
    return this;
  }
  transformDirection(e) {
    for (let t = 0, n = this.count; t < n; t++)
      pt.fromBufferAttribute(this, t), pt.transformDirection(e), this.setXYZ(t, pt.x, pt.y, pt.z);
    return this;
  }
  setX(e, t) {
    return this.normalized && (t = Z0(t, this.array)), this.data.array[e * this.data.stride + this.offset] = t, this;
  }
  setY(e, t) {
    return this.normalized && (t = Z0(t, this.array)), this.data.array[e * this.data.stride + this.offset + 1] = t, this;
  }
  setZ(e, t) {
    return this.normalized && (t = Z0(t, this.array)), this.data.array[e * this.data.stride + this.offset + 2] = t, this;
  }
  setW(e, t) {
    return this.normalized && (t = Z0(t, this.array)), this.data.array[e * this.data.stride + this.offset + 3] = t, this;
  }
  getX(e) {
    let t = this.data.array[e * this.data.stride + this.offset];
    return this.normalized && (t = Ut(t, this.array)), t;
  }
  getY(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 1];
    return this.normalized && (t = Ut(t, this.array)), t;
  }
  getZ(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 2];
    return this.normalized && (t = Ut(t, this.array)), t;
  }
  getW(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 3];
    return this.normalized && (t = Ut(t, this.array)), t;
  }
  setXY(e, t, n) {
    return e = e * this.data.stride + this.offset, this.normalized && (t = Z0(t, this.array), n = Z0(n, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = n, this;
  }
  setXYZ(e, t, n, s) {
    return e = e * this.data.stride + this.offset, this.normalized && (t = Z0(t, this.array), n = Z0(n, this.array), s = Z0(s, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = n, this.data.array[e + 2] = s, this;
  }
  setXYZW(e, t, n, s, r) {
    return e = e * this.data.stride + this.offset, this.normalized && (t = Z0(t, this.array), n = Z0(n, this.array), s = Z0(s, this.array), r = Z0(r, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = n, this.data.array[e + 2] = s, this.data.array[e + 3] = r, this;
  }
  clone(e) {
    if (e === void 0) {
      console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");
      const t = [];
      for (let n = 0; n < this.count; n++) {
        const s = n * this.data.stride + this.offset;
        for (let r = 0; r < this.itemSize; r++)
          t.push(this.data.array[s + r]);
      }
      return new ee(new this.array.constructor(t), this.itemSize, this.normalized);
    } else
      return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.clone(e)), new Jn(e.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
  }
  toJSON(e) {
    if (e === void 0) {
      console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");
      const t = [];
      for (let n = 0; n < this.count; n++) {
        const s = n * this.data.stride + this.offset;
        for (let r = 0; r < this.itemSize; r++)
          t.push(this.data.array[s + r]);
      }
      return {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array: t,
        normalized: this.normalized
      };
    } else
      return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.toJSON(e)), {
        isInterleavedBufferAttribute: !0,
        itemSize: this.itemSize,
        data: this.data.uuid,
        offset: this.offset,
        normalized: this.normalized
      };
  }
}
class b2 extends et {
  constructor(e) {
    super(), this.isSpriteMaterial = !0, this.type = "SpriteMaterial", this.color = new f0(16777215), this.map = null, this.alphaMap = null, this.rotation = 0, this.sizeAttenuation = !0, this.transparent = !0, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.rotation = e.rotation, this.sizeAttenuation = e.sizeAttenuation, this.fog = e.fog, this;
  }
}
let g9;
const _8 = /* @__PURE__ */ new C(), _9 = /* @__PURE__ */ new C(), v9 = /* @__PURE__ */ new C(), y9 = /* @__PURE__ */ new o0(), v8 = /* @__PURE__ */ new o0(), Lh = /* @__PURE__ */ new k0(), M7 = /* @__PURE__ */ new C(), y8 = /* @__PURE__ */ new C(), S7 = /* @__PURE__ */ new C(), na = /* @__PURE__ */ new o0(), q6 = /* @__PURE__ */ new o0(), ia = /* @__PURE__ */ new o0();
class Rh extends G0 {
  constructor(e) {
    if (super(), this.isSprite = !0, this.type = "Sprite", g9 === void 0) {
      g9 = new F0();
      const t = new Float32Array([
        -0.5,
        -0.5,
        0,
        0,
        0,
        0.5,
        -0.5,
        0,
        1,
        0,
        0.5,
        0.5,
        0,
        1,
        1,
        -0.5,
        0.5,
        0,
        0,
        1
      ]), n = new Ds(t, 5);
      g9.setIndex([0, 1, 2, 0, 2, 3]), g9.setAttribute("position", new Jn(n, 3, 0, !1)), g9.setAttribute("uv", new Jn(n, 2, 3, !1));
    }
    this.geometry = g9, this.material = e !== void 0 ? e : new b2(), this.center = new o0(0.5, 0.5);
  }
  raycast(e, t) {
    e.camera === null && console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'), _9.setFromMatrixScale(this.matrixWorld), Lh.copy(e.camera.matrixWorld), this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse, this.matrixWorld), v9.setFromMatrixPosition(this.modelViewMatrix), e.camera.isPerspectiveCamera && this.material.sizeAttenuation === !1 && _9.multiplyScalar(-v9.z);
    const n = this.material.rotation;
    let s, r;
    n !== 0 && (r = Math.cos(n), s = Math.sin(n));
    const a = this.center;
    E7(M7.set(-0.5, -0.5, 0), v9, a, _9, s, r), E7(y8.set(0.5, -0.5, 0), v9, a, _9, s, r), E7(S7.set(0.5, 0.5, 0), v9, a, _9, s, r), na.set(0, 0), q6.set(1, 0), ia.set(1, 1);
    let o = e.ray.intersectTriangle(M7, y8, S7, !1, _8);
    if (o === null && (E7(y8.set(-0.5, 0.5, 0), v9, a, _9, s, r), q6.set(0, 1), o = e.ray.intersectTriangle(M7, S7, y8, !1, _8), o === null))
      return;
    const c = e.ray.origin.distanceTo(_8);
    c < e.near || c > e.far || t.push({
      distance: c,
      point: _8.clone(),
      uv: Et.getInterpolation(_8, M7, y8, S7, na, q6, ia, new o0()),
      face: null,
      object: this
    });
  }
  copy(e, t) {
    return super.copy(e, t), e.center !== void 0 && this.center.copy(e.center), this.material = e.material, this;
  }
}
function E7(i, e, t, n, s, r) {
  y9.subVectors(i, t).addScalar(0.5).multiply(n), s !== void 0 ? (v8.x = r * y9.x - s * y9.y, v8.y = s * y9.x + r * y9.y) : v8.copy(y9), i.copy(e), i.x += v8.x, i.y += v8.y, i.applyMatrix4(Lh);
}
const T7 = /* @__PURE__ */ new C(), sa = /* @__PURE__ */ new C();
class Ph extends G0 {
  constructor() {
    super(), this._currentLevel = 0, this.type = "LOD", Object.defineProperties(this, {
      levels: {
        enumerable: !0,
        value: []
      },
      isLOD: {
        value: !0
      }
    }), this.autoUpdate = !0;
  }
  copy(e) {
    super.copy(e, !1);
    const t = e.levels;
    for (let n = 0, s = t.length; n < s; n++) {
      const r = t[n];
      this.addLevel(r.object.clone(), r.distance, r.hysteresis);
    }
    return this.autoUpdate = e.autoUpdate, this;
  }
  addLevel(e, t = 0, n = 0) {
    t = Math.abs(t);
    const s = this.levels;
    let r;
    for (r = 0; r < s.length && !(t < s[r].distance); r++)
      ;
    return s.splice(r, 0, { distance: t, hysteresis: n, object: e }), this.add(e), this;
  }
  getCurrentLevel() {
    return this._currentLevel;
  }
  getObjectForDistance(e) {
    const t = this.levels;
    if (t.length > 0) {
      let n, s;
      for (n = 1, s = t.length; n < s; n++) {
        let r = t[n].distance;
        if (t[n].object.visible && (r -= r * t[n].hysteresis), e < r)
          break;
      }
      return t[n - 1].object;
    }
    return null;
  }
  raycast(e, t) {
    if (this.levels.length > 0) {
      T7.setFromMatrixPosition(this.matrixWorld);
      const s = e.ray.origin.distanceTo(T7);
      this.getObjectForDistance(s).raycast(e, t);
    }
  }
  update(e) {
    const t = this.levels;
    if (t.length > 1) {
      T7.setFromMatrixPosition(e.matrixWorld), sa.setFromMatrixPosition(this.matrixWorld);
      const n = T7.distanceTo(sa) / e.zoom;
      t[0].object.visible = !0;
      let s, r;
      for (s = 1, r = t.length; s < r; s++) {
        let a = t[s].distance;
        if (t[s].object.visible && (a -= a * t[s].hysteresis), n >= a)
          t[s - 1].object.visible = !1, t[s].object.visible = !0;
        else
          break;
      }
      for (this._currentLevel = s - 1; s < r; s++)
        t[s].object.visible = !1;
    }
  }
  toJSON(e) {
    const t = super.toJSON(e);
    this.autoUpdate === !1 && (t.object.autoUpdate = !1), t.object.levels = [];
    const n = this.levels;
    for (let s = 0, r = n.length; s < r; s++) {
      const a = n[s];
      t.object.levels.push({
        object: a.object.uuid,
        distance: a.distance,
        hysteresis: a.hysteresis
      });
    }
    return t;
  }
}
const ra = /* @__PURE__ */ new C(), aa = /* @__PURE__ */ new pe(), oa = /* @__PURE__ */ new pe(), $x = /* @__PURE__ */ new C(), la = /* @__PURE__ */ new k0(), x9 = /* @__PURE__ */ new C();
class Dh extends y0 {
  constructor(e, t) {
    super(e, t), this.isSkinnedMesh = !0, this.type = "SkinnedMesh", this.bindMode = "attached", this.bindMatrix = new k0(), this.bindMatrixInverse = new k0(), this.boundingBox = null, this.boundingSphere = null;
  }
  computeBoundingBox() {
    const e = this.geometry;
    this.boundingBox === null && (this.boundingBox = new F1()), this.boundingBox.makeEmpty();
    const t = e.getAttribute("position");
    for (let n = 0; n < t.count; n++)
      x9.fromBufferAttribute(t, n), this.applyBoneTransform(n, x9), this.boundingBox.expandByPoint(x9);
  }
  computeBoundingSphere() {
    const e = this.geometry;
    this.boundingSphere === null && (this.boundingSphere = new z1()), this.boundingSphere.makeEmpty();
    const t = e.getAttribute("position");
    for (let n = 0; n < t.count; n++)
      x9.fromBufferAttribute(t, n), this.applyBoneTransform(n, x9), this.boundingSphere.expandByPoint(x9);
  }
  copy(e, t) {
    return super.copy(e, t), this.bindMode = e.bindMode, this.bindMatrix.copy(e.bindMatrix), this.bindMatrixInverse.copy(e.bindMatrixInverse), this.skeleton = e.skeleton, this;
  }
  bind(e, t) {
    this.skeleton = e, t === void 0 && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), t = this.matrixWorld), this.bindMatrix.copy(t), this.bindMatrixInverse.copy(t).invert();
  }
  pose() {
    this.skeleton.pose();
  }
  normalizeSkinWeights() {
    const e = new pe(), t = this.geometry.attributes.skinWeight;
    for (let n = 0, s = t.count; n < s; n++) {
      e.fromBufferAttribute(t, n);
      const r = 1 / e.manhattanLength();
      r !== 1 / 0 ? e.multiplyScalar(r) : e.set(1, 0, 0, 0), t.setXYZW(n, e.x, e.y, e.z, e.w);
    }
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e), this.bindMode === "attached" ? this.bindMatrixInverse.copy(this.matrixWorld).invert() : this.bindMode === "detached" ? this.bindMatrixInverse.copy(this.bindMatrix).invert() : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
  }
  applyBoneTransform(e, t) {
    const n = this.skeleton, s = this.geometry;
    aa.fromBufferAttribute(s.attributes.skinIndex, e), oa.fromBufferAttribute(s.attributes.skinWeight, e), ra.copy(t).applyMatrix4(this.bindMatrix), t.set(0, 0, 0);
    for (let r = 0; r < 4; r++) {
      const a = oa.getComponent(r);
      if (a !== 0) {
        const o = aa.getComponent(r);
        la.multiplyMatrices(n.bones[o].matrixWorld, n.boneInverses[o]), t.addScaledVector($x.copy(ra).applyMatrix4(la), a);
      }
    }
    return t.applyMatrix4(this.bindMatrixInverse);
  }
  boneTransform(e, t) {
    return console.warn("THREE.SkinnedMesh: .boneTransform() was renamed to .applyBoneTransform() in r151."), this.applyBoneTransform(e, t);
  }
}
class w2 extends G0 {
  constructor() {
    super(), this.isBone = !0, this.type = "Bone";
  }
}
class k9 extends Be {
  constructor(e = null, t = 1, n = 1, s, r, a, o, c, l = ke, h = ke, d, u) {
    super(null, a, o, c, l, h, s, r, d, u), this.isDataTexture = !0, this.image = { data: e, width: t, height: n }, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
  }
}
const ca = /* @__PURE__ */ new k0(), jx = /* @__PURE__ */ new k0();
class o6 {
  constructor(e = [], t = []) {
    this.uuid = kt(), this.bones = e.slice(0), this.boneInverses = t, this.boneMatrices = null, this.boneTexture = null, this.boneTextureSize = 0, this.frame = -1, this.init();
  }
  init() {
    const e = this.bones, t = this.boneInverses;
    if (this.boneMatrices = new Float32Array(e.length * 16), t.length === 0)
      this.calculateInverses();
    else if (e.length !== t.length) {
      console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."), this.boneInverses = [];
      for (let n = 0, s = this.bones.length; n < s; n++)
        this.boneInverses.push(new k0());
    }
  }
  calculateInverses() {
    this.boneInverses.length = 0;
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const n = new k0();
      this.bones[e] && n.copy(this.bones[e].matrixWorld).invert(), this.boneInverses.push(n);
    }
  }
  pose() {
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const n = this.bones[e];
      n && n.matrixWorld.copy(this.boneInverses[e]).invert();
    }
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const n = this.bones[e];
      n && (n.parent && n.parent.isBone ? (n.matrix.copy(n.parent.matrixWorld).invert(), n.matrix.multiply(n.matrixWorld)) : n.matrix.copy(n.matrixWorld), n.matrix.decompose(n.position, n.quaternion, n.scale));
    }
  }
  update() {
    const e = this.bones, t = this.boneInverses, n = this.boneMatrices, s = this.boneTexture;
    for (let r = 0, a = e.length; r < a; r++) {
      const o = e[r] ? e[r].matrixWorld : jx;
      ca.multiplyMatrices(o, t[r]), ca.toArray(n, r * 16);
    }
    s !== null && (s.needsUpdate = !0);
  }
  clone() {
    return new o6(this.bones, this.boneInverses);
  }
  computeBoneTexture() {
    let e = Math.sqrt(this.bones.length * 4);
    e = ph(e), e = Math.max(e, 4);
    const t = new Float32Array(e * e * 4);
    t.set(this.boneMatrices);
    const n = new k9(t, e, e, Ot, P1);
    return n.needsUpdate = !0, this.boneMatrices = t, this.boneTexture = n, this.boneTextureSize = e, this;
  }
  getBoneByName(e) {
    for (let t = 0, n = this.bones.length; t < n; t++) {
      const s = this.bones[t];
      if (s.name === e)
        return s;
    }
  }
  dispose() {
    this.boneTexture !== null && (this.boneTexture.dispose(), this.boneTexture = null);
  }
  fromJSON(e, t) {
    this.uuid = e.uuid;
    for (let n = 0, s = e.bones.length; n < s; n++) {
      const r = e.bones[n];
      let a = t[r];
      a === void 0 && (console.warn("THREE.Skeleton: No bone found with UUID:", r), a = new w2()), this.bones.push(a), this.boneInverses.push(new k0().fromArray(e.boneInverses[n]));
    }
    return this.init(), this;
  }
  toJSON() {
    const e = {
      metadata: {
        version: 4.5,
        type: "Skeleton",
        generator: "Skeleton.toJSON"
      },
      bones: [],
      boneInverses: []
    };
    e.uuid = this.uuid;
    const t = this.bones, n = this.boneInverses;
    for (let s = 0, r = t.length; s < r; s++) {
      const a = t[s];
      e.bones.push(a.uuid);
      const o = n[s];
      e.boneInverses.push(o.toArray());
    }
    return e;
  }
}
class K9 extends ee {
  constructor(e, t, n, s = 1) {
    super(e, t, n), this.isInstancedBufferAttribute = !0, this.meshPerAttribute = s;
  }
  copy(e) {
    return super.copy(e), this.meshPerAttribute = e.meshPerAttribute, this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.meshPerAttribute = this.meshPerAttribute, e.isInstancedBufferAttribute = !0, e;
  }
}
const b9 = /* @__PURE__ */ new k0(), ha = /* @__PURE__ */ new k0(), A7 = [], ua = /* @__PURE__ */ new F1(), Jx = /* @__PURE__ */ new k0(), x8 = /* @__PURE__ */ new y0(), b8 = /* @__PURE__ */ new z1();
class Nh extends y0 {
  constructor(e, t, n) {
    super(e, t), this.isInstancedMesh = !0, this.instanceMatrix = new K9(new Float32Array(n * 16), 16), this.instanceColor = null, this.count = n, this.boundingBox = null, this.boundingSphere = null;
    for (let s = 0; s < n; s++)
      this.setMatrixAt(s, Jx);
  }
  computeBoundingBox() {
    const e = this.geometry, t = this.count;
    this.boundingBox === null && (this.boundingBox = new F1()), e.boundingBox === null && e.computeBoundingBox(), this.boundingBox.makeEmpty();
    for (let n = 0; n < t; n++)
      this.getMatrixAt(n, b9), ua.copy(e.boundingBox).applyMatrix4(b9), this.boundingBox.union(ua);
  }
  computeBoundingSphere() {
    const e = this.geometry, t = this.count;
    this.boundingSphere === null && (this.boundingSphere = new z1()), e.boundingSphere === null && e.computeBoundingSphere(), this.boundingSphere.makeEmpty();
    for (let n = 0; n < t; n++)
      this.getMatrixAt(n, b9), b8.copy(e.boundingSphere).applyMatrix4(b9), this.boundingSphere.union(b8);
  }
  copy(e, t) {
    return super.copy(e, t), this.instanceMatrix.copy(e.instanceMatrix), e.instanceColor !== null && (this.instanceColor = e.instanceColor.clone()), this.count = e.count, this;
  }
  getColorAt(e, t) {
    t.fromArray(this.instanceColor.array, e * 3);
  }
  getMatrixAt(e, t) {
    t.fromArray(this.instanceMatrix.array, e * 16);
  }
  raycast(e, t) {
    const n = this.matrixWorld, s = this.count;
    if (x8.geometry = this.geometry, x8.material = this.material, x8.material !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), b8.copy(this.boundingSphere), b8.applyMatrix4(n), e.ray.intersectsSphere(b8) !== !1))
      for (let r = 0; r < s; r++) {
        this.getMatrixAt(r, b9), ha.multiplyMatrices(n, b9), x8.matrixWorld = ha, x8.raycast(e, A7);
        for (let a = 0, o = A7.length; a < o; a++) {
          const c = A7[a];
          c.instanceId = r, c.object = this, t.push(c);
        }
        A7.length = 0;
      }
  }
  setColorAt(e, t) {
    this.instanceColor === null && (this.instanceColor = new K9(new Float32Array(this.instanceMatrix.count * 3), 3)), t.toArray(this.instanceColor.array, e * 3);
  }
  setMatrixAt(e, t) {
    t.toArray(this.instanceMatrix.array, e * 16);
  }
  updateMorphTargets() {
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
class Ae extends et {
  constructor(e) {
    super(), this.isLineBasicMaterial = !0, this.type = "LineBasicMaterial", this.color = new f0(16777215), this.map = null, this.linewidth = 1, this.linecap = "round", this.linejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.linewidth = e.linewidth, this.linecap = e.linecap, this.linejoin = e.linejoin, this.fog = e.fog, this;
  }
}
const da = /* @__PURE__ */ new C(), fa = /* @__PURE__ */ new C(), pa = /* @__PURE__ */ new k0(), $6 = /* @__PURE__ */ new Rs(), C7 = /* @__PURE__ */ new z1();
class W0 extends G0 {
  constructor(e = new F0(), t = new Ae()) {
    super(), this.isLine = !0, this.type = "Line", this.geometry = e, this.material = t, this.updateMorphTargets();
  }
  copy(e, t) {
    return super.copy(e, t), this.material = e.material, this.geometry = e.geometry, this;
  }
  computeLineDistances() {
    const e = this.geometry;
    if (e.index === null) {
      const t = e.attributes.position, n = [0];
      for (let s = 1, r = t.count; s < r; s++)
        da.fromBufferAttribute(t, s - 1), fa.fromBufferAttribute(t, s), n[s] = n[s - 1], n[s] += da.distanceTo(fa);
      e.setAttribute("lineDistance", new v0(n, 1));
    } else
      console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    return this;
  }
  raycast(e, t) {
    const n = this.geometry, s = this.matrixWorld, r = e.params.Line.threshold, a = n.drawRange;
    if (n.boundingSphere === null && n.computeBoundingSphere(), C7.copy(n.boundingSphere), C7.applyMatrix4(s), C7.radius += r, e.ray.intersectsSphere(C7) === !1)
      return;
    pa.copy(s).invert(), $6.copy(e.ray).applyMatrix4(pa);
    const o = r / ((this.scale.x + this.scale.y + this.scale.z) / 3), c = o * o, l = new C(), h = new C(), d = new C(), u = new C(), f = this.isLineSegments ? 2 : 1, p = n.index, g = n.attributes.position;
    if (p !== null) {
      const m = Math.max(0, a.start), v = Math.min(p.count, a.start + a.count);
      for (let y = m, b = v - 1; y < b; y += f) {
        const w = p.getX(y), x = p.getX(y + 1);
        if (l.fromBufferAttribute(g, w), h.fromBufferAttribute(g, x), $6.distanceSqToSegment(l, h, u, d) > c)
          continue;
        u.applyMatrix4(this.matrixWorld);
        const T = e.ray.origin.distanceTo(u);
        T < e.near || T > e.far || t.push({
          distance: T,
          // What do we want? intersection point on the ray or on the segment??
          // point: raycaster.ray.at( distance ),
          point: d.clone().applyMatrix4(this.matrixWorld),
          index: y,
          face: null,
          faceIndex: null,
          object: this
        });
      }
    } else {
      const m = Math.max(0, a.start), v = Math.min(g.count, a.start + a.count);
      for (let y = m, b = v - 1; y < b; y += f) {
        if (l.fromBufferAttribute(g, y), h.fromBufferAttribute(g, y + 1), $6.distanceSqToSegment(l, h, u, d) > c)
          continue;
        u.applyMatrix4(this.matrixWorld);
        const x = e.ray.origin.distanceTo(u);
        x < e.near || x > e.far || t.push({
          distance: x,
          // What do we want? intersection point on the ray or on the segment??
          // point: raycaster.ray.at( distance ),
          point: d.clone().applyMatrix4(this.matrixWorld),
          index: y,
          face: null,
          faceIndex: null,
          object: this
        });
      }
    }
  }
  updateMorphTargets() {
    const t = this.geometry.morphAttributes, n = Object.keys(t);
    if (n.length > 0) {
      const s = t[n[0]];
      if (s !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let r = 0, a = s.length; r < a; r++) {
          const o = s[r].name || String(r);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[o] = r;
        }
      }
    }
  }
}
const ma = /* @__PURE__ */ new C(), ga = /* @__PURE__ */ new C();
class xt extends W0 {
  constructor(e, t) {
    super(e, t), this.isLineSegments = !0, this.type = "LineSegments";
  }
  computeLineDistances() {
    const e = this.geometry;
    if (e.index === null) {
      const t = e.attributes.position, n = [];
      for (let s = 0, r = t.count; s < r; s += 2)
        ma.fromBufferAttribute(t, s), ga.fromBufferAttribute(t, s + 1), n[s] = s === 0 ? 0 : n[s - 1], n[s + 1] = n[s] + ma.distanceTo(ga);
      e.setAttribute("lineDistance", new v0(n, 1));
    } else
      console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    return this;
  }
}
class Oh extends W0 {
  constructor(e, t) {
    super(e, t), this.isLineLoop = !0, this.type = "LineLoop";
  }
}
class Si extends et {
  constructor(e) {
    super(), this.isPointsMaterial = !0, this.type = "PointsMaterial", this.color = new f0(16777215), this.map = null, this.alphaMap = null, this.size = 1, this.sizeAttenuation = !0, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.size = e.size, this.sizeAttenuation = e.sizeAttenuation, this.fog = e.fog, this;
  }
}
const _a = /* @__PURE__ */ new k0(), C5 = /* @__PURE__ */ new Rs(), I7 = /* @__PURE__ */ new z1(), L7 = /* @__PURE__ */ new C();
class V8 extends G0 {
  constructor(e = new F0(), t = new Si()) {
    super(), this.isPoints = !0, this.type = "Points", this.geometry = e, this.material = t, this.updateMorphTargets();
  }
  copy(e, t) {
    return super.copy(e, t), this.material = e.material, this.geometry = e.geometry, this;
  }
  raycast(e, t) {
    const n = this.geometry, s = this.matrixWorld, r = e.params.Points.threshold, a = n.drawRange;
    if (n.boundingSphere === null && n.computeBoundingSphere(), I7.copy(n.boundingSphere), I7.applyMatrix4(s), I7.radius += r, e.ray.intersectsSphere(I7) === !1)
      return;
    _a.copy(s).invert(), C5.copy(e.ray).applyMatrix4(_a);
    const o = r / ((this.scale.x + this.scale.y + this.scale.z) / 3), c = o * o, l = n.index, d = n.attributes.position;
    if (l !== null) {
      const u = Math.max(0, a.start), f = Math.min(l.count, a.start + a.count);
      for (let p = u, _ = f; p < _; p++) {
        const g = l.getX(p);
        L7.fromBufferAttribute(d, g), va(L7, g, c, s, e, t, this);
      }
    } else {
      const u = Math.max(0, a.start), f = Math.min(d.count, a.start + a.count);
      for (let p = u, _ = f; p < _; p++)
        L7.fromBufferAttribute(d, p), va(L7, p, c, s, e, t, this);
    }
  }
  updateMorphTargets() {
    const t = this.geometry.morphAttributes, n = Object.keys(t);
    if (n.length > 0) {
      const s = t[n[0]];
      if (s !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let r = 0, a = s.length; r < a; r++) {
          const o = s[r].name || String(r);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[o] = r;
        }
      }
    }
  }
}
function va(i, e, t, n, s, r, a) {
  const o = C5.distanceSqToPoint(i);
  if (o < t) {
    const c = new C();
    C5.closestPointToPoint(i, c), c.applyMatrix4(n);
    const l = s.ray.origin.distanceTo(c);
    if (l < s.near || l > s.far)
      return;
    r.push({
      distance: l,
      distanceToRay: Math.sqrt(o),
      point: c,
      index: e,
      face: null,
      object: a
    });
  }
}
class Kx extends Be {
  constructor(e, t, n, s, r, a, o, c, l) {
    super(e, t, n, s, r, a, o, c, l), this.isVideoTexture = !0, this.minFilter = a !== void 0 ? a : Pe, this.magFilter = r !== void 0 ? r : Pe, this.generateMipmaps = !1;
    const h = this;
    function d() {
      h.needsUpdate = !0, e.requestVideoFrameCallback(d);
    }
    "requestVideoFrameCallback" in e && e.requestVideoFrameCallback(d);
  }
  clone() {
    return new this.constructor(this.image).copy(this);
  }
  update() {
    const e = this.image;
    "requestVideoFrameCallback" in e === !1 && e.readyState >= e.HAVE_CURRENT_DATA && (this.needsUpdate = !0);
  }
}
class Qx extends Be {
  constructor(e, t, n) {
    super({ width: e, height: t }), this.isFramebufferTexture = !0, this.format = n, this.magFilter = ke, this.minFilter = ke, this.generateMipmaps = !1, this.needsUpdate = !0;
  }
}
class M2 extends Be {
  constructor(e, t, n, s, r, a, o, c, l, h, d, u) {
    super(null, a, o, c, l, h, s, r, d, u), this.isCompressedTexture = !0, this.image = { width: t, height: n }, this.mipmaps = e, this.flipY = !1, this.generateMipmaps = !1;
  }
}
class eb extends M2 {
  constructor(e, t, n, s, r, a) {
    super(e, t, n, r, a), this.isCompressedArrayTexture = !0, this.image.depth = s, this.wrapR = ht;
  }
}
class tb extends Be {
  constructor(e, t, n, s, r, a, o, c, l) {
    super(e, t, n, s, r, a, o, c, l), this.isCanvasTexture = !0, this.needsUpdate = !0;
  }
}
class h1 {
  constructor() {
    this.type = "Curve", this.arcLengthDivisions = 200;
  }
  // Virtual base class method to overwrite and implement in subclasses
  //	- t [0 .. 1]
  getPoint() {
    return console.warn("THREE.Curve: .getPoint() not implemented."), null;
  }
  // Get point at relative position in curve according to arc length
  // - u [0 .. 1]
  getPointAt(e, t) {
    const n = this.getUtoTmapping(e);
    return this.getPoint(n, t);
  }
  // Get sequence of points using getPoint( t )
  getPoints(e = 5) {
    const t = [];
    for (let n = 0; n <= e; n++)
      t.push(this.getPoint(n / e));
    return t;
  }
  // Get sequence of points using getPointAt( u )
  getSpacedPoints(e = 5) {
    const t = [];
    for (let n = 0; n <= e; n++)
      t.push(this.getPointAt(n / e));
    return t;
  }
  // Get total curve arc length
  getLength() {
    const e = this.getLengths();
    return e[e.length - 1];
  }
  // Get list of cumulative segment lengths
  getLengths(e = this.arcLengthDivisions) {
    if (this.cacheArcLengths && this.cacheArcLengths.length === e + 1 && !this.needsUpdate)
      return this.cacheArcLengths;
    this.needsUpdate = !1;
    const t = [];
    let n, s = this.getPoint(0), r = 0;
    t.push(0);
    for (let a = 1; a <= e; a++)
      n = this.getPoint(a / e), r += n.distanceTo(s), t.push(r), s = n;
    return this.cacheArcLengths = t, t;
  }
  updateArcLengths() {
    this.needsUpdate = !0, this.getLengths();
  }
  // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
  getUtoTmapping(e, t) {
    const n = this.getLengths();
    let s = 0;
    const r = n.length;
    let a;
    t ? a = t : a = e * n[r - 1];
    let o = 0, c = r - 1, l;
    for (; o <= c; )
      if (s = Math.floor(o + (c - o) / 2), l = n[s] - a, l < 0)
        o = s + 1;
      else if (l > 0)
        c = s - 1;
      else {
        c = s;
        break;
      }
    if (s = c, n[s] === a)
      return s / (r - 1);
    const h = n[s], u = n[s + 1] - h, f = (a - h) / u;
    return (s + f) / (r - 1);
  }
  // Returns a unit vector tangent at t
  // In case any sub curve does not implement its tangent derivation,
  // 2 points a small delta apart will be used to find its gradient
  // which seems to give a reasonable approximation
  getTangent(e, t) {
    let s = e - 1e-4, r = e + 1e-4;
    s < 0 && (s = 0), r > 1 && (r = 1);
    const a = this.getPoint(s), o = this.getPoint(r), c = t || (a.isVector2 ? new o0() : new C());
    return c.copy(o).sub(a).normalize(), c;
  }
  getTangentAt(e, t) {
    const n = this.getUtoTmapping(e);
    return this.getTangent(n, t);
  }
  computeFrenetFrames(e, t) {
    const n = new C(), s = [], r = [], a = [], o = new C(), c = new k0();
    for (let f = 0; f <= e; f++) {
      const p = f / e;
      s[f] = this.getTangentAt(p, new C());
    }
    r[0] = new C(), a[0] = new C();
    let l = Number.MAX_VALUE;
    const h = Math.abs(s[0].x), d = Math.abs(s[0].y), u = Math.abs(s[0].z);
    h <= l && (l = h, n.set(1, 0, 0)), d <= l && (l = d, n.set(0, 1, 0)), u <= l && n.set(0, 0, 1), o.crossVectors(s[0], n).normalize(), r[0].crossVectors(s[0], o), a[0].crossVectors(s[0], r[0]);
    for (let f = 1; f <= e; f++) {
      if (r[f] = r[f - 1].clone(), a[f] = a[f - 1].clone(), o.crossVectors(s[f - 1], s[f]), o.length() > Number.EPSILON) {
        o.normalize();
        const p = Math.acos(De(s[f - 1].dot(s[f]), -1, 1));
        r[f].applyMatrix4(c.makeRotationAxis(o, p));
      }
      a[f].crossVectors(s[f], r[f]);
    }
    if (t === !0) {
      let f = Math.acos(De(r[0].dot(r[e]), -1, 1));
      f /= e, s[0].dot(o.crossVectors(r[0], r[e])) > 0 && (f = -f);
      for (let p = 1; p <= e; p++)
        r[p].applyMatrix4(c.makeRotationAxis(s[p], f * p)), a[p].crossVectors(s[p], r[p]);
    }
    return {
      tangents: s,
      normals: r,
      binormals: a
    };
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.arcLengthDivisions = e.arcLengthDivisions, this;
  }
  toJSON() {
    const e = {
      metadata: {
        version: 4.5,
        type: "Curve",
        generator: "Curve.toJSON"
      }
    };
    return e.arcLengthDivisions = this.arcLengthDivisions, e.type = this.type, e;
  }
  fromJSON(e) {
    return this.arcLengthDivisions = e.arcLengthDivisions, this;
  }
}
class l6 extends h1 {
  constructor(e = 0, t = 0, n = 1, s = 1, r = 0, a = Math.PI * 2, o = !1, c = 0) {
    super(), this.isEllipseCurve = !0, this.type = "EllipseCurve", this.aX = e, this.aY = t, this.xRadius = n, this.yRadius = s, this.aStartAngle = r, this.aEndAngle = a, this.aClockwise = o, this.aRotation = c;
  }
  getPoint(e, t) {
    const n = t || new o0(), s = Math.PI * 2;
    let r = this.aEndAngle - this.aStartAngle;
    const a = Math.abs(r) < Number.EPSILON;
    for (; r < 0; )
      r += s;
    for (; r > s; )
      r -= s;
    r < Number.EPSILON && (a ? r = 0 : r = s), this.aClockwise === !0 && !a && (r === s ? r = -s : r = r - s);
    const o = this.aStartAngle + e * r;
    let c = this.aX + this.xRadius * Math.cos(o), l = this.aY + this.yRadius * Math.sin(o);
    if (this.aRotation !== 0) {
      const h = Math.cos(this.aRotation), d = Math.sin(this.aRotation), u = c - this.aX, f = l - this.aY;
      c = u * h - f * d + this.aX, l = u * d + f * h + this.aY;
    }
    return n.set(c, l);
  }
  copy(e) {
    return super.copy(e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.aX = this.aX, e.aY = this.aY, e.xRadius = this.xRadius, e.yRadius = this.yRadius, e.aStartAngle = this.aStartAngle, e.aEndAngle = this.aEndAngle, e.aClockwise = this.aClockwise, e.aRotation = this.aRotation, e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this;
  }
}
class Uh extends l6 {
  constructor(e, t, n, s, r, a) {
    super(e, t, n, n, s, r, a), this.isArcCurve = !0, this.type = "ArcCurve";
  }
}
function S2() {
  let i = 0, e = 0, t = 0, n = 0;
  function s(r, a, o, c) {
    i = r, e = o, t = -3 * r + 3 * a - 2 * o - c, n = 2 * r - 2 * a + o + c;
  }
  return {
    initCatmullRom: function(r, a, o, c, l) {
      s(a, o, l * (o - r), l * (c - a));
    },
    initNonuniformCatmullRom: function(r, a, o, c, l, h, d) {
      let u = (a - r) / l - (o - r) / (l + h) + (o - a) / h, f = (o - a) / h - (c - a) / (h + d) + (c - o) / d;
      u *= h, f *= h, s(a, o, u, f);
    },
    calc: function(r) {
      const a = r * r, o = a * r;
      return i + e * r + t * a + n * o;
    }
  };
}
const R7 = /* @__PURE__ */ new C(), j6 = /* @__PURE__ */ new S2(), J6 = /* @__PURE__ */ new S2(), K6 = /* @__PURE__ */ new S2();
class Fh extends h1 {
  constructor(e = [], t = !1, n = "centripetal", s = 0.5) {
    super(), this.isCatmullRomCurve3 = !0, this.type = "CatmullRomCurve3", this.points = e, this.closed = t, this.curveType = n, this.tension = s;
  }
  getPoint(e, t = new C()) {
    const n = t, s = this.points, r = s.length, a = (r - (this.closed ? 0 : 1)) * e;
    let o = Math.floor(a), c = a - o;
    this.closed ? o += o > 0 ? 0 : (Math.floor(Math.abs(o) / r) + 1) * r : c === 0 && o === r - 1 && (o = r - 2, c = 1);
    let l, h;
    this.closed || o > 0 ? l = s[(o - 1) % r] : (R7.subVectors(s[0], s[1]).add(s[0]), l = R7);
    const d = s[o % r], u = s[(o + 1) % r];
    if (this.closed || o + 2 < r ? h = s[(o + 2) % r] : (R7.subVectors(s[r - 1], s[r - 2]).add(s[r - 1]), h = R7), this.curveType === "centripetal" || this.curveType === "chordal") {
      const f = this.curveType === "chordal" ? 0.5 : 0.25;
      let p = Math.pow(l.distanceToSquared(d), f), _ = Math.pow(d.distanceToSquared(u), f), g = Math.pow(u.distanceToSquared(h), f);
      _ < 1e-4 && (_ = 1), p < 1e-4 && (p = _), g < 1e-4 && (g = _), j6.initNonuniformCatmullRom(l.x, d.x, u.x, h.x, p, _, g), J6.initNonuniformCatmullRom(l.y, d.y, u.y, h.y, p, _, g), K6.initNonuniformCatmullRom(l.z, d.z, u.z, h.z, p, _, g);
    } else
      this.curveType === "catmullrom" && (j6.initCatmullRom(l.x, d.x, u.x, h.x, this.tension), J6.initCatmullRom(l.y, d.y, u.y, h.y, this.tension), K6.initCatmullRom(l.z, d.z, u.z, h.z, this.tension));
    return n.set(
      j6.calc(c),
      J6.calc(c),
      K6.calc(c)
    ), n;
  }
  copy(e) {
    super.copy(e), this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const s = e.points[t];
      this.points.push(s.clone());
    }
    return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this;
  }
  toJSON() {
    const e = super.toJSON();
    e.points = [];
    for (let t = 0, n = this.points.length; t < n; t++) {
      const s = this.points[t];
      e.points.push(s.toArray());
    }
    return e.closed = this.closed, e.curveType = this.curveType, e.tension = this.tension, e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const s = e.points[t];
      this.points.push(new C().fromArray(s));
    }
    return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this;
  }
}
function ya(i, e, t, n, s) {
  const r = (n - e) * 0.5, a = (s - t) * 0.5, o = i * i, c = i * o;
  return (2 * t - 2 * n + r + a) * c + (-3 * t + 3 * n - 2 * r - a) * o + r * i + t;
}
function nb(i, e) {
  const t = 1 - i;
  return t * t * e;
}
function ib(i, e) {
  return 2 * (1 - i) * i * e;
}
function sb(i, e) {
  return i * i * e;
}
function H8(i, e, t, n) {
  return nb(i, e) + ib(i, t) + sb(i, n);
}
function rb(i, e) {
  const t = 1 - i;
  return t * t * t * e;
}
function ab(i, e) {
  const t = 1 - i;
  return 3 * t * t * i * e;
}
function ob(i, e) {
  return 3 * (1 - i) * i * i * e;
}
function lb(i, e) {
  return i * i * i * e;
}
function G8(i, e, t, n, s) {
  return rb(i, e) + ab(i, t) + ob(i, n) + lb(i, s);
}
class E2 extends h1 {
  constructor(e = new o0(), t = new o0(), n = new o0(), s = new o0()) {
    super(), this.isCubicBezierCurve = !0, this.type = "CubicBezierCurve", this.v0 = e, this.v1 = t, this.v2 = n, this.v3 = s;
  }
  getPoint(e, t = new o0()) {
    const n = t, s = this.v0, r = this.v1, a = this.v2, o = this.v3;
    return n.set(
      G8(e, s.x, r.x, a.x, o.x),
      G8(e, s.y, r.y, a.y, o.y)
    ), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this;
  }
}
class zh extends h1 {
  constructor(e = new C(), t = new C(), n = new C(), s = new C()) {
    super(), this.isCubicBezierCurve3 = !0, this.type = "CubicBezierCurve3", this.v0 = e, this.v1 = t, this.v2 = n, this.v3 = s;
  }
  getPoint(e, t = new C()) {
    const n = t, s = this.v0, r = this.v1, a = this.v2, o = this.v3;
    return n.set(
      G8(e, s.x, r.x, a.x, o.x),
      G8(e, s.y, r.y, a.y, o.y),
      G8(e, s.z, r.z, a.z, o.z)
    ), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this;
  }
}
class c6 extends h1 {
  constructor(e = new o0(), t = new o0()) {
    super(), this.isLineCurve = !0, this.type = "LineCurve", this.v1 = e, this.v2 = t;
  }
  getPoint(e, t = new o0()) {
    const n = t;
    return e === 1 ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(e).add(this.v1)), n;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(e, t) {
    return this.getPoint(e, t);
  }
  getTangent(e, t = new o0()) {
    return t.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(e, t) {
    return this.getTangent(e, t);
  }
  copy(e) {
    return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class kh extends h1 {
  constructor(e = new C(), t = new C()) {
    super(), this.isLineCurve3 = !0, this.type = "LineCurve3", this.v1 = e, this.v2 = t;
  }
  getPoint(e, t = new C()) {
    const n = t;
    return e === 1 ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(e).add(this.v1)), n;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(e, t) {
    return this.getPoint(e, t);
  }
  getTangent(e, t = new C()) {
    return t.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(e, t) {
    return this.getTangent(e, t);
  }
  copy(e) {
    return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class T2 extends h1 {
  constructor(e = new o0(), t = new o0(), n = new o0()) {
    super(), this.isQuadraticBezierCurve = !0, this.type = "QuadraticBezierCurve", this.v0 = e, this.v1 = t, this.v2 = n;
  }
  getPoint(e, t = new o0()) {
    const n = t, s = this.v0, r = this.v1, a = this.v2;
    return n.set(
      H8(e, s.x, r.x, a.x),
      H8(e, s.y, r.y, a.y)
    ), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class A2 extends h1 {
  constructor(e = new C(), t = new C(), n = new C()) {
    super(), this.isQuadraticBezierCurve3 = !0, this.type = "QuadraticBezierCurve3", this.v0 = e, this.v1 = t, this.v2 = n;
  }
  getPoint(e, t = new C()) {
    const n = t, s = this.v0, r = this.v1, a = this.v2;
    return n.set(
      H8(e, s.x, r.x, a.x),
      H8(e, s.y, r.y, a.y),
      H8(e, s.z, r.z, a.z)
    ), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class C2 extends h1 {
  constructor(e = []) {
    super(), this.isSplineCurve = !0, this.type = "SplineCurve", this.points = e;
  }
  getPoint(e, t = new o0()) {
    const n = t, s = this.points, r = (s.length - 1) * e, a = Math.floor(r), o = r - a, c = s[a === 0 ? a : a - 1], l = s[a], h = s[a > s.length - 2 ? s.length - 1 : a + 1], d = s[a > s.length - 3 ? s.length - 1 : a + 2];
    return n.set(
      ya(o, c.x, l.x, h.x, d.x),
      ya(o, c.y, l.y, h.y, d.y)
    ), n;
  }
  copy(e) {
    super.copy(e), this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const s = e.points[t];
      this.points.push(s.clone());
    }
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.points = [];
    for (let t = 0, n = this.points.length; t < n; t++) {
      const s = this.points[t];
      e.points.push(s.toArray());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const s = e.points[t];
      this.points.push(new o0().fromArray(s));
    }
    return this;
  }
}
var I2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ArcCurve: Uh,
  CatmullRomCurve3: Fh,
  CubicBezierCurve: E2,
  CubicBezierCurve3: zh,
  EllipseCurve: l6,
  LineCurve: c6,
  LineCurve3: kh,
  QuadraticBezierCurve: T2,
  QuadraticBezierCurve3: A2,
  SplineCurve: C2
});
class Bh extends h1 {
  constructor() {
    super(), this.type = "CurvePath", this.curves = [], this.autoClose = !1;
  }
  add(e) {
    this.curves.push(e);
  }
  closePath() {
    const e = this.curves[0].getPoint(0), t = this.curves[this.curves.length - 1].getPoint(1);
    e.equals(t) || this.curves.push(new c6(t, e));
  }
  // To get accurate point with reference to
  // entire path distance at time t,
  // following has to be done:
  // 1. Length of each sub path have to be known
  // 2. Locate and identify type of curve
  // 3. Get t for the curve
  // 4. Return curve.getPointAt(t')
  getPoint(e, t) {
    const n = e * this.getLength(), s = this.getCurveLengths();
    let r = 0;
    for (; r < s.length; ) {
      if (s[r] >= n) {
        const a = s[r] - n, o = this.curves[r], c = o.getLength(), l = c === 0 ? 0 : 1 - a / c;
        return o.getPointAt(l, t);
      }
      r++;
    }
    return null;
  }
  // We cannot use the default THREE.Curve getPoint() with getLength() because in
  // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
  // getPoint() depends on getLength
  getLength() {
    const e = this.getCurveLengths();
    return e[e.length - 1];
  }
  // cacheLengths must be recalculated.
  updateArcLengths() {
    this.needsUpdate = !0, this.cacheLengths = null, this.getCurveLengths();
  }
  // Compute lengths and cache them
  // We cannot overwrite getLengths() because UtoT mapping uses it.
  getCurveLengths() {
    if (this.cacheLengths && this.cacheLengths.length === this.curves.length)
      return this.cacheLengths;
    const e = [];
    let t = 0;
    for (let n = 0, s = this.curves.length; n < s; n++)
      t += this.curves[n].getLength(), e.push(t);
    return this.cacheLengths = e, e;
  }
  getSpacedPoints(e = 40) {
    const t = [];
    for (let n = 0; n <= e; n++)
      t.push(this.getPoint(n / e));
    return this.autoClose && t.push(t[0]), t;
  }
  getPoints(e = 12) {
    const t = [];
    let n;
    for (let s = 0, r = this.curves; s < r.length; s++) {
      const a = r[s], o = a.isEllipseCurve ? e * 2 : a.isLineCurve || a.isLineCurve3 ? 1 : a.isSplineCurve ? e * a.points.length : e, c = a.getPoints(o);
      for (let l = 0; l < c.length; l++) {
        const h = c[l];
        n && n.equals(h) || (t.push(h), n = h);
      }
    }
    return this.autoClose && t.length > 1 && !t[t.length - 1].equals(t[0]) && t.push(t[0]), t;
  }
  copy(e) {
    super.copy(e), this.curves = [];
    for (let t = 0, n = e.curves.length; t < n; t++) {
      const s = e.curves[t];
      this.curves.push(s.clone());
    }
    return this.autoClose = e.autoClose, this;
  }
  toJSON() {
    const e = super.toJSON();
    e.autoClose = this.autoClose, e.curves = [];
    for (let t = 0, n = this.curves.length; t < n; t++) {
      const s = this.curves[t];
      e.curves.push(s.toJSON());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.autoClose = e.autoClose, this.curves = [];
    for (let t = 0, n = e.curves.length; t < n; t++) {
      const s = e.curves[t];
      this.curves.push(new I2[s.type]().fromJSON(s));
    }
    return this;
  }
}
class ds extends Bh {
  constructor(e) {
    super(), this.type = "Path", this.currentPoint = new o0(), e && this.setFromPoints(e);
  }
  setFromPoints(e) {
    this.moveTo(e[0].x, e[0].y);
    for (let t = 1, n = e.length; t < n; t++)
      this.lineTo(e[t].x, e[t].y);
    return this;
  }
  moveTo(e, t) {
    return this.currentPoint.set(e, t), this;
  }
  lineTo(e, t) {
    const n = new c6(this.currentPoint.clone(), new o0(e, t));
    return this.curves.push(n), this.currentPoint.set(e, t), this;
  }
  quadraticCurveTo(e, t, n, s) {
    const r = new T2(
      this.currentPoint.clone(),
      new o0(e, t),
      new o0(n, s)
    );
    return this.curves.push(r), this.currentPoint.set(n, s), this;
  }
  bezierCurveTo(e, t, n, s, r, a) {
    const o = new E2(
      this.currentPoint.clone(),
      new o0(e, t),
      new o0(n, s),
      new o0(r, a)
    );
    return this.curves.push(o), this.currentPoint.set(r, a), this;
  }
  splineThru(e) {
    const t = [this.currentPoint.clone()].concat(e), n = new C2(t);
    return this.curves.push(n), this.currentPoint.copy(e[e.length - 1]), this;
  }
  arc(e, t, n, s, r, a) {
    const o = this.currentPoint.x, c = this.currentPoint.y;
    return this.absarc(
      e + o,
      t + c,
      n,
      s,
      r,
      a
    ), this;
  }
  absarc(e, t, n, s, r, a) {
    return this.absellipse(e, t, n, n, s, r, a), this;
  }
  ellipse(e, t, n, s, r, a, o, c) {
    const l = this.currentPoint.x, h = this.currentPoint.y;
    return this.absellipse(e + l, t + h, n, s, r, a, o, c), this;
  }
  absellipse(e, t, n, s, r, a, o, c) {
    const l = new l6(e, t, n, s, r, a, o, c);
    if (this.curves.length > 0) {
      const d = l.getPoint(0);
      d.equals(this.currentPoint) || this.lineTo(d.x, d.y);
    }
    this.curves.push(l);
    const h = l.getPoint(1);
    return this.currentPoint.copy(h), this;
  }
  copy(e) {
    return super.copy(e), this.currentPoint.copy(e.currentPoint), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.currentPoint = this.currentPoint.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.currentPoint.fromArray(e.currentPoint), this;
  }
}
class i8 extends F0 {
  constructor(e = [new o0(0, -0.5), new o0(0.5, 0), new o0(0, 0.5)], t = 12, n = 0, s = Math.PI * 2) {
    super(), this.type = "LatheGeometry", this.parameters = {
      points: e,
      segments: t,
      phiStart: n,
      phiLength: s
    }, t = Math.floor(t), s = De(s, 0, Math.PI * 2);
    const r = [], a = [], o = [], c = [], l = [], h = 1 / t, d = new C(), u = new o0(), f = new C(), p = new C(), _ = new C();
    let g = 0, m = 0;
    for (let v = 0; v <= e.length - 1; v++)
      switch (v) {
        case 0:
          g = e[v + 1].x - e[v].x, m = e[v + 1].y - e[v].y, f.x = m * 1, f.y = -g, f.z = m * 0, _.copy(f), f.normalize(), c.push(f.x, f.y, f.z);
          break;
        case e.length - 1:
          c.push(_.x, _.y, _.z);
          break;
        default:
          g = e[v + 1].x - e[v].x, m = e[v + 1].y - e[v].y, f.x = m * 1, f.y = -g, f.z = m * 0, p.copy(f), f.x += _.x, f.y += _.y, f.z += _.z, f.normalize(), c.push(f.x, f.y, f.z), _.copy(p);
      }
    for (let v = 0; v <= t; v++) {
      const y = n + v * h * s, b = Math.sin(y), w = Math.cos(y);
      for (let x = 0; x <= e.length - 1; x++) {
        d.x = e[x].x * b, d.y = e[x].y, d.z = e[x].x * w, a.push(d.x, d.y, d.z), u.x = v / t, u.y = x / (e.length - 1), o.push(u.x, u.y);
        const S = c[3 * x + 0] * b, T = c[3 * x + 1], M = c[3 * x + 0] * w;
        l.push(S, T, M);
      }
    }
    for (let v = 0; v < t; v++)
      for (let y = 0; y < e.length - 1; y++) {
        const b = y + v * e.length, w = b, x = b + e.length, S = b + e.length + 1, T = b + 1;
        r.push(w, x, T), r.push(S, T, x);
      }
    this.setIndex(r), this.setAttribute("position", new v0(a, 3)), this.setAttribute("uv", new v0(o, 2)), this.setAttribute("normal", new v0(l, 3));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new i8(e.points, e.segments, e.phiStart, e.phiLength);
  }
}
class Ns extends i8 {
  constructor(e = 1, t = 1, n = 4, s = 8) {
    const r = new ds();
    r.absarc(0, -t / 2, e, Math.PI * 1.5, 0), r.absarc(0, t / 2, e, 0, Math.PI * 0.5), super(r.getPoints(n), s), this.type = "CapsuleGeometry", this.parameters = {
      radius: e,
      height: t,
      capSegments: n,
      radialSegments: s
    };
  }
  static fromJSON(e) {
    return new Ns(e.radius, e.length, e.capSegments, e.radialSegments);
  }
}
class Os extends F0 {
  constructor(e = 1, t = 32, n = 0, s = Math.PI * 2) {
    super(), this.type = "CircleGeometry", this.parameters = {
      radius: e,
      segments: t,
      thetaStart: n,
      thetaLength: s
    }, t = Math.max(3, t);
    const r = [], a = [], o = [], c = [], l = new C(), h = new o0();
    a.push(0, 0, 0), o.push(0, 0, 1), c.push(0.5, 0.5);
    for (let d = 0, u = 3; d <= t; d++, u += 3) {
      const f = n + d / t * s;
      l.x = e * Math.cos(f), l.y = e * Math.sin(f), a.push(l.x, l.y, l.z), o.push(0, 0, 1), h.x = (a[u] / e + 1) / 2, h.y = (a[u + 1] / e + 1) / 2, c.push(h.x, h.y);
    }
    for (let d = 1; d <= t; d++)
      r.push(d, d + 1, 0);
    this.setIndex(r), this.setAttribute("position", new v0(a, 3)), this.setAttribute("normal", new v0(o, 3)), this.setAttribute("uv", new v0(c, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Os(e.radius, e.segments, e.thetaStart, e.thetaLength);
  }
}
class Ke extends F0 {
  constructor(e = 1, t = 1, n = 1, s = 32, r = 1, a = !1, o = 0, c = Math.PI * 2) {
    super(), this.type = "CylinderGeometry", this.parameters = {
      radiusTop: e,
      radiusBottom: t,
      height: n,
      radialSegments: s,
      heightSegments: r,
      openEnded: a,
      thetaStart: o,
      thetaLength: c
    };
    const l = this;
    s = Math.floor(s), r = Math.floor(r);
    const h = [], d = [], u = [], f = [];
    let p = 0;
    const _ = [], g = n / 2;
    let m = 0;
    v(), a === !1 && (e > 0 && y(!0), t > 0 && y(!1)), this.setIndex(h), this.setAttribute("position", new v0(d, 3)), this.setAttribute("normal", new v0(u, 3)), this.setAttribute("uv", new v0(f, 2));
    function v() {
      const b = new C(), w = new C();
      let x = 0;
      const S = (t - e) / n;
      for (let T = 0; T <= r; T++) {
        const M = [], A = T / r, D = A * (t - e) + e;
        for (let z = 0; z <= s; z++) {
          const O = z / s, U = O * c + o, V = Math.sin(U), Y = Math.cos(U);
          w.x = D * V, w.y = -A * n + g, w.z = D * Y, d.push(w.x, w.y, w.z), b.set(V, S, Y).normalize(), u.push(b.x, b.y, b.z), f.push(O, 1 - A), M.push(p++);
        }
        _.push(M);
      }
      for (let T = 0; T < s; T++)
        for (let M = 0; M < r; M++) {
          const A = _[M][T], D = _[M + 1][T], z = _[M + 1][T + 1], O = _[M][T + 1];
          h.push(A, D, O), h.push(D, z, O), x += 6;
        }
      l.addGroup(m, x, 0), m += x;
    }
    function y(b) {
      const w = p, x = new o0(), S = new C();
      let T = 0;
      const M = b === !0 ? e : t, A = b === !0 ? 1 : -1;
      for (let z = 1; z <= s; z++)
        d.push(0, g * A, 0), u.push(0, A, 0), f.push(0.5, 0.5), p++;
      const D = p;
      for (let z = 0; z <= s; z++) {
        const U = z / s * c + o, V = Math.cos(U), Y = Math.sin(U);
        S.x = M * Y, S.y = g * A, S.z = M * V, d.push(S.x, S.y, S.z), u.push(0, A, 0), x.x = V * 0.5 + 0.5, x.y = Y * 0.5 * A + 0.5, f.push(x.x, x.y), p++;
      }
      for (let z = 0; z < s; z++) {
        const O = w + z, U = D + z;
        b === !0 ? h.push(U, U + 1, O) : h.push(U + 1, U, O), T += 3;
      }
      l.addGroup(m, T, b === !0 ? 1 : 2), m += T;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Ke(e.radiusTop, e.radiusBottom, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
  }
}
class s8 extends Ke {
  constructor(e = 1, t = 1, n = 32, s = 1, r = !1, a = 0, o = Math.PI * 2) {
    super(0, e, t, n, s, r, a, o), this.type = "ConeGeometry", this.parameters = {
      radius: e,
      height: t,
      radialSegments: n,
      heightSegments: s,
      openEnded: r,
      thetaStart: a,
      thetaLength: o
    };
  }
  static fromJSON(e) {
    return new s8(e.radius, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
  }
}
class cn extends F0 {
  constructor(e = [], t = [], n = 1, s = 0) {
    super(), this.type = "PolyhedronGeometry", this.parameters = {
      vertices: e,
      indices: t,
      radius: n,
      detail: s
    };
    const r = [], a = [];
    o(s), l(n), h(), this.setAttribute("position", new v0(r, 3)), this.setAttribute("normal", new v0(r.slice(), 3)), this.setAttribute("uv", new v0(a, 2)), s === 0 ? this.computeVertexNormals() : this.normalizeNormals();
    function o(v) {
      const y = new C(), b = new C(), w = new C();
      for (let x = 0; x < t.length; x += 3)
        f(t[x + 0], y), f(t[x + 1], b), f(t[x + 2], w), c(y, b, w, v);
    }
    function c(v, y, b, w) {
      const x = w + 1, S = [];
      for (let T = 0; T <= x; T++) {
        S[T] = [];
        const M = v.clone().lerp(b, T / x), A = y.clone().lerp(b, T / x), D = x - T;
        for (let z = 0; z <= D; z++)
          z === 0 && T === x ? S[T][z] = M : S[T][z] = M.clone().lerp(A, z / D);
      }
      for (let T = 0; T < x; T++)
        for (let M = 0; M < 2 * (x - T) - 1; M++) {
          const A = Math.floor(M / 2);
          M % 2 === 0 ? (u(S[T][A + 1]), u(S[T + 1][A]), u(S[T][A])) : (u(S[T][A + 1]), u(S[T + 1][A + 1]), u(S[T + 1][A]));
        }
    }
    function l(v) {
      const y = new C();
      for (let b = 0; b < r.length; b += 3)
        y.x = r[b + 0], y.y = r[b + 1], y.z = r[b + 2], y.normalize().multiplyScalar(v), r[b + 0] = y.x, r[b + 1] = y.y, r[b + 2] = y.z;
    }
    function h() {
      const v = new C();
      for (let y = 0; y < r.length; y += 3) {
        v.x = r[y + 0], v.y = r[y + 1], v.z = r[y + 2];
        const b = g(v) / 2 / Math.PI + 0.5, w = m(v) / Math.PI + 0.5;
        a.push(b, 1 - w);
      }
      p(), d();
    }
    function d() {
      for (let v = 0; v < a.length; v += 6) {
        const y = a[v + 0], b = a[v + 2], w = a[v + 4], x = Math.max(y, b, w), S = Math.min(y, b, w);
        x > 0.9 && S < 0.1 && (y < 0.2 && (a[v + 0] += 1), b < 0.2 && (a[v + 2] += 1), w < 0.2 && (a[v + 4] += 1));
      }
    }
    function u(v) {
      r.push(v.x, v.y, v.z);
    }
    function f(v, y) {
      const b = v * 3;
      y.x = e[b + 0], y.y = e[b + 1], y.z = e[b + 2];
    }
    function p() {
      const v = new C(), y = new C(), b = new C(), w = new C(), x = new o0(), S = new o0(), T = new o0();
      for (let M = 0, A = 0; M < r.length; M += 9, A += 6) {
        v.set(r[M + 0], r[M + 1], r[M + 2]), y.set(r[M + 3], r[M + 4], r[M + 5]), b.set(r[M + 6], r[M + 7], r[M + 8]), x.set(a[A + 0], a[A + 1]), S.set(a[A + 2], a[A + 3]), T.set(a[A + 4], a[A + 5]), w.copy(v).add(y).add(b).divideScalar(3);
        const D = g(w);
        _(x, A + 0, v, D), _(S, A + 2, y, D), _(T, A + 4, b, D);
      }
    }
    function _(v, y, b, w) {
      w < 0 && v.x === 1 && (a[y] = v.x - 1), b.x === 0 && b.z === 0 && (a[y] = w / 2 / Math.PI + 0.5);
    }
    function g(v) {
      return Math.atan2(v.z, -v.x);
    }
    function m(v) {
      return Math.atan2(-v.y, Math.sqrt(v.x * v.x + v.z * v.z));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new cn(e.vertices, e.indices, e.radius, e.details);
  }
}
class Us extends cn {
  constructor(e = 1, t = 0) {
    const n = (1 + Math.sqrt(5)) / 2, s = 1 / n, r = [
      // (±1, ±1, ±1)
      -1,
      -1,
      -1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      -1,
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      1,
      1,
      -1,
      1,
      1,
      1,
      // (0, ±1/φ, ±φ)
      0,
      -s,
      -n,
      0,
      -s,
      n,
      0,
      s,
      -n,
      0,
      s,
      n,
      // (±1/φ, ±φ, 0)
      -s,
      -n,
      0,
      -s,
      n,
      0,
      s,
      -n,
      0,
      s,
      n,
      0,
      // (±φ, 0, ±1/φ)
      -n,
      0,
      -s,
      n,
      0,
      -s,
      -n,
      0,
      s,
      n,
      0,
      s
    ], a = [
      3,
      11,
      7,
      3,
      7,
      15,
      3,
      15,
      13,
      7,
      19,
      17,
      7,
      17,
      6,
      7,
      6,
      15,
      17,
      4,
      8,
      17,
      8,
      10,
      17,
      10,
      6,
      8,
      0,
      16,
      8,
      16,
      2,
      8,
      2,
      10,
      0,
      12,
      1,
      0,
      1,
      18,
      0,
      18,
      16,
      6,
      10,
      2,
      6,
      2,
      13,
      6,
      13,
      15,
      2,
      16,
      18,
      2,
      18,
      3,
      2,
      3,
      13,
      18,
      1,
      9,
      18,
      9,
      11,
      18,
      11,
      3,
      4,
      14,
      12,
      4,
      12,
      0,
      4,
      0,
      8,
      11,
      9,
      5,
      11,
      5,
      19,
      11,
      19,
      7,
      19,
      5,
      14,
      19,
      14,
      4,
      19,
      4,
      17,
      1,
      12,
      14,
      1,
      14,
      5,
      1,
      5,
      9
    ];
    super(r, a, e, t), this.type = "DodecahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new Us(e.radius, e.detail);
  }
}
const P7 = /* @__PURE__ */ new C(), D7 = /* @__PURE__ */ new C(), Q6 = /* @__PURE__ */ new C(), N7 = /* @__PURE__ */ new Et();
class Vh extends F0 {
  constructor(e = null, t = 1) {
    if (super(), this.type = "EdgesGeometry", this.parameters = {
      geometry: e,
      thresholdAngle: t
    }, e !== null) {
      const s = Math.pow(10, 4), r = Math.cos(Di * t), a = e.getIndex(), o = e.getAttribute("position"), c = a ? a.count : o.count, l = [0, 0, 0], h = ["a", "b", "c"], d = new Array(3), u = {}, f = [];
      for (let p = 0; p < c; p += 3) {
        a ? (l[0] = a.getX(p), l[1] = a.getX(p + 1), l[2] = a.getX(p + 2)) : (l[0] = p, l[1] = p + 1, l[2] = p + 2);
        const { a: _, b: g, c: m } = N7;
        if (_.fromBufferAttribute(o, l[0]), g.fromBufferAttribute(o, l[1]), m.fromBufferAttribute(o, l[2]), N7.getNormal(Q6), d[0] = `${Math.round(_.x * s)},${Math.round(_.y * s)},${Math.round(_.z * s)}`, d[1] = `${Math.round(g.x * s)},${Math.round(g.y * s)},${Math.round(g.z * s)}`, d[2] = `${Math.round(m.x * s)},${Math.round(m.y * s)},${Math.round(m.z * s)}`, !(d[0] === d[1] || d[1] === d[2] || d[2] === d[0]))
          for (let v = 0; v < 3; v++) {
            const y = (v + 1) % 3, b = d[v], w = d[y], x = N7[h[v]], S = N7[h[y]], T = `${b}_${w}`, M = `${w}_${b}`;
            M in u && u[M] ? (Q6.dot(u[M].normal) <= r && (f.push(x.x, x.y, x.z), f.push(S.x, S.y, S.z)), u[M] = null) : T in u || (u[T] = {
              index0: l[v],
              index1: l[y],
              normal: Q6.clone()
            });
          }
      }
      for (const p in u)
        if (u[p]) {
          const { index0: _, index1: g } = u[p];
          P7.fromBufferAttribute(o, _), D7.fromBufferAttribute(o, g), f.push(P7.x, P7.y, P7.z), f.push(D7.x, D7.y, D7.z);
        }
      this.setAttribute("position", new v0(f, 3));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
}
class Ni extends ds {
  constructor(e) {
    super(e), this.uuid = kt(), this.type = "Shape", this.holes = [];
  }
  getPointsHoles(e) {
    const t = [];
    for (let n = 0, s = this.holes.length; n < s; n++)
      t[n] = this.holes[n].getPoints(e);
    return t;
  }
  // get points of shape and holes (keypoints based on segments parameter)
  extractPoints(e) {
    return {
      shape: this.getPoints(e),
      holes: this.getPointsHoles(e)
    };
  }
  copy(e) {
    super.copy(e), this.holes = [];
    for (let t = 0, n = e.holes.length; t < n; t++) {
      const s = e.holes[t];
      this.holes.push(s.clone());
    }
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.uuid = this.uuid, e.holes = [];
    for (let t = 0, n = this.holes.length; t < n; t++) {
      const s = this.holes[t];
      e.holes.push(s.toJSON());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.uuid = e.uuid, this.holes = [];
    for (let t = 0, n = e.holes.length; t < n; t++) {
      const s = e.holes[t];
      this.holes.push(new ds().fromJSON(s));
    }
    return this;
  }
}
const cb = {
  triangulate: function(i, e, t = 2) {
    const n = e && e.length, s = n ? e[0] * t : i.length;
    let r = Hh(i, 0, s, t, !0);
    const a = [];
    if (!r || r.next === r.prev)
      return a;
    let o, c, l, h, d, u, f;
    if (n && (r = pb(i, e, r, t)), i.length > 80 * t) {
      o = l = i[0], c = h = i[1];
      for (let p = t; p < s; p += t)
        d = i[p], u = i[p + 1], d < o && (o = d), u < c && (c = u), d > l && (l = d), u > h && (h = u);
      f = Math.max(l - o, h - c), f = f !== 0 ? 32767 / f : 0;
    }
    return fs(r, a, t, o, c, f, 0), a;
  }
};
function Hh(i, e, t, n, s) {
  let r, a;
  if (s === Eb(i, e, t, n) > 0)
    for (r = e; r < t; r += n)
      a = xa(r, i[r], i[r + 1], a);
  else
    for (r = t - n; r >= e; r -= n)
      a = xa(r, i[r], i[r + 1], a);
  return a && h6(a, a.next) && (ms(a), a = a.next), a;
}
function Ui(i, e) {
  if (!i)
    return i;
  e || (e = i);
  let t = i, n;
  do
    if (n = !1, !t.steiner && (h6(t, t.next) || Ie(t.prev, t, t.next) === 0)) {
      if (ms(t), t = e = t.prev, t === t.next)
        break;
      n = !0;
    } else
      t = t.next;
  while (n || t !== e);
  return e;
}
function fs(i, e, t, n, s, r, a) {
  if (!i)
    return;
  !a && r && yb(i, n, s, r);
  let o = i, c, l;
  for (; i.prev !== i.next; ) {
    if (c = i.prev, l = i.next, r ? ub(i, n, s, r) : hb(i)) {
      e.push(c.i / t | 0), e.push(i.i / t | 0), e.push(l.i / t | 0), ms(i), i = l.next, o = l.next;
      continue;
    }
    if (i = l, i === o) {
      a ? a === 1 ? (i = db(Ui(i), e, t), fs(i, e, t, n, s, r, 2)) : a === 2 && fb(i, e, t, n, s, r) : fs(Ui(i), e, t, n, s, r, 1);
      break;
    }
  }
}
function hb(i) {
  const e = i.prev, t = i, n = i.next;
  if (Ie(e, t, n) >= 0)
    return !1;
  const s = e.x, r = t.x, a = n.x, o = e.y, c = t.y, l = n.y, h = s < r ? s < a ? s : a : r < a ? r : a, d = o < c ? o < l ? o : l : c < l ? c : l, u = s > r ? s > a ? s : a : r > a ? r : a, f = o > c ? o > l ? o : l : c > l ? c : l;
  let p = n.next;
  for (; p !== e; ) {
    if (p.x >= h && p.x <= u && p.y >= d && p.y <= f && O9(s, o, r, c, a, l, p.x, p.y) && Ie(p.prev, p, p.next) >= 0)
      return !1;
    p = p.next;
  }
  return !0;
}
function ub(i, e, t, n) {
  const s = i.prev, r = i, a = i.next;
  if (Ie(s, r, a) >= 0)
    return !1;
  const o = s.x, c = r.x, l = a.x, h = s.y, d = r.y, u = a.y, f = o < c ? o < l ? o : l : c < l ? c : l, p = h < d ? h < u ? h : u : d < u ? d : u, _ = o > c ? o > l ? o : l : c > l ? c : l, g = h > d ? h > u ? h : u : d > u ? d : u, m = I5(f, p, e, t, n), v = I5(_, g, e, t, n);
  let y = i.prevZ, b = i.nextZ;
  for (; y && y.z >= m && b && b.z <= v; ) {
    if (y.x >= f && y.x <= _ && y.y >= p && y.y <= g && y !== s && y !== a && O9(o, h, c, d, l, u, y.x, y.y) && Ie(y.prev, y, y.next) >= 0 || (y = y.prevZ, b.x >= f && b.x <= _ && b.y >= p && b.y <= g && b !== s && b !== a && O9(o, h, c, d, l, u, b.x, b.y) && Ie(b.prev, b, b.next) >= 0))
      return !1;
    b = b.nextZ;
  }
  for (; y && y.z >= m; ) {
    if (y.x >= f && y.x <= _ && y.y >= p && y.y <= g && y !== s && y !== a && O9(o, h, c, d, l, u, y.x, y.y) && Ie(y.prev, y, y.next) >= 0)
      return !1;
    y = y.prevZ;
  }
  for (; b && b.z <= v; ) {
    if (b.x >= f && b.x <= _ && b.y >= p && b.y <= g && b !== s && b !== a && O9(o, h, c, d, l, u, b.x, b.y) && Ie(b.prev, b, b.next) >= 0)
      return !1;
    b = b.nextZ;
  }
  return !0;
}
function db(i, e, t) {
  let n = i;
  do {
    const s = n.prev, r = n.next.next;
    !h6(s, r) && Gh(s, n, n.next, r) && ps(s, r) && ps(r, s) && (e.push(s.i / t | 0), e.push(n.i / t | 0), e.push(r.i / t | 0), ms(n), ms(n.next), n = i = r), n = n.next;
  } while (n !== i);
  return Ui(n);
}
function fb(i, e, t, n, s, r) {
  let a = i;
  do {
    let o = a.next.next;
    for (; o !== a.prev; ) {
      if (a.i !== o.i && wb(a, o)) {
        let c = Wh(a, o);
        a = Ui(a, a.next), c = Ui(c, c.next), fs(a, e, t, n, s, r, 0), fs(c, e, t, n, s, r, 0);
        return;
      }
      o = o.next;
    }
    a = a.next;
  } while (a !== i);
}
function pb(i, e, t, n) {
  const s = [];
  let r, a, o, c, l;
  for (r = 0, a = e.length; r < a; r++)
    o = e[r] * n, c = r < a - 1 ? e[r + 1] * n : i.length, l = Hh(i, o, c, n, !1), l === l.next && (l.steiner = !0), s.push(bb(l));
  for (s.sort(mb), r = 0; r < s.length; r++)
    t = gb(s[r], t);
  return t;
}
function mb(i, e) {
  return i.x - e.x;
}
function gb(i, e) {
  const t = _b(i, e);
  if (!t)
    return e;
  const n = Wh(t, i);
  return Ui(n, n.next), Ui(t, t.next);
}
function _b(i, e) {
  let t = e, n = -1 / 0, s;
  const r = i.x, a = i.y;
  do {
    if (a <= t.y && a >= t.next.y && t.next.y !== t.y) {
      const u = t.x + (a - t.y) * (t.next.x - t.x) / (t.next.y - t.y);
      if (u <= r && u > n && (n = u, s = t.x < t.next.x ? t : t.next, u === r))
        return s;
    }
    t = t.next;
  } while (t !== e);
  if (!s)
    return null;
  const o = s, c = s.x, l = s.y;
  let h = 1 / 0, d;
  t = s;
  do
    r >= t.x && t.x >= c && r !== t.x && O9(a < l ? r : n, a, c, l, a < l ? n : r, a, t.x, t.y) && (d = Math.abs(a - t.y) / (r - t.x), ps(t, i) && (d < h || d === h && (t.x > s.x || t.x === s.x && vb(s, t))) && (s = t, h = d)), t = t.next;
  while (t !== o);
  return s;
}
function vb(i, e) {
  return Ie(i.prev, i, e.prev) < 0 && Ie(e.next, i, i.next) < 0;
}
function yb(i, e, t, n) {
  let s = i;
  do
    s.z === 0 && (s.z = I5(s.x, s.y, e, t, n)), s.prevZ = s.prev, s.nextZ = s.next, s = s.next;
  while (s !== i);
  s.prevZ.nextZ = null, s.prevZ = null, xb(s);
}
function xb(i) {
  let e, t, n, s, r, a, o, c, l = 1;
  do {
    for (t = i, i = null, r = null, a = 0; t; ) {
      for (a++, n = t, o = 0, e = 0; e < l && (o++, n = n.nextZ, !!n); e++)
        ;
      for (c = l; o > 0 || c > 0 && n; )
        o !== 0 && (c === 0 || !n || t.z <= n.z) ? (s = t, t = t.nextZ, o--) : (s = n, n = n.nextZ, c--), r ? r.nextZ = s : i = s, s.prevZ = r, r = s;
      t = n;
    }
    r.nextZ = null, l *= 2;
  } while (a > 1);
  return i;
}
function I5(i, e, t, n, s) {
  return i = (i - t) * s | 0, e = (e - n) * s | 0, i = (i | i << 8) & 16711935, i = (i | i << 4) & 252645135, i = (i | i << 2) & 858993459, i = (i | i << 1) & 1431655765, e = (e | e << 8) & 16711935, e = (e | e << 4) & 252645135, e = (e | e << 2) & 858993459, e = (e | e << 1) & 1431655765, i | e << 1;
}
function bb(i) {
  let e = i, t = i;
  do
    (e.x < t.x || e.x === t.x && e.y < t.y) && (t = e), e = e.next;
  while (e !== i);
  return t;
}
function O9(i, e, t, n, s, r, a, o) {
  return (s - a) * (e - o) >= (i - a) * (r - o) && (i - a) * (n - o) >= (t - a) * (e - o) && (t - a) * (r - o) >= (s - a) * (n - o);
}
function wb(i, e) {
  return i.next.i !== e.i && i.prev.i !== e.i && !Mb(i, e) && // dones't intersect other edges
  (ps(i, e) && ps(e, i) && Sb(i, e) && // locally visible
  (Ie(i.prev, i, e.prev) || Ie(i, e.prev, e)) || // does not create opposite-facing sectors
  h6(i, e) && Ie(i.prev, i, i.next) > 0 && Ie(e.prev, e, e.next) > 0);
}
function Ie(i, e, t) {
  return (e.y - i.y) * (t.x - e.x) - (e.x - i.x) * (t.y - e.y);
}
function h6(i, e) {
  return i.x === e.x && i.y === e.y;
}
function Gh(i, e, t, n) {
  const s = U7(Ie(i, e, t)), r = U7(Ie(i, e, n)), a = U7(Ie(t, n, i)), o = U7(Ie(t, n, e));
  return !!(s !== r && a !== o || s === 0 && O7(i, t, e) || r === 0 && O7(i, n, e) || a === 0 && O7(t, i, n) || o === 0 && O7(t, e, n));
}
function O7(i, e, t) {
  return e.x <= Math.max(i.x, t.x) && e.x >= Math.min(i.x, t.x) && e.y <= Math.max(i.y, t.y) && e.y >= Math.min(i.y, t.y);
}
function U7(i) {
  return i > 0 ? 1 : i < 0 ? -1 : 0;
}
function Mb(i, e) {
  let t = i;
  do {
    if (t.i !== i.i && t.next.i !== i.i && t.i !== e.i && t.next.i !== e.i && Gh(t, t.next, i, e))
      return !0;
    t = t.next;
  } while (t !== i);
  return !1;
}
function ps(i, e) {
  return Ie(i.prev, i, i.next) < 0 ? Ie(i, e, i.next) >= 0 && Ie(i, i.prev, e) >= 0 : Ie(i, e, i.prev) < 0 || Ie(i, i.next, e) < 0;
}
function Sb(i, e) {
  let t = i, n = !1;
  const s = (i.x + e.x) / 2, r = (i.y + e.y) / 2;
  do
    t.y > r != t.next.y > r && t.next.y !== t.y && s < (t.next.x - t.x) * (r - t.y) / (t.next.y - t.y) + t.x && (n = !n), t = t.next;
  while (t !== i);
  return n;
}
function Wh(i, e) {
  const t = new L5(i.i, i.x, i.y), n = new L5(e.i, e.x, e.y), s = i.next, r = e.prev;
  return i.next = e, e.prev = i, t.next = s, s.prev = t, n.next = t, t.prev = n, r.next = n, n.prev = r, n;
}
function xa(i, e, t, n) {
  const s = new L5(i, e, t);
  return n ? (s.next = n.next, s.prev = n, n.next.prev = s, n.next = s) : (s.prev = s, s.next = s), s;
}
function ms(i) {
  i.next.prev = i.prev, i.prev.next = i.next, i.prevZ && (i.prevZ.nextZ = i.nextZ), i.nextZ && (i.nextZ.prevZ = i.prevZ);
}
function L5(i, e, t) {
  this.i = i, this.x = e, this.y = t, this.prev = null, this.next = null, this.z = 0, this.prevZ = null, this.nextZ = null, this.steiner = !1;
}
function Eb(i, e, t, n) {
  let s = 0;
  for (let r = e, a = t - n; r < t; r += n)
    s += (i[a] - i[r]) * (i[r + 1] + i[a + 1]), a = r;
  return s;
}
class N1 {
  // calculate area of the contour polygon
  static area(e) {
    const t = e.length;
    let n = 0;
    for (let s = t - 1, r = 0; r < t; s = r++)
      n += e[s].x * e[r].y - e[r].x * e[s].y;
    return n * 0.5;
  }
  static isClockWise(e) {
    return N1.area(e) < 0;
  }
  static triangulateShape(e, t) {
    const n = [], s = [], r = [];
    ba(e), wa(n, e);
    let a = e.length;
    t.forEach(ba);
    for (let c = 0; c < t.length; c++)
      s.push(a), a += t[c].length, wa(n, t[c]);
    const o = cb.triangulate(n, s);
    for (let c = 0; c < o.length; c += 3)
      r.push(o.slice(c, c + 3));
    return r;
  }
}
function ba(i) {
  const e = i.length;
  e > 2 && i[e - 1].equals(i[0]) && i.pop();
}
function wa(i, e) {
  for (let t = 0; t < e.length; t++)
    i.push(e[t].x), i.push(e[t].y);
}
class Fs extends F0 {
  constructor(e = new Ni([new o0(0.5, 0.5), new o0(-0.5, 0.5), new o0(-0.5, -0.5), new o0(0.5, -0.5)]), t = {}) {
    super(), this.type = "ExtrudeGeometry", this.parameters = {
      shapes: e,
      options: t
    }, e = Array.isArray(e) ? e : [e];
    const n = this, s = [], r = [];
    for (let o = 0, c = e.length; o < c; o++) {
      const l = e[o];
      a(l);
    }
    this.setAttribute("position", new v0(s, 3)), this.setAttribute("uv", new v0(r, 2)), this.computeVertexNormals();
    function a(o) {
      const c = [], l = t.curveSegments !== void 0 ? t.curveSegments : 12, h = t.steps !== void 0 ? t.steps : 1, d = t.depth !== void 0 ? t.depth : 1;
      let u = t.bevelEnabled !== void 0 ? t.bevelEnabled : !0, f = t.bevelThickness !== void 0 ? t.bevelThickness : 0.2, p = t.bevelSize !== void 0 ? t.bevelSize : f - 0.1, _ = t.bevelOffset !== void 0 ? t.bevelOffset : 0, g = t.bevelSegments !== void 0 ? t.bevelSegments : 3;
      const m = t.extrudePath, v = t.UVGenerator !== void 0 ? t.UVGenerator : Tb;
      let y, b = !1, w, x, S, T;
      m && (y = m.getSpacedPoints(h), b = !0, u = !1, w = m.computeFrenetFrames(h, !1), x = new C(), S = new C(), T = new C()), u || (g = 0, f = 0, p = 0, _ = 0);
      const M = o.extractPoints(l);
      let A = M.shape;
      const D = M.holes;
      if (!N1.isClockWise(A)) {
        A = A.reverse();
        for (let r0 = 0, Z = D.length; r0 < Z; r0++) {
          const n0 = D[r0];
          N1.isClockWise(n0) && (D[r0] = n0.reverse());
        }
      }
      const O = N1.triangulateShape(A, D), U = A;
      for (let r0 = 0, Z = D.length; r0 < Z; r0++) {
        const n0 = D[r0];
        A = A.concat(n0);
      }
      function V(r0, Z, n0) {
        return Z || console.error("THREE.ExtrudeGeometry: vec does not exist"), r0.clone().addScaledVector(Z, n0);
      }
      const Y = A.length, W = O.length;
      function X(r0, Z, n0) {
        let S0, p0, P0;
        const D0 = r0.x - Z.x, N0 = r0.y - Z.y, j0 = n0.x - r0.x, ce = n0.y - r0.y, N = D0 * D0 + N0 * N0, L = D0 * ce - N0 * j0;
        if (Math.abs(L) > Number.EPSILON) {
          const q = Math.sqrt(N), l0 = Math.sqrt(j0 * j0 + ce * ce), h0 = Z.x - N0 / q, w0 = Z.y + D0 / q, B0 = n0.x - ce / l0, T0 = n0.y + j0 / l0, Q = ((B0 - h0) * ce - (T0 - w0) * j0) / (D0 * ce - N0 * j0);
          S0 = h0 + D0 * Q - r0.x, p0 = w0 + N0 * Q - r0.y;
          const C0 = S0 * S0 + p0 * p0;
          if (C0 <= 2)
            return new o0(S0, p0);
          P0 = Math.sqrt(C0 / 2);
        } else {
          let q = !1;
          D0 > Number.EPSILON ? j0 > Number.EPSILON && (q = !0) : D0 < -Number.EPSILON ? j0 < -Number.EPSILON && (q = !0) : Math.sign(N0) === Math.sign(ce) && (q = !0), q ? (S0 = -N0, p0 = D0, P0 = Math.sqrt(N)) : (S0 = D0, p0 = N0, P0 = Math.sqrt(N / 2));
        }
        return new o0(S0 / P0, p0 / P0);
      }
      const i0 = [];
      for (let r0 = 0, Z = U.length, n0 = Z - 1, S0 = r0 + 1; r0 < Z; r0++, n0++, S0++)
        n0 === Z && (n0 = 0), S0 === Z && (S0 = 0), i0[r0] = X(U[r0], U[n0], U[S0]);
      const a0 = [];
      let x0, u0 = i0.concat();
      for (let r0 = 0, Z = D.length; r0 < Z; r0++) {
        const n0 = D[r0];
        x0 = [];
        for (let S0 = 0, p0 = n0.length, P0 = p0 - 1, D0 = S0 + 1; S0 < p0; S0++, P0++, D0++)
          P0 === p0 && (P0 = 0), D0 === p0 && (D0 = 0), x0[S0] = X(n0[S0], n0[P0], n0[D0]);
        a0.push(x0), u0 = u0.concat(x0);
      }
      for (let r0 = 0; r0 < g; r0++) {
        const Z = r0 / g, n0 = f * Math.cos(Z * Math.PI / 2), S0 = p * Math.sin(Z * Math.PI / 2) + _;
        for (let p0 = 0, P0 = U.length; p0 < P0; p0++) {
          const D0 = V(U[p0], i0[p0], S0);
          B(D0.x, D0.y, -n0);
        }
        for (let p0 = 0, P0 = D.length; p0 < P0; p0++) {
          const D0 = D[p0];
          x0 = a0[p0];
          for (let N0 = 0, j0 = D0.length; N0 < j0; N0++) {
            const ce = V(D0[N0], x0[N0], S0);
            B(ce.x, ce.y, -n0);
          }
        }
      }
      const E = p + _;
      for (let r0 = 0; r0 < Y; r0++) {
        const Z = u ? V(A[r0], u0[r0], E) : A[r0];
        b ? (S.copy(w.normals[0]).multiplyScalar(Z.x), x.copy(w.binormals[0]).multiplyScalar(Z.y), T.copy(y[0]).add(S).add(x), B(T.x, T.y, T.z)) : B(Z.x, Z.y, 0);
      }
      for (let r0 = 1; r0 <= h; r0++)
        for (let Z = 0; Z < Y; Z++) {
          const n0 = u ? V(A[Z], u0[Z], E) : A[Z];
          b ? (S.copy(w.normals[r0]).multiplyScalar(n0.x), x.copy(w.binormals[r0]).multiplyScalar(n0.y), T.copy(y[r0]).add(S).add(x), B(T.x, T.y, T.z)) : B(n0.x, n0.y, d / h * r0);
        }
      for (let r0 = g - 1; r0 >= 0; r0--) {
        const Z = r0 / g, n0 = f * Math.cos(Z * Math.PI / 2), S0 = p * Math.sin(Z * Math.PI / 2) + _;
        for (let p0 = 0, P0 = U.length; p0 < P0; p0++) {
          const D0 = V(U[p0], i0[p0], S0);
          B(D0.x, D0.y, d + n0);
        }
        for (let p0 = 0, P0 = D.length; p0 < P0; p0++) {
          const D0 = D[p0];
          x0 = a0[p0];
          for (let N0 = 0, j0 = D0.length; N0 < j0; N0++) {
            const ce = V(D0[N0], x0[N0], S0);
            b ? B(ce.x, ce.y + y[h - 1].y, y[h - 1].x + n0) : B(ce.x, ce.y, d + n0);
          }
        }
      }
      F(), R();
      function F() {
        const r0 = s.length / 3;
        if (u) {
          let Z = 0, n0 = Y * Z;
          for (let S0 = 0; S0 < W; S0++) {
            const p0 = O[S0];
            m0(p0[2] + n0, p0[1] + n0, p0[0] + n0);
          }
          Z = h + g * 2, n0 = Y * Z;
          for (let S0 = 0; S0 < W; S0++) {
            const p0 = O[S0];
            m0(p0[0] + n0, p0[1] + n0, p0[2] + n0);
          }
        } else {
          for (let Z = 0; Z < W; Z++) {
            const n0 = O[Z];
            m0(n0[2], n0[1], n0[0]);
          }
          for (let Z = 0; Z < W; Z++) {
            const n0 = O[Z];
            m0(n0[0] + Y * h, n0[1] + Y * h, n0[2] + Y * h);
          }
        }
        n.addGroup(r0, s.length / 3 - r0, 0);
      }
      function R() {
        const r0 = s.length / 3;
        let Z = 0;
        j(U, Z), Z += U.length;
        for (let n0 = 0, S0 = D.length; n0 < S0; n0++) {
          const p0 = D[n0];
          j(p0, Z), Z += p0.length;
        }
        n.addGroup(r0, s.length / 3 - r0, 1);
      }
      function j(r0, Z) {
        let n0 = r0.length;
        for (; --n0 >= 0; ) {
          const S0 = n0;
          let p0 = n0 - 1;
          p0 < 0 && (p0 = r0.length - 1);
          for (let P0 = 0, D0 = h + g * 2; P0 < D0; P0++) {
            const N0 = Y * P0, j0 = Y * (P0 + 1), ce = Z + S0 + N0, N = Z + p0 + N0, L = Z + p0 + j0, q = Z + S0 + j0;
            b0(ce, N, L, q);
          }
        }
      }
      function B(r0, Z, n0) {
        c.push(r0), c.push(Z), c.push(n0);
      }
      function m0(r0, Z, n0) {
        e0(r0), e0(Z), e0(n0);
        const S0 = s.length / 3, p0 = v.generateTopUV(n, s, S0 - 3, S0 - 2, S0 - 1);
        M0(p0[0]), M0(p0[1]), M0(p0[2]);
      }
      function b0(r0, Z, n0, S0) {
        e0(r0), e0(Z), e0(S0), e0(Z), e0(n0), e0(S0);
        const p0 = s.length / 3, P0 = v.generateSideWallUV(n, s, p0 - 6, p0 - 3, p0 - 2, p0 - 1);
        M0(P0[0]), M0(P0[1]), M0(P0[3]), M0(P0[1]), M0(P0[2]), M0(P0[3]);
      }
      function e0(r0) {
        s.push(c[r0 * 3 + 0]), s.push(c[r0 * 3 + 1]), s.push(c[r0 * 3 + 2]);
      }
      function M0(r0) {
        r.push(r0.x), r.push(r0.y);
      }
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  toJSON() {
    const e = super.toJSON(), t = this.parameters.shapes, n = this.parameters.options;
    return Ab(t, n, e);
  }
  static fromJSON(e, t) {
    const n = [];
    for (let r = 0, a = e.shapes.length; r < a; r++) {
      const o = t[e.shapes[r]];
      n.push(o);
    }
    const s = e.options.extrudePath;
    return s !== void 0 && (e.options.extrudePath = new I2[s.type]().fromJSON(s)), new Fs(n, e.options);
  }
}
const Tb = {
  generateTopUV: function(i, e, t, n, s) {
    const r = e[t * 3], a = e[t * 3 + 1], o = e[n * 3], c = e[n * 3 + 1], l = e[s * 3], h = e[s * 3 + 1];
    return [
      new o0(r, a),
      new o0(o, c),
      new o0(l, h)
    ];
  },
  generateSideWallUV: function(i, e, t, n, s, r) {
    const a = e[t * 3], o = e[t * 3 + 1], c = e[t * 3 + 2], l = e[n * 3], h = e[n * 3 + 1], d = e[n * 3 + 2], u = e[s * 3], f = e[s * 3 + 1], p = e[s * 3 + 2], _ = e[r * 3], g = e[r * 3 + 1], m = e[r * 3 + 2];
    return Math.abs(o - h) < Math.abs(a - l) ? [
      new o0(a, 1 - c),
      new o0(l, 1 - d),
      new o0(u, 1 - p),
      new o0(_, 1 - m)
    ] : [
      new o0(o, 1 - c),
      new o0(h, 1 - d),
      new o0(f, 1 - p),
      new o0(g, 1 - m)
    ];
  }
};
function Ab(i, e, t) {
  if (t.shapes = [], Array.isArray(i))
    for (let n = 0, s = i.length; n < s; n++) {
      const r = i[n];
      t.shapes.push(r.uuid);
    }
  else
    t.shapes.push(i.uuid);
  return t.options = Object.assign({}, e), e.extrudePath !== void 0 && (t.options.extrudePath = e.extrudePath.toJSON()), t;
}
class zs extends cn {
  constructor(e = 1, t = 0) {
    const n = (1 + Math.sqrt(5)) / 2, s = [
      -1,
      n,
      0,
      1,
      n,
      0,
      -1,
      -n,
      0,
      1,
      -n,
      0,
      0,
      -1,
      n,
      0,
      1,
      n,
      0,
      -1,
      -n,
      0,
      1,
      -n,
      n,
      0,
      -1,
      n,
      0,
      1,
      -n,
      0,
      -1,
      -n,
      0,
      1
    ], r = [
      0,
      11,
      5,
      0,
      5,
      1,
      0,
      1,
      7,
      0,
      7,
      10,
      0,
      10,
      11,
      1,
      5,
      9,
      5,
      11,
      4,
      11,
      10,
      2,
      10,
      7,
      6,
      7,
      1,
      8,
      3,
      9,
      4,
      3,
      4,
      2,
      3,
      2,
      6,
      3,
      6,
      8,
      3,
      8,
      9,
      4,
      9,
      5,
      2,
      4,
      11,
      6,
      2,
      10,
      8,
      6,
      7,
      9,
      8,
      1
    ];
    super(s, r, e, t), this.type = "IcosahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new zs(e.radius, e.detail);
  }
}
class Pt extends cn {
  constructor(e = 1, t = 0) {
    const n = [
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1
    ], s = [
      0,
      2,
      4,
      0,
      4,
      3,
      0,
      3,
      5,
      0,
      5,
      2,
      1,
      2,
      5,
      1,
      5,
      3,
      1,
      3,
      4,
      1,
      4,
      2
    ];
    super(n, s, e, t), this.type = "OctahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new Pt(e.radius, e.detail);
  }
}
class ks extends F0 {
  constructor(e = 0.5, t = 1, n = 32, s = 1, r = 0, a = Math.PI * 2) {
    super(), this.type = "RingGeometry", this.parameters = {
      innerRadius: e,
      outerRadius: t,
      thetaSegments: n,
      phiSegments: s,
      thetaStart: r,
      thetaLength: a
    }, n = Math.max(3, n), s = Math.max(1, s);
    const o = [], c = [], l = [], h = [];
    let d = e;
    const u = (t - e) / s, f = new C(), p = new o0();
    for (let _ = 0; _ <= s; _++) {
      for (let g = 0; g <= n; g++) {
        const m = r + g / n * a;
        f.x = d * Math.cos(m), f.y = d * Math.sin(m), c.push(f.x, f.y, f.z), l.push(0, 0, 1), p.x = (f.x / t + 1) / 2, p.y = (f.y / t + 1) / 2, h.push(p.x, p.y);
      }
      d += u;
    }
    for (let _ = 0; _ < s; _++) {
      const g = _ * (n + 1);
      for (let m = 0; m < n; m++) {
        const v = m + g, y = v, b = v + n + 1, w = v + n + 2, x = v + 1;
        o.push(y, b, x), o.push(b, w, x);
      }
    }
    this.setIndex(o), this.setAttribute("position", new v0(c, 3)), this.setAttribute("normal", new v0(l, 3)), this.setAttribute("uv", new v0(h, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new ks(e.innerRadius, e.outerRadius, e.thetaSegments, e.phiSegments, e.thetaStart, e.thetaLength);
  }
}
class Bs extends F0 {
  constructor(e = new Ni([new o0(0, 0.5), new o0(-0.5, -0.5), new o0(0.5, -0.5)]), t = 12) {
    super(), this.type = "ShapeGeometry", this.parameters = {
      shapes: e,
      curveSegments: t
    };
    const n = [], s = [], r = [], a = [];
    let o = 0, c = 0;
    if (Array.isArray(e) === !1)
      l(e);
    else
      for (let h = 0; h < e.length; h++)
        l(e[h]), this.addGroup(o, c, h), o += c, c = 0;
    this.setIndex(n), this.setAttribute("position", new v0(s, 3)), this.setAttribute("normal", new v0(r, 3)), this.setAttribute("uv", new v0(a, 2));
    function l(h) {
      const d = s.length / 3, u = h.extractPoints(t);
      let f = u.shape;
      const p = u.holes;
      N1.isClockWise(f) === !1 && (f = f.reverse());
      for (let g = 0, m = p.length; g < m; g++) {
        const v = p[g];
        N1.isClockWise(v) === !0 && (p[g] = v.reverse());
      }
      const _ = N1.triangulateShape(f, p);
      for (let g = 0, m = p.length; g < m; g++) {
        const v = p[g];
        f = f.concat(v);
      }
      for (let g = 0, m = f.length; g < m; g++) {
        const v = f[g];
        s.push(v.x, v.y, 0), r.push(0, 0, 1), a.push(v.x, v.y);
      }
      for (let g = 0, m = _.length; g < m; g++) {
        const v = _[g], y = v[0] + d, b = v[1] + d, w = v[2] + d;
        n.push(y, b, w), c += 3;
      }
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  toJSON() {
    const e = super.toJSON(), t = this.parameters.shapes;
    return Cb(t, e);
  }
  static fromJSON(e, t) {
    const n = [];
    for (let s = 0, r = e.shapes.length; s < r; s++) {
      const a = t[e.shapes[s]];
      n.push(a);
    }
    return new Bs(n, e.curveSegments);
  }
}
function Cb(i, e) {
  if (e.shapes = [], Array.isArray(i))
    for (let t = 0, n = i.length; t < n; t++) {
      const s = i[t];
      e.shapes.push(s.uuid);
    }
  else
    e.shapes.push(i.uuid);
  return e;
}
class hn extends F0 {
  constructor(e = 1, t = 32, n = 16, s = 0, r = Math.PI * 2, a = 0, o = Math.PI) {
    super(), this.type = "SphereGeometry", this.parameters = {
      radius: e,
      widthSegments: t,
      heightSegments: n,
      phiStart: s,
      phiLength: r,
      thetaStart: a,
      thetaLength: o
    }, t = Math.max(3, Math.floor(t)), n = Math.max(2, Math.floor(n));
    const c = Math.min(a + o, Math.PI);
    let l = 0;
    const h = [], d = new C(), u = new C(), f = [], p = [], _ = [], g = [];
    for (let m = 0; m <= n; m++) {
      const v = [], y = m / n;
      let b = 0;
      m === 0 && a === 0 ? b = 0.5 / t : m === n && c === Math.PI && (b = -0.5 / t);
      for (let w = 0; w <= t; w++) {
        const x = w / t;
        d.x = -e * Math.cos(s + x * r) * Math.sin(a + y * o), d.y = e * Math.cos(a + y * o), d.z = e * Math.sin(s + x * r) * Math.sin(a + y * o), p.push(d.x, d.y, d.z), u.copy(d).normalize(), _.push(u.x, u.y, u.z), g.push(x + b, 1 - y), v.push(l++);
      }
      h.push(v);
    }
    for (let m = 0; m < n; m++)
      for (let v = 0; v < t; v++) {
        const y = h[m][v + 1], b = h[m][v], w = h[m + 1][v], x = h[m + 1][v + 1];
        (m !== 0 || a > 0) && f.push(y, b, x), (m !== n - 1 || c < Math.PI) && f.push(b, w, x);
      }
    this.setIndex(f), this.setAttribute("position", new v0(p, 3)), this.setAttribute("normal", new v0(_, 3)), this.setAttribute("uv", new v0(g, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new hn(e.radius, e.widthSegments, e.heightSegments, e.phiStart, e.phiLength, e.thetaStart, e.thetaLength);
  }
}
class Vs extends cn {
  constructor(e = 1, t = 0) {
    const n = [
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      1,
      -1,
      -1
    ], s = [
      2,
      1,
      0,
      0,
      3,
      2,
      1,
      3,
      0,
      2,
      3,
      1
    ];
    super(n, s, e, t), this.type = "TetrahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new Vs(e.radius, e.detail);
  }
}
class tn extends F0 {
  constructor(e = 1, t = 0.4, n = 12, s = 48, r = Math.PI * 2) {
    super(), this.type = "TorusGeometry", this.parameters = {
      radius: e,
      tube: t,
      radialSegments: n,
      tubularSegments: s,
      arc: r
    }, n = Math.floor(n), s = Math.floor(s);
    const a = [], o = [], c = [], l = [], h = new C(), d = new C(), u = new C();
    for (let f = 0; f <= n; f++)
      for (let p = 0; p <= s; p++) {
        const _ = p / s * r, g = f / n * Math.PI * 2;
        d.x = (e + t * Math.cos(g)) * Math.cos(_), d.y = (e + t * Math.cos(g)) * Math.sin(_), d.z = t * Math.sin(g), o.push(d.x, d.y, d.z), h.x = e * Math.cos(_), h.y = e * Math.sin(_), u.subVectors(d, h).normalize(), c.push(u.x, u.y, u.z), l.push(p / s), l.push(f / n);
      }
    for (let f = 1; f <= n; f++)
      for (let p = 1; p <= s; p++) {
        const _ = (s + 1) * f + p - 1, g = (s + 1) * (f - 1) + p - 1, m = (s + 1) * (f - 1) + p, v = (s + 1) * f + p;
        a.push(_, g, v), a.push(g, m, v);
      }
    this.setIndex(a), this.setAttribute("position", new v0(o, 3)), this.setAttribute("normal", new v0(c, 3)), this.setAttribute("uv", new v0(l, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new tn(e.radius, e.tube, e.radialSegments, e.tubularSegments, e.arc);
  }
}
class Hs extends F0 {
  constructor(e = 1, t = 0.4, n = 64, s = 8, r = 2, a = 3) {
    super(), this.type = "TorusKnotGeometry", this.parameters = {
      radius: e,
      tube: t,
      tubularSegments: n,
      radialSegments: s,
      p: r,
      q: a
    }, n = Math.floor(n), s = Math.floor(s);
    const o = [], c = [], l = [], h = [], d = new C(), u = new C(), f = new C(), p = new C(), _ = new C(), g = new C(), m = new C();
    for (let y = 0; y <= n; ++y) {
      const b = y / n * r * Math.PI * 2;
      v(b, r, a, e, f), v(b + 0.01, r, a, e, p), g.subVectors(p, f), m.addVectors(p, f), _.crossVectors(g, m), m.crossVectors(_, g), _.normalize(), m.normalize();
      for (let w = 0; w <= s; ++w) {
        const x = w / s * Math.PI * 2, S = -t * Math.cos(x), T = t * Math.sin(x);
        d.x = f.x + (S * m.x + T * _.x), d.y = f.y + (S * m.y + T * _.y), d.z = f.z + (S * m.z + T * _.z), c.push(d.x, d.y, d.z), u.subVectors(d, f).normalize(), l.push(u.x, u.y, u.z), h.push(y / n), h.push(w / s);
      }
    }
    for (let y = 1; y <= n; y++)
      for (let b = 1; b <= s; b++) {
        const w = (s + 1) * (y - 1) + (b - 1), x = (s + 1) * y + (b - 1), S = (s + 1) * y + b, T = (s + 1) * (y - 1) + b;
        o.push(w, x, T), o.push(x, S, T);
      }
    this.setIndex(o), this.setAttribute("position", new v0(c, 3)), this.setAttribute("normal", new v0(l, 3)), this.setAttribute("uv", new v0(h, 2));
    function v(y, b, w, x, S) {
      const T = Math.cos(y), M = Math.sin(y), A = w / b * y, D = Math.cos(A);
      S.x = x * (2 + D) * 0.5 * T, S.y = x * (2 + D) * M * 0.5, S.z = x * Math.sin(A) * 0.5;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Hs(e.radius, e.tube, e.tubularSegments, e.radialSegments, e.p, e.q);
  }
}
class Gs extends F0 {
  constructor(e = new A2(new C(-1, -1, 0), new C(-1, 1, 0), new C(1, 1, 0)), t = 64, n = 1, s = 8, r = !1) {
    super(), this.type = "TubeGeometry", this.parameters = {
      path: e,
      tubularSegments: t,
      radius: n,
      radialSegments: s,
      closed: r
    };
    const a = e.computeFrenetFrames(t, r);
    this.tangents = a.tangents, this.normals = a.normals, this.binormals = a.binormals;
    const o = new C(), c = new C(), l = new o0();
    let h = new C();
    const d = [], u = [], f = [], p = [];
    _(), this.setIndex(p), this.setAttribute("position", new v0(d, 3)), this.setAttribute("normal", new v0(u, 3)), this.setAttribute("uv", new v0(f, 2));
    function _() {
      for (let y = 0; y < t; y++)
        g(y);
      g(r === !1 ? t : 0), v(), m();
    }
    function g(y) {
      h = e.getPointAt(y / t, h);
      const b = a.normals[y], w = a.binormals[y];
      for (let x = 0; x <= s; x++) {
        const S = x / s * Math.PI * 2, T = Math.sin(S), M = -Math.cos(S);
        c.x = M * b.x + T * w.x, c.y = M * b.y + T * w.y, c.z = M * b.z + T * w.z, c.normalize(), u.push(c.x, c.y, c.z), o.x = h.x + n * c.x, o.y = h.y + n * c.y, o.z = h.z + n * c.z, d.push(o.x, o.y, o.z);
      }
    }
    function m() {
      for (let y = 1; y <= t; y++)
        for (let b = 1; b <= s; b++) {
          const w = (s + 1) * (y - 1) + (b - 1), x = (s + 1) * y + (b - 1), S = (s + 1) * y + b, T = (s + 1) * (y - 1) + b;
          p.push(w, x, T), p.push(x, S, T);
        }
    }
    function v() {
      for (let y = 0; y <= t; y++)
        for (let b = 0; b <= s; b++)
          l.x = y / t, l.y = b / s, f.push(l.x, l.y);
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.path = this.parameters.path.toJSON(), e;
  }
  static fromJSON(e) {
    return new Gs(
      new I2[e.path.type]().fromJSON(e.path),
      e.tubularSegments,
      e.radius,
      e.radialSegments,
      e.closed
    );
  }
}
class Xh extends F0 {
  constructor(e = null) {
    if (super(), this.type = "WireframeGeometry", this.parameters = {
      geometry: e
    }, e !== null) {
      const t = [], n = /* @__PURE__ */ new Set(), s = new C(), r = new C();
      if (e.index !== null) {
        const a = e.attributes.position, o = e.index;
        let c = e.groups;
        c.length === 0 && (c = [{ start: 0, count: o.count, materialIndex: 0 }]);
        for (let l = 0, h = c.length; l < h; ++l) {
          const d = c[l], u = d.start, f = d.count;
          for (let p = u, _ = u + f; p < _; p += 3)
            for (let g = 0; g < 3; g++) {
              const m = o.getX(p + g), v = o.getX(p + (g + 1) % 3);
              s.fromBufferAttribute(a, m), r.fromBufferAttribute(a, v), Ma(s, r, n) === !0 && (t.push(s.x, s.y, s.z), t.push(r.x, r.y, r.z));
            }
        }
      } else {
        const a = e.attributes.position;
        for (let o = 0, c = a.count / 3; o < c; o++)
          for (let l = 0; l < 3; l++) {
            const h = 3 * o + l, d = 3 * o + (l + 1) % 3;
            s.fromBufferAttribute(a, h), r.fromBufferAttribute(a, d), Ma(s, r, n) === !0 && (t.push(s.x, s.y, s.z), t.push(r.x, r.y, r.z));
          }
      }
      this.setAttribute("position", new v0(t, 3));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
}
function Ma(i, e, t) {
  const n = `${i.x},${i.y},${i.z}-${e.x},${e.y},${e.z}`, s = `${e.x},${e.y},${e.z}-${i.x},${i.y},${i.z}`;
  return t.has(n) === !0 || t.has(s) === !0 ? !1 : (t.add(n), t.add(s), !0);
}
var Sa = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  BoxGeometry: ct,
  CapsuleGeometry: Ns,
  CircleGeometry: Os,
  ConeGeometry: s8,
  CylinderGeometry: Ke,
  DodecahedronGeometry: Us,
  EdgesGeometry: Vh,
  ExtrudeGeometry: Fs,
  IcosahedronGeometry: zs,
  LatheGeometry: i8,
  OctahedronGeometry: Pt,
  PlaneGeometry: Dt,
  PolyhedronGeometry: cn,
  RingGeometry: ks,
  ShapeGeometry: Bs,
  SphereGeometry: hn,
  TetrahedronGeometry: Vs,
  TorusGeometry: tn,
  TorusKnotGeometry: Hs,
  TubeGeometry: Gs,
  WireframeGeometry: Xh
});
class Yh extends et {
  constructor(e) {
    super(), this.isShadowMaterial = !0, this.type = "ShadowMaterial", this.color = new f0(0), this.transparent = !0, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.fog = e.fog, this;
  }
}
class Zh extends l1 {
  constructor(e) {
    super(e), this.isRawShaderMaterial = !0, this.type = "RawShaderMaterial";
  }
}
class L2 extends et {
  constructor(e) {
    super(), this.isMeshStandardMaterial = !0, this.defines = { STANDARD: "" }, this.type = "MeshStandardMaterial", this.color = new f0(16777215), this.roughness = 1, this.metalness = 0, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new f0(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Qn, this.normalScale = new o0(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.roughnessMap = null, this.metalnessMap = null, this.alphaMap = null, this.envMap = null, this.envMapIntensity = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.defines = { STANDARD: "" }, this.color.copy(e.color), this.roughness = e.roughness, this.metalness = e.metalness, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.roughnessMap = e.roughnessMap, this.metalnessMap = e.metalnessMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapIntensity = e.envMapIntensity, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class qh extends L2 {
  constructor(e) {
    super(), this.isMeshPhysicalMaterial = !0, this.defines = {
      STANDARD: "",
      PHYSICAL: ""
    }, this.type = "MeshPhysicalMaterial", this.clearcoatMap = null, this.clearcoatRoughness = 0, this.clearcoatRoughnessMap = null, this.clearcoatNormalScale = new o0(1, 1), this.clearcoatNormalMap = null, this.ior = 1.5, Object.defineProperty(this, "reflectivity", {
      get: function() {
        return De(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
      },
      set: function(t) {
        this.ior = (1 + 0.4 * t) / (1 - 0.4 * t);
      }
    }), this.iridescenceMap = null, this.iridescenceIOR = 1.3, this.iridescenceThicknessRange = [100, 400], this.iridescenceThicknessMap = null, this.sheenColor = new f0(0), this.sheenColorMap = null, this.sheenRoughness = 1, this.sheenRoughnessMap = null, this.transmissionMap = null, this.thickness = 0, this.thicknessMap = null, this.attenuationDistance = 1 / 0, this.attenuationColor = new f0(1, 1, 1), this.specularIntensity = 1, this.specularIntensityMap = null, this.specularColor = new f0(1, 1, 1), this.specularColorMap = null, this._sheen = 0, this._clearcoat = 0, this._iridescence = 0, this._transmission = 0, this.setValues(e);
  }
  get sheen() {
    return this._sheen;
  }
  set sheen(e) {
    this._sheen > 0 != e > 0 && this.version++, this._sheen = e;
  }
  get clearcoat() {
    return this._clearcoat;
  }
  set clearcoat(e) {
    this._clearcoat > 0 != e > 0 && this.version++, this._clearcoat = e;
  }
  get iridescence() {
    return this._iridescence;
  }
  set iridescence(e) {
    this._iridescence > 0 != e > 0 && this.version++, this._iridescence = e;
  }
  get transmission() {
    return this._transmission;
  }
  set transmission(e) {
    this._transmission > 0 != e > 0 && this.version++, this._transmission = e;
  }
  copy(e) {
    return super.copy(e), this.defines = {
      STANDARD: "",
      PHYSICAL: ""
    }, this.clearcoat = e.clearcoat, this.clearcoatMap = e.clearcoatMap, this.clearcoatRoughness = e.clearcoatRoughness, this.clearcoatRoughnessMap = e.clearcoatRoughnessMap, this.clearcoatNormalMap = e.clearcoatNormalMap, this.clearcoatNormalScale.copy(e.clearcoatNormalScale), this.ior = e.ior, this.iridescence = e.iridescence, this.iridescenceMap = e.iridescenceMap, this.iridescenceIOR = e.iridescenceIOR, this.iridescenceThicknessRange = [...e.iridescenceThicknessRange], this.iridescenceThicknessMap = e.iridescenceThicknessMap, this.sheen = e.sheen, this.sheenColor.copy(e.sheenColor), this.sheenColorMap = e.sheenColorMap, this.sheenRoughness = e.sheenRoughness, this.sheenRoughnessMap = e.sheenRoughnessMap, this.transmission = e.transmission, this.transmissionMap = e.transmissionMap, this.thickness = e.thickness, this.thicknessMap = e.thicknessMap, this.attenuationDistance = e.attenuationDistance, this.attenuationColor.copy(e.attenuationColor), this.specularIntensity = e.specularIntensity, this.specularIntensityMap = e.specularIntensityMap, this.specularColor.copy(e.specularColor), this.specularColorMap = e.specularColorMap, this;
  }
}
class u6 extends et {
  constructor(e) {
    super(), this.isMeshPhongMaterial = !0, this.type = "MeshPhongMaterial", this.color = new f0(16777215), this.specular = new f0(1118481), this.shininess = 30, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new f0(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Qn, this.normalScale = new o0(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = Ls, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.specular.copy(e.specular), this.shininess = e.shininess, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class $h extends et {
  constructor(e) {
    super(), this.isMeshToonMaterial = !0, this.defines = { TOON: "" }, this.type = "MeshToonMaterial", this.color = new f0(16777215), this.map = null, this.gradientMap = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new f0(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Qn, this.normalScale = new o0(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.gradientMap = e.gradientMap, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.fog = e.fog, this;
  }
}
class R2 extends et {
  constructor(e) {
    super(), this.isMeshNormalMaterial = !0, this.type = "MeshNormalMaterial", this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Qn, this.normalScale = new o0(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.flatShading = !1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.flatShading = e.flatShading, this;
  }
}
class d6 extends et {
  constructor(e) {
    super(), this.isMeshLambertMaterial = !0, this.type = "MeshLambertMaterial", this.color = new f0(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new f0(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Qn, this.normalScale = new o0(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = Ls, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class jh extends et {
  constructor(e) {
    super(), this.isMeshMatcapMaterial = !0, this.defines = { MATCAP: "" }, this.type = "MeshMatcapMaterial", this.color = new f0(16777215), this.matcap = null, this.map = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Qn, this.normalScale = new o0(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.defines = { MATCAP: "" }, this.color.copy(e.color), this.matcap = e.matcap, this.map = e.map, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class Jh extends Ae {
  constructor(e) {
    super(), this.isLineDashedMaterial = !0, this.type = "LineDashedMaterial", this.scale = 1, this.dashSize = 3, this.gapSize = 1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.scale = e.scale, this.dashSize = e.dashSize, this.gapSize = e.gapSize, this;
  }
}
function Wt(i, e, t) {
  return P2(i) ? new i.constructor(i.subarray(e, t !== void 0 ? t : i.length)) : i.slice(e, t);
}
function Ei(i, e, t) {
  return !i || // let 'undefined' and 'null' pass
  !t && i.constructor === e ? i : typeof e.BYTES_PER_ELEMENT == "number" ? new e(i) : Array.prototype.slice.call(i);
}
function P2(i) {
  return ArrayBuffer.isView(i) && !(i instanceof DataView);
}
function Kh(i) {
  function e(s, r) {
    return i[s] - i[r];
  }
  const t = i.length, n = new Array(t);
  for (let s = 0; s !== t; ++s)
    n[s] = s;
  return n.sort(e), n;
}
function R5(i, e, t) {
  const n = i.length, s = new i.constructor(n);
  for (let r = 0, a = 0; a !== n; ++r) {
    const o = t[r] * e;
    for (let c = 0; c !== e; ++c)
      s[a++] = i[o + c];
  }
  return s;
}
function D2(i, e, t, n) {
  let s = 1, r = i[0];
  for (; r !== void 0 && r[n] === void 0; )
    r = i[s++];
  if (r === void 0)
    return;
  let a = r[n];
  if (a !== void 0)
    if (Array.isArray(a))
      do
        a = r[n], a !== void 0 && (e.push(r.time), t.push.apply(t, a)), r = i[s++];
      while (r !== void 0);
    else if (a.toArray !== void 0)
      do
        a = r[n], a !== void 0 && (e.push(r.time), a.toArray(t, t.length)), r = i[s++];
      while (r !== void 0);
    else
      do
        a = r[n], a !== void 0 && (e.push(r.time), t.push(a)), r = i[s++];
      while (r !== void 0);
}
function Ib(i, e, t, n, s = 30) {
  const r = i.clone();
  r.name = e;
  const a = [];
  for (let c = 0; c < r.tracks.length; ++c) {
    const l = r.tracks[c], h = l.getValueSize(), d = [], u = [];
    for (let f = 0; f < l.times.length; ++f) {
      const p = l.times[f] * s;
      if (!(p < t || p >= n)) {
        d.push(l.times[f]);
        for (let _ = 0; _ < h; ++_)
          u.push(l.values[f * h + _]);
      }
    }
    d.length !== 0 && (l.times = Ei(d, l.times.constructor), l.values = Ei(u, l.values.constructor), a.push(l));
  }
  r.tracks = a;
  let o = 1 / 0;
  for (let c = 0; c < r.tracks.length; ++c)
    o > r.tracks[c].times[0] && (o = r.tracks[c].times[0]);
  for (let c = 0; c < r.tracks.length; ++c)
    r.tracks[c].shift(-1 * o);
  return r.resetDuration(), r;
}
function Lb(i, e = 0, t = i, n = 30) {
  n <= 0 && (n = 30);
  const s = t.tracks.length, r = e / n;
  for (let a = 0; a < s; ++a) {
    const o = t.tracks[a], c = o.ValueTypeName;
    if (c === "bool" || c === "string")
      continue;
    const l = i.tracks.find(function(m) {
      return m.name === o.name && m.ValueTypeName === c;
    });
    if (l === void 0)
      continue;
    let h = 0;
    const d = o.getValueSize();
    o.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (h = d / 3);
    let u = 0;
    const f = l.getValueSize();
    l.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (u = f / 3);
    const p = o.times.length - 1;
    let _;
    if (r <= o.times[0]) {
      const m = h, v = d - h;
      _ = Wt(o.values, m, v);
    } else if (r >= o.times[p]) {
      const m = p * d + h, v = m + d - h;
      _ = Wt(o.values, m, v);
    } else {
      const m = o.createInterpolant(), v = h, y = d - h;
      m.evaluate(r), _ = Wt(m.resultBuffer, v, y);
    }
    c === "quaternion" && new Ee().fromArray(_).normalize().conjugate().toArray(_);
    const g = l.times.length;
    for (let m = 0; m < g; ++m) {
      const v = m * f + u;
      if (c === "quaternion")
        Ee.multiplyQuaternionsFlat(
          l.values,
          v,
          _,
          0,
          l.values,
          v
        );
      else {
        const y = f - u * 2;
        for (let b = 0; b < y; ++b)
          l.values[v + b] -= _[b];
      }
    }
  }
  return i.blendMode = c2, i;
}
const Rb = {
  arraySlice: Wt,
  convertArray: Ei,
  isTypedArray: P2,
  getKeyframeOrder: Kh,
  sortedArray: R5,
  flattenJSON: D2,
  subclip: Ib,
  makeClipAdditive: Lb
};
class Ws {
  constructor(e, t, n, s) {
    this.parameterPositions = e, this._cachedIndex = 0, this.resultBuffer = s !== void 0 ? s : new t.constructor(n), this.sampleValues = t, this.valueSize = n, this.settings = null, this.DefaultSettings_ = {};
  }
  evaluate(e) {
    const t = this.parameterPositions;
    let n = this._cachedIndex, s = t[n], r = t[n - 1];
    e: {
      t: {
        let a;
        n: {
          i:
            if (!(e < s)) {
              for (let o = n + 2; ; ) {
                if (s === void 0) {
                  if (e < r)
                    break i;
                  return n = t.length, this._cachedIndex = n, this.copySampleValue_(n - 1);
                }
                if (n === o)
                  break;
                if (r = s, s = t[++n], e < s)
                  break t;
              }
              a = t.length;
              break n;
            }
          if (!(e >= r)) {
            const o = t[1];
            e < o && (n = 2, r = o);
            for (let c = n - 2; ; ) {
              if (r === void 0)
                return this._cachedIndex = 0, this.copySampleValue_(0);
              if (n === c)
                break;
              if (s = r, r = t[--n - 1], e >= r)
                break t;
            }
            a = n, n = 0;
            break n;
          }
          break e;
        }
        for (; n < a; ) {
          const o = n + a >>> 1;
          e < t[o] ? a = o : n = o + 1;
        }
        if (s = t[n], r = t[n - 1], r === void 0)
          return this._cachedIndex = 0, this.copySampleValue_(0);
        if (s === void 0)
          return n = t.length, this._cachedIndex = n, this.copySampleValue_(n - 1);
      }
      this._cachedIndex = n, this.intervalChanged_(n, r, s);
    }
    return this.interpolate_(n, r, e, s);
  }
  getSettings_() {
    return this.settings || this.DefaultSettings_;
  }
  copySampleValue_(e) {
    const t = this.resultBuffer, n = this.sampleValues, s = this.valueSize, r = e * s;
    for (let a = 0; a !== s; ++a)
      t[a] = n[r + a];
    return t;
  }
  // Template methods for derived classes:
  interpolate_() {
    throw new Error("call to abstract method");
  }
  intervalChanged_() {
  }
}
class Qh extends Ws {
  constructor(e, t, n, s) {
    super(e, t, n, s), this._weightPrev = -0, this._offsetPrev = -0, this._weightNext = -0, this._offsetNext = -0, this.DefaultSettings_ = {
      endingStart: xi,
      endingEnd: xi
    };
  }
  intervalChanged_(e, t, n) {
    const s = this.parameterPositions;
    let r = e - 2, a = e + 1, o = s[r], c = s[a];
    if (o === void 0)
      switch (this.getSettings_().endingStart) {
        case bi:
          r = e, o = 2 * t - n;
          break;
        case cs:
          r = s.length - 2, o = t + s[r] - s[r + 1];
          break;
        default:
          r = e, o = n;
      }
    if (c === void 0)
      switch (this.getSettings_().endingEnd) {
        case bi:
          a = e, c = 2 * n - t;
          break;
        case cs:
          a = 1, c = n + s[1] - s[0];
          break;
        default:
          a = e - 1, c = t;
      }
    const l = (n - t) * 0.5, h = this.valueSize;
    this._weightPrev = l / (t - o), this._weightNext = l / (c - n), this._offsetPrev = r * h, this._offsetNext = a * h;
  }
  interpolate_(e, t, n, s) {
    const r = this.resultBuffer, a = this.sampleValues, o = this.valueSize, c = e * o, l = c - o, h = this._offsetPrev, d = this._offsetNext, u = this._weightPrev, f = this._weightNext, p = (n - t) / (s - t), _ = p * p, g = _ * p, m = -u * g + 2 * u * _ - u * p, v = (1 + u) * g + (-1.5 - 2 * u) * _ + (-0.5 + u) * p + 1, y = (-1 - f) * g + (1.5 + f) * _ + 0.5 * p, b = f * g - f * _;
    for (let w = 0; w !== o; ++w)
      r[w] = m * a[h + w] + v * a[l + w] + y * a[c + w] + b * a[d + w];
    return r;
  }
}
class N2 extends Ws {
  constructor(e, t, n, s) {
    super(e, t, n, s);
  }
  interpolate_(e, t, n, s) {
    const r = this.resultBuffer, a = this.sampleValues, o = this.valueSize, c = e * o, l = c - o, h = (n - t) / (s - t), d = 1 - h;
    for (let u = 0; u !== o; ++u)
      r[u] = a[l + u] * d + a[c + u] * h;
    return r;
  }
}
class eu extends Ws {
  constructor(e, t, n, s) {
    super(e, t, n, s);
  }
  interpolate_(e) {
    return this.copySampleValue_(e - 1);
  }
}
class u1 {
  constructor(e, t, n, s) {
    if (e === void 0)
      throw new Error("THREE.KeyframeTrack: track name is undefined");
    if (t === void 0 || t.length === 0)
      throw new Error("THREE.KeyframeTrack: no keyframes in track named " + e);
    this.name = e, this.times = Ei(t, this.TimeBufferType), this.values = Ei(n, this.ValueBufferType), this.setInterpolation(s || this.DefaultInterpolation);
  }
  // Serialization (in static context, because of constructor invocation
  // and automatic invocation of .toJSON):
  static toJSON(e) {
    const t = e.constructor;
    let n;
    if (t.toJSON !== this.toJSON)
      n = t.toJSON(e);
    else {
      n = {
        name: e.name,
        times: Ei(e.times, Array),
        values: Ei(e.values, Array)
      };
      const s = e.getInterpolation();
      s !== e.DefaultInterpolation && (n.interpolation = s);
    }
    return n.type = e.ValueTypeName, n;
  }
  InterpolantFactoryMethodDiscrete(e) {
    return new eu(this.times, this.values, this.getValueSize(), e);
  }
  InterpolantFactoryMethodLinear(e) {
    return new N2(this.times, this.values, this.getValueSize(), e);
  }
  InterpolantFactoryMethodSmooth(e) {
    return new Qh(this.times, this.values, this.getValueSize(), e);
  }
  setInterpolation(e) {
    let t;
    switch (e) {
      case os:
        t = this.InterpolantFactoryMethodDiscrete;
        break;
      case ls:
        t = this.InterpolantFactoryMethodLinear;
        break;
      case _r:
        t = this.InterpolantFactoryMethodSmooth;
        break;
    }
    if (t === void 0) {
      const n = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
      if (this.createInterpolant === void 0)
        if (e !== this.DefaultInterpolation)
          this.setInterpolation(this.DefaultInterpolation);
        else
          throw new Error(n);
      return console.warn("THREE.KeyframeTrack:", n), this;
    }
    return this.createInterpolant = t, this;
  }
  getInterpolation() {
    switch (this.createInterpolant) {
      case this.InterpolantFactoryMethodDiscrete:
        return os;
      case this.InterpolantFactoryMethodLinear:
        return ls;
      case this.InterpolantFactoryMethodSmooth:
        return _r;
    }
  }
  getValueSize() {
    return this.values.length / this.times.length;
  }
  // move all keyframes either forwards or backwards in time
  shift(e) {
    if (e !== 0) {
      const t = this.times;
      for (let n = 0, s = t.length; n !== s; ++n)
        t[n] += e;
    }
    return this;
  }
  // scale all keyframe times by a factor (useful for frame <-> seconds conversions)
  scale(e) {
    if (e !== 1) {
      const t = this.times;
      for (let n = 0, s = t.length; n !== s; ++n)
        t[n] *= e;
    }
    return this;
  }
  // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
  // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
  trim(e, t) {
    const n = this.times, s = n.length;
    let r = 0, a = s - 1;
    for (; r !== s && n[r] < e; )
      ++r;
    for (; a !== -1 && n[a] > t; )
      --a;
    if (++a, r !== 0 || a !== s) {
      r >= a && (a = Math.max(a, 1), r = a - 1);
      const o = this.getValueSize();
      this.times = Wt(n, r, a), this.values = Wt(this.values, r * o, a * o);
    }
    return this;
  }
  // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
  validate() {
    let e = !0;
    const t = this.getValueSize();
    t - Math.floor(t) !== 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), e = !1);
    const n = this.times, s = this.values, r = n.length;
    r === 0 && (console.error("THREE.KeyframeTrack: Track is empty.", this), e = !1);
    let a = null;
    for (let o = 0; o !== r; o++) {
      const c = n[o];
      if (typeof c == "number" && isNaN(c)) {
        console.error("THREE.KeyframeTrack: Time is not a valid number.", this, o, c), e = !1;
        break;
      }
      if (a !== null && a > c) {
        console.error("THREE.KeyframeTrack: Out of order keys.", this, o, c, a), e = !1;
        break;
      }
      a = c;
    }
    if (s !== void 0 && P2(s))
      for (let o = 0, c = s.length; o !== c; ++o) {
        const l = s[o];
        if (isNaN(l)) {
          console.error("THREE.KeyframeTrack: Value is not a valid number.", this, o, l), e = !1;
          break;
        }
      }
    return e;
  }
  // removes equivalent sequential keys as common in morph target sequences
  // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
  optimize() {
    const e = Wt(this.times), t = Wt(this.values), n = this.getValueSize(), s = this.getInterpolation() === _r, r = e.length - 1;
    let a = 1;
    for (let o = 1; o < r; ++o) {
      let c = !1;
      const l = e[o], h = e[o + 1];
      if (l !== h && (o !== 1 || l !== e[0]))
        if (s)
          c = !0;
        else {
          const d = o * n, u = d - n, f = d + n;
          for (let p = 0; p !== n; ++p) {
            const _ = t[d + p];
            if (_ !== t[u + p] || _ !== t[f + p]) {
              c = !0;
              break;
            }
          }
        }
      if (c) {
        if (o !== a) {
          e[a] = e[o];
          const d = o * n, u = a * n;
          for (let f = 0; f !== n; ++f)
            t[u + f] = t[d + f];
        }
        ++a;
      }
    }
    if (r > 0) {
      e[a] = e[r];
      for (let o = r * n, c = a * n, l = 0; l !== n; ++l)
        t[c + l] = t[o + l];
      ++a;
    }
    return a !== e.length ? (this.times = Wt(e, 0, a), this.values = Wt(t, 0, a * n)) : (this.times = e, this.values = t), this;
  }
  clone() {
    const e = Wt(this.times, 0), t = Wt(this.values, 0), n = this.constructor, s = new n(this.name, e, t);
    return s.createInterpolant = this.createInterpolant, s;
  }
}
u1.prototype.TimeBufferType = Float32Array;
u1.prototype.ValueBufferType = Float32Array;
u1.prototype.DefaultInterpolation = ls;
class qi extends u1 {
}
qi.prototype.ValueTypeName = "bool";
qi.prototype.ValueBufferType = Array;
qi.prototype.DefaultInterpolation = os;
qi.prototype.InterpolantFactoryMethodLinear = void 0;
qi.prototype.InterpolantFactoryMethodSmooth = void 0;
class O2 extends u1 {
}
O2.prototype.ValueTypeName = "color";
class gs extends u1 {
}
gs.prototype.ValueTypeName = "number";
class tu extends Ws {
  constructor(e, t, n, s) {
    super(e, t, n, s);
  }
  interpolate_(e, t, n, s) {
    const r = this.resultBuffer, a = this.sampleValues, o = this.valueSize, c = (n - t) / (s - t);
    let l = e * o;
    for (let h = l + o; l !== h; l += 4)
      Ee.slerpFlat(r, 0, a, l - o, a, l, c);
    return r;
  }
}
class r8 extends u1 {
  InterpolantFactoryMethodLinear(e) {
    return new tu(this.times, this.values, this.getValueSize(), e);
  }
}
r8.prototype.ValueTypeName = "quaternion";
r8.prototype.DefaultInterpolation = ls;
r8.prototype.InterpolantFactoryMethodSmooth = void 0;
class $i extends u1 {
}
$i.prototype.ValueTypeName = "string";
$i.prototype.ValueBufferType = Array;
$i.prototype.DefaultInterpolation = os;
$i.prototype.InterpolantFactoryMethodLinear = void 0;
$i.prototype.InterpolantFactoryMethodSmooth = void 0;
class _s extends u1 {
}
_s.prototype.ValueTypeName = "vector";
class vs {
  constructor(e, t = -1, n, s = Jr) {
    this.name = e, this.tracks = n, this.duration = t, this.blendMode = s, this.uuid = kt(), this.duration < 0 && this.resetDuration();
  }
  static parse(e) {
    const t = [], n = e.tracks, s = 1 / (e.fps || 1);
    for (let a = 0, o = n.length; a !== o; ++a)
      t.push(Db(n[a]).scale(s));
    const r = new this(e.name, e.duration, t, e.blendMode);
    return r.uuid = e.uuid, r;
  }
  static toJSON(e) {
    const t = [], n = e.tracks, s = {
      name: e.name,
      duration: e.duration,
      tracks: t,
      uuid: e.uuid,
      blendMode: e.blendMode
    };
    for (let r = 0, a = n.length; r !== a; ++r)
      t.push(u1.toJSON(n[r]));
    return s;
  }
  static CreateFromMorphTargetSequence(e, t, n, s) {
    const r = t.length, a = [];
    for (let o = 0; o < r; o++) {
      let c = [], l = [];
      c.push(
        (o + r - 1) % r,
        o,
        (o + 1) % r
      ), l.push(0, 1, 0);
      const h = Kh(c);
      c = R5(c, 1, h), l = R5(l, 1, h), !s && c[0] === 0 && (c.push(r), l.push(l[0])), a.push(
        new gs(
          ".morphTargetInfluences[" + t[o].name + "]",
          c,
          l
        ).scale(1 / n)
      );
    }
    return new this(e, -1, a);
  }
  static findByName(e, t) {
    let n = e;
    if (!Array.isArray(e)) {
      const s = e;
      n = s.geometry && s.geometry.animations || s.animations;
    }
    for (let s = 0; s < n.length; s++)
      if (n[s].name === t)
        return n[s];
    return null;
  }
  static CreateClipsFromMorphTargetSequences(e, t, n) {
    const s = {}, r = /^([\w-]*?)([\d]+)$/;
    for (let o = 0, c = e.length; o < c; o++) {
      const l = e[o], h = l.name.match(r);
      if (h && h.length > 1) {
        const d = h[1];
        let u = s[d];
        u || (s[d] = u = []), u.push(l);
      }
    }
    const a = [];
    for (const o in s)
      a.push(this.CreateFromMorphTargetSequence(o, s[o], t, n));
    return a;
  }
  // parse the animation.hierarchy format
  static parseAnimation(e, t) {
    if (!e)
      return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
    const n = function(d, u, f, p, _) {
      if (f.length !== 0) {
        const g = [], m = [];
        D2(f, g, m, p), g.length !== 0 && _.push(new d(u, g, m));
      }
    }, s = [], r = e.name || "default", a = e.fps || 30, o = e.blendMode;
    let c = e.length || -1;
    const l = e.hierarchy || [];
    for (let d = 0; d < l.length; d++) {
      const u = l[d].keys;
      if (!(!u || u.length === 0))
        if (u[0].morphTargets) {
          const f = {};
          let p;
          for (p = 0; p < u.length; p++)
            if (u[p].morphTargets)
              for (let _ = 0; _ < u[p].morphTargets.length; _++)
                f[u[p].morphTargets[_]] = -1;
          for (const _ in f) {
            const g = [], m = [];
            for (let v = 0; v !== u[p].morphTargets.length; ++v) {
              const y = u[p];
              g.push(y.time), m.push(y.morphTarget === _ ? 1 : 0);
            }
            s.push(new gs(".morphTargetInfluence[" + _ + "]", g, m));
          }
          c = f.length * a;
        } else {
          const f = ".bones[" + t[d].name + "]";
          n(
            _s,
            f + ".position",
            u,
            "pos",
            s
          ), n(
            r8,
            f + ".quaternion",
            u,
            "rot",
            s
          ), n(
            _s,
            f + ".scale",
            u,
            "scl",
            s
          );
        }
    }
    return s.length === 0 ? null : new this(r, c, s, o);
  }
  resetDuration() {
    const e = this.tracks;
    let t = 0;
    for (let n = 0, s = e.length; n !== s; ++n) {
      const r = this.tracks[n];
      t = Math.max(t, r.times[r.times.length - 1]);
    }
    return this.duration = t, this;
  }
  trim() {
    for (let e = 0; e < this.tracks.length; e++)
      this.tracks[e].trim(0, this.duration);
    return this;
  }
  validate() {
    let e = !0;
    for (let t = 0; t < this.tracks.length; t++)
      e = e && this.tracks[t].validate();
    return e;
  }
  optimize() {
    for (let e = 0; e < this.tracks.length; e++)
      this.tracks[e].optimize();
    return this;
  }
  clone() {
    const e = [];
    for (let t = 0; t < this.tracks.length; t++)
      e.push(this.tracks[t].clone());
    return new this.constructor(this.name, this.duration, e, this.blendMode);
  }
  toJSON() {
    return this.constructor.toJSON(this);
  }
}
function Pb(i) {
  switch (i.toLowerCase()) {
    case "scalar":
    case "double":
    case "float":
    case "number":
    case "integer":
      return gs;
    case "vector":
    case "vector2":
    case "vector3":
    case "vector4":
      return _s;
    case "color":
      return O2;
    case "quaternion":
      return r8;
    case "bool":
    case "boolean":
      return qi;
    case "string":
      return $i;
  }
  throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + i);
}
function Db(i) {
  if (i.type === void 0)
    throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
  const e = Pb(i.type);
  if (i.times === void 0) {
    const t = [], n = [];
    D2(i.keys, t, n, "value"), i.times = t, i.values = n;
  }
  return e.parse !== void 0 ? e.parse(i) : new e(i.name, i.times, i.values, i.interpolation);
}
const Fi = {
  enabled: !1,
  files: {},
  add: function(i, e) {
    this.enabled !== !1 && (this.files[i] = e);
  },
  get: function(i) {
    if (this.enabled !== !1)
      return this.files[i];
  },
  remove: function(i) {
    delete this.files[i];
  },
  clear: function() {
    this.files = {};
  }
};
class U2 {
  constructor(e, t, n) {
    const s = this;
    let r = !1, a = 0, o = 0, c;
    const l = [];
    this.onStart = void 0, this.onLoad = e, this.onProgress = t, this.onError = n, this.itemStart = function(h) {
      o++, r === !1 && s.onStart !== void 0 && s.onStart(h, a, o), r = !0;
    }, this.itemEnd = function(h) {
      a++, s.onProgress !== void 0 && s.onProgress(h, a, o), a === o && (r = !1, s.onLoad !== void 0 && s.onLoad());
    }, this.itemError = function(h) {
      s.onError !== void 0 && s.onError(h);
    }, this.resolveURL = function(h) {
      return c ? c(h) : h;
    }, this.setURLModifier = function(h) {
      return c = h, this;
    }, this.addHandler = function(h, d) {
      return l.push(h, d), this;
    }, this.removeHandler = function(h) {
      const d = l.indexOf(h);
      return d !== -1 && l.splice(d, 2), this;
    }, this.getHandler = function(h) {
      for (let d = 0, u = l.length; d < u; d += 2) {
        const f = l[d], p = l[d + 1];
        if (f.global && (f.lastIndex = 0), f.test(h))
          return p;
      }
      return null;
    };
  }
}
const nu = /* @__PURE__ */ new U2();
class Ct {
  constructor(e) {
    this.manager = e !== void 0 ? e : nu, this.crossOrigin = "anonymous", this.withCredentials = !1, this.path = "", this.resourcePath = "", this.requestHeader = {};
  }
  load() {
  }
  loadAsync(e, t) {
    const n = this;
    return new Promise(function(s, r) {
      n.load(e, s, t, r);
    });
  }
  parse() {
  }
  setCrossOrigin(e) {
    return this.crossOrigin = e, this;
  }
  setWithCredentials(e) {
    return this.withCredentials = e, this;
  }
  setPath(e) {
    return this.path = e, this;
  }
  setResourcePath(e) {
    return this.resourcePath = e, this;
  }
  setRequestHeader(e) {
    return this.requestHeader = e, this;
  }
}
const Z1 = {};
class Nb extends Error {
  constructor(e, t) {
    super(e), this.response = t;
  }
}
class U1 extends Ct {
  constructor(e) {
    super(e);
  }
  load(e, t, n, s) {
    e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
    const r = Fi.get(e);
    if (r !== void 0)
      return this.manager.itemStart(e), setTimeout(() => {
        t && t(r), this.manager.itemEnd(e);
      }, 0), r;
    if (Z1[e] !== void 0) {
      Z1[e].push({
        onLoad: t,
        onProgress: n,
        onError: s
      });
      return;
    }
    Z1[e] = [], Z1[e].push({
      onLoad: t,
      onProgress: n,
      onError: s
    });
    const a = new Request(e, {
      headers: new Headers(this.requestHeader),
      credentials: this.withCredentials ? "include" : "same-origin"
      // An abort controller could be added within a future PR
    }), o = this.mimeType, c = this.responseType;
    fetch(a).then((l) => {
      if (l.status === 200 || l.status === 0) {
        if (l.status === 0 && console.warn("THREE.FileLoader: HTTP Status 0 received."), typeof ReadableStream > "u" || l.body === void 0 || l.body.getReader === void 0)
          return l;
        const h = Z1[e], d = l.body.getReader(), u = l.headers.get("Content-Length") || l.headers.get("X-File-Size"), f = u ? parseInt(u) : 0, p = f !== 0;
        let _ = 0;
        const g = new ReadableStream({
          start(m) {
            v();
            function v() {
              d.read().then(({ done: y, value: b }) => {
                if (y)
                  m.close();
                else {
                  _ += b.byteLength;
                  const w = new ProgressEvent("progress", { lengthComputable: p, loaded: _, total: f });
                  for (let x = 0, S = h.length; x < S; x++) {
                    const T = h[x];
                    T.onProgress && T.onProgress(w);
                  }
                  m.enqueue(b), v();
                }
              });
            }
          }
        });
        return new Response(g);
      } else
        throw new Nb(`fetch for "${l.url}" responded with ${l.status}: ${l.statusText}`, l);
    }).then((l) => {
      switch (c) {
        case "arraybuffer":
          return l.arrayBuffer();
        case "blob":
          return l.blob();
        case "document":
          return l.text().then((h) => new DOMParser().parseFromString(h, o));
        case "json":
          return l.json();
        default:
          if (o === void 0)
            return l.text();
          {
            const d = /charset="?([^;"\s]*)"?/i.exec(o), u = d && d[1] ? d[1].toLowerCase() : void 0, f = new TextDecoder(u);
            return l.arrayBuffer().then((p) => f.decode(p));
          }
      }
    }).then((l) => {
      Fi.add(e, l);
      const h = Z1[e];
      delete Z1[e];
      for (let d = 0, u = h.length; d < u; d++) {
        const f = h[d];
        f.onLoad && f.onLoad(l);
      }
    }).catch((l) => {
      const h = Z1[e];
      if (h === void 0)
        throw this.manager.itemError(e), l;
      delete Z1[e];
      for (let d = 0, u = h.length; d < u; d++) {
        const f = h[d];
        f.onError && f.onError(l);
      }
      this.manager.itemError(e);
    }).finally(() => {
      this.manager.itemEnd(e);
    }), this.manager.itemStart(e);
  }
  setResponseType(e) {
    return this.responseType = e, this;
  }
  setMimeType(e) {
    return this.mimeType = e, this;
  }
}
class Ob extends Ct {
  constructor(e) {
    super(e);
  }
  load(e, t, n, s) {
    const r = this, a = new U1(this.manager);
    a.setPath(this.path), a.setRequestHeader(this.requestHeader), a.setWithCredentials(this.withCredentials), a.load(e, function(o) {
      try {
        t(r.parse(JSON.parse(o)));
      } catch (c) {
        s ? s(c) : console.error(c), r.manager.itemError(e);
      }
    }, n, s);
  }
  parse(e) {
    const t = [];
    for (let n = 0; n < e.length; n++) {
      const s = vs.parse(e[n]);
      t.push(s);
    }
    return t;
  }
}
class Ub extends Ct {
  constructor(e) {
    super(e);
  }
  load(e, t, n, s) {
    const r = this, a = [], o = new M2(), c = new U1(this.manager);
    c.setPath(this.path), c.setResponseType("arraybuffer"), c.setRequestHeader(this.requestHeader), c.setWithCredentials(r.withCredentials);
    let l = 0;
    function h(d) {
      c.load(e[d], function(u) {
        const f = r.parse(u, !0);
        a[d] = {
          width: f.width,
          height: f.height,
          format: f.format,
          mipmaps: f.mipmaps
        }, l += 1, l === 6 && (f.mipmapCount === 1 && (o.minFilter = Pe), o.image = a, o.format = f.format, o.needsUpdate = !0, t && t(o));
      }, n, s);
    }
    if (Array.isArray(e))
      for (let d = 0, u = e.length; d < u; ++d)
        h(d);
    else
      c.load(e, function(d) {
        const u = r.parse(d, !0);
        if (u.isCubemap) {
          const f = u.mipmaps.length / u.mipmapCount;
          for (let p = 0; p < f; p++) {
            a[p] = { mipmaps: [] };
            for (let _ = 0; _ < u.mipmapCount; _++)
              a[p].mipmaps.push(u.mipmaps[p * u.mipmapCount + _]), a[p].format = u.format, a[p].width = u.width, a[p].height = u.height;
          }
          o.image = a;
        } else
          o.image.width = u.width, o.image.height = u.height, o.mipmaps = u.mipmaps;
        u.mipmapCount === 1 && (o.minFilter = Pe), o.format = u.format, o.needsUpdate = !0, t && t(o);
      }, n, s);
    return o;
  }
}
class ys extends Ct {
  constructor(e) {
    super(e);
  }
  load(e, t, n, s) {
    this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
    const r = this, a = Fi.get(e);
    if (a !== void 0)
      return r.manager.itemStart(e), setTimeout(function() {
        t && t(a), r.manager.itemEnd(e);
      }, 0), a;
    const o = us("img");
    function c() {
      h(), Fi.add(e, this), t && t(this), r.manager.itemEnd(e);
    }
    function l(d) {
      h(), s && s(d), r.manager.itemError(e), r.manager.itemEnd(e);
    }
    function h() {
      o.removeEventListener("load", c, !1), o.removeEventListener("error", l, !1);
    }
    return o.addEventListener("load", c, !1), o.addEventListener("error", l, !1), e.slice(0, 5) !== "data:" && this.crossOrigin !== void 0 && (o.crossOrigin = this.crossOrigin), r.manager.itemStart(e), o.src = e, o;
  }
}
class Fb extends Ct {
  constructor(e) {
    super(e);
  }
  load(e, t, n, s) {
    const r = new Ps(), a = new ys(this.manager);
    a.setCrossOrigin(this.crossOrigin), a.setPath(this.path);
    let o = 0;
    function c(l) {
      a.load(e[l], function(h) {
        r.images[l] = h, o++, o === 6 && (r.needsUpdate = !0, t && t(r));
      }, void 0, s);
    }
    for (let l = 0; l < e.length; ++l)
      c(l);
    return r;
  }
}
class zb extends Ct {
  constructor(e) {
    super(e);
  }
  load(e, t, n, s) {
    const r = this, a = new k9(), o = new U1(this.manager);
    return o.setResponseType("arraybuffer"), o.setRequestHeader(this.requestHeader), o.setPath(this.path), o.setWithCredentials(r.withCredentials), o.load(e, function(c) {
      const l = r.parse(c);
      l && (l.image !== void 0 ? a.image = l.image : l.data !== void 0 && (a.image.width = l.width, a.image.height = l.height, a.image.data = l.data), a.wrapS = l.wrapS !== void 0 ? l.wrapS : ht, a.wrapT = l.wrapT !== void 0 ? l.wrapT : ht, a.magFilter = l.magFilter !== void 0 ? l.magFilter : Pe, a.minFilter = l.minFilter !== void 0 ? l.minFilter : Pe, a.anisotropy = l.anisotropy !== void 0 ? l.anisotropy : 1, l.encoding !== void 0 && (a.encoding = l.encoding), l.flipY !== void 0 && (a.flipY = l.flipY), l.format !== void 0 && (a.format = l.format), l.type !== void 0 && (a.type = l.type), l.mipmaps !== void 0 && (a.mipmaps = l.mipmaps, a.minFilter = qn), l.mipmapCount === 1 && (a.minFilter = Pe), l.generateMipmaps !== void 0 && (a.generateMipmaps = l.generateMipmaps), a.needsUpdate = !0, t && t(a, l));
    }, n, s), a;
  }
}
class P5 extends Ct {
  constructor(e) {
    super(e);
  }
  load(e, t, n, s) {
    const r = new Be(), a = new ys(this.manager);
    return a.setCrossOrigin(this.crossOrigin), a.setPath(this.path), a.load(e, function(o) {
      r.image = o, r.needsUpdate = !0, t !== void 0 && t(r);
    }, n, s), r;
  }
}
class ei extends G0 {
  constructor(e, t = 1) {
    super(), this.isLight = !0, this.type = "Light", this.color = new f0(e), this.intensity = t;
  }
  dispose() {
  }
  copy(e, t) {
    return super.copy(e, t), this.color.copy(e.color), this.intensity = e.intensity, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.color = this.color.getHex(), t.object.intensity = this.intensity, this.groundColor !== void 0 && (t.object.groundColor = this.groundColor.getHex()), this.distance !== void 0 && (t.object.distance = this.distance), this.angle !== void 0 && (t.object.angle = this.angle), this.decay !== void 0 && (t.object.decay = this.decay), this.penumbra !== void 0 && (t.object.penumbra = this.penumbra), this.shadow !== void 0 && (t.object.shadow = this.shadow.toJSON()), t;
  }
}
class iu extends ei {
  constructor(e, t, n) {
    super(e, n), this.isHemisphereLight = !0, this.type = "HemisphereLight", this.position.copy(G0.DEFAULT_UP), this.updateMatrix(), this.groundColor = new f0(t);
  }
  copy(e, t) {
    return super.copy(e, t), this.groundColor.copy(e.groundColor), this;
  }
}
const e3 = /* @__PURE__ */ new k0(), Ea = /* @__PURE__ */ new C(), Ta = /* @__PURE__ */ new C();
class F2 {
  constructor(e) {
    this.camera = e, this.bias = 0, this.normalBias = 0, this.radius = 1, this.blurSamples = 8, this.mapSize = new o0(512, 512), this.map = null, this.mapPass = null, this.matrix = new k0(), this.autoUpdate = !0, this.needsUpdate = !1, this._frustum = new n6(), this._frameExtents = new o0(1, 1), this._viewportCount = 1, this._viewports = [
      new pe(0, 0, 1, 1)
    ];
  }
  getViewportCount() {
    return this._viewportCount;
  }
  getFrustum() {
    return this._frustum;
  }
  updateMatrices(e) {
    const t = this.camera, n = this.matrix;
    Ea.setFromMatrixPosition(e.matrixWorld), t.position.copy(Ea), Ta.setFromMatrixPosition(e.target.matrixWorld), t.lookAt(Ta), t.updateMatrixWorld(), e3.multiplyMatrices(t.projectionMatrix, t.matrixWorldInverse), this._frustum.setFromProjectionMatrix(e3), n.set(
      0.5,
      0,
      0,
      0.5,
      0,
      0.5,
      0,
      0.5,
      0,
      0,
      0.5,
      0.5,
      0,
      0,
      0,
      1
    ), n.multiply(e3);
  }
  getViewport(e) {
    return this._viewports[e];
  }
  getFrameExtents() {
    return this._frameExtents;
  }
  dispose() {
    this.map && this.map.dispose(), this.mapPass && this.mapPass.dispose();
  }
  copy(e) {
    return this.camera = e.camera.clone(), this.bias = e.bias, this.radius = e.radius, this.mapSize.copy(e.mapSize), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  toJSON() {
    const e = {};
    return this.bias !== 0 && (e.bias = this.bias), this.normalBias !== 0 && (e.normalBias = this.normalBias), this.radius !== 1 && (e.radius = this.radius), (this.mapSize.x !== 512 || this.mapSize.y !== 512) && (e.mapSize = this.mapSize.toArray()), e.camera = this.camera.toJSON(!1).object, delete e.camera.matrix, e;
  }
}
class kb extends F2 {
  constructor() {
    super(new Qe(50, 1, 0.5, 500)), this.isSpotLightShadow = !0, this.focus = 1;
  }
  updateMatrices(e) {
    const t = this.camera, n = j9 * 2 * e.angle * this.focus, s = this.mapSize.width / this.mapSize.height, r = e.distance || t.far;
    (n !== t.fov || s !== t.aspect || r !== t.far) && (t.fov = n, t.aspect = s, t.far = r, t.updateProjectionMatrix()), super.updateMatrices(e);
  }
  copy(e) {
    return super.copy(e), this.focus = e.focus, this;
  }
}
class su extends ei {
  constructor(e, t, n = 0, s = Math.PI / 3, r = 0, a = 2) {
    super(e, t), this.isSpotLight = !0, this.type = "SpotLight", this.position.copy(G0.DEFAULT_UP), this.updateMatrix(), this.target = new G0(), this.distance = n, this.angle = s, this.penumbra = r, this.decay = a, this.map = null, this.shadow = new kb();
  }
  get power() {
    return this.intensity * Math.PI;
  }
  set power(e) {
    this.intensity = e / Math.PI;
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e, t) {
    return super.copy(e, t), this.distance = e.distance, this.angle = e.angle, this.penumbra = e.penumbra, this.decay = e.decay, this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
  }
}
const Aa = /* @__PURE__ */ new k0(), w8 = /* @__PURE__ */ new C(), t3 = /* @__PURE__ */ new C();
class Bb extends F2 {
  constructor() {
    super(new Qe(90, 1, 0.5, 500)), this.isPointLightShadow = !0, this._frameExtents = new o0(4, 2), this._viewportCount = 6, this._viewports = [
      // These viewports map a cube-map onto a 2D texture with the
      // following orientation:
      //
      //  xzXZ
      //   y Y
      //
      // X - Positive x direction
      // x - Negative x direction
      // Y - Positive y direction
      // y - Negative y direction
      // Z - Positive z direction
      // z - Negative z direction
      // positive X
      new pe(2, 1, 1, 1),
      // negative X
      new pe(0, 1, 1, 1),
      // positive Z
      new pe(3, 1, 1, 1),
      // negative Z
      new pe(1, 1, 1, 1),
      // positive Y
      new pe(3, 0, 1, 1),
      // negative Y
      new pe(1, 0, 1, 1)
    ], this._cubeDirections = [
      new C(1, 0, 0),
      new C(-1, 0, 0),
      new C(0, 0, 1),
      new C(0, 0, -1),
      new C(0, 1, 0),
      new C(0, -1, 0)
    ], this._cubeUps = [
      new C(0, 1, 0),
      new C(0, 1, 0),
      new C(0, 1, 0),
      new C(0, 1, 0),
      new C(0, 0, 1),
      new C(0, 0, -1)
    ];
  }
  updateMatrices(e, t = 0) {
    const n = this.camera, s = this.matrix, r = e.distance || n.far;
    r !== n.far && (n.far = r, n.updateProjectionMatrix()), w8.setFromMatrixPosition(e.matrixWorld), n.position.copy(w8), t3.copy(n.position), t3.add(this._cubeDirections[t]), n.up.copy(this._cubeUps[t]), n.lookAt(t3), n.updateMatrixWorld(), s.makeTranslation(-w8.x, -w8.y, -w8.z), Aa.multiplyMatrices(n.projectionMatrix, n.matrixWorldInverse), this._frustum.setFromProjectionMatrix(Aa);
  }
}
class z2 extends ei {
  constructor(e, t, n = 0, s = 2) {
    super(e, t), this.isPointLight = !0, this.type = "PointLight", this.distance = n, this.decay = s, this.shadow = new Bb();
  }
  get power() {
    return this.intensity * 4 * Math.PI;
  }
  set power(e) {
    this.intensity = e / (4 * Math.PI);
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e, t) {
    return super.copy(e, t), this.distance = e.distance, this.decay = e.decay, this.shadow = e.shadow.clone(), this;
  }
}
class Vb extends F2 {
  constructor() {
    super(new i6(-5, 5, 5, -5, 0.5, 500)), this.isDirectionalLightShadow = !0;
  }
}
class k2 extends ei {
  constructor(e, t) {
    super(e, t), this.isDirectionalLight = !0, this.type = "DirectionalLight", this.position.copy(G0.DEFAULT_UP), this.updateMatrix(), this.target = new G0(), this.shadow = new Vb();
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e) {
    return super.copy(e), this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
  }
}
class B2 extends ei {
  constructor(e, t) {
    super(e, t), this.isAmbientLight = !0, this.type = "AmbientLight";
  }
}
class ru extends ei {
  constructor(e, t, n = 10, s = 10) {
    super(e, t), this.isRectAreaLight = !0, this.type = "RectAreaLight", this.width = n, this.height = s;
  }
  get power() {
    return this.intensity * this.width * this.height * Math.PI;
  }
  set power(e) {
    this.intensity = e / (this.width * this.height * Math.PI);
  }
  copy(e) {
    return super.copy(e), this.width = e.width, this.height = e.height, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.width = this.width, t.object.height = this.height, t;
  }
}
class au {
  constructor() {
    this.isSphericalHarmonics3 = !0, this.coefficients = [];
    for (let e = 0; e < 9; e++)
      this.coefficients.push(new C());
  }
  set(e) {
    for (let t = 0; t < 9; t++)
      this.coefficients[t].copy(e[t]);
    return this;
  }
  zero() {
    for (let e = 0; e < 9; e++)
      this.coefficients[e].set(0, 0, 0);
    return this;
  }
  // get the radiance in the direction of the normal
  // target is a Vector3
  getAt(e, t) {
    const n = e.x, s = e.y, r = e.z, a = this.coefficients;
    return t.copy(a[0]).multiplyScalar(0.282095), t.addScaledVector(a[1], 0.488603 * s), t.addScaledVector(a[2], 0.488603 * r), t.addScaledVector(a[3], 0.488603 * n), t.addScaledVector(a[4], 1.092548 * (n * s)), t.addScaledVector(a[5], 1.092548 * (s * r)), t.addScaledVector(a[6], 0.315392 * (3 * r * r - 1)), t.addScaledVector(a[7], 1.092548 * (n * r)), t.addScaledVector(a[8], 0.546274 * (n * n - s * s)), t;
  }
  // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
  // target is a Vector3
  // https://graphics.stanford.edu/papers/envmap/envmap.pdf
  getIrradianceAt(e, t) {
    const n = e.x, s = e.y, r = e.z, a = this.coefficients;
    return t.copy(a[0]).multiplyScalar(0.886227), t.addScaledVector(a[1], 2 * 0.511664 * s), t.addScaledVector(a[2], 2 * 0.511664 * r), t.addScaledVector(a[3], 2 * 0.511664 * n), t.addScaledVector(a[4], 2 * 0.429043 * n * s), t.addScaledVector(a[5], 2 * 0.429043 * s * r), t.addScaledVector(a[6], 0.743125 * r * r - 0.247708), t.addScaledVector(a[7], 2 * 0.429043 * n * r), t.addScaledVector(a[8], 0.429043 * (n * n - s * s)), t;
  }
  add(e) {
    for (let t = 0; t < 9; t++)
      this.coefficients[t].add(e.coefficients[t]);
    return this;
  }
  addScaledSH(e, t) {
    for (let n = 0; n < 9; n++)
      this.coefficients[n].addScaledVector(e.coefficients[n], t);
    return this;
  }
  scale(e) {
    for (let t = 0; t < 9; t++)
      this.coefficients[t].multiplyScalar(e);
    return this;
  }
  lerp(e, t) {
    for (let n = 0; n < 9; n++)
      this.coefficients[n].lerp(e.coefficients[n], t);
    return this;
  }
  equals(e) {
    for (let t = 0; t < 9; t++)
      if (!this.coefficients[t].equals(e.coefficients[t]))
        return !1;
    return !0;
  }
  copy(e) {
    return this.set(e.coefficients);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  fromArray(e, t = 0) {
    const n = this.coefficients;
    for (let s = 0; s < 9; s++)
      n[s].fromArray(e, t + s * 3);
    return this;
  }
  toArray(e = [], t = 0) {
    const n = this.coefficients;
    for (let s = 0; s < 9; s++)
      n[s].toArray(e, t + s * 3);
    return e;
  }
  // evaluate the basis functions
  // shBasis is an Array[ 9 ]
  static getBasisAt(e, t) {
    const n = e.x, s = e.y, r = e.z;
    t[0] = 0.282095, t[1] = 0.488603 * s, t[2] = 0.488603 * r, t[3] = 0.488603 * n, t[4] = 1.092548 * n * s, t[5] = 1.092548 * s * r, t[6] = 0.315392 * (3 * r * r - 1), t[7] = 1.092548 * n * r, t[8] = 0.546274 * (n * n - s * s);
  }
}
class f6 extends ei {
  constructor(e = new au(), t = 1) {
    super(void 0, t), this.isLightProbe = !0, this.sh = e;
  }
  copy(e) {
    return super.copy(e), this.sh.copy(e.sh), this;
  }
  fromJSON(e) {
    return this.intensity = e.intensity, this.sh.fromArray(e.sh), this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.sh = this.sh.toArray(), t;
  }
}
class p6 extends Ct {
  constructor(e) {
    super(e), this.textures = {};
  }
  load(e, t, n, s) {
    const r = this, a = new U1(r.manager);
    a.setPath(r.path), a.setRequestHeader(r.requestHeader), a.setWithCredentials(r.withCredentials), a.load(e, function(o) {
      try {
        t(r.parse(JSON.parse(o)));
      } catch (c) {
        s ? s(c) : console.error(c), r.manager.itemError(e);
      }
    }, n, s);
  }
  parse(e) {
    const t = this.textures;
    function n(r) {
      return t[r] === void 0 && console.warn("THREE.MaterialLoader: Undefined texture", r), t[r];
    }
    const s = p6.createMaterialFromType(e.type);
    if (e.uuid !== void 0 && (s.uuid = e.uuid), e.name !== void 0 && (s.name = e.name), e.color !== void 0 && s.color !== void 0 && s.color.setHex(e.color), e.roughness !== void 0 && (s.roughness = e.roughness), e.metalness !== void 0 && (s.metalness = e.metalness), e.sheen !== void 0 && (s.sheen = e.sheen), e.sheenColor !== void 0 && (s.sheenColor = new f0().setHex(e.sheenColor)), e.sheenRoughness !== void 0 && (s.sheenRoughness = e.sheenRoughness), e.emissive !== void 0 && s.emissive !== void 0 && s.emissive.setHex(e.emissive), e.specular !== void 0 && s.specular !== void 0 && s.specular.setHex(e.specular), e.specularIntensity !== void 0 && (s.specularIntensity = e.specularIntensity), e.specularColor !== void 0 && s.specularColor !== void 0 && s.specularColor.setHex(e.specularColor), e.shininess !== void 0 && (s.shininess = e.shininess), e.clearcoat !== void 0 && (s.clearcoat = e.clearcoat), e.clearcoatRoughness !== void 0 && (s.clearcoatRoughness = e.clearcoatRoughness), e.iridescence !== void 0 && (s.iridescence = e.iridescence), e.iridescenceIOR !== void 0 && (s.iridescenceIOR = e.iridescenceIOR), e.iridescenceThicknessRange !== void 0 && (s.iridescenceThicknessRange = e.iridescenceThicknessRange), e.transmission !== void 0 && (s.transmission = e.transmission), e.thickness !== void 0 && (s.thickness = e.thickness), e.attenuationDistance !== void 0 && (s.attenuationDistance = e.attenuationDistance), e.attenuationColor !== void 0 && s.attenuationColor !== void 0 && s.attenuationColor.setHex(e.attenuationColor), e.fog !== void 0 && (s.fog = e.fog), e.flatShading !== void 0 && (s.flatShading = e.flatShading), e.blending !== void 0 && (s.blending = e.blending), e.combine !== void 0 && (s.combine = e.combine), e.side !== void 0 && (s.side = e.side), e.shadowSide !== void 0 && (s.shadowSide = e.shadowSide), e.opacity !== void 0 && (s.opacity = e.opacity), e.transparent !== void 0 && (s.transparent = e.transparent), e.alphaTest !== void 0 && (s.alphaTest = e.alphaTest), e.depthTest !== void 0 && (s.depthTest = e.depthTest), e.depthWrite !== void 0 && (s.depthWrite = e.depthWrite), e.colorWrite !== void 0 && (s.colorWrite = e.colorWrite), e.stencilWrite !== void 0 && (s.stencilWrite = e.stencilWrite), e.stencilWriteMask !== void 0 && (s.stencilWriteMask = e.stencilWriteMask), e.stencilFunc !== void 0 && (s.stencilFunc = e.stencilFunc), e.stencilRef !== void 0 && (s.stencilRef = e.stencilRef), e.stencilFuncMask !== void 0 && (s.stencilFuncMask = e.stencilFuncMask), e.stencilFail !== void 0 && (s.stencilFail = e.stencilFail), e.stencilZFail !== void 0 && (s.stencilZFail = e.stencilZFail), e.stencilZPass !== void 0 && (s.stencilZPass = e.stencilZPass), e.wireframe !== void 0 && (s.wireframe = e.wireframe), e.wireframeLinewidth !== void 0 && (s.wireframeLinewidth = e.wireframeLinewidth), e.wireframeLinecap !== void 0 && (s.wireframeLinecap = e.wireframeLinecap), e.wireframeLinejoin !== void 0 && (s.wireframeLinejoin = e.wireframeLinejoin), e.rotation !== void 0 && (s.rotation = e.rotation), e.linewidth !== 1 && (s.linewidth = e.linewidth), e.dashSize !== void 0 && (s.dashSize = e.dashSize), e.gapSize !== void 0 && (s.gapSize = e.gapSize), e.scale !== void 0 && (s.scale = e.scale), e.polygonOffset !== void 0 && (s.polygonOffset = e.polygonOffset), e.polygonOffsetFactor !== void 0 && (s.polygonOffsetFactor = e.polygonOffsetFactor), e.polygonOffsetUnits !== void 0 && (s.polygonOffsetUnits = e.polygonOffsetUnits), e.dithering !== void 0 && (s.dithering = e.dithering), e.alphaToCoverage !== void 0 && (s.alphaToCoverage = e.alphaToCoverage), e.premultipliedAlpha !== void 0 && (s.premultipliedAlpha = e.premultipliedAlpha), e.forceSinglePass !== void 0 && (s.forceSinglePass = e.forceSinglePass), e.visible !== void 0 && (s.visible = e.visible), e.toneMapped !== void 0 && (s.toneMapped = e.toneMapped), e.userData !== void 0 && (s.userData = e.userData), e.vertexColors !== void 0 && (typeof e.vertexColors == "number" ? s.vertexColors = e.vertexColors > 0 : s.vertexColors = e.vertexColors), e.uniforms !== void 0)
      for (const r in e.uniforms) {
        const a = e.uniforms[r];
        switch (s.uniforms[r] = {}, a.type) {
          case "t":
            s.uniforms[r].value = n(a.value);
            break;
          case "c":
            s.uniforms[r].value = new f0().setHex(a.value);
            break;
          case "v2":
            s.uniforms[r].value = new o0().fromArray(a.value);
            break;
          case "v3":
            s.uniforms[r].value = new C().fromArray(a.value);
            break;
          case "v4":
            s.uniforms[r].value = new pe().fromArray(a.value);
            break;
          case "m3":
            s.uniforms[r].value = new $0().fromArray(a.value);
            break;
          case "m4":
            s.uniforms[r].value = new k0().fromArray(a.value);
            break;
          default:
            s.uniforms[r].value = a.value;
        }
      }
    if (e.defines !== void 0 && (s.defines = e.defines), e.vertexShader !== void 0 && (s.vertexShader = e.vertexShader), e.fragmentShader !== void 0 && (s.fragmentShader = e.fragmentShader), e.glslVersion !== void 0 && (s.glslVersion = e.glslVersion), e.extensions !== void 0)
      for (const r in e.extensions)
        s.extensions[r] = e.extensions[r];
    if (e.size !== void 0 && (s.size = e.size), e.sizeAttenuation !== void 0 && (s.sizeAttenuation = e.sizeAttenuation), e.map !== void 0 && (s.map = n(e.map)), e.matcap !== void 0 && (s.matcap = n(e.matcap)), e.alphaMap !== void 0 && (s.alphaMap = n(e.alphaMap)), e.bumpMap !== void 0 && (s.bumpMap = n(e.bumpMap)), e.bumpScale !== void 0 && (s.bumpScale = e.bumpScale), e.normalMap !== void 0 && (s.normalMap = n(e.normalMap)), e.normalMapType !== void 0 && (s.normalMapType = e.normalMapType), e.normalScale !== void 0) {
      let r = e.normalScale;
      Array.isArray(r) === !1 && (r = [r, r]), s.normalScale = new o0().fromArray(r);
    }
    return e.displacementMap !== void 0 && (s.displacementMap = n(e.displacementMap)), e.displacementScale !== void 0 && (s.displacementScale = e.displacementScale), e.displacementBias !== void 0 && (s.displacementBias = e.displacementBias), e.roughnessMap !== void 0 && (s.roughnessMap = n(e.roughnessMap)), e.metalnessMap !== void 0 && (s.metalnessMap = n(e.metalnessMap)), e.emissiveMap !== void 0 && (s.emissiveMap = n(e.emissiveMap)), e.emissiveIntensity !== void 0 && (s.emissiveIntensity = e.emissiveIntensity), e.specularMap !== void 0 && (s.specularMap = n(e.specularMap)), e.specularIntensityMap !== void 0 && (s.specularIntensityMap = n(e.specularIntensityMap)), e.specularColorMap !== void 0 && (s.specularColorMap = n(e.specularColorMap)), e.envMap !== void 0 && (s.envMap = n(e.envMap)), e.envMapIntensity !== void 0 && (s.envMapIntensity = e.envMapIntensity), e.reflectivity !== void 0 && (s.reflectivity = e.reflectivity), e.refractionRatio !== void 0 && (s.refractionRatio = e.refractionRatio), e.lightMap !== void 0 && (s.lightMap = n(e.lightMap)), e.lightMapIntensity !== void 0 && (s.lightMapIntensity = e.lightMapIntensity), e.aoMap !== void 0 && (s.aoMap = n(e.aoMap)), e.aoMapIntensity !== void 0 && (s.aoMapIntensity = e.aoMapIntensity), e.gradientMap !== void 0 && (s.gradientMap = n(e.gradientMap)), e.clearcoatMap !== void 0 && (s.clearcoatMap = n(e.clearcoatMap)), e.clearcoatRoughnessMap !== void 0 && (s.clearcoatRoughnessMap = n(e.clearcoatRoughnessMap)), e.clearcoatNormalMap !== void 0 && (s.clearcoatNormalMap = n(e.clearcoatNormalMap)), e.clearcoatNormalScale !== void 0 && (s.clearcoatNormalScale = new o0().fromArray(e.clearcoatNormalScale)), e.iridescenceMap !== void 0 && (s.iridescenceMap = n(e.iridescenceMap)), e.iridescenceThicknessMap !== void 0 && (s.iridescenceThicknessMap = n(e.iridescenceThicknessMap)), e.transmissionMap !== void 0 && (s.transmissionMap = n(e.transmissionMap)), e.thicknessMap !== void 0 && (s.thicknessMap = n(e.thicknessMap)), e.sheenColorMap !== void 0 && (s.sheenColorMap = n(e.sheenColorMap)), e.sheenRoughnessMap !== void 0 && (s.sheenRoughnessMap = n(e.sheenRoughnessMap)), s;
  }
  setTextures(e) {
    return this.textures = e, this;
  }
  static createMaterialFromType(e) {
    const t = {
      ShadowMaterial: Yh,
      SpriteMaterial: b2,
      RawShaderMaterial: Zh,
      ShaderMaterial: l1,
      PointsMaterial: Si,
      MeshPhysicalMaterial: qh,
      MeshStandardMaterial: L2,
      MeshPhongMaterial: u6,
      MeshToonMaterial: $h,
      MeshNormalMaterial: R2,
      MeshLambertMaterial: d6,
      MeshDepthMaterial: _2,
      MeshDistanceMaterial: v2,
      MeshBasicMaterial: c1,
      MeshMatcapMaterial: jh,
      LineDashedMaterial: Jh,
      LineBasicMaterial: Ae,
      Material: et
    };
    return new t[e]();
  }
}
class D5 {
  static decodeText(e) {
    if (typeof TextDecoder < "u")
      return new TextDecoder().decode(e);
    let t = "";
    for (let n = 0, s = e.length; n < s; n++)
      t += String.fromCharCode(e[n]);
    try {
      return decodeURIComponent(escape(t));
    } catch {
      return t;
    }
  }
  static extractUrlBase(e) {
    const t = e.lastIndexOf("/");
    return t === -1 ? "./" : e.slice(0, t + 1);
  }
  static resolveURL(e, t) {
    return typeof e != "string" || e === "" ? "" : (/^https?:\/\//i.test(t) && /^\//.test(e) && (t = t.replace(/(^https?:\/\/[^\/]+).*/i, "$1")), /^(https?:)?\/\//i.test(e) || /^data:.*,.*$/i.test(e) || /^blob:.*$/i.test(e) ? e : t + e);
  }
}
class ou extends F0 {
  constructor() {
    super(), this.isInstancedBufferGeometry = !0, this.type = "InstancedBufferGeometry", this.instanceCount = 1 / 0;
  }
  copy(e) {
    return super.copy(e), this.instanceCount = e.instanceCount, this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.instanceCount = this.instanceCount, e.isInstancedBufferGeometry = !0, e;
  }
}
class lu extends Ct {
  constructor(e) {
    super(e);
  }
  load(e, t, n, s) {
    const r = this, a = new U1(r.manager);
    a.setPath(r.path), a.setRequestHeader(r.requestHeader), a.setWithCredentials(r.withCredentials), a.load(e, function(o) {
      try {
        t(r.parse(JSON.parse(o)));
      } catch (c) {
        s ? s(c) : console.error(c), r.manager.itemError(e);
      }
    }, n, s);
  }
  parse(e) {
    const t = {}, n = {};
    function s(f, p) {
      if (t[p] !== void 0)
        return t[p];
      const g = f.interleavedBuffers[p], m = r(f, g.buffer), v = D9(g.type, m), y = new Ds(v, g.stride);
      return y.uuid = g.uuid, t[p] = y, y;
    }
    function r(f, p) {
      if (n[p] !== void 0)
        return n[p];
      const g = f.arrayBuffers[p], m = new Uint32Array(g).buffer;
      return n[p] = m, m;
    }
    const a = e.isInstancedBufferGeometry ? new ou() : new F0(), o = e.data.index;
    if (o !== void 0) {
      const f = D9(o.type, o.array);
      a.setIndex(new ee(f, 1));
    }
    const c = e.data.attributes;
    for (const f in c) {
      const p = c[f];
      let _;
      if (p.isInterleavedBufferAttribute) {
        const g = s(e.data, p.data);
        _ = new Jn(g, p.itemSize, p.offset, p.normalized);
      } else {
        const g = D9(p.type, p.array), m = p.isInstancedBufferAttribute ? K9 : ee;
        _ = new m(g, p.itemSize, p.normalized);
      }
      p.name !== void 0 && (_.name = p.name), p.usage !== void 0 && _.setUsage(p.usage), p.updateRange !== void 0 && (_.updateRange.offset = p.updateRange.offset, _.updateRange.count = p.updateRange.count), a.setAttribute(f, _);
    }
    const l = e.data.morphAttributes;
    if (l)
      for (const f in l) {
        const p = l[f], _ = [];
        for (let g = 0, m = p.length; g < m; g++) {
          const v = p[g];
          let y;
          if (v.isInterleavedBufferAttribute) {
            const b = s(e.data, v.data);
            y = new Jn(b, v.itemSize, v.offset, v.normalized);
          } else {
            const b = D9(v.type, v.array);
            y = new ee(b, v.itemSize, v.normalized);
          }
          v.name !== void 0 && (y.name = v.name), _.push(y);
        }
        a.morphAttributes[f] = _;
      }
    e.data.morphTargetsRelative && (a.morphTargetsRelative = !0);
    const d = e.data.groups || e.data.drawcalls || e.data.offsets;
    if (d !== void 0)
      for (let f = 0, p = d.length; f !== p; ++f) {
        const _ = d[f];
        a.addGroup(_.start, _.count, _.materialIndex);
      }
    const u = e.data.boundingSphere;
    if (u !== void 0) {
      const f = new C();
      u.center !== void 0 && f.fromArray(u.center), a.boundingSphere = new z1(f, u.radius);
    }
    return e.name && (a.name = e.name), e.userData && (a.userData = e.userData), a;
  }
}
class Hb extends Ct {
  constructor(e) {
    super(e);
  }
  load(e, t, n, s) {
    const r = this, a = this.path === "" ? D5.extractUrlBase(e) : this.path;
    this.resourcePath = this.resourcePath || a;
    const o = new U1(this.manager);
    o.setPath(this.path), o.setRequestHeader(this.requestHeader), o.setWithCredentials(this.withCredentials), o.load(e, function(c) {
      let l = null;
      try {
        l = JSON.parse(c);
      } catch (d) {
        s !== void 0 && s(d), console.error("THREE:ObjectLoader: Can't parse " + e + ".", d.message);
        return;
      }
      const h = l.metadata;
      if (h === void 0 || h.type === void 0 || h.type.toLowerCase() === "geometry") {
        s !== void 0 && s(new Error("THREE.ObjectLoader: Can't load " + e)), console.error("THREE.ObjectLoader: Can't load " + e);
        return;
      }
      r.parse(l, t);
    }, n, s);
  }
  async loadAsync(e, t) {
    const n = this, s = this.path === "" ? D5.extractUrlBase(e) : this.path;
    this.resourcePath = this.resourcePath || s;
    const r = new U1(this.manager);
    r.setPath(this.path), r.setRequestHeader(this.requestHeader), r.setWithCredentials(this.withCredentials);
    const a = await r.loadAsync(e, t), o = JSON.parse(a), c = o.metadata;
    if (c === void 0 || c.type === void 0 || c.type.toLowerCase() === "geometry")
      throw new Error("THREE.ObjectLoader: Can't load " + e);
    return await n.parseAsync(o);
  }
  parse(e, t) {
    const n = this.parseAnimations(e.animations), s = this.parseShapes(e.shapes), r = this.parseGeometries(e.geometries, s), a = this.parseImages(e.images, function() {
      t !== void 0 && t(l);
    }), o = this.parseTextures(e.textures, a), c = this.parseMaterials(e.materials, o), l = this.parseObject(e.object, r, c, o, n), h = this.parseSkeletons(e.skeletons, l);
    if (this.bindSkeletons(l, h), t !== void 0) {
      let d = !1;
      for (const u in a)
        if (a[u].data instanceof HTMLImageElement) {
          d = !0;
          break;
        }
      d === !1 && t(l);
    }
    return l;
  }
  async parseAsync(e) {
    const t = this.parseAnimations(e.animations), n = this.parseShapes(e.shapes), s = this.parseGeometries(e.geometries, n), r = await this.parseImagesAsync(e.images), a = this.parseTextures(e.textures, r), o = this.parseMaterials(e.materials, a), c = this.parseObject(e.object, s, o, a, t), l = this.parseSkeletons(e.skeletons, c);
    return this.bindSkeletons(c, l), c;
  }
  parseShapes(e) {
    const t = {};
    if (e !== void 0)
      for (let n = 0, s = e.length; n < s; n++) {
        const r = new Ni().fromJSON(e[n]);
        t[r.uuid] = r;
      }
    return t;
  }
  parseSkeletons(e, t) {
    const n = {}, s = {};
    if (t.traverse(function(r) {
      r.isBone && (s[r.uuid] = r);
    }), e !== void 0)
      for (let r = 0, a = e.length; r < a; r++) {
        const o = new o6().fromJSON(e[r], s);
        n[o.uuid] = o;
      }
    return n;
  }
  parseGeometries(e, t) {
    const n = {};
    if (e !== void 0) {
      const s = new lu();
      for (let r = 0, a = e.length; r < a; r++) {
        let o;
        const c = e[r];
        switch (c.type) {
          case "BufferGeometry":
          case "InstancedBufferGeometry":
            o = s.parse(c);
            break;
          default:
            c.type in Sa ? o = Sa[c.type].fromJSON(c, t) : console.warn(`THREE.ObjectLoader: Unsupported geometry type "${c.type}"`);
        }
        o.uuid = c.uuid, c.name !== void 0 && (o.name = c.name), c.userData !== void 0 && (o.userData = c.userData), n[c.uuid] = o;
      }
    }
    return n;
  }
  parseMaterials(e, t) {
    const n = {}, s = {};
    if (e !== void 0) {
      const r = new p6();
      r.setTextures(t);
      for (let a = 0, o = e.length; a < o; a++) {
        const c = e[a];
        n[c.uuid] === void 0 && (n[c.uuid] = r.parse(c)), s[c.uuid] = n[c.uuid];
      }
    }
    return s;
  }
  parseAnimations(e) {
    const t = {};
    if (e !== void 0)
      for (let n = 0; n < e.length; n++) {
        const s = e[n], r = vs.parse(s);
        t[r.uuid] = r;
      }
    return t;
  }
  parseImages(e, t) {
    const n = this, s = {};
    let r;
    function a(c) {
      return n.manager.itemStart(c), r.load(c, function() {
        n.manager.itemEnd(c);
      }, void 0, function() {
        n.manager.itemError(c), n.manager.itemEnd(c);
      });
    }
    function o(c) {
      if (typeof c == "string") {
        const l = c, h = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(l) ? l : n.resourcePath + l;
        return a(h);
      } else
        return c.data ? {
          data: D9(c.type, c.data),
          width: c.width,
          height: c.height
        } : null;
    }
    if (e !== void 0 && e.length > 0) {
      const c = new U2(t);
      r = new ys(c), r.setCrossOrigin(this.crossOrigin);
      for (let l = 0, h = e.length; l < h; l++) {
        const d = e[l], u = d.url;
        if (Array.isArray(u)) {
          const f = [];
          for (let p = 0, _ = u.length; p < _; p++) {
            const g = u[p], m = o(g);
            m !== null && (m instanceof HTMLImageElement ? f.push(m) : f.push(new k9(m.data, m.width, m.height)));
          }
          s[d.uuid] = new wi(f);
        } else {
          const f = o(d.url);
          s[d.uuid] = new wi(f);
        }
      }
    }
    return s;
  }
  async parseImagesAsync(e) {
    const t = this, n = {};
    let s;
    async function r(a) {
      if (typeof a == "string") {
        const o = a, c = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(o) ? o : t.resourcePath + o;
        return await s.loadAsync(c);
      } else
        return a.data ? {
          data: D9(a.type, a.data),
          width: a.width,
          height: a.height
        } : null;
    }
    if (e !== void 0 && e.length > 0) {
      s = new ys(this.manager), s.setCrossOrigin(this.crossOrigin);
      for (let a = 0, o = e.length; a < o; a++) {
        const c = e[a], l = c.url;
        if (Array.isArray(l)) {
          const h = [];
          for (let d = 0, u = l.length; d < u; d++) {
            const f = l[d], p = await r(f);
            p !== null && (p instanceof HTMLImageElement ? h.push(p) : h.push(new k9(p.data, p.width, p.height)));
          }
          n[c.uuid] = new wi(h);
        } else {
          const h = await r(c.url);
          n[c.uuid] = new wi(h);
        }
      }
    }
    return n;
  }
  parseTextures(e, t) {
    function n(r, a) {
      return typeof r == "number" ? r : (console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", r), a[r]);
    }
    const s = {};
    if (e !== void 0)
      for (let r = 0, a = e.length; r < a; r++) {
        const o = e[r];
        o.image === void 0 && console.warn('THREE.ObjectLoader: No "image" specified for', o.uuid), t[o.image] === void 0 && console.warn("THREE.ObjectLoader: Undefined image", o.image);
        const c = t[o.image], l = c.data;
        let h;
        Array.isArray(l) ? (h = new Ps(), l.length === 6 && (h.needsUpdate = !0)) : (l && l.data ? h = new k9() : h = new Be(), l && (h.needsUpdate = !0)), h.source = c, h.uuid = o.uuid, o.name !== void 0 && (h.name = o.name), o.mapping !== void 0 && (h.mapping = n(o.mapping, Gb)), o.channel !== void 0 && (h.channel = o.channel), o.offset !== void 0 && h.offset.fromArray(o.offset), o.repeat !== void 0 && h.repeat.fromArray(o.repeat), o.center !== void 0 && h.center.fromArray(o.center), o.rotation !== void 0 && (h.rotation = o.rotation), o.wrap !== void 0 && (h.wrapS = n(o.wrap[0], Ca), h.wrapT = n(o.wrap[1], Ca)), o.format !== void 0 && (h.format = o.format), o.internalFormat !== void 0 && (h.internalFormat = o.internalFormat), o.type !== void 0 && (h.type = o.type), o.encoding !== void 0 && (h.encoding = o.encoding), o.minFilter !== void 0 && (h.minFilter = n(o.minFilter, Ia)), o.magFilter !== void 0 && (h.magFilter = n(o.magFilter, Ia)), o.anisotropy !== void 0 && (h.anisotropy = o.anisotropy), o.flipY !== void 0 && (h.flipY = o.flipY), o.generateMipmaps !== void 0 && (h.generateMipmaps = o.generateMipmaps), o.premultiplyAlpha !== void 0 && (h.premultiplyAlpha = o.premultiplyAlpha), o.unpackAlignment !== void 0 && (h.unpackAlignment = o.unpackAlignment), o.userData !== void 0 && (h.userData = o.userData), s[o.uuid] = h;
      }
    return s;
  }
  parseObject(e, t, n, s, r) {
    let a;
    function o(u) {
      return t[u] === void 0 && console.warn("THREE.ObjectLoader: Undefined geometry", u), t[u];
    }
    function c(u) {
      if (u !== void 0) {
        if (Array.isArray(u)) {
          const f = [];
          for (let p = 0, _ = u.length; p < _; p++) {
            const g = u[p];
            n[g] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", g), f.push(n[g]);
          }
          return f;
        }
        return n[u] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", u), n[u];
      }
    }
    function l(u) {
      return s[u] === void 0 && console.warn("THREE.ObjectLoader: Undefined texture", u), s[u];
    }
    let h, d;
    switch (e.type) {
      case "Scene":
        a = new x2(), e.background !== void 0 && (Number.isInteger(e.background) ? a.background = new f0(e.background) : a.background = l(e.background)), e.environment !== void 0 && (a.environment = l(e.environment)), e.fog !== void 0 && (e.fog.type === "Fog" ? a.fog = new a6(e.fog.color, e.fog.near, e.fog.far) : e.fog.type === "FogExp2" && (a.fog = new r6(e.fog.color, e.fog.density))), e.backgroundBlurriness !== void 0 && (a.backgroundBlurriness = e.backgroundBlurriness), e.backgroundIntensity !== void 0 && (a.backgroundIntensity = e.backgroundIntensity);
        break;
      case "PerspectiveCamera":
        a = new Qe(e.fov, e.aspect, e.near, e.far), e.focus !== void 0 && (a.focus = e.focus), e.zoom !== void 0 && (a.zoom = e.zoom), e.filmGauge !== void 0 && (a.filmGauge = e.filmGauge), e.filmOffset !== void 0 && (a.filmOffset = e.filmOffset), e.view !== void 0 && (a.view = Object.assign({}, e.view));
        break;
      case "OrthographicCamera":
        a = new i6(e.left, e.right, e.top, e.bottom, e.near, e.far), e.zoom !== void 0 && (a.zoom = e.zoom), e.view !== void 0 && (a.view = Object.assign({}, e.view));
        break;
      case "AmbientLight":
        a = new B2(e.color, e.intensity);
        break;
      case "DirectionalLight":
        a = new k2(e.color, e.intensity);
        break;
      case "PointLight":
        a = new z2(e.color, e.intensity, e.distance, e.decay);
        break;
      case "RectAreaLight":
        a = new ru(e.color, e.intensity, e.width, e.height);
        break;
      case "SpotLight":
        a = new su(e.color, e.intensity, e.distance, e.angle, e.penumbra, e.decay);
        break;
      case "HemisphereLight":
        a = new iu(e.color, e.groundColor, e.intensity);
        break;
      case "LightProbe":
        a = new f6().fromJSON(e);
        break;
      case "SkinnedMesh":
        h = o(e.geometry), d = c(e.material), a = new Dh(h, d), e.bindMode !== void 0 && (a.bindMode = e.bindMode), e.bindMatrix !== void 0 && a.bindMatrix.fromArray(e.bindMatrix), e.skeleton !== void 0 && (a.skeleton = e.skeleton);
        break;
      case "Mesh":
        h = o(e.geometry), d = c(e.material), a = new y0(h, d);
        break;
      case "InstancedMesh":
        h = o(e.geometry), d = c(e.material);
        const u = e.count, f = e.instanceMatrix, p = e.instanceColor;
        a = new Nh(h, d, u), a.instanceMatrix = new K9(new Float32Array(f.array), 16), p !== void 0 && (a.instanceColor = new K9(new Float32Array(p.array), p.itemSize));
        break;
      case "LOD":
        a = new Ph();
        break;
      case "Line":
        a = new W0(o(e.geometry), c(e.material));
        break;
      case "LineLoop":
        a = new Oh(o(e.geometry), c(e.material));
        break;
      case "LineSegments":
        a = new xt(o(e.geometry), c(e.material));
        break;
      case "PointCloud":
      case "Points":
        a = new V8(o(e.geometry), c(e.material));
        break;
      case "Sprite":
        a = new Rh(c(e.material));
        break;
      case "Group":
        a = new Mi();
        break;
      case "Bone":
        a = new w2();
        break;
      default:
        a = new G0();
    }
    if (a.uuid = e.uuid, e.name !== void 0 && (a.name = e.name), e.matrix !== void 0 ? (a.matrix.fromArray(e.matrix), e.matrixAutoUpdate !== void 0 && (a.matrixAutoUpdate = e.matrixAutoUpdate), a.matrixAutoUpdate && a.matrix.decompose(a.position, a.quaternion, a.scale)) : (e.position !== void 0 && a.position.fromArray(e.position), e.rotation !== void 0 && a.rotation.fromArray(e.rotation), e.quaternion !== void 0 && a.quaternion.fromArray(e.quaternion), e.scale !== void 0 && a.scale.fromArray(e.scale)), e.up !== void 0 && a.up.fromArray(e.up), e.castShadow !== void 0 && (a.castShadow = e.castShadow), e.receiveShadow !== void 0 && (a.receiveShadow = e.receiveShadow), e.shadow && (e.shadow.bias !== void 0 && (a.shadow.bias = e.shadow.bias), e.shadow.normalBias !== void 0 && (a.shadow.normalBias = e.shadow.normalBias), e.shadow.radius !== void 0 && (a.shadow.radius = e.shadow.radius), e.shadow.mapSize !== void 0 && a.shadow.mapSize.fromArray(e.shadow.mapSize), e.shadow.camera !== void 0 && (a.shadow.camera = this.parseObject(e.shadow.camera))), e.visible !== void 0 && (a.visible = e.visible), e.frustumCulled !== void 0 && (a.frustumCulled = e.frustumCulled), e.renderOrder !== void 0 && (a.renderOrder = e.renderOrder), e.userData !== void 0 && (a.userData = e.userData), e.layers !== void 0 && (a.layers.mask = e.layers), e.children !== void 0) {
      const u = e.children;
      for (let f = 0; f < u.length; f++)
        a.add(this.parseObject(u[f], t, n, s, r));
    }
    if (e.animations !== void 0) {
      const u = e.animations;
      for (let f = 0; f < u.length; f++) {
        const p = u[f];
        a.animations.push(r[p]);
      }
    }
    if (e.type === "LOD") {
      e.autoUpdate !== void 0 && (a.autoUpdate = e.autoUpdate);
      const u = e.levels;
      for (let f = 0; f < u.length; f++) {
        const p = u[f], _ = a.getObjectByProperty("uuid", p.object);
        _ !== void 0 && a.addLevel(_, p.distance, p.hysteresis);
      }
    }
    return a;
  }
  bindSkeletons(e, t) {
    Object.keys(t).length !== 0 && e.traverse(function(n) {
      if (n.isSkinnedMesh === !0 && n.skeleton !== void 0) {
        const s = t[n.skeleton];
        s === void 0 ? console.warn("THREE.ObjectLoader: No skeleton found with UUID:", n.skeleton) : n.bind(s, n.bindMatrix);
      }
    });
  }
}
const Gb = {
  UVMapping: jr,
  CubeReflectionMapping: Yn,
  CubeRefractionMapping: Zn,
  EquirectangularReflectionMapping: is,
  EquirectangularRefractionMapping: ss,
  CubeUVReflectionMapping: e8
}, Ca = {
  RepeatWrapping: rs,
  ClampToEdgeWrapping: ht,
  MirroredRepeatWrapping: as
}, Ia = {
  NearestFilter: ke,
  NearestMipmapNearestFilter: Nr,
  NearestMipmapLinearFilter: k8,
  LinearFilter: Pe,
  LinearMipmapNearestFilter: a2,
  LinearMipmapLinearFilter: qn
};
class Wb extends Ct {
  constructor(e) {
    super(e), this.isImageBitmapLoader = !0, typeof createImageBitmap > "u" && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."), typeof fetch > "u" && console.warn("THREE.ImageBitmapLoader: fetch() not supported."), this.options = { premultiplyAlpha: "none" };
  }
  setOptions(e) {
    return this.options = e, this;
  }
  load(e, t, n, s) {
    e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
    const r = this, a = Fi.get(e);
    if (a !== void 0)
      return r.manager.itemStart(e), setTimeout(function() {
        t && t(a), r.manager.itemEnd(e);
      }, 0), a;
    const o = {};
    o.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include", o.headers = this.requestHeader, fetch(e, o).then(function(c) {
      return c.blob();
    }).then(function(c) {
      return createImageBitmap(c, Object.assign(r.options, { colorSpaceConversion: "none" }));
    }).then(function(c) {
      Fi.add(e, c), t && t(c), r.manager.itemEnd(e);
    }).catch(function(c) {
      s && s(c), r.manager.itemError(e), r.manager.itemEnd(e);
    }), r.manager.itemStart(e);
  }
}
let F7;
class V2 {
  static getContext() {
    return F7 === void 0 && (F7 = new (window.AudioContext || window.webkitAudioContext)()), F7;
  }
  static setContext(e) {
    F7 = e;
  }
}
class Xb extends Ct {
  constructor(e) {
    super(e);
  }
  load(e, t, n, s) {
    const r = this, a = new U1(this.manager);
    a.setResponseType("arraybuffer"), a.setPath(this.path), a.setRequestHeader(this.requestHeader), a.setWithCredentials(this.withCredentials), a.load(e, function(o) {
      try {
        const c = o.slice(0);
        V2.getContext().decodeAudioData(c, function(h) {
          t(h);
        });
      } catch (c) {
        s ? s(c) : console.error(c), r.manager.itemError(e);
      }
    }, n, s);
  }
}
class Yb extends f6 {
  constructor(e, t, n = 1) {
    super(void 0, n), this.isHemisphereLightProbe = !0;
    const s = new f0().set(e), r = new f0().set(t), a = new C(s.r, s.g, s.b), o = new C(r.r, r.g, r.b), c = Math.sqrt(Math.PI), l = c * Math.sqrt(0.75);
    this.sh.coefficients[0].copy(a).add(o).multiplyScalar(c), this.sh.coefficients[1].copy(a).sub(o).multiplyScalar(l);
  }
}
class Zb extends f6 {
  constructor(e, t = 1) {
    super(void 0, t), this.isAmbientLightProbe = !0;
    const n = new f0().set(e);
    this.sh.coefficients[0].set(n.r, n.g, n.b).multiplyScalar(2 * Math.sqrt(Math.PI));
  }
}
const La = /* @__PURE__ */ new k0(), Ra = /* @__PURE__ */ new k0(), oi = /* @__PURE__ */ new k0();
class qb {
  constructor() {
    this.type = "StereoCamera", this.aspect = 1, this.eyeSep = 0.064, this.cameraL = new Qe(), this.cameraL.layers.enable(1), this.cameraL.matrixAutoUpdate = !1, this.cameraR = new Qe(), this.cameraR.layers.enable(2), this.cameraR.matrixAutoUpdate = !1, this._cache = {
      focus: null,
      fov: null,
      aspect: null,
      near: null,
      far: null,
      zoom: null,
      eyeSep: null
    };
  }
  update(e) {
    const t = this._cache;
    if (t.focus !== e.focus || t.fov !== e.fov || t.aspect !== e.aspect * this.aspect || t.near !== e.near || t.far !== e.far || t.zoom !== e.zoom || t.eyeSep !== this.eyeSep) {
      t.focus = e.focus, t.fov = e.fov, t.aspect = e.aspect * this.aspect, t.near = e.near, t.far = e.far, t.zoom = e.zoom, t.eyeSep = this.eyeSep, oi.copy(e.projectionMatrix);
      const s = t.eyeSep / 2, r = s * t.near / t.focus, a = t.near * Math.tan(Di * t.fov * 0.5) / t.zoom;
      let o, c;
      Ra.elements[12] = -s, La.elements[12] = s, o = -a * t.aspect + r, c = a * t.aspect + r, oi.elements[0] = 2 * t.near / (c - o), oi.elements[8] = (c + o) / (c - o), this.cameraL.projectionMatrix.copy(oi), o = -a * t.aspect - r, c = a * t.aspect - r, oi.elements[0] = 2 * t.near / (c - o), oi.elements[8] = (c + o) / (c - o), this.cameraR.projectionMatrix.copy(oi);
    }
    this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(Ra), this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(La);
  }
}
class H2 {
  constructor(e = !0) {
    this.autoStart = e, this.startTime = 0, this.oldTime = 0, this.elapsedTime = 0, this.running = !1;
  }
  start() {
    this.startTime = Pa(), this.oldTime = this.startTime, this.elapsedTime = 0, this.running = !0;
  }
  stop() {
    this.getElapsedTime(), this.running = !1, this.autoStart = !1;
  }
  getElapsedTime() {
    return this.getDelta(), this.elapsedTime;
  }
  getDelta() {
    let e = 0;
    if (this.autoStart && !this.running)
      return this.start(), 0;
    if (this.running) {
      const t = Pa();
      e = (t - this.oldTime) / 1e3, this.oldTime = t, this.elapsedTime += e;
    }
    return e;
  }
}
function Pa() {
  return (typeof performance > "u" ? Date : performance).now();
}
const li = /* @__PURE__ */ new C(), Da = /* @__PURE__ */ new Ee(), $b = /* @__PURE__ */ new C(), ci = /* @__PURE__ */ new C();
class jb extends G0 {
  constructor() {
    super(), this.type = "AudioListener", this.context = V2.getContext(), this.gain = this.context.createGain(), this.gain.connect(this.context.destination), this.filter = null, this.timeDelta = 0, this._clock = new H2();
  }
  getInput() {
    return this.gain;
  }
  removeFilter() {
    return this.filter !== null && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null), this;
  }
  getFilter() {
    return this.filter;
  }
  setFilter(e) {
    return this.filter !== null ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination), this.filter = e, this.gain.connect(this.filter), this.filter.connect(this.context.destination), this;
  }
  getMasterVolume() {
    return this.gain.gain.value;
  }
  setMasterVolume(e) {
    return this.gain.gain.setTargetAtTime(e, this.context.currentTime, 0.01), this;
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e);
    const t = this.context.listener, n = this.up;
    if (this.timeDelta = this._clock.getDelta(), this.matrixWorld.decompose(li, Da, $b), ci.set(0, 0, -1).applyQuaternion(Da), t.positionX) {
      const s = this.context.currentTime + this.timeDelta;
      t.positionX.linearRampToValueAtTime(li.x, s), t.positionY.linearRampToValueAtTime(li.y, s), t.positionZ.linearRampToValueAtTime(li.z, s), t.forwardX.linearRampToValueAtTime(ci.x, s), t.forwardY.linearRampToValueAtTime(ci.y, s), t.forwardZ.linearRampToValueAtTime(ci.z, s), t.upX.linearRampToValueAtTime(n.x, s), t.upY.linearRampToValueAtTime(n.y, s), t.upZ.linearRampToValueAtTime(n.z, s);
    } else
      t.setPosition(li.x, li.y, li.z), t.setOrientation(ci.x, ci.y, ci.z, n.x, n.y, n.z);
  }
}
class cu extends G0 {
  constructor(e) {
    super(), this.type = "Audio", this.listener = e, this.context = e.context, this.gain = this.context.createGain(), this.gain.connect(e.getInput()), this.autoplay = !1, this.buffer = null, this.detune = 0, this.loop = !1, this.loopStart = 0, this.loopEnd = 0, this.offset = 0, this.duration = void 0, this.playbackRate = 1, this.isPlaying = !1, this.hasPlaybackControl = !0, this.source = null, this.sourceType = "empty", this._startedAt = 0, this._progress = 0, this._connected = !1, this.filters = [];
  }
  getOutput() {
    return this.gain;
  }
  setNodeSource(e) {
    return this.hasPlaybackControl = !1, this.sourceType = "audioNode", this.source = e, this.connect(), this;
  }
  setMediaElementSource(e) {
    return this.hasPlaybackControl = !1, this.sourceType = "mediaNode", this.source = this.context.createMediaElementSource(e), this.connect(), this;
  }
  setMediaStreamSource(e) {
    return this.hasPlaybackControl = !1, this.sourceType = "mediaStreamNode", this.source = this.context.createMediaStreamSource(e), this.connect(), this;
  }
  setBuffer(e) {
    return this.buffer = e, this.sourceType = "buffer", this.autoplay && this.play(), this;
  }
  play(e = 0) {
    if (this.isPlaying === !0) {
      console.warn("THREE.Audio: Audio is already playing.");
      return;
    }
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    this._startedAt = this.context.currentTime + e;
    const t = this.context.createBufferSource();
    return t.buffer = this.buffer, t.loop = this.loop, t.loopStart = this.loopStart, t.loopEnd = this.loopEnd, t.onended = this.onEnded.bind(this), t.start(this._startedAt, this._progress + this.offset, this.duration), this.isPlaying = !0, this.source = t, this.setDetune(this.detune), this.setPlaybackRate(this.playbackRate), this.connect();
  }
  pause() {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.isPlaying === !0 && (this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate, this.loop === !0 && (this._progress = this._progress % (this.duration || this.buffer.duration)), this.source.stop(), this.source.onended = null, this.isPlaying = !1), this;
  }
  stop() {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this._progress = 0, this.source !== null && (this.source.stop(), this.source.onended = null), this.isPlaying = !1, this;
  }
  connect() {
    if (this.filters.length > 0) {
      this.source.connect(this.filters[0]);
      for (let e = 1, t = this.filters.length; e < t; e++)
        this.filters[e - 1].connect(this.filters[e]);
      this.filters[this.filters.length - 1].connect(this.getOutput());
    } else
      this.source.connect(this.getOutput());
    return this._connected = !0, this;
  }
  disconnect() {
    if (this.filters.length > 0) {
      this.source.disconnect(this.filters[0]);
      for (let e = 1, t = this.filters.length; e < t; e++)
        this.filters[e - 1].disconnect(this.filters[e]);
      this.filters[this.filters.length - 1].disconnect(this.getOutput());
    } else
      this.source.disconnect(this.getOutput());
    return this._connected = !1, this;
  }
  getFilters() {
    return this.filters;
  }
  setFilters(e) {
    return e || (e = []), this._connected === !0 ? (this.disconnect(), this.filters = e.slice(), this.connect()) : this.filters = e.slice(), this;
  }
  setDetune(e) {
    if (this.detune = e, this.source.detune !== void 0)
      return this.isPlaying === !0 && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01), this;
  }
  getDetune() {
    return this.detune;
  }
  getFilter() {
    return this.getFilters()[0];
  }
  setFilter(e) {
    return this.setFilters(e ? [e] : []);
  }
  setPlaybackRate(e) {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.playbackRate = e, this.isPlaying === !0 && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01), this;
  }
  getPlaybackRate() {
    return this.playbackRate;
  }
  onEnded() {
    this.isPlaying = !1;
  }
  getLoop() {
    return this.hasPlaybackControl === !1 ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop;
  }
  setLoop(e) {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.loop = e, this.isPlaying === !0 && (this.source.loop = this.loop), this;
  }
  setLoopStart(e) {
    return this.loopStart = e, this;
  }
  setLoopEnd(e) {
    return this.loopEnd = e, this;
  }
  getVolume() {
    return this.gain.gain.value;
  }
  setVolume(e) {
    return this.gain.gain.setTargetAtTime(e, this.context.currentTime, 0.01), this;
  }
}
const hi = /* @__PURE__ */ new C(), Na = /* @__PURE__ */ new Ee(), Jb = /* @__PURE__ */ new C(), ui = /* @__PURE__ */ new C();
class Kb extends cu {
  constructor(e) {
    super(e), this.panner = this.context.createPanner(), this.panner.panningModel = "HRTF", this.panner.connect(this.gain);
  }
  disconnect() {
    super.disconnect(), this.panner.disconnect(this.gain);
  }
  getOutput() {
    return this.panner;
  }
  getRefDistance() {
    return this.panner.refDistance;
  }
  setRefDistance(e) {
    return this.panner.refDistance = e, this;
  }
  getRolloffFactor() {
    return this.panner.rolloffFactor;
  }
  setRolloffFactor(e) {
    return this.panner.rolloffFactor = e, this;
  }
  getDistanceModel() {
    return this.panner.distanceModel;
  }
  setDistanceModel(e) {
    return this.panner.distanceModel = e, this;
  }
  getMaxDistance() {
    return this.panner.maxDistance;
  }
  setMaxDistance(e) {
    return this.panner.maxDistance = e, this;
  }
  setDirectionalCone(e, t, n) {
    return this.panner.coneInnerAngle = e, this.panner.coneOuterAngle = t, this.panner.coneOuterGain = n, this;
  }
  updateMatrixWorld(e) {
    if (super.updateMatrixWorld(e), this.hasPlaybackControl === !0 && this.isPlaying === !1)
      return;
    this.matrixWorld.decompose(hi, Na, Jb), ui.set(0, 0, 1).applyQuaternion(Na);
    const t = this.panner;
    if (t.positionX) {
      const n = this.context.currentTime + this.listener.timeDelta;
      t.positionX.linearRampToValueAtTime(hi.x, n), t.positionY.linearRampToValueAtTime(hi.y, n), t.positionZ.linearRampToValueAtTime(hi.z, n), t.orientationX.linearRampToValueAtTime(ui.x, n), t.orientationY.linearRampToValueAtTime(ui.y, n), t.orientationZ.linearRampToValueAtTime(ui.z, n);
    } else
      t.setPosition(hi.x, hi.y, hi.z), t.setOrientation(ui.x, ui.y, ui.z);
  }
}
class Qb {
  constructor(e, t = 2048) {
    this.analyser = e.context.createAnalyser(), this.analyser.fftSize = t, this.data = new Uint8Array(this.analyser.frequencyBinCount), e.getOutput().connect(this.analyser);
  }
  getFrequencyData() {
    return this.analyser.getByteFrequencyData(this.data), this.data;
  }
  getAverageFrequency() {
    let e = 0;
    const t = this.getFrequencyData();
    for (let n = 0; n < t.length; n++)
      e += t[n];
    return e / t.length;
  }
}
class hu {
  constructor(e, t, n) {
    this.binding = e, this.valueSize = n;
    let s, r, a;
    switch (t) {
      case "quaternion":
        s = this._slerp, r = this._slerpAdditive, a = this._setAdditiveIdentityQuaternion, this.buffer = new Float64Array(n * 6), this._workIndex = 5;
        break;
      case "string":
      case "bool":
        s = this._select, r = this._select, a = this._setAdditiveIdentityOther, this.buffer = new Array(n * 5);
        break;
      default:
        s = this._lerp, r = this._lerpAdditive, a = this._setAdditiveIdentityNumeric, this.buffer = new Float64Array(n * 5);
    }
    this._mixBufferRegion = s, this._mixBufferRegionAdditive = r, this._setIdentity = a, this._origIndex = 3, this._addIndex = 4, this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, this.useCount = 0, this.referenceCount = 0;
  }
  // accumulate data in the 'incoming' region into 'accu<i>'
  accumulate(e, t) {
    const n = this.buffer, s = this.valueSize, r = e * s + s;
    let a = this.cumulativeWeight;
    if (a === 0) {
      for (let o = 0; o !== s; ++o)
        n[r + o] = n[o];
      a = t;
    } else {
      a += t;
      const o = t / a;
      this._mixBufferRegion(n, r, 0, o, s);
    }
    this.cumulativeWeight = a;
  }
  // accumulate data in the 'incoming' region into 'add'
  accumulateAdditive(e) {
    const t = this.buffer, n = this.valueSize, s = n * this._addIndex;
    this.cumulativeWeightAdditive === 0 && this._setIdentity(), this._mixBufferRegionAdditive(t, s, 0, e, n), this.cumulativeWeightAdditive += e;
  }
  // apply the state of 'accu<i>' to the binding when accus differ
  apply(e) {
    const t = this.valueSize, n = this.buffer, s = e * t + t, r = this.cumulativeWeight, a = this.cumulativeWeightAdditive, o = this.binding;
    if (this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, r < 1) {
      const c = t * this._origIndex;
      this._mixBufferRegion(
        n,
        s,
        c,
        1 - r,
        t
      );
    }
    a > 0 && this._mixBufferRegionAdditive(n, s, this._addIndex * t, 1, t);
    for (let c = t, l = t + t; c !== l; ++c)
      if (n[c] !== n[c + t]) {
        o.setValue(n, s);
        break;
      }
  }
  // remember the state of the bound property and copy it to both accus
  saveOriginalState() {
    const e = this.binding, t = this.buffer, n = this.valueSize, s = n * this._origIndex;
    e.getValue(t, s);
    for (let r = n, a = s; r !== a; ++r)
      t[r] = t[s + r % n];
    this._setIdentity(), this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0;
  }
  // apply the state previously taken via 'saveOriginalState' to the binding
  restoreOriginalState() {
    const e = this.valueSize * 3;
    this.binding.setValue(this.buffer, e);
  }
  _setAdditiveIdentityNumeric() {
    const e = this._addIndex * this.valueSize, t = e + this.valueSize;
    for (let n = e; n < t; n++)
      this.buffer[n] = 0;
  }
  _setAdditiveIdentityQuaternion() {
    this._setAdditiveIdentityNumeric(), this.buffer[this._addIndex * this.valueSize + 3] = 1;
  }
  _setAdditiveIdentityOther() {
    const e = this._origIndex * this.valueSize, t = this._addIndex * this.valueSize;
    for (let n = 0; n < this.valueSize; n++)
      this.buffer[t + n] = this.buffer[e + n];
  }
  // mix functions
  _select(e, t, n, s, r) {
    if (s >= 0.5)
      for (let a = 0; a !== r; ++a)
        e[t + a] = e[n + a];
  }
  _slerp(e, t, n, s) {
    Ee.slerpFlat(e, t, e, t, e, n, s);
  }
  _slerpAdditive(e, t, n, s, r) {
    const a = this._workIndex * r;
    Ee.multiplyQuaternionsFlat(e, a, e, t, e, n), Ee.slerpFlat(e, t, e, t, e, a, s);
  }
  _lerp(e, t, n, s, r) {
    const a = 1 - s;
    for (let o = 0; o !== r; ++o) {
      const c = t + o;
      e[c] = e[c] * a + e[n + o] * s;
    }
  }
  _lerpAdditive(e, t, n, s, r) {
    for (let a = 0; a !== r; ++a) {
      const o = t + a;
      e[o] = e[o] + e[n + a] * s;
    }
  }
}
const G2 = "\\[\\]\\.:\\/", ew = new RegExp("[" + G2 + "]", "g"), W2 = "[^" + G2 + "]", tw = "[^" + G2.replace("\\.", "") + "]", nw = /* @__PURE__ */ /((?:WC+[\/:])*)/.source.replace("WC", W2), iw = /* @__PURE__ */ /(WCOD+)?/.source.replace("WCOD", tw), sw = /* @__PURE__ */ /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", W2), rw = /* @__PURE__ */ /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", W2), aw = new RegExp(
  "^" + nw + iw + sw + rw + "$"
), ow = ["material", "materials", "bones", "map"];
class lw {
  constructor(e, t, n) {
    const s = n || le.parseTrackName(t);
    this._targetGroup = e, this._bindings = e.subscribe_(t, s);
  }
  getValue(e, t) {
    this.bind();
    const n = this._targetGroup.nCachedObjects_, s = this._bindings[n];
    s !== void 0 && s.getValue(e, t);
  }
  setValue(e, t) {
    const n = this._bindings;
    for (let s = this._targetGroup.nCachedObjects_, r = n.length; s !== r; ++s)
      n[s].setValue(e, t);
  }
  bind() {
    const e = this._bindings;
    for (let t = this._targetGroup.nCachedObjects_, n = e.length; t !== n; ++t)
      e[t].bind();
  }
  unbind() {
    const e = this._bindings;
    for (let t = this._targetGroup.nCachedObjects_, n = e.length; t !== n; ++t)
      e[t].unbind();
  }
}
class le {
  constructor(e, t, n) {
    this.path = t, this.parsedPath = n || le.parseTrackName(t), this.node = le.findNode(e, this.parsedPath.nodeName), this.rootNode = e, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
  }
  static create(e, t, n) {
    return e && e.isAnimationObjectGroup ? new le.Composite(e, t, n) : new le(e, t, n);
  }
  /**
   * Replaces spaces with underscores and removes unsupported characters from
   * node names, to ensure compatibility with parseTrackName().
   *
   * @param {string} name Node name to be sanitized.
   * @return {string}
   */
  static sanitizeNodeName(e) {
    return e.replace(/\s/g, "_").replace(ew, "");
  }
  static parseTrackName(e) {
    const t = aw.exec(e);
    if (t === null)
      throw new Error("PropertyBinding: Cannot parse trackName: " + e);
    const n = {
      // directoryName: matches[ 1 ], // (tschw) currently unused
      nodeName: t[2],
      objectName: t[3],
      objectIndex: t[4],
      propertyName: t[5],
      // required
      propertyIndex: t[6]
    }, s = n.nodeName && n.nodeName.lastIndexOf(".");
    if (s !== void 0 && s !== -1) {
      const r = n.nodeName.substring(s + 1);
      ow.indexOf(r) !== -1 && (n.nodeName = n.nodeName.substring(0, s), n.objectName = r);
    }
    if (n.propertyName === null || n.propertyName.length === 0)
      throw new Error("PropertyBinding: can not parse propertyName from trackName: " + e);
    return n;
  }
  static findNode(e, t) {
    if (t === void 0 || t === "" || t === "." || t === -1 || t === e.name || t === e.uuid)
      return e;
    if (e.skeleton) {
      const n = e.skeleton.getBoneByName(t);
      if (n !== void 0)
        return n;
    }
    if (e.children) {
      const n = function(r) {
        for (let a = 0; a < r.length; a++) {
          const o = r[a];
          if (o.name === t || o.uuid === t)
            return o;
          const c = n(o.children);
          if (c)
            return c;
        }
        return null;
      }, s = n(e.children);
      if (s)
        return s;
    }
    return null;
  }
  // these are used to "bind" a nonexistent property
  _getValue_unavailable() {
  }
  _setValue_unavailable() {
  }
  // Getters
  _getValue_direct(e, t) {
    e[t] = this.targetObject[this.propertyName];
  }
  _getValue_array(e, t) {
    const n = this.resolvedProperty;
    for (let s = 0, r = n.length; s !== r; ++s)
      e[t++] = n[s];
  }
  _getValue_arrayElement(e, t) {
    e[t] = this.resolvedProperty[this.propertyIndex];
  }
  _getValue_toArray(e, t) {
    this.resolvedProperty.toArray(e, t);
  }
  // Direct
  _setValue_direct(e, t) {
    this.targetObject[this.propertyName] = e[t];
  }
  _setValue_direct_setNeedsUpdate(e, t) {
    this.targetObject[this.propertyName] = e[t], this.targetObject.needsUpdate = !0;
  }
  _setValue_direct_setMatrixWorldNeedsUpdate(e, t) {
    this.targetObject[this.propertyName] = e[t], this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // EntireArray
  _setValue_array(e, t) {
    const n = this.resolvedProperty;
    for (let s = 0, r = n.length; s !== r; ++s)
      n[s] = e[t++];
  }
  _setValue_array_setNeedsUpdate(e, t) {
    const n = this.resolvedProperty;
    for (let s = 0, r = n.length; s !== r; ++s)
      n[s] = e[t++];
    this.targetObject.needsUpdate = !0;
  }
  _setValue_array_setMatrixWorldNeedsUpdate(e, t) {
    const n = this.resolvedProperty;
    for (let s = 0, r = n.length; s !== r; ++s)
      n[s] = e[t++];
    this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // ArrayElement
  _setValue_arrayElement(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t];
  }
  _setValue_arrayElement_setNeedsUpdate(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.needsUpdate = !0;
  }
  _setValue_arrayElement_setMatrixWorldNeedsUpdate(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // HasToFromArray
  _setValue_fromArray(e, t) {
    this.resolvedProperty.fromArray(e, t);
  }
  _setValue_fromArray_setNeedsUpdate(e, t) {
    this.resolvedProperty.fromArray(e, t), this.targetObject.needsUpdate = !0;
  }
  _setValue_fromArray_setMatrixWorldNeedsUpdate(e, t) {
    this.resolvedProperty.fromArray(e, t), this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  _getValue_unbound(e, t) {
    this.bind(), this.getValue(e, t);
  }
  _setValue_unbound(e, t) {
    this.bind(), this.setValue(e, t);
  }
  // create getter / setter pair for a property in the scene graph
  bind() {
    let e = this.node;
    const t = this.parsedPath, n = t.objectName, s = t.propertyName;
    let r = t.propertyIndex;
    if (e || (e = le.findNode(this.rootNode, t.nodeName), this.node = e), this.getValue = this._getValue_unavailable, this.setValue = this._setValue_unavailable, !e) {
      console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");
      return;
    }
    if (n) {
      let l = t.objectIndex;
      switch (n) {
        case "materials":
          if (!e.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!e.material.materials) {
            console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
            return;
          }
          e = e.material.materials;
          break;
        case "bones":
          if (!e.skeleton) {
            console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
            return;
          }
          e = e.skeleton.bones;
          for (let h = 0; h < e.length; h++)
            if (e[h].name === l) {
              l = h;
              break;
            }
          break;
        case "map":
          if ("map" in e) {
            e = e.map;
            break;
          }
          if (!e.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!e.material.map) {
            console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
            return;
          }
          e = e.material.map;
          break;
        default:
          if (e[n] === void 0) {
            console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
            return;
          }
          e = e[n];
      }
      if (l !== void 0) {
        if (e[l] === void 0) {
          console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, e);
          return;
        }
        e = e[l];
      }
    }
    const a = e[s];
    if (a === void 0) {
      const l = t.nodeName;
      console.error("THREE.PropertyBinding: Trying to update property for track: " + l + "." + s + " but it wasn't found.", e);
      return;
    }
    let o = this.Versioning.None;
    this.targetObject = e, e.needsUpdate !== void 0 ? o = this.Versioning.NeedsUpdate : e.matrixWorldNeedsUpdate !== void 0 && (o = this.Versioning.MatrixWorldNeedsUpdate);
    let c = this.BindingType.Direct;
    if (r !== void 0) {
      if (s === "morphTargetInfluences") {
        if (!e.geometry) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
          return;
        }
        if (!e.geometry.morphAttributes) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
          return;
        }
        e.morphTargetDictionary[r] !== void 0 && (r = e.morphTargetDictionary[r]);
      }
      c = this.BindingType.ArrayElement, this.resolvedProperty = a, this.propertyIndex = r;
    } else
      a.fromArray !== void 0 && a.toArray !== void 0 ? (c = this.BindingType.HasFromToArray, this.resolvedProperty = a) : Array.isArray(a) ? (c = this.BindingType.EntireArray, this.resolvedProperty = a) : this.propertyName = s;
    this.getValue = this.GetterByBindingType[c], this.setValue = this.SetterByBindingTypeAndVersioning[c][o];
  }
  unbind() {
    this.node = null, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
  }
}
le.Composite = lw;
le.prototype.BindingType = {
  Direct: 0,
  EntireArray: 1,
  ArrayElement: 2,
  HasFromToArray: 3
};
le.prototype.Versioning = {
  None: 0,
  NeedsUpdate: 1,
  MatrixWorldNeedsUpdate: 2
};
le.prototype.GetterByBindingType = [
  le.prototype._getValue_direct,
  le.prototype._getValue_array,
  le.prototype._getValue_arrayElement,
  le.prototype._getValue_toArray
];
le.prototype.SetterByBindingTypeAndVersioning = [
  [
    // Direct
    le.prototype._setValue_direct,
    le.prototype._setValue_direct_setNeedsUpdate,
    le.prototype._setValue_direct_setMatrixWorldNeedsUpdate
  ],
  [
    // EntireArray
    le.prototype._setValue_array,
    le.prototype._setValue_array_setNeedsUpdate,
    le.prototype._setValue_array_setMatrixWorldNeedsUpdate
  ],
  [
    // ArrayElement
    le.prototype._setValue_arrayElement,
    le.prototype._setValue_arrayElement_setNeedsUpdate,
    le.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
  ],
  [
    // HasToFromArray
    le.prototype._setValue_fromArray,
    le.prototype._setValue_fromArray_setNeedsUpdate,
    le.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
  ]
];
class cw {
  constructor() {
    this.isAnimationObjectGroup = !0, this.uuid = kt(), this._objects = Array.prototype.slice.call(arguments), this.nCachedObjects_ = 0;
    const e = {};
    this._indicesByUUID = e;
    for (let n = 0, s = arguments.length; n !== s; ++n)
      e[arguments[n].uuid] = n;
    this._paths = [], this._parsedPaths = [], this._bindings = [], this._bindingsIndicesByPath = {};
    const t = this;
    this.stats = {
      objects: {
        get total() {
          return t._objects.length;
        },
        get inUse() {
          return this.total - t.nCachedObjects_;
        }
      },
      get bindingsPerObject() {
        return t._bindings.length;
      }
    };
  }
  add() {
    const e = this._objects, t = this._indicesByUUID, n = this._paths, s = this._parsedPaths, r = this._bindings, a = r.length;
    let o, c = e.length, l = this.nCachedObjects_;
    for (let h = 0, d = arguments.length; h !== d; ++h) {
      const u = arguments[h], f = u.uuid;
      let p = t[f];
      if (p === void 0) {
        p = c++, t[f] = p, e.push(u);
        for (let _ = 0, g = a; _ !== g; ++_)
          r[_].push(new le(u, n[_], s[_]));
      } else if (p < l) {
        o = e[p];
        const _ = --l, g = e[_];
        t[g.uuid] = p, e[p] = g, t[f] = _, e[_] = u;
        for (let m = 0, v = a; m !== v; ++m) {
          const y = r[m], b = y[_];
          let w = y[p];
          y[p] = b, w === void 0 && (w = new le(u, n[m], s[m])), y[_] = w;
        }
      } else
        e[p] !== o && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
    }
    this.nCachedObjects_ = l;
  }
  remove() {
    const e = this._objects, t = this._indicesByUUID, n = this._bindings, s = n.length;
    let r = this.nCachedObjects_;
    for (let a = 0, o = arguments.length; a !== o; ++a) {
      const c = arguments[a], l = c.uuid, h = t[l];
      if (h !== void 0 && h >= r) {
        const d = r++, u = e[d];
        t[u.uuid] = h, e[h] = u, t[l] = d, e[d] = c;
        for (let f = 0, p = s; f !== p; ++f) {
          const _ = n[f], g = _[d], m = _[h];
          _[h] = g, _[d] = m;
        }
      }
    }
    this.nCachedObjects_ = r;
  }
  // remove & forget
  uncache() {
    const e = this._objects, t = this._indicesByUUID, n = this._bindings, s = n.length;
    let r = this.nCachedObjects_, a = e.length;
    for (let o = 0, c = arguments.length; o !== c; ++o) {
      const l = arguments[o], h = l.uuid, d = t[h];
      if (d !== void 0)
        if (delete t[h], d < r) {
          const u = --r, f = e[u], p = --a, _ = e[p];
          t[f.uuid] = d, e[d] = f, t[_.uuid] = u, e[u] = _, e.pop();
          for (let g = 0, m = s; g !== m; ++g) {
            const v = n[g], y = v[u], b = v[p];
            v[d] = y, v[u] = b, v.pop();
          }
        } else {
          const u = --a, f = e[u];
          u > 0 && (t[f.uuid] = d), e[d] = f, e.pop();
          for (let p = 0, _ = s; p !== _; ++p) {
            const g = n[p];
            g[d] = g[u], g.pop();
          }
        }
    }
    this.nCachedObjects_ = r;
  }
  // Internal interface used by befriended PropertyBinding.Composite:
  subscribe_(e, t) {
    const n = this._bindingsIndicesByPath;
    let s = n[e];
    const r = this._bindings;
    if (s !== void 0)
      return r[s];
    const a = this._paths, o = this._parsedPaths, c = this._objects, l = c.length, h = this.nCachedObjects_, d = new Array(l);
    s = r.length, n[e] = s, a.push(e), o.push(t), r.push(d);
    for (let u = h, f = c.length; u !== f; ++u) {
      const p = c[u];
      d[u] = new le(p, e, t);
    }
    return d;
  }
  unsubscribe_(e) {
    const t = this._bindingsIndicesByPath, n = t[e];
    if (n !== void 0) {
      const s = this._paths, r = this._parsedPaths, a = this._bindings, o = a.length - 1, c = a[o], l = e[o];
      t[l] = n, a[n] = c, a.pop(), r[n] = r[o], r.pop(), s[n] = s[o], s.pop();
    }
  }
}
class uu {
  constructor(e, t, n = null, s = t.blendMode) {
    this._mixer = e, this._clip = t, this._localRoot = n, this.blendMode = s;
    const r = t.tracks, a = r.length, o = new Array(a), c = {
      endingStart: xi,
      endingEnd: xi
    };
    for (let l = 0; l !== a; ++l) {
      const h = r[l].createInterpolant(null);
      o[l] = h, h.settings = c;
    }
    this._interpolantSettings = c, this._interpolants = o, this._propertyBindings = new Array(a), this._cacheIndex = null, this._byClipCacheIndex = null, this._timeScaleInterpolant = null, this._weightInterpolant = null, this.loop = ah, this._loopCount = -1, this._startTime = null, this.time = 0, this.timeScale = 1, this._effectiveTimeScale = 1, this.weight = 1, this._effectiveWeight = 1, this.repetitions = 1 / 0, this.paused = !1, this.enabled = !0, this.clampWhenFinished = !1, this.zeroSlopeAtStart = !0, this.zeroSlopeAtEnd = !0;
  }
  // State & Scheduling
  play() {
    return this._mixer._activateAction(this), this;
  }
  stop() {
    return this._mixer._deactivateAction(this), this.reset();
  }
  reset() {
    return this.paused = !1, this.enabled = !0, this.time = 0, this._loopCount = -1, this._startTime = null, this.stopFading().stopWarping();
  }
  isRunning() {
    return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
  }
  // return true when play has been called
  isScheduled() {
    return this._mixer._isActiveAction(this);
  }
  startAt(e) {
    return this._startTime = e, this;
  }
  setLoop(e, t) {
    return this.loop = e, this.repetitions = t, this;
  }
  // Weight
  // set the weight stopping any scheduled fading
  // although .enabled = false yields an effective weight of zero, this
  // method does *not* change .enabled, because it would be confusing
  setEffectiveWeight(e) {
    return this.weight = e, this._effectiveWeight = this.enabled ? e : 0, this.stopFading();
  }
  // return the weight considering fading and .enabled
  getEffectiveWeight() {
    return this._effectiveWeight;
  }
  fadeIn(e) {
    return this._scheduleFading(e, 0, 1);
  }
  fadeOut(e) {
    return this._scheduleFading(e, 1, 0);
  }
  crossFadeFrom(e, t, n) {
    if (e.fadeOut(t), this.fadeIn(t), n) {
      const s = this._clip.duration, r = e._clip.duration, a = r / s, o = s / r;
      e.warp(1, a, t), this.warp(o, 1, t);
    }
    return this;
  }
  crossFadeTo(e, t, n) {
    return e.crossFadeFrom(this, t, n);
  }
  stopFading() {
    const e = this._weightInterpolant;
    return e !== null && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this;
  }
  // Time Scale Control
  // set the time scale stopping any scheduled warping
  // although .paused = true yields an effective time scale of zero, this
  // method does *not* change .paused, because it would be confusing
  setEffectiveTimeScale(e) {
    return this.timeScale = e, this._effectiveTimeScale = this.paused ? 0 : e, this.stopWarping();
  }
  // return the time scale considering warping and .paused
  getEffectiveTimeScale() {
    return this._effectiveTimeScale;
  }
  setDuration(e) {
    return this.timeScale = this._clip.duration / e, this.stopWarping();
  }
  syncWith(e) {
    return this.time = e.time, this.timeScale = e.timeScale, this.stopWarping();
  }
  halt(e) {
    return this.warp(this._effectiveTimeScale, 0, e);
  }
  warp(e, t, n) {
    const s = this._mixer, r = s.time, a = this.timeScale;
    let o = this._timeScaleInterpolant;
    o === null && (o = s._lendControlInterpolant(), this._timeScaleInterpolant = o);
    const c = o.parameterPositions, l = o.sampleValues;
    return c[0] = r, c[1] = r + n, l[0] = e / a, l[1] = t / a, this;
  }
  stopWarping() {
    const e = this._timeScaleInterpolant;
    return e !== null && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this;
  }
  // Object Accessors
  getMixer() {
    return this._mixer;
  }
  getClip() {
    return this._clip;
  }
  getRoot() {
    return this._localRoot || this._mixer._root;
  }
  // Interna
  _update(e, t, n, s) {
    if (!this.enabled) {
      this._updateWeight(e);
      return;
    }
    const r = this._startTime;
    if (r !== null) {
      const c = (e - r) * n;
      c < 0 || n === 0 ? t = 0 : (this._startTime = null, t = n * c);
    }
    t *= this._updateTimeScale(e);
    const a = this._updateTime(t), o = this._updateWeight(e);
    if (o > 0) {
      const c = this._interpolants, l = this._propertyBindings;
      switch (this.blendMode) {
        case c2:
          for (let h = 0, d = c.length; h !== d; ++h)
            c[h].evaluate(a), l[h].accumulateAdditive(o);
          break;
        case Jr:
        default:
          for (let h = 0, d = c.length; h !== d; ++h)
            c[h].evaluate(a), l[h].accumulate(s, o);
      }
    }
  }
  _updateWeight(e) {
    let t = 0;
    if (this.enabled) {
      t = this.weight;
      const n = this._weightInterpolant;
      if (n !== null) {
        const s = n.evaluate(e)[0];
        t *= s, e > n.parameterPositions[1] && (this.stopFading(), s === 0 && (this.enabled = !1));
      }
    }
    return this._effectiveWeight = t, t;
  }
  _updateTimeScale(e) {
    let t = 0;
    if (!this.paused) {
      t = this.timeScale;
      const n = this._timeScaleInterpolant;
      if (n !== null) {
        const s = n.evaluate(e)[0];
        t *= s, e > n.parameterPositions[1] && (this.stopWarping(), t === 0 ? this.paused = !0 : this.timeScale = t);
      }
    }
    return this._effectiveTimeScale = t, t;
  }
  _updateTime(e) {
    const t = this._clip.duration, n = this.loop;
    let s = this.time + e, r = this._loopCount;
    const a = n === oh;
    if (e === 0)
      return r === -1 ? s : a && (r & 1) === 1 ? t - s : s;
    if (n === rh) {
      r === -1 && (this._loopCount = 0, this._setEndings(!0, !0, !1));
      e: {
        if (s >= t)
          s = t;
        else if (s < 0)
          s = 0;
        else {
          this.time = s;
          break e;
        }
        this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, this.time = s, this._mixer.dispatchEvent({
          type: "finished",
          action: this,
          direction: e < 0 ? -1 : 1
        });
      }
    } else {
      if (r === -1 && (e >= 0 ? (r = 0, this._setEndings(!0, this.repetitions === 0, a)) : this._setEndings(this.repetitions === 0, !0, a)), s >= t || s < 0) {
        const o = Math.floor(s / t);
        s -= t * o, r += Math.abs(o);
        const c = this.repetitions - r;
        if (c <= 0)
          this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, s = e > 0 ? t : 0, this.time = s, this._mixer.dispatchEvent({
            type: "finished",
            action: this,
            direction: e > 0 ? 1 : -1
          });
        else {
          if (c === 1) {
            const l = e < 0;
            this._setEndings(l, !l, a);
          } else
            this._setEndings(!1, !1, a);
          this._loopCount = r, this.time = s, this._mixer.dispatchEvent({
            type: "loop",
            action: this,
            loopDelta: o
          });
        }
      } else
        this.time = s;
      if (a && (r & 1) === 1)
        return t - s;
    }
    return s;
  }
  _setEndings(e, t, n) {
    const s = this._interpolantSettings;
    n ? (s.endingStart = bi, s.endingEnd = bi) : (e ? s.endingStart = this.zeroSlopeAtStart ? bi : xi : s.endingStart = cs, t ? s.endingEnd = this.zeroSlopeAtEnd ? bi : xi : s.endingEnd = cs);
  }
  _scheduleFading(e, t, n) {
    const s = this._mixer, r = s.time;
    let a = this._weightInterpolant;
    a === null && (a = s._lendControlInterpolant(), this._weightInterpolant = a);
    const o = a.parameterPositions, c = a.sampleValues;
    return o[0] = r, c[0] = t, o[1] = r + e, c[1] = n, this;
  }
}
const hw = new Float32Array(1);
class uw extends ln {
  constructor(e) {
    super(), this._root = e, this._initMemoryManager(), this._accuIndex = 0, this.time = 0, this.timeScale = 1;
  }
  _bindAction(e, t) {
    const n = e._localRoot || this._root, s = e._clip.tracks, r = s.length, a = e._propertyBindings, o = e._interpolants, c = n.uuid, l = this._bindingsByRootAndName;
    let h = l[c];
    h === void 0 && (h = {}, l[c] = h);
    for (let d = 0; d !== r; ++d) {
      const u = s[d], f = u.name;
      let p = h[f];
      if (p !== void 0)
        ++p.referenceCount, a[d] = p;
      else {
        if (p = a[d], p !== void 0) {
          p._cacheIndex === null && (++p.referenceCount, this._addInactiveBinding(p, c, f));
          continue;
        }
        const _ = t && t._propertyBindings[d].binding.parsedPath;
        p = new hu(
          le.create(n, f, _),
          u.ValueTypeName,
          u.getValueSize()
        ), ++p.referenceCount, this._addInactiveBinding(p, c, f), a[d] = p;
      }
      o[d].resultBuffer = p.buffer;
    }
  }
  _activateAction(e) {
    if (!this._isActiveAction(e)) {
      if (e._cacheIndex === null) {
        const n = (e._localRoot || this._root).uuid, s = e._clip.uuid, r = this._actionsByClip[s];
        this._bindAction(
          e,
          r && r.knownActions[0]
        ), this._addInactiveAction(e, s, n);
      }
      const t = e._propertyBindings;
      for (let n = 0, s = t.length; n !== s; ++n) {
        const r = t[n];
        r.useCount++ === 0 && (this._lendBinding(r), r.saveOriginalState());
      }
      this._lendAction(e);
    }
  }
  _deactivateAction(e) {
    if (this._isActiveAction(e)) {
      const t = e._propertyBindings;
      for (let n = 0, s = t.length; n !== s; ++n) {
        const r = t[n];
        --r.useCount === 0 && (r.restoreOriginalState(), this._takeBackBinding(r));
      }
      this._takeBackAction(e);
    }
  }
  // Memory manager
  _initMemoryManager() {
    this._actions = [], this._nActiveActions = 0, this._actionsByClip = {}, this._bindings = [], this._nActiveBindings = 0, this._bindingsByRootAndName = {}, this._controlInterpolants = [], this._nActiveControlInterpolants = 0;
    const e = this;
    this.stats = {
      actions: {
        get total() {
          return e._actions.length;
        },
        get inUse() {
          return e._nActiveActions;
        }
      },
      bindings: {
        get total() {
          return e._bindings.length;
        },
        get inUse() {
          return e._nActiveBindings;
        }
      },
      controlInterpolants: {
        get total() {
          return e._controlInterpolants.length;
        },
        get inUse() {
          return e._nActiveControlInterpolants;
        }
      }
    };
  }
  // Memory management for AnimationAction objects
  _isActiveAction(e) {
    const t = e._cacheIndex;
    return t !== null && t < this._nActiveActions;
  }
  _addInactiveAction(e, t, n) {
    const s = this._actions, r = this._actionsByClip;
    let a = r[t];
    if (a === void 0)
      a = {
        knownActions: [e],
        actionByRoot: {}
      }, e._byClipCacheIndex = 0, r[t] = a;
    else {
      const o = a.knownActions;
      e._byClipCacheIndex = o.length, o.push(e);
    }
    e._cacheIndex = s.length, s.push(e), a.actionByRoot[n] = e;
  }
  _removeInactiveAction(e) {
    const t = this._actions, n = t[t.length - 1], s = e._cacheIndex;
    n._cacheIndex = s, t[s] = n, t.pop(), e._cacheIndex = null;
    const r = e._clip.uuid, a = this._actionsByClip, o = a[r], c = o.knownActions, l = c[c.length - 1], h = e._byClipCacheIndex;
    l._byClipCacheIndex = h, c[h] = l, c.pop(), e._byClipCacheIndex = null;
    const d = o.actionByRoot, u = (e._localRoot || this._root).uuid;
    delete d[u], c.length === 0 && delete a[r], this._removeInactiveBindingsForAction(e);
  }
  _removeInactiveBindingsForAction(e) {
    const t = e._propertyBindings;
    for (let n = 0, s = t.length; n !== s; ++n) {
      const r = t[n];
      --r.referenceCount === 0 && this._removeInactiveBinding(r);
    }
  }
  _lendAction(e) {
    const t = this._actions, n = e._cacheIndex, s = this._nActiveActions++, r = t[s];
    e._cacheIndex = s, t[s] = e, r._cacheIndex = n, t[n] = r;
  }
  _takeBackAction(e) {
    const t = this._actions, n = e._cacheIndex, s = --this._nActiveActions, r = t[s];
    e._cacheIndex = s, t[s] = e, r._cacheIndex = n, t[n] = r;
  }
  // Memory management for PropertyMixer objects
  _addInactiveBinding(e, t, n) {
    const s = this._bindingsByRootAndName, r = this._bindings;
    let a = s[t];
    a === void 0 && (a = {}, s[t] = a), a[n] = e, e._cacheIndex = r.length, r.push(e);
  }
  _removeInactiveBinding(e) {
    const t = this._bindings, n = e.binding, s = n.rootNode.uuid, r = n.path, a = this._bindingsByRootAndName, o = a[s], c = t[t.length - 1], l = e._cacheIndex;
    c._cacheIndex = l, t[l] = c, t.pop(), delete o[r], Object.keys(o).length === 0 && delete a[s];
  }
  _lendBinding(e) {
    const t = this._bindings, n = e._cacheIndex, s = this._nActiveBindings++, r = t[s];
    e._cacheIndex = s, t[s] = e, r._cacheIndex = n, t[n] = r;
  }
  _takeBackBinding(e) {
    const t = this._bindings, n = e._cacheIndex, s = --this._nActiveBindings, r = t[s];
    e._cacheIndex = s, t[s] = e, r._cacheIndex = n, t[n] = r;
  }
  // Memory management of Interpolants for weight and time scale
  _lendControlInterpolant() {
    const e = this._controlInterpolants, t = this._nActiveControlInterpolants++;
    let n = e[t];
    return n === void 0 && (n = new N2(
      new Float32Array(2),
      new Float32Array(2),
      1,
      hw
    ), n.__cacheIndex = t, e[t] = n), n;
  }
  _takeBackControlInterpolant(e) {
    const t = this._controlInterpolants, n = e.__cacheIndex, s = --this._nActiveControlInterpolants, r = t[s];
    e.__cacheIndex = s, t[s] = e, r.__cacheIndex = n, t[n] = r;
  }
  // return an action for a clip optionally using a custom root target
  // object (this method allocates a lot of dynamic memory in case a
  // previously unknown clip/root combination is specified)
  clipAction(e, t, n) {
    const s = t || this._root, r = s.uuid;
    let a = typeof e == "string" ? vs.findByName(s, e) : e;
    const o = a !== null ? a.uuid : e, c = this._actionsByClip[o];
    let l = null;
    if (n === void 0 && (a !== null ? n = a.blendMode : n = Jr), c !== void 0) {
      const d = c.actionByRoot[r];
      if (d !== void 0 && d.blendMode === n)
        return d;
      l = c.knownActions[0], a === null && (a = l._clip);
    }
    if (a === null)
      return null;
    const h = new uu(this, a, t, n);
    return this._bindAction(h, l), this._addInactiveAction(h, o, r), h;
  }
  // get an existing action
  existingAction(e, t) {
    const n = t || this._root, s = n.uuid, r = typeof e == "string" ? vs.findByName(n, e) : e, a = r ? r.uuid : e, o = this._actionsByClip[a];
    return o !== void 0 && o.actionByRoot[s] || null;
  }
  // deactivates all previously scheduled actions
  stopAllAction() {
    const e = this._actions, t = this._nActiveActions;
    for (let n = t - 1; n >= 0; --n)
      e[n].stop();
    return this;
  }
  // advance the time and update apply the animation
  update(e) {
    e *= this.timeScale;
    const t = this._actions, n = this._nActiveActions, s = this.time += e, r = Math.sign(e), a = this._accuIndex ^= 1;
    for (let l = 0; l !== n; ++l)
      t[l]._update(s, e, r, a);
    const o = this._bindings, c = this._nActiveBindings;
    for (let l = 0; l !== c; ++l)
      o[l].apply(a);
    return this;
  }
  // Allows you to seek to a specific time in an animation.
  setTime(e) {
    this.time = 0;
    for (let t = 0; t < this._actions.length; t++)
      this._actions[t].time = 0;
    return this.update(e);
  }
  // return this mixer's root target object
  getRoot() {
    return this._root;
  }
  // free all resources specific to a particular clip
  uncacheClip(e) {
    const t = this._actions, n = e.uuid, s = this._actionsByClip, r = s[n];
    if (r !== void 0) {
      const a = r.knownActions;
      for (let o = 0, c = a.length; o !== c; ++o) {
        const l = a[o];
        this._deactivateAction(l);
        const h = l._cacheIndex, d = t[t.length - 1];
        l._cacheIndex = null, l._byClipCacheIndex = null, d._cacheIndex = h, t[h] = d, t.pop(), this._removeInactiveBindingsForAction(l);
      }
      delete s[n];
    }
  }
  // free all resources specific to a particular root target object
  uncacheRoot(e) {
    const t = e.uuid, n = this._actionsByClip;
    for (const a in n) {
      const o = n[a].actionByRoot, c = o[t];
      c !== void 0 && (this._deactivateAction(c), this._removeInactiveAction(c));
    }
    const s = this._bindingsByRootAndName, r = s[t];
    if (r !== void 0)
      for (const a in r) {
        const o = r[a];
        o.restoreOriginalState(), this._removeInactiveBinding(o);
      }
  }
  // remove a targeted clip from the cache
  uncacheAction(e, t) {
    const n = this.existingAction(e, t);
    n !== null && (this._deactivateAction(n), this._removeInactiveAction(n));
  }
}
class X2 {
  constructor(e) {
    this.value = e;
  }
  clone() {
    return new X2(this.value.clone === void 0 ? this.value : this.value.clone());
  }
}
let dw = 0;
class fw extends ln {
  constructor() {
    super(), this.isUniformsGroup = !0, Object.defineProperty(this, "id", { value: dw++ }), this.name = "", this.usage = hs, this.uniforms = [];
  }
  add(e) {
    return this.uniforms.push(e), this;
  }
  remove(e) {
    const t = this.uniforms.indexOf(e);
    return t !== -1 && this.uniforms.splice(t, 1), this;
  }
  setName(e) {
    return this.name = e, this;
  }
  setUsage(e) {
    return this.usage = e, this;
  }
  dispose() {
    return this.dispatchEvent({ type: "dispose" }), this;
  }
  copy(e) {
    this.name = e.name, this.usage = e.usage;
    const t = e.uniforms;
    this.uniforms.length = 0;
    for (let n = 0, s = t.length; n < s; n++)
      this.uniforms.push(t[n].clone());
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class pw extends Ds {
  constructor(e, t, n = 1) {
    super(e, t), this.isInstancedInterleavedBuffer = !0, this.meshPerAttribute = n;
  }
  copy(e) {
    return super.copy(e), this.meshPerAttribute = e.meshPerAttribute, this;
  }
  clone(e) {
    const t = super.clone(e);
    return t.meshPerAttribute = this.meshPerAttribute, t;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.isInstancedInterleavedBuffer = !0, t.meshPerAttribute = this.meshPerAttribute, t;
  }
}
class mw {
  constructor(e, t, n, s, r) {
    this.isGLBufferAttribute = !0, this.name = "", this.buffer = e, this.type = t, this.itemSize = n, this.elementSize = s, this.count = r, this.version = 0;
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  setBuffer(e) {
    return this.buffer = e, this;
  }
  setType(e, t) {
    return this.type = e, this.elementSize = t, this;
  }
  setItemSize(e) {
    return this.itemSize = e, this;
  }
  setCount(e) {
    return this.count = e, this;
  }
}
class Y2 {
  constructor(e, t, n = 0, s = 1 / 0) {
    this.ray = new Rs(e, t), this.near = n, this.far = s, this.camera = null, this.layers = new e6(), this.params = {
      Mesh: {},
      Line: { threshold: 1 },
      LOD: {},
      Points: { threshold: 1 },
      Sprite: {}
    };
  }
  set(e, t) {
    this.ray.set(e, t);
  }
  setFromCamera(e, t) {
    t.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(t.matrixWorld), this.ray.direction.set(e.x, e.y, 0.5).unproject(t).sub(this.ray.origin).normalize(), this.camera = t) : t.isOrthographicCamera ? (this.ray.origin.set(e.x, e.y, (t.near + t.far) / (t.near - t.far)).unproject(t), this.ray.direction.set(0, 0, -1).transformDirection(t.matrixWorld), this.camera = t) : console.error("THREE.Raycaster: Unsupported camera type: " + t.type);
  }
  intersectObject(e, t = !0, n = []) {
    return N5(e, this, n, t), n.sort(Oa), n;
  }
  intersectObjects(e, t = !0, n = []) {
    for (let s = 0, r = e.length; s < r; s++)
      N5(e[s], this, n, t);
    return n.sort(Oa), n;
  }
}
function Oa(i, e) {
  return i.distance - e.distance;
}
function N5(i, e, t, n) {
  if (i.layers.test(e.layers) && i.raycast(e, t), n === !0) {
    const s = i.children;
    for (let r = 0, a = s.length; r < a; r++)
      N5(s[r], e, t, !0);
  }
}
class gw {
  constructor(e = 1, t = 0, n = 0) {
    return this.radius = e, this.phi = t, this.theta = n, this;
  }
  set(e, t, n) {
    return this.radius = e, this.phi = t, this.theta = n, this;
  }
  copy(e) {
    return this.radius = e.radius, this.phi = e.phi, this.theta = e.theta, this;
  }
  // restrict phi to be between EPS and PI-EPS
  makeSafe() {
    return this.phi = Math.max(1e-6, Math.min(Math.PI - 1e-6, this.phi)), this;
  }
  setFromVector3(e) {
    return this.setFromCartesianCoords(e.x, e.y, e.z);
  }
  setFromCartesianCoords(e, t, n) {
    return this.radius = Math.sqrt(e * e + t * t + n * n), this.radius === 0 ? (this.theta = 0, this.phi = 0) : (this.theta = Math.atan2(e, n), this.phi = Math.acos(De(t / this.radius, -1, 1))), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class _w {
  constructor(e = 1, t = 0, n = 0) {
    return this.radius = e, this.theta = t, this.y = n, this;
  }
  set(e, t, n) {
    return this.radius = e, this.theta = t, this.y = n, this;
  }
  copy(e) {
    return this.radius = e.radius, this.theta = e.theta, this.y = e.y, this;
  }
  setFromVector3(e) {
    return this.setFromCartesianCoords(e.x, e.y, e.z);
  }
  setFromCartesianCoords(e, t, n) {
    return this.radius = Math.sqrt(e * e + n * n), this.theta = Math.atan2(e, n), this.y = t, this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const Ua = /* @__PURE__ */ new o0();
class vw {
  constructor(e = new o0(1 / 0, 1 / 0), t = new o0(-1 / 0, -1 / 0)) {
    this.isBox2 = !0, this.min = e, this.max = t;
  }
  set(e, t) {
    return this.min.copy(e), this.max.copy(t), this;
  }
  setFromPoints(e) {
    this.makeEmpty();
    for (let t = 0, n = e.length; t < n; t++)
      this.expandByPoint(e[t]);
    return this;
  }
  setFromCenterAndSize(e, t) {
    const n = Ua.copy(t).multiplyScalar(0.5);
    return this.min.copy(e).sub(n), this.max.copy(e).add(n), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.min.copy(e.min), this.max.copy(e.max), this;
  }
  makeEmpty() {
    return this.min.x = this.min.y = 1 / 0, this.max.x = this.max.y = -1 / 0, this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y;
  }
  getCenter(e) {
    return this.isEmpty() ? e.set(0, 0) : e.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(e) {
    return this.isEmpty() ? e.set(0, 0) : e.subVectors(this.max, this.min);
  }
  expandByPoint(e) {
    return this.min.min(e), this.max.max(e), this;
  }
  expandByVector(e) {
    return this.min.sub(e), this.max.add(e), this;
  }
  expandByScalar(e) {
    return this.min.addScalar(-e), this.max.addScalar(e), this;
  }
  containsPoint(e) {
    return !(e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y);
  }
  containsBox(e) {
    return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y;
  }
  getParameter(e, t) {
    return t.set(
      (e.x - this.min.x) / (this.max.x - this.min.x),
      (e.y - this.min.y) / (this.max.y - this.min.y)
    );
  }
  intersectsBox(e) {
    return !(e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y);
  }
  clampPoint(e, t) {
    return t.copy(e).clamp(this.min, this.max);
  }
  distanceToPoint(e) {
    return this.clampPoint(e, Ua).distanceTo(e);
  }
  intersect(e) {
    return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
  }
  union(e) {
    return this.min.min(e.min), this.max.max(e.max), this;
  }
  translate(e) {
    return this.min.add(e), this.max.add(e), this;
  }
  equals(e) {
    return e.min.equals(this.min) && e.max.equals(this.max);
  }
}
const Fa = /* @__PURE__ */ new C(), z7 = /* @__PURE__ */ new C();
class yw {
  constructor(e = new C(), t = new C()) {
    this.start = e, this.end = t;
  }
  set(e, t) {
    return this.start.copy(e), this.end.copy(t), this;
  }
  copy(e) {
    return this.start.copy(e.start), this.end.copy(e.end), this;
  }
  getCenter(e) {
    return e.addVectors(this.start, this.end).multiplyScalar(0.5);
  }
  delta(e) {
    return e.subVectors(this.end, this.start);
  }
  distanceSq() {
    return this.start.distanceToSquared(this.end);
  }
  distance() {
    return this.start.distanceTo(this.end);
  }
  at(e, t) {
    return this.delta(t).multiplyScalar(e).add(this.start);
  }
  closestPointToPointParameter(e, t) {
    Fa.subVectors(e, this.start), z7.subVectors(this.end, this.start);
    const n = z7.dot(z7);
    let r = z7.dot(Fa) / n;
    return t && (r = De(r, 0, 1)), r;
  }
  closestPointToPoint(e, t, n) {
    const s = this.closestPointToPointParameter(e, t);
    return this.delta(n).multiplyScalar(s).add(this.start);
  }
  applyMatrix4(e) {
    return this.start.applyMatrix4(e), this.end.applyMatrix4(e), this;
  }
  equals(e) {
    return e.start.equals(this.start) && e.end.equals(this.end);
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const za = /* @__PURE__ */ new C();
class xw extends G0 {
  constructor(e, t) {
    super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = t, this.type = "SpotLightHelper";
    const n = new F0(), s = [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1,
      0,
      1,
      0,
      0,
      0,
      -1,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      1,
      0,
      0,
      0,
      0,
      -1,
      1
    ];
    for (let a = 0, o = 1, c = 32; a < c; a++, o++) {
      const l = a / c * Math.PI * 2, h = o / c * Math.PI * 2;
      s.push(
        Math.cos(l),
        Math.sin(l),
        1,
        Math.cos(h),
        Math.sin(h),
        1
      );
    }
    n.setAttribute("position", new v0(s, 3));
    const r = new Ae({ fog: !1, toneMapped: !1 });
    this.cone = new xt(n, r), this.add(this.cone), this.update();
  }
  dispose() {
    this.cone.geometry.dispose(), this.cone.material.dispose();
  }
  update() {
    this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1);
    const e = this.light.distance ? this.light.distance : 1e3, t = e * Math.tan(this.light.angle);
    this.cone.scale.set(t, t, e), za.setFromMatrixPosition(this.light.target.matrixWorld), this.cone.lookAt(za), this.color !== void 0 ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color);
  }
}
const vn = /* @__PURE__ */ new C(), k7 = /* @__PURE__ */ new k0(), n3 = /* @__PURE__ */ new k0();
class bw extends xt {
  constructor(e) {
    const t = du(e), n = new F0(), s = [], r = [], a = new f0(0, 0, 1), o = new f0(0, 1, 0);
    for (let l = 0; l < t.length; l++) {
      const h = t[l];
      h.parent && h.parent.isBone && (s.push(0, 0, 0), s.push(0, 0, 0), r.push(a.r, a.g, a.b), r.push(o.r, o.g, o.b));
    }
    n.setAttribute("position", new v0(s, 3)), n.setAttribute("color", new v0(r, 3));
    const c = new Ae({ vertexColors: !0, depthTest: !1, depthWrite: !1, toneMapped: !1, transparent: !0 });
    super(n, c), this.isSkeletonHelper = !0, this.type = "SkeletonHelper", this.root = e, this.bones = t, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1;
  }
  updateMatrixWorld(e) {
    const t = this.bones, n = this.geometry, s = n.getAttribute("position");
    n3.copy(this.root.matrixWorld).invert();
    for (let r = 0, a = 0; r < t.length; r++) {
      const o = t[r];
      o.parent && o.parent.isBone && (k7.multiplyMatrices(n3, o.matrixWorld), vn.setFromMatrixPosition(k7), s.setXYZ(a, vn.x, vn.y, vn.z), k7.multiplyMatrices(n3, o.parent.matrixWorld), vn.setFromMatrixPosition(k7), s.setXYZ(a + 1, vn.x, vn.y, vn.z), a += 2);
    }
    n.getAttribute("position").needsUpdate = !0, super.updateMatrixWorld(e);
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
function du(i) {
  const e = [];
  i.isBone === !0 && e.push(i);
  for (let t = 0; t < i.children.length; t++)
    e.push.apply(e, du(i.children[t]));
  return e;
}
class ww extends y0 {
  constructor(e, t, n) {
    const s = new hn(t, 4, 2), r = new c1({ wireframe: !0, fog: !1, toneMapped: !1 });
    super(s, r), this.light = e, this.color = n, this.type = "PointLightHelper", this.matrix = this.light.matrixWorld, this.matrixAutoUpdate = !1, this.update();
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
  update() {
    this.light.updateWorldMatrix(!0, !1), this.color !== void 0 ? this.material.color.set(this.color) : this.material.color.copy(this.light.color);
  }
}
const Mw = /* @__PURE__ */ new C(), ka = /* @__PURE__ */ new f0(), Ba = /* @__PURE__ */ new f0();
class Sw extends G0 {
  constructor(e, t, n) {
    super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = n, this.type = "HemisphereLightHelper";
    const s = new Pt(t);
    s.rotateY(Math.PI * 0.5), this.material = new c1({ wireframe: !0, fog: !1, toneMapped: !1 }), this.color === void 0 && (this.material.vertexColors = !0);
    const r = s.getAttribute("position"), a = new Float32Array(r.count * 3);
    s.setAttribute("color", new ee(a, 3)), this.add(new y0(s, this.material)), this.update();
  }
  dispose() {
    this.children[0].geometry.dispose(), this.children[0].material.dispose();
  }
  update() {
    const e = this.children[0];
    if (this.color !== void 0)
      this.material.color.set(this.color);
    else {
      const t = e.geometry.getAttribute("color");
      ka.copy(this.light.color), Ba.copy(this.light.groundColor);
      for (let n = 0, s = t.count; n < s; n++) {
        const r = n < s / 2 ? ka : Ba;
        t.setXYZ(n, r.r, r.g, r.b);
      }
      t.needsUpdate = !0;
    }
    this.light.updateWorldMatrix(!0, !1), e.lookAt(Mw.setFromMatrixPosition(this.light.matrixWorld).negate());
  }
}
class Ew extends xt {
  constructor(e = 10, t = 10, n = 4473924, s = 8947848) {
    n = new f0(n), s = new f0(s);
    const r = t / 2, a = e / t, o = e / 2, c = [], l = [];
    for (let u = 0, f = 0, p = -o; u <= t; u++, p += a) {
      c.push(-o, 0, p, o, 0, p), c.push(p, 0, -o, p, 0, o);
      const _ = u === r ? n : s;
      _.toArray(l, f), f += 3, _.toArray(l, f), f += 3, _.toArray(l, f), f += 3, _.toArray(l, f), f += 3;
    }
    const h = new F0();
    h.setAttribute("position", new v0(c, 3)), h.setAttribute("color", new v0(l, 3));
    const d = new Ae({ vertexColors: !0, toneMapped: !1 });
    super(h, d), this.type = "GridHelper";
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class Tw extends xt {
  constructor(e = 10, t = 16, n = 8, s = 64, r = 4473924, a = 8947848) {
    r = new f0(r), a = new f0(a);
    const o = [], c = [];
    if (t > 1)
      for (let d = 0; d < t; d++) {
        const u = d / t * (Math.PI * 2), f = Math.sin(u) * e, p = Math.cos(u) * e;
        o.push(0, 0, 0), o.push(f, 0, p);
        const _ = d & 1 ? r : a;
        c.push(_.r, _.g, _.b), c.push(_.r, _.g, _.b);
      }
    for (let d = 0; d < n; d++) {
      const u = d & 1 ? r : a, f = e - e / n * d;
      for (let p = 0; p < s; p++) {
        let _ = p / s * (Math.PI * 2), g = Math.sin(_) * f, m = Math.cos(_) * f;
        o.push(g, 0, m), c.push(u.r, u.g, u.b), _ = (p + 1) / s * (Math.PI * 2), g = Math.sin(_) * f, m = Math.cos(_) * f, o.push(g, 0, m), c.push(u.r, u.g, u.b);
      }
    }
    const l = new F0();
    l.setAttribute("position", new v0(o, 3)), l.setAttribute("color", new v0(c, 3));
    const h = new Ae({ vertexColors: !0, toneMapped: !1 });
    super(l, h), this.type = "PolarGridHelper";
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
const Va = /* @__PURE__ */ new C(), B7 = /* @__PURE__ */ new C(), Ha = /* @__PURE__ */ new C();
class Aw extends G0 {
  constructor(e, t, n) {
    super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = n, this.type = "DirectionalLightHelper", t === void 0 && (t = 1);
    let s = new F0();
    s.setAttribute("position", new v0([
      -t,
      t,
      0,
      t,
      t,
      0,
      t,
      -t,
      0,
      -t,
      -t,
      0,
      -t,
      t,
      0
    ], 3));
    const r = new Ae({ fog: !1, toneMapped: !1 });
    this.lightPlane = new W0(s, r), this.add(this.lightPlane), s = new F0(), s.setAttribute("position", new v0([0, 0, 0, 0, 0, 1], 3)), this.targetLine = new W0(s, r), this.add(this.targetLine), this.update();
  }
  dispose() {
    this.lightPlane.geometry.dispose(), this.lightPlane.material.dispose(), this.targetLine.geometry.dispose(), this.targetLine.material.dispose();
  }
  update() {
    this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1), Va.setFromMatrixPosition(this.light.matrixWorld), B7.setFromMatrixPosition(this.light.target.matrixWorld), Ha.subVectors(B7, Va), this.lightPlane.lookAt(B7), this.color !== void 0 ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color)), this.targetLine.lookAt(B7), this.targetLine.scale.z = Ha.length();
  }
}
const V7 = /* @__PURE__ */ new C(), Le = /* @__PURE__ */ new t6();
class Cw extends xt {
  constructor(e) {
    const t = new F0(), n = new Ae({ color: 16777215, vertexColors: !0, toneMapped: !1 }), s = [], r = [], a = {};
    o("n1", "n2"), o("n2", "n4"), o("n4", "n3"), o("n3", "n1"), o("f1", "f2"), o("f2", "f4"), o("f4", "f3"), o("f3", "f1"), o("n1", "f1"), o("n2", "f2"), o("n3", "f3"), o("n4", "f4"), o("p", "n1"), o("p", "n2"), o("p", "n3"), o("p", "n4"), o("u1", "u2"), o("u2", "u3"), o("u3", "u1"), o("c", "t"), o("p", "c"), o("cn1", "cn2"), o("cn3", "cn4"), o("cf1", "cf2"), o("cf3", "cf4");
    function o(p, _) {
      c(p), c(_);
    }
    function c(p) {
      s.push(0, 0, 0), r.push(0, 0, 0), a[p] === void 0 && (a[p] = []), a[p].push(s.length / 3 - 1);
    }
    t.setAttribute("position", new v0(s, 3)), t.setAttribute("color", new v0(r, 3)), super(t, n), this.type = "CameraHelper", this.camera = e, this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix(), this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.pointMap = a, this.update();
    const l = new f0(16755200), h = new f0(16711680), d = new f0(43775), u = new f0(16777215), f = new f0(3355443);
    this.setColors(l, h, d, u, f);
  }
  setColors(e, t, n, s, r) {
    const o = this.geometry.getAttribute("color");
    o.setXYZ(0, e.r, e.g, e.b), o.setXYZ(1, e.r, e.g, e.b), o.setXYZ(2, e.r, e.g, e.b), o.setXYZ(3, e.r, e.g, e.b), o.setXYZ(4, e.r, e.g, e.b), o.setXYZ(5, e.r, e.g, e.b), o.setXYZ(6, e.r, e.g, e.b), o.setXYZ(7, e.r, e.g, e.b), o.setXYZ(8, e.r, e.g, e.b), o.setXYZ(9, e.r, e.g, e.b), o.setXYZ(10, e.r, e.g, e.b), o.setXYZ(11, e.r, e.g, e.b), o.setXYZ(12, e.r, e.g, e.b), o.setXYZ(13, e.r, e.g, e.b), o.setXYZ(14, e.r, e.g, e.b), o.setXYZ(15, e.r, e.g, e.b), o.setXYZ(16, e.r, e.g, e.b), o.setXYZ(17, e.r, e.g, e.b), o.setXYZ(18, e.r, e.g, e.b), o.setXYZ(19, e.r, e.g, e.b), o.setXYZ(20, e.r, e.g, e.b), o.setXYZ(21, e.r, e.g, e.b), o.setXYZ(22, e.r, e.g, e.b), o.setXYZ(23, e.r, e.g, e.b), o.setXYZ(24, t.r, t.g, t.b), o.setXYZ(25, t.r, t.g, t.b), o.setXYZ(26, t.r, t.g, t.b), o.setXYZ(27, t.r, t.g, t.b), o.setXYZ(28, t.r, t.g, t.b), o.setXYZ(29, t.r, t.g, t.b), o.setXYZ(30, t.r, t.g, t.b), o.setXYZ(31, t.r, t.g, t.b), o.setXYZ(32, n.r, n.g, n.b), o.setXYZ(33, n.r, n.g, n.b), o.setXYZ(34, n.r, n.g, n.b), o.setXYZ(35, n.r, n.g, n.b), o.setXYZ(36, n.r, n.g, n.b), o.setXYZ(37, n.r, n.g, n.b), o.setXYZ(38, s.r, s.g, s.b), o.setXYZ(39, s.r, s.g, s.b), o.setXYZ(40, r.r, r.g, r.b), o.setXYZ(41, r.r, r.g, r.b), o.setXYZ(42, r.r, r.g, r.b), o.setXYZ(43, r.r, r.g, r.b), o.setXYZ(44, r.r, r.g, r.b), o.setXYZ(45, r.r, r.g, r.b), o.setXYZ(46, r.r, r.g, r.b), o.setXYZ(47, r.r, r.g, r.b), o.setXYZ(48, r.r, r.g, r.b), o.setXYZ(49, r.r, r.g, r.b), o.needsUpdate = !0;
  }
  update() {
    const e = this.geometry, t = this.pointMap, n = 1, s = 1;
    Le.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse), Fe("c", t, e, Le, 0, 0, -1), Fe("t", t, e, Le, 0, 0, 1), Fe("n1", t, e, Le, -n, -s, -1), Fe("n2", t, e, Le, n, -s, -1), Fe("n3", t, e, Le, -n, s, -1), Fe("n4", t, e, Le, n, s, -1), Fe("f1", t, e, Le, -n, -s, 1), Fe("f2", t, e, Le, n, -s, 1), Fe("f3", t, e, Le, -n, s, 1), Fe("f4", t, e, Le, n, s, 1), Fe("u1", t, e, Le, n * 0.7, s * 1.1, -1), Fe("u2", t, e, Le, -n * 0.7, s * 1.1, -1), Fe("u3", t, e, Le, 0, s * 2, -1), Fe("cf1", t, e, Le, -n, 0, 1), Fe("cf2", t, e, Le, n, 0, 1), Fe("cf3", t, e, Le, 0, -s, 1), Fe("cf4", t, e, Le, 0, s, 1), Fe("cn1", t, e, Le, -n, 0, -1), Fe("cn2", t, e, Le, n, 0, -1), Fe("cn3", t, e, Le, 0, -s, -1), Fe("cn4", t, e, Le, 0, s, -1), e.getAttribute("position").needsUpdate = !0;
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
function Fe(i, e, t, n, s, r, a) {
  V7.set(s, r, a).unproject(n);
  const o = e[i];
  if (o !== void 0) {
    const c = t.getAttribute("position");
    for (let l = 0, h = o.length; l < h; l++)
      c.setXYZ(o[l], V7.x, V7.y, V7.z);
  }
}
const H7 = /* @__PURE__ */ new F1();
class Iw extends xt {
  constructor(e, t = 16776960) {
    const n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), s = new Float32Array(8 * 3), r = new F0();
    r.setIndex(new ee(n, 1)), r.setAttribute("position", new ee(s, 3)), super(r, new Ae({ color: t, toneMapped: !1 })), this.object = e, this.type = "BoxHelper", this.matrixAutoUpdate = !1, this.update();
  }
  update(e) {
    if (e !== void 0 && console.warn("THREE.BoxHelper: .update() has no longer arguments."), this.object !== void 0 && H7.setFromObject(this.object), H7.isEmpty())
      return;
    const t = H7.min, n = H7.max, s = this.geometry.attributes.position, r = s.array;
    r[0] = n.x, r[1] = n.y, r[2] = n.z, r[3] = t.x, r[4] = n.y, r[5] = n.z, r[6] = t.x, r[7] = t.y, r[8] = n.z, r[9] = n.x, r[10] = t.y, r[11] = n.z, r[12] = n.x, r[13] = n.y, r[14] = t.z, r[15] = t.x, r[16] = n.y, r[17] = t.z, r[18] = t.x, r[19] = t.y, r[20] = t.z, r[21] = n.x, r[22] = t.y, r[23] = t.z, s.needsUpdate = !0, this.geometry.computeBoundingSphere();
  }
  setFromObject(e) {
    return this.object = e, this.update(), this;
  }
  copy(e, t) {
    return super.copy(e, t), this.object = e.object, this;
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class Lw extends xt {
  constructor(e, t = 16776960) {
    const n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), s = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1], r = new F0();
    r.setIndex(new ee(n, 1)), r.setAttribute("position", new v0(s, 3)), super(r, new Ae({ color: t, toneMapped: !1 })), this.box = e, this.type = "Box3Helper", this.geometry.computeBoundingSphere();
  }
  updateMatrixWorld(e) {
    const t = this.box;
    t.isEmpty() || (t.getCenter(this.position), t.getSize(this.scale), this.scale.multiplyScalar(0.5), super.updateMatrixWorld(e));
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class Rw extends W0 {
  constructor(e, t = 1, n = 16776960) {
    const s = n, r = [1, -1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0], a = new F0();
    a.setAttribute("position", new v0(r, 3)), a.computeBoundingSphere(), super(a, new Ae({ color: s, toneMapped: !1 })), this.type = "PlaneHelper", this.plane = e, this.size = t;
    const o = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0], c = new F0();
    c.setAttribute("position", new v0(o, 3)), c.computeBoundingSphere(), this.add(new y0(c, new c1({ color: s, opacity: 0.2, transparent: !0, depthWrite: !1, toneMapped: !1 })));
  }
  updateMatrixWorld(e) {
    this.position.set(0, 0, 0), this.scale.set(0.5 * this.size, 0.5 * this.size, 1), this.lookAt(this.plane.normal), this.translateZ(-this.plane.constant), super.updateMatrixWorld(e);
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose(), this.children[0].geometry.dispose(), this.children[0].material.dispose();
  }
}
const Ga = /* @__PURE__ */ new C();
let G7, i3;
class fu extends G0 {
  // dir is assumed to be normalized
  constructor(e = new C(0, 0, 1), t = new C(0, 0, 0), n = 1, s = 16776960, r = n * 0.2, a = r * 0.2) {
    super(), this.type = "ArrowHelper", G7 === void 0 && (G7 = new F0(), G7.setAttribute("position", new v0([0, 0, 0, 0, 1, 0], 3)), i3 = new Ke(0, 0.5, 1, 5, 1), i3.translate(0, -0.5, 0)), this.position.copy(t), this.line = new W0(G7, new Ae({ color: s, toneMapped: !1 })), this.line.matrixAutoUpdate = !1, this.add(this.line), this.cone = new y0(i3, new c1({ color: s, toneMapped: !1 })), this.cone.matrixAutoUpdate = !1, this.add(this.cone), this.setDirection(e), this.setLength(n, r, a);
  }
  setDirection(e) {
    if (e.y > 0.99999)
      this.quaternion.set(0, 0, 0, 1);
    else if (e.y < -0.99999)
      this.quaternion.set(1, 0, 0, 0);
    else {
      Ga.set(e.z, 0, -e.x).normalize();
      const t = Math.acos(e.y);
      this.quaternion.setFromAxisAngle(Ga, t);
    }
  }
  setLength(e, t = e * 0.2, n = t * 0.2) {
    this.line.scale.set(1, Math.max(1e-4, e - t), 1), this.line.updateMatrix(), this.cone.scale.set(n, t, n), this.cone.position.y = e, this.cone.updateMatrix();
  }
  setColor(e) {
    this.line.material.color.set(e), this.cone.material.color.set(e);
  }
  copy(e) {
    return super.copy(e, !1), this.line.copy(e.line), this.cone.copy(e.cone), this;
  }
  dispose() {
    this.line.geometry.dispose(), this.line.material.dispose(), this.cone.geometry.dispose(), this.cone.material.dispose();
  }
}
class pu extends xt {
  constructor(e = 1) {
    const t = [
      0,
      0,
      0,
      e,
      0,
      0,
      0,
      0,
      0,
      0,
      e,
      0,
      0,
      0,
      0,
      0,
      0,
      e
    ], n = [
      1,
      0,
      0,
      1,
      0.6,
      0,
      0,
      1,
      0,
      0.6,
      1,
      0,
      0,
      0,
      1,
      0,
      0.6,
      1
    ], s = new F0();
    s.setAttribute("position", new v0(t, 3)), s.setAttribute("color", new v0(n, 3));
    const r = new Ae({ vertexColors: !0, toneMapped: !1 });
    super(s, r), this.type = "AxesHelper";
  }
  setColors(e, t, n) {
    const s = new f0(), r = this.geometry.attributes.color.array;
    return s.set(e), s.toArray(r, 0), s.toArray(r, 3), s.set(t), s.toArray(r, 6), s.toArray(r, 9), s.set(n), s.toArray(r, 12), s.toArray(r, 15), this.geometry.attributes.color.needsUpdate = !0, this;
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class Pw {
  constructor() {
    this.type = "ShapePath", this.color = new f0(), this.subPaths = [], this.currentPath = null;
  }
  moveTo(e, t) {
    return this.currentPath = new ds(), this.subPaths.push(this.currentPath), this.currentPath.moveTo(e, t), this;
  }
  lineTo(e, t) {
    return this.currentPath.lineTo(e, t), this;
  }
  quadraticCurveTo(e, t, n, s) {
    return this.currentPath.quadraticCurveTo(e, t, n, s), this;
  }
  bezierCurveTo(e, t, n, s, r, a) {
    return this.currentPath.bezierCurveTo(e, t, n, s, r, a), this;
  }
  splineThru(e) {
    return this.currentPath.splineThru(e), this;
  }
  toShapes(e) {
    function t(m) {
      const v = [];
      for (let y = 0, b = m.length; y < b; y++) {
        const w = m[y], x = new Ni();
        x.curves = w.curves, v.push(x);
      }
      return v;
    }
    function n(m, v) {
      const y = v.length;
      let b = !1;
      for (let w = y - 1, x = 0; x < y; w = x++) {
        let S = v[w], T = v[x], M = T.x - S.x, A = T.y - S.y;
        if (Math.abs(A) > Number.EPSILON) {
          if (A < 0 && (S = v[x], M = -M, T = v[w], A = -A), m.y < S.y || m.y > T.y)
            continue;
          if (m.y === S.y) {
            if (m.x === S.x)
              return !0;
          } else {
            const D = A * (m.x - S.x) - M * (m.y - S.y);
            if (D === 0)
              return !0;
            if (D < 0)
              continue;
            b = !b;
          }
        } else {
          if (m.y !== S.y)
            continue;
          if (T.x <= m.x && m.x <= S.x || S.x <= m.x && m.x <= T.x)
            return !0;
        }
      }
      return b;
    }
    const s = N1.isClockWise, r = this.subPaths;
    if (r.length === 0)
      return [];
    let a, o, c;
    const l = [];
    if (r.length === 1)
      return o = r[0], c = new Ni(), c.curves = o.curves, l.push(c), l;
    let h = !s(r[0].getPoints());
    h = e ? !h : h;
    const d = [], u = [];
    let f = [], p = 0, _;
    u[p] = void 0, f[p] = [];
    for (let m = 0, v = r.length; m < v; m++)
      o = r[m], _ = o.getPoints(), a = s(_), a = e ? !a : a, a ? (!h && u[p] && p++, u[p] = { s: new Ni(), p: _ }, u[p].s.curves = o.curves, h && p++, f[p] = []) : f[p].push({ h: o, p: _[0] });
    if (!u[0])
      return t(r);
    if (u.length > 1) {
      let m = !1, v = 0;
      for (let y = 0, b = u.length; y < b; y++)
        d[y] = [];
      for (let y = 0, b = u.length; y < b; y++) {
        const w = f[y];
        for (let x = 0; x < w.length; x++) {
          const S = w[x];
          let T = !0;
          for (let M = 0; M < u.length; M++)
            n(S.p, u[M].p) && (y !== M && v++, T ? (T = !1, d[M].push(S)) : m = !0);
          T && d[y].push(S);
        }
      }
      v > 0 && m === !1 && (f = d);
    }
    let g;
    for (let m = 0, v = u.length; m < v; m++) {
      c = u[m].s, l.push(c), g = f[m];
      for (let y = 0, b = g.length; y < b; y++)
        c.holes.push(g[y].h);
    }
    return l;
  }
}
class Dw extends ct {
  // @deprecated, r144
  constructor(e, t, n, s, r, a) {
    console.warn("THREE.BoxBufferGeometry has been renamed to THREE.BoxGeometry."), super(e, t, n, s, r, a);
  }
}
class Nw extends Ns {
  // @deprecated, r144
  constructor(e, t, n, s) {
    console.warn("THREE.CapsuleBufferGeometry has been renamed to THREE.CapsuleGeometry."), super(e, t, n, s);
  }
}
class Ow extends Os {
  // @deprecated, r144
  constructor(e, t, n, s) {
    console.warn("THREE.CircleBufferGeometry has been renamed to THREE.CircleGeometry."), super(e, t, n, s);
  }
}
class Uw extends s8 {
  // @deprecated, r144
  constructor(e, t, n, s, r, a, o) {
    console.warn("THREE.ConeBufferGeometry has been renamed to THREE.ConeGeometry."), super(e, t, n, s, r, a, o);
  }
}
class Fw extends Ke {
  // @deprecated, r144
  constructor(e, t, n, s, r, a, o, c) {
    console.warn("THREE.CylinderBufferGeometry has been renamed to THREE.CylinderGeometry."), super(e, t, n, s, r, a, o, c);
  }
}
class zw extends Us {
  // @deprecated, r144
  constructor(e, t) {
    console.warn("THREE.DodecahedronBufferGeometry has been renamed to THREE.DodecahedronGeometry."), super(e, t);
  }
}
class kw extends Fs {
  // @deprecated, r144
  constructor(e, t) {
    console.warn("THREE.ExtrudeBufferGeometry has been renamed to THREE.ExtrudeGeometry."), super(e, t);
  }
}
class Bw extends zs {
  // @deprecated, r144
  constructor(e, t) {
    console.warn("THREE.IcosahedronBufferGeometry has been renamed to THREE.IcosahedronGeometry."), super(e, t);
  }
}
class Vw extends i8 {
  // @deprecated, r144
  constructor(e, t, n, s) {
    console.warn("THREE.LatheBufferGeometry has been renamed to THREE.LatheGeometry."), super(e, t, n, s);
  }
}
class Hw extends Pt {
  // @deprecated, r144
  constructor(e, t) {
    console.warn("THREE.OctahedronBufferGeometry has been renamed to THREE.OctahedronGeometry."), super(e, t);
  }
}
class Gw extends Dt {
  // @deprecated, r144
  constructor(e, t, n, s) {
    console.warn("THREE.PlaneBufferGeometry has been renamed to THREE.PlaneGeometry."), super(e, t, n, s);
  }
}
class Ww extends cn {
  // @deprecated, r144
  constructor(e, t, n, s) {
    console.warn("THREE.PolyhedronBufferGeometry has been renamed to THREE.PolyhedronGeometry."), super(e, t, n, s);
  }
}
class Xw extends ks {
  // @deprecated, r144
  constructor(e, t, n, s, r, a) {
    console.warn("THREE.RingBufferGeometry has been renamed to THREE.RingGeometry."), super(e, t, n, s, r, a);
  }
}
class Yw extends Bs {
  // @deprecated, r144
  constructor(e, t) {
    console.warn("THREE.ShapeBufferGeometry has been renamed to THREE.ShapeGeometry."), super(e, t);
  }
}
class Zw extends hn {
  // @deprecated, r144
  constructor(e, t, n, s, r, a, o) {
    console.warn("THREE.SphereBufferGeometry has been renamed to THREE.SphereGeometry."), super(e, t, n, s, r, a, o);
  }
}
class qw extends Vs {
  // @deprecated, r144
  constructor(e, t) {
    console.warn("THREE.TetrahedronBufferGeometry has been renamed to THREE.TetrahedronGeometry."), super(e, t);
  }
}
class $w extends tn {
  // @deprecated, r144
  constructor(e, t, n, s, r) {
    console.warn("THREE.TorusBufferGeometry has been renamed to THREE.TorusGeometry."), super(e, t, n, s, r);
  }
}
class jw extends Hs {
  // @deprecated, r144
  constructor(e, t, n, s, r, a) {
    console.warn("THREE.TorusKnotBufferGeometry has been renamed to THREE.TorusKnotGeometry."), super(e, t, n, s, r, a);
  }
}
class Jw extends Gs {
  // @deprecated, r144
  constructor(e, t, n, s, r) {
    console.warn("THREE.TubeBufferGeometry has been renamed to THREE.TubeGeometry."), super(e, t, n, s, r);
  }
}
typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
  revision: $r
} }));
typeof window < "u" && (window.__THREE__ ? console.warn("WARNING: Multiple instances of Three.js being imported.") : window.__THREE__ = $r);
const mu = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  ACESFilmicToneMapping: Gc,
  AddEquation: vi,
  AddOperation: kc,
  AdditiveAnimationBlendMode: c2,
  AdditiveBlending: $3,
  AlphaFormat: jc,
  AlwaysDepth: Pc,
  AlwaysStencilFunc: fh,
  AmbientLight: B2,
  AmbientLightProbe: Zb,
  AnimationAction: uu,
  AnimationClip: vs,
  AnimationLoader: Ob,
  AnimationMixer: uw,
  AnimationObjectGroup: cw,
  AnimationUtils: Rb,
  ArcCurve: Uh,
  ArrayCamera: Ah,
  ArrowHelper: fu,
  Audio: cu,
  AudioAnalyser: Qb,
  AudioContext: V2,
  AudioListener: jb,
  AudioLoader: Xb,
  AxesHelper: pu,
  BackSide: ut,
  BasicDepthPacking: hh,
  BasicShadowMap: tm,
  Bone: w2,
  BooleanKeyframeTrack: qi,
  Box2: vw,
  Box3: F1,
  Box3Helper: Lw,
  BoxBufferGeometry: Dw,
  BoxGeometry: ct,
  BoxHelper: Iw,
  BufferAttribute: ee,
  BufferGeometry: F0,
  BufferGeometryLoader: lu,
  ByteType: Xc,
  Cache: Fi,
  Camera: t6,
  CameraHelper: Cw,
  CanvasTexture: tb,
  CapsuleBufferGeometry: Nw,
  CapsuleGeometry: Ns,
  CatmullRomCurve3: Fh,
  CineonToneMapping: Hc,
  CircleBufferGeometry: Ow,
  CircleGeometry: Os,
  ClampToEdgeWrapping: ht,
  Clock: H2,
  Color: f0,
  ColorKeyframeTrack: O2,
  ColorManagement: Mt,
  CompressedArrayTexture: eb,
  CompressedTexture: M2,
  CompressedTextureLoader: Ub,
  ConeBufferGeometry: Uw,
  ConeGeometry: s8,
  CubeCamera: yh,
  CubeReflectionMapping: Yn,
  CubeRefractionMapping: Zn,
  CubeTexture: Ps,
  CubeTextureLoader: Fb,
  CubeUVReflectionMapping: e8,
  CubicBezierCurve: E2,
  CubicBezierCurve3: zh,
  CubicInterpolant: Qh,
  CullFaceBack: q3,
  CullFaceFront: _c,
  CullFaceFrontBack: em,
  CullFaceNone: gc,
  Curve: h1,
  CurvePath: Bh,
  CustomBlending: yc,
  CustomToneMapping: Wc,
  CylinderBufferGeometry: Fw,
  CylinderGeometry: Ke,
  Cylindrical: _w,
  Data3DTexture: Qr,
  DataArrayTexture: Kr,
  DataTexture: k9,
  DataTextureLoader: zb,
  DataUtils: hg,
  DecrementStencilOp: um,
  DecrementWrapStencilOp: fm,
  DefaultLoadingManager: nu,
  DepthFormat: Hn,
  DepthStencilFormat: Oi,
  DepthTexture: Ch,
  DirectionalLight: k2,
  DirectionalLightHelper: Aw,
  DiscreteInterpolant: eu,
  DisplayP3ColorSpace: h2,
  DodecahedronBufferGeometry: zw,
  DodecahedronGeometry: Us,
  DoubleSide: Nt,
  DstAlphaFactor: Tc,
  DstColorFactor: Cc,
  DynamicCopyUsage: Cm,
  DynamicDrawUsage: wm,
  DynamicReadUsage: Em,
  EdgesGeometry: Vh,
  EllipseCurve: l6,
  EqualDepth: Nc,
  EqualStencilFunc: _m,
  EquirectangularReflectionMapping: is,
  EquirectangularRefractionMapping: ss,
  Euler: t8,
  EventDispatcher: ln,
  ExtrudeBufferGeometry: kw,
  ExtrudeGeometry: Fs,
  FileLoader: U1,
  Float16BufferAttribute: gg,
  Float32BufferAttribute: v0,
  Float64BufferAttribute: _g,
  FloatType: P1,
  Fog: a6,
  FogExp2: r6,
  FramebufferTexture: Qx,
  FrontSide: an,
  Frustum: n6,
  GLBufferAttribute: mw,
  GLSL1: Lm,
  GLSL3: S5,
  GreaterDepth: Uc,
  GreaterEqualDepth: Oc,
  GreaterEqualStencilFunc: bm,
  GreaterStencilFunc: ym,
  GridHelper: Ew,
  Group: Mi,
  HalfFloatType: q9,
  HemisphereLight: iu,
  HemisphereLightHelper: Sw,
  HemisphereLightProbe: Yb,
  IcosahedronBufferGeometry: Bw,
  IcosahedronGeometry: zs,
  ImageBitmapLoader: Wb,
  ImageLoader: ys,
  ImageUtils: d2,
  IncrementStencilOp: hm,
  IncrementWrapStencilOp: dm,
  InstancedBufferAttribute: K9,
  InstancedBufferGeometry: ou,
  InstancedInterleavedBuffer: pw,
  InstancedMesh: Nh,
  Int16BufferAttribute: pg,
  Int32BufferAttribute: mg,
  Int8BufferAttribute: ug,
  IntType: Zc,
  InterleavedBuffer: Ds,
  InterleavedBufferAttribute: Jn,
  Interpolant: Ws,
  InterpolateDiscrete: os,
  InterpolateLinear: ls,
  InterpolateSmooth: _r,
  InvertStencilOp: pm,
  KeepStencilOp: vr,
  KeyframeTrack: u1,
  LOD: Ph,
  LatheBufferGeometry: Vw,
  LatheGeometry: i8,
  Layers: e6,
  LessDepth: Dc,
  LessEqualDepth: Dr,
  LessEqualStencilFunc: vm,
  LessStencilFunc: gm,
  Light: ei,
  LightProbe: f6,
  Line: W0,
  Line3: yw,
  LineBasicMaterial: Ae,
  LineCurve: c6,
  LineCurve3: kh,
  LineDashedMaterial: Jh,
  LineLoop: Oh,
  LineSegments: xt,
  LinearEncoding: jn,
  LinearFilter: Pe,
  LinearInterpolant: N2,
  LinearMipMapLinearFilter: am,
  LinearMipMapNearestFilter: rm,
  LinearMipmapLinearFilter: qn,
  LinearMipmapNearestFilter: a2,
  LinearSRGBColorSpace: $9,
  LinearToneMapping: Bc,
  Loader: Ct,
  LoaderUtils: D5,
  LoadingManager: U2,
  LoopOnce: rh,
  LoopPingPong: oh,
  LoopRepeat: ah,
  LuminanceAlphaFormat: Kc,
  LuminanceFormat: Jc,
  MOUSE: Kp,
  Material: et,
  MaterialLoader: p6,
  MathUtils: D8,
  Matrix3: $0,
  Matrix4: k0,
  MaxEquation: Q3,
  Mesh: y0,
  MeshBasicMaterial: c1,
  MeshDepthMaterial: _2,
  MeshDistanceMaterial: v2,
  MeshLambertMaterial: d6,
  MeshMatcapMaterial: jh,
  MeshNormalMaterial: R2,
  MeshPhongMaterial: u6,
  MeshPhysicalMaterial: qh,
  MeshStandardMaterial: L2,
  MeshToonMaterial: $h,
  MinEquation: K3,
  MirroredRepeatWrapping: as,
  MixOperation: zc,
  MultiplyBlending: J3,
  MultiplyOperation: Ls,
  NearestFilter: ke,
  NearestMipMapLinearFilter: sm,
  NearestMipMapNearestFilter: im,
  NearestMipmapLinearFilter: k8,
  NearestMipmapNearestFilter: Nr,
  NeverDepth: Rc,
  NeverStencilFunc: mm,
  NoBlending: rn,
  NoColorSpace: om,
  NoToneMapping: D1,
  NormalAnimationBlendMode: Jr,
  NormalBlending: Ri,
  NotEqualDepth: Fc,
  NotEqualStencilFunc: xm,
  NumberKeyframeTrack: gs,
  Object3D: G0,
  ObjectLoader: Hb,
  ObjectSpaceNormalMap: dh,
  OctahedronBufferGeometry: Hw,
  OctahedronGeometry: Pt,
  OneFactor: Mc,
  OneMinusDstAlphaFactor: Ac,
  OneMinusDstColorFactor: Ic,
  OneMinusSrcAlphaFactor: r2,
  OneMinusSrcColorFactor: Ec,
  OrthographicCamera: i6,
  PCFShadowMap: i2,
  PCFSoftShadowMap: vc,
  PMREMGenerator: T5,
  Path: ds,
  PerspectiveCamera: Qe,
  Plane: Dn,
  PlaneBufferGeometry: Gw,
  PlaneGeometry: Dt,
  PlaneHelper: Rw,
  PointLight: z2,
  PointLightHelper: ww,
  Points: V8,
  PointsMaterial: Si,
  PolarGridHelper: Tw,
  PolyhedronBufferGeometry: Ww,
  PolyhedronGeometry: cn,
  PositionalAudio: Kb,
  PropertyBinding: le,
  PropertyMixer: hu,
  QuadraticBezierCurve: T2,
  QuadraticBezierCurve3: A2,
  Quaternion: Ee,
  QuaternionKeyframeTrack: r8,
  QuaternionLinearInterpolant: tu,
  RED_GREEN_RGTC2_Format: b5,
  RED_RGTC1_Format: sh,
  REVISION: $r,
  RGBADepthPacking: uh,
  RGBAFormat: Ot,
  RGBAIntegerFormat: nh,
  RGBA_ASTC_10x10_Format: _5,
  RGBA_ASTC_10x5_Format: p5,
  RGBA_ASTC_10x6_Format: m5,
  RGBA_ASTC_10x8_Format: g5,
  RGBA_ASTC_12x10_Format: v5,
  RGBA_ASTC_12x12_Format: y5,
  RGBA_ASTC_4x4_Format: a5,
  RGBA_ASTC_5x4_Format: o5,
  RGBA_ASTC_5x5_Format: l5,
  RGBA_ASTC_6x5_Format: c5,
  RGBA_ASTC_6x6_Format: h5,
  RGBA_ASTC_8x5_Format: u5,
  RGBA_ASTC_8x6_Format: d5,
  RGBA_ASTC_8x8_Format: f5,
  RGBA_BPTC_Format: gr,
  RGBA_ETC2_EAC_Format: r5,
  RGBA_PVRTC_2BPPV1_Format: i5,
  RGBA_PVRTC_4BPPV1_Format: n5,
  RGBA_S3TC_DXT1_Format: fr,
  RGBA_S3TC_DXT3_Format: pr,
  RGBA_S3TC_DXT5_Format: mr,
  RGB_ETC1_Format: ih,
  RGB_ETC2_Format: s5,
  RGB_PVRTC_2BPPV1_Format: t5,
  RGB_PVRTC_4BPPV1_Format: e5,
  RGB_S3TC_DXT1_Format: dr,
  RGFormat: eh,
  RGIntegerFormat: th,
  RawShaderMaterial: Zh,
  Ray: Rs,
  Raycaster: Y2,
  RectAreaLight: ru,
  RedFormat: l2,
  RedIntegerFormat: Qc,
  ReinhardToneMapping: Vc,
  RepeatWrapping: rs,
  ReplaceStencilOp: cm,
  ReverseSubtractEquation: bc,
  RingBufferGeometry: Xw,
  RingGeometry: ks,
  SIGNED_RED_GREEN_RGTC2_Format: w5,
  SIGNED_RED_RGTC1_Format: x5,
  SRGBColorSpace: i1,
  Scene: x2,
  ShaderChunk: Y0,
  ShaderLib: s1,
  ShaderMaterial: l1,
  ShadowMaterial: Yh,
  Shape: Ni,
  ShapeBufferGeometry: Yw,
  ShapeGeometry: Bs,
  ShapePath: Pw,
  ShapeUtils: N1,
  ShortType: Yc,
  Skeleton: o6,
  SkeletonHelper: bw,
  SkinnedMesh: Dh,
  Source: wi,
  Sphere: z1,
  SphereBufferGeometry: Zw,
  SphereGeometry: hn,
  Spherical: gw,
  SphericalHarmonics3: au,
  SplineCurve: C2,
  SpotLight: su,
  SpotLightHelper: xw,
  Sprite: Rh,
  SpriteMaterial: b2,
  SrcAlphaFactor: s2,
  SrcAlphaSaturateFactor: Lc,
  SrcColorFactor: Sc,
  StaticCopyUsage: Am,
  StaticDrawUsage: hs,
  StaticReadUsage: Sm,
  StereoCamera: qb,
  StreamCopyUsage: Im,
  StreamDrawUsage: Mm,
  StreamReadUsage: Tm,
  StringKeyframeTrack: $i,
  SubtractEquation: xc,
  SubtractiveBlending: j3,
  TOUCH: Qp,
  TangentSpaceNormalMap: Qn,
  TetrahedronBufferGeometry: qw,
  TetrahedronGeometry: Vs,
  Texture: Be,
  TextureLoader: P5,
  TorusBufferGeometry: $w,
  TorusGeometry: tn,
  TorusKnotBufferGeometry: jw,
  TorusKnotGeometry: Hs,
  Triangle: Et,
  TriangleFanDrawMode: M5,
  TriangleStripDrawMode: ch,
  TrianglesDrawMode: lh,
  TubeBufferGeometry: Jw,
  TubeGeometry: Gs,
  TwoPassDoubleSide: nm,
  UVMapping: jr,
  Uint16BufferAttribute: f2,
  Uint32BufferAttribute: p2,
  Uint8BufferAttribute: dg,
  Uint8ClampedBufferAttribute: fg,
  Uniform: X2,
  UniformsGroup: fw,
  UniformsLib: _0,
  UniformsUtils: m2,
  UnsignedByteType: $n,
  UnsignedInt248Type: Pi,
  UnsignedIntType: Un,
  UnsignedShort4444Type: qc,
  UnsignedShort5551Type: $c,
  UnsignedShortType: o2,
  VSMShadowMap: P9,
  Vector2: o0,
  Vector3: C,
  Vector4: pe,
  VectorKeyframeTrack: _s,
  VideoTexture: Kx,
  WebGL1Renderer: Ih,
  WebGL3DRenderTarget: Qm,
  WebGLArrayRenderTarget: Km,
  WebGLCubeRenderTarget: xh,
  WebGLMultipleRenderTargets: eg,
  WebGLRenderTarget: o1,
  WebGLRenderer: y2,
  WebGLUtils: Th,
  WireframeGeometry: Xh,
  WrapAroundEnding: cs,
  ZeroCurvatureEnding: xi,
  ZeroFactor: wc,
  ZeroSlopeEnding: bi,
  ZeroStencilOp: lm,
  _SRGBAFormat: Or,
  sRGBEncoding: ve
}, Symbol.toStringTag, { value: "Module" }));
/*!
 * camera-controls
 * https://github.com/yomotsu/camera-controls
 * (c) 2017 @yomotsu
 * Released under the MIT License.
 */
const je = {
  LEFT: 1,
  RIGHT: 2,
  MIDDLE: 4
}, d0 = Object.freeze({
  NONE: 0,
  ROTATE: 1,
  TRUCK: 2,
  OFFSET: 4,
  DOLLY: 8,
  ZOOM: 16,
  TOUCH_ROTATE: 32,
  TOUCH_TRUCK: 64,
  TOUCH_OFFSET: 128,
  TOUCH_DOLLY: 256,
  TOUCH_ZOOM: 512,
  TOUCH_DOLLY_TRUCK: 1024,
  TOUCH_DOLLY_OFFSET: 2048,
  TOUCH_DOLLY_ROTATE: 4096,
  TOUCH_ZOOM_TRUCK: 8192,
  TOUCH_ZOOM_OFFSET: 16384,
  TOUCH_ZOOM_ROTATE: 32768
});
function di(i) {
  return i.isPerspectiveCamera;
}
function Mn(i) {
  return i.isOrthographicCamera;
}
const w9 = Math.PI * 2, Wa = Math.PI / 2, gu = 1e-5;
function Se(i, e = gu) {
  return Math.abs(i) < e;
}
function be(i, e, t = gu) {
  return Se(i - e, t);
}
function Xa(i, e) {
  return Math.round(i / e) * e;
}
function M8(i) {
  return isFinite(i) ? i : i < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;
}
function S8(i) {
  return Math.abs(i) < Number.MAX_VALUE ? i : i * (1 / 0);
}
function s3(i, e) {
  e.set(0, 0), i.forEach((t) => {
    e.x += t.clientX, e.y += t.clientY;
  }), e.x /= i.length, e.y /= i.length;
}
function r3(i, e) {
  return Mn(i) ? (console.warn(`${e} is not supported in OrthographicCamera`), !0) : !1;
}
function Ya(i) {
  return i.invert ? i.invert() : i.inverse(), i;
}
let Kw = class {
  constructor() {
    this._listeners = {};
  }
  /**
   * Adds the specified event listener.
   * @param type event name
   * @param listener handler function
   * @category Methods
   */
  addEventListener(e, t) {
    const n = this._listeners;
    n[e] === void 0 && (n[e] = []), n[e].indexOf(t) === -1 && n[e].push(t);
  }
  /**
   * Presence of the specified event listener.
   * @param type event name
   * @param listener handler function
   * @category Methods
   */
  hasEventListener(e, t) {
    const n = this._listeners;
    return n[e] !== void 0 && n[e].indexOf(t) !== -1;
  }
  /**
   * Removes the specified event listener
   * @param type event name
   * @param listener handler function
   * @category Methods
   */
  removeEventListener(e, t) {
    const s = this._listeners[e];
    if (s !== void 0) {
      const r = s.indexOf(t);
      r !== -1 && s.splice(r, 1);
    }
  }
  /**
   * Removes all event listeners
   * @param type event name
   * @category Methods
   */
  removeAllEventListeners(e) {
    if (!e) {
      this._listeners = {};
      return;
    }
    Array.isArray(this._listeners[e]) && (this._listeners[e].length = 0);
  }
  /**
   * Fire an event type.
   * @param event DispatcherEvent
   * @category Methods
   */
  dispatchEvent(e) {
    const n = this._listeners[e.type];
    if (n !== void 0) {
      e.target = this;
      const s = n.slice(0);
      for (let r = 0, a = s.length; r < a; r++)
        s[r].call(this, e);
    }
  }
};
const Qw = "1.38.1", W7 = 1 / 8, _u = typeof window < "u", eM = _u && /Mac/.test(navigator.platform), Za = !(_u && "PointerEvent" in window);
let R0, qa, X7, a3, bt, Q0, _e, M9, g1, _1, fi, $a, ja, n1, E8, B9, Ja, o3, Ka, l3, c3, Y7;
class U8 extends Kw {
  /**
       * Injects THREE as the dependency. You can then proceed to use CameraControls.
       *
       * e.g
       * ```javascript
       * CameraControls.install( { THREE: THREE } );
       * ```
       *
       * Note: If you do not wish to use enter three.js to reduce file size(tree-shaking for example), make a subset to install.
       *
       * ```js
       * import {
       * 	Vector2,
       * 	Vector3,
       * 	Vector4,
       * 	Quaternion,
       * 	Matrix4,
       * 	Spherical,
       * 	Box3,
       * 	Sphere,
       * 	Raycaster,
       * 	MathUtils,
       * } from 'three';
       *
       * const subsetOfTHREE = {
       * 	Vector2   : Vector2,
       * 	Vector3   : Vector3,
       * 	Vector4   : Vector4,
       * 	Quaternion: Quaternion,
       * 	Matrix4   : Matrix4,
       * 	Spherical : Spherical,
       * 	Box3      : Box3,
       * 	Sphere    : Sphere,
       * 	Raycaster : Raycaster,
       * 	MathUtils : {
       * 		DEG2RAD: MathUtils.DEG2RAD,
       * 		clamp: MathUtils.clamp,
       * 	},
       * };
  
       * CameraControls.install( { THREE: subsetOfTHREE } );
       * ```
       * @category Statics
       */
  static install(e) {
    R0 = e.THREE, qa = Object.freeze(new R0.Vector3(0, 0, 0)), X7 = Object.freeze(new R0.Vector3(0, 1, 0)), a3 = Object.freeze(new R0.Vector3(0, 0, 1)), bt = new R0.Vector2(), Q0 = new R0.Vector3(), _e = new R0.Vector3(), M9 = new R0.Vector3(), g1 = new R0.Vector3(), _1 = new R0.Vector3(), fi = new R0.Vector3(), $a = new R0.Vector3(), ja = new R0.Vector3(), n1 = new R0.Spherical(), E8 = new R0.Spherical(), B9 = new R0.Box3(), Ja = new R0.Box3(), o3 = new R0.Sphere(), Ka = new R0.Quaternion(), l3 = new R0.Quaternion(), c3 = new R0.Matrix4(), Y7 = new R0.Raycaster();
  }
  /**
   * list all ACTIONs
   * @category Statics
   */
  static get ACTION() {
    return d0;
  }
  /**
   * Creates a `CameraControls` instance.
   *
   * Note:
   * You **must install** three.js before using camera-controls. see [#install](#install)
   * Not doing so will lead to runtime errors (`undefined` references to THREE).
   *
   * e.g.
   * ```
   * CameraControls.install( { THREE } );
   * const cameraControls = new CameraControls( camera, domElement );
   * ```
   *
   * @param camera A `THREE.PerspectiveCamera` or `THREE.OrthographicCamera` to be controlled.
   * @param domElement A `HTMLElement` for the draggable area, usually `renderer.domElement`.
   * @category Constructor
   */
  constructor(e, t) {
    super(), this.minPolarAngle = 0, this.maxPolarAngle = Math.PI, this.minAzimuthAngle = -1 / 0, this.maxAzimuthAngle = 1 / 0, this.minDistance = 0, this.maxDistance = 1 / 0, this.infinityDolly = !1, this.minZoom = 0.01, this.maxZoom = 1 / 0, this.dampingFactor = 0.05, this.draggingDampingFactor = 0.25, this.azimuthRotateSpeed = 1, this.polarRotateSpeed = 1, this.dollySpeed = 1, this.truckSpeed = 2, this.dollyToCursor = !1, this.dragToOffset = !1, this.verticalDragToForward = !1, this.boundaryFriction = 0, this.restThreshold = 0.01, this.colliderMeshes = [], this.cancel = () => {
    }, this._enabled = !0, this._state = d0.NONE, this._viewport = null, this._affectOffset = !1, this._dollyControlAmount = 0, this._hasRested = !0, this._boundaryEnclosesCamera = !1, this._needsUpdate = !0, this._updatedLastTime = !1, this._elementRect = new DOMRect(), this._activePointers = [], this._truckInternal = (w, x, S) => {
      if (di(this._camera)) {
        const T = Q0.copy(this._camera.position).sub(this._target), M = this._camera.getEffectiveFOV() * R0.MathUtils.DEG2RAD, A = T.length() * Math.tan(M * 0.5), D = this.truckSpeed * w * A / this._elementRect.height, z = this.truckSpeed * x * A / this._elementRect.height;
        this.verticalDragToForward ? (S ? this.setFocalOffset(this._focalOffsetEnd.x + D, this._focalOffsetEnd.y, this._focalOffsetEnd.z, !0) : this.truck(D, 0, !0), this.forward(-z, !0)) : S ? this.setFocalOffset(this._focalOffsetEnd.x + D, this._focalOffsetEnd.y + z, this._focalOffsetEnd.z, !0) : this.truck(D, z, !0);
      } else if (Mn(this._camera)) {
        const T = this._camera, M = w * (T.right - T.left) / T.zoom / this._elementRect.width, A = x * (T.top - T.bottom) / T.zoom / this._elementRect.height;
        S ? this.setFocalOffset(this._focalOffsetEnd.x + M, this._focalOffsetEnd.y + A, this._focalOffsetEnd.z, !0) : this.truck(M, A, !0);
      }
    }, this._rotateInternal = (w, x) => {
      const S = w9 * this.azimuthRotateSpeed * w / this._elementRect.height, T = w9 * this.polarRotateSpeed * x / this._elementRect.height;
      this.rotate(S, T, !0);
    }, this._dollyInternal = (w, x, S) => {
      const T = Math.pow(0.95, -w * this.dollySpeed), M = this._sphericalEnd.radius * T, A = this._sphericalEnd.radius, D = A * (w >= 0 ? -1 : 1);
      this.dollyTo(M), this.infinityDolly && (M < this.minDistance || this.maxDistance === this.minDistance) && (this._camera.getWorldDirection(Q0), this._targetEnd.add(Q0.normalize().multiplyScalar(D)), this._target.add(Q0.normalize().multiplyScalar(D))), this.dollyToCursor && (this._dollyControlAmount += this._sphericalEnd.radius - A, this.infinityDolly && (M < this.minDistance || this.maxDistance === this.minDistance) && (this._dollyControlAmount -= D), this._dollyControlCoord.set(x, S));
    }, this._zoomInternal = (w, x, S) => {
      const T = Math.pow(0.95, w * this.dollySpeed), M = this._zoomEnd;
      this.zoomTo(this._zoom * T), this.dollyToCursor && (this._dollyControlAmount += this._zoomEnd - M, this._dollyControlCoord.set(x, S));
    }, typeof R0 > "u" && console.error("camera-controls: `THREE` is undefined. You must first run `CameraControls.install( { THREE: THREE } )`. Check the docs for further information."), this._camera = e, this._yAxisUpSpace = new R0.Quaternion().setFromUnitVectors(this._camera.up, X7), this._yAxisUpSpaceInverse = Ya(this._yAxisUpSpace.clone()), this._state = d0.NONE, this._target = new R0.Vector3(), this._targetEnd = this._target.clone(), this._focalOffset = new R0.Vector3(), this._focalOffsetEnd = this._focalOffset.clone(), this._spherical = new R0.Spherical().setFromVector3(Q0.copy(this._camera.position).applyQuaternion(this._yAxisUpSpace)), this._sphericalEnd = this._spherical.clone(), this._zoom = this._camera.zoom, this._zoomEnd = this._zoom, this._nearPlaneCorners = [
      new R0.Vector3(),
      new R0.Vector3(),
      new R0.Vector3(),
      new R0.Vector3()
    ], this._updateNearPlaneCorners(), this._boundary = new R0.Box3(new R0.Vector3(-1 / 0, -1 / 0, -1 / 0), new R0.Vector3(1 / 0, 1 / 0, 1 / 0)), this._target0 = this._target.clone(), this._position0 = this._camera.position.clone(), this._zoom0 = this._zoom, this._focalOffset0 = this._focalOffset.clone(), this._dollyControlAmount = 0, this._dollyControlCoord = new R0.Vector2(), this.mouseButtons = {
      left: d0.ROTATE,
      middle: d0.DOLLY,
      right: d0.TRUCK,
      wheel: di(this._camera) ? d0.DOLLY : Mn(this._camera) ? d0.ZOOM : d0.NONE
    }, this.touches = {
      one: d0.TOUCH_ROTATE,
      two: di(this._camera) ? d0.TOUCH_DOLLY_TRUCK : Mn(this._camera) ? d0.TOUCH_ZOOM_TRUCK : d0.NONE,
      three: d0.TOUCH_TRUCK
    };
    const n = new R0.Vector2(), s = new R0.Vector2(), r = new R0.Vector2(), a = (w) => {
      if (!this._enabled || !this._domElement)
        return;
      const x = {
        pointerId: w.pointerId,
        clientX: w.clientX,
        clientY: w.clientY,
        deltaX: 0,
        deltaY: 0
      };
      this._activePointers.push(x), this._domElement.ownerDocument.removeEventListener("pointermove", l, { passive: !1 }), this._domElement.ownerDocument.removeEventListener("pointerup", u), this._domElement.ownerDocument.addEventListener("pointermove", l, { passive: !1 }), this._domElement.ownerDocument.addEventListener("pointerup", u), v(w);
    }, o = (w) => {
      if (!this._enabled || !this._domElement)
        return;
      const x = {
        pointerId: 0,
        clientX: w.clientX,
        clientY: w.clientY,
        deltaX: 0,
        deltaY: 0
      };
      this._activePointers.push(x), this._domElement.ownerDocument.removeEventListener("mousemove", h), this._domElement.ownerDocument.removeEventListener("mouseup", f), this._domElement.ownerDocument.addEventListener("mousemove", h), this._domElement.ownerDocument.addEventListener("mouseup", f), v(w);
    }, c = (w) => {
      !this._enabled || !this._domElement || (w.preventDefault(), Array.prototype.forEach.call(w.changedTouches, (x) => {
        const S = {
          pointerId: x.identifier,
          clientX: x.clientX,
          clientY: x.clientY,
          deltaX: 0,
          deltaY: 0
        };
        this._activePointers.push(S);
      }), this._domElement.ownerDocument.removeEventListener("touchmove", d, { passive: !1 }), this._domElement.ownerDocument.removeEventListener("touchend", p), this._domElement.ownerDocument.addEventListener("touchmove", d, { passive: !1 }), this._domElement.ownerDocument.addEventListener("touchend", p), v(w));
    }, l = (w) => {
      w.cancelable && w.preventDefault();
      const x = w.pointerId, S = this._findPointerById(x);
      if (S) {
        if (S.clientX = w.clientX, S.clientY = w.clientY, S.deltaX = w.movementX, S.deltaY = w.movementY, w.pointerType === "touch")
          switch (this._activePointers.length) {
            case 1:
              this._state = this.touches.one;
              break;
            case 2:
              this._state = this.touches.two;
              break;
            case 3:
              this._state = this.touches.three;
              break;
          }
        else
          this._state = 0, (w.buttons & je.LEFT) === je.LEFT && (this._state = this._state | this.mouseButtons.left), (w.buttons & je.MIDDLE) === je.MIDDLE && (this._state = this._state | this.mouseButtons.middle), (w.buttons & je.RIGHT) === je.RIGHT && (this._state = this._state | this.mouseButtons.right);
        y();
      }
    }, h = (w) => {
      const x = this._findPointerById(0);
      x && (x.clientX = w.clientX, x.clientY = w.clientY, x.deltaX = w.movementX, x.deltaY = w.movementY, this._state = 0, (w.buttons & je.LEFT) === je.LEFT && (this._state = this._state | this.mouseButtons.left), (w.buttons & je.MIDDLE) === je.MIDDLE && (this._state = this._state | this.mouseButtons.middle), (w.buttons & je.RIGHT) === je.RIGHT && (this._state = this._state | this.mouseButtons.right), y());
    }, d = (w) => {
      w.cancelable && w.preventDefault(), Array.prototype.forEach.call(w.changedTouches, (x) => {
        const S = x.identifier, T = this._findPointerById(S);
        T && (T.clientX = x.clientX, T.clientY = x.clientY);
      }), y();
    }, u = (w) => {
      const x = w.pointerId, S = this._findPointerById(x);
      if (S && this._activePointers.splice(this._activePointers.indexOf(S), 1), w.pointerType === "touch")
        switch (this._activePointers.length) {
          case 0:
            this._state = d0.NONE;
            break;
          case 1:
            this._state = this.touches.one;
            break;
          case 2:
            this._state = this.touches.two;
            break;
          case 3:
            this._state = this.touches.three;
            break;
        }
      else
        this._state = d0.NONE;
      b();
    }, f = () => {
      const w = this._findPointerById(0);
      w && this._activePointers.splice(this._activePointers.indexOf(w), 1), this._state = d0.NONE, b();
    }, p = (w) => {
      switch (Array.prototype.forEach.call(w.changedTouches, (x) => {
        const S = x.identifier, T = this._findPointerById(S);
        T && this._activePointers.splice(this._activePointers.indexOf(T), 1);
      }), this._activePointers.length) {
        case 0:
          this._state = d0.NONE;
          break;
        case 1:
          this._state = this.touches.one;
          break;
        case 2:
          this._state = this.touches.two;
          break;
        case 3:
          this._state = this.touches.three;
          break;
      }
      b();
    };
    let _ = -1;
    const g = (w) => {
      if (!this._enabled || this.mouseButtons.wheel === d0.NONE)
        return;
      if (w.preventDefault(), this.dollyToCursor || this.mouseButtons.wheel === d0.ROTATE || this.mouseButtons.wheel === d0.TRUCK) {
        const A = performance.now();
        _ - A < 1e3 && this._getClientRect(this._elementRect), _ = A;
      }
      const x = eM ? -1 : -3, S = w.deltaMode === 1 ? w.deltaY / x : w.deltaY / (x * 10), T = this.dollyToCursor ? (w.clientX - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0, M = this.dollyToCursor ? (w.clientY - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;
      switch (this.mouseButtons.wheel) {
        case d0.ROTATE: {
          this._rotateInternal(w.deltaX, w.deltaY);
          break;
        }
        case d0.TRUCK: {
          this._truckInternal(w.deltaX, w.deltaY, !1);
          break;
        }
        case d0.OFFSET: {
          this._truckInternal(w.deltaX, w.deltaY, !0);
          break;
        }
        case d0.DOLLY: {
          this._dollyInternal(-S, T, M);
          break;
        }
        case d0.ZOOM: {
          this._zoomInternal(-S, T, M);
          break;
        }
      }
      this.dispatchEvent({ type: "control" });
    }, m = (w) => {
      this._enabled && w.preventDefault();
    }, v = (w) => {
      if (!this._enabled)
        return;
      if (s3(this._activePointers, bt), this._getClientRect(this._elementRect), n.copy(bt), s.copy(bt), this._activePointers.length >= 2) {
        const S = bt.x - this._activePointers[1].clientX, T = bt.y - this._activePointers[1].clientY, M = Math.sqrt(S * S + T * T);
        r.set(0, M);
        const A = (this._activePointers[0].clientX + this._activePointers[1].clientX) * 0.5, D = (this._activePointers[0].clientY + this._activePointers[1].clientY) * 0.5;
        s.set(A, D);
      }
      if ("touches" in w || "pointerType" in w && w.pointerType === "touch")
        switch (this._activePointers.length) {
          case 1:
            this._state = this.touches.one;
            break;
          case 2:
            this._state = this.touches.two;
            break;
          case 3:
            this._state = this.touches.three;
            break;
        }
      else
        this._state = 0, (w.buttons & je.LEFT) === je.LEFT && (this._state = this._state | this.mouseButtons.left), (w.buttons & je.MIDDLE) === je.MIDDLE && (this._state = this._state | this.mouseButtons.middle), (w.buttons & je.RIGHT) === je.RIGHT && (this._state = this._state | this.mouseButtons.right);
      this.dispatchEvent({ type: "controlstart" });
    }, y = () => {
      if (!this._enabled)
        return;
      s3(this._activePointers, bt);
      const w = this._domElement && document.pointerLockElement === this._domElement, x = w ? -this._activePointers[0].deltaX : s.x - bt.x, S = w ? -this._activePointers[0].deltaY : s.y - bt.y;
      if (s.copy(bt), ((this._state & d0.ROTATE) === d0.ROTATE || (this._state & d0.TOUCH_ROTATE) === d0.TOUCH_ROTATE || (this._state & d0.TOUCH_DOLLY_ROTATE) === d0.TOUCH_DOLLY_ROTATE || (this._state & d0.TOUCH_ZOOM_ROTATE) === d0.TOUCH_ZOOM_ROTATE) && this._rotateInternal(x, S), (this._state & d0.DOLLY) === d0.DOLLY || (this._state & d0.ZOOM) === d0.ZOOM) {
        const T = this.dollyToCursor ? (n.x - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0, M = this.dollyToCursor ? (n.y - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;
        (this._state & d0.DOLLY) === d0.DOLLY ? this._dollyInternal(S * W7, T, M) : this._zoomInternal(S * W7, T, M);
      }
      if ((this._state & d0.TOUCH_DOLLY) === d0.TOUCH_DOLLY || (this._state & d0.TOUCH_ZOOM) === d0.TOUCH_ZOOM || (this._state & d0.TOUCH_DOLLY_TRUCK) === d0.TOUCH_DOLLY_TRUCK || (this._state & d0.TOUCH_ZOOM_TRUCK) === d0.TOUCH_ZOOM_TRUCK || (this._state & d0.TOUCH_DOLLY_OFFSET) === d0.TOUCH_DOLLY_OFFSET || (this._state & d0.TOUCH_ZOOM_OFFSET) === d0.TOUCH_ZOOM_OFFSET || (this._state & d0.TOUCH_DOLLY_ROTATE) === d0.TOUCH_DOLLY_ROTATE || (this._state & d0.TOUCH_ZOOM_ROTATE) === d0.TOUCH_ZOOM_ROTATE) {
        const T = bt.x - this._activePointers[1].clientX, M = bt.y - this._activePointers[1].clientY, A = Math.sqrt(T * T + M * M), D = r.y - A;
        r.set(0, A);
        const z = this.dollyToCursor ? (s.x - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0, O = this.dollyToCursor ? (s.y - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;
        (this._state & d0.TOUCH_DOLLY) === d0.TOUCH_DOLLY || (this._state & d0.TOUCH_DOLLY_ROTATE) === d0.TOUCH_DOLLY_ROTATE || (this._state & d0.TOUCH_DOLLY_TRUCK) === d0.TOUCH_DOLLY_TRUCK || (this._state & d0.TOUCH_DOLLY_OFFSET) === d0.TOUCH_DOLLY_OFFSET ? this._dollyInternal(D * W7, z, O) : this._zoomInternal(D * W7, z, O);
      }
      ((this._state & d0.TRUCK) === d0.TRUCK || (this._state & d0.TOUCH_TRUCK) === d0.TOUCH_TRUCK || (this._state & d0.TOUCH_DOLLY_TRUCK) === d0.TOUCH_DOLLY_TRUCK || (this._state & d0.TOUCH_ZOOM_TRUCK) === d0.TOUCH_ZOOM_TRUCK) && this._truckInternal(x, S, !1), ((this._state & d0.OFFSET) === d0.OFFSET || (this._state & d0.TOUCH_OFFSET) === d0.TOUCH_OFFSET || (this._state & d0.TOUCH_DOLLY_OFFSET) === d0.TOUCH_DOLLY_OFFSET || (this._state & d0.TOUCH_ZOOM_OFFSET) === d0.TOUCH_ZOOM_OFFSET) && this._truckInternal(x, S, !0), this.dispatchEvent({ type: "control" });
    }, b = () => {
      s3(this._activePointers, bt), s.copy(bt), this._activePointers.length === 0 && this._domElement && (this._domElement.ownerDocument.removeEventListener("pointermove", l, { passive: !1 }), this._domElement.ownerDocument.removeEventListener("pointerup", u), this._domElement.ownerDocument.removeEventListener("touchmove", d, { passive: !1 }), this._domElement.ownerDocument.removeEventListener("touchend", p), this.dispatchEvent({ type: "controlend" }));
    };
    this._addAllEventListeners = (w) => {
      this._domElement = w, this._domElement.style.touchAction = "none", this._domElement.style.userSelect = "none", this._domElement.style.webkitUserSelect = "none", this._domElement.addEventListener("pointerdown", a), Za && this._domElement.addEventListener("mousedown", o), Za && this._domElement.addEventListener("touchstart", c), this._domElement.addEventListener("pointercancel", u), this._domElement.addEventListener("wheel", g, { passive: !1 }), this._domElement.addEventListener("contextmenu", m);
    }, this._removeAllEventListeners = () => {
      this._domElement && (this._domElement.removeEventListener("pointerdown", a), this._domElement.removeEventListener("mousedown", o), this._domElement.removeEventListener("touchstart", c), this._domElement.removeEventListener("pointercancel", u), this._domElement.removeEventListener("wheel", g, { passive: !1 }), this._domElement.removeEventListener("contextmenu", m), this._domElement.ownerDocument.removeEventListener("pointermove", l, { passive: !1 }), this._domElement.ownerDocument.removeEventListener("mousemove", h), this._domElement.ownerDocument.removeEventListener("touchmove", d, { passive: !1 }), this._domElement.ownerDocument.removeEventListener("pointerup", u), this._domElement.ownerDocument.removeEventListener("mouseup", f), this._domElement.ownerDocument.removeEventListener("touchend", p));
    }, this.cancel = () => {
      this._state !== d0.NONE && (this._state = d0.NONE, this._activePointers.length = 0, b());
    }, t && this.connect(t), this.update(0);
  }
  /**
   * The camera to be controlled
   * @category Properties
   */
  get camera() {
    return this._camera;
  }
  set camera(e) {
    this._camera = e, this.updateCameraUp(), this._camera.updateProjectionMatrix(), this._updateNearPlaneCorners(), this._needsUpdate = !0;
  }
  /**
   * Whether or not the controls are enabled.
   * `false` to disable user dragging/touch-move, but all methods works.
   * @category Properties
   */
  get enabled() {
    return this._enabled;
  }
  set enabled(e) {
    this._domElement && (this._enabled = e, e ? (this._domElement.style.touchAction = "none", this._domElement.style.userSelect = "none", this._domElement.style.webkitUserSelect = "none") : (this.cancel(), this._domElement.style.touchAction = "", this._domElement.style.userSelect = "", this._domElement.style.webkitUserSelect = ""));
  }
  /**
   * Returns `true` if the controls are active updating.
   * readonly value.
   * @category Properties
   */
  get active() {
    return !this._hasRested;
  }
  /**
   * Getter for the current `ACTION`.
   * readonly value.
   * @category Properties
   */
  get currentAction() {
    return this._state;
  }
  /**
   * get/set Current distance.
   * @category Properties
   */
  get distance() {
    return this._spherical.radius;
  }
  set distance(e) {
    this._spherical.radius === e && this._sphericalEnd.radius === e || (this._spherical.radius = e, this._sphericalEnd.radius = e, this._needsUpdate = !0);
  }
  // horizontal angle
  /**
   * get/set the azimuth angle (horizontal) in radians.
   * Every 360 degrees turn is added to `.azimuthAngle` value, which is accumulative.
   * @category Properties
   */
  get azimuthAngle() {
    return this._spherical.theta;
  }
  set azimuthAngle(e) {
    this._spherical.theta === e && this._sphericalEnd.theta === e || (this._spherical.theta = e, this._sphericalEnd.theta = e, this._needsUpdate = !0);
  }
  // vertical angle
  /**
   * get/set the polar angle (vertical) in radians.
   * @category Properties
   */
  get polarAngle() {
    return this._spherical.phi;
  }
  set polarAngle(e) {
    this._spherical.phi === e && this._sphericalEnd.phi === e || (this._spherical.phi = e, this._sphericalEnd.phi = e, this._needsUpdate = !0);
  }
  /**
   * Whether camera position should be enclosed in the boundary or not.
   * @category Properties
   */
  get boundaryEnclosesCamera() {
    return this._boundaryEnclosesCamera;
  }
  set boundaryEnclosesCamera(e) {
    this._boundaryEnclosesCamera = e, this._needsUpdate = !0;
  }
  /**
   * Adds the specified event listener.
   * Applicable event types (which is `K`) are:
   * | Event name          | Timing |
   * | ------------------- | ------ |
   * | `'controlstart'`    | When the user starts to control the camera via mouse / touches. ¹ |
   * | `'control'`         | When the user controls the camera (dragging). |
   * | `'controlend'`      | When the user ends to control the camera. ¹ |
   * | `'transitionstart'` | When any kind of transition starts, either user control or using a method with `enableTransition = true` |
   * | `'update'`          | When the camera position is updated. |
   * | `'wake'`            | When the camera starts moving. |
   * | `'rest'`            | When the camera movement is below `.restThreshold` ². |
   * | `'sleep'`           | When the camera end moving. |
   *
   * 1. `mouseButtons.wheel` (Mouse wheel control) does not emit `'controlstart'` and `'controlend'`. `mouseButtons.wheel` uses scroll-event internally, and scroll-event happens intermittently. That means "start" and "end" cannot be detected.
   * 2. Due to damping, `sleep` will usually fire a few seconds after the camera _appears_ to have stopped moving. If you want to do something (e.g. enable UI, perform another transition) at the point when the camera has stopped, you probably want the `rest` event. This can be fine tuned using the `.restThreshold` parameter. See the [Rest and Sleep Example](https://yomotsu.github.io/camera-controls/examples/rest-and-sleep.html).
   *
   * e.g.
   * ```
   * cameraControl.addEventListener( 'controlstart', myCallbackFunction );
   * ```
   * @param type event name
   * @param listener handler function
   * @category Methods
   */
  addEventListener(e, t) {
    super.addEventListener(e, t);
  }
  /**
   * Removes the specified event listener
   * e.g.
   * ```
   * cameraControl.addEventListener( 'controlstart', myCallbackFunction );
   * ```
   * @param type event name
   * @param listener handler function
   * @category Methods
   */
  removeEventListener(e, t) {
    super.removeEventListener(e, t);
  }
  /**
   * Rotate azimuthal angle(horizontal) and polar angle(vertical).
   * Every value is added to the current value.
   * @param azimuthAngle Azimuth rotate angle. In radian.
   * @param polarAngle Polar rotate angle. In radian.
   * @param enableTransition Whether to move smoothly or immediately
   * @category Methods
   */
  rotate(e, t, n = !1) {
    return this.rotateTo(this._sphericalEnd.theta + e, this._sphericalEnd.phi + t, n);
  }
  /**
   * Rotate azimuthal angle(horizontal) to the given angle and keep the same polar angle(vertical) target.
   *
   * e.g.
   * ```
   * cameraControls.rotateAzimuthTo( 30 * THREE.MathUtils.DEG2RAD, true );
   * ```
   * @param azimuthAngle Azimuth rotate angle. In radian.
   * @param enableTransition Whether to move smoothly or immediately
   * @category Methods
   */
  rotateAzimuthTo(e, t = !1) {
    return this.rotateTo(e, this._sphericalEnd.phi, t);
  }
  /**
   * Rotate polar angle(vertical) to the given angle and keep the same azimuthal angle(horizontal) target.
   *
   * e.g.
   * ```
   * cameraControls.rotatePolarTo( 30 * THREE.MathUtils.DEG2RAD, true );
   * ```
   * @param polarAngle Polar rotate angle. In radian.
   * @param enableTransition Whether to move smoothly or immediately
   * @category Methods
   */
  rotatePolarTo(e, t = !1) {
    return this.rotateTo(this._sphericalEnd.theta, e, t);
  }
  /**
   * Rotate azimuthal angle(horizontal) and polar angle(vertical) to the given angle.
   * Camera view will rotate over the orbit pivot absolutely:
   *
   * azimuthAngle
   * ```
   *       0º
   *         \
   * 90º -----+----- -90º
   *           \
   *           180º
   * ```
   * | direction | angle                  |
   * | --------- | ---------------------- |
   * | front     | 0º                     |
   * | left      | 90º (`Math.PI / 2`)    |
   * | right     | -90º (`- Math.PI / 2`) |
   * | back      | 180º (`Math.PI`)       |
   *
   * polarAngle
   * ```
   *     180º
   *      |
   *      90º
   *      |
   *      0º
   * ```
   * | direction            | angle                  |
   * | -------------------- | ---------------------- |
   * | top/sky              | 180º (`Math.PI`)       |
   * | horizontal from view | 90º (`Math.PI / 2`)    |
   * | bottom/floor         | 0º                     |
   *
   * @param azimuthAngle Azimuth rotate angle to. In radian.
   * @param polarAngle Polar rotate angle to. In radian.
   * @param enableTransition  Whether to move smoothly or immediately
   * @category Methods
   */
  rotateTo(e, t, n = !1) {
    const s = R0.MathUtils.clamp(e, this.minAzimuthAngle, this.maxAzimuthAngle), r = R0.MathUtils.clamp(t, this.minPolarAngle, this.maxPolarAngle);
    this._sphericalEnd.theta = s, this._sphericalEnd.phi = r, this._sphericalEnd.makeSafe(), this._needsUpdate = !0, n || (this._spherical.theta = this._sphericalEnd.theta, this._spherical.phi = this._sphericalEnd.phi);
    const a = !n || be(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) && be(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold);
    return this._createOnRestPromise(a);
  }
  /**
   * Dolly in/out camera position.
   * @param distance Distance of dollyIn. Negative number for dollyOut.
   * @param enableTransition Whether to move smoothly or immediately.
   * @category Methods
   */
  dolly(e, t = !1) {
    return this.dollyTo(this._sphericalEnd.radius - e, t);
  }
  /**
   * Dolly in/out camera position to given distance.
   * @param distance Distance of dolly.
   * @param enableTransition Whether to move smoothly or immediately.
   * @category Methods
   */
  dollyTo(e, t = !1) {
    const n = this._sphericalEnd.radius, s = R0.MathUtils.clamp(e, this.minDistance, this.maxDistance);
    if (this.colliderMeshes.length >= 1) {
      const o = this._collisionTest(), c = be(o, this._spherical.radius);
      if (!(n > s) && c)
        return Promise.resolve();
      this._sphericalEnd.radius = Math.min(s, o);
    } else
      this._sphericalEnd.radius = s;
    this._needsUpdate = !0, t || (this._spherical.radius = this._sphericalEnd.radius);
    const a = !t || be(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);
    return this._createOnRestPromise(a);
  }
  /**
   * Zoom in/out camera. The value is added to camera zoom.
   * Limits set with `.minZoom` and `.maxZoom`
   * @param zoomStep zoom scale
   * @param enableTransition Whether to move smoothly or immediately
   * @category Methods
   */
  zoom(e, t = !1) {
    return this.zoomTo(this._zoomEnd + e, t);
  }
  /**
   * Zoom in/out camera to given scale. The value overwrites camera zoom.
   * Limits set with .minZoom and .maxZoom
   * @param zoom
   * @param enableTransition
   * @category Methods
   */
  zoomTo(e, t = !1) {
    this._zoomEnd = R0.MathUtils.clamp(e, this.minZoom, this.maxZoom), this._needsUpdate = !0, t || (this._zoom = this._zoomEnd);
    const n = !t || be(this._zoom, this._zoomEnd, this.restThreshold);
    return this._createOnRestPromise(n);
  }
  /**
   * @deprecated `pan()` has been renamed to `truck()`
   * @category Methods
   */
  pan(e, t, n = !1) {
    return console.warn("`pan` has been renamed to `truck`"), this.truck(e, t, n);
  }
  /**
   * Truck and pedestal camera using current azimuthal angle
   * @param x Horizontal translate amount
   * @param y Vertical translate amount
   * @param enableTransition Whether to move smoothly or immediately
   * @category Methods
   */
  truck(e, t, n = !1) {
    this._camera.updateMatrix(), g1.setFromMatrixColumn(this._camera.matrix, 0), _1.setFromMatrixColumn(this._camera.matrix, 1), g1.multiplyScalar(e), _1.multiplyScalar(-t);
    const s = Q0.copy(g1).add(_1), r = _e.copy(this._targetEnd).add(s);
    return this.moveTo(r.x, r.y, r.z, n);
  }
  /**
   * Move forward / backward.
   * @param distance Amount to move forward / backward. Negative value to move backward
   * @param enableTransition Whether to move smoothly or immediately
   * @category Methods
   */
  forward(e, t = !1) {
    Q0.setFromMatrixColumn(this._camera.matrix, 0), Q0.crossVectors(this._camera.up, Q0), Q0.multiplyScalar(e);
    const n = _e.copy(this._targetEnd).add(Q0);
    return this.moveTo(n.x, n.y, n.z, t);
  }
  /**
   * Move target position to given point.
   * @param x x coord to move center position
   * @param y y coord to move center position
   * @param z z coord to move center position
   * @param enableTransition Whether to move smoothly or immediately
   * @category Methods
   */
  moveTo(e, t, n, s = !1) {
    const r = Q0.set(e, t, n).sub(this._targetEnd);
    this._encloseToBoundary(this._targetEnd, r, this.boundaryFriction), this._needsUpdate = !0, s || this._target.copy(this._targetEnd);
    const a = !s || be(this._target.x, this._targetEnd.x, this.restThreshold) && be(this._target.y, this._targetEnd.y, this.restThreshold) && be(this._target.z, this._targetEnd.z, this.restThreshold);
    return this._createOnRestPromise(a);
  }
  /**
   * Fit the viewport to the box or the bounding box of the object, using the nearest axis. paddings are in unit.
   * set `cover: true` to fill enter screen.
   * e.g.
   * ```
   * cameraControls.fitToBox( myMesh );
   * ```
   * @param box3OrObject Axis aligned bounding box to fit the view.
   * @param enableTransition Whether to move smoothly or immediately.
   * @param options | `<object>` { cover: boolean, paddingTop: number, paddingLeft: number, paddingBottom: number, paddingRight: number }
   * @returns Transition end promise
   * @category Methods
   */
  fitToBox(e, t, { cover: n = !1, paddingLeft: s = 0, paddingRight: r = 0, paddingBottom: a = 0, paddingTop: o = 0 } = {}) {
    const c = [], l = e.isBox3 ? B9.copy(e) : B9.setFromObject(e);
    l.isEmpty() && (console.warn("camera-controls: fitTo() cannot be used with an empty box. Aborting"), Promise.resolve());
    const h = Xa(this._sphericalEnd.theta, Wa), d = Xa(this._sphericalEnd.phi, Wa);
    c.push(this.rotateTo(h, d, t));
    const u = Q0.setFromSpherical(this._sphericalEnd).normalize(), f = Ka.setFromUnitVectors(u, a3), p = be(Math.abs(u.y), 1);
    p && f.multiply(l3.setFromAxisAngle(X7, h)), f.multiply(this._yAxisUpSpaceInverse);
    const _ = Ja.makeEmpty();
    _e.copy(l.min).applyQuaternion(f), _.expandByPoint(_e), _e.copy(l.min).setX(l.max.x).applyQuaternion(f), _.expandByPoint(_e), _e.copy(l.min).setY(l.max.y).applyQuaternion(f), _.expandByPoint(_e), _e.copy(l.max).setZ(l.min.z).applyQuaternion(f), _.expandByPoint(_e), _e.copy(l.min).setZ(l.max.z).applyQuaternion(f), _.expandByPoint(_e), _e.copy(l.max).setY(l.min.y).applyQuaternion(f), _.expandByPoint(_e), _e.copy(l.max).setX(l.min.x).applyQuaternion(f), _.expandByPoint(_e), _e.copy(l.max).applyQuaternion(f), _.expandByPoint(_e), _.min.x -= s, _.min.y -= a, _.max.x += r, _.max.y += o, f.setFromUnitVectors(a3, u), p && f.premultiply(l3.invert()), f.premultiply(this._yAxisUpSpace);
    const g = _.getSize(Q0), m = _.getCenter(_e).applyQuaternion(f);
    if (di(this._camera)) {
      const v = this.getDistanceToFitBox(g.x, g.y, g.z, n);
      c.push(this.moveTo(m.x, m.y, m.z, t)), c.push(this.dollyTo(v, t)), c.push(this.setFocalOffset(0, 0, 0, t));
    } else if (Mn(this._camera)) {
      const v = this._camera, y = v.right - v.left, b = v.top - v.bottom, w = n ? Math.max(y / g.x, b / g.y) : Math.min(y / g.x, b / g.y);
      c.push(this.moveTo(m.x, m.y, m.z, t)), c.push(this.zoomTo(w, t)), c.push(this.setFocalOffset(0, 0, 0, t));
    }
    return Promise.all(c);
  }
  /**
   * Fit the viewport to the sphere or the bounding sphere of the object.
   * @param sphereOrMesh
   * @param enableTransition
   * @category Methods
   */
  fitToSphere(e, t) {
    const n = [], r = e instanceof R0.Sphere ? o3.copy(e) : tM(e, o3);
    if (n.push(this.moveTo(r.center.x, r.center.y, r.center.z, t)), di(this._camera)) {
      const a = this.getDistanceToFitSphere(r.radius);
      n.push(this.dollyTo(a, t));
    } else if (Mn(this._camera)) {
      const a = this._camera.right - this._camera.left, o = this._camera.top - this._camera.bottom, c = 2 * r.radius, l = Math.min(a / c, o / c);
      n.push(this.zoomTo(l, t));
    }
    return n.push(this.setFocalOffset(0, 0, 0, t)), Promise.all(n);
  }
  /**
   * Make an orbit with given points.
   * @param positionX
   * @param positionY
   * @param positionZ
   * @param targetX
   * @param targetY
   * @param targetZ
   * @param enableTransition
   * @category Methods
   */
  setLookAt(e, t, n, s, r, a, o = !1) {
    const c = _e.set(s, r, a), l = Q0.set(e, t, n);
    this._targetEnd.copy(c), this._sphericalEnd.setFromVector3(l.sub(c).applyQuaternion(this._yAxisUpSpace)), this.normalizeRotations(), this._needsUpdate = !0, o || (this._target.copy(this._targetEnd), this._spherical.copy(this._sphericalEnd));
    const h = !o || be(this._target.x, this._targetEnd.x, this.restThreshold) && be(this._target.y, this._targetEnd.y, this.restThreshold) && be(this._target.z, this._targetEnd.z, this.restThreshold) && be(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) && be(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold) && be(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);
    return this._createOnRestPromise(h);
  }
  /**
   * Similar to setLookAt, but it interpolates between two states.
   * @param positionAX
   * @param positionAY
   * @param positionAZ
   * @param targetAX
   * @param targetAY
   * @param targetAZ
   * @param positionBX
   * @param positionBY
   * @param positionBZ
   * @param targetBX
   * @param targetBY
   * @param targetBZ
   * @param t
   * @param enableTransition
   * @category Methods
   */
  lerpLookAt(e, t, n, s, r, a, o, c, l, h, d, u, f, p = !1) {
    const _ = Q0.set(s, r, a), g = _e.set(e, t, n);
    n1.setFromVector3(g.sub(_).applyQuaternion(this._yAxisUpSpace));
    const m = M9.set(h, d, u), v = _e.set(o, c, l);
    E8.setFromVector3(v.sub(m).applyQuaternion(this._yAxisUpSpace)), this._targetEnd.copy(_.lerp(m, f));
    const y = E8.theta - n1.theta, b = E8.phi - n1.phi, w = E8.radius - n1.radius;
    this._sphericalEnd.set(n1.radius + w * f, n1.phi + b * f, n1.theta + y * f), this.normalizeRotations(), this._needsUpdate = !0, p || (this._target.copy(this._targetEnd), this._spherical.copy(this._sphericalEnd));
    const x = !p || be(this._target.x, this._targetEnd.x, this.restThreshold) && be(this._target.y, this._targetEnd.y, this.restThreshold) && be(this._target.z, this._targetEnd.z, this.restThreshold) && be(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) && be(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold) && be(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);
    return this._createOnRestPromise(x);
  }
  /**
   * setLookAt without target, keep gazing at the current target
   * @param positionX
   * @param positionY
   * @param positionZ
   * @param enableTransition
   * @category Methods
   */
  setPosition(e, t, n, s = !1) {
    return this.setLookAt(e, t, n, this._targetEnd.x, this._targetEnd.y, this._targetEnd.z, s);
  }
  /**
   * setLookAt without position, Stay still at the position.
   * @param targetX
   * @param targetY
   * @param targetZ
   * @param enableTransition
   * @category Methods
   */
  setTarget(e, t, n, s = !1) {
    const r = this.getPosition(Q0), a = this.setLookAt(r.x, r.y, r.z, e, t, n, s);
    return this._sphericalEnd.phi = R0.MathUtils.clamp(this.polarAngle, this.minPolarAngle, this.maxPolarAngle), a;
  }
  /**
   * Set focal offset using the screen parallel coordinates. z doesn't affect in Orthographic as with Dolly.
   * @param x
   * @param y
   * @param z
   * @param enableTransition
   * @category Methods
   */
  setFocalOffset(e, t, n, s = !1) {
    this._focalOffsetEnd.set(e, t, n), this._needsUpdate = !0, s || this._focalOffset.copy(this._focalOffsetEnd), this._affectOffset = !Se(e) || !Se(t) || !Se(n);
    const r = !s || be(this._focalOffset.x, this._focalOffsetEnd.x, this.restThreshold) && be(this._focalOffset.y, this._focalOffsetEnd.y, this.restThreshold) && be(this._focalOffset.z, this._focalOffsetEnd.z, this.restThreshold);
    return this._createOnRestPromise(r);
  }
  /**
   * Set orbit point without moving the camera.
   * SHOULD NOT RUN DURING ANIMATIONS. `setOrbitPoint()` will immediately fix the positions.
   * @param targetX
   * @param targetY
   * @param targetZ
   * @category Methods
   */
  setOrbitPoint(e, t, n) {
    this._camera.updateMatrixWorld(), g1.setFromMatrixColumn(this._camera.matrixWorldInverse, 0), _1.setFromMatrixColumn(this._camera.matrixWorldInverse, 1), fi.setFromMatrixColumn(this._camera.matrixWorldInverse, 2);
    const s = Q0.set(e, t, n), r = s.distanceTo(this._camera.position), a = s.sub(this._camera.position);
    g1.multiplyScalar(a.x), _1.multiplyScalar(a.y), fi.multiplyScalar(a.z), Q0.copy(g1).add(_1).add(fi), Q0.z = Q0.z + r, this.dollyTo(r, !1), this.setFocalOffset(-Q0.x, Q0.y, -Q0.z, !1), this.moveTo(e, t, n, !1);
  }
  /**
   * Set the boundary box that encloses the target of the camera. box3 is in THREE.Box3
   * @param box3
   * @category Methods
   */
  setBoundary(e) {
    if (!e) {
      this._boundary.min.set(-1 / 0, -1 / 0, -1 / 0), this._boundary.max.set(1 / 0, 1 / 0, 1 / 0), this._needsUpdate = !0;
      return;
    }
    this._boundary.copy(e), this._boundary.clampPoint(this._targetEnd, this._targetEnd), this._needsUpdate = !0;
  }
  /**
   * Set (or unset) the current viewport.
   * Set this when you want to use renderer viewport and .dollyToCursor feature at the same time.
   * @param viewportOrX
   * @param y
   * @param width
   * @param height
   * @category Methods
   */
  setViewport(e, t, n, s) {
    if (e === null) {
      this._viewport = null;
      return;
    }
    this._viewport = this._viewport || new R0.Vector4(), typeof e == "number" ? this._viewport.set(e, t, n, s) : this._viewport.copy(e);
  }
  /**
   * Calculate the distance to fit the box.
   * @param width box width
   * @param height box height
   * @param depth box depth
   * @returns distance
   * @category Methods
   */
  getDistanceToFitBox(e, t, n, s = !1) {
    if (r3(this._camera, "getDistanceToFitBox"))
      return this._spherical.radius;
    const r = e / t, a = this._camera.getEffectiveFOV() * R0.MathUtils.DEG2RAD, o = this._camera.aspect;
    return ((s ? r > o : r < o) ? t : e / o) * 0.5 / Math.tan(a * 0.5) + n * 0.5;
  }
  /**
   * Calculate the distance to fit the sphere.
   * @param radius sphere radius
   * @returns distance
   * @category Methods
   */
  getDistanceToFitSphere(e) {
    if (r3(this._camera, "getDistanceToFitSphere"))
      return this._spherical.radius;
    const t = this._camera.getEffectiveFOV() * R0.MathUtils.DEG2RAD, n = Math.atan(Math.tan(t * 0.5) * this._camera.aspect) * 2, s = 1 < this._camera.aspect ? t : n;
    return e / Math.sin(s * 0.5);
  }
  /**
   * Returns its current gazing target, which is the center position of the orbit.
   * @param out current gazing target
   * @category Methods
   */
  getTarget(e) {
    return (e && e.isVector3 ? e : new R0.Vector3()).copy(this._targetEnd);
  }
  /**
   * Returns its current position.
   * @param out current position
   * @category Methods
   */
  getPosition(e) {
    return (e && e.isVector3 ? e : new R0.Vector3()).setFromSpherical(this._sphericalEnd).applyQuaternion(this._yAxisUpSpaceInverse).add(this._targetEnd);
  }
  /**
   * Returns its current focal offset, which is how much the camera appears to be translated in screen parallel coordinates.
   * @param out current focal offset
   * @category Methods
   */
  getFocalOffset(e) {
    return (e && e.isVector3 ? e : new R0.Vector3()).copy(this._focalOffsetEnd);
  }
  /**
   * Normalize camera azimuth angle rotation between 0 and 360 degrees.
   * @category Methods
   */
  normalizeRotations() {
    this._sphericalEnd.theta = this._sphericalEnd.theta % w9, this._sphericalEnd.theta < 0 && (this._sphericalEnd.theta += w9), this._spherical.theta += w9 * Math.round((this._sphericalEnd.theta - this._spherical.theta) / w9);
  }
  /**
   * Reset all rotation and position to defaults.
   * @param enableTransition
   * @category Methods
   */
  reset(e = !1) {
    const t = [
      this.setLookAt(this._position0.x, this._position0.y, this._position0.z, this._target0.x, this._target0.y, this._target0.z, e),
      this.setFocalOffset(this._focalOffset0.x, this._focalOffset0.y, this._focalOffset0.z, e),
      this.zoomTo(this._zoom0, e)
    ];
    return Promise.all(t);
  }
  /**
   * Set current camera position as the default position.
   * @category Methods
   */
  saveState() {
    this.getTarget(this._target0), this.getPosition(this._position0), this._zoom0 = this._zoom, this._focalOffset0.copy(this._focalOffset);
  }
  /**
   * Sync camera-up direction.
   * When camera-up vector is changed, `.updateCameraUp()` must be called.
   * @category Methods
   */
  updateCameraUp() {
    this._yAxisUpSpace.setFromUnitVectors(this._camera.up, X7), Ya(this._yAxisUpSpaceInverse.copy(this._yAxisUpSpace));
  }
  /**
   * Update camera position and directions.
   * This should be called in your tick loop every time, and returns true if re-rendering is needed.
   * @param delta
   * @returns updated
   * @category Methods
   */
  update(e) {
    const t = this._state === d0.NONE ? this.dampingFactor : this.draggingDampingFactor, n = Math.min(t * e * 60, 1), s = this._sphericalEnd.theta - this._spherical.theta, r = this._sphericalEnd.phi - this._spherical.phi, a = this._sphericalEnd.radius - this._spherical.radius, o = $a.subVectors(this._targetEnd, this._target), c = ja.subVectors(this._focalOffsetEnd, this._focalOffset);
    if (!Se(s) || !Se(r) || !Se(a) || !Se(o.x) || !Se(o.y) || !Se(o.z) || !Se(c.x) || !Se(c.y) || !Se(c.z) ? (this._spherical.set(this._spherical.radius + a * n, this._spherical.phi + r * n, this._spherical.theta + s * n), this._target.add(o.multiplyScalar(n)), this._focalOffset.add(c.multiplyScalar(n)), this._needsUpdate = !0) : (this._spherical.copy(this._sphericalEnd), this._target.copy(this._targetEnd), this._focalOffset.copy(this._focalOffsetEnd)), this._dollyControlAmount !== 0) {
      if (di(this._camera)) {
        const u = this._camera, f = Q0.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).normalize().negate(), p = _e.copy(f).cross(u.up).normalize();
        p.lengthSq() === 0 && (p.x = 1);
        const _ = M9.crossVectors(p, f), g = this._sphericalEnd.radius * Math.tan(u.getEffectiveFOV() * R0.MathUtils.DEG2RAD * 0.5), v = (this._sphericalEnd.radius - this._dollyControlAmount - this._sphericalEnd.radius) / this._sphericalEnd.radius, y = Q0.copy(this._targetEnd).add(p.multiplyScalar(this._dollyControlCoord.x * g * u.aspect)).add(_.multiplyScalar(this._dollyControlCoord.y * g));
        this._targetEnd.lerp(y, v);
      } else if (Mn(this._camera)) {
        const u = this._camera, f = Q0.set(this._dollyControlCoord.x, this._dollyControlCoord.y, (u.near + u.far) / (u.near - u.far)).unproject(u), p = _e.set(0, 0, -1).applyQuaternion(u.quaternion), _ = M9.copy(f).add(p.multiplyScalar(-f.dot(u.up))), m = -(this._zoom - this._dollyControlAmount - this._zoomEnd) / this._zoom, v = Q0.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).normalize().negate(), y = this._targetEnd.dot(v);
        this._targetEnd.lerp(_, m);
        const b = this._targetEnd.dot(v), w = v.multiplyScalar(b - y);
        this._targetEnd.sub(w);
      }
      this._target.copy(this._targetEnd), this._boundary.clampPoint(this._targetEnd, this._targetEnd), this._dollyControlAmount = 0;
    }
    const l = this._zoomEnd - this._zoom;
    this._zoom += l * n, this._camera.zoom !== this._zoom && (Se(l) && (this._zoom = this._zoomEnd), this._camera.zoom = this._zoom, this._camera.updateProjectionMatrix(), this._updateNearPlaneCorners(), this._needsUpdate = !0);
    const h = this._collisionTest();
    this._spherical.radius = Math.min(this._spherical.radius, h), this._spherical.makeSafe(), this._camera.position.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).add(this._target), this._camera.lookAt(this._target), this._affectOffset && (this._camera.updateMatrixWorld(), g1.setFromMatrixColumn(this._camera.matrix, 0), _1.setFromMatrixColumn(this._camera.matrix, 1), fi.setFromMatrixColumn(this._camera.matrix, 2), g1.multiplyScalar(this._focalOffset.x), _1.multiplyScalar(-this._focalOffset.y), fi.multiplyScalar(this._focalOffset.z), Q0.copy(g1).add(_1).add(fi), this._camera.position.add(Q0)), this._boundaryEnclosesCamera && this._encloseToBoundary(this._camera.position.copy(this._target), Q0.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse), 1);
    const d = this._needsUpdate;
    return d && !this._updatedLastTime ? (this._hasRested = !1, this.dispatchEvent({ type: "wake" }), this.dispatchEvent({ type: "update" })) : d ? (this.dispatchEvent({ type: "update" }), Se(s, this.restThreshold) && Se(r, this.restThreshold) && Se(a, this.restThreshold) && Se(o.x, this.restThreshold) && Se(o.y, this.restThreshold) && Se(o.z, this.restThreshold) && Se(c.x, this.restThreshold) && Se(c.y, this.restThreshold) && Se(c.z, this.restThreshold) && Se(l, this.restThreshold) && !this._hasRested && (this._hasRested = !0, this.dispatchEvent({ type: "rest" }))) : !d && this._updatedLastTime && this.dispatchEvent({ type: "sleep" }), this._updatedLastTime = d, this._needsUpdate = !1, d;
  }
  /**
   * Get all state in JSON string
   * @category Methods
   */
  toJSON() {
    return JSON.stringify({
      enabled: this._enabled,
      minDistance: this.minDistance,
      maxDistance: M8(this.maxDistance),
      minZoom: this.minZoom,
      maxZoom: M8(this.maxZoom),
      minPolarAngle: this.minPolarAngle,
      maxPolarAngle: M8(this.maxPolarAngle),
      minAzimuthAngle: M8(this.minAzimuthAngle),
      maxAzimuthAngle: M8(this.maxAzimuthAngle),
      dampingFactor: this.dampingFactor,
      draggingDampingFactor: this.draggingDampingFactor,
      dollySpeed: this.dollySpeed,
      truckSpeed: this.truckSpeed,
      dollyToCursor: this.dollyToCursor,
      verticalDragToForward: this.verticalDragToForward,
      target: this._targetEnd.toArray(),
      position: Q0.setFromSpherical(this._sphericalEnd).add(this._targetEnd).toArray(),
      zoom: this._zoomEnd,
      focalOffset: this._focalOffsetEnd.toArray(),
      target0: this._target0.toArray(),
      position0: this._position0.toArray(),
      zoom0: this._zoom0,
      focalOffset0: this._focalOffset0.toArray()
    });
  }
  /**
   * Reproduce the control state with JSON. enableTransition is where anim or not in a boolean.
   * @param json
   * @param enableTransition
   * @category Methods
   */
  fromJSON(e, t = !1) {
    const n = JSON.parse(e), s = Q0.fromArray(n.position);
    this.enabled = n.enabled, this.minDistance = n.minDistance, this.maxDistance = S8(n.maxDistance), this.minZoom = n.minZoom, this.maxZoom = S8(n.maxZoom), this.minPolarAngle = n.minPolarAngle, this.maxPolarAngle = S8(n.maxPolarAngle), this.minAzimuthAngle = S8(n.minAzimuthAngle), this.maxAzimuthAngle = S8(n.maxAzimuthAngle), this.dampingFactor = n.dampingFactor, this.draggingDampingFactor = n.draggingDampingFactor, this.dollySpeed = n.dollySpeed, this.truckSpeed = n.truckSpeed, this.dollyToCursor = n.dollyToCursor, this.verticalDragToForward = n.verticalDragToForward, this._target0.fromArray(n.target0), this._position0.fromArray(n.position0), this._zoom0 = n.zoom0, this._focalOffset0.fromArray(n.focalOffset0), this.moveTo(n.target[0], n.target[1], n.target[2], t), n1.setFromVector3(s.sub(this._targetEnd).applyQuaternion(this._yAxisUpSpace)), this.rotateTo(n1.theta, n1.phi, t), this.zoomTo(n.zoom, t), this.setFocalOffset(n.focalOffset[0], n.focalOffset[1], n.focalOffset[2], t), this._needsUpdate = !0;
  }
  /**
   * Attach all internal event handlers to enable drag control.
   * @category Methods
   */
  connect(e) {
    if (this._domElement) {
      console.warn("camera-controls is already connected.");
      return;
    }
    e.setAttribute("data-camera-controls-version", Qw), this._addAllEventListeners(e);
  }
  /**
   * Detach all internal event handlers to disable drag control.
   */
  disconnect() {
    this._removeAllEventListeners(), this._domElement = void 0;
  }
  /**
   * Dispose the cameraControls instance itself, remove all eventListeners.
   * @category Methods
   */
  dispose() {
    this.disconnect(), this._domElement && "setAttribute" in this._domElement && this._domElement.removeAttribute("data-camera-controls-version");
  }
  _findPointerById(e) {
    let t = null;
    return this._activePointers.some((n) => n.pointerId === e ? (t = n, !0) : !1), t;
  }
  _encloseToBoundary(e, t, n) {
    const s = t.lengthSq();
    if (s === 0)
      return e;
    const r = _e.copy(t).add(e), o = this._boundary.clampPoint(r, M9).sub(r), c = o.lengthSq();
    if (c === 0)
      return e.add(t);
    if (c === s)
      return e;
    if (n === 0)
      return e.add(t).add(o);
    {
      const l = 1 + n * c / t.dot(o);
      return e.add(_e.copy(t).multiplyScalar(l)).add(o.multiplyScalar(1 - n));
    }
  }
  _updateNearPlaneCorners() {
    if (di(this._camera)) {
      const e = this._camera, t = e.near, n = e.getEffectiveFOV() * R0.MathUtils.DEG2RAD, s = Math.tan(n * 0.5) * t, r = s * e.aspect;
      this._nearPlaneCorners[0].set(-r, -s, 0), this._nearPlaneCorners[1].set(r, -s, 0), this._nearPlaneCorners[2].set(r, s, 0), this._nearPlaneCorners[3].set(-r, s, 0);
    } else if (Mn(this._camera)) {
      const e = this._camera, t = 1 / e.zoom, n = e.left * t, s = e.right * t, r = e.top * t, a = e.bottom * t;
      this._nearPlaneCorners[0].set(n, r, 0), this._nearPlaneCorners[1].set(s, r, 0), this._nearPlaneCorners[2].set(s, a, 0), this._nearPlaneCorners[3].set(n, a, 0);
    }
  }
  // lateUpdate
  _collisionTest() {
    let e = 1 / 0;
    if (!(this.colliderMeshes.length >= 1) || r3(this._camera, "_collisionTest"))
      return e;
    const n = Q0.setFromSpherical(this._spherical).divideScalar(this._spherical.radius);
    c3.lookAt(qa, n, this._camera.up);
    for (let s = 0; s < 4; s++) {
      const r = _e.copy(this._nearPlaneCorners[s]);
      r.applyMatrix4(c3);
      const a = M9.addVectors(this._target, r);
      Y7.set(a, n), Y7.far = this._spherical.radius + 1;
      const o = Y7.intersectObjects(this.colliderMeshes);
      o.length !== 0 && o[0].distance < e && (e = o[0].distance);
    }
    return e;
  }
  /**
   * Get its client rect and package into given `DOMRect` .
   */
  _getClientRect(e) {
    if (!this._domElement)
      return;
    const t = this._domElement.getBoundingClientRect();
    return e.x = t.left, e.y = t.top, this._viewport ? (e.x += this._viewport.x, e.y += t.height - this._viewport.w - this._viewport.y, e.width = this._viewport.z, e.height = this._viewport.w) : (e.width = t.width, e.height = t.height), e;
  }
  _createOnRestPromise(e) {
    return e ? Promise.resolve() : (this._hasRested = !1, this.dispatchEvent({ type: "transitionstart" }), new Promise((t) => {
      const n = () => {
        this.removeEventListener("rest", n), t();
      };
      this.addEventListener("rest", n);
    }));
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  _addAllEventListeners(e) {
  }
  _removeAllEventListeners() {
  }
}
function tM(i, e) {
  const t = e, n = t.center;
  B9.makeEmpty(), i.traverseVisible((r) => {
    r.isMesh && B9.expandByObject(r);
  }), B9.getCenter(n);
  let s = 0;
  return i.traverseVisible((r) => {
    if (!r.isMesh)
      return;
    const a = r, o = a.geometry.clone();
    if (o.applyMatrix4(a.matrixWorld), o.isBufferGeometry) {
      const l = o.attributes.position;
      for (let h = 0, d = l.count; h < d; h++)
        Q0.fromBufferAttribute(l, h), s = Math.max(s, n.distanceToSquared(Q0));
    } else {
      const c = o.attributes.position, l = new R0.Vector3();
      for (let h = 0, d = c.count; h < d; h++)
        l.fromBufferAttribute(c, h), s = Math.max(s, n.distanceToSquared(l));
    }
  }), t.radius = Math.sqrt(s), t;
}
class Z2 extends G0 {
  constructor(e) {
    super(), this.element = e || document.createElement("div"), this.element.style.position = "absolute", this.addEventListener("removed", function() {
      this.traverse(function(t) {
        t.element instanceof Element && t.element.parentNode !== null && t.element.parentNode.removeChild(t.element);
      });
    });
  }
  copy(e, t) {
    return super.copy(e, t), this.element = e.element.cloneNode(!0), this;
  }
}
Z2.prototype.isCSS2DObject = !0;
const yn = new C(), Qa = new k0(), eo = new k0(), to = new C(), no = new C();
class nM {
  constructor() {
    const e = this;
    let t, n, s, r;
    const a = {
      objects: /* @__PURE__ */ new WeakMap()
    }, o = document.createElement("div");
    o.style.overflow = "hidden", this.domElement = o, this.getSize = function() {
      return {
        width: t,
        height: n
      };
    }, this.render = function(u, f) {
      u.autoUpdate === !0 && u.updateMatrixWorld(), f.parent === null && f.updateMatrixWorld(), Qa.copy(f.matrixWorldInverse), eo.multiplyMatrices(
        f.projectionMatrix,
        Qa
      ), c(u, u, f), d(u);
    }, this.setSize = function(u, f) {
      t = u, n = f, s = t / 2, r = n / 2, o.style.width = u + "px", o.style.height = f + "px";
    }, this.clear = function() {
      const u = this.domElement.children;
      if (u.length > 0) {
        for (let f = 0; f < u.length; ) {
          const p = u[0];
          this.domElement.removeChild(p);
        }
        a.objects = /* @__PURE__ */ new WeakMap();
      }
    };
    function c(u, f, p) {
      if (u.isCSS2DObject) {
        u.onBeforeRender(e, f, p), yn.setFromMatrixPosition(u.matrixWorld), yn.applyMatrix4(eo);
        const _ = u.element;
        /apple/i.test(navigator.vendor) ? _.style.transform = "translate(-50%,-50%) translate(" + Math.round(yn.x * s + s) + "px," + Math.round(-yn.y * r + r) + "px)" : _.style.transform = "translate(-50%,-50%) translate(" + (yn.x * s + s) + "px," + (-yn.y * r + r) + "px)", _.style.display = u.visible && yn.z >= -1 && yn.z <= 1 ? "" : "none";
        const g = {
          distanceToCameraSquared: l(p, u)
        };
        a.objects.set(u, g), _.parentNode !== o && o.appendChild(_), u.onAfterRender(e, f, p);
      }
      for (let _ = 0, g = u.children.length; _ < g; _++)
        c(u.children[_], f, p);
    }
    function l(u, f) {
      return to.setFromMatrixPosition(u.matrixWorld), no.setFromMatrixPosition(f.matrixWorld), to.distanceToSquared(no);
    }
    function h(u) {
      const f = [];
      return u.traverse(function(p) {
        p.isCSS2DObject && f.push(p);
      }), f;
    }
    function d(u) {
      const f = h(u).sort(function(_, g) {
        const m = a.objects.get(_).distanceToCameraSquared, v = a.objects.get(g).distanceToCameraSquared;
        return m - v;
      }), p = f.length;
      for (let _ = 0, g = f.length; _ < g; _++)
        f[_].element.style.zIndex = p - _;
    }
  }
}
const S9 = new Y2(), Xt = new C(), xn = new C(), xe = new Ee(), io = {
  X: new C(1, 0, 0),
  Y: new C(0, 1, 0),
  Z: new C(0, 0, 1)
}, so = {
  type: "change"
}, ro = {
  type: "mouseDown"
}, ao = {
  type: "mouseUp",
  mode: null
}, iM = {
  type: "objectChange"
};
class vu extends G0 {
  constructor(e, t, n) {
    super(), this.props = n || {}, t === void 0 && (console.warn(
      'THREE.TransformControls: The second parameter "domElement" is now mandatory.'
    ), t = document), this.visible = !1, this.domElement = t;
    const s = new yu();
    this._gizmo = s;
    const r = new xu();
    this._plane = r;
    const a = this;
    function o(y, b) {
      let w = b;
      Object.defineProperty(a, y, {
        get: function() {
          return w !== void 0 ? w : b;
        },
        set: function(x) {
          w !== x && (w = x, r[y] = x, s[y] = x, a.dispatchEvent({
            type: y + "-changed",
            value: x
          }), a.dispatchEvent(so));
        }
      }), a[y] = b, r[y] = b, s[y] = b;
    }
    o("camera", e), o("object", void 0), o("enabled", !0), o("axis", null), o("mode", "translate"), o("translationSnap", null), o("rotationSnap", null), o("scaleSnap", null), o("space", "local"), o("size", 1), o("dragging", !1), o("showX", !0), o("showY", !0), o("showZ", !0);
    const c = new C(), l = new C(), h = new Ee(), d = new Ee(), u = new C(), f = new Ee(), p = new C(), _ = new C(), g = new C(), m = 0, v = new C();
    o("worldPosition", c), o("worldPositionStart", l), o("worldQuaternion", h), o("worldQuaternionStart", d), o("cameraPosition", u), o("cameraQuaternion", f), o("pointStart", p), o("pointEnd", _), o("rotationAxis", g), o("rotationAngle", m), o("eye", v), this._offset = new C(), this._startNorm = new C(), this._endNorm = new C(), this._cameraScale = new C(), this._parentPosition = new C(), this._parentQuaternion = new Ee(), this._parentQuaternionInv = new Ee(), this._parentScale = new C(), this._worldScaleStart = new C(), this._worldQuaternionInv = new Ee(), this._worldScale = new C(), this._positionStart = new C(), this._quaternionStart = new Ee(), this._scaleStart = new C(), this._getPointer = sM.bind(this), this._onPointerDown = aM.bind(this), this._onPointerHover = rM.bind(this), this._onPointerMove = oM.bind(this), this._onPointerUp = lM.bind(this), this.domElement.addEventListener("pointerdown", this._onPointerDown), this.domElement.addEventListener("pointermove", this._onPointerHover), this.domElement.ownerDocument.addEventListener(
      "pointerup",
      this._onPointerUp
    );
  }
  // updateMatrixWorld  updates key transformation variables
  updateMatrixWorld() {
    this.object !== void 0 && (this.object.updateMatrixWorld(), this.object.parent === null ? console.error(
      "TransformControls: The attached 3D object must be a part of the scene graph."
    ) : this.object.parent.matrixWorld.decompose(
      this._parentPosition,
      this._parentQuaternion,
      this._parentScale
    ), this.object.matrixWorld.decompose(
      this.worldPosition,
      this.worldQuaternion,
      this._worldScale
    ), this._parentQuaternionInv.copy(this._parentQuaternion).invert(), this._worldQuaternionInv.copy(this.worldQuaternion).invert()), this.camera.updateMatrixWorld(), this.camera.matrixWorld.decompose(
      this.cameraPosition,
      this.cameraQuaternion,
      this._cameraScale
    ), this.eye.copy(this.cameraPosition).sub(this.worldPosition).normalize(), super.updateMatrixWorld(this);
  }
  pointerHover(e) {
    if (this.object === void 0 || this.dragging === !0)
      return;
    S9.setFromCamera(e, this.camera);
    const t = h3(
      this._gizmo.picker[this.mode],
      S9
    );
    t ? this.axis = t.object.name : this.axis = null;
  }
  pointerDown(e, t) {
    if (!(!t && (this.object === void 0 || e.button !== 0)) && this.object !== void 0 && (this.axis = "X", this.axis !== null)) {
      S9.setFromCamera(e, this.camera);
      const n = h3(
        this._plane,
        S9,
        !0
      );
      if (n) {
        let s = this.space;
        this.mode === "scale" ? s = "local" : (this.axis === "E" || this.axis === "XYZE" || this.axis === "XYZ") && (s = "world"), s === "local" && this.mode;
        {
          const r = this.rotationSnap;
          this.axis === "X" && r && (this.object.rotation.x = Math.round(this.object.rotation.x / r) * r), this.axis === "Y" && r && (this.object.rotation.y = Math.round(this.object.rotation.y / r) * r), this.axis === "Z" && r && (this.object.rotation.z = Math.round(this.object.rotation.z / r) * r);
        }
        this.object.updateMatrixWorld(), this.object.parent.updateMatrixWorld(), this._positionStart.copy(this.object.position), this._quaternionStart.copy(this.object.quaternion), this._scaleStart.copy(this.object.scale), this.object.matrixWorld.decompose(
          this.worldPositionStart,
          this.worldQuaternionStart,
          this._worldScaleStart
        ), this.pointStart.copy(n.point).sub(this.worldPositionStart);
      }
      this.dragging = !0, ro.mode = this.mode, this.dispatchEvent(ro);
    }
  }
  pointerMove(e, t, n) {
    const s = n || this.axis, r = this.mode, a = this.object;
    let o = this.space;
    if (r === "scale" ? o = "local" : (s === "E" || s === "XYZE" || s === "XYZ") && (o = "world"), (a === void 0 || s === null || this.dragging === !1 || e.button !== -1) && !t || a === void 0)
      return;
    S9.setFromCamera(e, this.camera);
    const c = h3(
      this._plane,
      S9,
      !0
    );
    if (c) {
      if (this.pointEnd.copy(c.point).sub(this.worldPositionStart), r === "translate") {
        this._offset.copy(this.pointEnd).sub(this.pointStart), o === "local" && s !== "XYZ" && this._offset.applyQuaternion(this._worldQuaternionInv), s.indexOf("X") === -1 && (this._offset.x = 0), s.indexOf("Y") === -1 && (this._offset.y = 0), s.indexOf("Z") === -1 && (this._offset.z = 0);
        const { offsetScale: l } = this.props;
        l != null && (this._offset.x = this._offset.x * l, this._offset.y = this._offset.y * l, this._offset.z = this._offset.z * l), o === "local" && s !== "XYZ" ? this._offset.applyQuaternion(this._quaternionStart).divide(this._parentScale) : this._offset.applyQuaternion(this._parentQuaternionInv).divide(this._parentScale), this.objectList != null && this.objectList.length > 0 && this.objectList.map((h) => {
          h.position.copy(this._offset).add(this._positionStart);
        });
      } else if (r === "scale") {
        if (s.search("XYZ") !== -1) {
          let l = this.pointEnd.length() / this.pointStart.length();
          this.pointEnd.dot(this.pointStart) < 0 && (l *= -1), xn.set(l, l, l);
        } else
          Xt.copy(this.pointStart), xn.copy(this.pointEnd), Xt.applyQuaternion(this._worldQuaternionInv), xn.applyQuaternion(this._worldQuaternionInv), xn.divide(Xt), s.search("X") === -1 && (xn.x = 1), s.search("Y") === -1 && (xn.y = 1), s.search("Z") === -1 && (xn.z = 1);
        a.scale.copy(this._scaleStart).multiply(xn), this.scaleSnap && (s.search("X") !== -1 && (a.scale.x = Math.round(a.scale.x / this.scaleSnap) * this.scaleSnap || this.scaleSnap), s.search("Y") !== -1 && (a.scale.y = Math.round(a.scale.y / this.scaleSnap) * this.scaleSnap || this.scaleSnap), s.search("Z") !== -1 && (a.scale.z = Math.round(a.scale.z / this.scaleSnap) * this.scaleSnap || this.scaleSnap));
      } else if (r === "rotate") {
        this._offset.copy(this.pointEnd).sub(this.pointStart);
        const l = 20 / this.worldPosition.distanceTo(
          Xt.setFromMatrixPosition(this.camera.matrixWorld)
        );
        s === "E" ? (this.rotationAxis.copy(this.eye), this.rotationAngle = this.pointEnd.angleTo(this.pointStart), this._startNorm.copy(this.pointStart).normalize(), this._endNorm.copy(this.pointEnd).normalize(), this.rotationAngle *= this._endNorm.cross(this._startNorm).dot(this.eye) < 0 ? 1 : -1) : s === "XYZE" ? (this.rotationAxis.copy(this._offset).cross(this.eye).normalize(), this.rotationAngle = this._offset.dot(
          Xt.copy(this.rotationAxis).cross(this.eye)
        ) * l) : (s === "X" || s === "Y" || s === "Z") && (this.rotationAxis.copy(io[s]), Xt.copy(io[s]), o === "local" && Xt.applyQuaternion(this.worldQuaternion), this.rotationAngle = this._offset.dot(Xt.cross(this.eye).normalize()) * l), this.rotationSnap && (this.rotationAngle = Math.round(this.rotationAngle / this.rotationSnap) * this.rotationSnap), o === "local" && s !== "E" && s !== "XYZE" ? this.objectList != null && this.objectList.length > 0 ? this.objectList.map((h) => {
          h.quaternion.copy(this._quaternionStart), h.quaternion.multiply(
            xe.setFromAxisAngle(
              this.rotationAxis,
              this.rotationAngle
            )
          ).normalize();
        }) : (a.quaternion.copy(this._quaternionStart), a.quaternion.multiply(
          xe.setFromAxisAngle(
            this.rotationAxis,
            this.rotationAngle
          )
        ).normalize()) : (this.rotationAxis.applyQuaternion(this._parentQuaternionInv), this.objectList != null && this.objectList.length > 0 ? this.objectList.map((h) => {
          h.quaternion.copy(
            xe.setFromAxisAngle(
              this.rotationAxis,
              this.rotationAngle
            )
          ), h.quaternion.multiply(this._quaternionStart).normalize();
        }) : (a.quaternion.copy(
          xe.setFromAxisAngle(
            this.rotationAxis,
            this.rotationAngle
          )
        ), a.quaternion.multiply(this._quaternionStart).normalize()));
      }
      this.dispatchEvent(so), this.dispatchEvent(iM);
    }
  }
  pointerUp(e) {
    e.button === 0 && (this.dragging && this.axis !== null && (ao.mode = this.mode, this.dispatchEvent(ao)), this.dragging = !1, this.axis = null);
  }
  dispose() {
    this.domElement.removeEventListener("pointerdown", this._onPointerDown), this.domElement.removeEventListener("pointermove", this._onPointerHover), this.domElement.ownerDocument.removeEventListener(
      "pointermove",
      this._onPointerMove
    ), this.domElement.ownerDocument.removeEventListener(
      "pointerup",
      this._onPointerUp
    ), this.traverse(function(e) {
      e.geometry && e.geometry.dispose(), e.material && e.material.dispose();
    });
  }
  // Set current object
  attach(e) {
    return this.object = e, this.objectList != null ? this.objectList.push(e) : this.objectList = [e], this.visible = !0, this;
  }
  // Detatch from object
  detach() {
    return this.objectList = void 0, this.object = void 0, this.visible = !1, this.axis = null, this;
  }
  // TODO: deprecate
  getMode() {
    return this.mode;
  }
  setMode(e) {
    this.mode = e;
  }
  setTranslationSnap(e) {
    this.translationSnap = e;
  }
  setRotationSnap(e) {
    this.rotationSnap = e;
  }
  setScaleSnap(e) {
    this.scaleSnap = e;
  }
  setSize(e) {
    this.size = e;
  }
  setSpace(e) {
    this.space = e;
  }
  update() {
    console.warn(
      "THREE.TransformControls: update function has no more functionality and therefore has been deprecated."
    );
  }
}
vu.prototype.isTransformControls = !0;
function sM(i) {
  if (this.domElement.ownerDocument.pointerLockElement)
    return {
      x: 0,
      y: 0,
      button: i.button
    };
  {
    const e = i.changedTouches ? i.changedTouches[0] : i, t = this.domElement.getBoundingClientRect();
    return {
      x: (e.clientX - t.left) / t.width * 2 - 1,
      y: -(e.clientY - t.top) / t.height * 2 + 1,
      button: i.button
    };
  }
}
function rM(i) {
  if (this.enabled)
    switch (i.pointerType) {
      case "mouse":
      case "pen":
        this.pointerHover(this._getPointer(i));
        break;
    }
}
function aM(i, e) {
  this.pointerHover(this._getPointer(i), e), this.pointerDown(this._getPointer(i), e);
}
function oM(i, e, t) {
  !this.enabled && !e || this.pointerMove(this._getPointer(i), e, t);
}
function lM(i) {
  this.enabled && (this.domElement.style.touchAction = "", this.domElement.ownerDocument.removeEventListener(
    "pointermove",
    this._onPointerMove
  ), this.pointerUp(this._getPointer(i)));
}
function h3(i, e, t) {
  const n = e.intersectObject(i, !0);
  for (let s = 0; s < n.length; s++)
    if (n[s].object.visible || t)
      return n[s];
  return !1;
}
const Z7 = new t8(), de = new C(0, 1, 0), oo = new C(0, 0, 0), lo = new k0(), q7 = new Ee(), xr = new Ee(), v1 = new C(), co = new k0(), L9 = new C(1, 0, 0), Sn = new C(0, 1, 0), R9 = new C(0, 0, 1), $7 = new C(), T8 = new C(), A8 = new C();
class yu extends G0 {
  constructor() {
    super(), this.type = "TransformControlsGizmo";
    const e = new c1({
      depthTest: !1,
      depthWrite: !1,
      transparent: !0,
      side: Nt,
      fog: !1,
      toneMapped: !1
    }), t = new Ae({
      depthTest: !1,
      depthWrite: !1,
      transparent: !0,
      linewidth: 1,
      fog: !1,
      toneMapped: !1
    }), n = e.clone();
    n.opacity = 0.15;
    const s = e.clone();
    s.opacity = 0.33;
    const r = e.clone();
    r.color.set(16711680);
    const a = e.clone();
    a.color.set(65280);
    const o = e.clone();
    o.color.set(255);
    const c = e.clone();
    c.opacity = 0.25;
    const l = c.clone();
    l.color.set(16776960);
    const h = c.clone();
    h.color.set(65535);
    const d = c.clone();
    d.color.set(16711935), e.clone().color.set(16776960);
    const f = t.clone();
    f.color.set(16711680);
    const p = t.clone();
    p.color.set(65280);
    const _ = t.clone();
    _.color.set(255);
    const g = t.clone();
    g.color.set(65535);
    const m = t.clone();
    m.color.set(16711935);
    const v = t.clone();
    v.color.set(16776960);
    const y = t.clone();
    y.color.set(7895160);
    const b = v.clone();
    b.opacity = 0.25;
    const w = new Ke(
      0,
      0.05,
      0.2,
      12,
      1,
      !1
    ), x = new ct(0.125, 0.125, 0.125), S = new F0();
    S.setAttribute(
      "position",
      new v0([0, 0, 0, 1, 0, 0], 3)
    );
    function T(a0, x0) {
      const u0 = new F0(), E = [];
      for (let F = 0; F <= 64 * x0; ++F)
        E.push(
          0,
          Math.cos(F / 32 * Math.PI) * a0,
          Math.sin(F / 32 * Math.PI) * a0
        );
      return u0.setAttribute(
        "position",
        new v0(E, 3)
      ), u0;
    }
    function M() {
      const a0 = new F0();
      return a0.setAttribute(
        "position",
        new v0([0, 0, 0, 1, 1, 1], 3)
      ), a0;
    }
    const A = {
      X: [
        [
          new y0(w, r),
          [1, 0, 0],
          [0, 0, -Math.PI / 2],
          null,
          "fwd"
        ],
        [
          new y0(w, r),
          [1, 0, 0],
          [0, 0, Math.PI / 2],
          null,
          "bwd"
        ],
        [new W0(S, f)]
      ],
      Y: [
        [new y0(w, a), [0, 1, 0], null, null, "fwd"],
        [
          new y0(w, a),
          [0, 1, 0],
          [Math.PI, 0, 0],
          null,
          "bwd"
        ],
        [new W0(S, p), null, [0, 0, Math.PI / 2]]
      ],
      Z: [
        [
          new y0(w, o),
          [0, 0, 1],
          [Math.PI / 2, 0, 0],
          null,
          "fwd"
        ],
        [
          new y0(w, o),
          [0, 0, 1],
          [-Math.PI / 2, 0, 0],
          null,
          "bwd"
        ],
        [new W0(S, _), null, [0, -Math.PI / 2, 0]]
      ],
      XYZ: [
        [
          new y0(
            new Pt(0.1, 0),
            c.clone()
          ),
          [0, 0, 0],
          [0, 0, 0]
        ]
      ],
      XY: [
        [
          new y0(
            new Dt(0.295, 0.295),
            l.clone()
          ),
          [0.15, 0.15, 0]
        ],
        [
          new W0(S, v),
          [0.18, 0.3, 0],
          null,
          [0.125, 1, 1]
        ],
        [
          new W0(S, v),
          [0.3, 0.18, 0],
          [0, 0, Math.PI / 2],
          [0.125, 1, 1]
        ]
      ],
      YZ: [
        [
          new y0(
            new Dt(0.295, 0.295),
            h.clone()
          ),
          [0, 0.15, 0.15],
          [0, Math.PI / 2, 0]
        ],
        [
          new W0(S, g),
          [0, 0.18, 0.3],
          [0, 0, Math.PI / 2],
          [0.125, 1, 1]
        ],
        [
          new W0(S, g),
          [0, 0.3, 0.18],
          [0, -Math.PI / 2, 0],
          [0.125, 1, 1]
        ]
      ],
      XZ: [
        [
          new y0(
            new Dt(0.295, 0.295),
            d.clone()
          ),
          [0.15, 0, 0.15],
          [-Math.PI / 2, 0, 0]
        ],
        [
          new W0(S, m),
          [0.18, 0, 0.3],
          null,
          [0.125, 1, 1]
        ],
        [
          new W0(S, m),
          [0.3, 0, 0.18],
          [0, -Math.PI / 2, 0],
          [0.125, 1, 1]
        ]
      ]
    }, D = {
      X: [
        [
          new y0(
            new Ke(0.2, 0, 1, 4, 1, !1),
            n
          ),
          [0.6, 0, 0],
          [0, 0, -Math.PI / 2]
        ]
      ],
      Y: [
        [
          new y0(
            new Ke(0.2, 0, 1, 4, 1, !1),
            n
          ),
          [0, 0.6, 0]
        ]
      ],
      Z: [
        [
          new y0(
            new Ke(0.2, 0, 1, 4, 1, !1),
            n
          ),
          [0, 0, 0.6],
          [Math.PI / 2, 0, 0]
        ]
      ],
      XYZ: [
        [new y0(new Pt(0.2, 0), n)]
      ],
      XY: [
        [
          new y0(new Dt(0.4, 0.4), n),
          [0.2, 0.2, 0]
        ]
      ],
      YZ: [
        [
          new y0(new Dt(0.4, 0.4), n),
          [0, 0.2, 0.2],
          [0, Math.PI / 2, 0]
        ]
      ],
      XZ: [
        [
          new y0(new Dt(0.4, 0.4), n),
          [0.2, 0, 0.2],
          [-Math.PI / 2, 0, 0]
        ]
      ]
    }, z = {
      START: [
        [
          new y0(new Pt(0.01, 2), s),
          null,
          null,
          null,
          "helper"
        ]
      ],
      END: [
        [
          new y0(new Pt(0.01, 2), s),
          null,
          null,
          null,
          "helper"
        ]
      ],
      DELTA: [
        [
          new W0(M(), s),
          null,
          null,
          null,
          "helper"
        ]
      ],
      X: [
        [
          new W0(S, s.clone()),
          [-1e3, 0, 0],
          null,
          [1e6, 1, 1],
          "helper"
        ]
      ],
      Y: [
        [
          new W0(S, s.clone()),
          [0, -1e3, 0],
          [0, 0, Math.PI / 2],
          [1e6, 1, 1],
          "helper"
        ]
      ],
      Z: [
        [
          new W0(S, s.clone()),
          [0, 0, -1e3],
          [0, -Math.PI / 2, 0],
          [1e6, 1, 1],
          "helper"
        ]
      ]
    }, O = {
      X: [
        [new W0(T(1, 0.5), f)],
        [
          new y0(new Pt(0.04, 0), r),
          [0, 0, 0.99],
          null,
          [1, 3, 1]
        ]
      ],
      Y: [
        [
          new W0(T(1, 0.5), p),
          null,
          [0, 0, -Math.PI / 2]
        ],
        [
          new y0(new Pt(0.04, 0), a),
          [0, 0, 0.99],
          null,
          [3, 1, 1]
        ]
      ],
      Z: [
        [
          new W0(T(1, 0.5), _),
          null,
          [0, Math.PI / 2, 0]
        ],
        [
          new y0(new Pt(0.04, 0), o),
          [0.99, 0, 0],
          null,
          [1, 3, 1]
        ]
      ],
      E: [
        [
          new W0(T(1.25, 1), b),
          null,
          [0, Math.PI / 2, 0]
        ],
        [
          new y0(
            new Ke(0.03, 0, 0.15, 4, 1, !1),
            b
          ),
          [1.17, 0, 0],
          [0, 0, -Math.PI / 2],
          [1, 1, 1e-3]
        ],
        [
          new y0(
            new Ke(0.03, 0, 0.15, 4, 1, !1),
            b
          ),
          [-1.17, 0, 0],
          [0, 0, Math.PI / 2],
          [1, 1, 1e-3]
        ],
        [
          new y0(
            new Ke(0.03, 0, 0.15, 4, 1, !1),
            b
          ),
          [0, -1.17, 0],
          [Math.PI, 0, 0],
          [1, 1, 1e-3]
        ],
        [
          new y0(
            new Ke(0.03, 0, 0.15, 4, 1, !1),
            b
          ),
          [0, 1.17, 0],
          [0, 0, 0],
          [1, 1, 1e-3]
        ]
      ],
      XYZE: [
        [
          new W0(T(1, 1), y),
          null,
          [0, Math.PI / 2, 0]
        ]
      ]
    }, U = {
      AXIS: [
        [
          new W0(S, s.clone()),
          [-1e3, 0, 0],
          null,
          [1e6, 1, 1],
          "helper"
        ]
      ]
    }, V = {
      X: [
        [
          new y0(new tn(1, 0.1, 4, 24), n),
          [0, 0, 0],
          [0, -Math.PI / 2, -Math.PI / 2]
        ]
      ],
      Y: [
        [
          new y0(new tn(1, 0.1, 4, 24), n),
          [0, 0, 0],
          [Math.PI / 2, 0, 0]
        ]
      ],
      Z: [
        [
          new y0(new tn(1, 0.1, 4, 24), n),
          [0, 0, 0],
          [0, 0, -Math.PI / 2]
        ]
      ],
      E: [
        [
          new y0(
            new tn(1.25, 0.1, 2, 24),
            n
          )
        ]
      ],
      XYZE: [
        [new y0(new hn(0.7, 10, 8), n)]
      ]
    }, Y = {
      X: [
        [
          new y0(x, r),
          [0.8, 0, 0],
          [0, 0, -Math.PI / 2]
        ],
        [new W0(S, f), null, null, [0.8, 1, 1]]
      ],
      Y: [
        [new y0(x, a), [0, 0.8, 0]],
        [
          new W0(S, p),
          null,
          [0, 0, Math.PI / 2],
          [0.8, 1, 1]
        ]
      ],
      Z: [
        [
          new y0(x, o),
          [0, 0, 0.8],
          [Math.PI / 2, 0, 0]
        ],
        [
          new W0(S, _),
          null,
          [0, -Math.PI / 2, 0],
          [0.8, 1, 1]
        ]
      ],
      XY: [
        [
          new y0(x, l),
          [0.85, 0.85, 0],
          null,
          [2, 2, 0.2]
        ],
        [
          new W0(S, v),
          [0.855, 0.98, 0],
          null,
          [0.125, 1, 1]
        ],
        [
          new W0(S, v),
          [0.98, 0.855, 0],
          [0, 0, Math.PI / 2],
          [0.125, 1, 1]
        ]
      ],
      YZ: [
        [
          new y0(x, h),
          [0, 0.85, 0.85],
          null,
          [0.2, 2, 2]
        ],
        [
          new W0(S, g),
          [0, 0.855, 0.98],
          [0, 0, Math.PI / 2],
          [0.125, 1, 1]
        ],
        [
          new W0(S, g),
          [0, 0.98, 0.855],
          [0, -Math.PI / 2, 0],
          [0.125, 1, 1]
        ]
      ],
      XZ: [
        [
          new y0(x, d),
          [0.85, 0, 0.85],
          null,
          [2, 0.2, 2]
        ],
        [
          new W0(S, m),
          [0.855, 0, 0.98],
          null,
          [0.125, 1, 1]
        ],
        [
          new W0(S, m),
          [0.98, 0, 0.855],
          [0, -Math.PI / 2, 0],
          [0.125, 1, 1]
        ]
      ],
      XYZX: [
        [
          new y0(
            new ct(0.125, 0.125, 0.125),
            c.clone()
          ),
          [1.1, 0, 0]
        ]
      ],
      XYZY: [
        [
          new y0(
            new ct(0.125, 0.125, 0.125),
            c.clone()
          ),
          [0, 1.1, 0]
        ]
      ],
      XYZZ: [
        [
          new y0(
            new ct(0.125, 0.125, 0.125),
            c.clone()
          ),
          [0, 0, 1.1]
        ]
      ]
    }, W = {
      X: [
        [
          new y0(
            new Ke(0.2, 0, 0.8, 4, 1, !1),
            n
          ),
          [0.5, 0, 0],
          [0, 0, -Math.PI / 2]
        ]
      ],
      Y: [
        [
          new y0(
            new Ke(0.2, 0, 0.8, 4, 1, !1),
            n
          ),
          [0, 0.5, 0]
        ]
      ],
      Z: [
        [
          new y0(
            new Ke(0.2, 0, 0.8, 4, 1, !1),
            n
          ),
          [0, 0, 0.5],
          [Math.PI / 2, 0, 0]
        ]
      ],
      XY: [
        [
          new y0(x, n),
          [0.85, 0.85, 0],
          null,
          [3, 3, 0.2]
        ]
      ],
      YZ: [
        [
          new y0(x, n),
          [0, 0.85, 0.85],
          null,
          [0.2, 3, 3]
        ]
      ],
      XZ: [
        [
          new y0(x, n),
          [0.85, 0, 0.85],
          null,
          [3, 0.2, 3]
        ]
      ],
      XYZX: [
        [
          new y0(new ct(0.2, 0.2, 0.2), n),
          [1.1, 0, 0]
        ]
      ],
      XYZY: [
        [
          new y0(new ct(0.2, 0.2, 0.2), n),
          [0, 1.1, 0]
        ]
      ],
      XYZZ: [
        [
          new y0(new ct(0.2, 0.2, 0.2), n),
          [0, 0, 1.1]
        ]
      ]
    }, X = {
      X: [
        [
          new W0(S, s.clone()),
          [-1e3, 0, 0],
          null,
          [1e6, 1, 1],
          "helper"
        ]
      ],
      Y: [
        [
          new W0(S, s.clone()),
          [0, -1e3, 0],
          [0, 0, Math.PI / 2],
          [1e6, 1, 1],
          "helper"
        ]
      ],
      Z: [
        [
          new W0(S, s.clone()),
          [0, 0, -1e3],
          [0, -Math.PI / 2, 0],
          [1e6, 1, 1],
          "helper"
        ]
      ]
    };
    function i0(a0) {
      const x0 = new G0();
      for (const u0 in a0)
        for (let E = a0[u0].length; E--; ) {
          const F = a0[u0][E][0].clone(), R = a0[u0][E][1], j = a0[u0][E][2], B = a0[u0][E][3], m0 = a0[u0][E][4];
          F.name = u0, F.tag = m0, R && F.position.set(R[0], R[1], R[2]), j && F.rotation.set(j[0], j[1], j[2]), B && F.scale.set(B[0], B[1], B[2]), F.updateMatrix();
          const b0 = F.geometry.clone();
          b0.applyMatrix4(F.matrix), F.geometry = b0, F.renderOrder = 1 / 0, F.position.set(0, 0, 0), F.rotation.set(0, 0, 0), F.scale.set(1, 1, 1), x0.add(F);
        }
      return x0;
    }
    this.gizmo = {}, this.picker = {}, this.helper = {}, this.add(this.gizmo.translate = i0(A)), this.add(this.gizmo.rotate = i0(O)), this.add(this.gizmo.scale = i0(Y)), this.add(this.picker.translate = i0(D)), this.add(this.picker.rotate = i0(V)), this.add(this.picker.scale = i0(W)), this.add(this.helper.translate = i0(z)), this.add(this.helper.rotate = i0(U)), this.add(this.helper.scale = i0(X)), this.picker.translate.visible = !1, this.picker.rotate.visible = !1, this.picker.scale.visible = !1;
  }
  // updateMatrixWorld will update transformations and appearance of individual handles
  updateMatrixWorld(e) {
    const n = (this.mode === "scale" ? this.space : "local") === "local" ? this.worldQuaternion : xr;
    this.gizmo.translate.visible = this.mode === "translate", this.gizmo.rotate.visible = this.mode === "rotate", this.gizmo.scale.visible = this.mode === "scale", this.helper.translate.visible = this.mode === "translate", this.helper.rotate.visible = this.mode === "rotate", this.helper.scale.visible = this.mode === "scale";
    let s = [];
    s = s.concat(this.picker[this.mode].children), s = s.concat(this.gizmo[this.mode].children), s = s.concat(this.helper[this.mode].children);
    for (let r = 0; r < s.length; r++) {
      const a = s[r];
      a.visible = !0, a.rotation.set(0, 0, 0), a.position.copy(this.worldPosition);
      let o;
      if (this.camera.isOrthographicCamera ? o = (this.camera.top - this.camera.bottom) / this.camera.zoom : o = this.worldPosition.distanceTo(this.cameraPosition) * Math.min(
        1.9 * Math.tan(Math.PI * this.camera.fov / 360) / this.camera.zoom,
        7
      ), a.scale.set(1, 1, 1).multiplyScalar(o * this.size / 7), a.tag === "helper") {
        a.visible = !1, a.name === "AXIS" ? (a.position.copy(this.worldPositionStart), a.visible = !!this.axis, this.axis === "X" && (xe.setFromEuler(Z7.set(0, 0, 0)), a.quaternion.copy(n).multiply(xe), Math.abs(
          de.copy(L9).applyQuaternion(n).dot(this.eye)
        ) > 0.9 && (a.visible = !1)), this.axis === "Y" && (xe.setFromEuler(Z7.set(0, 0, Math.PI / 2)), a.quaternion.copy(n).multiply(xe), Math.abs(
          de.copy(Sn).applyQuaternion(n).dot(this.eye)
        ) > 0.9 && (a.visible = !1)), this.axis === "Z" && (xe.setFromEuler(Z7.set(0, Math.PI / 2, 0)), a.quaternion.copy(n).multiply(xe), Math.abs(
          de.copy(R9).applyQuaternion(n).dot(this.eye)
        ) > 0.9 && (a.visible = !1)), this.axis === "XYZE" && (xe.setFromEuler(Z7.set(0, Math.PI / 2, 0)), de.copy(this.rotationAxis), a.quaternion.setFromRotationMatrix(
          lo.lookAt(oo, de, Sn)
        ), a.quaternion.multiply(xe), a.visible = this.dragging), this.axis === "E" && (a.visible = !1)) : a.name === "START" ? (a.position.copy(this.worldPositionStart), a.visible = this.dragging) : a.name === "END" ? (a.position.copy(this.worldPosition), a.visible = this.dragging) : a.name === "DELTA" ? (a.position.copy(this.worldPositionStart), a.quaternion.copy(this.worldQuaternionStart), Xt.set(1e-10, 1e-10, 1e-10).add(this.worldPositionStart).sub(this.worldPosition).multiplyScalar(-1), Xt.applyQuaternion(
          this.worldQuaternionStart.clone().invert()
        ), a.scale.copy(Xt), a.visible = this.dragging) : (a.quaternion.copy(n), this.dragging ? a.position.copy(this.worldPositionStart) : a.position.copy(this.worldPosition), this.axis && (a.visible = this.axis.search(a.name) !== -1));
        continue;
      }
      a.quaternion.copy(n), this.mode === "translate" || this.mode === "scale" ? ((a.name === "X" || a.name === "XYZX") && Math.abs(
        de.copy(L9).applyQuaternion(n).dot(this.eye)
      ) > 0.99 && (a.scale.set(1e-10, 1e-10, 1e-10), a.visible = !1), (a.name === "Y" || a.name === "XYZY") && Math.abs(
        de.copy(Sn).applyQuaternion(n).dot(this.eye)
      ) > 0.99 && (a.scale.set(1e-10, 1e-10, 1e-10), a.visible = !1), (a.name === "Z" || a.name === "XYZZ") && Math.abs(
        de.copy(R9).applyQuaternion(n).dot(this.eye)
      ) > 0.99 && (a.scale.set(1e-10, 1e-10, 1e-10), a.visible = !1), a.name === "XY" && Math.abs(
        de.copy(R9).applyQuaternion(n).dot(this.eye)
      ) < 0.2 && (a.scale.set(1e-10, 1e-10, 1e-10), a.visible = !1), a.name === "YZ" && Math.abs(
        de.copy(L9).applyQuaternion(n).dot(this.eye)
      ) < 0.2 && (a.scale.set(1e-10, 1e-10, 1e-10), a.visible = !1), a.name === "XZ" && Math.abs(
        de.copy(Sn).applyQuaternion(n).dot(this.eye)
      ) < 0.2 && (a.scale.set(1e-10, 1e-10, 1e-10), a.visible = !1), a.name.search("X") !== -1 && (de.copy(L9).applyQuaternion(n).dot(this.eye) < 0 ? a.tag === "fwd" ? a.visible = !1 : a.scale.x *= -1 : a.tag === "bwd" && (a.visible = !1)), a.name.search("Y") !== -1 && (de.copy(Sn).applyQuaternion(n).dot(this.eye) < 0 ? a.tag === "fwd" ? a.visible = !1 : a.scale.y *= -1 : a.tag === "bwd" && (a.visible = !1)), a.name.search("Z") !== -1 && (de.copy(R9).applyQuaternion(n).dot(this.eye) < 0 ? a.tag === "fwd" ? a.visible = !1 : a.scale.z *= -1 : a.tag === "bwd" && (a.visible = !1))) : this.mode === "rotate" && (q7.copy(n), de.copy(this.eye).applyQuaternion(xe.copy(n).invert()), a.name.search("E") !== -1 && a.quaternion.setFromRotationMatrix(
        lo.lookAt(this.eye, oo, Sn)
      ), a.name === "X" && (xe.setFromAxisAngle(
        L9,
        Math.atan2(-de.y, de.z)
      ), xe.multiplyQuaternions(
        q7,
        xe
      ), a.quaternion.copy(xe)), a.name === "Y" && (xe.setFromAxisAngle(
        Sn,
        Math.atan2(de.x, de.z)
      ), xe.multiplyQuaternions(
        q7,
        xe
      ), a.quaternion.copy(xe)), a.name === "Z" && (xe.setFromAxisAngle(
        R9,
        Math.atan2(de.y, de.x)
      ), xe.multiplyQuaternions(
        q7,
        xe
      ), a.quaternion.copy(xe))), a.visible = a.visible && (a.name.indexOf("X") === -1 || this.showX), a.visible = a.visible && (a.name.indexOf("Y") === -1 || this.showY), a.visible = a.visible && (a.name.indexOf("Z") === -1 || this.showZ), a.visible = a.visible && (a.name.indexOf("E") === -1 || this.showX && this.showY && this.showZ), a.material._opacity = a.material._opacity || a.material.opacity, a.material._color = a.material._color || a.material.color.clone(), a.material.color.copy(a.material._color), a.material.opacity = a.material._opacity, this.enabled ? this.axis && (a.name === this.axis ? (a.material.opacity = 1, a.material.color.lerp(new f0(1, 1, 1), 0.5)) : this.axis.split("").some(function(c) {
        return a.name === c;
      }) ? (a.material.opacity = 1, a.material.color.lerp(new f0(1, 1, 1), 0.5)) : (a.material.opacity *= 0.25, a.material.color.lerp(new f0(1, 1, 1), 0.5))) : (a.material.opacity *= 0.5, a.material.color.lerp(new f0(1, 1, 1), 0.5));
    }
    super.updateMatrixWorld(e);
  }
}
yu.prototype.isTransformControlsGizmo = !0;
class xu extends y0 {
  constructor() {
    super(
      new Dt(1e5, 1e5, 2, 2),
      new c1({
        visible: !1,
        wireframe: !0,
        side: Nt,
        transparent: !0,
        opacity: 0.1,
        toneMapped: !1
      })
    ), this.type = "TransformControlsPlane";
  }
  updateMatrixWorld(e) {
    let t = this.space;
    switch (this.position.copy(this.worldPosition), this.mode === "scale" && (t = "local"), $7.copy(L9).applyQuaternion(
      t === "local" ? this.worldQuaternion : xr
    ), T8.copy(Sn).applyQuaternion(
      t === "local" ? this.worldQuaternion : xr
    ), A8.copy(R9).applyQuaternion(
      t === "local" ? this.worldQuaternion : xr
    ), de.copy(T8), this.mode) {
      case "translate":
      case "scale":
        switch (this.axis) {
          case "X":
            de.copy(this.eye).cross($7), v1.copy($7).cross(de);
            break;
          case "Y":
            de.copy(this.eye).cross(T8), v1.copy(T8).cross(de);
            break;
          case "Z":
            de.copy(this.eye).cross(A8), v1.copy(A8).cross(de);
            break;
          case "XY":
            v1.copy(A8);
            break;
          case "YZ":
            v1.copy($7);
            break;
          case "XZ":
            de.copy(A8), v1.copy(T8);
            break;
          case "XYZ":
          case "E":
            v1.set(0, 0, 0);
            break;
        }
        break;
      case "rotate":
      default:
        v1.set(0, 0, 0);
    }
    v1.length() === 0 ? this.quaternion.copy(this.cameraQuaternion) : (co.lookAt(Xt.set(0, 0, 0), v1, de), this.quaternion.setFromRotationMatrix(co)), super.updateMatrixWorld(e);
  }
}
xu.prototype.isTransformControlsPlane = !0;
class cM {
  static computeTangents(e) {
    e.computeTangents(), console.warn(
      "THREE.BufferGeometryUtils: .computeTangents() has been removed. Use BufferGeometry.computeTangents() instead."
    );
  }
  /**
   * @param  {Array<BufferGeometry>} geometries
   * @param  {Boolean} useGroups
   * @return {BufferGeometry}
   */
  static mergeBufferGeometries(e, t = !1) {
    const n = e[0].index !== null, s = new Set(Object.keys(e[0].attributes)), r = new Set(
      Object.keys(e[0].morphAttributes)
    ), a = {}, o = {}, c = e[0].morphTargetsRelative, l = new F0();
    let h = 0;
    for (let d = 0; d < e.length; ++d) {
      const u = e[d];
      let f = 0;
      if (n !== (u.index !== null))
        return console.error(
          "THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index " + d + ". All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them."
        ), null;
      for (const p in u.attributes) {
        if (!s.has(p))
          return console.error(
            "THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index " + d + '. All geometries must have compatible attributes; make sure "' + p + '" attribute exists among all geometries, or in none of them.'
          ), null;
        a[p] === void 0 && (a[p] = []), a[p].push(u.attributes[p]), f++;
      }
      if (f !== s.size)
        return console.error(
          "THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index " + d + ". Make sure all geometries have the same number of attributes."
        ), null;
      if (c !== u.morphTargetsRelative)
        return console.error(
          "THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index " + d + ". .morphTargetsRelative must be consistent throughout all geometries."
        ), null;
      for (const p in u.morphAttributes) {
        if (!r.has(p))
          return console.error(
            "THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index " + d + ".  .morphAttributes must be consistent throughout all geometries."
          ), null;
        o[p] === void 0 && (o[p] = []), o[p].push(u.morphAttributes[p]);
      }
      if (l.userData.mergedUserData = l.userData.mergedUserData || [], l.userData.mergedUserData.push(u.userData), t) {
        let p;
        if (n)
          p = u.index.count;
        else if (u.attributes.position !== void 0)
          p = u.attributes.position.count;
        else
          return console.error(
            "THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index " + d + ". The geometry must have either an index or a position attribute"
          ), null;
        l.addGroup(h, p, d), h += p;
      }
    }
    if (n) {
      let d = 0;
      const u = [];
      for (let f = 0; f < e.length; ++f) {
        const p = e[f].index;
        for (let _ = 0; _ < p.count; ++_)
          u.push(p.getX(_) + d);
        d += e[f].attributes.position.count;
      }
      l.setIndex(u);
    }
    for (const d in a) {
      const u = this.mergeBufferAttributes(a[d]);
      if (!u)
        return console.error(
          "THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the " + d + " attribute."
        ), null;
      l.setAttribute(d, u);
    }
    for (const d in o) {
      const u = o[d][0].length;
      if (u === 0)
        break;
      l.morphAttributes = l.morphAttributes || {}, l.morphAttributes[d] = [];
      for (let f = 0; f < u; ++f) {
        const p = [];
        for (let g = 0; g < o[d].length; ++g)
          p.push(o[d][g][f]);
        const _ = this.mergeBufferAttributes(
          p
        );
        if (!_)
          return console.error(
            "THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the " + d + " morphAttribute."
          ), null;
        l.morphAttributes[d].push(_);
      }
    }
    return l;
  }
  /**
   * @param {Array<BufferAttribute>} attributes
   * @return {BufferAttribute}
   */
  static mergeBufferAttributes(e) {
    let t, n, s, r = 0;
    for (let c = 0; c < e.length; ++c) {
      const l = e[c];
      if (l.isInterleavedBufferAttribute)
        return console.error(
          "THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported."
        ), null;
      if (t === void 0 && (t = l.array.constructor), t !== l.array.constructor)
        return console.error(
          "THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes."
        ), null;
      if (n === void 0 && (n = l.itemSize), n !== l.itemSize)
        return console.error(
          "THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes."
        ), null;
      if (s === void 0 && (s = l.normalized), s !== l.normalized)
        return console.error(
          "THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes."
        ), null;
      r += l.array.length;
    }
    const a = new t(r);
    let o = 0;
    for (let c = 0; c < e.length; ++c)
      a.set(e[c].array, o), o += e[c].array.length;
    return new ee(a, n, s);
  }
  /**
   * @param {Array<BufferAttribute>} attributes
   * @return {Array<InterleavedBufferAttribute>}
   */
  static interleaveAttributes(e) {
    let t, n = 0, s = 0;
    for (let h = 0, d = e.length; h < d; ++h) {
      const u = e[h];
      if (t === void 0 && (t = u.array.constructor), t !== u.array.constructor)
        return console.error(
          "AttributeBuffers of different types cannot be interleaved"
        ), null;
      n += u.array.length, s += u.itemSize;
    }
    const r = new Ds(
      new t(n),
      s
    );
    let a = 0;
    const o = [], c = ["getX", "getY", "getZ", "getW"], l = ["setX", "setY", "setZ", "setW"];
    for (let h = 0, d = e.length; h < d; h++) {
      const u = e[h], f = u.itemSize, p = u.count, _ = new Jn(
        r,
        f,
        a,
        u.normalized
      );
      o.push(_), a += f;
      for (let g = 0; g < p; g++)
        for (let m = 0; m < f; m++)
          _[l[m]](g, u[c[m]](g));
    }
    return o;
  }
  /**
   * @param {Array<BufferGeometry>} geometry
   * @return {number}
   */
  static estimateBytesUsed(e) {
    let t = 0;
    for (const s in e.attributes) {
      const r = e.getAttribute(s);
      t += r.count * r.itemSize * r.array.BYTES_PER_ELEMENT;
    }
    const n = e.getIndex();
    return t += n ? n.count * n.itemSize * n.array.BYTES_PER_ELEMENT : 0, t;
  }
  /**
   * @param {BufferGeometry} geometry
   * @param {number} tolerance
   * @return {BufferGeometry>}
   */
  static mergeVertices(e, t = 1e-4) {
    t = Math.max(t, Number.EPSILON);
    const n = {}, s = e.getIndex(), r = e.getAttribute("position"), a = s ? s.count : r.count;
    let o = 0;
    const c = Object.keys(e.attributes), l = {}, h = {}, d = [], u = ["getX", "getY", "getZ", "getW"];
    for (let g = 0, m = c.length; g < m; g++) {
      const v = c[g];
      l[v] = [];
      const y = e.morphAttributes[v];
      y && (h[v] = new Array(y.length).fill().map(() => []));
    }
    const f = Math.log10(1 / t), p = Math.pow(10, f);
    for (let g = 0; g < a; g++) {
      const m = s ? s.getX(g) : g;
      let v = "";
      for (let y = 0, b = c.length; y < b; y++) {
        const w = c[y], x = e.getAttribute(w), S = x.itemSize;
        for (let T = 0; T < S; T++)
          v += `${~~(x[u[T]](m) * p)},`;
      }
      if (v in n)
        d.push(n[v]);
      else {
        for (let y = 0, b = c.length; y < b; y++) {
          const w = c[y], x = e.getAttribute(w), S = e.morphAttributes[w], T = x.itemSize, M = l[w], A = h[w];
          for (let D = 0; D < T; D++) {
            const z = u[D];
            if (M.push(x[z](m)), S)
              for (let O = 0, U = S.length; O < U; O++)
                A[O].push(S[O][z](m));
          }
        }
        n[v] = o, d.push(o), o++;
      }
    }
    const _ = e.clone();
    for (let g = 0, m = c.length; g < m; g++) {
      const v = c[g], y = e.getAttribute(v), b = new y.array.constructor(l[v]), w = new ee(
        b,
        y.itemSize,
        y.normalized
      );
      if (_.setAttribute(v, w), v in h)
        for (let x = 0; x < h[v].length; x++) {
          const S = e.morphAttributes[v][x], T = new S.array.constructor(
            h[v][x]
          ), M = new ee(
            T,
            S.itemSize,
            S.normalized
          );
          _.morphAttributes[v][x] = M;
        }
    }
    return _.setIndex(d), _;
  }
  /**
   * @param {BufferGeometry} geometry
   * @param {number} drawMode
   * @return {BufferGeometry>}
   */
  static toTrianglesDrawMode(e, t) {
    if (t === lh)
      return console.warn(
        "THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles."
      ), e;
    if (t === M5 || t === ch) {
      let n = e.getIndex();
      if (n === null) {
        const o = [], c = e.getAttribute("position");
        if (c !== void 0) {
          for (let l = 0; l < c.count; l++)
            o.push(l);
          e.setIndex(o), n = e.getIndex();
        } else
          return console.error(
            "THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."
          ), e;
      }
      const s = n.count - 2, r = [];
      if (t === M5)
        for (let o = 1; o <= s; o++)
          r.push(n.getX(0)), r.push(n.getX(o)), r.push(n.getX(o + 1));
      else
        for (let o = 0; o < s; o++)
          o % 2 === 0 ? (r.push(n.getX(o)), r.push(n.getX(o + 1)), r.push(n.getX(o + 2))) : (r.push(n.getX(o + 2)), r.push(n.getX(o + 1)), r.push(n.getX(o)));
      r.length / 3 !== s && console.error(
        "THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles."
      );
      const a = e.clone();
      return a.setIndex(r), a.clearGroups(), a;
    } else
      return console.error(
        "THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:",
        t
      ), e;
  }
  /**
   * Calculates the morphed attributes of a morphed/skinned BufferGeometry.
   * Helpful for Raytracing or Decals.
   * @param {Mesh | Line | Points} object An instance of Mesh, Line or Points.
   * @return {Object} An Object with original position/normal attributes and morphed ones.
   */
  static computeMorphedAttributes(e) {
    if (e.geometry.isBufferGeometry !== !0)
      return console.error(
        "THREE.BufferGeometryUtils: Geometry is not of type BufferGeometry."
      ), null;
    const t = new C(), n = new C(), s = new C(), r = new C(), a = new C(), o = new C(), c = new C(), l = new C(), h = new C();
    function d(x0, u0, E, F, R, j, B, m0, b0) {
      t.fromBufferAttribute(E, j), n.fromBufferAttribute(E, B), s.fromBufferAttribute(E, m0);
      const e0 = x0.morphTargetInfluences;
      if (u0.morphTargets && F && e0) {
        c.set(0, 0, 0), l.set(0, 0, 0), h.set(0, 0, 0);
        for (let M0 = 0, r0 = F.length; M0 < r0; M0++) {
          const Z = e0[M0], n0 = F[M0];
          Z !== 0 && (r.fromBufferAttribute(n0, j), a.fromBufferAttribute(n0, B), o.fromBufferAttribute(n0, m0), R ? (c.addScaledVector(r, Z), l.addScaledVector(a, Z), h.addScaledVector(o, Z)) : (c.addScaledVector(r.sub(t), Z), l.addScaledVector(a.sub(n), Z), h.addScaledVector(o.sub(s), Z)));
        }
        t.add(c), n.add(l), s.add(h);
      }
      x0.isSkinnedMesh && (x0.boneTransform(j, t), x0.boneTransform(B, n), x0.boneTransform(m0, s)), b0[j * 3 + 0] = t.x, b0[j * 3 + 1] = t.y, b0[j * 3 + 2] = t.z, b0[B * 3 + 0] = n.x, b0[B * 3 + 1] = n.y, b0[B * 3 + 2] = n.z, b0[m0 * 3 + 0] = s.x, b0[m0 * 3 + 1] = s.y, b0[m0 * 3 + 2] = s.z;
    }
    const u = e.geometry, f = e.material;
    let p, _, g;
    const m = u.index, v = u.attributes.position, y = u.morphAttributes.position, b = u.morphTargetsRelative, w = u.attributes.normal, x = u.morphAttributes.position, S = u.groups, T = u.drawRange;
    let M, A, D, z, O, U, V, Y;
    const W = new Float32Array(
      v.count * v.itemSize
    ), X = new Float32Array(
      w.count * w.itemSize
    );
    if (m !== null)
      if (Array.isArray(f))
        for (M = 0, D = S.length; M < D; M++)
          for (O = S[M], U = f[O.materialIndex], V = Math.max(O.start, T.start), Y = Math.min(
            O.start + O.count,
            T.start + T.count
          ), A = V, z = Y; A < z; A += 3)
            p = m.getX(A), _ = m.getX(A + 1), g = m.getX(A + 2), d(
              e,
              U,
              v,
              y,
              b,
              p,
              _,
              g,
              W
            ), d(
              e,
              U,
              w,
              x,
              b,
              p,
              _,
              g,
              X
            );
      else
        for (V = Math.max(0, T.start), Y = Math.min(m.count, T.start + T.count), M = V, D = Y; M < D; M += 3)
          p = m.getX(M), _ = m.getX(M + 1), g = m.getX(M + 2), d(
            e,
            f,
            v,
            y,
            b,
            p,
            _,
            g,
            W
          ), d(
            e,
            f,
            w,
            x,
            b,
            p,
            _,
            g,
            X
          );
    else if (v !== void 0)
      if (Array.isArray(f))
        for (M = 0, D = S.length; M < D; M++)
          for (O = S[M], U = f[O.materialIndex], V = Math.max(O.start, T.start), Y = Math.min(
            O.start + O.count,
            T.start + T.count
          ), A = V, z = Y; A < z; A += 3)
            p = A, _ = A + 1, g = A + 2, d(
              e,
              U,
              v,
              y,
              b,
              p,
              _,
              g,
              W
            ), d(
              e,
              U,
              w,
              x,
              b,
              p,
              _,
              g,
              X
            );
      else
        for (V = Math.max(0, T.start), Y = Math.min(
          v.count,
          T.start + T.count
        ), M = V, D = Y; M < D; M += 3)
          p = M, _ = M + 1, g = M + 2, d(
            e,
            f,
            v,
            y,
            b,
            p,
            _,
            g,
            W
          ), d(
            e,
            f,
            w,
            x,
            b,
            p,
            _,
            g,
            X
          );
    const i0 = new v0(
      W,
      3
    ), a0 = new v0(
      X,
      3
    );
    return {
      positionAttribute: v,
      normalAttribute: w,
      morphedPositionAttribute: i0,
      morphedNormalAttribute: a0
    };
  }
}
class hM {
  constructor() {
    I(this, "dataSpace");
    I(this, "transformedSpace");
    I(this, "matrixData");
    this.dataSpace = null, this.transformedSpace = null, this.matrixData = null;
  }
}
class uM {
  constructor(e) {
    I(this, "key");
    I(this, "r");
    I(this, "g");
    I(this, "b");
    I(this, "a");
    I(this, "label");
    this.key = e.Key || e.Index, this.r = parseFloat(e.Red), this.g = parseFloat(e.Green), this.b = parseFloat(e.Blue), this.a = parseFloat(e.Alpha), this.label = null;
  }
}
function dM(i) {
  return i && i.__esModule && Object.prototype.hasOwnProperty.call(i, "default") ? i.default : i;
}
var un = {};
(function(i) {
  var e = typeof Uint8Array < "u" && typeof Uint16Array < "u" && typeof Int32Array < "u";
  function t(r, a) {
    return Object.prototype.hasOwnProperty.call(r, a);
  }
  i.assign = function(r) {
    for (var a = Array.prototype.slice.call(arguments, 1); a.length; ) {
      var o = a.shift();
      if (o) {
        if (typeof o != "object")
          throw new TypeError(o + "must be non-object");
        for (var c in o)
          t(o, c) && (r[c] = o[c]);
      }
    }
    return r;
  }, i.shrinkBuf = function(r, a) {
    return r.length === a ? r : r.subarray ? r.subarray(0, a) : (r.length = a, r);
  };
  var n = {
    arraySet: function(r, a, o, c, l) {
      if (a.subarray && r.subarray) {
        r.set(a.subarray(o, o + c), l);
        return;
      }
      for (var h = 0; h < c; h++)
        r[l + h] = a[o + h];
    },
    // Join array of chunks to single array.
    flattenChunks: function(r) {
      var a, o, c, l, h, d;
      for (c = 0, a = 0, o = r.length; a < o; a++)
        c += r[a].length;
      for (d = new Uint8Array(c), l = 0, a = 0, o = r.length; a < o; a++)
        h = r[a], d.set(h, l), l += h.length;
      return d;
    }
  }, s = {
    arraySet: function(r, a, o, c, l) {
      for (var h = 0; h < c; h++)
        r[l + h] = a[o + h];
    },
    // Join array of chunks to single array.
    flattenChunks: function(r) {
      return [].concat.apply([], r);
    }
  };
  i.setTyped = function(r) {
    r ? (i.Buf8 = Uint8Array, i.Buf16 = Uint16Array, i.Buf32 = Int32Array, i.assign(i, n)) : (i.Buf8 = Array, i.Buf16 = Array, i.Buf32 = Array, i.assign(i, s));
  }, i.setTyped(e);
})(un);
var Xs = {}, k1 = {}, a8 = {}, fM = un, pM = 4, ho = 0, uo = 1, mM = 2;
function o8(i) {
  for (var e = i.length; --e >= 0; )
    i[e] = 0;
}
var gM = 0, bu = 1, _M = 2, vM = 3, yM = 258, q2 = 29, Ys = 256, xs = Ys + 1 + q2, V9 = 30, $2 = 19, wu = 2 * xs + 1, Ti = 15, u3 = 16, xM = 7, j2 = 256, Mu = 16, Su = 17, Eu = 18, O5 = (
  /* extra bits for each length code */
  [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0]
), br = (
  /* extra bits for each distance code */
  [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]
), bM = (
  /* extra bits for each bit length code */
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7]
), Tu = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15], wM = 512, K1 = new Array((xs + 2) * 2);
o8(K1);
var W8 = new Array(V9 * 2);
o8(W8);
var bs = new Array(wM);
o8(bs);
var ws = new Array(yM - vM + 1);
o8(ws);
var J2 = new Array(q2);
o8(J2);
var Ur = new Array(V9);
o8(Ur);
function d3(i, e, t, n, s) {
  this.static_tree = i, this.extra_bits = e, this.extra_base = t, this.elems = n, this.max_length = s, this.has_stree = i && i.length;
}
var Au, Cu, Iu;
function f3(i, e) {
  this.dyn_tree = i, this.max_code = 0, this.stat_desc = e;
}
function Lu(i) {
  return i < 256 ? bs[i] : bs[256 + (i >>> 7)];
}
function Ms(i, e) {
  i.pending_buf[i.pending++] = e & 255, i.pending_buf[i.pending++] = e >>> 8 & 255;
}
function Tt(i, e, t) {
  i.bi_valid > u3 - t ? (i.bi_buf |= e << i.bi_valid & 65535, Ms(i, i.bi_buf), i.bi_buf = e >> u3 - i.bi_valid, i.bi_valid += t - u3) : (i.bi_buf |= e << i.bi_valid & 65535, i.bi_valid += t);
}
function T1(i, e, t) {
  Tt(
    i,
    t[e * 2],
    t[e * 2 + 1]
    /*.Len*/
  );
}
function Ru(i, e) {
  var t = 0;
  do
    t |= i & 1, i >>>= 1, t <<= 1;
  while (--e > 0);
  return t >>> 1;
}
function MM(i) {
  i.bi_valid === 16 ? (Ms(i, i.bi_buf), i.bi_buf = 0, i.bi_valid = 0) : i.bi_valid >= 8 && (i.pending_buf[i.pending++] = i.bi_buf & 255, i.bi_buf >>= 8, i.bi_valid -= 8);
}
function SM(i, e) {
  var t = e.dyn_tree, n = e.max_code, s = e.stat_desc.static_tree, r = e.stat_desc.has_stree, a = e.stat_desc.extra_bits, o = e.stat_desc.extra_base, c = e.stat_desc.max_length, l, h, d, u, f, p, _ = 0;
  for (u = 0; u <= Ti; u++)
    i.bl_count[u] = 0;
  for (t[i.heap[i.heap_max] * 2 + 1] = 0, l = i.heap_max + 1; l < wu; l++)
    h = i.heap[l], u = t[t[h * 2 + 1] * 2 + 1] + 1, u > c && (u = c, _++), t[h * 2 + 1] = u, !(h > n) && (i.bl_count[u]++, f = 0, h >= o && (f = a[h - o]), p = t[h * 2], i.opt_len += p * (u + f), r && (i.static_len += p * (s[h * 2 + 1] + f)));
  if (_ !== 0) {
    do {
      for (u = c - 1; i.bl_count[u] === 0; )
        u--;
      i.bl_count[u]--, i.bl_count[u + 1] += 2, i.bl_count[c]--, _ -= 2;
    } while (_ > 0);
    for (u = c; u !== 0; u--)
      for (h = i.bl_count[u]; h !== 0; )
        d = i.heap[--l], !(d > n) && (t[d * 2 + 1] !== u && (i.opt_len += (u - t[d * 2 + 1]) * t[d * 2], t[d * 2 + 1] = u), h--);
  }
}
function Pu(i, e, t) {
  var n = new Array(Ti + 1), s = 0, r, a;
  for (r = 1; r <= Ti; r++)
    n[r] = s = s + t[r - 1] << 1;
  for (a = 0; a <= e; a++) {
    var o = i[a * 2 + 1];
    o !== 0 && (i[a * 2] = Ru(n[o]++, o));
  }
}
function EM() {
  var i, e, t, n, s, r = new Array(Ti + 1);
  for (t = 0, n = 0; n < q2 - 1; n++)
    for (J2[n] = t, i = 0; i < 1 << O5[n]; i++)
      ws[t++] = n;
  for (ws[t - 1] = n, s = 0, n = 0; n < 16; n++)
    for (Ur[n] = s, i = 0; i < 1 << br[n]; i++)
      bs[s++] = n;
  for (s >>= 7; n < V9; n++)
    for (Ur[n] = s << 7, i = 0; i < 1 << br[n] - 7; i++)
      bs[256 + s++] = n;
  for (e = 0; e <= Ti; e++)
    r[e] = 0;
  for (i = 0; i <= 143; )
    K1[i * 2 + 1] = 8, i++, r[8]++;
  for (; i <= 255; )
    K1[i * 2 + 1] = 9, i++, r[9]++;
  for (; i <= 279; )
    K1[i * 2 + 1] = 7, i++, r[7]++;
  for (; i <= 287; )
    K1[i * 2 + 1] = 8, i++, r[8]++;
  for (Pu(K1, xs + 1, r), i = 0; i < V9; i++)
    W8[i * 2 + 1] = 5, W8[i * 2] = Ru(i, 5);
  Au = new d3(K1, O5, Ys + 1, xs, Ti), Cu = new d3(W8, br, 0, V9, Ti), Iu = new d3(new Array(0), bM, 0, $2, xM);
}
function Du(i) {
  var e;
  for (e = 0; e < xs; e++)
    i.dyn_ltree[e * 2] = 0;
  for (e = 0; e < V9; e++)
    i.dyn_dtree[e * 2] = 0;
  for (e = 0; e < $2; e++)
    i.bl_tree[e * 2] = 0;
  i.dyn_ltree[j2 * 2] = 1, i.opt_len = i.static_len = 0, i.last_lit = i.matches = 0;
}
function Nu(i) {
  i.bi_valid > 8 ? Ms(i, i.bi_buf) : i.bi_valid > 0 && (i.pending_buf[i.pending++] = i.bi_buf), i.bi_buf = 0, i.bi_valid = 0;
}
function TM(i, e, t, n) {
  Nu(i), n && (Ms(i, t), Ms(i, ~t)), fM.arraySet(i.pending_buf, i.window, e, t, i.pending), i.pending += t;
}
function fo(i, e, t, n) {
  var s = e * 2, r = t * 2;
  return i[s] < i[r] || i[s] === i[r] && n[e] <= n[t];
}
function p3(i, e, t) {
  for (var n = i.heap[t], s = t << 1; s <= i.heap_len && (s < i.heap_len && fo(e, i.heap[s + 1], i.heap[s], i.depth) && s++, !fo(e, n, i.heap[s], i.depth)); )
    i.heap[t] = i.heap[s], t = s, s <<= 1;
  i.heap[t] = n;
}
function po(i, e, t) {
  var n, s, r = 0, a, o;
  if (i.last_lit !== 0)
    do
      n = i.pending_buf[i.d_buf + r * 2] << 8 | i.pending_buf[i.d_buf + r * 2 + 1], s = i.pending_buf[i.l_buf + r], r++, n === 0 ? T1(i, s, e) : (a = ws[s], T1(i, a + Ys + 1, e), o = O5[a], o !== 0 && (s -= J2[a], Tt(i, s, o)), n--, a = Lu(n), T1(i, a, t), o = br[a], o !== 0 && (n -= Ur[a], Tt(i, n, o)));
    while (r < i.last_lit);
  T1(i, j2, e);
}
function U5(i, e) {
  var t = e.dyn_tree, n = e.stat_desc.static_tree, s = e.stat_desc.has_stree, r = e.stat_desc.elems, a, o, c = -1, l;
  for (i.heap_len = 0, i.heap_max = wu, a = 0; a < r; a++)
    t[a * 2] !== 0 ? (i.heap[++i.heap_len] = c = a, i.depth[a] = 0) : t[a * 2 + 1] = 0;
  for (; i.heap_len < 2; )
    l = i.heap[++i.heap_len] = c < 2 ? ++c : 0, t[l * 2] = 1, i.depth[l] = 0, i.opt_len--, s && (i.static_len -= n[l * 2 + 1]);
  for (e.max_code = c, a = i.heap_len >> 1; a >= 1; a--)
    p3(i, t, a);
  l = r;
  do
    a = i.heap[
      1
      /*SMALLEST*/
    ], i.heap[
      1
      /*SMALLEST*/
    ] = i.heap[i.heap_len--], p3(
      i,
      t,
      1
      /*SMALLEST*/
    ), o = i.heap[
      1
      /*SMALLEST*/
    ], i.heap[--i.heap_max] = a, i.heap[--i.heap_max] = o, t[l * 2] = t[a * 2] + t[o * 2], i.depth[l] = (i.depth[a] >= i.depth[o] ? i.depth[a] : i.depth[o]) + 1, t[a * 2 + 1] = t[o * 2 + 1] = l, i.heap[
      1
      /*SMALLEST*/
    ] = l++, p3(
      i,
      t,
      1
      /*SMALLEST*/
    );
  while (i.heap_len >= 2);
  i.heap[--i.heap_max] = i.heap[
    1
    /*SMALLEST*/
  ], SM(i, e), Pu(t, c, i.bl_count);
}
function mo(i, e, t) {
  var n, s = -1, r, a = e[0 * 2 + 1], o = 0, c = 7, l = 4;
  for (a === 0 && (c = 138, l = 3), e[(t + 1) * 2 + 1] = 65535, n = 0; n <= t; n++)
    r = a, a = e[(n + 1) * 2 + 1], !(++o < c && r === a) && (o < l ? i.bl_tree[r * 2] += o : r !== 0 ? (r !== s && i.bl_tree[r * 2]++, i.bl_tree[Mu * 2]++) : o <= 10 ? i.bl_tree[Su * 2]++ : i.bl_tree[Eu * 2]++, o = 0, s = r, a === 0 ? (c = 138, l = 3) : r === a ? (c = 6, l = 3) : (c = 7, l = 4));
}
function go(i, e, t) {
  var n, s = -1, r, a = e[0 * 2 + 1], o = 0, c = 7, l = 4;
  for (a === 0 && (c = 138, l = 3), n = 0; n <= t; n++)
    if (r = a, a = e[(n + 1) * 2 + 1], !(++o < c && r === a)) {
      if (o < l)
        do
          T1(i, r, i.bl_tree);
        while (--o !== 0);
      else
        r !== 0 ? (r !== s && (T1(i, r, i.bl_tree), o--), T1(i, Mu, i.bl_tree), Tt(i, o - 3, 2)) : o <= 10 ? (T1(i, Su, i.bl_tree), Tt(i, o - 3, 3)) : (T1(i, Eu, i.bl_tree), Tt(i, o - 11, 7));
      o = 0, s = r, a === 0 ? (c = 138, l = 3) : r === a ? (c = 6, l = 3) : (c = 7, l = 4);
    }
}
function AM(i) {
  var e;
  for (mo(i, i.dyn_ltree, i.l_desc.max_code), mo(i, i.dyn_dtree, i.d_desc.max_code), U5(i, i.bl_desc), e = $2 - 1; e >= 3 && i.bl_tree[Tu[e] * 2 + 1] === 0; e--)
    ;
  return i.opt_len += 3 * (e + 1) + 5 + 5 + 4, e;
}
function CM(i, e, t, n) {
  var s;
  for (Tt(i, e - 257, 5), Tt(i, t - 1, 5), Tt(i, n - 4, 4), s = 0; s < n; s++)
    Tt(i, i.bl_tree[Tu[s] * 2 + 1], 3);
  go(i, i.dyn_ltree, e - 1), go(i, i.dyn_dtree, t - 1);
}
function IM(i) {
  var e = 4093624447, t;
  for (t = 0; t <= 31; t++, e >>>= 1)
    if (e & 1 && i.dyn_ltree[t * 2] !== 0)
      return ho;
  if (i.dyn_ltree[9 * 2] !== 0 || i.dyn_ltree[10 * 2] !== 0 || i.dyn_ltree[13 * 2] !== 0)
    return uo;
  for (t = 32; t < Ys; t++)
    if (i.dyn_ltree[t * 2] !== 0)
      return uo;
  return ho;
}
var _o = !1;
function LM(i) {
  _o || (EM(), _o = !0), i.l_desc = new f3(i.dyn_ltree, Au), i.d_desc = new f3(i.dyn_dtree, Cu), i.bl_desc = new f3(i.bl_tree, Iu), i.bi_buf = 0, i.bi_valid = 0, Du(i);
}
function Ou(i, e, t, n) {
  Tt(i, (gM << 1) + (n ? 1 : 0), 3), TM(i, e, t, !0);
}
function RM(i) {
  Tt(i, bu << 1, 3), T1(i, j2, K1), MM(i);
}
function PM(i, e, t, n) {
  var s, r, a = 0;
  i.level > 0 ? (i.strm.data_type === mM && (i.strm.data_type = IM(i)), U5(i, i.l_desc), U5(i, i.d_desc), a = AM(i), s = i.opt_len + 3 + 7 >>> 3, r = i.static_len + 3 + 7 >>> 3, r <= s && (s = r)) : s = r = t + 5, t + 4 <= s && e !== -1 ? Ou(i, e, t, n) : i.strategy === pM || r === s ? (Tt(i, (bu << 1) + (n ? 1 : 0), 3), po(i, K1, W8)) : (Tt(i, (_M << 1) + (n ? 1 : 0), 3), CM(i, i.l_desc.max_code + 1, i.d_desc.max_code + 1, a + 1), po(i, i.dyn_ltree, i.dyn_dtree)), Du(i), n && Nu(i);
}
function DM(i, e, t) {
  return i.pending_buf[i.d_buf + i.last_lit * 2] = e >>> 8 & 255, i.pending_buf[i.d_buf + i.last_lit * 2 + 1] = e & 255, i.pending_buf[i.l_buf + i.last_lit] = t & 255, i.last_lit++, e === 0 ? i.dyn_ltree[t * 2]++ : (i.matches++, e--, i.dyn_ltree[(ws[t] + Ys + 1) * 2]++, i.dyn_dtree[Lu(e) * 2]++), i.last_lit === i.lit_bufsize - 1;
}
a8._tr_init = LM;
a8._tr_stored_block = Ou;
a8._tr_flush_block = PM;
a8._tr_tally = DM;
a8._tr_align = RM;
function NM(i, e, t, n) {
  for (var s = i & 65535 | 0, r = i >>> 16 & 65535 | 0, a = 0; t !== 0; ) {
    a = t > 2e3 ? 2e3 : t, t -= a;
    do
      s = s + e[n++] | 0, r = r + s | 0;
    while (--a);
    s %= 65521, r %= 65521;
  }
  return s | r << 16 | 0;
}
var Uu = NM;
function OM() {
  for (var i, e = [], t = 0; t < 256; t++) {
    i = t;
    for (var n = 0; n < 8; n++)
      i = i & 1 ? 3988292384 ^ i >>> 1 : i >>> 1;
    e[t] = i;
  }
  return e;
}
var UM = OM();
function FM(i, e, t, n) {
  var s = UM, r = n + t;
  i ^= -1;
  for (var a = n; a < r; a++)
    i = i >>> 8 ^ s[(i ^ e[a]) & 255];
  return i ^ -1;
}
var Fu = FM, K2 = {
  2: "need dictionary",
  /* Z_NEED_DICT       2  */
  1: "stream end",
  /* Z_STREAM_END      1  */
  0: "",
  /* Z_OK              0  */
  "-1": "file error",
  /* Z_ERRNO         (-1) */
  "-2": "stream error",
  /* Z_STREAM_ERROR  (-2) */
  "-3": "data error",
  /* Z_DATA_ERROR    (-3) */
  "-4": "insufficient memory",
  /* Z_MEM_ERROR     (-4) */
  "-5": "buffer error",
  /* Z_BUF_ERROR     (-5) */
  "-6": "incompatible version"
  /* Z_VERSION_ERROR (-6) */
}, vt = un, Zt = a8, zu = Uu, En = Fu, zM = K2, ji = 0, kM = 1, BM = 3, Gn = 4, vo = 5, A1 = 0, yo = 1, qt = -2, VM = -3, m3 = -5, HM = -1, GM = 1, j7 = 2, WM = 3, XM = 4, YM = 0, ZM = 2, m6 = 8, qM = 9, $M = 15, jM = 8, JM = 29, KM = 256, F5 = KM + 1 + JM, QM = 30, eS = 19, tS = 2 * F5 + 1, nS = 15, ne = 3, Fn = 258, r1 = Fn + ne + 1, iS = 32, g6 = 42, z5 = 69, wr = 73, Mr = 91, Sr = 103, Ai = 113, F8 = 666, Xe = 1, Zs = 2, zi = 3, l8 = 4, sS = 3;
function zn(i, e) {
  return i.msg = zM[e], e;
}
function xo(i) {
  return (i << 1) - (i > 4 ? 9 : 0);
}
function Nn(i) {
  for (var e = i.length; --e >= 0; )
    i[e] = 0;
}
function Tn(i) {
  var e = i.state, t = e.pending;
  t > i.avail_out && (t = i.avail_out), t !== 0 && (vt.arraySet(i.output, e.pending_buf, e.pending_out, t, i.next_out), i.next_out += t, e.pending_out += t, i.total_out += t, i.avail_out -= t, e.pending -= t, e.pending === 0 && (e.pending_out = 0));
}
function nt(i, e) {
  Zt._tr_flush_block(i, i.block_start >= 0 ? i.block_start : -1, i.strstart - i.block_start, e), i.block_start = i.strstart, Tn(i.strm);
}
function he(i, e) {
  i.pending_buf[i.pending++] = e;
}
function C8(i, e) {
  i.pending_buf[i.pending++] = e >>> 8 & 255, i.pending_buf[i.pending++] = e & 255;
}
function rS(i, e, t, n) {
  var s = i.avail_in;
  return s > n && (s = n), s === 0 ? 0 : (i.avail_in -= s, vt.arraySet(e, i.input, i.next_in, s, t), i.state.wrap === 1 ? i.adler = zu(i.adler, e, s, t) : i.state.wrap === 2 && (i.adler = En(i.adler, e, s, t)), i.next_in += s, i.total_in += s, s);
}
function ku(i, e) {
  var t = i.max_chain_length, n = i.strstart, s, r, a = i.prev_length, o = i.nice_match, c = i.strstart > i.w_size - r1 ? i.strstart - (i.w_size - r1) : 0, l = i.window, h = i.w_mask, d = i.prev, u = i.strstart + Fn, f = l[n + a - 1], p = l[n + a];
  i.prev_length >= i.good_match && (t >>= 2), o > i.lookahead && (o = i.lookahead);
  do
    if (s = e, !(l[s + a] !== p || l[s + a - 1] !== f || l[s] !== l[n] || l[++s] !== l[n + 1])) {
      n += 2, s++;
      do
        ;
      while (l[++n] === l[++s] && l[++n] === l[++s] && l[++n] === l[++s] && l[++n] === l[++s] && l[++n] === l[++s] && l[++n] === l[++s] && l[++n] === l[++s] && l[++n] === l[++s] && n < u);
      if (r = Fn - (u - n), n = u - Fn, r > a) {
        if (i.match_start = e, a = r, r >= o)
          break;
        f = l[n + a - 1], p = l[n + a];
      }
    }
  while ((e = d[e & h]) > c && --t !== 0);
  return a <= i.lookahead ? a : i.lookahead;
}
function ki(i) {
  var e = i.w_size, t, n, s, r, a;
  do {
    if (r = i.window_size - i.lookahead - i.strstart, i.strstart >= e + (e - r1)) {
      vt.arraySet(i.window, i.window, e, e, 0), i.match_start -= e, i.strstart -= e, i.block_start -= e, n = i.hash_size, t = n;
      do
        s = i.head[--t], i.head[t] = s >= e ? s - e : 0;
      while (--n);
      n = e, t = n;
      do
        s = i.prev[--t], i.prev[t] = s >= e ? s - e : 0;
      while (--n);
      r += e;
    }
    if (i.strm.avail_in === 0)
      break;
    if (n = rS(i.strm, i.window, i.strstart + i.lookahead, r), i.lookahead += n, i.lookahead + i.insert >= ne)
      for (a = i.strstart - i.insert, i.ins_h = i.window[a], i.ins_h = (i.ins_h << i.hash_shift ^ i.window[a + 1]) & i.hash_mask; i.insert && (i.ins_h = (i.ins_h << i.hash_shift ^ i.window[a + ne - 1]) & i.hash_mask, i.prev[a & i.w_mask] = i.head[i.ins_h], i.head[i.ins_h] = a, a++, i.insert--, !(i.lookahead + i.insert < ne)); )
        ;
  } while (i.lookahead < r1 && i.strm.avail_in !== 0);
}
function aS(i, e) {
  var t = 65535;
  for (t > i.pending_buf_size - 5 && (t = i.pending_buf_size - 5); ; ) {
    if (i.lookahead <= 1) {
      if (ki(i), i.lookahead === 0 && e === ji)
        return Xe;
      if (i.lookahead === 0)
        break;
    }
    i.strstart += i.lookahead, i.lookahead = 0;
    var n = i.block_start + t;
    if ((i.strstart === 0 || i.strstart >= n) && (i.lookahead = i.strstart - n, i.strstart = n, nt(i, !1), i.strm.avail_out === 0) || i.strstart - i.block_start >= i.w_size - r1 && (nt(i, !1), i.strm.avail_out === 0))
      return Xe;
  }
  return i.insert = 0, e === Gn ? (nt(i, !0), i.strm.avail_out === 0 ? zi : l8) : (i.strstart > i.block_start && (nt(i, !1), i.strm.avail_out === 0), Xe);
}
function g3(i, e) {
  for (var t, n; ; ) {
    if (i.lookahead < r1) {
      if (ki(i), i.lookahead < r1 && e === ji)
        return Xe;
      if (i.lookahead === 0)
        break;
    }
    if (t = 0, i.lookahead >= ne && (i.ins_h = (i.ins_h << i.hash_shift ^ i.window[i.strstart + ne - 1]) & i.hash_mask, t = i.prev[i.strstart & i.w_mask] = i.head[i.ins_h], i.head[i.ins_h] = i.strstart), t !== 0 && i.strstart - t <= i.w_size - r1 && (i.match_length = ku(i, t)), i.match_length >= ne)
      if (n = Zt._tr_tally(i, i.strstart - i.match_start, i.match_length - ne), i.lookahead -= i.match_length, i.match_length <= i.max_lazy_match && i.lookahead >= ne) {
        i.match_length--;
        do
          i.strstart++, i.ins_h = (i.ins_h << i.hash_shift ^ i.window[i.strstart + ne - 1]) & i.hash_mask, t = i.prev[i.strstart & i.w_mask] = i.head[i.ins_h], i.head[i.ins_h] = i.strstart;
        while (--i.match_length !== 0);
        i.strstart++;
      } else
        i.strstart += i.match_length, i.match_length = 0, i.ins_h = i.window[i.strstart], i.ins_h = (i.ins_h << i.hash_shift ^ i.window[i.strstart + 1]) & i.hash_mask;
    else
      n = Zt._tr_tally(i, 0, i.window[i.strstart]), i.lookahead--, i.strstart++;
    if (n && (nt(i, !1), i.strm.avail_out === 0))
      return Xe;
  }
  return i.insert = i.strstart < ne - 1 ? i.strstart : ne - 1, e === Gn ? (nt(i, !0), i.strm.avail_out === 0 ? zi : l8) : i.last_lit && (nt(i, !1), i.strm.avail_out === 0) ? Xe : Zs;
}
function E9(i, e) {
  for (var t, n, s; ; ) {
    if (i.lookahead < r1) {
      if (ki(i), i.lookahead < r1 && e === ji)
        return Xe;
      if (i.lookahead === 0)
        break;
    }
    if (t = 0, i.lookahead >= ne && (i.ins_h = (i.ins_h << i.hash_shift ^ i.window[i.strstart + ne - 1]) & i.hash_mask, t = i.prev[i.strstart & i.w_mask] = i.head[i.ins_h], i.head[i.ins_h] = i.strstart), i.prev_length = i.match_length, i.prev_match = i.match_start, i.match_length = ne - 1, t !== 0 && i.prev_length < i.max_lazy_match && i.strstart - t <= i.w_size - r1 && (i.match_length = ku(i, t), i.match_length <= 5 && (i.strategy === GM || i.match_length === ne && i.strstart - i.match_start > 4096) && (i.match_length = ne - 1)), i.prev_length >= ne && i.match_length <= i.prev_length) {
      s = i.strstart + i.lookahead - ne, n = Zt._tr_tally(i, i.strstart - 1 - i.prev_match, i.prev_length - ne), i.lookahead -= i.prev_length - 1, i.prev_length -= 2;
      do
        ++i.strstart <= s && (i.ins_h = (i.ins_h << i.hash_shift ^ i.window[i.strstart + ne - 1]) & i.hash_mask, t = i.prev[i.strstart & i.w_mask] = i.head[i.ins_h], i.head[i.ins_h] = i.strstart);
      while (--i.prev_length !== 0);
      if (i.match_available = 0, i.match_length = ne - 1, i.strstart++, n && (nt(i, !1), i.strm.avail_out === 0))
        return Xe;
    } else if (i.match_available) {
      if (n = Zt._tr_tally(i, 0, i.window[i.strstart - 1]), n && nt(i, !1), i.strstart++, i.lookahead--, i.strm.avail_out === 0)
        return Xe;
    } else
      i.match_available = 1, i.strstart++, i.lookahead--;
  }
  return i.match_available && (n = Zt._tr_tally(i, 0, i.window[i.strstart - 1]), i.match_available = 0), i.insert = i.strstart < ne - 1 ? i.strstart : ne - 1, e === Gn ? (nt(i, !0), i.strm.avail_out === 0 ? zi : l8) : i.last_lit && (nt(i, !1), i.strm.avail_out === 0) ? Xe : Zs;
}
function oS(i, e) {
  for (var t, n, s, r, a = i.window; ; ) {
    if (i.lookahead <= Fn) {
      if (ki(i), i.lookahead <= Fn && e === ji)
        return Xe;
      if (i.lookahead === 0)
        break;
    }
    if (i.match_length = 0, i.lookahead >= ne && i.strstart > 0 && (s = i.strstart - 1, n = a[s], n === a[++s] && n === a[++s] && n === a[++s])) {
      r = i.strstart + Fn;
      do
        ;
      while (n === a[++s] && n === a[++s] && n === a[++s] && n === a[++s] && n === a[++s] && n === a[++s] && n === a[++s] && n === a[++s] && s < r);
      i.match_length = Fn - (r - s), i.match_length > i.lookahead && (i.match_length = i.lookahead);
    }
    if (i.match_length >= ne ? (t = Zt._tr_tally(i, 1, i.match_length - ne), i.lookahead -= i.match_length, i.strstart += i.match_length, i.match_length = 0) : (t = Zt._tr_tally(i, 0, i.window[i.strstart]), i.lookahead--, i.strstart++), t && (nt(i, !1), i.strm.avail_out === 0))
      return Xe;
  }
  return i.insert = 0, e === Gn ? (nt(i, !0), i.strm.avail_out === 0 ? zi : l8) : i.last_lit && (nt(i, !1), i.strm.avail_out === 0) ? Xe : Zs;
}
function lS(i, e) {
  for (var t; ; ) {
    if (i.lookahead === 0 && (ki(i), i.lookahead === 0)) {
      if (e === ji)
        return Xe;
      break;
    }
    if (i.match_length = 0, t = Zt._tr_tally(i, 0, i.window[i.strstart]), i.lookahead--, i.strstart++, t && (nt(i, !1), i.strm.avail_out === 0))
      return Xe;
  }
  return i.insert = 0, e === Gn ? (nt(i, !0), i.strm.avail_out === 0 ? zi : l8) : i.last_lit && (nt(i, !1), i.strm.avail_out === 0) ? Xe : Zs;
}
function y1(i, e, t, n, s) {
  this.good_length = i, this.max_lazy = e, this.nice_length = t, this.max_chain = n, this.func = s;
}
var U9;
U9 = [
  /*      good lazy nice chain */
  new y1(0, 0, 0, 0, aS),
  /* 0 store only */
  new y1(4, 4, 8, 4, g3),
  /* 1 max speed, no lazy matches */
  new y1(4, 5, 16, 8, g3),
  /* 2 */
  new y1(4, 6, 32, 32, g3),
  /* 3 */
  new y1(4, 4, 16, 16, E9),
  /* 4 lazy matches */
  new y1(8, 16, 32, 32, E9),
  /* 5 */
  new y1(8, 16, 128, 128, E9),
  /* 6 */
  new y1(8, 32, 128, 256, E9),
  /* 7 */
  new y1(32, 128, 258, 1024, E9),
  /* 8 */
  new y1(32, 258, 258, 4096, E9)
  /* 9 max compression */
];
function cS(i) {
  i.window_size = 2 * i.w_size, Nn(i.head), i.max_lazy_match = U9[i.level].max_lazy, i.good_match = U9[i.level].good_length, i.nice_match = U9[i.level].nice_length, i.max_chain_length = U9[i.level].max_chain, i.strstart = 0, i.block_start = 0, i.lookahead = 0, i.insert = 0, i.match_length = i.prev_length = ne - 1, i.match_available = 0, i.ins_h = 0;
}
function hS() {
  this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = m6, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new vt.Buf16(tS * 2), this.dyn_dtree = new vt.Buf16((2 * QM + 1) * 2), this.bl_tree = new vt.Buf16((2 * eS + 1) * 2), Nn(this.dyn_ltree), Nn(this.dyn_dtree), Nn(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new vt.Buf16(nS + 1), this.heap = new vt.Buf16(2 * F5 + 1), Nn(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new vt.Buf16(2 * F5 + 1), Nn(this.depth), this.l_buf = 0, this.lit_bufsize = 0, this.last_lit = 0, this.d_buf = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0;
}
function Bu(i) {
  var e;
  return !i || !i.state ? zn(i, qt) : (i.total_in = i.total_out = 0, i.data_type = ZM, e = i.state, e.pending = 0, e.pending_out = 0, e.wrap < 0 && (e.wrap = -e.wrap), e.status = e.wrap ? g6 : Ai, i.adler = e.wrap === 2 ? 0 : 1, e.last_flush = ji, Zt._tr_init(e), A1);
}
function Vu(i) {
  var e = Bu(i);
  return e === A1 && cS(i.state), e;
}
function uS(i, e) {
  return !i || !i.state || i.state.wrap !== 2 ? qt : (i.state.gzhead = e, A1);
}
function Hu(i, e, t, n, s, r) {
  if (!i)
    return qt;
  var a = 1;
  if (e === HM && (e = 6), n < 0 ? (a = 0, n = -n) : n > 15 && (a = 2, n -= 16), s < 1 || s > qM || t !== m6 || n < 8 || n > 15 || e < 0 || e > 9 || r < 0 || r > XM)
    return zn(i, qt);
  n === 8 && (n = 9);
  var o = new hS();
  return i.state = o, o.strm = i, o.wrap = a, o.gzhead = null, o.w_bits = n, o.w_size = 1 << o.w_bits, o.w_mask = o.w_size - 1, o.hash_bits = s + 7, o.hash_size = 1 << o.hash_bits, o.hash_mask = o.hash_size - 1, o.hash_shift = ~~((o.hash_bits + ne - 1) / ne), o.window = new vt.Buf8(o.w_size * 2), o.head = new vt.Buf16(o.hash_size), o.prev = new vt.Buf16(o.w_size), o.lit_bufsize = 1 << s + 6, o.pending_buf_size = o.lit_bufsize * 4, o.pending_buf = new vt.Buf8(o.pending_buf_size), o.d_buf = 1 * o.lit_bufsize, o.l_buf = (1 + 2) * o.lit_bufsize, o.level = e, o.strategy = r, o.method = t, Vu(i);
}
function dS(i, e) {
  return Hu(i, e, m6, $M, jM, YM);
}
function fS(i, e) {
  var t, n, s, r;
  if (!i || !i.state || e > vo || e < 0)
    return i ? zn(i, qt) : qt;
  if (n = i.state, !i.output || !i.input && i.avail_in !== 0 || n.status === F8 && e !== Gn)
    return zn(i, i.avail_out === 0 ? m3 : qt);
  if (n.strm = i, t = n.last_flush, n.last_flush = e, n.status === g6)
    if (n.wrap === 2)
      i.adler = 0, he(n, 31), he(n, 139), he(n, 8), n.gzhead ? (he(
        n,
        (n.gzhead.text ? 1 : 0) + (n.gzhead.hcrc ? 2 : 0) + (n.gzhead.extra ? 4 : 0) + (n.gzhead.name ? 8 : 0) + (n.gzhead.comment ? 16 : 0)
      ), he(n, n.gzhead.time & 255), he(n, n.gzhead.time >> 8 & 255), he(n, n.gzhead.time >> 16 & 255), he(n, n.gzhead.time >> 24 & 255), he(n, n.level === 9 ? 2 : n.strategy >= j7 || n.level < 2 ? 4 : 0), he(n, n.gzhead.os & 255), n.gzhead.extra && n.gzhead.extra.length && (he(n, n.gzhead.extra.length & 255), he(n, n.gzhead.extra.length >> 8 & 255)), n.gzhead.hcrc && (i.adler = En(i.adler, n.pending_buf, n.pending, 0)), n.gzindex = 0, n.status = z5) : (he(n, 0), he(n, 0), he(n, 0), he(n, 0), he(n, 0), he(n, n.level === 9 ? 2 : n.strategy >= j7 || n.level < 2 ? 4 : 0), he(n, sS), n.status = Ai);
    else {
      var a = m6 + (n.w_bits - 8 << 4) << 8, o = -1;
      n.strategy >= j7 || n.level < 2 ? o = 0 : n.level < 6 ? o = 1 : n.level === 6 ? o = 2 : o = 3, a |= o << 6, n.strstart !== 0 && (a |= iS), a += 31 - a % 31, n.status = Ai, C8(n, a), n.strstart !== 0 && (C8(n, i.adler >>> 16), C8(n, i.adler & 65535)), i.adler = 1;
    }
  if (n.status === z5)
    if (n.gzhead.extra) {
      for (s = n.pending; n.gzindex < (n.gzhead.extra.length & 65535) && !(n.pending === n.pending_buf_size && (n.gzhead.hcrc && n.pending > s && (i.adler = En(i.adler, n.pending_buf, n.pending - s, s)), Tn(i), s = n.pending, n.pending === n.pending_buf_size)); )
        he(n, n.gzhead.extra[n.gzindex] & 255), n.gzindex++;
      n.gzhead.hcrc && n.pending > s && (i.adler = En(i.adler, n.pending_buf, n.pending - s, s)), n.gzindex === n.gzhead.extra.length && (n.gzindex = 0, n.status = wr);
    } else
      n.status = wr;
  if (n.status === wr)
    if (n.gzhead.name) {
      s = n.pending;
      do {
        if (n.pending === n.pending_buf_size && (n.gzhead.hcrc && n.pending > s && (i.adler = En(i.adler, n.pending_buf, n.pending - s, s)), Tn(i), s = n.pending, n.pending === n.pending_buf_size)) {
          r = 1;
          break;
        }
        n.gzindex < n.gzhead.name.length ? r = n.gzhead.name.charCodeAt(n.gzindex++) & 255 : r = 0, he(n, r);
      } while (r !== 0);
      n.gzhead.hcrc && n.pending > s && (i.adler = En(i.adler, n.pending_buf, n.pending - s, s)), r === 0 && (n.gzindex = 0, n.status = Mr);
    } else
      n.status = Mr;
  if (n.status === Mr)
    if (n.gzhead.comment) {
      s = n.pending;
      do {
        if (n.pending === n.pending_buf_size && (n.gzhead.hcrc && n.pending > s && (i.adler = En(i.adler, n.pending_buf, n.pending - s, s)), Tn(i), s = n.pending, n.pending === n.pending_buf_size)) {
          r = 1;
          break;
        }
        n.gzindex < n.gzhead.comment.length ? r = n.gzhead.comment.charCodeAt(n.gzindex++) & 255 : r = 0, he(n, r);
      } while (r !== 0);
      n.gzhead.hcrc && n.pending > s && (i.adler = En(i.adler, n.pending_buf, n.pending - s, s)), r === 0 && (n.status = Sr);
    } else
      n.status = Sr;
  if (n.status === Sr && (n.gzhead.hcrc ? (n.pending + 2 > n.pending_buf_size && Tn(i), n.pending + 2 <= n.pending_buf_size && (he(n, i.adler & 255), he(n, i.adler >> 8 & 255), i.adler = 0, n.status = Ai)) : n.status = Ai), n.pending !== 0) {
    if (Tn(i), i.avail_out === 0)
      return n.last_flush = -1, A1;
  } else if (i.avail_in === 0 && xo(e) <= xo(t) && e !== Gn)
    return zn(i, m3);
  if (n.status === F8 && i.avail_in !== 0)
    return zn(i, m3);
  if (i.avail_in !== 0 || n.lookahead !== 0 || e !== ji && n.status !== F8) {
    var c = n.strategy === j7 ? lS(n, e) : n.strategy === WM ? oS(n, e) : U9[n.level].func(n, e);
    if ((c === zi || c === l8) && (n.status = F8), c === Xe || c === zi)
      return i.avail_out === 0 && (n.last_flush = -1), A1;
    if (c === Zs && (e === kM ? Zt._tr_align(n) : e !== vo && (Zt._tr_stored_block(n, 0, 0, !1), e === BM && (Nn(n.head), n.lookahead === 0 && (n.strstart = 0, n.block_start = 0, n.insert = 0))), Tn(i), i.avail_out === 0))
      return n.last_flush = -1, A1;
  }
  return e !== Gn ? A1 : n.wrap <= 0 ? yo : (n.wrap === 2 ? (he(n, i.adler & 255), he(n, i.adler >> 8 & 255), he(n, i.adler >> 16 & 255), he(n, i.adler >> 24 & 255), he(n, i.total_in & 255), he(n, i.total_in >> 8 & 255), he(n, i.total_in >> 16 & 255), he(n, i.total_in >> 24 & 255)) : (C8(n, i.adler >>> 16), C8(n, i.adler & 65535)), Tn(i), n.wrap > 0 && (n.wrap = -n.wrap), n.pending !== 0 ? A1 : yo);
}
function pS(i) {
  var e;
  return !i || !i.state ? qt : (e = i.state.status, e !== g6 && e !== z5 && e !== wr && e !== Mr && e !== Sr && e !== Ai && e !== F8 ? zn(i, qt) : (i.state = null, e === Ai ? zn(i, VM) : A1));
}
function mS(i, e) {
  var t = e.length, n, s, r, a, o, c, l, h;
  if (!i || !i.state || (n = i.state, a = n.wrap, a === 2 || a === 1 && n.status !== g6 || n.lookahead))
    return qt;
  for (a === 1 && (i.adler = zu(i.adler, e, t, 0)), n.wrap = 0, t >= n.w_size && (a === 0 && (Nn(n.head), n.strstart = 0, n.block_start = 0, n.insert = 0), h = new vt.Buf8(n.w_size), vt.arraySet(h, e, t - n.w_size, n.w_size, 0), e = h, t = n.w_size), o = i.avail_in, c = i.next_in, l = i.input, i.avail_in = t, i.next_in = 0, i.input = e, ki(n); n.lookahead >= ne; ) {
    s = n.strstart, r = n.lookahead - (ne - 1);
    do
      n.ins_h = (n.ins_h << n.hash_shift ^ n.window[s + ne - 1]) & n.hash_mask, n.prev[s & n.w_mask] = n.head[n.ins_h], n.head[n.ins_h] = s, s++;
    while (--r);
    n.strstart = s, n.lookahead = ne - 1, ki(n);
  }
  return n.strstart += n.lookahead, n.block_start = n.strstart, n.insert = n.lookahead, n.lookahead = 0, n.match_length = n.prev_length = ne - 1, n.match_available = 0, i.next_in = c, i.input = l, i.avail_in = o, n.wrap = a, A1;
}
k1.deflateInit = dS;
k1.deflateInit2 = Hu;
k1.deflateReset = Vu;
k1.deflateResetKeep = Bu;
k1.deflateSetHeader = uS;
k1.deflate = fS;
k1.deflateEnd = pS;
k1.deflateSetDictionary = mS;
k1.deflateInfo = "pako deflate (from Nodeca project)";
var Ji = {}, _6 = un, Gu = !0, Wu = !0;
try {
  String.fromCharCode.apply(null, [0]);
} catch {
  Gu = !1;
}
try {
  String.fromCharCode.apply(null, new Uint8Array(1));
} catch {
  Wu = !1;
}
var Ss = new _6.Buf8(256);
for (var bn = 0; bn < 256; bn++)
  Ss[bn] = bn >= 252 ? 6 : bn >= 248 ? 5 : bn >= 240 ? 4 : bn >= 224 ? 3 : bn >= 192 ? 2 : 1;
Ss[254] = Ss[254] = 1;
Ji.string2buf = function(i) {
  var e, t, n, s, r, a = i.length, o = 0;
  for (s = 0; s < a; s++)
    t = i.charCodeAt(s), (t & 64512) === 55296 && s + 1 < a && (n = i.charCodeAt(s + 1), (n & 64512) === 56320 && (t = 65536 + (t - 55296 << 10) + (n - 56320), s++)), o += t < 128 ? 1 : t < 2048 ? 2 : t < 65536 ? 3 : 4;
  for (e = new _6.Buf8(o), r = 0, s = 0; r < o; s++)
    t = i.charCodeAt(s), (t & 64512) === 55296 && s + 1 < a && (n = i.charCodeAt(s + 1), (n & 64512) === 56320 && (t = 65536 + (t - 55296 << 10) + (n - 56320), s++)), t < 128 ? e[r++] = t : t < 2048 ? (e[r++] = 192 | t >>> 6, e[r++] = 128 | t & 63) : t < 65536 ? (e[r++] = 224 | t >>> 12, e[r++] = 128 | t >>> 6 & 63, e[r++] = 128 | t & 63) : (e[r++] = 240 | t >>> 18, e[r++] = 128 | t >>> 12 & 63, e[r++] = 128 | t >>> 6 & 63, e[r++] = 128 | t & 63);
  return e;
};
function Xu(i, e) {
  if (e < 65534 && (i.subarray && Wu || !i.subarray && Gu))
    return String.fromCharCode.apply(null, _6.shrinkBuf(i, e));
  for (var t = "", n = 0; n < e; n++)
    t += String.fromCharCode(i[n]);
  return t;
}
Ji.buf2binstring = function(i) {
  return Xu(i, i.length);
};
Ji.binstring2buf = function(i) {
  for (var e = new _6.Buf8(i.length), t = 0, n = e.length; t < n; t++)
    e[t] = i.charCodeAt(t);
  return e;
};
Ji.buf2string = function(i, e) {
  var t, n, s, r, a = e || i.length, o = new Array(a * 2);
  for (n = 0, t = 0; t < a; ) {
    if (s = i[t++], s < 128) {
      o[n++] = s;
      continue;
    }
    if (r = Ss[s], r > 4) {
      o[n++] = 65533, t += r - 1;
      continue;
    }
    for (s &= r === 2 ? 31 : r === 3 ? 15 : 7; r > 1 && t < a; )
      s = s << 6 | i[t++] & 63, r--;
    if (r > 1) {
      o[n++] = 65533;
      continue;
    }
    s < 65536 ? o[n++] = s : (s -= 65536, o[n++] = 55296 | s >> 10 & 1023, o[n++] = 56320 | s & 1023);
  }
  return Xu(o, n);
};
Ji.utf8border = function(i, e) {
  var t;
  for (e = e || i.length, e > i.length && (e = i.length), t = e - 1; t >= 0 && (i[t] & 192) === 128; )
    t--;
  return t < 0 || t === 0 ? e : t + Ss[i[t]] > e ? t : e;
};
function gS() {
  this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0;
}
var Yu = gS, X8 = k1, Y8 = un, k5 = Ji, B5 = K2, _S = Yu, Zu = Object.prototype.toString, vS = 0, _3 = 4, H9 = 0, bo = 1, wo = 2, yS = -1, xS = 0, bS = 8;
function Bi(i) {
  if (!(this instanceof Bi))
    return new Bi(i);
  this.options = Y8.assign({
    level: yS,
    method: bS,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: xS,
    to: ""
  }, i || {});
  var e = this.options;
  e.raw && e.windowBits > 0 ? e.windowBits = -e.windowBits : e.gzip && e.windowBits > 0 && e.windowBits < 16 && (e.windowBits += 16), this.err = 0, this.msg = "", this.ended = !1, this.chunks = [], this.strm = new _S(), this.strm.avail_out = 0;
  var t = X8.deflateInit2(
    this.strm,
    e.level,
    e.method,
    e.windowBits,
    e.memLevel,
    e.strategy
  );
  if (t !== H9)
    throw new Error(B5[t]);
  if (e.header && X8.deflateSetHeader(this.strm, e.header), e.dictionary) {
    var n;
    if (typeof e.dictionary == "string" ? n = k5.string2buf(e.dictionary) : Zu.call(e.dictionary) === "[object ArrayBuffer]" ? n = new Uint8Array(e.dictionary) : n = e.dictionary, t = X8.deflateSetDictionary(this.strm, n), t !== H9)
      throw new Error(B5[t]);
    this._dict_set = !0;
  }
}
Bi.prototype.push = function(i, e) {
  var t = this.strm, n = this.options.chunkSize, s, r;
  if (this.ended)
    return !1;
  r = e === ~~e ? e : e === !0 ? _3 : vS, typeof i == "string" ? t.input = k5.string2buf(i) : Zu.call(i) === "[object ArrayBuffer]" ? t.input = new Uint8Array(i) : t.input = i, t.next_in = 0, t.avail_in = t.input.length;
  do {
    if (t.avail_out === 0 && (t.output = new Y8.Buf8(n), t.next_out = 0, t.avail_out = n), s = X8.deflate(t, r), s !== bo && s !== H9)
      return this.onEnd(s), this.ended = !0, !1;
    (t.avail_out === 0 || t.avail_in === 0 && (r === _3 || r === wo)) && (this.options.to === "string" ? this.onData(k5.buf2binstring(Y8.shrinkBuf(t.output, t.next_out))) : this.onData(Y8.shrinkBuf(t.output, t.next_out)));
  } while ((t.avail_in > 0 || t.avail_out === 0) && s !== bo);
  return r === _3 ? (s = X8.deflateEnd(this.strm), this.onEnd(s), this.ended = !0, s === H9) : (r === wo && (this.onEnd(H9), t.avail_out = 0), !0);
};
Bi.prototype.onData = function(i) {
  this.chunks.push(i);
};
Bi.prototype.onEnd = function(i) {
  i === H9 && (this.options.to === "string" ? this.result = this.chunks.join("") : this.result = Y8.flattenChunks(this.chunks)), this.chunks = [], this.err = i, this.msg = this.strm.msg;
};
function Q2(i, e) {
  var t = new Bi(e);
  if (t.push(i, !0), t.err)
    throw t.msg || B5[t.err];
  return t.result;
}
function wS(i, e) {
  return e = e || {}, e.raw = !0, Q2(i, e);
}
function MS(i, e) {
  return e = e || {}, e.gzip = !0, Q2(i, e);
}
Xs.Deflate = Bi;
Xs.deflate = Q2;
Xs.deflateRaw = wS;
Xs.gzip = MS;
var qs = {}, d1 = {}, J7 = 30, SS = 12, ES = function(e, t) {
  var n, s, r, a, o, c, l, h, d, u, f, p, _, g, m, v, y, b, w, x, S, T, M, A, D;
  n = e.state, s = e.next_in, A = e.input, r = s + (e.avail_in - 5), a = e.next_out, D = e.output, o = a - (t - e.avail_out), c = a + (e.avail_out - 257), l = n.dmax, h = n.wsize, d = n.whave, u = n.wnext, f = n.window, p = n.hold, _ = n.bits, g = n.lencode, m = n.distcode, v = (1 << n.lenbits) - 1, y = (1 << n.distbits) - 1;
  e:
    do {
      _ < 15 && (p += A[s++] << _, _ += 8, p += A[s++] << _, _ += 8), b = g[p & v];
      t:
        for (; ; ) {
          if (w = b >>> 24, p >>>= w, _ -= w, w = b >>> 16 & 255, w === 0)
            D[a++] = b & 65535;
          else if (w & 16) {
            x = b & 65535, w &= 15, w && (_ < w && (p += A[s++] << _, _ += 8), x += p & (1 << w) - 1, p >>>= w, _ -= w), _ < 15 && (p += A[s++] << _, _ += 8, p += A[s++] << _, _ += 8), b = m[p & y];
            n:
              for (; ; ) {
                if (w = b >>> 24, p >>>= w, _ -= w, w = b >>> 16 & 255, w & 16) {
                  if (S = b & 65535, w &= 15, _ < w && (p += A[s++] << _, _ += 8, _ < w && (p += A[s++] << _, _ += 8)), S += p & (1 << w) - 1, S > l) {
                    e.msg = "invalid distance too far back", n.mode = J7;
                    break e;
                  }
                  if (p >>>= w, _ -= w, w = a - o, S > w) {
                    if (w = S - w, w > d && n.sane) {
                      e.msg = "invalid distance too far back", n.mode = J7;
                      break e;
                    }
                    if (T = 0, M = f, u === 0) {
                      if (T += h - w, w < x) {
                        x -= w;
                        do
                          D[a++] = f[T++];
                        while (--w);
                        T = a - S, M = D;
                      }
                    } else if (u < w) {
                      if (T += h + u - w, w -= u, w < x) {
                        x -= w;
                        do
                          D[a++] = f[T++];
                        while (--w);
                        if (T = 0, u < x) {
                          w = u, x -= w;
                          do
                            D[a++] = f[T++];
                          while (--w);
                          T = a - S, M = D;
                        }
                      }
                    } else if (T += u - w, w < x) {
                      x -= w;
                      do
                        D[a++] = f[T++];
                      while (--w);
                      T = a - S, M = D;
                    }
                    for (; x > 2; )
                      D[a++] = M[T++], D[a++] = M[T++], D[a++] = M[T++], x -= 3;
                    x && (D[a++] = M[T++], x > 1 && (D[a++] = M[T++]));
                  } else {
                    T = a - S;
                    do
                      D[a++] = D[T++], D[a++] = D[T++], D[a++] = D[T++], x -= 3;
                    while (x > 2);
                    x && (D[a++] = D[T++], x > 1 && (D[a++] = D[T++]));
                  }
                } else if (w & 64) {
                  e.msg = "invalid distance code", n.mode = J7;
                  break e;
                } else {
                  b = m[(b & 65535) + (p & (1 << w) - 1)];
                  continue n;
                }
                break;
              }
          } else if (w & 64)
            if (w & 32) {
              n.mode = SS;
              break e;
            } else {
              e.msg = "invalid literal/length code", n.mode = J7;
              break e;
            }
          else {
            b = g[(b & 65535) + (p & (1 << w) - 1)];
            continue t;
          }
          break;
        }
    } while (s < r && a < c);
  x = _ >> 3, s -= x, _ -= x << 3, p &= (1 << _) - 1, e.next_in = s, e.next_out = a, e.avail_in = s < r ? 5 + (r - s) : 5 - (s - r), e.avail_out = a < c ? 257 + (c - a) : 257 - (a - c), n.hold = p, n.bits = _;
}, Mo = un, T9 = 15, So = 852, Eo = 592, To = 0, v3 = 1, Ao = 2, TS = [
  /* Length codes 257..285 base */
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  13,
  15,
  17,
  19,
  23,
  27,
  31,
  35,
  43,
  51,
  59,
  67,
  83,
  99,
  115,
  131,
  163,
  195,
  227,
  258,
  0,
  0
], AS = [
  /* Length codes 257..285 extra */
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  17,
  17,
  17,
  17,
  18,
  18,
  18,
  18,
  19,
  19,
  19,
  19,
  20,
  20,
  20,
  20,
  21,
  21,
  21,
  21,
  16,
  72,
  78
], CS = [
  /* Distance codes 0..29 base */
  1,
  2,
  3,
  4,
  5,
  7,
  9,
  13,
  17,
  25,
  33,
  49,
  65,
  97,
  129,
  193,
  257,
  385,
  513,
  769,
  1025,
  1537,
  2049,
  3073,
  4097,
  6145,
  8193,
  12289,
  16385,
  24577,
  0,
  0
], IS = [
  /* Distance codes 0..29 extra */
  16,
  16,
  16,
  16,
  17,
  17,
  18,
  18,
  19,
  19,
  20,
  20,
  21,
  21,
  22,
  22,
  23,
  23,
  24,
  24,
  25,
  25,
  26,
  26,
  27,
  27,
  28,
  28,
  29,
  29,
  64,
  64
], LS = function(e, t, n, s, r, a, o, c) {
  var l = c.bits, h = 0, d = 0, u = 0, f = 0, p = 0, _ = 0, g = 0, m = 0, v = 0, y = 0, b, w, x, S, T, M = null, A = 0, D, z = new Mo.Buf16(T9 + 1), O = new Mo.Buf16(T9 + 1), U = null, V = 0, Y, W, X;
  for (h = 0; h <= T9; h++)
    z[h] = 0;
  for (d = 0; d < s; d++)
    z[t[n + d]]++;
  for (p = l, f = T9; f >= 1 && z[f] === 0; f--)
    ;
  if (p > f && (p = f), f === 0)
    return r[a++] = 1 << 24 | 64 << 16 | 0, r[a++] = 1 << 24 | 64 << 16 | 0, c.bits = 1, 0;
  for (u = 1; u < f && z[u] === 0; u++)
    ;
  for (p < u && (p = u), m = 1, h = 1; h <= T9; h++)
    if (m <<= 1, m -= z[h], m < 0)
      return -1;
  if (m > 0 && (e === To || f !== 1))
    return -1;
  for (O[1] = 0, h = 1; h < T9; h++)
    O[h + 1] = O[h] + z[h];
  for (d = 0; d < s; d++)
    t[n + d] !== 0 && (o[O[t[n + d]]++] = d);
  if (e === To ? (M = U = o, D = 19) : e === v3 ? (M = TS, A -= 257, U = AS, V -= 257, D = 256) : (M = CS, U = IS, D = -1), y = 0, d = 0, h = u, T = a, _ = p, g = 0, x = -1, v = 1 << p, S = v - 1, e === v3 && v > So || e === Ao && v > Eo)
    return 1;
  for (; ; ) {
    Y = h - g, o[d] < D ? (W = 0, X = o[d]) : o[d] > D ? (W = U[V + o[d]], X = M[A + o[d]]) : (W = 32 + 64, X = 0), b = 1 << h - g, w = 1 << _, u = w;
    do
      w -= b, r[T + (y >> g) + w] = Y << 24 | W << 16 | X | 0;
    while (w !== 0);
    for (b = 1 << h - 1; y & b; )
      b >>= 1;
    if (b !== 0 ? (y &= b - 1, y += b) : y = 0, d++, --z[h] === 0) {
      if (h === f)
        break;
      h = t[n + o[d]];
    }
    if (h > p && (y & S) !== x) {
      for (g === 0 && (g = p), T += u, _ = h - g, m = 1 << _; _ + g < f && (m -= z[_ + g], !(m <= 0)); )
        _++, m <<= 1;
      if (v += 1 << _, e === v3 && v > So || e === Ao && v > Eo)
        return 1;
      x = y & S, r[x] = p << 24 | _ << 16 | T - a | 0;
    }
  }
  return y !== 0 && (r[T + y] = h - g << 24 | 64 << 16 | 0), c.bits = p, 0;
}, Ft = un, V5 = Uu, x1 = Fu, RS = ES, Z8 = LS, PS = 0, qu = 1, $u = 2, Co = 4, DS = 5, K7 = 6, Vi = 0, NS = 1, OS = 2, Jt = -2, ju = -3, Ju = -4, US = -5, Io = 8, Ku = 1, Lo = 2, Ro = 3, Po = 4, Do = 5, No = 6, Oo = 7, Uo = 8, Fo = 9, zo = 10, Fr = 11, q1 = 12, y3 = 13, ko = 14, x3 = 15, Bo = 16, Vo = 17, Ho = 18, Go = 19, Q7 = 20, er = 21, Wo = 22, Xo = 23, Yo = 24, Zo = 25, qo = 26, b3 = 27, $o = 28, jo = 29, we = 30, Qu = 31, FS = 32, zS = 852, kS = 592, BS = 15, VS = BS;
function Jo(i) {
  return (i >>> 24 & 255) + (i >>> 8 & 65280) + ((i & 65280) << 8) + ((i & 255) << 24);
}
function HS() {
  this.mode = 0, this.last = !1, this.wrap = 0, this.havedict = !1, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new Ft.Buf16(320), this.work = new Ft.Buf16(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;
}
function ed(i) {
  var e;
  return !i || !i.state ? Jt : (e = i.state, i.total_in = i.total_out = e.total = 0, i.msg = "", e.wrap && (i.adler = e.wrap & 1), e.mode = Ku, e.last = 0, e.havedict = 0, e.dmax = 32768, e.head = null, e.hold = 0, e.bits = 0, e.lencode = e.lendyn = new Ft.Buf32(zS), e.distcode = e.distdyn = new Ft.Buf32(kS), e.sane = 1, e.back = -1, Vi);
}
function td(i) {
  var e;
  return !i || !i.state ? Jt : (e = i.state, e.wsize = 0, e.whave = 0, e.wnext = 0, ed(i));
}
function nd(i, e) {
  var t, n;
  return !i || !i.state || (n = i.state, e < 0 ? (t = 0, e = -e) : (t = (e >> 4) + 1, e < 48 && (e &= 15)), e && (e < 8 || e > 15)) ? Jt : (n.window !== null && n.wbits !== e && (n.window = null), n.wrap = t, n.wbits = e, td(i));
}
function id(i, e) {
  var t, n;
  return i ? (n = new HS(), i.state = n, n.window = null, t = nd(i, e), t !== Vi && (i.state = null), t) : Jt;
}
function GS(i) {
  return id(i, VS);
}
var Ko = !0, w3, M3;
function WS(i) {
  if (Ko) {
    var e;
    for (w3 = new Ft.Buf32(512), M3 = new Ft.Buf32(32), e = 0; e < 144; )
      i.lens[e++] = 8;
    for (; e < 256; )
      i.lens[e++] = 9;
    for (; e < 280; )
      i.lens[e++] = 7;
    for (; e < 288; )
      i.lens[e++] = 8;
    for (Z8(qu, i.lens, 0, 288, w3, 0, i.work, { bits: 9 }), e = 0; e < 32; )
      i.lens[e++] = 5;
    Z8($u, i.lens, 0, 32, M3, 0, i.work, { bits: 5 }), Ko = !1;
  }
  i.lencode = w3, i.lenbits = 9, i.distcode = M3, i.distbits = 5;
}
function sd(i, e, t, n) {
  var s, r = i.state;
  return r.window === null && (r.wsize = 1 << r.wbits, r.wnext = 0, r.whave = 0, r.window = new Ft.Buf8(r.wsize)), n >= r.wsize ? (Ft.arraySet(r.window, e, t - r.wsize, r.wsize, 0), r.wnext = 0, r.whave = r.wsize) : (s = r.wsize - r.wnext, s > n && (s = n), Ft.arraySet(r.window, e, t - n, s, r.wnext), n -= s, n ? (Ft.arraySet(r.window, e, t - n, n, 0), r.wnext = n, r.whave = r.wsize) : (r.wnext += s, r.wnext === r.wsize && (r.wnext = 0), r.whave < r.wsize && (r.whave += s))), 0;
}
function XS(i, e) {
  var t, n, s, r, a, o, c, l, h, d, u, f, p, _, g = 0, m, v, y, b, w, x, S, T, M = new Ft.Buf8(4), A, D, z = (
    /* permutation of code lengths */
    [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]
  );
  if (!i || !i.state || !i.output || !i.input && i.avail_in !== 0)
    return Jt;
  t = i.state, t.mode === q1 && (t.mode = y3), a = i.next_out, s = i.output, c = i.avail_out, r = i.next_in, n = i.input, o = i.avail_in, l = t.hold, h = t.bits, d = o, u = c, T = Vi;
  e:
    for (; ; )
      switch (t.mode) {
        case Ku:
          if (t.wrap === 0) {
            t.mode = y3;
            break;
          }
          for (; h < 16; ) {
            if (o === 0)
              break e;
            o--, l += n[r++] << h, h += 8;
          }
          if (t.wrap & 2 && l === 35615) {
            t.check = 0, M[0] = l & 255, M[1] = l >>> 8 & 255, t.check = x1(t.check, M, 2, 0), l = 0, h = 0, t.mode = Lo;
            break;
          }
          if (t.flags = 0, t.head && (t.head.done = !1), !(t.wrap & 1) || /* check if zlib header allowed */
          (((l & 255) << 8) + (l >> 8)) % 31) {
            i.msg = "incorrect header check", t.mode = we;
            break;
          }
          if ((l & 15) !== Io) {
            i.msg = "unknown compression method", t.mode = we;
            break;
          }
          if (l >>>= 4, h -= 4, S = (l & 15) + 8, t.wbits === 0)
            t.wbits = S;
          else if (S > t.wbits) {
            i.msg = "invalid window size", t.mode = we;
            break;
          }
          t.dmax = 1 << S, i.adler = t.check = 1, t.mode = l & 512 ? zo : q1, l = 0, h = 0;
          break;
        case Lo:
          for (; h < 16; ) {
            if (o === 0)
              break e;
            o--, l += n[r++] << h, h += 8;
          }
          if (t.flags = l, (t.flags & 255) !== Io) {
            i.msg = "unknown compression method", t.mode = we;
            break;
          }
          if (t.flags & 57344) {
            i.msg = "unknown header flags set", t.mode = we;
            break;
          }
          t.head && (t.head.text = l >> 8 & 1), t.flags & 512 && (M[0] = l & 255, M[1] = l >>> 8 & 255, t.check = x1(t.check, M, 2, 0)), l = 0, h = 0, t.mode = Ro;
        case Ro:
          for (; h < 32; ) {
            if (o === 0)
              break e;
            o--, l += n[r++] << h, h += 8;
          }
          t.head && (t.head.time = l), t.flags & 512 && (M[0] = l & 255, M[1] = l >>> 8 & 255, M[2] = l >>> 16 & 255, M[3] = l >>> 24 & 255, t.check = x1(t.check, M, 4, 0)), l = 0, h = 0, t.mode = Po;
        case Po:
          for (; h < 16; ) {
            if (o === 0)
              break e;
            o--, l += n[r++] << h, h += 8;
          }
          t.head && (t.head.xflags = l & 255, t.head.os = l >> 8), t.flags & 512 && (M[0] = l & 255, M[1] = l >>> 8 & 255, t.check = x1(t.check, M, 2, 0)), l = 0, h = 0, t.mode = Do;
        case Do:
          if (t.flags & 1024) {
            for (; h < 16; ) {
              if (o === 0)
                break e;
              o--, l += n[r++] << h, h += 8;
            }
            t.length = l, t.head && (t.head.extra_len = l), t.flags & 512 && (M[0] = l & 255, M[1] = l >>> 8 & 255, t.check = x1(t.check, M, 2, 0)), l = 0, h = 0;
          } else
            t.head && (t.head.extra = null);
          t.mode = No;
        case No:
          if (t.flags & 1024 && (f = t.length, f > o && (f = o), f && (t.head && (S = t.head.extra_len - t.length, t.head.extra || (t.head.extra = new Array(t.head.extra_len)), Ft.arraySet(
            t.head.extra,
            n,
            r,
            // extra field is limited to 65536 bytes
            // - no need for additional size check
            f,
            /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
            S
          )), t.flags & 512 && (t.check = x1(t.check, n, f, r)), o -= f, r += f, t.length -= f), t.length))
            break e;
          t.length = 0, t.mode = Oo;
        case Oo:
          if (t.flags & 2048) {
            if (o === 0)
              break e;
            f = 0;
            do
              S = n[r + f++], t.head && S && t.length < 65536 && (t.head.name += String.fromCharCode(S));
            while (S && f < o);
            if (t.flags & 512 && (t.check = x1(t.check, n, f, r)), o -= f, r += f, S)
              break e;
          } else
            t.head && (t.head.name = null);
          t.length = 0, t.mode = Uo;
        case Uo:
          if (t.flags & 4096) {
            if (o === 0)
              break e;
            f = 0;
            do
              S = n[r + f++], t.head && S && t.length < 65536 && (t.head.comment += String.fromCharCode(S));
            while (S && f < o);
            if (t.flags & 512 && (t.check = x1(t.check, n, f, r)), o -= f, r += f, S)
              break e;
          } else
            t.head && (t.head.comment = null);
          t.mode = Fo;
        case Fo:
          if (t.flags & 512) {
            for (; h < 16; ) {
              if (o === 0)
                break e;
              o--, l += n[r++] << h, h += 8;
            }
            if (l !== (t.check & 65535)) {
              i.msg = "header crc mismatch", t.mode = we;
              break;
            }
            l = 0, h = 0;
          }
          t.head && (t.head.hcrc = t.flags >> 9 & 1, t.head.done = !0), i.adler = t.check = 0, t.mode = q1;
          break;
        case zo:
          for (; h < 32; ) {
            if (o === 0)
              break e;
            o--, l += n[r++] << h, h += 8;
          }
          i.adler = t.check = Jo(l), l = 0, h = 0, t.mode = Fr;
        case Fr:
          if (t.havedict === 0)
            return i.next_out = a, i.avail_out = c, i.next_in = r, i.avail_in = o, t.hold = l, t.bits = h, OS;
          i.adler = t.check = 1, t.mode = q1;
        case q1:
          if (e === DS || e === K7)
            break e;
        case y3:
          if (t.last) {
            l >>>= h & 7, h -= h & 7, t.mode = b3;
            break;
          }
          for (; h < 3; ) {
            if (o === 0)
              break e;
            o--, l += n[r++] << h, h += 8;
          }
          switch (t.last = l & 1, l >>>= 1, h -= 1, l & 3) {
            case 0:
              t.mode = ko;
              break;
            case 1:
              if (WS(t), t.mode = Q7, e === K7) {
                l >>>= 2, h -= 2;
                break e;
              }
              break;
            case 2:
              t.mode = Vo;
              break;
            case 3:
              i.msg = "invalid block type", t.mode = we;
          }
          l >>>= 2, h -= 2;
          break;
        case ko:
          for (l >>>= h & 7, h -= h & 7; h < 32; ) {
            if (o === 0)
              break e;
            o--, l += n[r++] << h, h += 8;
          }
          if ((l & 65535) !== (l >>> 16 ^ 65535)) {
            i.msg = "invalid stored block lengths", t.mode = we;
            break;
          }
          if (t.length = l & 65535, l = 0, h = 0, t.mode = x3, e === K7)
            break e;
        case x3:
          t.mode = Bo;
        case Bo:
          if (f = t.length, f) {
            if (f > o && (f = o), f > c && (f = c), f === 0)
              break e;
            Ft.arraySet(s, n, r, f, a), o -= f, r += f, c -= f, a += f, t.length -= f;
            break;
          }
          t.mode = q1;
          break;
        case Vo:
          for (; h < 14; ) {
            if (o === 0)
              break e;
            o--, l += n[r++] << h, h += 8;
          }
          if (t.nlen = (l & 31) + 257, l >>>= 5, h -= 5, t.ndist = (l & 31) + 1, l >>>= 5, h -= 5, t.ncode = (l & 15) + 4, l >>>= 4, h -= 4, t.nlen > 286 || t.ndist > 30) {
            i.msg = "too many length or distance symbols", t.mode = we;
            break;
          }
          t.have = 0, t.mode = Ho;
        case Ho:
          for (; t.have < t.ncode; ) {
            for (; h < 3; ) {
              if (o === 0)
                break e;
              o--, l += n[r++] << h, h += 8;
            }
            t.lens[z[t.have++]] = l & 7, l >>>= 3, h -= 3;
          }
          for (; t.have < 19; )
            t.lens[z[t.have++]] = 0;
          if (t.lencode = t.lendyn, t.lenbits = 7, A = { bits: t.lenbits }, T = Z8(PS, t.lens, 0, 19, t.lencode, 0, t.work, A), t.lenbits = A.bits, T) {
            i.msg = "invalid code lengths set", t.mode = we;
            break;
          }
          t.have = 0, t.mode = Go;
        case Go:
          for (; t.have < t.nlen + t.ndist; ) {
            for (; g = t.lencode[l & (1 << t.lenbits) - 1], m = g >>> 24, v = g >>> 16 & 255, y = g & 65535, !(m <= h); ) {
              if (o === 0)
                break e;
              o--, l += n[r++] << h, h += 8;
            }
            if (y < 16)
              l >>>= m, h -= m, t.lens[t.have++] = y;
            else {
              if (y === 16) {
                for (D = m + 2; h < D; ) {
                  if (o === 0)
                    break e;
                  o--, l += n[r++] << h, h += 8;
                }
                if (l >>>= m, h -= m, t.have === 0) {
                  i.msg = "invalid bit length repeat", t.mode = we;
                  break;
                }
                S = t.lens[t.have - 1], f = 3 + (l & 3), l >>>= 2, h -= 2;
              } else if (y === 17) {
                for (D = m + 3; h < D; ) {
                  if (o === 0)
                    break e;
                  o--, l += n[r++] << h, h += 8;
                }
                l >>>= m, h -= m, S = 0, f = 3 + (l & 7), l >>>= 3, h -= 3;
              } else {
                for (D = m + 7; h < D; ) {
                  if (o === 0)
                    break e;
                  o--, l += n[r++] << h, h += 8;
                }
                l >>>= m, h -= m, S = 0, f = 11 + (l & 127), l >>>= 7, h -= 7;
              }
              if (t.have + f > t.nlen + t.ndist) {
                i.msg = "invalid bit length repeat", t.mode = we;
                break;
              }
              for (; f--; )
                t.lens[t.have++] = S;
            }
          }
          if (t.mode === we)
            break;
          if (t.lens[256] === 0) {
            i.msg = "invalid code -- missing end-of-block", t.mode = we;
            break;
          }
          if (t.lenbits = 9, A = { bits: t.lenbits }, T = Z8(qu, t.lens, 0, t.nlen, t.lencode, 0, t.work, A), t.lenbits = A.bits, T) {
            i.msg = "invalid literal/lengths set", t.mode = we;
            break;
          }
          if (t.distbits = 6, t.distcode = t.distdyn, A = { bits: t.distbits }, T = Z8($u, t.lens, t.nlen, t.ndist, t.distcode, 0, t.work, A), t.distbits = A.bits, T) {
            i.msg = "invalid distances set", t.mode = we;
            break;
          }
          if (t.mode = Q7, e === K7)
            break e;
        case Q7:
          t.mode = er;
        case er:
          if (o >= 6 && c >= 258) {
            i.next_out = a, i.avail_out = c, i.next_in = r, i.avail_in = o, t.hold = l, t.bits = h, RS(i, u), a = i.next_out, s = i.output, c = i.avail_out, r = i.next_in, n = i.input, o = i.avail_in, l = t.hold, h = t.bits, t.mode === q1 && (t.back = -1);
            break;
          }
          for (t.back = 0; g = t.lencode[l & (1 << t.lenbits) - 1], m = g >>> 24, v = g >>> 16 & 255, y = g & 65535, !(m <= h); ) {
            if (o === 0)
              break e;
            o--, l += n[r++] << h, h += 8;
          }
          if (v && !(v & 240)) {
            for (b = m, w = v, x = y; g = t.lencode[x + ((l & (1 << b + w) - 1) >> b)], m = g >>> 24, v = g >>> 16 & 255, y = g & 65535, !(b + m <= h); ) {
              if (o === 0)
                break e;
              o--, l += n[r++] << h, h += 8;
            }
            l >>>= b, h -= b, t.back += b;
          }
          if (l >>>= m, h -= m, t.back += m, t.length = y, v === 0) {
            t.mode = qo;
            break;
          }
          if (v & 32) {
            t.back = -1, t.mode = q1;
            break;
          }
          if (v & 64) {
            i.msg = "invalid literal/length code", t.mode = we;
            break;
          }
          t.extra = v & 15, t.mode = Wo;
        case Wo:
          if (t.extra) {
            for (D = t.extra; h < D; ) {
              if (o === 0)
                break e;
              o--, l += n[r++] << h, h += 8;
            }
            t.length += l & (1 << t.extra) - 1, l >>>= t.extra, h -= t.extra, t.back += t.extra;
          }
          t.was = t.length, t.mode = Xo;
        case Xo:
          for (; g = t.distcode[l & (1 << t.distbits) - 1], m = g >>> 24, v = g >>> 16 & 255, y = g & 65535, !(m <= h); ) {
            if (o === 0)
              break e;
            o--, l += n[r++] << h, h += 8;
          }
          if (!(v & 240)) {
            for (b = m, w = v, x = y; g = t.distcode[x + ((l & (1 << b + w) - 1) >> b)], m = g >>> 24, v = g >>> 16 & 255, y = g & 65535, !(b + m <= h); ) {
              if (o === 0)
                break e;
              o--, l += n[r++] << h, h += 8;
            }
            l >>>= b, h -= b, t.back += b;
          }
          if (l >>>= m, h -= m, t.back += m, v & 64) {
            i.msg = "invalid distance code", t.mode = we;
            break;
          }
          t.offset = y, t.extra = v & 15, t.mode = Yo;
        case Yo:
          if (t.extra) {
            for (D = t.extra; h < D; ) {
              if (o === 0)
                break e;
              o--, l += n[r++] << h, h += 8;
            }
            t.offset += l & (1 << t.extra) - 1, l >>>= t.extra, h -= t.extra, t.back += t.extra;
          }
          if (t.offset > t.dmax) {
            i.msg = "invalid distance too far back", t.mode = we;
            break;
          }
          t.mode = Zo;
        case Zo:
          if (c === 0)
            break e;
          if (f = u - c, t.offset > f) {
            if (f = t.offset - f, f > t.whave && t.sane) {
              i.msg = "invalid distance too far back", t.mode = we;
              break;
            }
            f > t.wnext ? (f -= t.wnext, p = t.wsize - f) : p = t.wnext - f, f > t.length && (f = t.length), _ = t.window;
          } else
            _ = s, p = a - t.offset, f = t.length;
          f > c && (f = c), c -= f, t.length -= f;
          do
            s[a++] = _[p++];
          while (--f);
          t.length === 0 && (t.mode = er);
          break;
        case qo:
          if (c === 0)
            break e;
          s[a++] = t.length, c--, t.mode = er;
          break;
        case b3:
          if (t.wrap) {
            for (; h < 32; ) {
              if (o === 0)
                break e;
              o--, l |= n[r++] << h, h += 8;
            }
            if (u -= c, i.total_out += u, t.total += u, u && (i.adler = t.check = /*UPDATE(state.check, put - _out, _out);*/
            t.flags ? x1(t.check, s, u, a - u) : V5(t.check, s, u, a - u)), u = c, (t.flags ? l : Jo(l)) !== t.check) {
              i.msg = "incorrect data check", t.mode = we;
              break;
            }
            l = 0, h = 0;
          }
          t.mode = $o;
        case $o:
          if (t.wrap && t.flags) {
            for (; h < 32; ) {
              if (o === 0)
                break e;
              o--, l += n[r++] << h, h += 8;
            }
            if (l !== (t.total & 4294967295)) {
              i.msg = "incorrect length check", t.mode = we;
              break;
            }
            l = 0, h = 0;
          }
          t.mode = jo;
        case jo:
          T = NS;
          break e;
        case we:
          T = ju;
          break e;
        case Qu:
          return Ju;
        case FS:
        default:
          return Jt;
      }
  return i.next_out = a, i.avail_out = c, i.next_in = r, i.avail_in = o, t.hold = l, t.bits = h, (t.wsize || u !== i.avail_out && t.mode < we && (t.mode < b3 || e !== Co)) && sd(i, i.output, i.next_out, u - i.avail_out), d -= i.avail_in, u -= i.avail_out, i.total_in += d, i.total_out += u, t.total += u, t.wrap && u && (i.adler = t.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
  t.flags ? x1(t.check, s, u, i.next_out - u) : V5(t.check, s, u, i.next_out - u)), i.data_type = t.bits + (t.last ? 64 : 0) + (t.mode === q1 ? 128 : 0) + (t.mode === Q7 || t.mode === x3 ? 256 : 0), (d === 0 && u === 0 || e === Co) && T === Vi && (T = US), T;
}
function YS(i) {
  if (!i || !i.state)
    return Jt;
  var e = i.state;
  return e.window && (e.window = null), i.state = null, Vi;
}
function ZS(i, e) {
  var t;
  return !i || !i.state || (t = i.state, !(t.wrap & 2)) ? Jt : (t.head = e, e.done = !1, Vi);
}
function qS(i, e) {
  var t = e.length, n, s, r;
  return !i || !i.state || (n = i.state, n.wrap !== 0 && n.mode !== Fr) ? Jt : n.mode === Fr && (s = 1, s = V5(s, e, t, 0), s !== n.check) ? ju : (r = sd(i, e, t, t), r ? (n.mode = Qu, Ju) : (n.havedict = 1, Vi));
}
d1.inflateReset = td;
d1.inflateReset2 = nd;
d1.inflateResetKeep = ed;
d1.inflateInit = GS;
d1.inflateInit2 = id;
d1.inflate = XS;
d1.inflateEnd = YS;
d1.inflateGetHeader = ZS;
d1.inflateSetDictionary = qS;
d1.inflateInfo = "pako inflate (from Nodeca project)";
var rd = {
  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH: 0,
  Z_PARTIAL_FLUSH: 1,
  Z_SYNC_FLUSH: 2,
  Z_FULL_FLUSH: 3,
  Z_FINISH: 4,
  Z_BLOCK: 5,
  Z_TREES: 6,
  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK: 0,
  Z_STREAM_END: 1,
  Z_NEED_DICT: 2,
  Z_ERRNO: -1,
  Z_STREAM_ERROR: -2,
  Z_DATA_ERROR: -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR: -5,
  //Z_VERSION_ERROR: -6,
  /* compression levels */
  Z_NO_COMPRESSION: 0,
  Z_BEST_SPEED: 1,
  Z_BEST_COMPRESSION: 9,
  Z_DEFAULT_COMPRESSION: -1,
  Z_FILTERED: 1,
  Z_HUFFMAN_ONLY: 2,
  Z_RLE: 3,
  Z_FIXED: 4,
  Z_DEFAULT_STRATEGY: 0,
  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY: 0,
  Z_TEXT: 1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN: 2,
  /* The deflate compression method */
  Z_DEFLATED: 8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};
function $S() {
  this.text = 0, this.time = 0, this.xflags = 0, this.os = 0, this.extra = null, this.extra_len = 0, this.name = "", this.comment = "", this.hcrc = 0, this.done = !1;
}
var jS = $S, G9 = d1, q8 = un, Er = Ji, ze = rd, H5 = K2, JS = Yu, KS = jS, ad = Object.prototype.toString;
function Hi(i) {
  if (!(this instanceof Hi))
    return new Hi(i);
  this.options = q8.assign({
    chunkSize: 16384,
    windowBits: 0,
    to: ""
  }, i || {});
  var e = this.options;
  e.raw && e.windowBits >= 0 && e.windowBits < 16 && (e.windowBits = -e.windowBits, e.windowBits === 0 && (e.windowBits = -15)), e.windowBits >= 0 && e.windowBits < 16 && !(i && i.windowBits) && (e.windowBits += 32), e.windowBits > 15 && e.windowBits < 48 && (e.windowBits & 15 || (e.windowBits |= 15)), this.err = 0, this.msg = "", this.ended = !1, this.chunks = [], this.strm = new JS(), this.strm.avail_out = 0;
  var t = G9.inflateInit2(
    this.strm,
    e.windowBits
  );
  if (t !== ze.Z_OK)
    throw new Error(H5[t]);
  if (this.header = new KS(), G9.inflateGetHeader(this.strm, this.header), e.dictionary && (typeof e.dictionary == "string" ? e.dictionary = Er.string2buf(e.dictionary) : ad.call(e.dictionary) === "[object ArrayBuffer]" && (e.dictionary = new Uint8Array(e.dictionary)), e.raw && (t = G9.inflateSetDictionary(this.strm, e.dictionary), t !== ze.Z_OK)))
    throw new Error(H5[t]);
}
Hi.prototype.push = function(i, e) {
  var t = this.strm, n = this.options.chunkSize, s = this.options.dictionary, r, a, o, c, l, h = !1;
  if (this.ended)
    return !1;
  a = e === ~~e ? e : e === !0 ? ze.Z_FINISH : ze.Z_NO_FLUSH, typeof i == "string" ? t.input = Er.binstring2buf(i) : ad.call(i) === "[object ArrayBuffer]" ? t.input = new Uint8Array(i) : t.input = i, t.next_in = 0, t.avail_in = t.input.length;
  do {
    if (t.avail_out === 0 && (t.output = new q8.Buf8(n), t.next_out = 0, t.avail_out = n), r = G9.inflate(t, ze.Z_NO_FLUSH), r === ze.Z_NEED_DICT && s && (r = G9.inflateSetDictionary(this.strm, s)), r === ze.Z_BUF_ERROR && h === !0 && (r = ze.Z_OK, h = !1), r !== ze.Z_STREAM_END && r !== ze.Z_OK)
      return this.onEnd(r), this.ended = !0, !1;
    t.next_out && (t.avail_out === 0 || r === ze.Z_STREAM_END || t.avail_in === 0 && (a === ze.Z_FINISH || a === ze.Z_SYNC_FLUSH)) && (this.options.to === "string" ? (o = Er.utf8border(t.output, t.next_out), c = t.next_out - o, l = Er.buf2string(t.output, o), t.next_out = c, t.avail_out = n - c, c && q8.arraySet(t.output, t.output, o, c, 0), this.onData(l)) : this.onData(q8.shrinkBuf(t.output, t.next_out))), t.avail_in === 0 && t.avail_out === 0 && (h = !0);
  } while ((t.avail_in > 0 || t.avail_out === 0) && r !== ze.Z_STREAM_END);
  return r === ze.Z_STREAM_END && (a = ze.Z_FINISH), a === ze.Z_FINISH ? (r = G9.inflateEnd(this.strm), this.onEnd(r), this.ended = !0, r === ze.Z_OK) : (a === ze.Z_SYNC_FLUSH && (this.onEnd(ze.Z_OK), t.avail_out = 0), !0);
};
Hi.prototype.onData = function(i) {
  this.chunks.push(i);
};
Hi.prototype.onEnd = function(i) {
  i === ze.Z_OK && (this.options.to === "string" ? this.result = this.chunks.join("") : this.result = q8.flattenChunks(this.chunks)), this.chunks = [], this.err = i, this.msg = this.strm.msg;
};
function e4(i, e) {
  var t = new Hi(e);
  if (t.push(i, !0), t.err)
    throw t.msg || H5[t.err];
  return t.result;
}
function QS(i, e) {
  return e = e || {}, e.raw = !0, e4(i, e);
}
qs.Inflate = Hi;
qs.inflate = e4;
qs.inflateRaw = QS;
qs.ungzip = e4;
var eE = un.assign, tE = Xs, nE = qs, iE = rd, od = {};
eE(od, tE, nE, iE);
var sE = od;
const A9 = /* @__PURE__ */ dM(sE);
class rE {
  constructor() {
    I(this, "_keyStr", "");
    I(this, "decode", (e, t, n) => {
      var s, r, a, o, c, l, h, d, u = 0, f = 0;
      for (t ? s = new Uint8Array(t) : s = new Uint8Array(n), e = e.replace(/[^A-Za-z0-9\+\/\=]/g, ""), u = 0; u < n; u += 3)
        c = this._keyStr.indexOf(e.charAt(f++)), l = this._keyStr.indexOf(e.charAt(f++)), h = this._keyStr.indexOf(e.charAt(f++)), d = this._keyStr.indexOf(e.charAt(f++)), r = c << 2 | l >> 4, a = (l & 15) << 4 | h >> 2, o = (h & 3) << 6 | d, s[u] = r, h != 64 && (s[u + 1] = a), d != 64 && (s[u + 2] = o);
      return s;
    });
    this._keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
  }
  decodeArrayBuffer(e) {
    var t = this._keyStr.indexOf(e.charAt(e.length - 1)), n = this._keyStr.indexOf(e.charAt(e.length - 2)), s = e.length / 4 * 3;
    t == 64 && s--, n == 64 && s--;
    var r = new ArrayBuffer(s);
    return this.decode(e, r, s), r;
  }
}
class aE {
  constructor() {
    I(this, "attributes");
    I(this, "metadata");
    I(this, "transforms");
    I(this, "data");
    I(this, "dataConverted");
    I(this, "base64Binary");
    /**
     * Returns true if this data array represents a point set.
     * @returns {boolean}
     */
    I(this, "isPointSet", () => this.attributes.Intent === "NIFTI_INTENT_POINTSET");
    /**
     * Returns true if this data array represents triangle indices.
     * @returns {boolean}
     */
    I(this, "isTriangles", () => this.attributes.Intent === "NIFTI_INTENT_TRIANGLE");
    /**
     * Returns true if this data array represents normals.
     * @returns {boolean}
     */
    I(this, "isNormals", () => this.attributes.Intent === "NIFTI_INTENT_VECTOR");
    I(this, "isColumnIndexOrder", () => this.attributes.ArrayIndexingOrder === "ColumnMajorOrder");
    /**
     * Returns true if this data array represents normals.
     * @returns {boolean}
     */
    I(this, "isColors", () => this.attributes.Intent === "NIFTI_INTENT_RGB_VECTOR" || this.attributes.Intent === "NIFTI_INTENT_RGBA_VECTOR");
    /**
     * Returns the number of dimensions of this data array.
     * @returns {number}
     */
    I(this, "getDimensions", () => parseInt(this.attributes.Dimensionality));
    /**
     * Returns the number of elements in the specified dimension.
     * @param {number} dimIndex
     * @returns {number}
     */
    I(this, "getNumElements", (e) => (e === void 0 && (e = 0), parseInt(this.attributes["Dim" + e])));
    /**
     * Returns true if this data array represents scalar data.
     * @returns {boolean}
     */
    I(this, "isScalar", () => this.getDimensions() == 1);
    /**
     * Returns true if this data array is in triples.
     * @returns {boolean}
     */
    I(this, "isTriple", () => this.getDimensions() == 2 && this.getNumElements(1) == 3);
    /**
     * Returns true if this data array is in quads.
     * @returns {boolean}
     */
    I(this, "isQuad", () => this.getDimensions() == 2 && this.getNumElements(1) == 4);
    /**
     * Returns true if this data array is encoded in ASCII format.
     * @returns {boolean}
     */
    I(this, "isAscii", () => this.attributes.Encoding === "ASCII");
    /**
     * Returns true if this data array is encoded in Base64 format.
     * @returns {boolean}
     */
    I(this, "isBase64Binary", () => this.attributes.Encoding === "Base64Binary");
    /**
     * Returns true if this data array is encoded in GZIP-Base64 format.
     * @returns {boolean}
     */
    I(this, "isGzipBase64Binary", () => this.attributes.Encoding === "GZipBase64Binary");
    /**
     * Returns true if this data array uses Base64 encoding.
     * @returns {boolean}
     */
    I(this, "isBase64Encoded", () => this.isBase64Binary() || this.isGzipBase64Binary());
    /**
     * Returns true if the datatype is 32-bit floating point.
     * @returns {boolean}
     */
    I(this, "isFloat32", () => this.attributes.DataType === "NIFTI_TYPE_FLOAT32");
    /**
     * Returns true if the datatype is 32-bit signed integer.
     * @returns {boolean}
     */
    I(this, "isInt32", () => this.attributes.DataType === "NIFTI_TYPE_INT32");
    /**
     * Returns true if the datatype is 8-bit unsigned integer.
     * @returns {boolean}
     */
    I(this, "isUnsignedInt8", () => this.attributes.DataType === "NIFTI_TYPE_UINT8");
    /**
     * Returns the data as a typed array (either Float32Array, Uint8Array or Int32Array)
     * @returns {Float32Array|Uint8Array|Int32Array}
     */
    I(this, "getData", () => (this.dataConverted || (this.dataConverted = !0, this.isAscii() ? this.isUnsignedInt8() ? this.readUnsignedInt8ASCII(this) : this.isInt32() ? this.readSignedInt32ASCII(this) : this.readFloat32ASCII(this) : this.isBase64Binary() ? this.isUnsignedInt8() ? this.readUnsignedInt8Base64(this) : this.isInt32() ? this.readSignedInt32Base64(this) : this.readFloat32Base64(this) : this.isGzipBase64Binary() && (this.isUnsignedInt8() ? this.readUnsignedInt8GZIPBase64(this) : this.isInt32() ? this.readSignedInt32GZIPBase64(this) : this.readFloat32GZIPBase64(this))), this.isColumnIndexOrder(), this.data));
    I(this, "getDataAsync", (e, t) => {
      this.dataConverted || (this.dataConverted = !0, this.isAscii() ? (this.isUnsignedInt8() ? this.readUnsignedInt8ASCII(this) : this.isInt32() ? this.readSignedInt32ASCII(this) : this.readFloat32ASCII(this), t()) : this.isBase64Binary() ? (this.isUnsignedInt8() ? this.readUnsignedInt8Base64(this) : this.isInt32() ? this.readSignedInt32Base64(this) : this.readFloat32Base64(this), t()) : this.isGzipBase64Binary() && (this.isUnsignedInt8() ? this.readUnsignedInt8GZIPBase64Async(this, e, t) : this.isInt32() ? this.readSignedInt32GZIPBase64Async(this, e, t) : this.readFloat32GZIPBase64Async(this, e, t)));
    });
    I(this, "readFloat32ASCII", (e) => {
      var t = /[+-]?\d+(\.\d+)?/g;
      e.data = new Float32Array(
        e.data.match(t).map(function(n) {
          return parseFloat(n);
        })
      );
    });
    I(this, "readSignedInt32ASCII", function(e) {
      var t = /[+-]?\d+(\.\d+)?/g;
      e.data = new Int32Array(
        e.data.match(t).map(function(n) {
          return parseInt(n);
        })
      );
    });
    I(this, "readUnsignedInt8ASCII", function(e) {
      var t = /[+-]?\d+(\.\d+)?/g;
      e.data = new Uint8Array(
        e.data.match(t).map(function(n) {
          return parseInt(n);
        })
      );
    });
    I(this, "readUnsignedInt8Base64", (e) => {
      var t = this.base64Binary.decodeArrayBuffer(e.data);
      e.data = new Uint8Array(t, 0, t.byteLength);
    });
    I(this, "readSignedInt32Base64", (e) => {
      var t = this.base64Binary.decodeArrayBuffer(e.data);
      e.data = new Int32Array(t, 0, t.byteLength / 4);
    });
    I(this, "readFloat32Base64", (e) => {
      var t = this.base64Binary.decodeArrayBuffer(e.data);
      e.data = new Float32Array(t, 0, t.byteLength / 4);
    });
    I(this, "readUnsignedInt8GZIPBase64", (e) => {
      var t = this.base64Binary.decodeArrayBuffer(e.data);
      t = A9.inflate(t).buffer, e.data = new Uint8Array(t, 0, t.byteLength);
    });
    I(this, "readUnsignedInt8GZIPBase64Async", (e, t, n) => {
      var s = this.base64Binary.decodeArrayBuffer(e.data), r = new A9.Inflate(), a = function() {
        e.data = new Uint8Array(r.result.buffer, 0, r.result.buffer.byteLength), n(e.data);
      };
      setTimeout(() => {
        this.readNext(r, s, 0, t, a);
      }, 0);
    });
    I(this, "readSignedInt32GZIPBase64", (e) => {
      var t = this.base64Binary.decodeArrayBuffer(e.data);
      t = A9.inflate(t).buffer, e.data = new Int32Array(t, 0, t.byteLength / 4);
    });
    I(this, "readSignedInt32GZIPBase64Async", (e, t, n) => {
      var s = this.base64Binary.decodeArrayBuffer(e.data), r = new A9.Inflate(), a = function() {
        e.data = new Int32Array(r.result.buffer, 0, r.result.buffer.byteLength / 4), n(e.data);
      };
      setTimeout(() => {
        this.readNext(r, s, 0, t, a);
      }, 0);
    });
    I(this, "readFloat32GZIPBase64", (e) => {
      var t = this.base64Binary.decodeArrayBuffer(e.data);
      t = A9.inflate(t).buffer, e.data = new Float32Array(t, 0, t.byteLength / 4);
    });
    I(this, "readFloat32GZIPBase64Async", (e, t, n) => {
      var s = this.base64Binary.decodeArrayBuffer(e.data), r = new A9.Inflate(), a = function() {
        e.data = new Float32Array(r.result.buffer, 0, r.result.buffer.byteLength / 4), n(e.data);
      };
      setTimeout(() => {
        this.readNext(r, s, 0, t, a);
      }, 0);
    });
    I(this, "readNext", (e, t, n, s, r) => {
      var a = n + 32768, o = a >= t.byteLength;
      e.push(t.slice(n, n + 4096 * 8), o), o ? r() : (s(a / t.byteLength), setTimeout(() => {
        this.readNext(e, t, a, s, r);
      }, 0));
    });
    this.attributes = null, this.metadata = {}, this.transforms = [], this.data = null, this.dataConverted = !1, this.base64Binary = new rE();
  }
}
var Q9 = typeof global < "u" ? global : typeof self < "u" ? self : typeof window < "u" ? window : {}, C1 = [], Gt = [], oE = typeof Uint8Array < "u" ? Uint8Array : Array, t4 = !1;
function ld() {
  t4 = !0;
  for (var i = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", e = 0, t = i.length; e < t; ++e)
    C1[e] = i[e], Gt[i.charCodeAt(e)] = e;
  Gt["-".charCodeAt(0)] = 62, Gt["_".charCodeAt(0)] = 63;
}
function lE(i, e, t) {
  for (var n, s, r = [], a = e; a < t; a += 3)
    n = (i[a] << 16) + (i[a + 1] << 8) + i[a + 2], r.push(
      C1[(s = n) >> 18 & 63] + C1[s >> 12 & 63] + C1[s >> 6 & 63] + C1[63 & s]
    );
  return r.join("");
}
function Qo(i) {
  var e;
  t4 || ld();
  for (var t = i.length, n = t % 3, s = "", r = [], a = 0, o = t - n; a < o; a += 16383)
    r.push(lE(i, a, a + 16383 > o ? o : a + 16383));
  return n === 1 ? (e = i[t - 1], s += C1[e >> 2], s += C1[e << 4 & 63], s += "==") : n === 2 && (e = (i[t - 2] << 8) + i[t - 1], s += C1[e >> 10], s += C1[e >> 4 & 63], s += C1[e << 2 & 63], s += "="), r.push(s), r.join("");
}
function tr(i, e, t, n, s) {
  var r, a, o = 8 * s - n - 1, c = (1 << o) - 1, l = c >> 1, h = -7, d = t ? s - 1 : 0, u = t ? -1 : 1, f = i[e + d];
  for (d += u, r = f & (1 << -h) - 1, f >>= -h, h += o; h > 0; r = 256 * r + i[e + d], d += u, h -= 8)
    ;
  for (a = r & (1 << -h) - 1, r >>= -h, h += n; h > 0; a = 256 * a + i[e + d], d += u, h -= 8)
    ;
  if (r === 0)
    r = 1 - l;
  else {
    if (r === c)
      return a ? NaN : 1 / 0 * (f ? -1 : 1);
    a += Math.pow(2, n), r -= l;
  }
  return (f ? -1 : 1) * a * Math.pow(2, r - n);
}
function cd(i, e, t, n, s, r) {
  var a, o, c, l = 8 * r - s - 1, h = (1 << l) - 1, d = h >> 1, u = s === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, f = n ? 0 : r - 1, p = n ? 1 : -1, _ = e < 0 || e === 0 && 1 / e < 0 ? 1 : 0;
  for (e = Math.abs(e), isNaN(e) || e === 1 / 0 ? (o = isNaN(e) ? 1 : 0, a = h) : (a = Math.floor(Math.log(e) / Math.LN2), e * (c = Math.pow(2, -a)) < 1 && (a--, c *= 2), (e += a + d >= 1 ? u / c : u * Math.pow(2, 1 - d)) * c >= 2 && (a++, c /= 2), a + d >= h ? (o = 0, a = h) : a + d >= 1 ? (o = (e * c - 1) * Math.pow(2, s), a += d) : (o = e * Math.pow(2, d - 1) * Math.pow(2, s), a = 0)); s >= 8; i[t + f] = 255 & o, f += p, o /= 256, s -= 8)
    ;
  for (a = a << s | o, l += s; l > 0; i[t + f] = 255 & a, f += p, a /= 256, l -= 8)
    ;
  i[t + f - p] |= 128 * _;
}
var cE = {}.toString, hd = Array.isArray || function(i) {
  return cE.call(i) == "[object Array]";
};
s0.TYPED_ARRAY_SUPPORT = Q9.TYPED_ARRAY_SUPPORT === void 0 || Q9.TYPED_ARRAY_SUPPORT;
var hE = zr();
function zr() {
  return s0.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
}
function nn(i, e) {
  if (zr() < e)
    throw new RangeError("Invalid typed array length");
  return s0.TYPED_ARRAY_SUPPORT ? (i = new Uint8Array(e)).__proto__ = s0.prototype : (i === null && (i = new s0(e)), i.length = e), i;
}
function s0(i, e, t) {
  if (!(s0.TYPED_ARRAY_SUPPORT || this instanceof s0))
    return new s0(i, e, t);
  if (typeof i == "number") {
    if (typeof e == "string")
      throw new Error(
        "If encoding is specified then the first argument must be a string"
      );
    return G5(this, i);
  }
  return ud(this, i, e, t);
}
function ud(i, e, t, n) {
  if (typeof e == "number")
    throw new TypeError('"value" argument must not be a number');
  return typeof ArrayBuffer < "u" && e instanceof ArrayBuffer ? function(s, r, a, o) {
    if (r.byteLength, a < 0 || r.byteLength < a)
      throw new RangeError("'offset' is out of bounds");
    if (r.byteLength < a + (o || 0))
      throw new RangeError("'length' is out of bounds");
    return r = a === void 0 && o === void 0 ? new Uint8Array(r) : o === void 0 ? new Uint8Array(r, a) : new Uint8Array(r, a, o), s0.TYPED_ARRAY_SUPPORT ? (s = r).__proto__ = s0.prototype : s = S3(s, r), s;
  }(i, e, t, n) : typeof e == "string" ? function(s, r, a) {
    if (typeof a == "string" && a !== "" || (a = "utf8"), !s0.isEncoding(a))
      throw new TypeError('"encoding" must be a valid string encoding');
    var o = 0 | fd(r, a), c = (s = nn(s, o)).write(r, a);
    return c !== o && (s = s.slice(0, c)), s;
  }(i, e, t) : function(s, r) {
    if (I1(r)) {
      var a = 0 | n4(r.length);
      return (s = nn(s, a)).length === 0 || r.copy(s, 0, 0, a), s;
    }
    if (r) {
      if (typeof ArrayBuffer < "u" && r.buffer instanceof ArrayBuffer || "length" in r)
        return typeof r.length != "number" || (o = r.length) != o ? nn(s, 0) : S3(s, r);
      if (r.type === "Buffer" && hd(r.data))
        return S3(s, r.data);
    }
    var o;
    throw new TypeError(
      "First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object."
    );
  }(i, e);
}
function dd(i) {
  if (typeof i != "number")
    throw new TypeError('"size" argument must be a number');
  if (i < 0)
    throw new RangeError('"size" argument must not be negative');
}
function G5(i, e) {
  if (dd(e), i = nn(i, e < 0 ? 0 : 0 | n4(e)), !s0.TYPED_ARRAY_SUPPORT)
    for (var t = 0; t < e; ++t)
      i[t] = 0;
  return i;
}
function S3(i, e) {
  var t = e.length < 0 ? 0 : 0 | n4(e.length);
  i = nn(i, t);
  for (var n = 0; n < t; n += 1)
    i[n] = 255 & e[n];
  return i;
}
function n4(i) {
  if (i >= zr())
    throw new RangeError(
      "Attempt to allocate Buffer larger than maximum size: 0x" + zr().toString(16) + " bytes"
    );
  return 0 | i;
}
function I1(i) {
  return !(i == null || !i._isBuffer);
}
function fd(i, e) {
  if (I1(i))
    return i.length;
  if (typeof ArrayBuffer < "u" && typeof ArrayBuffer.isView == "function" && (ArrayBuffer.isView(i) || i instanceof ArrayBuffer))
    return i.byteLength;
  typeof i != "string" && (i = "" + i);
  var t = i.length;
  if (t === 0)
    return 0;
  for (var n = !1; ; )
    switch (e) {
      case "ascii":
      case "latin1":
      case "binary":
        return t;
      case "utf8":
      case "utf-8":
      case void 0:
        return kr(i).length;
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return 2 * t;
      case "hex":
        return t >>> 1;
      case "base64":
        return _d(i).length;
      default:
        if (n)
          return kr(i).length;
        e = ("" + e).toLowerCase(), n = !0;
    }
}
function uE(i, e, t) {
  var n = !1;
  if ((e === void 0 || e < 0) && (e = 0), e > this.length || ((t === void 0 || t > this.length) && (t = this.length), t <= 0) || (t >>>= 0) <= (e >>>= 0))
    return "";
  for (i || (i = "utf8"); ; )
    switch (i) {
      case "hex":
        return xE(this, e, t);
      case "utf8":
      case "utf-8":
        return md(this, e, t);
      case "ascii":
        return vE(this, e, t);
      case "latin1":
      case "binary":
        return yE(this, e, t);
      case "base64":
        return _E(this, e, t);
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return bE(this, e, t);
      default:
        if (n)
          throw new TypeError("Unknown encoding: " + i);
        i = (i + "").toLowerCase(), n = !0;
    }
}
function pi(i, e, t) {
  var n = i[e];
  i[e] = i[t], i[t] = n;
}
function el(i, e, t, n, s) {
  if (i.length === 0)
    return -1;
  if (typeof t == "string" ? (n = t, t = 0) : t > 2147483647 ? t = 2147483647 : t < -2147483648 && (t = -2147483648), t = +t, isNaN(t) && (t = s ? 0 : i.length - 1), t < 0 && (t = i.length + t), t >= i.length) {
    if (s)
      return -1;
    t = i.length - 1;
  } else if (t < 0) {
    if (!s)
      return -1;
    t = 0;
  }
  if (typeof e == "string" && (e = s0.from(e, n)), I1(e))
    return e.length === 0 ? -1 : tl(i, e, t, n, s);
  if (typeof e == "number")
    return e &= 255, s0.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf == "function" ? s ? Uint8Array.prototype.indexOf.call(i, e, t) : Uint8Array.prototype.lastIndexOf.call(i, e, t) : tl(i, [e], t, n, s);
  throw new TypeError("val must be string, number or Buffer");
}
function tl(i, e, t, n, s) {
  var r, a = 1, o = i.length, c = e.length;
  if (n !== void 0 && ((n = String(n).toLowerCase()) === "ucs2" || n === "ucs-2" || n === "utf16le" || n === "utf-16le")) {
    if (i.length < 2 || e.length < 2)
      return -1;
    a = 2, o /= 2, c /= 2, t /= 2;
  }
  function l(f, p) {
    return a === 1 ? f[p] : f.readUInt16BE(p * a);
  }
  if (s) {
    var h = -1;
    for (r = t; r < o; r++)
      if (l(i, r) === l(e, h === -1 ? 0 : r - h)) {
        if (h === -1 && (h = r), r - h + 1 === c)
          return h * a;
      } else
        h !== -1 && (r -= r - h), h = -1;
  } else
    for (t + c > o && (t = o - c), r = t; r >= 0; r--) {
      for (var d = !0, u = 0; u < c; u++)
        if (l(i, r + u) !== l(e, u)) {
          d = !1;
          break;
        }
      if (d)
        return r;
    }
  return -1;
}
function dE(i, e, t, n) {
  t = Number(t) || 0;
  var s = i.length - t;
  n ? (n = Number(n)) > s && (n = s) : n = s;
  var r = e.length;
  if (r % 2 != 0)
    throw new TypeError("Invalid hex string");
  n > r / 2 && (n = r / 2);
  for (var a = 0; a < n; ++a) {
    var o = parseInt(e.substr(2 * a, 2), 16);
    if (isNaN(o))
      return a;
    i[t + a] = o;
  }
  return a;
}
function fE(i, e, t, n) {
  return v6(kr(e, i.length - t), i, t, n);
}
function pd(i, e, t, n) {
  return v6(
    function(s) {
      for (var r = [], a = 0; a < s.length; ++a)
        r.push(255 & s.charCodeAt(a));
      return r;
    }(e),
    i,
    t,
    n
  );
}
function pE(i, e, t, n) {
  return pd(i, e, t, n);
}
function mE(i, e, t, n) {
  return v6(_d(e), i, t, n);
}
function gE(i, e, t, n) {
  return v6(
    function(s, r) {
      for (var a, o, c, l = [], h = 0; h < s.length && !((r -= 2) < 0); ++h)
        a = s.charCodeAt(h), o = a >> 8, c = a % 256, l.push(c), l.push(o);
      return l;
    }(e, i.length - t),
    i,
    t,
    n
  );
}
function _E(i, e, t) {
  return e === 0 && t === i.length ? Qo(i) : Qo(i.slice(e, t));
}
function md(i, e, t) {
  t = Math.min(i.length, t);
  for (var n = [], s = e; s < t; ) {
    var r, a, o, c, l = i[s], h = null, d = l > 239 ? 4 : l > 223 ? 3 : l > 191 ? 2 : 1;
    if (s + d <= t)
      switch (d) {
        case 1:
          l < 128 && (h = l);
          break;
        case 2:
          (192 & (r = i[s + 1])) == 128 && (c = (31 & l) << 6 | 63 & r) > 127 && (h = c);
          break;
        case 3:
          r = i[s + 1], a = i[s + 2], (192 & r) == 128 && (192 & a) == 128 && (c = (15 & l) << 12 | (63 & r) << 6 | 63 & a) > 2047 && (c < 55296 || c > 57343) && (h = c);
          break;
        case 4:
          r = i[s + 1], a = i[s + 2], o = i[s + 3], (192 & r) == 128 && (192 & a) == 128 && (192 & o) == 128 && (c = (15 & l) << 18 | (63 & r) << 12 | (63 & a) << 6 | 63 & o) > 65535 && c < 1114112 && (h = c);
      }
    h === null ? (h = 65533, d = 1) : h > 65535 && (h -= 65536, n.push(h >>> 10 & 1023 | 55296), h = 56320 | 1023 & h), n.push(h), s += d;
  }
  return function(u) {
    var f = u.length;
    if (f <= 4096)
      return String.fromCharCode.apply(String, u);
    for (var p = "", _ = 0; _ < f; )
      p += String.fromCharCode.apply(String, u.slice(_, _ += 4096));
    return p;
  }(n);
}
s0.poolSize = 8192, s0._augment = function(i) {
  return i.__proto__ = s0.prototype, i;
}, s0.from = function(i, e, t) {
  return ud(null, i, e, t);
}, s0.TYPED_ARRAY_SUPPORT && (s0.prototype.__proto__ = Uint8Array.prototype, s0.__proto__ = Uint8Array), s0.alloc = function(i, e, t) {
  return function(n, s, r, a) {
    return dd(s), s <= 0 ? nn(n, s) : r !== void 0 ? typeof a == "string" ? nn(n, s).fill(r, a) : nn(n, s).fill(r) : nn(n, s);
  }(null, i, e, t);
}, s0.allocUnsafe = function(i) {
  return G5(null, i);
}, s0.allocUnsafeSlow = function(i) {
  return G5(null, i);
}, s0.isBuffer = vd, s0.compare = function(i, e) {
  if (!I1(i) || !I1(e))
    throw new TypeError("Arguments must be Buffers");
  if (i === e)
    return 0;
  for (var t = i.length, n = e.length, s = 0, r = Math.min(t, n); s < r; ++s)
    if (i[s] !== e[s]) {
      t = i[s], n = e[s];
      break;
    }
  return t < n ? -1 : n < t ? 1 : 0;
}, s0.isEncoding = function(i) {
  switch (String(i).toLowerCase()) {
    case "hex":
    case "utf8":
    case "utf-8":
    case "ascii":
    case "latin1":
    case "binary":
    case "base64":
    case "ucs2":
    case "ucs-2":
    case "utf16le":
    case "utf-16le":
      return !0;
    default:
      return !1;
  }
}, s0.concat = function(i, e) {
  if (!hd(i))
    throw new TypeError('"list" argument must be an Array of Buffers');
  if (i.length === 0)
    return s0.alloc(0);
  var t;
  if (e === void 0)
    for (e = 0, t = 0; t < i.length; ++t)
      e += i[t].length;
  var n = s0.allocUnsafe(e), s = 0;
  for (t = 0; t < i.length; ++t) {
    var r = i[t];
    if (!I1(r))
      throw new TypeError('"list" argument must be an Array of Buffers');
    r.copy(n, s), s += r.length;
  }
  return n;
}, s0.byteLength = fd, s0.prototype._isBuffer = !0, s0.prototype.swap16 = function() {
  var i = this.length;
  if (i % 2 != 0)
    throw new RangeError("Buffer size must be a multiple of 16-bits");
  for (var e = 0; e < i; e += 2)
    pi(this, e, e + 1);
  return this;
}, s0.prototype.swap32 = function() {
  var i = this.length;
  if (i % 4 != 0)
    throw new RangeError("Buffer size must be a multiple of 32-bits");
  for (var e = 0; e < i; e += 4)
    pi(this, e, e + 3), pi(this, e + 1, e + 2);
  return this;
}, s0.prototype.swap64 = function() {
  var i = this.length;
  if (i % 8 != 0)
    throw new RangeError("Buffer size must be a multiple of 64-bits");
  for (var e = 0; e < i; e += 8)
    pi(this, e, e + 7), pi(this, e + 1, e + 6), pi(this, e + 2, e + 5), pi(this, e + 3, e + 4);
  return this;
}, s0.prototype.toString = function() {
  var i = 0 | this.length;
  return i === 0 ? "" : arguments.length === 0 ? md(this, 0, i) : uE.apply(this, arguments);
}, s0.prototype.equals = function(i) {
  if (!I1(i))
    throw new TypeError("Argument must be a Buffer");
  return this === i || s0.compare(this, i) === 0;
}, s0.prototype.inspect = function() {
  var i = "";
  return this.length > 0 && (i = this.toString("hex", 0, 50).match(/.{2}/g).join(" "), this.length > 50 && (i += " ... ")), "<Buffer " + i + ">";
}, s0.prototype.compare = function(i, e, t, n, s) {
  if (!I1(i))
    throw new TypeError("Argument must be a Buffer");
  if (e === void 0 && (e = 0), t === void 0 && (t = i ? i.length : 0), n === void 0 && (n = 0), s === void 0 && (s = this.length), e < 0 || t > i.length || n < 0 || s > this.length)
    throw new RangeError("out of range index");
  if (n >= s && e >= t)
    return 0;
  if (n >= s)
    return -1;
  if (e >= t)
    return 1;
  if (this === i)
    return 0;
  for (var r = (s >>>= 0) - (n >>>= 0), a = (t >>>= 0) - (e >>>= 0), o = Math.min(r, a), c = this.slice(n, s), l = i.slice(e, t), h = 0; h < o; ++h)
    if (c[h] !== l[h]) {
      r = c[h], a = l[h];
      break;
    }
  return r < a ? -1 : a < r ? 1 : 0;
}, s0.prototype.includes = function(i, e, t) {
  return this.indexOf(i, e, t) !== -1;
}, s0.prototype.indexOf = function(i, e, t) {
  return el(this, i, e, t, !0);
}, s0.prototype.lastIndexOf = function(i, e, t) {
  return el(this, i, e, t, !1);
}, s0.prototype.write = function(i, e, t, n) {
  if (e === void 0)
    n = "utf8", t = this.length, e = 0;
  else if (t === void 0 && typeof e == "string")
    n = e, t = this.length, e = 0;
  else {
    if (!isFinite(e))
      throw new Error(
        "Buffer.write(string, encoding, offset[, length]) is no longer supported"
      );
    e |= 0, isFinite(t) ? (t |= 0, n === void 0 && (n = "utf8")) : (n = t, t = void 0);
  }
  var s = this.length - e;
  if ((t === void 0 || t > s) && (t = s), i.length > 0 && (t < 0 || e < 0) || e > this.length)
    throw new RangeError("Attempt to write outside buffer bounds");
  n || (n = "utf8");
  for (var r = !1; ; )
    switch (n) {
      case "hex":
        return dE(this, i, e, t);
      case "utf8":
      case "utf-8":
        return fE(this, i, e, t);
      case "ascii":
        return pd(this, i, e, t);
      case "latin1":
      case "binary":
        return pE(this, i, e, t);
      case "base64":
        return mE(this, i, e, t);
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return gE(this, i, e, t);
      default:
        if (r)
          throw new TypeError("Unknown encoding: " + n);
        n = ("" + n).toLowerCase(), r = !0;
    }
}, s0.prototype.toJSON = function() {
  return {
    type: "Buffer",
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};
function vE(i, e, t) {
  var n = "";
  t = Math.min(i.length, t);
  for (var s = e; s < t; ++s)
    n += String.fromCharCode(127 & i[s]);
  return n;
}
function yE(i, e, t) {
  var n = "";
  t = Math.min(i.length, t);
  for (var s = e; s < t; ++s)
    n += String.fromCharCode(i[s]);
  return n;
}
function xE(i, e, t) {
  var n = i.length;
  (!e || e < 0) && (e = 0), (!t || t < 0 || t > n) && (t = n);
  for (var s = "", r = e; r < t; ++r)
    s += ME(i[r]);
  return s;
}
function bE(i, e, t) {
  for (var n = i.slice(e, t), s = "", r = 0; r < n.length; r += 2)
    s += String.fromCharCode(n[r] + 256 * n[r + 1]);
  return s;
}
function Je(i, e, t) {
  if (i % 1 != 0 || i < 0)
    throw new RangeError("offset is not uint");
  if (i + e > t)
    throw new RangeError("Trying to access beyond buffer length");
}
function wt(i, e, t, n, s, r) {
  if (!I1(i))
    throw new TypeError('"buffer" argument must be a Buffer instance');
  if (e > s || e < r)
    throw new RangeError('"value" argument is out of bounds');
  if (t + n > i.length)
    throw new RangeError("Index out of range");
}
function nr(i, e, t, n) {
  e < 0 && (e = 65535 + e + 1);
  for (var s = 0, r = Math.min(i.length - t, 2); s < r; ++s)
    i[t + s] = (e & 255 << 8 * (n ? s : 1 - s)) >>> 8 * (n ? s : 1 - s);
}
function ir(i, e, t, n) {
  e < 0 && (e = 4294967295 + e + 1);
  for (var s = 0, r = Math.min(i.length - t, 4); s < r; ++s)
    i[t + s] = e >>> 8 * (n ? s : 3 - s) & 255;
}
function gd(i, e, t, n, s, r) {
  if (t + n > i.length)
    throw new RangeError("Index out of range");
  if (t < 0)
    throw new RangeError("Index out of range");
}
function nl(i, e, t, n, s) {
  return s || gd(i, 0, t, 4), cd(i, e, t, n, 23, 4), t + 4;
}
function il(i, e, t, n, s) {
  return s || gd(i, 0, t, 8), cd(i, e, t, n, 52, 8), t + 8;
}
s0.prototype.slice = function(i, e) {
  var t, n = this.length;
  if ((i = ~~i) < 0 ? (i += n) < 0 && (i = 0) : i > n && (i = n), (e = e === void 0 ? n : ~~e) < 0 ? (e += n) < 0 && (e = 0) : e > n && (e = n), e < i && (e = i), s0.TYPED_ARRAY_SUPPORT)
    (t = this.subarray(i, e)).__proto__ = s0.prototype;
  else {
    var s = e - i;
    t = new s0(s, void 0);
    for (var r = 0; r < s; ++r)
      t[r] = this[r + i];
  }
  return t;
}, s0.prototype.readUIntLE = function(i, e, t) {
  i |= 0, e |= 0, t || Je(i, e, this.length);
  for (var n = this[i], s = 1, r = 0; ++r < e && (s *= 256); )
    n += this[i + r] * s;
  return n;
}, s0.prototype.readUIntBE = function(i, e, t) {
  i |= 0, e |= 0, t || Je(i, e, this.length);
  for (var n = this[i + --e], s = 1; e > 0 && (s *= 256); )
    n += this[i + --e] * s;
  return n;
}, s0.prototype.readUInt8 = function(i, e) {
  return e || Je(i, 1, this.length), this[i];
}, s0.prototype.readUInt16LE = function(i, e) {
  return e || Je(i, 2, this.length), this[i] | this[i + 1] << 8;
}, s0.prototype.readUInt16BE = function(i, e) {
  return e || Je(i, 2, this.length), this[i] << 8 | this[i + 1];
}, s0.prototype.readUInt32LE = function(i, e) {
  return e || Je(i, 4, this.length), (this[i] | this[i + 1] << 8 | this[i + 2] << 16) + 16777216 * this[i + 3];
}, s0.prototype.readUInt32BE = function(i, e) {
  return e || Je(i, 4, this.length), 16777216 * this[i] + (this[i + 1] << 16 | this[i + 2] << 8 | this[i + 3]);
}, s0.prototype.readIntLE = function(i, e, t) {
  i |= 0, e |= 0, t || Je(i, e, this.length);
  for (var n = this[i], s = 1, r = 0; ++r < e && (s *= 256); )
    n += this[i + r] * s;
  return n >= (s *= 128) && (n -= Math.pow(2, 8 * e)), n;
}, s0.prototype.readIntBE = function(i, e, t) {
  i |= 0, e |= 0, t || Je(i, e, this.length);
  for (var n = e, s = 1, r = this[i + --n]; n > 0 && (s *= 256); )
    r += this[i + --n] * s;
  return r >= (s *= 128) && (r -= Math.pow(2, 8 * e)), r;
}, s0.prototype.readInt8 = function(i, e) {
  return e || Je(i, 1, this.length), 128 & this[i] ? -1 * (255 - this[i] + 1) : this[i];
}, s0.prototype.readInt16LE = function(i, e) {
  e || Je(i, 2, this.length);
  var t = this[i] | this[i + 1] << 8;
  return 32768 & t ? 4294901760 | t : t;
}, s0.prototype.readInt16BE = function(i, e) {
  e || Je(i, 2, this.length);
  var t = this[i + 1] | this[i] << 8;
  return 32768 & t ? 4294901760 | t : t;
}, s0.prototype.readInt32LE = function(i, e) {
  return e || Je(i, 4, this.length), this[i] | this[i + 1] << 8 | this[i + 2] << 16 | this[i + 3] << 24;
}, s0.prototype.readInt32BE = function(i, e) {
  return e || Je(i, 4, this.length), this[i] << 24 | this[i + 1] << 16 | this[i + 2] << 8 | this[i + 3];
}, s0.prototype.readFloatLE = function(i, e) {
  return e || Je(i, 4, this.length), tr(this, i, !0, 23, 4);
}, s0.prototype.readFloatBE = function(i, e) {
  return e || Je(i, 4, this.length), tr(this, i, !1, 23, 4);
}, s0.prototype.readDoubleLE = function(i, e) {
  return e || Je(i, 8, this.length), tr(this, i, !0, 52, 8);
}, s0.prototype.readDoubleBE = function(i, e) {
  return e || Je(i, 8, this.length), tr(this, i, !1, 52, 8);
}, s0.prototype.writeUIntLE = function(i, e, t, n) {
  i = +i, e |= 0, t |= 0, n || wt(this, i, e, t, Math.pow(2, 8 * t) - 1, 0);
  var s = 1, r = 0;
  for (this[e] = 255 & i; ++r < t && (s *= 256); )
    this[e + r] = i / s & 255;
  return e + t;
}, s0.prototype.writeUIntBE = function(i, e, t, n) {
  i = +i, e |= 0, t |= 0, n || wt(this, i, e, t, Math.pow(2, 8 * t) - 1, 0);
  var s = t - 1, r = 1;
  for (this[e + s] = 255 & i; --s >= 0 && (r *= 256); )
    this[e + s] = i / r & 255;
  return e + t;
}, s0.prototype.writeUInt8 = function(i, e, t) {
  return i = +i, e |= 0, t || wt(this, i, e, 1, 255, 0), s0.TYPED_ARRAY_SUPPORT || (i = Math.floor(i)), this[e] = 255 & i, e + 1;
}, s0.prototype.writeUInt16LE = function(i, e, t) {
  return i = +i, e |= 0, t || wt(this, i, e, 2, 65535, 0), s0.TYPED_ARRAY_SUPPORT ? (this[e] = 255 & i, this[e + 1] = i >>> 8) : nr(this, i, e, !0), e + 2;
}, s0.prototype.writeUInt16BE = function(i, e, t) {
  return i = +i, e |= 0, t || wt(this, i, e, 2, 65535, 0), s0.TYPED_ARRAY_SUPPORT ? (this[e] = i >>> 8, this[e + 1] = 255 & i) : nr(this, i, e, !1), e + 2;
}, s0.prototype.writeUInt32LE = function(i, e, t) {
  return i = +i, e |= 0, t || wt(this, i, e, 4, 4294967295, 0), s0.TYPED_ARRAY_SUPPORT ? (this[e + 3] = i >>> 24, this[e + 2] = i >>> 16, this[e + 1] = i >>> 8, this[e] = 255 & i) : ir(this, i, e, !0), e + 4;
}, s0.prototype.writeUInt32BE = function(i, e, t) {
  return i = +i, e |= 0, t || wt(this, i, e, 4, 4294967295, 0), s0.TYPED_ARRAY_SUPPORT ? (this[e] = i >>> 24, this[e + 1] = i >>> 16, this[e + 2] = i >>> 8, this[e + 3] = 255 & i) : ir(this, i, e, !1), e + 4;
}, s0.prototype.writeIntLE = function(i, e, t, n) {
  if (i = +i, e |= 0, !n) {
    var s = Math.pow(2, 8 * t - 1);
    wt(this, i, e, t, s - 1, -s);
  }
  var r = 0, a = 1, o = 0;
  for (this[e] = 255 & i; ++r < t && (a *= 256); )
    i < 0 && o === 0 && this[e + r - 1] !== 0 && (o = 1), this[e + r] = (i / a >> 0) - o & 255;
  return e + t;
}, s0.prototype.writeIntBE = function(i, e, t, n) {
  if (i = +i, e |= 0, !n) {
    var s = Math.pow(2, 8 * t - 1);
    wt(this, i, e, t, s - 1, -s);
  }
  var r = t - 1, a = 1, o = 0;
  for (this[e + r] = 255 & i; --r >= 0 && (a *= 256); )
    i < 0 && o === 0 && this[e + r + 1] !== 0 && (o = 1), this[e + r] = (i / a >> 0) - o & 255;
  return e + t;
}, s0.prototype.writeInt8 = function(i, e, t) {
  return i = +i, e |= 0, t || wt(this, i, e, 1, 127, -128), s0.TYPED_ARRAY_SUPPORT || (i = Math.floor(i)), i < 0 && (i = 255 + i + 1), this[e] = 255 & i, e + 1;
}, s0.prototype.writeInt16LE = function(i, e, t) {
  return i = +i, e |= 0, t || wt(this, i, e, 2, 32767, -32768), s0.TYPED_ARRAY_SUPPORT ? (this[e] = 255 & i, this[e + 1] = i >>> 8) : nr(this, i, e, !0), e + 2;
}, s0.prototype.writeInt16BE = function(i, e, t) {
  return i = +i, e |= 0, t || wt(this, i, e, 2, 32767, -32768), s0.TYPED_ARRAY_SUPPORT ? (this[e] = i >>> 8, this[e + 1] = 255 & i) : nr(this, i, e, !1), e + 2;
}, s0.prototype.writeInt32LE = function(i, e, t) {
  return i = +i, e |= 0, t || wt(this, i, e, 4, 2147483647, -2147483648), s0.TYPED_ARRAY_SUPPORT ? (this[e] = 255 & i, this[e + 1] = i >>> 8, this[e + 2] = i >>> 16, this[e + 3] = i >>> 24) : ir(this, i, e, !0), e + 4;
}, s0.prototype.writeInt32BE = function(i, e, t) {
  return i = +i, e |= 0, t || wt(this, i, e, 4, 2147483647, -2147483648), i < 0 && (i = 4294967295 + i + 1), s0.TYPED_ARRAY_SUPPORT ? (this[e] = i >>> 24, this[e + 1] = i >>> 16, this[e + 2] = i >>> 8, this[e + 3] = 255 & i) : ir(this, i, e, !1), e + 4;
}, s0.prototype.writeFloatLE = function(i, e, t) {
  return nl(this, i, e, !0, t);
}, s0.prototype.writeFloatBE = function(i, e, t) {
  return nl(this, i, e, !1, t);
}, s0.prototype.writeDoubleLE = function(i, e, t) {
  return il(this, i, e, !0, t);
}, s0.prototype.writeDoubleBE = function(i, e, t) {
  return il(this, i, e, !1, t);
}, s0.prototype.copy = function(i, e, t, n) {
  if (t || (t = 0), n || n === 0 || (n = this.length), e >= i.length && (e = i.length), e || (e = 0), n > 0 && n < t && (n = t), n === t || i.length === 0 || this.length === 0)
    return 0;
  if (e < 0)
    throw new RangeError("targetStart out of bounds");
  if (t < 0 || t >= this.length)
    throw new RangeError("sourceStart out of bounds");
  if (n < 0)
    throw new RangeError("sourceEnd out of bounds");
  n > this.length && (n = this.length), i.length - e < n - t && (n = i.length - e + t);
  var s, r = n - t;
  if (this === i && t < e && e < n)
    for (s = r - 1; s >= 0; --s)
      i[s + e] = this[s + t];
  else if (r < 1e3 || !s0.TYPED_ARRAY_SUPPORT)
    for (s = 0; s < r; ++s)
      i[s + e] = this[s + t];
  else
    Uint8Array.prototype.set.call(i, this.subarray(t, t + r), e);
  return r;
}, s0.prototype.fill = function(i, e, t, n) {
  if (typeof i == "string") {
    if (typeof e == "string" ? (n = e, e = 0, t = this.length) : typeof t == "string" && (n = t, t = this.length), i.length === 1) {
      var s = i.charCodeAt(0);
      s < 256 && (i = s);
    }
    if (n !== void 0 && typeof n != "string")
      throw new TypeError("encoding must be a string");
    if (typeof n == "string" && !s0.isEncoding(n))
      throw new TypeError("Unknown encoding: " + n);
  } else
    typeof i == "number" && (i &= 255);
  if (e < 0 || this.length < e || this.length < t)
    throw new RangeError("Out of range index");
  if (t <= e)
    return this;
  var r;
  if (e >>>= 0, t = t === void 0 ? this.length : t >>> 0, i || (i = 0), typeof i == "number")
    for (r = e; r < t; ++r)
      this[r] = i;
  else {
    var a = I1(i) ? i : kr(new s0(i, n).toString()), o = a.length;
    for (r = 0; r < t - e; ++r)
      this[r + e] = a[r % o];
  }
  return this;
};
var wE = /[^+\/0-9A-Za-z-_]/g;
function ME(i) {
  return i < 16 ? "0" + i.toString(16) : i.toString(16);
}
function kr(i, e) {
  var t;
  e = e || 1 / 0;
  for (var n = i.length, s = null, r = [], a = 0; a < n; ++a) {
    if ((t = i.charCodeAt(a)) > 55295 && t < 57344) {
      if (!s) {
        if (t > 56319) {
          (e -= 3) > -1 && r.push(239, 191, 189);
          continue;
        }
        if (a + 1 === n) {
          (e -= 3) > -1 && r.push(239, 191, 189);
          continue;
        }
        s = t;
        continue;
      }
      if (t < 56320) {
        (e -= 3) > -1 && r.push(239, 191, 189), s = t;
        continue;
      }
      t = 65536 + (s - 55296 << 10 | t - 56320);
    } else
      s && (e -= 3) > -1 && r.push(239, 191, 189);
    if (s = null, t < 128) {
      if ((e -= 1) < 0)
        break;
      r.push(t);
    } else if (t < 2048) {
      if ((e -= 2) < 0)
        break;
      r.push(t >> 6 | 192, 63 & t | 128);
    } else if (t < 65536) {
      if ((e -= 3) < 0)
        break;
      r.push(t >> 12 | 224, t >> 6 & 63 | 128, 63 & t | 128);
    } else {
      if (!(t < 1114112))
        throw new Error("Invalid code point");
      if ((e -= 4) < 0)
        break;
      r.push(
        t >> 18 | 240,
        t >> 12 & 63 | 128,
        t >> 6 & 63 | 128,
        63 & t | 128
      );
    }
  }
  return r;
}
function _d(i) {
  return function(e) {
    var t, n, s, r, a, o;
    t4 || ld();
    var c = e.length;
    if (c % 4 > 0)
      throw new Error("Invalid string. Length must be a multiple of 4");
    a = e[c - 2] === "=" ? 2 : e[c - 1] === "=" ? 1 : 0, o = new oE(3 * c / 4 - a), s = a > 0 ? c - 4 : c;
    var l = 0;
    for (t = 0, n = 0; t < s; t += 4, n += 3)
      r = Gt[e.charCodeAt(t)] << 18 | Gt[e.charCodeAt(t + 1)] << 12 | Gt[e.charCodeAt(t + 2)] << 6 | Gt[e.charCodeAt(t + 3)], o[l++] = r >> 16 & 255, o[l++] = r >> 8 & 255, o[l++] = 255 & r;
    return a === 2 ? (r = Gt[e.charCodeAt(t)] << 2 | Gt[e.charCodeAt(t + 1)] >> 4, o[l++] = 255 & r) : a === 1 && (r = Gt[e.charCodeAt(t)] << 10 | Gt[e.charCodeAt(t + 1)] << 4 | Gt[e.charCodeAt(t + 2)] >> 2, o[l++] = r >> 8 & 255, o[l++] = 255 & r), o;
  }(
    function(e) {
      if ((e = function(t) {
        return t.trim ? t.trim() : t.replace(/^\s+|\s+$/g, "");
      }(e).replace(wE, "")).length < 2)
        return "";
      for (; e.length % 4 != 0; )
        e += "=";
      return e;
    }(i)
  );
}
function v6(i, e, t, n) {
  for (var s = 0; s < n && !(s + t >= e.length || s >= i.length); ++s)
    e[s + t] = i[s];
  return s;
}
function vd(i) {
  return i != null && (!!i._isBuffer || sl(i) || function(e) {
    return typeof e.readFloatLE == "function" && typeof e.slice == "function" && sl(e.slice(0, 0));
  }(i));
}
function sl(i) {
  return !!i.constructor && typeof i.constructor.isBuffer == "function" && i.constructor.isBuffer(i);
}
var SE = Object.freeze({
  __proto__: null,
  Buffer: s0,
  INSPECT_MAX_BYTES: 50,
  SlowBuffer: function(i) {
    return +i != i && (i = 0), s0.alloc(+i);
  },
  isBuffer: vd,
  kMaxLength: hE
});
function yd(i, e) {
  return i(e = { exports: {} }, e.exports), e.exports;
}
function An() {
}
function ae() {
  ae.init.call(this);
}
function xd(i) {
  return i._maxListeners === void 0 ? ae.defaultMaxListeners : i._maxListeners;
}
function EE(i, e, t) {
  if (e)
    i.call(t);
  else
    for (var n = i.length, s = $s(i, n), r = 0; r < n; ++r)
      s[r].call(t);
}
function TE(i, e, t, n) {
  if (e)
    i.call(t, n);
  else
    for (var s = i.length, r = $s(i, s), a = 0; a < s; ++a)
      r[a].call(t, n);
}
function AE(i, e, t, n, s) {
  if (e)
    i.call(t, n, s);
  else
    for (var r = i.length, a = $s(i, r), o = 0; o < r; ++o)
      a[o].call(t, n, s);
}
function CE(i, e, t, n, s, r) {
  if (e)
    i.call(t, n, s, r);
  else
    for (var a = i.length, o = $s(i, a), c = 0; c < a; ++c)
      o[c].call(t, n, s, r);
}
function IE(i, e, t, n) {
  if (e)
    i.apply(t, n);
  else
    for (var s = i.length, r = $s(i, s), a = 0; a < s; ++a)
      r[a].apply(t, n);
}
function rl(i, e, t, n) {
  var s, r, a, o;
  if (typeof t != "function")
    throw new TypeError('"listener" argument must be a function');
  if ((r = i._events) ? (r.newListener && (i.emit("newListener", e, t.listener ? t.listener : t), r = i._events), a = r[e]) : (r = i._events = new An(), i._eventsCount = 0), a) {
    if (typeof a == "function" ? a = r[e] = n ? [t, a] : [a, t] : n ? a.unshift(t) : a.push(t), !a.warned && (s = xd(i)) && s > 0 && a.length > s) {
      a.warned = !0;
      var c = new Error(
        "Possible EventEmitter memory leak detected. " + a.length + " " + e + " listeners added. Use emitter.setMaxListeners() to increase limit"
      );
      c.name = "MaxListenersExceededWarning", c.emitter = i, c.type = e, c.count = a.length, o = c, typeof console.warn == "function" ? console.warn(o) : console.log(o);
    }
  } else
    a = r[e] = t, ++i._eventsCount;
  return i;
}
function al(i, e, t) {
  var n = !1;
  function s() {
    i.removeListener(e, s), n || (n = !0, t.apply(i, arguments));
  }
  return s.listener = t, s;
}
function ol(i) {
  var e = this._events;
  if (e) {
    var t = e[i];
    if (typeof t == "function")
      return 1;
    if (t)
      return t.length;
  }
  return 0;
}
function $s(i, e) {
  for (var t = new Array(e); e--; )
    t[e] = i[e];
  return t;
}
function bd() {
  throw new Error("setTimeout has not been defined");
}
function wd() {
  throw new Error("clearTimeout has not been defined");
}
An.prototype = /* @__PURE__ */ Object.create(null), ae.EventEmitter = ae, ae.usingDomains = !1, ae.prototype.domain = void 0, ae.prototype._events = void 0, ae.prototype._maxListeners = void 0, ae.defaultMaxListeners = 10, ae.init = function() {
  this.domain = null, ae.usingDomains && (void 0).active, this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = new An(), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
}, ae.prototype.setMaxListeners = function(i) {
  if (typeof i != "number" || i < 0 || isNaN(i))
    throw new TypeError('"n" argument must be a positive number');
  return this._maxListeners = i, this;
}, ae.prototype.getMaxListeners = function() {
  return xd(this);
}, ae.prototype.emit = function(i) {
  var e, t, n, s, r, a, o, c = i === "error";
  if (a = this._events)
    c = c && a.error == null;
  else if (!c)
    return !1;
  if (o = this.domain, c) {
    if (e = arguments[1], !o) {
      if (e instanceof Error)
        throw e;
      var l = new Error('Uncaught, unspecified "error" event. (' + e + ")");
      throw l.context = e, l;
    }
    return e || (e = new Error('Uncaught, unspecified "error" event')), e.domainEmitter = this, e.domain = o, e.domainThrown = !1, o.emit("error", e), !1;
  }
  if (!(t = a[i]))
    return !1;
  var h = typeof t == "function";
  switch (n = arguments.length) {
    case 1:
      EE(t, h, this);
      break;
    case 2:
      TE(t, h, this, arguments[1]);
      break;
    case 3:
      AE(t, h, this, arguments[1], arguments[2]);
      break;
    case 4:
      CE(t, h, this, arguments[1], arguments[2], arguments[3]);
      break;
    default:
      for (s = new Array(n - 1), r = 1; r < n; r++)
        s[r - 1] = arguments[r];
      IE(t, h, this, s);
  }
  return !0;
}, ae.prototype.addListener = function(i, e) {
  return rl(this, i, e, !1);
}, ae.prototype.on = ae.prototype.addListener, ae.prototype.prependListener = function(i, e) {
  return rl(this, i, e, !0);
}, ae.prototype.once = function(i, e) {
  if (typeof e != "function")
    throw new TypeError('"listener" argument must be a function');
  return this.on(i, al(this, i, e)), this;
}, ae.prototype.prependOnceListener = function(i, e) {
  if (typeof e != "function")
    throw new TypeError('"listener" argument must be a function');
  return this.prependListener(i, al(this, i, e)), this;
}, ae.prototype.removeListener = function(i, e) {
  var t, n, s, r, a;
  if (typeof e != "function")
    throw new TypeError('"listener" argument must be a function');
  if (!(n = this._events))
    return this;
  if (!(t = n[i]))
    return this;
  if (t === e || t.listener && t.listener === e)
    --this._eventsCount == 0 ? this._events = new An() : (delete n[i], n.removeListener && this.emit("removeListener", i, t.listener || e));
  else if (typeof t != "function") {
    for (s = -1, r = t.length; r-- > 0; )
      if (t[r] === e || t[r].listener && t[r].listener === e) {
        a = t[r].listener, s = r;
        break;
      }
    if (s < 0)
      return this;
    if (t.length === 1) {
      if (t[0] = void 0, --this._eventsCount == 0)
        return this._events = new An(), this;
      delete n[i];
    } else
      (function(o, c) {
        for (var l = c, h = l + 1, d = o.length; h < d; l += 1, h += 1)
          o[l] = o[h];
        o.pop();
      })(t, s);
    n.removeListener && this.emit("removeListener", i, a || e);
  }
  return this;
}, ae.prototype.removeAllListeners = function(i) {
  var e, t;
  if (!(t = this._events))
    return this;
  if (!t.removeListener)
    return arguments.length === 0 ? (this._events = new An(), this._eventsCount = 0) : t[i] && (--this._eventsCount == 0 ? this._events = new An() : delete t[i]), this;
  if (arguments.length === 0) {
    for (var n, s = Object.keys(t), r = 0; r < s.length; ++r)
      (n = s[r]) !== "removeListener" && this.removeAllListeners(n);
    return this.removeAllListeners("removeListener"), this._events = new An(), this._eventsCount = 0, this;
  }
  if (typeof (e = t[i]) == "function")
    this.removeListener(i, e);
  else if (e)
    do
      this.removeListener(i, e[e.length - 1]);
    while (e[0]);
  return this;
}, ae.prototype.listeners = function(i) {
  var e, t = this._events;
  return t && (e = t[i]) ? typeof e == "function" ? [e.listener || e] : function(n) {
    for (var s = new Array(n.length), r = 0; r < s.length; ++r)
      s[r] = n[r].listener || n[r];
    return s;
  }(e) : [];
}, ae.listenerCount = function(i, e) {
  return typeof i.listenerCount == "function" ? i.listenerCount(e) : ol.call(i, e);
}, ae.prototype.listenerCount = ol, ae.prototype.eventNames = function() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};
var Cn = bd, In = wd;
function Md(i) {
  if (Cn === setTimeout)
    return setTimeout(i, 0);
  if ((Cn === bd || !Cn) && setTimeout)
    return Cn = setTimeout, setTimeout(i, 0);
  try {
    return Cn(i, 0);
  } catch {
    try {
      return Cn.call(null, i, 0);
    } catch {
      return Cn.call(this, i, 0);
    }
  }
}
typeof Q9.setTimeout == "function" && (Cn = setTimeout), typeof Q9.clearTimeout == "function" && (In = clearTimeout);
var Ci, sn = [], W9 = !1, Tr = -1;
function LE() {
  W9 && Ci && (W9 = !1, Ci.length ? sn = Ci.concat(sn) : Tr = -1, sn.length && Sd());
}
function Sd() {
  if (!W9) {
    var i = Md(LE);
    W9 = !0;
    for (var e = sn.length; e; ) {
      for (Ci = sn, sn = []; ++Tr < e; )
        Ci && Ci[Tr].run();
      Tr = -1, e = sn.length;
    }
    Ci = null, W9 = !1, function(t) {
      if (In === clearTimeout)
        return clearTimeout(t);
      if ((In === wd || !In) && clearTimeout)
        return In = clearTimeout, clearTimeout(t);
      try {
        In(t);
      } catch {
        try {
          return In.call(null, t);
        } catch {
          return In.call(this, t);
        }
      }
    }(i);
  }
}
function Yt(i) {
  var e = new Array(arguments.length - 1);
  if (arguments.length > 1)
    for (var t = 1; t < arguments.length; t++)
      e[t - 1] = arguments[t];
  sn.push(new Ed(i, e)), sn.length !== 1 || W9 || Md(Sd);
}
function Ed(i, e) {
  this.fun = i, this.array = e;
}
Ed.prototype.run = function() {
  this.fun.apply(null, this.array);
};
var I8 = Q9.performance || {}, X9 = (I8.now || I8.mozNow || I8.msNow || I8.oNow || I8.webkitNow, typeof Object.create == "function" ? function(i, e) {
  i.super_ = e, i.prototype = Object.create(e.prototype, {
    constructor: {
      value: i,
      enumerable: !1,
      writable: !0,
      configurable: !0
    }
  });
} : function(i, e) {
  i.super_ = e;
  var t = function() {
  };
  t.prototype = e.prototype, i.prototype = new t(), i.prototype.constructor = i;
}), RE = /%[sdj%]/g;
function PE(i) {
  if (!W5(i)) {
    for (var e = [], t = 0; t < arguments.length; t++)
      e.push(Wn(arguments[t]));
    return e.join(" ");
  }
  t = 1;
  for (var n = arguments, s = n.length, r = String(i).replace(RE, function(o) {
    if (o === "%%")
      return "%";
    if (t >= s)
      return o;
    switch (o) {
      case "%s":
        return String(n[t++]);
      case "%d":
        return Number(n[t++]);
      case "%j":
        try {
          return JSON.stringify(n[t++]);
        } catch {
          return "[Circular]";
        }
      default:
        return o;
    }
  }), a = n[t]; t < s; a = n[++t])
    i4(a) || !js(a) ? r += " " + a : r += " " + Wn(a);
  return r;
}
function Td(i, e) {
  if (kn(Q9.process))
    return function() {
      return Td(i, e).apply(this, arguments);
    };
  var t = !1;
  return function() {
    return t || (console.error(e), t = !0), i.apply(this, arguments);
  };
}
var E3, sr = {};
function Wn(i, e) {
  var t = { seen: [], stylize: NE };
  return arguments.length >= 3 && (t.depth = arguments[2]), arguments.length >= 4 && (t.colors = arguments[3]), Ad(e) ? t.showHidden = e : e && OE(t, e), kn(t.showHidden) && (t.showHidden = !1), kn(t.depth) && (t.depth = 2), kn(t.colors) && (t.colors = !1), kn(t.customInspect) && (t.customInspect = !0), t.colors && (t.stylize = DE), Br(t, i, t.depth);
}
function DE(i, e) {
  var t = Wn.styles[e];
  return t ? "\x1B[" + Wn.colors[t][0] + "m" + i + "\x1B[" + Wn.colors[t][1] + "m" : i;
}
function NE(i, e) {
  return i;
}
function Br(i, e, t) {
  if (i.customInspect && e && L3(e.inspect) && e.inspect !== Wn && (!e.constructor || e.constructor.prototype !== e)) {
    var n = e.inspect(t, i);
    return W5(n) || (n = Br(i, n, t)), n;
  }
  var s = function(f, p) {
    if (kn(p))
      return f.stylize("undefined", "undefined");
    if (W5(p)) {
      var _ = "'" + JSON.stringify(p).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
      return f.stylize(_, "string");
    }
    if (g = p, typeof g == "number")
      return f.stylize("" + p, "number");
    var g;
    if (Ad(p))
      return f.stylize("" + p, "boolean");
    if (i4(p))
      return f.stylize("null", "null");
  }(i, e);
  if (s)
    return s;
  var r = Object.keys(e), a = function(f) {
    var p = {};
    return f.forEach(function(_, g) {
      p[_] = !0;
    }), p;
  }(r);
  if (i.showHidden && (r = Object.getOwnPropertyNames(e)), I3(e) && (r.indexOf("message") >= 0 || r.indexOf("description") >= 0))
    return T3(e);
  if (r.length === 0) {
    if (L3(e)) {
      var o = e.name ? ": " + e.name : "";
      return i.stylize("[Function" + o + "]", "special");
    }
    if (C3(e))
      return i.stylize(RegExp.prototype.toString.call(e), "regexp");
    if (ll(e))
      return i.stylize(Date.prototype.toString.call(e), "date");
    if (I3(e))
      return T3(e);
  }
  var c, l, h = "", d = !1, u = ["{", "}"];
  return c = e, Array.isArray(c) && (d = !0, u = ["[", "]"]), L3(e) && (h = " [Function" + (e.name ? ": " + e.name : "") + "]"), C3(e) && (h = " " + RegExp.prototype.toString.call(e)), ll(e) && (h = " " + Date.prototype.toUTCString.call(e)), I3(e) && (h = " " + T3(e)), r.length !== 0 || d && e.length != 0 ? t < 0 ? C3(e) ? i.stylize(RegExp.prototype.toString.call(e), "regexp") : i.stylize("[Object]", "special") : (i.seen.push(e), l = d ? function(f, p, _, g, m) {
    for (var v = [], y = 0, b = p.length; y < b; ++y)
      Cd(p, String(y)) ? v.push(A3(f, p, _, g, String(y), !0)) : v.push("");
    return m.forEach(function(w) {
      w.match(/^\d+$/) || v.push(A3(f, p, _, g, w, !0));
    }), v;
  }(i, e, t, a, r) : r.map(function(f) {
    return A3(i, e, t, a, f, d);
  }), i.seen.pop(), function(f, p, _) {
    return f.reduce(function(g, m) {
      return m.indexOf(`
`), g + m.replace(/\u001b\[\d\d?m/g, "").length + 1;
    }, 0) > 60 ? _[0] + (p === "" ? "" : p + `
 `) + " " + f.join(`,
  `) + " " + _[1] : _[0] + p + " " + f.join(", ") + " " + _[1];
  }(l, h, u)) : u[0] + h + u[1];
}
function T3(i) {
  return "[" + Error.prototype.toString.call(i) + "]";
}
function A3(i, e, t, n, s, r) {
  var a, o, c;
  if ((c = Object.getOwnPropertyDescriptor(e, s) || { value: e[s] }).get ? o = c.set ? i.stylize("[Getter/Setter]", "special") : i.stylize("[Getter]", "special") : c.set && (o = i.stylize("[Setter]", "special")), Cd(n, s) || (a = "[" + s + "]"), o || (i.seen.indexOf(c.value) < 0 ? (o = i4(t) ? Br(i, c.value, null) : Br(i, c.value, t - 1)).indexOf(
    `
`
  ) > -1 && (o = r ? o.split(`
`).map(function(l) {
    return "  " + l;
  }).join(`
`).substr(2) : `
` + o.split(`
`).map(function(l) {
    return "   " + l;
  }).join(`
`)) : o = i.stylize("[Circular]", "special")), kn(a)) {
    if (r && s.match(/^\d+$/))
      return o;
    (a = JSON.stringify("" + s)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (a = a.substr(1, a.length - 2), a = i.stylize(a, "name")) : (a = a.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), a = i.stylize(a, "string"));
  }
  return a + ": " + o;
}
function Ad(i) {
  return typeof i == "boolean";
}
function i4(i) {
  return i === null;
}
function W5(i) {
  return typeof i == "string";
}
function kn(i) {
  return i === void 0;
}
function C3(i) {
  return js(i) && s4(i) === "[object RegExp]";
}
function js(i) {
  return typeof i == "object" && i !== null;
}
function ll(i) {
  return js(i) && s4(i) === "[object Date]";
}
function I3(i) {
  return js(i) && (s4(i) === "[object Error]" || i instanceof Error);
}
function L3(i) {
  return typeof i == "function";
}
function s4(i) {
  return Object.prototype.toString.call(i);
}
function OE(i, e) {
  if (!e || !js(e))
    return i;
  for (var t = Object.keys(e), n = t.length; n--; )
    i[t[n]] = e[t[n]];
  return i;
}
function Cd(i, e) {
  return Object.prototype.hasOwnProperty.call(i, e);
}
function gi() {
  this.head = null, this.tail = null, this.length = 0;
}
Wn.colors = {
  bold: [1, 22],
  italic: [3, 23],
  underline: [4, 24],
  inverse: [7, 27],
  white: [37, 39],
  grey: [90, 39],
  black: [30, 39],
  blue: [34, 39],
  cyan: [36, 39],
  green: [32, 39],
  magenta: [35, 39],
  red: [31, 39],
  yellow: [33, 39]
}, Wn.styles = {
  special: "cyan",
  number: "yellow",
  boolean: "yellow",
  undefined: "grey",
  null: "bold",
  string: "green",
  date: "magenta",
  regexp: "red"
}, gi.prototype.push = function(i) {
  var e = { data: i, next: null };
  this.length > 0 ? this.tail.next = e : this.head = e, this.tail = e, ++this.length;
}, gi.prototype.unshift = function(i) {
  var e = { data: i, next: this.head };
  this.length === 0 && (this.tail = e), this.head = e, ++this.length;
}, gi.prototype.shift = function() {
  if (this.length !== 0) {
    var i = this.head.data;
    return this.length === 1 ? this.head = this.tail = null : this.head = this.head.next, --this.length, i;
  }
}, gi.prototype.clear = function() {
  this.head = this.tail = null, this.length = 0;
}, gi.prototype.join = function(i) {
  if (this.length === 0)
    return "";
  for (var e = this.head, t = "" + e.data; e = e.next; )
    t += i + e.data;
  return t;
}, gi.prototype.concat = function(i) {
  if (this.length === 0)
    return s0.alloc(0);
  if (this.length === 1)
    return this.head.data;
  for (var e = s0.allocUnsafe(i >>> 0), t = this.head, n = 0; t; )
    t.data.copy(e, n), n += t.data.length, t = t.next;
  return e;
};
var Id = yd(function(i, e) {
  var t = SE.Buffer, n = t.isEncoding || function(c) {
    switch (c && c.toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
      case "raw":
        return !0;
      default:
        return !1;
    }
  }, s = e.StringDecoder = function(c) {
    switch (this.encoding = (c || "utf8").toLowerCase().replace(/[-_]/, ""), function(l) {
      if (l && !n(l))
        throw new Error("Unknown encoding: " + l);
    }(c), this.encoding) {
      case "utf8":
        this.surrogateSize = 3;
        break;
      case "ucs2":
      case "utf16le":
        this.surrogateSize = 2, this.detectIncompleteChar = a;
        break;
      case "base64":
        this.surrogateSize = 3, this.detectIncompleteChar = o;
        break;
      default:
        return void (this.write = r);
    }
    this.charBuffer = new t(6), this.charReceived = 0, this.charLength = 0;
  };
  function r(c) {
    return c.toString(this.encoding);
  }
  function a(c) {
    this.charReceived = c.length % 2, this.charLength = this.charReceived ? 2 : 0;
  }
  function o(c) {
    this.charReceived = c.length % 3, this.charLength = this.charReceived ? 3 : 0;
  }
  s.prototype.write = function(c) {
    for (var l = ""; this.charLength; ) {
      var h = c.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : c.length;
      if (c.copy(this.charBuffer, this.charReceived, 0, h), this.charReceived += h, this.charReceived < this.charLength)
        return "";
      if (c = c.slice(h, c.length), !((u = (l = this.charBuffer.slice(0, this.charLength).toString(this.encoding)).charCodeAt(l.length - 1)) >= 55296 && u <= 56319)) {
        if (this.charReceived = this.charLength = 0, c.length === 0)
          return l;
        break;
      }
      this.charLength += this.surrogateSize, l = "";
    }
    this.detectIncompleteChar(c);
    var d = c.length;
    this.charLength && (c.copy(this.charBuffer, 0, c.length - this.charReceived, d), d -= this.charReceived);
    var u;
    if (d = (l += c.toString(this.encoding, 0, d)).length - 1, (u = l.charCodeAt(d)) >= 55296 && u <= 56319) {
      var f = this.surrogateSize;
      return this.charLength += f, this.charReceived += f, this.charBuffer.copy(this.charBuffer, f, 0, f), c.copy(this.charBuffer, 0, 0, f), l.substring(0, d);
    }
    return l;
  }, s.prototype.detectIncompleteChar = function(c) {
    for (var l = c.length >= 3 ? 3 : c.length; l > 0; l--) {
      var h = c[c.length - l];
      if (l == 1 && h >> 5 == 6) {
        this.charLength = 2;
        break;
      }
      if (l <= 2 && h >> 4 == 14) {
        this.charLength = 3;
        break;
      }
      if (l <= 3 && h >> 3 == 30) {
        this.charLength = 4;
        break;
      }
    }
    this.charReceived = l;
  }, s.prototype.end = function(c) {
    var l = "";
    if (c && c.length && (l = this.write(c)), this.charReceived) {
      var h = this.charReceived, d = this.charBuffer, u = this.encoding;
      l += d.slice(0, h).toString(u);
    }
    return l;
  };
}), Ld = Id.StringDecoder;
Re.ReadableState = Rd;
var fe = function(i) {
  return kn(E3) && (E3 = ""), i = i.toUpperCase(), !sr[i] && (new RegExp("\\b" + i + "\\b", "i").test(E3) ? sr[i] = function() {
    var e = PE.apply(null, arguments);
    console.error("%s %d: %s", i, 0, e);
  } : sr[i] = function() {
  }), sr[i];
}("stream");
function Rd(i, e) {
  i = i || {}, this.objectMode = !!i.objectMode, e instanceof $t && (this.objectMode = this.objectMode || !!i.readableObjectMode);
  var t = i.highWaterMark, n = this.objectMode ? 16 : 16384;
  this.highWaterMark = t || t === 0 ? t : n, this.highWaterMark = ~~this.highWaterMark, this.buffer = new gi(), this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = !1, this.endEmitted = !1, this.reading = !1, this.sync = !0, this.needReadable = !1, this.emittedReadable = !1, this.readableListening = !1, this.resumeScheduled = !1, this.defaultEncoding = i.defaultEncoding || "utf8", this.ranOut = !1, this.awaitDrain = 0, this.readingMore = !1, this.decoder = null, this.encoding = null, i.encoding && (this.decoder = new Ld(i.encoding), this.encoding = i.encoding);
}
function Re(i) {
  if (!(this instanceof Re))
    return new Re(i);
  this._readableState = new Rd(i, this), this.readable = !0, i && typeof i.read == "function" && (this._read = i.read), ae.call(this);
}
function cl(i, e, t, n, s) {
  var r = function(l, h) {
    var d = null;
    return s0.isBuffer(h) || typeof h == "string" || h == null || l.objectMode || (d = new TypeError("Invalid non-string/buffer chunk")), d;
  }(e, t);
  if (r)
    i.emit("error", r);
  else if (t === null)
    e.reading = !1, function(l, h) {
      if (!h.ended) {
        if (h.decoder) {
          var d = h.decoder.end();
          d && d.length && (h.buffer.push(d), h.length += h.objectMode ? 1 : d.length);
        }
        h.ended = !0, Vr(l);
      }
    }(i, e);
  else if (e.objectMode || t && t.length > 0)
    if (e.ended && !s) {
      var a = new Error("stream.push() after EOF");
      i.emit("error", a);
    } else if (e.endEmitted && s) {
      var o = new Error("stream.unshift() after end event");
      i.emit("error", o);
    } else {
      var c;
      !e.decoder || s || n || (t = e.decoder.write(t), c = !e.objectMode && t.length === 0), s || (e.reading = !1), c || (e.flowing && e.length === 0 && !e.sync ? (i.emit("data", t), i.read(0)) : (e.length += e.objectMode ? 1 : t.length, s ? e.buffer.unshift(t) : e.buffer.push(t), e.needReadable && Vr(i))), function(l, h) {
        h.readingMore || (h.readingMore = !0, Yt(UE, l, h));
      }(i, e);
    }
  else
    s || (e.reading = !1);
  return function(l) {
    return !l.ended && (l.needReadable || l.length < l.highWaterMark || l.length === 0);
  }(e);
}
X9(Re, ae), Re.prototype.push = function(i, e) {
  var t = this._readableState;
  return t.objectMode || typeof i != "string" || (e = e || t.defaultEncoding) !== t.encoding && (i = s0.from(i, e), e = ""), cl(this, t, i, e, !1);
}, Re.prototype.unshift = function(i) {
  return cl(this, this._readableState, i, "", !0);
}, Re.prototype.isPaused = function() {
  return this._readableState.flowing === !1;
}, Re.prototype.setEncoding = function(i) {
  return this._readableState.decoder = new Ld(i), this._readableState.encoding = i, this;
};
function hl(i, e) {
  return i <= 0 || e.length === 0 && e.ended ? 0 : e.objectMode ? 1 : i != i ? e.flowing && e.length ? e.buffer.head.data.length : e.length : (i > e.highWaterMark && (e.highWaterMark = function(t) {
    return t >= 8388608 ? t = 8388608 : (t--, t |= t >>> 1, t |= t >>> 2, t |= t >>> 4, t |= t >>> 8, t |= t >>> 16, t++), t;
  }(i)), i <= e.length ? i : e.ended ? e.length : (e.needReadable = !0, 0));
}
function Vr(i) {
  var e = i._readableState;
  e.needReadable = !1, e.emittedReadable || (fe("emitReadable", e.flowing), e.emittedReadable = !0, e.sync ? Yt(ul, i) : ul(i));
}
function ul(i) {
  fe("emit readable"), i.emit("readable"), r4(i);
}
function UE(i, e) {
  for (var t = e.length; !e.reading && !e.flowing && !e.ended && e.length < e.highWaterMark && (fe("maybeReadMore read 0"), i.read(0), t !== e.length); )
    t = e.length;
  e.readingMore = !1;
}
function FE(i) {
  fe("readable nexttick read 0"), i.read(0);
}
function zE(i, e) {
  e.reading || (fe("resume read 0"), i.read(0)), e.resumeScheduled = !1, e.awaitDrain = 0, i.emit("resume"), r4(i), e.flowing && !e.reading && i.read(0);
}
function r4(i) {
  var e = i._readableState;
  for (fe("flow", e.flowing); e.flowing && i.read() !== null; )
    ;
}
function dl(i, e) {
  return e.length === 0 ? null : (e.objectMode ? t = e.buffer.shift() : !i || i >= e.length ? (t = e.decoder ? e.buffer.join("") : e.buffer.length === 1 ? e.buffer.head.data : e.buffer.concat(e.length), e.buffer.clear()) : t = function(n, s, r) {
    var a;
    return n < s.head.data.length ? (a = s.head.data.slice(0, n), s.head.data = s.head.data.slice(n)) : a = n === s.head.data.length ? s.shift() : r ? function(o, c) {
      var l = c.head, h = 1, d = l.data;
      for (o -= d.length; l = l.next; ) {
        var u = l.data, f = o > u.length ? u.length : o;
        if (f === u.length ? d += u : d += u.slice(0, o), (o -= f) === 0) {
          f === u.length ? (++h, l.next ? c.head = l.next : c.head = c.tail = null) : (c.head = l, l.data = u.slice(f));
          break;
        }
        ++h;
      }
      return c.length -= h, d;
    }(n, s) : function(o, c) {
      var l = s0.allocUnsafe(o), h = c.head, d = 1;
      for (h.data.copy(l), o -= h.data.length; h = h.next; ) {
        var u = h.data, f = o > u.length ? u.length : o;
        if (u.copy(l, l.length - o, 0, f), (o -= f) === 0) {
          f === u.length ? (++d, h.next ? c.head = h.next : c.head = c.tail = null) : (c.head = h, h.data = u.slice(f));
          break;
        }
        ++d;
      }
      return c.length -= d, l;
    }(n, s), a;
  }(i, e.buffer, e.decoder), t);
  var t;
}
function R3(i) {
  var e = i._readableState;
  if (e.length > 0)
    throw new Error('"endReadable()" called on non-empty stream');
  e.endEmitted || (e.ended = !0, Yt(kE, e, i));
}
function kE(i, e) {
  i.endEmitted || i.length !== 0 || (i.endEmitted = !0, e.readable = !1, e.emit("end"));
}
function fl(i, e) {
  for (var t = 0, n = i.length; t < n; t++)
    if (i[t] === e)
      return t;
  return -1;
}
function BE() {
}
function VE(i, e, t) {
  this.chunk = i, this.encoding = e, this.callback = t, this.next = null;
}
function X5(i, e) {
  Object.defineProperty(this, "buffer", {
    get: Td(function() {
      return this.getBuffer();
    }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.")
  }), i = i || {}, this.objectMode = !!i.objectMode, e instanceof $t && (this.objectMode = this.objectMode || !!i.writableObjectMode);
  var t = i.highWaterMark, n = this.objectMode ? 16 : 16384;
  this.highWaterMark = t || t === 0 ? t : n, this.highWaterMark = ~~this.highWaterMark, this.needDrain = !1, this.ending = !1, this.ended = !1, this.finished = !1;
  var s = i.decodeStrings === !1;
  this.decodeStrings = !s, this.defaultEncoding = i.defaultEncoding || "utf8", this.length = 0, this.writing = !1, this.corked = 0, this.sync = !0, this.bufferProcessing = !1, this.onwrite = function(r) {
    (function(a, o) {
      var c = a._writableState, l = c.sync, h = c.writecb;
      if (function(u) {
        u.writing = !1, u.writecb = null, u.length -= u.writelen, u.writelen = 0;
      }(c), o)
        (function(u, f, p, _, g) {
          --f.pendingcb, p ? Yt(g, _) : g(_), u._writableState.errorEmitted = !0, u.emit("error", _);
        })(a, c, l, o, h);
      else {
        var d = Dd(c);
        d || c.corked || c.bufferProcessing || !c.bufferedRequest || Pd(a, c), l ? Yt(pl, a, c, d, h) : pl(a, c, d, h);
      }
    })(e, r);
  }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = !1, this.errorEmitted = !1, this.bufferedRequestCount = 0, this.corkedRequestsFree = new Od(this);
}
function lt(i) {
  if (!(this instanceof lt || this instanceof $t))
    return new lt(i);
  this._writableState = new X5(i, this), this.writable = !0, i && (typeof i.write == "function" && (this._write = i.write), typeof i.writev == "function" && (this._writev = i.writev)), ae.call(this);
}
function Y5(i, e, t, n, s, r, a) {
  e.writelen = n, e.writecb = a, e.writing = !0, e.sync = !0, t ? i._writev(s, e.onwrite) : i._write(s, r, e.onwrite), e.sync = !1;
}
function pl(i, e, t, n) {
  t || function(s, r) {
    r.length === 0 && r.needDrain && (r.needDrain = !1, s.emit("drain"));
  }(i, e), e.pendingcb--, n(), Nd(i, e);
}
function Pd(i, e) {
  e.bufferProcessing = !0;
  var t = e.bufferedRequest;
  if (i._writev && t && t.next) {
    var n = e.bufferedRequestCount, s = new Array(n), r = e.corkedRequestsFree;
    r.entry = t;
    for (var a = 0; t; )
      s[a] = t, t = t.next, a += 1;
    Y5(i, e, !0, e.length, s, "", r.finish), e.pendingcb++, e.lastBufferedRequest = null, r.next ? (e.corkedRequestsFree = r.next, r.next = null) : e.corkedRequestsFree = new Od(e);
  } else {
    for (; t; ) {
      var o = t.chunk, c = t.encoding, l = t.callback;
      if (Y5(i, e, !1, e.objectMode ? 1 : o.length, o, c, l), t = t.next, e.writing)
        break;
    }
    t === null && (e.lastBufferedRequest = null);
  }
  e.bufferedRequestCount = 0, e.bufferedRequest = t, e.bufferProcessing = !1;
}
function Dd(i) {
  return i.ending && i.length === 0 && i.bufferedRequest === null && !i.finished && !i.writing;
}
function ml(i, e) {
  e.prefinished || (e.prefinished = !0, i.emit("prefinish"));
}
function Nd(i, e) {
  var t = Dd(e);
  return t && (e.pendingcb === 0 ? (ml(i, e), e.finished = !0, i.emit("finish")) : ml(i, e)), t;
}
function Od(i) {
  var e = this;
  this.next = null, this.entry = null, this.finish = function(t) {
    var n = e.entry;
    for (e.entry = null; n; ) {
      var s = n.callback;
      i.pendingcb--, s(t), n = n.next;
    }
    i.corkedRequestsFree ? i.corkedRequestsFree.next = e : i.corkedRequestsFree = e;
  };
}
Re.prototype.read = function(i) {
  fe("read", i), i = parseInt(i, 10);
  var e = this._readableState, t = i;
  if (i !== 0 && (e.emittedReadable = !1), i === 0 && e.needReadable && (e.length >= e.highWaterMark || e.ended))
    return fe("read: emitReadable", e.length, e.ended), e.length === 0 && e.ended ? R3(this) : Vr(this), null;
  if ((i = hl(i, e)) === 0 && e.ended)
    return e.length === 0 && R3(this), null;
  var n, s = e.needReadable;
  return fe("need readable", s), (e.length === 0 || e.length - i < e.highWaterMark) && fe("length less than watermark", s = !0), e.ended || e.reading ? fe("reading or ended", s = !1) : s && (fe("do read"), e.reading = !0, e.sync = !0, e.length === 0 && (e.needReadable = !0), this._read(e.highWaterMark), e.sync = !1, e.reading || (i = hl(t, e))), (n = i > 0 ? dl(i, e) : null) === null ? (e.needReadable = !0, i = 0) : e.length -= i, e.length === 0 && (e.ended || (e.needReadable = !0), t !== i && e.ended && R3(this)), n !== null && this.emit("data", n), n;
}, Re.prototype._read = function(i) {
  this.emit("error", new Error("not implemented"));
}, Re.prototype.pipe = function(i, e) {
  var t = this, n = this._readableState;
  switch (n.pipesCount) {
    case 0:
      n.pipes = i;
      break;
    case 1:
      n.pipes = [n.pipes, i];
      break;
    default:
      n.pipes.push(i);
  }
  n.pipesCount += 1, fe("pipe count=%d opts=%j", n.pipesCount, e);
  var s = !e || e.end !== !1 ? a : l;
  function r(g) {
    fe("onunpipe"), g === t && l();
  }
  function a() {
    fe("onend"), i.end();
  }
  n.endEmitted ? Yt(s) : t.once("end", s), i.on("unpipe", r);
  var o = function(g) {
    return function() {
      var m = g._readableState;
      fe("pipeOnDrain", m.awaitDrain), m.awaitDrain && m.awaitDrain--, m.awaitDrain === 0 && g.listeners("data").length && (m.flowing = !0, r4(g));
    };
  }(t);
  i.on("drain", o);
  var c = !1;
  function l() {
    fe("cleanup"), i.removeListener("close", f), i.removeListener("finish", p), i.removeListener("drain", o), i.removeListener("error", u), i.removeListener("unpipe", r), t.removeListener("end", a), t.removeListener("end", l), t.removeListener("data", d), c = !0, !n.awaitDrain || i._writableState && !i._writableState.needDrain || o();
  }
  var h = !1;
  function d(g) {
    fe("ondata"), h = !1, i.write(g) !== !1 || h || ((n.pipesCount === 1 && n.pipes === i || n.pipesCount > 1 && fl(n.pipes, i) !== -1) && !c && (fe("false write response, pause", t._readableState.awaitDrain), t._readableState.awaitDrain++, h = !0), t.pause());
  }
  function u(g) {
    var m;
    fe("onerror", g), _(), i.removeListener("error", u), m = "error", i.listeners(m).length === 0 && i.emit("error", g);
  }
  function f() {
    i.removeListener("finish", p), _();
  }
  function p() {
    fe("onfinish"), i.removeListener("close", f), _();
  }
  function _() {
    fe("unpipe"), t.unpipe(i);
  }
  return t.on("data", d), function(g, m, v) {
    if (typeof g.prependListener == "function")
      return g.prependListener(m, v);
    g._events && g._events[m] ? Array.isArray(g._events[m]) ? g._events[m].unshift(v) : g._events[m] = [v, g._events[m]] : g.on(m, v);
  }(i, "error", u), i.once("close", f), i.once("finish", p), i.emit("pipe", t), n.flowing || (fe("pipe resume"), t.resume()), i;
}, Re.prototype.unpipe = function(i) {
  var e = this._readableState;
  if (e.pipesCount === 0)
    return this;
  if (e.pipesCount === 1)
    return i && i !== e.pipes ? this : (i || (i = e.pipes), e.pipes = null, e.pipesCount = 0, e.flowing = !1, i && i.emit("unpipe", this), this);
  if (!i) {
    var t = e.pipes, n = e.pipesCount;
    e.pipes = null, e.pipesCount = 0, e.flowing = !1;
    for (var s = 0; s < n; s++)
      t[s].emit("unpipe", this);
    return this;
  }
  var r = fl(e.pipes, i);
  return r === -1 ? this : (e.pipes.splice(r, 1), e.pipesCount -= 1, e.pipesCount === 1 && (e.pipes = e.pipes[0]), i.emit("unpipe", this), this);
}, Re.prototype.on = function(i, e) {
  var t = ae.prototype.on.call(this, i, e);
  if (i === "data")
    this._readableState.flowing !== !1 && this.resume();
  else if (i === "readable") {
    var n = this._readableState;
    n.endEmitted || n.readableListening || (n.readableListening = n.needReadable = !0, n.emittedReadable = !1, n.reading ? n.length && Vr(this) : Yt(FE, this));
  }
  return t;
}, Re.prototype.addListener = Re.prototype.on, Re.prototype.resume = function() {
  var i = this._readableState;
  return i.flowing || (fe("resume"), i.flowing = !0, function(e, t) {
    t.resumeScheduled || (t.resumeScheduled = !0, Yt(zE, e, t));
  }(this, i)), this;
}, Re.prototype.pause = function() {
  return fe("call pause flowing=%j", this._readableState.flowing), this._readableState.flowing !== !1 && (fe("pause"), this._readableState.flowing = !1, this.emit("pause")), this;
}, Re.prototype.wrap = function(i) {
  var e = this._readableState, t = !1, n = this;
  for (var s in i.on("end", function() {
    if (fe("wrapped end"), e.decoder && !e.ended) {
      var r = e.decoder.end();
      r && r.length && n.push(r);
    }
    n.push(null);
  }), i.on("data", function(r) {
    fe("wrapped data"), e.decoder && (r = e.decoder.write(r)), e.objectMode && r == null || (e.objectMode || r && r.length) && (n.push(r) || (t = !0, i.pause()));
  }), i)
    this[s] === void 0 && typeof i[s] == "function" && (this[s] = function(r) {
      return function() {
        return i[r].apply(i, arguments);
      };
    }(s));
  return function(r, a) {
    for (var o = 0, c = r.length; o < c; o++)
      a(r[o], o);
  }(["error", "close", "destroy", "pause", "resume"], function(r) {
    i.on(r, n.emit.bind(n, r));
  }), n._read = function(r) {
    fe("wrapped _read", r), t && (t = !1, i.resume());
  }, n;
}, Re._fromList = dl, lt.WritableState = X5, X9(lt, ae), X5.prototype.getBuffer = function() {
  for (var i = this.bufferedRequest, e = []; i; )
    e.push(i), i = i.next;
  return e;
}, lt.prototype.pipe = function() {
  this.emit("error", new Error("Cannot pipe, not readable"));
}, lt.prototype.write = function(i, e, t) {
  var n = this._writableState, s = !1;
  return typeof e == "function" && (t = e, e = null), s0.isBuffer(i) ? e = "buffer" : e || (e = n.defaultEncoding), typeof t != "function" && (t = BE), n.ended ? function(r, a) {
    var o = new Error("write after end");
    r.emit("error", o), Yt(a, o);
  }(this, t) : function(r, a, o, c) {
    var l = !0, h = !1;
    return o === null ? h = new TypeError("May not write null values to stream") : s0.isBuffer(o) || typeof o == "string" || o === void 0 || a.objectMode || (h = new TypeError("Invalid non-string/buffer chunk")), h && (r.emit("error", h), Yt(c, h), l = !1), l;
  }(this, n, i, t) && (n.pendingcb++, s = function(r, a, o, c, l) {
    o = function(f, p, _) {
      return f.objectMode || f.decodeStrings === !1 || typeof p != "string" || (p = s0.from(p, _)), p;
    }(a, o, c), s0.isBuffer(o) && (c = "buffer");
    var h = a.objectMode ? 1 : o.length;
    a.length += h;
    var d = a.length < a.highWaterMark;
    if (d || (a.needDrain = !0), a.writing || a.corked) {
      var u = a.lastBufferedRequest;
      a.lastBufferedRequest = new VE(o, c, l), u ? u.next = a.lastBufferedRequest : a.bufferedRequest = a.lastBufferedRequest, a.bufferedRequestCount += 1;
    } else
      Y5(r, a, !1, h, o, c, l);
    return d;
  }(this, n, i, e, t)), s;
}, lt.prototype.cork = function() {
  this._writableState.corked++;
}, lt.prototype.uncork = function() {
  var i = this._writableState;
  i.corked && (i.corked--, i.writing || i.corked || i.finished || i.bufferProcessing || !i.bufferedRequest || Pd(this, i));
}, lt.prototype.setDefaultEncoding = function(i) {
  if (typeof i == "string" && (i = i.toLowerCase()), !([
    "hex",
    "utf8",
    "utf-8",
    "ascii",
    "binary",
    "base64",
    "ucs2",
    "ucs-2",
    "utf16le",
    "utf-16le",
    "raw"
  ].indexOf((i + "").toLowerCase()) > -1))
    throw new TypeError("Unknown encoding: " + i);
  return this._writableState.defaultEncoding = i, this;
}, lt.prototype._write = function(i, e, t) {
  t(new Error("not implemented"));
}, lt.prototype._writev = null, lt.prototype.end = function(i, e, t) {
  var n = this._writableState;
  typeof i == "function" ? (t = i, i = null, e = null) : typeof e == "function" && (t = e, e = null), i != null && this.write(i, e), n.corked && (n.corked = 1, this.uncork()), n.ending || n.finished || function(s, r, a) {
    r.ending = !0, Nd(s, r), a && (r.finished ? Yt(a) : s.once("finish", a)), r.ended = !0, s.writable = !1;
  }(this, n, t);
}, X9($t, Re);
for (var gl = Object.keys(lt.prototype), P3 = 0; P3 < gl.length; P3++) {
  var D3 = gl[P3];
  $t.prototype[D3] || ($t.prototype[D3] = lt.prototype[D3]);
}
function $t(i) {
  if (!(this instanceof $t))
    return new $t(i);
  Re.call(this, i), lt.call(this, i), i && i.readable === !1 && (this.readable = !1), i && i.writable === !1 && (this.writable = !1), this.allowHalfOpen = !0, i && i.allowHalfOpen === !1 && (this.allowHalfOpen = !1), this.once("end", HE);
}
function HE() {
  this.allowHalfOpen || this._writableState.ended || Yt(GE, this);
}
function GE(i) {
  i.end();
}
function WE(i) {
  this.afterTransform = function(e, t) {
    return function(n, s, r) {
      var a = n._transformState;
      a.transforming = !1;
      var o = a.writecb;
      if (!o)
        return n.emit("error", new Error("no writecb in Transform class"));
      a.writechunk = null, a.writecb = null, r != null && n.push(r), o(s);
      var c = n._readableState;
      c.reading = !1, (c.needReadable || c.length < c.highWaterMark) && n._read(c.highWaterMark);
    }(i, e, t);
  }, this.needTransform = !1, this.transforming = !1, this.writecb = null, this.writechunk = null, this.writeencoding = null;
}
function S1(i) {
  if (!(this instanceof S1))
    return new S1(i);
  $t.call(this, i), this._transformState = new WE(this);
  var e = this;
  this._readableState.needReadable = !0, this._readableState.sync = !1, i && (typeof i.transform == "function" && (this._transform = i.transform), typeof i.flush == "function" && (this._flush = i.flush)), this.once("prefinish", function() {
    typeof this._flush == "function" ? this._flush(function(t) {
      _l(e, t);
    }) : _l(e);
  });
}
function _l(i, e) {
  if (e)
    return i.emit("error", e);
  var t = i._writableState, n = i._transformState;
  if (t.length)
    throw new Error("Calling transform done when ws.length != 0");
  if (n.transforming)
    throw new Error("Calling transform done when still transforming");
  return i.push(null);
}
function $8(i) {
  if (!(this instanceof $8))
    return new $8(i);
  S1.call(this, i);
}
function M1() {
  ae.call(this);
}
X9(S1, $t), S1.prototype.push = function(i, e) {
  return this._transformState.needTransform = !1, $t.prototype.push.call(this, i, e);
}, S1.prototype._transform = function(i, e, t) {
  throw new Error("Not implemented");
}, S1.prototype._write = function(i, e, t) {
  var n = this._transformState;
  if (n.writecb = t, n.writechunk = i, n.writeencoding = e, !n.transforming) {
    var s = this._readableState;
    (n.needTransform || s.needReadable || s.length < s.highWaterMark) && this._read(s.highWaterMark);
  }
}, S1.prototype._read = function(i) {
  var e = this._transformState;
  e.writechunk !== null && e.writecb && !e.transforming ? (e.transforming = !0, this._transform(e.writechunk, e.writeencoding, e.afterTransform)) : e.needTransform = !0;
}, X9($8, S1), $8.prototype._transform = function(i, e, t) {
  t(null, i);
}, X9(M1, ae), M1.Readable = Re, M1.Writable = lt, M1.Duplex = $t, M1.Transform = S1, M1.PassThrough = $8, M1.Stream = M1, M1.prototype.pipe = function(i, e) {
  var t = this;
  function n(h) {
    i.writable && i.write(h) === !1 && t.pause && t.pause();
  }
  function s() {
    t.readable && t.resume && t.resume();
  }
  t.on("data", n), i.on("drain", s), i._isStdio || e && e.end === !1 || (t.on("end", a), t.on("close", o));
  var r = !1;
  function a() {
    r || (r = !0, i.end());
  }
  function o() {
    r || (r = !0, typeof i.destroy == "function" && i.destroy());
  }
  function c(h) {
    if (l(), ae.listenerCount(this, "error") === 0)
      throw h;
  }
  function l() {
    t.removeListener("data", n), i.removeListener("drain", s), t.removeListener("end", a), t.removeListener("close", o), t.removeListener("error", c), i.removeListener("error", c), t.removeListener("end", l), t.removeListener("close", l), i.removeListener("close", l);
  }
  return t.on("error", c), i.on("error", c), t.on("end", l), t.on("close", l), i.on("close", l), i.emit("pipe", t), i;
};
var XE = {
  Sax: yd(function(i, e) {
    (function(t) {
      t.parser = function(E, F) {
        return new r(E, F);
      }, t.SAXParser = r, t.SAXStream = o, t.createStream = function(E, F) {
        return new o(E, F);
      }, t.MAX_BUFFER_LENGTH = 65536;
      var n, s = [
        "comment",
        "sgmlDecl",
        "textNode",
        "tagName",
        "doctype",
        "procInstName",
        "procInstBody",
        "entity",
        "attribName",
        "attribValue",
        "cdata",
        "script"
      ];
      function r(E, F) {
        if (!(this instanceof r))
          return new r(E, F);
        (function(R) {
          for (var j = 0, B = s.length; j < B; j++)
            R[s[j]] = "";
        })(this), this.q = this.c = "", this.bufferCheckPosition = t.MAX_BUFFER_LENGTH, this.opt = F || {}, this.opt.lowercase = this.opt.lowercase || this.opt.lowercasetags, this.looseCase = this.opt.lowercase ? "toLowerCase" : "toUpperCase", this.tags = [], this.closed = this.closedRoot = this.sawRoot = !1, this.tag = this.error = null, this.strict = !!E, this.noscript = !(!E && !this.opt.noscript), this.state = x.BEGIN, this.strictEntities = this.opt.strictEntities, this.ENTITIES = this.strictEntities ? Object.create(t.XML_ENTITIES) : Object.create(t.ENTITIES), this.attribList = [], this.opt.xmlns && (this.ns = Object.create(l)), this.trackPosition = this.opt.position !== !1, this.trackPosition && (this.position = this.line = this.column = 0), T(this, "onready");
      }
      t.EVENTS = [
        "text",
        "processinginstruction",
        "sgmldeclaration",
        "doctype",
        "comment",
        "opentagstart",
        "attribute",
        "opentag",
        "closetag",
        "opencdata",
        "cdata",
        "closecdata",
        "error",
        "end",
        "ready",
        "script",
        "opennamespace",
        "closenamespace"
      ], Object.create || (Object.create = function(E) {
        function F() {
        }
        return F.prototype = E, new F();
      }), Object.keys || (Object.keys = function(E) {
        var F = [];
        for (var R in E)
          E.hasOwnProperty(R) && F.push(R);
        return F;
      }), r.prototype = {
        end: function() {
          O(this);
        },
        write: function(E) {
          if (this.error)
            throw this.error;
          if (this.closed)
            return z(
              this,
              "Cannot write after close. Assign an onready handler."
            );
          if (E === null)
            return O(this);
          typeof E == "object" && (E = E.toString());
          for (var F = 0, R = ""; R = u0(E, F++), this.c = R, R; )
            switch (this.trackPosition && (this.position++, R === `
` ? (this.line++, this.column = 0) : this.column++), this.state) {
              case x.BEGIN:
                if (this.state = x.BEGIN_WHITESPACE, R === "\uFEFF")
                  continue;
                x0(this, R);
                continue;
              case x.BEGIN_WHITESPACE:
                x0(this, R);
                continue;
              case x.TEXT:
                if (this.sawRoot && !this.closedRoot) {
                  for (var j = F - 1; R && R !== "<" && R !== "&"; )
                    (R = u0(E, F++)) && this.trackPosition && (this.position++, R === `
` ? (this.line++, this.column = 0) : this.column++);
                  this.textNode += E.substring(j, F - 1);
                }
                R !== "<" || this.sawRoot && this.closedRoot && !this.strict ? (p(R) || this.sawRoot && !this.closedRoot || U(this, "Text data outside of root node."), R === "&" ? this.state = x.TEXT_ENTITY : this.textNode += R) : (this.state = x.OPEN_WAKA, this.startTagPosition = this.position);
                continue;
              case x.SCRIPT:
                R === "<" ? this.state = x.SCRIPT_ENDING : this.script += R;
                continue;
              case x.SCRIPT_ENDING:
                R === "/" ? this.state = x.CLOSE_TAG : (this.script += "<" + R, this.state = x.SCRIPT);
                continue;
              case x.OPEN_WAKA:
                if (R === "!")
                  this.state = x.SGML_DECL, this.sgmlDecl = "";
                else if (!p(R))
                  if (m(h, R))
                    this.state = x.OPEN_TAG, this.tagName = R;
                  else if (R === "/")
                    this.state = x.CLOSE_TAG, this.tagName = "";
                  else if (R === "?")
                    this.state = x.PROC_INST, this.procInstName = this.procInstBody = "";
                  else {
                    if (U(this, "Unencoded <"), this.startTagPosition + 1 < this.position) {
                      var B = this.position - this.startTagPosition;
                      R = new Array(B).join(" ") + R;
                    }
                    this.textNode += "<" + R, this.state = x.TEXT;
                  }
                continue;
              case x.SGML_DECL:
                (this.sgmlDecl + R).toUpperCase() === "[CDATA[" ? (M(this, "onopencdata"), this.state = x.CDATA, this.sgmlDecl = "", this.cdata = "") : this.sgmlDecl + R === "--" ? (this.state = x.COMMENT, this.comment = "", this.sgmlDecl = "") : (this.sgmlDecl + R).toUpperCase() === "DOCTYPE" ? (this.state = x.DOCTYPE, (this.doctype || this.sawRoot) && U(this, "Inappropriately located doctype declaration"), this.doctype = "", this.sgmlDecl = "") : R === ">" ? (M(this, "onsgmldeclaration", this.sgmlDecl), this.sgmlDecl = "", this.state = x.TEXT) : _(R) ? (this.state = x.SGML_DECL_QUOTED, this.sgmlDecl += R) : this.sgmlDecl += R;
                continue;
              case x.SGML_DECL_QUOTED:
                R === this.q && (this.state = x.SGML_DECL, this.q = ""), this.sgmlDecl += R;
                continue;
              case x.DOCTYPE:
                R === ">" ? (this.state = x.TEXT, M(this, "ondoctype", this.doctype), this.doctype = !0) : (this.doctype += R, R === "[" ? this.state = x.DOCTYPE_DTD : _(R) && (this.state = x.DOCTYPE_QUOTED, this.q = R));
                continue;
              case x.DOCTYPE_QUOTED:
                this.doctype += R, R === this.q && (this.q = "", this.state = x.DOCTYPE);
                continue;
              case x.DOCTYPE_DTD:
                this.doctype += R, R === "]" ? this.state = x.DOCTYPE : _(R) && (this.state = x.DOCTYPE_DTD_QUOTED, this.q = R);
                continue;
              case x.DOCTYPE_DTD_QUOTED:
                this.doctype += R, R === this.q && (this.state = x.DOCTYPE_DTD, this.q = "");
                continue;
              case x.COMMENT:
                R === "-" ? this.state = x.COMMENT_ENDING : this.comment += R;
                continue;
              case x.COMMENT_ENDING:
                R === "-" ? (this.state = x.COMMENT_ENDED, this.comment = D(this.opt, this.comment), this.comment && M(this, "oncomment", this.comment), this.comment = "") : (this.comment += "-" + R, this.state = x.COMMENT);
                continue;
              case x.COMMENT_ENDED:
                R !== ">" ? (U(this, "Malformed comment"), this.comment += "--" + R, this.state = x.COMMENT) : this.state = x.TEXT;
                continue;
              case x.CDATA:
                R === "]" ? this.state = x.CDATA_ENDING : this.cdata += R;
                continue;
              case x.CDATA_ENDING:
                R === "]" ? this.state = x.CDATA_ENDING_2 : (this.cdata += "]" + R, this.state = x.CDATA);
                continue;
              case x.CDATA_ENDING_2:
                R === ">" ? (this.cdata && M(this, "oncdata", this.cdata), M(this, "onclosecdata"), this.cdata = "", this.state = x.TEXT) : R === "]" ? this.cdata += "]" : (this.cdata += "]]" + R, this.state = x.CDATA);
                continue;
              case x.PROC_INST:
                R === "?" ? this.state = x.PROC_INST_ENDING : p(R) ? this.state = x.PROC_INST_BODY : this.procInstName += R;
                continue;
              case x.PROC_INST_BODY:
                if (!this.procInstBody && p(R))
                  continue;
                R === "?" ? this.state = x.PROC_INST_ENDING : this.procInstBody += R;
                continue;
              case x.PROC_INST_ENDING:
                R === ">" ? (M(this, "onprocessinginstruction", {
                  name: this.procInstName,
                  body: this.procInstBody
                }), this.procInstName = this.procInstBody = "", this.state = x.TEXT) : (this.procInstBody += "?" + R, this.state = x.PROC_INST_BODY);
                continue;
              case x.OPEN_TAG:
                m(d, R) ? this.tagName += R : (V(this), R === ">" ? X(this) : R === "/" ? this.state = x.OPEN_TAG_SLASH : (p(R) || U(this, "Invalid character in tag name"), this.state = x.ATTRIB));
                continue;
              case x.OPEN_TAG_SLASH:
                R === ">" ? (X(this, !0), i0(this)) : (U(
                  this,
                  "Forward-slash in opening tag not followed by >"
                ), this.state = x.ATTRIB);
                continue;
              case x.ATTRIB:
                if (p(R))
                  continue;
                R === ">" ? X(this) : R === "/" ? this.state = x.OPEN_TAG_SLASH : m(h, R) ? (this.attribName = R, this.attribValue = "", this.state = x.ATTRIB_NAME) : U(this, "Invalid attribute name");
                continue;
              case x.ATTRIB_NAME:
                R === "=" ? this.state = x.ATTRIB_VALUE : R === ">" ? (U(this, "Attribute without value"), this.attribValue = this.attribName, W(this), X(this)) : p(R) ? this.state = x.ATTRIB_NAME_SAW_WHITE : m(d, R) ? this.attribName += R : U(this, "Invalid attribute name");
                continue;
              case x.ATTRIB_NAME_SAW_WHITE:
                if (R === "=")
                  this.state = x.ATTRIB_VALUE;
                else {
                  if (p(R))
                    continue;
                  U(this, "Attribute without value"), this.tag.attributes[this.attribName] = "", this.attribValue = "", M(this, "onattribute", {
                    name: this.attribName,
                    value: ""
                  }), this.attribName = "", R === ">" ? X(this) : m(h, R) ? (this.attribName = R, this.state = x.ATTRIB_NAME) : (U(this, "Invalid attribute name"), this.state = x.ATTRIB);
                }
                continue;
              case x.ATTRIB_VALUE:
                if (p(R))
                  continue;
                _(R) ? (this.q = R, this.state = x.ATTRIB_VALUE_QUOTED) : (U(this, "Unquoted attribute value"), this.state = x.ATTRIB_VALUE_UNQUOTED, this.attribValue = R);
                continue;
              case x.ATTRIB_VALUE_QUOTED:
                if (R !== this.q) {
                  R === "&" ? this.state = x.ATTRIB_VALUE_ENTITY_Q : this.attribValue += R;
                  continue;
                }
                W(this), this.q = "", this.state = x.ATTRIB_VALUE_CLOSED;
                continue;
              case x.ATTRIB_VALUE_CLOSED:
                p(R) ? this.state = x.ATTRIB : R === ">" ? X(this) : R === "/" ? this.state = x.OPEN_TAG_SLASH : m(h, R) ? (U(this, "No whitespace between attributes"), this.attribName = R, this.attribValue = "", this.state = x.ATTRIB_NAME) : U(this, "Invalid attribute name");
                continue;
              case x.ATTRIB_VALUE_UNQUOTED:
                if (!g(R)) {
                  R === "&" ? this.state = x.ATTRIB_VALUE_ENTITY_U : this.attribValue += R;
                  continue;
                }
                W(this), R === ">" ? X(this) : this.state = x.ATTRIB;
                continue;
              case x.CLOSE_TAG:
                if (this.tagName)
                  R === ">" ? i0(this) : m(d, R) ? this.tagName += R : this.script ? (this.script += "</" + this.tagName, this.tagName = "", this.state = x.SCRIPT) : (p(R) || U(this, "Invalid tagname in closing tag"), this.state = x.CLOSE_TAG_SAW_WHITE);
                else {
                  if (p(R))
                    continue;
                  v(h, R) ? this.script ? (this.script += "</" + R, this.state = x.SCRIPT) : U(this, "Invalid tagname in closing tag.") : this.tagName = R;
                }
                continue;
              case x.CLOSE_TAG_SAW_WHITE:
                if (p(R))
                  continue;
                R === ">" ? i0(this) : U(this, "Invalid characters in closing tag");
                continue;
              case x.TEXT_ENTITY:
              case x.ATTRIB_VALUE_ENTITY_Q:
              case x.ATTRIB_VALUE_ENTITY_U:
                var m0, b0;
                switch (this.state) {
                  case x.TEXT_ENTITY:
                    m0 = x.TEXT, b0 = "textNode";
                    break;
                  case x.ATTRIB_VALUE_ENTITY_Q:
                    m0 = x.ATTRIB_VALUE_QUOTED, b0 = "attribValue";
                    break;
                  case x.ATTRIB_VALUE_ENTITY_U:
                    m0 = x.ATTRIB_VALUE_UNQUOTED, b0 = "attribValue";
                }
                R === ";" ? (this[b0] += a0(this), this.entity = "", this.state = m0) : m(this.entity.length ? f : u, R) ? this.entity += R : (U(this, "Invalid character in entity name"), this[b0] += "&" + this.entity + R, this.entity = "", this.state = m0);
                continue;
              default:
                throw new Error(this, "Unknown state: " + this.state);
            }
          return this.position >= this.bufferCheckPosition && function(e0) {
            for (var M0 = Math.max(t.MAX_BUFFER_LENGTH, 10), r0 = 0, Z = 0, n0 = s.length; Z < n0; Z++) {
              var S0 = e0[s[Z]].length;
              if (S0 > M0)
                switch (s[Z]) {
                  case "textNode":
                    A(e0);
                    break;
                  case "cdata":
                    M(e0, "oncdata", e0.cdata), e0.cdata = "";
                    break;
                  case "script":
                    M(e0, "onscript", e0.script), e0.script = "";
                    break;
                  default:
                    z(e0, "Max buffer length exceeded: " + s[Z]);
                }
              r0 = Math.max(r0, S0);
            }
            var p0 = t.MAX_BUFFER_LENGTH - r0;
            e0.bufferCheckPosition = p0 + e0.position;
          }(this), this;
        },
        /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
        resume: function() {
          return this.error = null, this;
        },
        close: function() {
          return this.write(null);
        },
        flush: function() {
          var E;
          A(E = this), E.cdata !== "" && (M(E, "oncdata", E.cdata), E.cdata = ""), E.script !== "" && (M(E, "onscript", E.script), E.script = "");
        }
      };
      try {
        n = M1.Stream;
      } catch {
        n = function() {
        };
      }
      var a = t.EVENTS.filter(function(E) {
        return E !== "error" && E !== "end";
      });
      function o(E, F) {
        if (!(this instanceof o))
          return new o(E, F);
        n.apply(this), this._parser = new r(E, F), this.writable = !0, this.readable = !0;
        var R = this;
        this._parser.onend = function() {
          R.emit("end");
        }, this._parser.onerror = function(j) {
          R.emit("error", j), R._parser.error = null;
        }, this._decoder = null, a.forEach(function(j) {
          Object.defineProperty(R, "on" + j, {
            get: function() {
              return R._parser["on" + j];
            },
            set: function(B) {
              if (!B)
                return R.removeAllListeners(j), R._parser["on" + j] = B, B;
              R.on(j, B);
            },
            enumerable: !0,
            configurable: !1
          });
        });
      }
      o.prototype = Object.create(n.prototype, { constructor: { value: o } }), o.prototype.write = function(E) {
        if (typeof s0.isBuffer == "function" && s0.isBuffer(E)) {
          if (!this._decoder) {
            var F = Id.StringDecoder;
            this._decoder = new F("utf8");
          }
          E = this._decoder.write(E);
        }
        return this._parser.write(E.toString()), this.emit("data", E), !0;
      }, o.prototype.end = function(E) {
        return E && E.length && this.write(E), this._parser.end(), !0;
      }, o.prototype.on = function(E, F) {
        var R = this;
        return R._parser["on" + E] || a.indexOf(E) === -1 || (R._parser["on" + E] = function() {
          var j = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);
          j.splice(0, 0, E), R.emit.apply(R, j);
        }), n.prototype.on.call(R, E, F);
      };
      var c = "http://www.w3.org/XML/1998/namespace", l = { xml: c, xmlns: "http://www.w3.org/2000/xmlns/" }, h = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/, d = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/, u = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/, f = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
      function p(E) {
        return E === " " || E === `
` || E === "\r" || E === "	";
      }
      function _(E) {
        return E === '"' || E === "'";
      }
      function g(E) {
        return E === ">" || p(E);
      }
      function m(E, F) {
        return E.test(F);
      }
      function v(E, F) {
        return !m(E, F);
      }
      var y, b, w, x = 0;
      for (var S in t.STATE = {
        BEGIN: x++,
        BEGIN_WHITESPACE: x++,
        TEXT: x++,
        TEXT_ENTITY: x++,
        OPEN_WAKA: x++,
        SGML_DECL: x++,
        SGML_DECL_QUOTED: x++,
        DOCTYPE: x++,
        DOCTYPE_QUOTED: x++,
        DOCTYPE_DTD: x++,
        DOCTYPE_DTD_QUOTED: x++,
        COMMENT_STARTING: x++,
        COMMENT: x++,
        COMMENT_ENDING: x++,
        COMMENT_ENDED: x++,
        CDATA: x++,
        CDATA_ENDING: x++,
        CDATA_ENDING_2: x++,
        PROC_INST: x++,
        PROC_INST_BODY: x++,
        PROC_INST_ENDING: x++,
        OPEN_TAG: x++,
        OPEN_TAG_SLASH: x++,
        ATTRIB: x++,
        ATTRIB_NAME: x++,
        ATTRIB_NAME_SAW_WHITE: x++,
        ATTRIB_VALUE: x++,
        ATTRIB_VALUE_QUOTED: x++,
        ATTRIB_VALUE_CLOSED: x++,
        ATTRIB_VALUE_UNQUOTED: x++,
        ATTRIB_VALUE_ENTITY_Q: x++,
        ATTRIB_VALUE_ENTITY_U: x++,
        CLOSE_TAG: x++,
        CLOSE_TAG_SAW_WHITE: x++,
        SCRIPT: x++,
        SCRIPT_ENDING: x++
      }, t.XML_ENTITIES = { amp: "&", gt: ">", lt: "<", quot: '"', apos: "'" }, t.ENTITIES = {
        amp: "&",
        gt: ">",
        lt: "<",
        quot: '"',
        apos: "'",
        AElig: 198,
        Aacute: 193,
        Acirc: 194,
        Agrave: 192,
        Aring: 197,
        Atilde: 195,
        Auml: 196,
        Ccedil: 199,
        ETH: 208,
        Eacute: 201,
        Ecirc: 202,
        Egrave: 200,
        Euml: 203,
        Iacute: 205,
        Icirc: 206,
        Igrave: 204,
        Iuml: 207,
        Ntilde: 209,
        Oacute: 211,
        Ocirc: 212,
        Ograve: 210,
        Oslash: 216,
        Otilde: 213,
        Ouml: 214,
        THORN: 222,
        Uacute: 218,
        Ucirc: 219,
        Ugrave: 217,
        Uuml: 220,
        Yacute: 221,
        aacute: 225,
        acirc: 226,
        aelig: 230,
        agrave: 224,
        aring: 229,
        atilde: 227,
        auml: 228,
        ccedil: 231,
        eacute: 233,
        ecirc: 234,
        egrave: 232,
        eth: 240,
        euml: 235,
        iacute: 237,
        icirc: 238,
        igrave: 236,
        iuml: 239,
        ntilde: 241,
        oacute: 243,
        ocirc: 244,
        ograve: 242,
        oslash: 248,
        otilde: 245,
        ouml: 246,
        szlig: 223,
        thorn: 254,
        uacute: 250,
        ucirc: 251,
        ugrave: 249,
        uuml: 252,
        yacute: 253,
        yuml: 255,
        copy: 169,
        reg: 174,
        nbsp: 160,
        iexcl: 161,
        cent: 162,
        pound: 163,
        curren: 164,
        yen: 165,
        brvbar: 166,
        sect: 167,
        uml: 168,
        ordf: 170,
        laquo: 171,
        not: 172,
        shy: 173,
        macr: 175,
        deg: 176,
        plusmn: 177,
        sup1: 185,
        sup2: 178,
        sup3: 179,
        acute: 180,
        micro: 181,
        para: 182,
        middot: 183,
        cedil: 184,
        ordm: 186,
        raquo: 187,
        frac14: 188,
        frac12: 189,
        frac34: 190,
        iquest: 191,
        times: 215,
        divide: 247,
        OElig: 338,
        oelig: 339,
        Scaron: 352,
        scaron: 353,
        Yuml: 376,
        fnof: 402,
        circ: 710,
        tilde: 732,
        Alpha: 913,
        Beta: 914,
        Gamma: 915,
        Delta: 916,
        Epsilon: 917,
        Zeta: 918,
        Eta: 919,
        Theta: 920,
        Iota: 921,
        Kappa: 922,
        Lambda: 923,
        Mu: 924,
        Nu: 925,
        Xi: 926,
        Omicron: 927,
        Pi: 928,
        Rho: 929,
        Sigma: 931,
        Tau: 932,
        Upsilon: 933,
        Phi: 934,
        Chi: 935,
        Psi: 936,
        Omega: 937,
        alpha: 945,
        beta: 946,
        gamma: 947,
        delta: 948,
        epsilon: 949,
        zeta: 950,
        eta: 951,
        theta: 952,
        iota: 953,
        kappa: 954,
        lambda: 955,
        mu: 956,
        nu: 957,
        xi: 958,
        omicron: 959,
        pi: 960,
        rho: 961,
        sigmaf: 962,
        sigma: 963,
        tau: 964,
        upsilon: 965,
        phi: 966,
        chi: 967,
        psi: 968,
        omega: 969,
        thetasym: 977,
        upsih: 978,
        piv: 982,
        ensp: 8194,
        emsp: 8195,
        thinsp: 8201,
        zwnj: 8204,
        zwj: 8205,
        lrm: 8206,
        rlm: 8207,
        ndash: 8211,
        mdash: 8212,
        lsquo: 8216,
        rsquo: 8217,
        sbquo: 8218,
        ldquo: 8220,
        rdquo: 8221,
        bdquo: 8222,
        dagger: 8224,
        Dagger: 8225,
        bull: 8226,
        hellip: 8230,
        permil: 8240,
        prime: 8242,
        Prime: 8243,
        lsaquo: 8249,
        rsaquo: 8250,
        oline: 8254,
        frasl: 8260,
        euro: 8364,
        image: 8465,
        weierp: 8472,
        real: 8476,
        trade: 8482,
        alefsym: 8501,
        larr: 8592,
        uarr: 8593,
        rarr: 8594,
        darr: 8595,
        harr: 8596,
        crarr: 8629,
        lArr: 8656,
        uArr: 8657,
        rArr: 8658,
        dArr: 8659,
        hArr: 8660,
        forall: 8704,
        part: 8706,
        exist: 8707,
        empty: 8709,
        nabla: 8711,
        isin: 8712,
        notin: 8713,
        ni: 8715,
        prod: 8719,
        sum: 8721,
        minus: 8722,
        lowast: 8727,
        radic: 8730,
        prop: 8733,
        infin: 8734,
        ang: 8736,
        and: 8743,
        or: 8744,
        cap: 8745,
        cup: 8746,
        int: 8747,
        there4: 8756,
        sim: 8764,
        cong: 8773,
        asymp: 8776,
        ne: 8800,
        equiv: 8801,
        le: 8804,
        ge: 8805,
        sub: 8834,
        sup: 8835,
        nsub: 8836,
        sube: 8838,
        supe: 8839,
        oplus: 8853,
        otimes: 8855,
        perp: 8869,
        sdot: 8901,
        lceil: 8968,
        rceil: 8969,
        lfloor: 8970,
        rfloor: 8971,
        lang: 9001,
        rang: 9002,
        loz: 9674,
        spades: 9824,
        clubs: 9827,
        hearts: 9829,
        diams: 9830
      }, Object.keys(t.ENTITIES).forEach(function(E) {
        var F = t.ENTITIES[E], R = typeof F == "number" ? String.fromCharCode(F) : F;
        t.ENTITIES[E] = R;
      }), t.STATE)
        t.STATE[t.STATE[S]] = S;
      function T(E, F, R) {
        E[F] && E[F](R);
      }
      function M(E, F, R) {
        E.textNode && A(E), T(E, F, R);
      }
      function A(E) {
        E.textNode = D(E.opt, E.textNode), E.textNode && T(E, "ontext", E.textNode), E.textNode = "";
      }
      function D(E, F) {
        return E.trim && (F = F.trim()), E.normalize && (F = F.replace(/\s+/g, " ")), F;
      }
      function z(E, F) {
        return A(E), E.trackPosition && (F += `
Line: ` + E.line + `
Column: ` + E.column + `
Char: ` + E.c), F = new Error(F), E.error = F, T(E, "onerror", F), E;
      }
      function O(E) {
        return E.sawRoot && !E.closedRoot && U(E, "Unclosed root tag"), E.state !== x.BEGIN && E.state !== x.BEGIN_WHITESPACE && E.state !== x.TEXT && z(E, "Unexpected end"), A(E), E.c = "", E.closed = !0, T(E, "onend"), r.call(E, E.strict, E.opt), E;
      }
      function U(E, F) {
        if (typeof E != "object" || !(E instanceof r))
          throw new Error("bad call to strictFail");
        E.strict && z(E, F);
      }
      function V(E) {
        E.strict || (E.tagName = E.tagName[E.looseCase]());
        var F = E.tags[E.tags.length - 1] || E, R = E.tag = { name: E.tagName, attributes: {} };
        E.opt.xmlns && (R.ns = F.ns), E.attribList.length = 0, M(E, "onopentagstart", R);
      }
      function Y(E, F) {
        var R = E.indexOf(":") < 0 ? ["", E] : E.split(":"), j = R[0], B = R[1];
        return F && E === "xmlns" && (j = "xmlns", B = ""), { prefix: j, local: B };
      }
      function W(E) {
        if (E.strict || (E.attribName = E.attribName[E.looseCase]()), E.attribList.indexOf(E.attribName) !== -1 || E.tag.attributes.hasOwnProperty(E.attribName))
          E.attribName = E.attribValue = "";
        else {
          if (E.opt.xmlns) {
            var F = Y(E.attribName, !0), R = F.prefix, j = F.local;
            if (R === "xmlns")
              if (j === "xml" && E.attribValue !== c)
                U(
                  E,
                  "xml: prefix must be bound to " + c + `
Actual: ` + E.attribValue
                );
              else if (j === "xmlns" && E.attribValue !== "http://www.w3.org/2000/xmlns/")
                U(
                  E,
                  `xmlns: prefix must be bound to http://www.w3.org/2000/xmlns/
Actual: ` + E.attribValue
                );
              else {
                var B = E.tag, m0 = E.tags[E.tags.length - 1] || E;
                B.ns === m0.ns && (B.ns = Object.create(m0.ns)), B.ns[j] = E.attribValue;
              }
            E.attribList.push([E.attribName, E.attribValue]);
          } else
            E.tag.attributes[E.attribName] = E.attribValue, M(E, "onattribute", { name: E.attribName, value: E.attribValue });
          E.attribName = E.attribValue = "";
        }
      }
      function X(E, F) {
        if (E.opt.xmlns) {
          var R = E.tag, j = Y(E.tagName);
          R.prefix = j.prefix, R.local = j.local, R.uri = R.ns[j.prefix] || "", R.prefix && !R.uri && (U(E, "Unbound namespace prefix: " + JSON.stringify(E.tagName)), R.uri = j.prefix);
          var B = E.tags[E.tags.length - 1] || E;
          R.ns && B.ns !== R.ns && Object.keys(R.ns).forEach(function(D0) {
            M(E, "onopennamespace", { prefix: D0, uri: R.ns[D0] });
          });
          for (var m0 = 0, b0 = E.attribList.length; m0 < b0; m0++) {
            var e0 = E.attribList[m0], M0 = e0[0], r0 = e0[1], Z = Y(M0, !0), n0 = Z.prefix, S0 = Z.local, p0 = n0 === "" ? "" : R.ns[n0] || "", P0 = { name: M0, value: r0, prefix: n0, local: S0, uri: p0 };
            n0 && n0 !== "xmlns" && !p0 && (U(E, "Unbound namespace prefix: " + JSON.stringify(n0)), P0.uri = n0), E.tag.attributes[M0] = P0, M(E, "onattribute", P0);
          }
          E.attribList.length = 0;
        }
        E.tag.isSelfClosing = !!F, E.sawRoot = !0, E.tags.push(E.tag), M(E, "onopentag", E.tag), F || (E.noscript || E.tagName.toLowerCase() !== "script" ? E.state = x.TEXT : E.state = x.SCRIPT, E.tag = null, E.tagName = ""), E.attribName = E.attribValue = "", E.attribList.length = 0;
      }
      function i0(E) {
        if (!E.tagName)
          return U(E, "Weird empty close tag."), E.textNode += "</>", void (E.state = x.TEXT);
        if (E.script) {
          if (E.tagName !== "script")
            return E.script += "</" + E.tagName + ">", E.tagName = "", void (E.state = x.SCRIPT);
          M(E, "onscript", E.script), E.script = "";
        }
        var F = E.tags.length, R = E.tagName;
        E.strict || (R = R[E.looseCase]());
        for (var j = R; F-- && E.tags[F].name !== j; )
          U(E, "Unexpected close tag");
        if (F < 0)
          return U(E, "Unmatched closing tag: " + E.tagName), E.textNode += "</" + E.tagName + ">", void (E.state = x.TEXT);
        E.tagName = R;
        for (var B = E.tags.length; B-- > F; ) {
          var m0 = E.tag = E.tags.pop();
          E.tagName = E.tag.name, M(E, "onclosetag", E.tagName);
          var b0 = {};
          for (var e0 in m0.ns)
            b0[e0] = m0.ns[e0];
          var M0 = E.tags[E.tags.length - 1] || E;
          E.opt.xmlns && m0.ns !== M0.ns && Object.keys(m0.ns).forEach(function(r0) {
            var Z = m0.ns[r0];
            M(E, "onclosenamespace", { prefix: r0, uri: Z });
          });
        }
        F === 0 && (E.closedRoot = !0), E.tagName = E.attribValue = E.attribName = "", E.attribList.length = 0, E.state = x.TEXT;
      }
      function a0(E) {
        var F, R = E.entity, j = R.toLowerCase(), B = "";
        return E.ENTITIES[R] ? E.ENTITIES[R] : E.ENTITIES[j] ? E.ENTITIES[j] : ((R = j).charAt(0) === "#" && (R.charAt(1) === "x" ? (R = R.slice(2), B = (F = parseInt(R, 16)).toString(16)) : (R = R.slice(1), B = (F = parseInt(R, 10)).toString(10))), R = R.replace(/^0+/, ""), isNaN(F) || B.toLowerCase() !== R ? (U(E, "Invalid character entity"), "&" + E.entity + ";") : String.fromCodePoint(F));
      }
      function x0(E, F) {
        F === "<" ? (E.state = x.OPEN_WAKA, E.startTagPosition = E.position) : p(F) || (U(E, "Non-whitespace before first tag."), E.textNode = F, E.state = x.TEXT);
      }
      function u0(E, F) {
        var R = "";
        return F < E.length && (R = E.charAt(F)), R;
      }
      x = t.STATE, String.fromCodePoint || (y = String.fromCharCode, b = Math.floor, w = function() {
        var E, F, R = 16384, j = [], B = -1, m0 = arguments.length;
        if (!m0)
          return "";
        for (var b0 = ""; ++B < m0; ) {
          var e0 = Number(arguments[B]);
          if (!isFinite(e0) || e0 < 0 || e0 > 1114111 || b(e0) !== e0)
            throw RangeError("Invalid code point: " + e0);
          e0 <= 65535 ? j.push(e0) : (E = 55296 + ((e0 -= 65536) >> 10), F = e0 % 1024 + 56320, j.push(E, F)), (B + 1 === m0 || j.length > R) && (b0 += y.apply(null, j), j.length = 0);
        }
        return b0;
      }, Object.defineProperty ? Object.defineProperty(String, "fromCodePoint", {
        value: w,
        configurable: !0,
        writable: !0
      }) : String.fromCodePoint = w);
    })(e);
  })
};
const { Sax: YE } = XE;
class Ud {
  constructor() {
    I(this, "attributes", null);
    I(this, "metadata", {});
    I(this, "labelTable", []);
    I(this, "dataArrays");
    I(this, "getPointsDataArray", () => {
      var e;
      for (e = 0; e < this.dataArrays.length; e += 1)
        if (this.dataArrays[e].isPointSet())
          return this.dataArrays[e];
      return null;
    });
    I(this, "getTrianglesDataArray", () => {
      var e;
      for (e = 0; e < this.dataArrays.length; e += 1)
        if (this.dataArrays[e].isTriangles())
          return this.dataArrays[e];
      return null;
    });
    I(this, "getNormalsDataArray", () => {
      var e;
      for (e = 0; e < this.dataArrays.length; e += 1)
        if (this.dataArrays[e].isNormals())
          return this.dataArrays[e];
      return null;
    });
    I(this, "getColorsDataArray", () => {
      var e;
      for (e = 0; e < this.dataArrays.length; e += 1)
        if (this.dataArrays[e].isColors())
          return this.dataArrays[e];
      return null;
    });
    I(this, "getNumPoints", () => {
      var e;
      for (e = 0; e < this.dataArrays.length; e += 1)
        if (this.dataArrays[e].isPointSet())
          return this.dataArrays[e].getNumElements();
      return 0;
    });
    I(this, "getNumTriangles", () => {
      var e;
      for (e = 0; e < this.dataArrays.length; e += 1)
        if (this.dataArrays[e].isTriangles())
          return this.dataArrays[e].getNumElements();
      return 0;
    });
    I(this, "isThisFormat", (e) => e.indexOf(".gii") !== -1);
    I(this, "parse", (e) => {
      let t = YE.parser(!0), n = null, s = null, r = null, a = null, o = null, c = null, l = "", h = null, d = !1, u = !1, f = !1, p = !1, _ = !1, g = !1, m = !1;
      return t.onopentag = (v) => {
        v.name === "GIFTI" ? (r = n = this, n.attributes = v.attributes) : v.name === "MetaData" || v.name === "MD" || (v.name === "Name" ? d = !0 : v.name === "Value" ? u = !0 : v.name === "LabelTable" || (v.name === "Label" ? (m = !0, h = new uM(v.attributes)) : v.name === "DataArray" ? (r = s = new aE(), n.dataArrays.push(s), s.attributes = v.attributes) : v.name === "CoordinateSystemTransformMatrix" ? (c = new hM(), s.transforms.push(c)) : v.name === "DataSpace" ? f = !0 : v.name === "TransformedSpace" ? p = !0 : v.name === "MatrixData" ? _ = !0 : v.name === "Data" && (g = !0)));
      }, t.ontext = t.oncdata = (v) => {
        (d || u || f || p || _ || g || m) && (l += v);
      }, t.onclosetag = function(v) {
        v === "GIFTI" || v === "MetaData" || (v === "MD" ? r && (r.metadata[a] = o) : v === "Name" ? (d = !1, a = l, l = "") : v === "Value" ? (u = !1, o = l, l = "") : v === "LabelTable" || (v === "Label" ? (h.label = l.trim(), n.labelTable[h.key] = h, l = "") : v === "DataArray" || v === "CoordinateSystemTransformMatrix" || (v === "DataSpace" ? (f = !1, c.dataSpace = l, l = "") : v === "TransformedSpace" ? (p = !1, c.transformedSpace = l, l = "") : v === "MatrixData" ? (_ = !1, c.matrixData = l, l = "") : v === "Data" && (g = !1, s.data = l, l = ""))));
      }, t.onerror = function(v) {
      }, t.write(e).close(), n;
    });
    this.dataArrays = [];
  }
}
class ZE {
  constructor(e) {
    I(this, "props");
    I(this, "handle", (e, t, n) => {
      const { data: s, options: r } = e, a = this.parseModel(s, r);
      return {
        data: s,
        options: r,
        modelData: a
      };
    });
    /**
     * 专置数组
     * @param data
     * @param size
     */
    I(this, "readerBuffer", (e, t) => {
      const n = e.length / t, s = [];
      for (let r = 0; r < n; r++)
        for (let a = 0; a < t; a++)
          s.push(
            e[r + a * n]
          );
      return s;
    });
    this.props = e;
  }
  // getDefaultMaterial = (): THREE.Material => {
  // 	// const material = new THREE.MeshPhongMaterial({ color: 0xFFFFFF, ambient: 0xFFFFFF, specular: 0x101010, shininess: 150, vertexColors: THREE.VertexColors });
  // 	const material = new THREE.MeshPhongMaterial({
  // 		color: 0xffffff,
  // 		// @ts-ignore
  // 		// ambient: 0xffffff,
  // 		// color: 0xaaaaaa,
  // 		specular: 0x101010,
  // 		shininess: 2,
  // 		transparent: false,
  // 		side: THREE.DoubleSide,
  // 		// opacity: 1,
  // 		// @ts-ignore
  // 		vertexColors: true
  // 	})
  // 	return material
  // }
  parseModel(e, t) {
    const n = new Kn({ ...t, type: oe.GIFTIINTENSITY }), s = new Ud().parse(e), r = s.getNumPoints(), a = s.getNumTriangles(), o = s.getNormalsDataArray();
    if (a > 0 && r > 0) {
      const c = s.getPointsDataArray(), l = s.getTrianglesDataArray();
      let h = l.getData(), d = c.getData();
      if (c.isColumnIndexOrder() && (d = this.readerBuffer(d, 3)), l.isColumnIndexOrder() && (h = this.readerBuffer(h, 3)), o != null) {
        let u = o.getData();
        o.isColumnIndexOrder() && (u = this.readerBuffer(u, 3)), n.normals = u;
      }
      n.vertices = d, n.indices = h;
    }
    return n;
  }
}
var Fd = /* @__PURE__ */ ((i) => (i.GIFTI = "giftiHandler", i.GIFTIINTENSITY = "giftiIntensity", i.NODE = "node", i.CONTOUR = "contour", i.CREATEMODEL = "createModel", i.APPLYCOLOR = "applyColor", i.VOLUME = "volume", i.OBJ = "obj", i.TRK = "trk", i))(Fd || {});
const oe = Fd;
class qE {
  // intensityDataHandler: IntensityDataHandler
  constructor() {
    I(this, "values");
    I(this, "min");
    I(this, "max");
    I(this, "colors");
    I(this, "imageRange");
    I(this, "colorMap");
    I(this, "alpha");
    I(this, "name");
  }
}
class Ar {
  constructor(e, t, n, s) {
    I(this, "posMax");
    I(this, "posMin");
    I(this, "negMin");
    I(this, "negMax");
    I(this, "displayMin", 0);
    I(this, "displayMax", 0);
    I(this, "originData", {});
    this.posMax = e, this.posMin = t, this.negMax = s, this.negMin = n, this.originData = {
      posMax: e,
      posMin: t,
      negMin: n,
      negMax: s
    };
  }
}
function $E(i) {
  return i > 0 ? i + 0.5 | 0 : i - 0.5 | 0;
}
const $1 = 255;
class zd {
  constructor(e, t) {
    I(this, "allColorMaps", new Array());
    I(this, "lut");
    I(this, "LUTarrayG", new Array(256));
    I(this, "LUTarrayR", new Array(256));
    I(this, "LUTarrayB", new Array(256));
    I(this, "negLUTarrayG", new Array(256));
    I(this, "negLUTarrayR", new Array(256));
    I(this, "negLUTarrayB", new Array(256));
    I(this, "posLUTarrayG", new Array(256));
    I(this, "posLUTarrayR", new Array(256));
    I(this, "posLUTarrayB", new Array(256));
    I(this, "maxLUT", 0);
    I(this, "minLUT", 0);
    I(this, "imageRange");
    I(this, "lutData", null);
    I(this, "negLut", null);
    I(this, "posLut", null);
    I(this, "knotMin", null);
    I(this, "knotMax", null);
    I(this, "posMax", 0);
    I(this, "posMin", 0);
    I(this, "negMax", 0);
    I(this, "negMin", 0);
    I(this, "handlerList");
    I(this, "caulateLUT", (e, t, n, s) => {
      if (t != 0 || e != 0 || n != 0 || s != 0) {
        if (n == 0 && s == 0) {
          this.negLut = this.lutData;
          const { LUTarrayR: r, LUTarrayG: a, LUTarrayB: o } = this.getLUTByAllColor(e, t, this.lutData);
          this.negLUTarrayB = o, this.negLUTarrayG = a, this.negLUTarrayR = r, this.posLut = [];
        } else if (e == 0 && t == 0) {
          this.posLut = this.lutData;
          const { LUTarrayR: r, LUTarrayG: a, LUTarrayB: o } = this.getLUTByAllColor(n, s, this.lutData);
          this.posLUTarrayB = o, this.posLUTarrayG = a, this.posLUTarrayR = r, this.negLut = [];
        } else if (this.lutData != null) {
          const r = $E(this.lutData.length / 2), a = this.lutData.slice(0, r);
          this.negLut = a;
          const o = this.lutData.slice(r, this.lutData.length);
          this.posLut = o;
          let c = this.getLUTByAllColor(e, t, a);
          this.negLUTarrayB = c.LUTarrayB, this.negLUTarrayG = c.LUTarrayG, this.negLUTarrayR = c.LUTarrayR;
          let l = this.getLUTByAllColor(n, s, o);
          this.posLUTarrayB = l.LUTarrayB, this.posLUTarrayG = l.LUTarrayG, this.posLUTarrayR = l.LUTarrayR;
        }
      } else
        this.negLut = [], this.posLut = [];
    });
    /*** Static Methods ***/
    I(this, "updatePosImageRange", (e, t) => {
      this.imageRange.posMax = t, this.imageRange.posMin = e, this.caulateLUT(this.imageRange.negMin, this.imageRange.negMax, e, t);
    });
    I(this, "updateNegImageRanage", (e, t) => {
      this.imageRange.negMin = e, this.imageRange.negMax = t, this.caulateLUT(e, t, this.imageRange.posMin, this.imageRange.posMax);
    });
    I(this, "getLUTByAllColor", (e, t, n) => {
      let s, r, a;
      const o = [], c = [], l = [], h = t, d = e, u = [], f = n[0], p = n[n.length - 1];
      if (s = h - d, n != null && f != null && p != null) {
        for (r = 0; r < n.length; r += 1)
          u[r] = n[r][0] * s + d;
        for (r = 0; r < n.length; r += 1) {
          const _ = s / n.length * r;
          if (_ <= d)
            o[r] = f[1][0] * $1, c[r] = f[1][1] * $1, l[r] = f[1][2] * $1;
          else if (_ > h)
            o[r] = p[1][0] * $1, c[r] = p[1][1] * $1, l[r] = p[1][2] * $1;
          else
            for (a = 0; a < n.length - 1; a += 1)
              _ > u[a] && _ <= u[a + 1] && (o[r] = n[a][1][0] * $1, c[r] = n[a][1][1] * $1, l[r] = n[a][1][2] * $1);
        }
      }
      return {
        LUTarrayR: o,
        LUTarrayG: c,
        LUTarrayB: l
      };
    });
    // lookupRed = (index: number) => {
    // 	if (index > 0) {
    // 		return this.posLUTarrayR[index] & 0xff;
    // 	} else {
    // 		index = index - this.imageRange.displayMin
    // 		return this.negLUTarrayR[index] & 0xff;
    // 	}
    // 	return 0;
    // };
    // lookupGreen = (index: number) => {
    // 	if (index > 0) {
    // 		index = index - this.imageRange.displayMin
    // 		return this.posLUTarrayG[index] & 0xff;
    // 	} else {
    // 		index = index - this.imageRange.displayMin
    // 		return this.negLUTarrayG[index] & 0xff;
    // 	}
    // 	return 0;
    // };
    // lookupBlue = (index: number) => {
    // 	/*jslint bitwise: true */
    // 	if ((index) > 0) {
    // 		index = index - this.imageRange.displayMin
    // 		return this.posLUTarrayB[index] & 0xff;
    // 	} else {
    // 		index = index - this.imageRange.displayMin
    // 		return this.negLUTarrayB[index] & 0xff;
    // 	}
    // 	return 0;
    // };
    I(this, "getColorValueByVoxelValue", (e, t) => {
      const n = { r: 0, g: 0, b: 0, t: 1 };
      return this.handlerList.reduce((a, o, c) => o(a), { value: e, rgb: n, voxelValue: e, isOverlay: t }).rgb;
    });
    I(this, "getColorValueByVoxelIndex", (e, t) => this.lut[e - 1] ? { r: this.lut[e - 1][1][0], g: this.lut[e - 1][1][1], b: this.lut[e - 1][1][2], t: 1 } : {
      r: 0,
      g: 0,
      b: 0,
      t: 1
    });
    /**
     * 将强度值转化为colorMap的角标
     */
    I(this, "filterVoxelValue", ({ value: e, rgb: t, voxelValue: n, isOverlay: s }) => {
      var h;
      const { negMax: r, negMin: a, posMax: o, posMin: c } = this.imageRange;
      let l = 0;
      if (n > 0 || n == 0) {
        const d = o, u = c;
        return this.posLut != null && this.posLut.length > 0 ? (n <= u ? (t.t = 0, e = u) : n > d && (e = d), l = (e - u) / (d - u) * (this.posLut.length - 1), l = Math.round(l)) : t.t = 0, { value: l, rgb: t, voxelValue: n, isOverlay: s };
      } else {
        const d = r, u = a;
        return this.negLut != null && this.negLut.length > 0 ? (n < u || d == u ? e = d : n > d && (t.t = 0, e = u), l = (e - u) / (d - u) * (((h = this.negLut) == null ? void 0 : h.length) - 1), l = Math.round(l)) : t.t = 0, { value: l, rgb: t, voxelValue: n, isOverlay: s };
      }
    });
    I(this, "addColor", ({ value: e, rgb: t, voxelValue: n, isOverlay: s }) => {
      if (n > 0 || n == 0) {
        const r = this.posLut;
        r && r[e] && (t.r = r[e][1][0], t.g = r[e][1][1], t.b = r[e][1][2]);
      } else {
        const r = this.negLut;
        r && r[e] && (t.r = r[e][1][0], t.g = r[e][1][1], t.b = r[e][1][2]);
      }
      return { value: e, rgb: t, voxelValue: n, isOverlay: s };
    });
    this.lut = e, this.lutData = this.lut, this.knotMin = this.lutData[0], this.knotMax = this.lutData[this.lutData.length - 1], this.imageRange = t, this.maxLUT = t && t.posMax || 0, this.minLUT = t && t.negMin || 0, this.caulateLUT(t.negMin, t.negMax, t.posMin, t.posMax), this.handlerList = new Array(), this.handlerList.push(this.filterVoxelValue), this.handlerList.push(this.addColor);
  }
}
function y6(i) {
  let e, t, n;
  const s = i.length;
  e = +Number.MAX_VALUE, t = -Number.MAX_VALUE;
  const r = { neg: [], pos: [] };
  for (n = 0; n < s; n++)
    i[n] < 0 ? r.neg.push(i[n]) : r.pos.push(i[n]), e = Math.min(e, i[n]), t = Math.max(t, i[n]);
  let a = [], o = [], c = 0, l = 0, h = 0, d = 0;
  r.neg.length > 0 && (a = r.neg.sort((f, p) => f - p), l = a[0], c = a[a.length - 1]), r.pos.length > 0 && (o = r.pos.sort((f, p) => f - p), d = o[0], h = o[o.length - 1]);
  const u = new Ar(h, d, l, c);
  return u.displayMax = t, u.displayMin = e, u;
}
function jE(i, e, t) {
  const { x: n, y: s } = i, { x: r, y: a } = e, o = Math.abs(n - r), c = Math.abs(s - a);
  let l = null, h = null;
  return o > c ? (n - r > t - 1 ? l = "X-" : r - n > t - 1 ? l = "X+" : l = "=", h = o) : (s - a > t - 1 ? l = "Y-" : a - s > t - 1 ? l = "Y+" : l = "=", h = c), {
    type: l,
    abs: h
  };
}
class JE {
  constructor(e) {
    I(this, "props");
    I(this, "handle", (e, t, n) => {
      const { data: s, options: r, modelData: a } = e;
      if (a != null) {
        const o = this.parseIntensity(s);
        a.intensityValues = o.values, a.colorMap = o.colorMap, a.imageRange = o.imageRange;
      }
      return {
        data: s,
        options: r,
        modelData: a
      };
    });
    this.props = e;
  }
  parseIntensity(e) {
    const t = new qE(), n = new Ud().parse(e), s = n.dataArrays[0].getData(), r = y6(s);
    t.imageRange = r, t.values = s;
    let a = "";
    return Object.keys(n.labelTable).forEach(function(o) {
      const c = n.labelTable[o];
      a += c.key + " ", a += c.r + " ", a += c.g + " ", a += c.b + " ", a += c.a + `
`;
    }), a.length > 0 && (t.colors = a, t.colorMap = this.transformColor(a)), t;
  }
  transformColor(e) {
    const t = e.trim().split(/\n/), n = [];
    let s, r, a = 0;
    for (let o = 0; o < t.length; o++) {
      if (s = t[o].trim().split(/\s+/).slice(0, 5), r = s.length, r < 3)
        continue;
      r > 4 && (a = parseInt(s[0], 10), r = 4, s = s.slice(1, 5));
      const c = [];
      for (let l = 0; l < r; l++)
        c[l] = parseFloat(s[l]);
      r < 4 && (c[a + 3] = 1), n[a] = [Number(n.length / t.length).toFixed(3), c], a += 1;
    }
    return n;
  }
}
class KE {
  constructor(e) {
    I(this, "originMin");
    I(this, "originMax");
    I(this, "min");
    I(this, "max");
    this.originMax = e.max, this.originMin = e.min, this.min = e.min, this.max = e.max;
  }
}
class QE {
  constructor(e) {
    I(this, "props");
    I(this, "handle", (e, t, n) => {
      const { data: s, options: r } = e, { NodeCoord: a = [], NodeSize: o = [], NodeColor: c = [], EdgeSize: l = [], EdgeColor: h = [] } = s, d = new Kn({ name: r.name, type: oe.NODE });
      d.options = r;
      const { edgeColorMap: u, renderLabel: f } = r, p = new G0();
      this.createViewModel(
        {
          data: a,
          nodeSizeRender: (m, v) => this.getNodeSizeRender(m, { index: v, NodeSize: o, options: r }),
          nodeColorRender: (m, v) => this.getNodeColorRender(m, { index: v, NodeColor: c, options: r }),
          nodeNameRender: r.nodeNameRender || this.getNodeNameRender,
          options: r
        },
        p
      );
      const _ = this.getEdgeColorImageRange(l, h, c.length), g = new zd(u, _);
      return this.createEdgeViewerModel(
        {
          nodeCoorData: a,
          data: l,
          numNode: a.length,
          edgeColorRender: (m, v) => {
            const y = h[m][v], { r: b, g: w, b: x, t: S } = g.getColorValueByVoxelValue(y, !1);
            return new f0(b, w, x);
          }
        },
        p
      ), d.data = s, d.sizeRange = this.getNodeSizeRange(o), d.edgeImageRange = _, d.mesh = p, {
        data: s,
        options: r,
        modelData: d
      };
    });
    /**
     * 创建球模型
     * @param nodeInfo
     * @returns
     */
    I(this, "createViewModel", (e, t) => {
      const { data: n, nodeSizeRender: s, nodeColorRender: r, options: a, nodeNameRender: o } = e, { renderLabel: c } = a;
      return n.forEach((l, h) => {
        const d = l[0], u = l[1], f = l[2], p = s(l, h), _ = r(l, h), g = new hn(1, 32, 32), m = new d6({
          color: _
        }), v = new y0(g, m);
        if (v.name = "node", v.geometry.scale(p, p, p), v.renderData = l, v.renderSize = p, v.name = o(l, h), v.position.set(d, u, f), c) {
          const y = document.createElement("div");
          y.className = "label", y.textContent = c(l, h, e), y.style.marginTop = "-1em", y.style.color = "#FFF";
          const b = new Z2(y);
          b.position.set(d, u, f), t.add(b);
        }
        t.add(v);
      }), t;
    });
    /**
     * 创建棍模型
     * @param edgeInfo
     */
    I(this, "createEdgeViewerModel", (e, t) => {
      const { data: n, numNode: s, nodeCoorData: r, edgeColorRender: a } = e;
      for (let o = 0; o < s; o++)
        for (let c = o; c < s; c++)
          if (n[o][c] != 0) {
            const h = r[o], d = r[c], u = a(o, c), f = this.getLineModel(d, h, u);
            f.name = "edge", t.add(f);
          }
    });
    I(this, "getEdgeColorImageRange", (e, t, n) => {
      const s = [];
      for (let a = 0; a < n; a++)
        for (let o = 0; o < n; o++)
          e[a][o] && s.push(t[a][o]);
      return y6(s);
    });
    I(this, "getLineModel", (e, t, n) => {
      const s = [];
      s.push(e[0], e[1], e[2]), s.push(t[0], t[1], t[2]);
      const r = new Ae({
        color: n,
        linewidth: 100
      }), a = new F0();
      return a.setAttribute("position", new v0(s, 3)), new W0(a, r);
    });
    I(this, "getNodeSizeRender", (e, t) => {
      const { NodeSize: n = [], index: s } = t;
      return n[s] || 1;
    });
    I(this, "getEdgeColorRender", (e, t, n) => {
      let s = new f0(1, 1, 1).getHex();
      try {
        const r = n[e][t];
        s = new f0(r, r, r);
      } catch {
      }
      return s;
    });
    I(this, "getNodeColorRender", (e, t) => {
      const { NodeColor: n, options: s, index: r } = t, a = n[r], { colorLab: o, colorMap: c } = s, l = o[a], h = c[l - 1];
      return h ? new f0(h[0], h[1], h[2]) : new f0(1, 1, 1);
    });
    I(this, "getNodeNameRender", (e) => "node");
    I(this, "getNodeSizeRange", (e) => {
      let t = Number.MAX_VALUE, n = Number.MIN_VALUE;
      return e.map((s) => {
        s > n && (n = s), s < t && (t = s);
      }), new KE({ min: t, max: n });
    });
    this.props = e;
  }
}
class eT {
  constructor() {
    I(this, "handle", (e, t, n) => {
      const { data: s, options: r, modelData: a } = t, { name: o, colorMap: c } = r, { vert: l, conn: h, scalar: d } = s, { vertices: u, indices: f, intensityValues: p } = this.transform({ vert: l, conn: h, scalar: d }), _ = new Kn({ name: r.name, type: oe.CONTOUR });
      _.options = r, _.vertices = u, _.indices = f, _.intensityValues = p, _.imageRange = y6(d), _.colorMap = c;
      const g = this.createViewModel(_);
      return _.mesh = g, {
        data: s,
        options: r,
        modelData: _
      };
    });
    I(this, "createViewModel", (e) => {
      const { indices: t, vertices: n } = e, s = new Ae({
        // color: '#ff0000',
        vertexColors: !0
      }), r = new F0(), a = new ee(new Float32Array(n), 3);
      return r.setAttribute("position", a), new xt(r, s);
    });
    I(this, "getImageRangeByScalar", (e) => {
      const t = {
        neg: [],
        pos: []
      };
      if (e.map((n) => {
        n < 0 ? t.neg.push(n) : t.pos.push(n);
      }), t.neg = t.neg.sort(), t.pos = t.pos.sort(), t.neg.length > 0 && t.pos.length > 0)
        return new Ar(
          t.pos[t.pos.length - 1],
          t.pos[0],
          t.neg[0],
          t.neg[t.neg.length - 1]
        );
      if (t.neg.length > 0)
        return new Ar(
          null,
          null,
          t.neg[0],
          t.neg[t.neg.length - 1]
        );
      if (t.pos.length > 0)
        return new Ar(
          t.pos[t.pos.length - 1],
          t.pos[0],
          null,
          null
        );
    });
  }
  transform({ vert: e, conn: t, scalar: n }) {
    const s = [], r = [], a = [];
    let o = 0;
    return t.forEach((c, l) => {
      const h = c[0], d = c[1];
      if (e[h] && e[d]) {
        const [u, f, p] = e[h], [_, g, m] = e[d];
        s.push(u, f, p), s.push(_, g, m), r.push(l), r.push(o), r.push(o + 1), o = o + 2, a.push(n[h]), a.push(n[d]);
      }
    }), {
      vertices: s,
      indices: r,
      intensityValues: a
    };
  }
  // const modelData: ModelData = this.parseModel(data)
  // const mesh: THREE.Mesh = this.createViewModel(modelData, options)
  // modelData.mesh = mesh
  // this.applyColor(modelData, modelData.colors, mesh)
  // view.viewerModel.add(mesh)
  // return {
  // 	data, options, modelData,
  // }
}
class tT {
  constructor() {
    I(this, "handle", (e, t, n) => {
      const { data: s, options: r, modelData: a } = e;
      a.options = r;
      const o = this.createViewModel(a);
      return a.mesh = o, this.applyColor(a, a.colors, o), {
        data: s,
        options: r,
        modelData: a
      };
    });
    I(this, "createViewModel", (e) => {
      let t = new F0();
      const { options: n } = e, { name: s, normal: r } = n;
      let { material: a } = n;
      const { indices: o, vertices: c, normals: l } = e, h = new ee(new Float32Array(c), 3), d = new ee(new Uint32Array(o), 1);
      if (t.setAttribute("position", h), t.setIndex(d), r != null || l != null) {
        const f = new Float32Array(r || l);
        t.setAttribute("normal", new ee(f, 3)), t = cM.mergeVertices(t), t.normalizeNormals();
      } else
        t.computeVertexNormals();
      a == null && (a = this.getDefaultMaterial(n));
      const u = new y0(t, a);
      return u.material = a, (s || e.name) && (u.name = s || e.name, u.userData.model_name = s || e.name), u.userData = {
        ...n
      }, u.userData.original_data = {
        vertices: c,
        indices: o,
        normals: r || l,
        loadIntensityModel: !1
      }, u;
    });
    I(this, "getDefaultMaterial", (e) => {
      const { opacity: t, color: n } = e;
      let s = !0, r = 1;
      return t != null && t != 1 && (r = t, s = !0), new u6({
        color: 16777215,
        // @ts-ignore
        // ambient: 0xffffff,
        // color: 0xaaaaaa,
        specular: 1052688,
        shininess: 2,
        transparent: s,
        side: Nt,
        opacity: r,
        // @ts-ignore
        vertexColors: !0
      });
    });
    /**
     * 将modelData中的强度文件指定伪彩到mesh中
     * @param modelData
     * @param color
     * @param mesh
     */
    I(this, "applyColor", (e, t, n) => {
      const { indices: s, vertices: r } = e, a = new ee(
        new Float32Array(this.getDefaultColor(t, s)),
        4
      );
      n.geometry.setAttribute("color", a);
    });
    I(this, "getDefaultColor", (e, t) => {
      let n, s, r;
      const a = e[0], o = e[1], c = e[2], l = e[3], h = [];
      for (n = 0, r = t.length; n < r; n++)
        s = t[n] * 4, h[s] = a, h[s + 1] = o, h[s + 2] = c, h[s + 3] = l;
      return h;
    });
  }
}
class nT {
  constructor() {
    I(this, "handle", (e, t, n) => {
      const { data: s, options: r, modelData: a } = t, o = e.modelData;
      return o != null && (r.colorMap || o.colorMap ? o.colorMap = r.colorMap || o.colorMap : o.colorMap = [[0, [...o.colors]]], this.applyColorToMesh(o, 1)), {
        data: s,
        options: r,
        modelData: o
      };
    });
    I(this, "applyColorToMesh", (e, t) => {
      const { mesh: n, indices: s, vertices: r, colorMap: a, intensityValues: o, imageRange: c, intensityHeightIndex: l } = e, h = new zd(a, c), d = e.vertices.length / 3, u = d * e.intensityIndex;
      let f, p, _, g, m = [];
      const v = e.props.intensityRenderType || "voxel";
      for (f = 0, p = d; f < p; f++) {
        _ = o[f + u], g = f * 4;
        let x = null;
        v == "voxel" ? x = h.getColorValueByVoxelValue(_, !1) : x = h.getColorValueByVoxelIndex(_, !1);
        let { r: S, g: T, b: M, t: A } = x;
        m[g] = S, m[g + 1] = T, m[g + 2] = M, m[g + 3] = A;
      }
      let y, b;
      y = n.geometry, b = y.attributes.color;
      const w = [];
      for (e.normalList == null && (e.normalList = y.attributes.normal), f = 0, p = s.length; f < p; f++)
        g = s[f] * 4, l.indexOf(s[f]) != -1 ? (w[g] = m[g] * 3, w[g + 1] = m[g + 1] * 3, w[g + 2] = m[g + 2] * 3, w[g + 3] = m[g + 3] * t + 3) : (w[g] = m[g], w[g + 1] = m[g + 1], w[g + 2] = m[g + 2], w[g + 3] = m[g + 3] * t);
      y.setAttribute("color", new v0(w, 4)), y.colorsNeedUpdate = !0, console.log(y), b && (b.needsUpdate = !0);
    });
  }
}
const iT = /^[og]\s*(.+)?/, sT = /^mtllib /, rT = /^usemtl /, aT = /^usemap /, vl = /\s+/, yl = new C(), N3 = new C(), xl = new C(), bl = new C(), Ht = new C(), rr = new f0();
function oT() {
  const i = {
    objects: [],
    object: {},
    vertices: [],
    normals: [],
    colors: [],
    uvs: [],
    materials: {},
    materialLibraries: [],
    startObject: function(e, t) {
      if (this.object && this.object.fromDeclaration === !1) {
        this.object.name = e, this.object.fromDeclaration = t !== !1;
        return;
      }
      const n = this.object && typeof this.object.currentMaterial == "function" ? this.object.currentMaterial() : void 0;
      if (this.object && typeof this.object._finalize == "function" && this.object._finalize(!0), this.object = {
        name: e || "",
        fromDeclaration: t !== !1,
        geometry: {
          vertices: [],
          normals: [],
          colors: [],
          uvs: [],
          hasUVIndices: !1
        },
        materials: [],
        smooth: !0,
        startMaterial: function(s, r) {
          const a = this._finalize(!1);
          a && (a.inherited || a.groupCount <= 0) && this.materials.splice(a.index, 1);
          const o = {
            index: this.materials.length,
            name: s || "",
            mtllib: Array.isArray(r) && r.length > 0 ? r[r.length - 1] : "",
            smooth: a !== void 0 ? a.smooth : this.smooth,
            groupStart: a !== void 0 ? a.groupEnd : 0,
            groupEnd: -1,
            groupCount: -1,
            inherited: !1,
            clone: function(c) {
              const l = {
                index: typeof c == "number" ? c : this.index,
                name: this.name,
                mtllib: this.mtllib,
                smooth: this.smooth,
                groupStart: 0,
                groupEnd: -1,
                groupCount: -1,
                inherited: !1
              };
              return l.clone = this.clone.bind(l), l;
            }
          };
          return this.materials.push(o), o;
        },
        currentMaterial: function() {
          if (this.materials.length > 0)
            return this.materials[this.materials.length - 1];
        },
        _finalize: function(s) {
          const r = this.currentMaterial();
          if (r && r.groupEnd === -1 && (r.groupEnd = this.geometry.vertices.length / 3, r.groupCount = r.groupEnd - r.groupStart, r.inherited = !1), s && this.materials.length > 1)
            for (let a = this.materials.length - 1; a >= 0; a--)
              this.materials[a].groupCount <= 0 && this.materials.splice(a, 1);
          return s && this.materials.length === 0 && this.materials.push({
            name: "",
            smooth: this.smooth
          }), r;
        }
      }, n && n.name && typeof n.clone == "function") {
        const s = n.clone(0);
        s.inherited = !0, this.object.materials.push(s);
      }
      this.objects.push(this.object);
    },
    finalize: function() {
      this.object && typeof this.object._finalize == "function" && this.object._finalize(!0);
    },
    parseVertexIndex: function(e, t) {
      const n = parseInt(e, 10);
      return (n >= 0 ? n - 1 : n + t / 3) * 3;
    },
    parseNormalIndex: function(e, t) {
      const n = parseInt(e, 10);
      return (n >= 0 ? n - 1 : n + t / 3) * 3;
    },
    parseUVIndex: function(e, t) {
      const n = parseInt(e, 10);
      return (n >= 0 ? n - 1 : n + t / 2) * 2;
    },
    addVertex: function(e, t, n) {
      const s = this.vertices, r = this.object.geometry.vertices;
      r.push(s[e + 0], s[e + 1], s[e + 2]), r.push(s[t + 0], s[t + 1], s[t + 2]), r.push(s[n + 0], s[n + 1], s[n + 2]);
    },
    addVertexPoint: function(e) {
      const t = this.vertices;
      this.object.geometry.vertices.push(t[e + 0], t[e + 1], t[e + 2]);
    },
    addVertexLine: function(e) {
      const t = this.vertices;
      this.object.geometry.vertices.push(t[e + 0], t[e + 1], t[e + 2]);
    },
    addNormal: function(e, t, n) {
      const s = this.normals, r = this.object.geometry.normals;
      r.push(s[e + 0], s[e + 1], s[e + 2]), r.push(s[t + 0], s[t + 1], s[t + 2]), r.push(s[n + 0], s[n + 1], s[n + 2]);
    },
    addFaceNormal: function(e, t, n) {
      const s = this.vertices, r = this.object.geometry.normals;
      yl.fromArray(s, e), N3.fromArray(s, t), xl.fromArray(s, n), Ht.subVectors(xl, N3), bl.subVectors(yl, N3), Ht.cross(bl), Ht.normalize(), r.push(Ht.x, Ht.y, Ht.z), r.push(Ht.x, Ht.y, Ht.z), r.push(Ht.x, Ht.y, Ht.z);
    },
    addColor: function(e, t, n) {
      const s = this.colors, r = this.object.geometry.colors;
      s[e] !== void 0 && r.push(s[e + 0], s[e + 1], s[e + 2]), s[t] !== void 0 && r.push(s[t + 0], s[t + 1], s[t + 2]), s[n] !== void 0 && r.push(s[n + 0], s[n + 1], s[n + 2]);
    },
    addUV: function(e, t, n) {
      const s = this.uvs, r = this.object.geometry.uvs;
      r.push(s[e + 0], s[e + 1]), r.push(s[t + 0], s[t + 1]), r.push(s[n + 0], s[n + 1]);
    },
    addDefaultUV: function() {
      const e = this.object.geometry.uvs;
      e.push(0, 0), e.push(0, 0), e.push(0, 0);
    },
    addUVLine: function(e) {
      const t = this.uvs;
      this.object.geometry.uvs.push(t[e + 0], t[e + 1]);
    },
    addFace: function(e, t, n, s, r, a, o, c, l) {
      const h = this.vertices.length;
      let d = this.parseVertexIndex(e, h), u = this.parseVertexIndex(t, h), f = this.parseVertexIndex(n, h);
      if (this.addVertex(d, u, f), this.addColor(d, u, f), o !== void 0 && o !== "") {
        const p = this.normals.length;
        d = this.parseNormalIndex(o, p), u = this.parseNormalIndex(c, p), f = this.parseNormalIndex(l, p), this.addNormal(d, u, f);
      } else
        this.addFaceNormal(d, u, f);
      if (s !== void 0 && s !== "") {
        const p = this.uvs.length;
        d = this.parseUVIndex(s, p), u = this.parseUVIndex(r, p), f = this.parseUVIndex(a, p), this.addUV(d, u, f), this.object.geometry.hasUVIndices = !0;
      } else
        this.addDefaultUV();
    },
    addPointGeometry: function(e) {
      this.object.geometry.type = "Points";
      const t = this.vertices.length;
      for (let n = 0, s = e.length; n < s; n++) {
        const r = this.parseVertexIndex(e[n], t);
        this.addVertexPoint(r), this.addColor(r);
      }
    },
    addLineGeometry: function(e, t) {
      this.object.geometry.type = "Line";
      const n = this.vertices.length, s = this.uvs.length;
      for (let r = 0, a = e.length; r < a; r++)
        this.addVertexLine(this.parseVertexIndex(e[r], n));
      for (let r = 0, a = t.length; r < a; r++)
        this.addUVLine(this.parseUVIndex(t[r], s));
    }
  };
  return i.startObject("", !1), i;
}
class lT extends Ct {
  constructor(e) {
    super(e), this.materials = null;
  }
  load(e, t, n, s) {
    const r = this, a = new U1(this.manager);
    a.setPath(this.path), a.setRequestHeader(this.requestHeader), a.setWithCredentials(this.withCredentials), a.load(e, function(o) {
      try {
        t(r.parse(o));
      } catch (c) {
        s ? s(c) : console.error(c), r.manager.itemError(e);
      }
    }, n, s);
  }
  setMaterials(e) {
    return this.materials = e, this;
  }
  parse(e) {
    const t = new oT();
    e.indexOf(`\r
`) !== -1 && (e = e.replace(/\r\n/g, `
`)), e.indexOf(`\\
`) !== -1 && (e = e.replace(/\\\n/g, ""));
    const n = e.split(`
`);
    let s = [];
    for (let o = 0, c = n.length; o < c; o++) {
      const l = n[o].trimStart();
      if (l.length === 0)
        continue;
      const h = l.charAt(0);
      if (h !== "#")
        if (h === "v") {
          const d = l.split(vl);
          switch (d[0]) {
            case "v":
              t.vertices.push(
                parseFloat(d[1]),
                parseFloat(d[2]),
                parseFloat(d[3])
              ), d.length >= 7 ? (rr.setRGB(
                parseFloat(d[4]),
                parseFloat(d[5]),
                parseFloat(d[6])
              ).convertSRGBToLinear(), t.colors.push(rr.r, rr.g, rr.b)) : t.colors.push(void 0, void 0, void 0);
              break;
            case "vn":
              t.normals.push(
                parseFloat(d[1]),
                parseFloat(d[2]),
                parseFloat(d[3])
              );
              break;
            case "vt":
              t.uvs.push(
                parseFloat(d[1]),
                parseFloat(d[2])
              );
              break;
          }
        } else if (h === "f") {
          const u = l.slice(1).trim().split(vl), f = [];
          for (let _ = 0, g = u.length; _ < g; _++) {
            const m = u[_];
            if (m.length > 0) {
              const v = m.split("/");
              f.push(v);
            }
          }
          const p = f[0];
          for (let _ = 1, g = f.length - 1; _ < g; _++) {
            const m = f[_], v = f[_ + 1];
            t.addFace(
              p[0],
              m[0],
              v[0],
              p[1],
              m[1],
              v[1],
              p[2],
              m[2],
              v[2]
            );
          }
        } else if (h === "l") {
          const d = l.substring(1).trim().split(" ");
          let u = [];
          const f = [];
          if (l.indexOf("/") === -1)
            u = d;
          else
            for (let p = 0, _ = d.length; p < _; p++) {
              const g = d[p].split("/");
              g[0] !== "" && u.push(g[0]), g[1] !== "" && f.push(g[1]);
            }
          t.addLineGeometry(u, f);
        } else if (h === "p") {
          const u = l.slice(1).trim().split(" ");
          t.addPointGeometry(u);
        } else if ((s = iT.exec(l)) !== null) {
          const d = (" " + s[0].slice(1).trim()).slice(1);
          t.startObject(d);
        } else if (rT.test(l))
          t.object.startMaterial(l.substring(7).trim(), t.materialLibraries);
        else if (sT.test(l))
          t.materialLibraries.push(l.substring(7).trim());
        else if (aT.test(l))
          console.warn('THREE.OBJLoader: Rendering identifier "usemap" not supported. Textures must be defined in MTL files.');
        else if (h === "s") {
          if (s = l.split(" "), s.length > 1) {
            const u = s[1].trim().toLowerCase();
            t.object.smooth = u !== "0" && u !== "off";
          } else
            t.object.smooth = !0;
          const d = t.object.currentMaterial();
          d && (d.smooth = t.object.smooth);
        } else {
          if (l === "\0")
            continue;
          console.warn('THREE.OBJLoader: Unexpected line: "' + l + '"');
        }
    }
    t.finalize();
    const r = new Mi();
    if (r.materialLibraries = [].concat(t.materialLibraries), !(t.objects.length === 1 && t.objects[0].geometry.vertices.length === 0) === !0)
      for (let o = 0, c = t.objects.length; o < c; o++) {
        const l = t.objects[o], h = l.geometry, d = l.materials, u = h.type === "Line", f = h.type === "Points";
        let p = !1;
        if (h.vertices.length === 0)
          continue;
        const _ = new F0();
        _.setAttribute("position", new v0(h.vertices, 3)), h.normals.length > 0 && _.setAttribute("normal", new v0(h.normals, 3)), h.colors.length > 0 && (p = !0, _.setAttribute("color", new v0(h.colors, 3))), h.hasUVIndices === !0 && _.setAttribute("uv", new v0(h.uvs, 2));
        const g = [];
        for (let v = 0, y = d.length; v < y; v++) {
          const b = d[v], w = b.name + "_" + b.smooth + "_" + p;
          let x = t.materials[w];
          if (this.materials !== null) {
            if (x = this.materials.create(b.name), u && x && !(x instanceof Ae)) {
              const S = new Ae();
              et.prototype.copy.call(S, x), S.color.copy(x.color), x = S;
            } else if (f && x && !(x instanceof Si)) {
              const S = new Si({ size: 10, sizeAttenuation: !1 });
              et.prototype.copy.call(S, x), S.color.copy(x.color), S.map = x.map, x = S;
            }
          }
          x === void 0 && (u ? x = new Ae() : f ? x = new Si({ size: 1, sizeAttenuation: !1 }) : x = new u6(), x.name = b.name, x.flatShading = !b.smooth, x.vertexColors = p, t.materials[w] = x), g.push(x);
        }
        let m;
        if (g.length > 1) {
          for (let v = 0, y = d.length; v < y; v++) {
            const b = d[v];
            _.addGroup(b.groupStart, b.groupCount, v);
          }
          u ? m = new xt(_, g) : f ? m = new V8(_, g) : m = new y0(_, g);
        } else
          u ? m = new xt(_, g[0]) : f ? m = new V8(_, g[0]) : m = new y0(_, g[0]);
        m.name = l.name, r.add(m);
      }
    else if (t.vertices.length > 0) {
      const o = new Si({ size: 1, sizeAttenuation: !1 }), c = new F0();
      c.setAttribute("position", new v0(t.vertices, 3)), t.colors.length > 0 && t.colors[0] !== void 0 && (c.setAttribute("color", new v0(t.colors, 3)), o.vertexColors = !0);
      const l = new V8(c, o);
      r.add(l);
    }
    return r;
  }
}
class cT {
  constructor(e) {
    I(this, "props");
    I(this, "handle", (e, t, n) => {
      const { OBJFileURL: s } = e, { data: r, options: a } = e, o = new lT(), c = new Kn({ ...a, type: oe.OBJ });
      return new Promise((l) => {
        o.load(s, (h) => {
          h.traverse((u) => {
            u.type == "Mesh" ? u.material = new d6({ color: "#111" }) : (u.castShadow = !0, u.receiveShadow = !0);
          });
          const d = new G0();
          d.add(h), d.scale.set(0.1, 0.1, 0.1), c.mesh = d, l({
            data: r,
            options: a,
            modelData: c
          });
        });
      });
    });
    this.props = e;
  }
}
const hT = {
  uniforms: {
    u_size: { value: new C(1, 1, 1) },
    u_renderstyle: { value: 0 },
    u_renderthreshold: { value: 0.5 },
    u_clim: { value: new o0(1, 1) },
    u_data: { value: null },
    u_cmdata: { value: null }
  },
  vertexShader: (
    /* glsl */
    `

		varying vec4 v_nearpos;
		varying vec4 v_farpos;
		varying vec3 v_position;

		void main() {
				// Prepare transforms to map to "camera view". See also:
				// https://threejs.org/docs/#api/renderers/webgl/WebGLProgram
				mat4 viewtransformf = modelViewMatrix;
				mat4 viewtransformi = inverse(modelViewMatrix);

				// Project local vertex coordinate to camera position. Then do a step
				// backward (in cam coords) to the near clipping plane, and project back. Do
				// the same for the far clipping plane. This gives us all the information we
				// need to calculate the ray and truncate it to the viewing cone.
				vec4 position4 = vec4(position, 1.0);
				vec4 pos_in_cam = viewtransformf * position4;

				// Intersection of ray and near clipping plane (z = -1 in clip coords)
				pos_in_cam.z = -pos_in_cam.w;
				v_nearpos = viewtransformi * pos_in_cam;

				// Intersection of ray and far clipping plane (z = +1 in clip coords)
				pos_in_cam.z = pos_in_cam.w;
				v_farpos = viewtransformi * pos_in_cam;

				// Set varyings and output pos
				v_position = position;
				gl_Position = projectionMatrix * viewMatrix * modelMatrix * position4;
		}`
  ),
  fragmentShader: (
    /* glsl */
    `

				precision highp float;
				precision mediump sampler3D;

				uniform vec3 u_size;
				uniform int u_renderstyle;
				uniform float u_renderthreshold;
				uniform vec2 u_clim;

				uniform sampler3D u_data;
				uniform sampler2D u_cmdata;

				varying vec3 v_position;
				varying vec4 v_nearpos;
				varying vec4 v_farpos;

				// The maximum distance through our rendering volume is sqrt(3).
				const int MAX_STEPS = 887;	// 887 for 512^3, 1774 for 1024^3
				const int REFINEMENT_STEPS = 4;
				const float relative_step_size = 1.0;
				const vec4 ambient_color = vec4(0.2, 0.4, 0.2, 1.0);
				const vec4 diffuse_color = vec4(0.8, 0.2, 0.2, 1.0);
				const vec4 specular_color = vec4(1.0, 1.0, 1.0, 1.0);
				const float shininess = 40.0;

				void cast_mip(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray);
				void cast_iso(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray);

				float sample1(vec3 texcoords);
				vec4 apply_colormap(float val);
				vec4 add_lighting(float val, vec3 loc, vec3 step, vec3 view_ray);


				void main() {
						// Normalize clipping plane info
						vec3 farpos = v_farpos.xyz / v_farpos.w;
						vec3 nearpos = v_nearpos.xyz / v_nearpos.w;

						// Calculate unit vector pointing in the view direction through this fragment.
						vec3 view_ray = normalize(nearpos.xyz - farpos.xyz);

						// Compute the (negative) distance to the front surface or near clipping plane.
						// v_position is the back face of the cuboid, so the initial distance calculated in the dot
						// product below is the distance from near clip plane to the back of the cuboid
						float distance = dot(nearpos - v_position, view_ray);
						distance = max(distance, min((-0.5 - v_position.x) / view_ray.x,
																				(u_size.x - 0.5 - v_position.x) / view_ray.x));
						distance = max(distance, min((-0.5 - v_position.y) / view_ray.y,
																				(u_size.y - 0.5 - v_position.y) / view_ray.y));
						distance = max(distance, min((-0.5 - v_position.z) / view_ray.z,
																				(u_size.z - 0.5 - v_position.z) / view_ray.z));

						// Now we have the starting position on the front surface
						vec3 front = v_position + view_ray * distance;

						// Decide how many steps to take
						int nsteps = int(-distance / relative_step_size + 0.5);
						if ( nsteps < 1 )
								discard;

						// Get starting location and step vector in texture coordinates
						vec3 step = ((v_position - front) / u_size) / float(nsteps);
						vec3 start_loc = front / u_size;

						// For testing: show the number of steps. This helps to establish
						// whether the rays are correctly oriented
						//'gl_FragColor = vec4(0.0, float(nsteps) / 1.0 / u_size.x, 1.0, 1.0);
						//'return;

						if (u_renderstyle == 0)
								cast_mip(start_loc, step, nsteps, view_ray);
						else if (u_renderstyle == 1)
								cast_iso(start_loc, step, nsteps, view_ray);

						if (gl_FragColor.a < 0.05)
								discard;
				}


				float sample1(vec3 texcoords) {
						/* Sample float value from a 3D texture. Assumes intensity data. */
						return texture(u_data, texcoords.xyz).r;
				}


				vec4 apply_colormap(float val) {
						val = (val - u_clim[0]) / (u_clim[1] - u_clim[0]);
						return texture2D(u_cmdata, vec2(val, 0.5));
				}


				void cast_mip(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray) {

						float max_val = -1e6;
						int max_i = 100;
						vec3 loc = start_loc;

						// Enter the raycasting loop. In WebGL 1 the loop index cannot be compared with
						// non-constant expression. So we use a hard-coded max, and an additional condition
						// inside the loop.
						for (int iter=0; iter<MAX_STEPS; iter++) {
								if (iter >= nsteps)
										break;
								// Sample from the 3D texture
								float val = sample1(loc);
								// Apply MIP operation
								if (val > max_val) {
										max_val = val;
										max_i = iter;
								}
								// Advance location deeper into the volume
								loc += step;
						}

						// Refine location, gives crispier images
						vec3 iloc = start_loc + step * (float(max_i) - 0.5);
						vec3 istep = step / float(REFINEMENT_STEPS);
						for (int i=0; i<REFINEMENT_STEPS; i++) {
								max_val = max(max_val, sample1(iloc));
								iloc += istep;
						}

						// Resolve final color
						gl_FragColor = apply_colormap(max_val);
				}


				void cast_iso(vec3 start_loc, vec3 step, int nsteps, vec3 view_ray) {

						gl_FragColor = vec4(0.0);	// init transparent
						vec4 color3 = vec4(0.0);	// final color
						vec3 dstep = 1.5 / u_size;	// step to sample derivative
						vec3 loc = start_loc;

						float low_threshold = u_renderthreshold - 0.02 * (u_clim[1] - u_clim[0]);

						// Enter the raycasting loop. In WebGL 1 the loop index cannot be compared with
						// non-constant expression. So we use a hard-coded max, and an additional condition
						// inside the loop.
						for (int iter=0; iter<MAX_STEPS; iter++) {
								if (iter >= nsteps)
										break;

								// Sample from the 3D texture
								float val = sample1(loc);

								if (val > low_threshold) {
										// Take the last interval in smaller steps
										vec3 iloc = loc - 0.5 * step;
										vec3 istep = step / float(REFINEMENT_STEPS);
										for (int i=0; i<REFINEMENT_STEPS; i++) {
												val = sample1(iloc);
												if (val > u_renderthreshold) {
														gl_FragColor = add_lighting(val, iloc, dstep, view_ray);
														return;
												}
												iloc += istep;
										}
								}

								// Advance location deeper into the volume
								loc += step;
						}
				}


				vec4 add_lighting(float val, vec3 loc, vec3 step, vec3 view_ray)
				{
					// Calculate color by incorporating lighting

						// View direction
						vec3 V = normalize(view_ray);

						// calculate normal vector from gradient
						vec3 N;
						float val1, val2;
						val1 = sample1(loc + vec3(-step[0], 0.0, 0.0));
						val2 = sample1(loc + vec3(+step[0], 0.0, 0.0));
						N[0] = val1 - val2;
						val = max(max(val1, val2), val);
						val1 = sample1(loc + vec3(0.0, -step[1], 0.0));
						val2 = sample1(loc + vec3(0.0, +step[1], 0.0));
						N[1] = val1 - val2;
						val = max(max(val1, val2), val);
						val1 = sample1(loc + vec3(0.0, 0.0, -step[2]));
						val2 = sample1(loc + vec3(0.0, 0.0, +step[2]));
						N[2] = val1 - val2;
						val = max(max(val1, val2), val);

						float gm = length(N); // gradient magnitude
						N = normalize(N);

						// Flip normal so it points towards viewer
						float Nselect = float(dot(N, V) > 0.0);
						N = (2.0 * Nselect - 1.0) * N;	// ==	Nselect * N - (1.0-Nselect)*N;

						// Init colors
						vec4 ambient_color = vec4(0.0, 0.0, 0.0, 0.0);
						vec4 diffuse_color = vec4(0.0, 0.0, 0.0, 0.0);
						vec4 specular_color = vec4(0.0, 0.0, 0.0, 0.0);

						// note: could allow multiple lights
						for (int i=0; i<1; i++)
						{
								 // Get light direction (make sure to prevent zero devision)
								vec3 L = normalize(view_ray);	//lightDirs[i];
								float lightEnabled = float( length(L) > 0.0 );
								L = normalize(L + (1.0 - lightEnabled));

								// Calculate lighting properties
								float lambertTerm = clamp(dot(N, L), 0.0, 1.0);
								vec3 H = normalize(L+V); // Halfway vector
								float specularTerm = pow(max(dot(H, N), 0.0), shininess);

								// Calculate mask
								float mask1 = lightEnabled;

								// Calculate colors
								ambient_color +=	mask1 * ambient_color;	// * gl_LightSource[i].ambient;
								diffuse_color +=	mask1 * lambertTerm;
								specular_color += mask1 * specularTerm * specular_color;
						}

						// Calculate final color by componing different components
						vec4 final_color;
						vec4 color = apply_colormap(val);
						final_color = color * (ambient_color + diffuse_color) + specular_color;
						final_color.a = color.a;
						return final_color;
				}`
  )
};
var uT = Object.defineProperty, dT = (i, e, t) => e in i ? uT(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, tt = (i, e, t) => (dT(i, typeof e != "symbol" ? e + "" : e, t), t);
const fT = [
  [0, [0, 0, 0.3]],
  [2e-3, [0, 0, 0.3]],
  [4e-3, [0, 0, 0.311]],
  [6e-3, [0, 0, 0.311]],
  [8e-3, [0, 0, 0.322]],
  [0.01, [0, 0, 0.322]],
  [0.012, [0, 0, 0.333]],
  [0.014, [0, 0, 0.333]],
  [0.016, [0, 0, 0.344]],
  [0.018, [0, 0, 0.344]],
  [0.02, [0, 0, 0.355]],
  [0.022, [0, 0, 0.355]],
  [0.023, [0, 0, 0.366]],
  [0.025, [0, 0, 0.366]],
  [0.027, [0, 0, 0.377]],
  [0.029, [0, 0, 0.377]],
  [0.031, [0, 0, 0.388]],
  [0.033, [0, 0, 0.388]],
  [0.035, [0, 0, 0.399]],
  [0.037, [0, 0, 0.399]],
  [0.039, [0, 0, 0.41]],
  [0.041, [0, 0, 0.41]],
  [0.043, [0, 0, 0.421]],
  [0.045, [0, 0, 0.421]],
  [0.047, [0, 0, 0.432]],
  [0.049, [0, 0, 0.432]],
  [0.051, [0, 0, 0.443]],
  [0.053, [0, 0, 0.443]],
  [0.055, [0, 0, 0.454]],
  [0.057, [0, 0, 0.454]],
  [0.059, [0, 0, 0.465]],
  [0.061, [0, 0, 0.465]],
  [0.063, [0, 0, 0.476]],
  [0.065, [0, 0, 0.476]],
  [0.067, [0, 0, 0.487]],
  [0.068, [0, 0, 0.487]],
  [0.07, [0, 0, 0.498]],
  [0.072, [0, 0, 0.498]],
  [0.074, [0, 0, 0.509]],
  [0.076, [0, 0, 0.509]],
  [0.078, [0, 0, 0.52]],
  [0.08, [0, 0, 0.52]],
  [0.082, [0, 0, 0.531]],
  [0.084, [0, 0, 0.531]],
  [0.086, [0, 0, 0.542]],
  [0.088, [0, 0, 0.542]],
  [0.09, [0, 0, 0.553]],
  [0.092, [0, 0, 0.553]],
  [0.094, [0, 0, 0.564]],
  [0.096, [0, 0, 0.564]],
  [0.098, [0, 0, 0.575]],
  [0.1, [0, 0, 0.575]],
  [0.102, [0, 0, 0.585]],
  [0.104, [0, 0, 0.585]],
  [0.106, [0, 0, 0.596]],
  [0.108, [0, 0, 0.596]],
  [0.11, [0, 0, 0.607]],
  [0.112, [0, 0, 0.607]],
  [0.114, [0, 0, 0.618]],
  [0.115, [0, 0, 0.618]],
  [0.117, [0, 0, 0.629]],
  [0.119, [0, 0, 0.629]],
  [0.121, [0, 0, 0.64]],
  [0.123, [0, 0, 0.64]],
  [0.125, [0, 0, 0.651]],
  [0.127, [0, 0, 0.651]],
  [0.129, [0, 0, 0.662]],
  [0.131, [0, 0, 0.662]],
  [0.133, [0, 0, 0.673]],
  [0.135, [0, 0, 0.673]],
  [0.137, [0, 0, 0.684]],
  [0.139, [0, 0, 0.684]],
  [0.141, [0, 0, 0.695]],
  [0.143, [0, 0, 0.695]],
  [0.145, [0, 0, 0.706]],
  [0.147, [0, 0, 0.706]],
  [0.149, [0, 0, 0.717]],
  [0.151, [0, 0, 0.717]],
  [0.153, [0, 0, 0.728]],
  [0.155, [0, 0, 0.728]],
  [0.157, [0, 0, 0.739]],
  [0.159, [0, 0, 0.739]],
  [0.16, [0, 0, 0.75]],
  [0.162, [0, 0, 0.75]],
  [0.164, [0, 0, 0.761]],
  [0.166, [0, 0, 0.761]],
  [0.168, [0, 0, 0.772]],
  [0.17, [0, 0, 0.772]],
  [0.172, [0, 0, 0.783]],
  [0.174, [0, 0, 0.783]],
  [0.176, [0, 0, 0.794]],
  [0.178, [0, 0, 0.794]],
  [0.18, [0, 0, 0.805]],
  [0.182, [0, 0, 0.805]],
  [0.184, [0, 0, 0.816]],
  [0.186, [0, 0, 0.816]],
  [0.188, [0, 0, 0.827]],
  [0.19, [0, 0, 0.827]],
  [0.192, [0, 0, 0.838]],
  [0.194, [0, 0, 0.838]],
  [0.196, [0, 0, 0.849]],
  [0.198, [0, 0, 0.849]],
  [0.2, [0, 0, 0.86]],
  [0.202, [0, 0, 0.86]],
  [0.204, [0, 0, 0.871]],
  [0.205, [0, 0, 0.871]],
  [0.207, [0, 0, 0.882]],
  [0.209, [0, 0, 0.882]],
  [0.211, [0, 0, 0.893]],
  [0.213, [0, 0, 0.893]],
  [0.215, [0, 0, 0.904]],
  [0.217, [0, 0, 0.904]],
  [0.219, [0, 0, 0.915]],
  [0.221, [0, 0, 0.915]],
  [0.223, [0, 0, 0.926]],
  [0.225, [0, 0, 0.926]],
  [0.227, [0, 0, 0.937]],
  [0.229, [0, 0, 0.937]],
  [0.231, [0, 0, 0.948]],
  [0.233, [0, 0, 0.948]],
  [0.235, [0, 0, 0.959]],
  [0.237, [0, 0, 0.959]],
  [0.239, [0, 0, 0.97]],
  [0.241, [0, 0, 0.97]],
  [0.243, [0, 0, 0.981]],
  [0.245, [0, 0, 0.981]],
  [0.247, [0, 0, 0.992]],
  [0.249, [0, 0, 0.992]],
  [0.25, [4e-3, 4e-3, 1]],
  [0.252, [4e-3, 4e-3, 1]],
  [0.254, [0.02, 0.02, 1]],
  [0.256, [0.02, 0.02, 1]],
  [0.258, [0.035, 0.035, 1]],
  [0.26, [0.035, 0.035, 1]],
  [0.262, [0.051, 0.051, 1]],
  [0.264, [0.051, 0.051, 1]],
  [0.266, [0.067, 0.067, 1]],
  [0.268, [0.067, 0.067, 1]],
  [0.27, [0.082, 0.082, 1]],
  [0.272, [0.082, 0.082, 1]],
  [0.274, [0.098, 0.098, 1]],
  [0.276, [0.098, 0.098, 1]],
  [0.278, [0.114, 0.114, 1]],
  [0.28, [0.114, 0.114, 1]],
  [0.282, [0.129, 0.129, 1]],
  [0.284, [0.129, 0.129, 1]],
  [0.286, [0.145, 0.145, 1]],
  [0.288, [0.145, 0.145, 1]],
  [0.29, [0.161, 0.161, 1]],
  [0.292, [0.161, 0.161, 1]],
  [0.294, [0.176, 0.176, 1]],
  [0.295, [0.176, 0.176, 1]],
  [0.297, [0.192, 0.192, 1]],
  [0.299, [0.192, 0.192, 1]],
  [0.301, [0.208, 0.208, 1]],
  [0.303, [0.208, 0.208, 1]],
  [0.305, [0.224, 0.224, 1]],
  [0.307, [0.224, 0.224, 1]],
  [0.309, [0.239, 0.239, 1]],
  [0.311, [0.239, 0.239, 1]],
  [0.313, [0.255, 0.255, 1]],
  [0.315, [0.255, 0.255, 1]],
  [0.317, [0.271, 0.271, 1]],
  [0.319, [0.271, 0.271, 1]],
  [0.321, [0.286, 0.286, 1]],
  [0.323, [0.286, 0.286, 1]],
  [0.325, [0.302, 0.302, 1]],
  [0.327, [0.302, 0.302, 1]],
  [0.329, [0.318, 0.318, 1]],
  [0.331, [0.318, 0.318, 1]],
  [0.333, [0.333, 0.333, 1]],
  [0.335, [0.333, 0.333, 1]],
  [0.337, [0.349, 0.349, 1]],
  [0.339, [0.349, 0.349, 1]],
  [0.341, [0.365, 0.365, 1]],
  [0.342, [0.365, 0.365, 1]],
  [0.344, [0.38, 0.38, 1]],
  [0.346, [0.38, 0.38, 1]],
  [0.348, [0.396, 0.396, 1]],
  [0.35, [0.396, 0.396, 1]],
  [0.352, [0.412, 0.412, 1]],
  [0.354, [0.412, 0.412, 1]],
  [0.356, [0.427, 0.427, 1]],
  [0.358, [0.427, 0.427, 1]],
  [0.36, [0.443, 0.443, 1]],
  [0.362, [0.443, 0.443, 1]],
  [0.364, [0.459, 0.459, 1]],
  [0.366, [0.459, 0.459, 1]],
  [0.368, [0.475, 0.475, 1]],
  [0.37, [0.475, 0.475, 1]],
  [0.372, [0.49, 0.49, 1]],
  [0.374, [0.49, 0.49, 1]],
  [0.376, [0.506, 0.506, 1]],
  [0.378, [0.506, 0.506, 1]],
  [0.38, [0.522, 0.522, 1]],
  [0.382, [0.522, 0.522, 1]],
  [0.384, [0.537, 0.537, 1]],
  [0.386, [0.537, 0.537, 1]],
  [0.387, [0.553, 0.553, 1]],
  [0.389, [0.553, 0.553, 1]],
  [0.391, [0.569, 0.569, 1]],
  [0.393, [0.569, 0.569, 1]],
  [0.395, [0.584, 0.584, 1]],
  [0.397, [0.584, 0.584, 1]],
  [0.399, [0.6, 0.6, 1]],
  [0.401, [0.6, 0.6, 1]],
  [0.403, [0.616, 0.616, 1]],
  [0.405, [0.616, 0.616, 1]],
  [0.407, [0.631, 0.631, 1]],
  [0.409, [0.631, 0.631, 1]],
  [0.411, [0.647, 0.647, 1]],
  [0.413, [0.647, 0.647, 1]],
  [0.415, [0.663, 0.663, 1]],
  [0.417, [0.663, 0.663, 1]],
  [0.419, [0.678, 0.678, 1]],
  [0.421, [0.678, 0.678, 1]],
  [0.423, [0.694, 0.694, 1]],
  [0.425, [0.694, 0.694, 1]],
  [0.427, [0.71, 0.71, 1]],
  [0.429, [0.71, 0.71, 1]],
  [0.431, [0.725, 0.725, 1]],
  [0.432, [0.725, 0.725, 1]],
  [0.434, [0.741, 0.741, 1]],
  [0.436, [0.741, 0.741, 1]],
  [0.438, [0.757, 0.757, 1]],
  [0.44, [0.757, 0.757, 1]],
  [0.442, [0.773, 0.773, 1]],
  [0.444, [0.773, 0.773, 1]],
  [0.446, [0.788, 0.788, 1]],
  [0.448, [0.788, 0.788, 1]],
  [0.45, [0.804, 0.804, 1]],
  [0.452, [0.804, 0.804, 1]],
  [0.454, [0.82, 0.82, 1]],
  [0.456, [0.82, 0.82, 1]],
  [0.458, [0.835, 0.835, 1]],
  [0.46, [0.835, 0.835, 1]],
  [0.462, [0.851, 0.851, 1]],
  [0.464, [0.851, 0.851, 1]],
  [0.466, [0.867, 0.867, 1]],
  [0.468, [0.867, 0.867, 1]],
  [0.47, [0.882, 0.882, 1]],
  [0.472, [0.882, 0.882, 1]],
  [0.474, [0.898, 0.898, 1]],
  [0.476, [0.898, 0.898, 1]],
  [0.477, [0.914, 0.914, 1]],
  [0.479, [0.914, 0.914, 1]],
  [0.481, [0.929, 0.929, 1]],
  [0.483, [0.929, 0.929, 1]],
  [0.485, [0.945, 0.945, 1]],
  [0.487, [0.945, 0.945, 1]],
  [0.489, [0.961, 0.961, 1]],
  [0.491, [0.961, 0.961, 1]],
  [0.493, [0.976, 0.976, 1]],
  [0.495, [0.976, 0.976, 1]],
  [0.497, [0.992, 0.992, 1]],
  [0.499, [0.992, 0.992, 1]],
  [0.501, [1, 0.992, 0.992]],
  [0.503, [1, 0.992, 0.992]],
  [0.505, [1, 0.976, 0.976]],
  [0.507, [1, 0.976, 0.976]],
  [0.509, [1, 0.961, 0.961]],
  [0.511, [1, 0.961, 0.961]],
  [0.513, [1, 0.945, 0.945]],
  [0.515, [1, 0.945, 0.945]],
  [0.517, [1, 0.929, 0.929]],
  [0.519, [1, 0.929, 0.929]],
  [0.521, [1, 0.914, 0.914]],
  [0.523, [1, 0.914, 0.914]],
  [0.524, [1, 0.898, 0.898]],
  [0.526, [1, 0.898, 0.898]],
  [0.528, [1, 0.882, 0.882]],
  [0.53, [1, 0.882, 0.882]],
  [0.532, [1, 0.867, 0.867]],
  [0.534, [1, 0.867, 0.867]],
  [0.536, [1, 0.851, 0.851]],
  [0.538, [1, 0.851, 0.851]],
  [0.54, [1, 0.835, 0.835]],
  [0.542, [1, 0.835, 0.835]],
  [0.544, [1, 0.82, 0.82]],
  [0.546, [1, 0.82, 0.82]],
  [0.548, [1, 0.804, 0.804]],
  [0.55, [1, 0.804, 0.804]],
  [0.552, [1, 0.788, 0.788]],
  [0.554, [1, 0.788, 0.788]],
  [0.556, [1, 0.773, 0.773]],
  [0.558, [1, 0.773, 0.773]],
  [0.56, [1, 0.757, 0.757]],
  [0.562, [1, 0.757, 0.757]],
  [0.564, [1, 0.741, 0.741]],
  [0.566, [1, 0.741, 0.741]],
  [0.568, [1, 0.725, 0.725]],
  [0.569, [1, 0.725, 0.725]],
  [0.571, [1, 0.71, 0.71]],
  [0.573, [1, 0.71, 0.71]],
  [0.575, [1, 0.694, 0.694]],
  [0.577, [1, 0.694, 0.694]],
  [0.579, [1, 0.678, 0.678]],
  [0.581, [1, 0.678, 0.678]],
  [0.583, [1, 0.663, 0.663]],
  [0.585, [1, 0.663, 0.663]],
  [0.587, [1, 0.647, 0.647]],
  [0.589, [1, 0.647, 0.647]],
  [0.591, [1, 0.631, 0.631]],
  [0.593, [1, 0.631, 0.631]],
  [0.595, [1, 0.616, 0.616]],
  [0.597, [1, 0.616, 0.616]],
  [0.599, [1, 0.6, 0.6]],
  [0.601, [1, 0.6, 0.6]],
  [0.603, [1, 0.584, 0.584]],
  [0.605, [1, 0.584, 0.584]],
  [0.607, [1, 0.569, 0.569]],
  [0.609, [1, 0.569, 0.569]],
  [0.611, [1, 0.553, 0.553]],
  [0.613, [1, 0.553, 0.553]],
  [0.614, [1, 0.537, 0.537]],
  [0.616, [1, 0.537, 0.537]],
  [0.618, [1, 0.522, 0.522]],
  [0.62, [1, 0.522, 0.522]],
  [0.622, [1, 0.506, 0.506]],
  [0.624, [1, 0.506, 0.506]],
  [0.626, [1, 0.49, 0.49]],
  [0.628, [1, 0.49, 0.49]],
  [0.63, [1, 0.475, 0.475]],
  [0.632, [1, 0.475, 0.475]],
  [0.634, [1, 0.459, 0.459]],
  [0.636, [1, 0.459, 0.459]],
  [0.638, [1, 0.443, 0.443]],
  [0.64, [1, 0.443, 0.443]],
  [0.642, [1, 0.427, 0.427]],
  [0.644, [1, 0.427, 0.427]],
  [0.646, [1, 0.412, 0.412]],
  [0.648, [1, 0.412, 0.412]],
  [0.65, [1, 0.396, 0.396]],
  [0.652, [1, 0.396, 0.396]],
  [0.654, [1, 0.38, 0.38]],
  [0.656, [1, 0.38, 0.38]],
  [0.658, [1, 0.365, 0.365]],
  [0.659, [1, 0.365, 0.365]],
  [0.661, [1, 0.349, 0.349]],
  [0.663, [1, 0.349, 0.349]],
  [0.665, [1, 0.333, 0.333]],
  [0.667, [1, 0.333, 0.333]],
  [0.669, [1, 0.318, 0.318]],
  [0.671, [1, 0.318, 0.318]],
  [0.673, [1, 0.302, 0.302]],
  [0.675, [1, 0.302, 0.302]],
  [0.677, [1, 0.286, 0.286]],
  [0.679, [1, 0.286, 0.286]],
  [0.681, [1, 0.271, 0.271]],
  [0.683, [1, 0.271, 0.271]],
  [0.685, [1, 0.255, 0.255]],
  [0.687, [1, 0.255, 0.255]],
  [0.689, [1, 0.239, 0.239]],
  [0.691, [1, 0.239, 0.239]],
  [0.693, [1, 0.224, 0.224]],
  [0.695, [1, 0.224, 0.224]],
  [0.697, [1, 0.208, 0.208]],
  [0.699, [1, 0.208, 0.208]],
  [0.701, [1, 0.192, 0.192]],
  [0.703, [1, 0.192, 0.192]],
  [0.705, [1, 0.176, 0.176]],
  [0.706, [1, 0.176, 0.176]],
  [0.708, [1, 0.161, 0.161]],
  [0.71, [1, 0.161, 0.161]],
  [0.712, [1, 0.145, 0.145]],
  [0.714, [1, 0.145, 0.145]],
  [0.716, [1, 0.129, 0.129]],
  [0.718, [1, 0.129, 0.129]],
  [0.72, [1, 0.114, 0.114]],
  [0.722, [1, 0.114, 0.114]],
  [0.724, [1, 0.098, 0.098]],
  [0.726, [1, 0.098, 0.098]],
  [0.728, [1, 0.082, 0.082]],
  [0.73, [1, 0.082, 0.082]],
  [0.732, [1, 0.067, 0.067]],
  [0.734, [1, 0.067, 0.067]],
  [0.736, [1, 0.051, 0.051]],
  [0.738, [1, 0.051, 0.051]],
  [0.74, [1, 0.035, 0.035]],
  [0.742, [1, 0.035, 0.035]],
  [0.744, [1, 0.02, 0.02]],
  [0.746, [1, 0.02, 0.02]],
  [0.748, [1, 4e-3, 4e-3]],
  [0.75, [1, 4e-3, 4e-3]],
  [0.751, [0.994, 0, 0]],
  [0.753, [0.994, 0, 0]],
  [0.755, [0.986, 0, 0]],
  [0.757, [0.986, 0, 0]],
  [0.759, [0.978, 0, 0]],
  [0.761, [0.978, 0, 0]],
  [0.763, [0.971, 0, 0]],
  [0.765, [0.971, 0, 0]],
  [0.767, [0.963, 0, 0]],
  [0.769, [0.963, 0, 0]],
  [0.771, [0.955, 0, 0]],
  [0.773, [0.955, 0, 0]],
  [0.775, [0.947, 0, 0]],
  [0.777, [0.947, 0, 0]],
  [0.779, [0.939, 0, 0]],
  [0.781, [0.939, 0, 0]],
  [0.783, [0.931, 0, 0]],
  [0.785, [0.931, 0, 0]],
  [0.787, [0.924, 0, 0]],
  [0.789, [0.924, 0, 0]],
  [0.791, [0.916, 0, 0]],
  [0.793, [0.916, 0, 0]],
  [0.795, [0.908, 0, 0]],
  [0.796, [0.908, 0, 0]],
  [0.798, [0.9, 0, 0]],
  [0.8, [0.9, 0, 0]],
  [0.802, [0.892, 0, 0]],
  [0.804, [0.892, 0, 0]],
  [0.806, [0.884, 0, 0]],
  [0.808, [0.884, 0, 0]],
  [0.81, [0.876, 0, 0]],
  [0.812, [0.876, 0, 0]],
  [0.814, [0.869, 0, 0]],
  [0.816, [0.869, 0, 0]],
  [0.818, [0.861, 0, 0]],
  [0.82, [0.861, 0, 0]],
  [0.822, [0.853, 0, 0]],
  [0.824, [0.853, 0, 0]],
  [0.826, [0.845, 0, 0]],
  [0.828, [0.845, 0, 0]],
  [0.83, [0.837, 0, 0]],
  [0.832, [0.837, 0, 0]],
  [0.834, [0.829, 0, 0]],
  [0.836, [0.829, 0, 0]],
  [0.838, [0.822, 0, 0]],
  [0.84, [0.822, 0, 0]],
  [0.841, [0.814, 0, 0]],
  [0.843, [0.814, 0, 0]],
  [0.845, [0.806, 0, 0]],
  [0.847, [0.806, 0, 0]],
  [0.849, [0.798, 0, 0]],
  [0.851, [0.798, 0, 0]],
  [0.853, [0.79, 0, 0]],
  [0.855, [0.79, 0, 0]],
  [0.857, [0.782, 0, 0]],
  [0.859, [0.782, 0, 0]],
  [0.861, [0.775, 0, 0]],
  [0.863, [0.775, 0, 0]],
  [0.865, [0.767, 0, 0]],
  [0.867, [0.767, 0, 0]],
  [0.869, [0.759, 0, 0]],
  [0.871, [0.759, 0, 0]],
  [0.873, [0.751, 0, 0]],
  [0.875, [0.751, 0, 0]],
  [0.877, [0.743, 0, 0]],
  [0.879, [0.743, 0, 0]],
  [0.881, [0.735, 0, 0]],
  [0.883, [0.735, 0, 0]],
  [0.885, [0.727, 0, 0]],
  [0.886, [0.727, 0, 0]],
  [0.888, [0.72, 0, 0]],
  [0.89, [0.72, 0, 0]],
  [0.892, [0.712, 0, 0]],
  [0.894, [0.712, 0, 0]],
  [0.896, [0.704, 0, 0]],
  [0.898, [0.704, 0, 0]],
  [0.9, [0.696, 0, 0]],
  [0.902, [0.696, 0, 0]],
  [0.904, [0.688, 0, 0]],
  [0.906, [0.688, 0, 0]],
  [0.908, [0.68, 0, 0]],
  [0.91, [0.68, 0, 0]],
  [0.912, [0.673, 0, 0]],
  [0.914, [0.673, 0, 0]],
  [0.916, [0.665, 0, 0]],
  [0.918, [0.665, 0, 0]],
  [0.92, [0.657, 0, 0]],
  [0.922, [0.657, 0, 0]],
  [0.924, [0.649, 0, 0]],
  [0.926, [0.649, 0, 0]],
  [0.928, [0.641, 0, 0]],
  [0.93, [0.641, 0, 0]],
  [0.932, [0.633, 0, 0]],
  [0.933, [0.633, 0, 0]],
  [0.935, [0.625, 0, 0]],
  [0.937, [0.625, 0, 0]],
  [0.939, [0.618, 0, 0]],
  [0.941, [0.618, 0, 0]],
  [0.943, [0.61, 0, 0]],
  [0.945, [0.61, 0, 0]],
  [0.947, [0.602, 0, 0]],
  [0.949, [0.602, 0, 0]],
  [0.951, [0.594, 0, 0]],
  [0.953, [0.594, 0, 0]],
  [0.955, [0.586, 0, 0]],
  [0.957, [0.586, 0, 0]],
  [0.959, [0.578, 0, 0]],
  [0.961, [0.578, 0, 0]],
  [0.963, [0.571, 0, 0]],
  [0.965, [0.571, 0, 0]],
  [0.967, [0.563, 0, 0]],
  [0.969, [0.563, 0, 0]],
  [0.971, [0.555, 0, 0]],
  [0.973, [0.555, 0, 0]],
  [0.975, [0.547, 0, 0]],
  [0.977, [0.547, 0, 0]],
  [0.978, [0.539, 0, 0]],
  [0.98, [0.539, 0, 0]],
  [0.982, [0.531, 0, 0]],
  [0.984, [0.531, 0, 0]],
  [0.986, [0.524, 0, 0]],
  [0.988, [0.524, 0, 0]],
  [0.99, [0.516, 0, 0]],
  [0.992, [0.516, 0, 0]],
  [0.994, [0.508, 0, 0]],
  [0.996, [0.508, 0, 0]],
  [0.998, [0.5, 0, 0]],
  [1, [0.5, 0, 0]]
];
fT.map((i) => i[1]);
var E1 = /* @__PURE__ */ ((i) => (i[i.AXIAL = 1] = "AXIAL", i[i.CORONAL = 2] = "CORONAL", i[i.SAGITTAL = 3] = "SAGITTAL", i))(E1 || {}), a4 = /* @__PURE__ */ ((i) => (i.CoorChange = "coorChange", i.Resize = "resize", i))(a4 || {}), Hr = {
  exports: {}
}, Te = Te || {};
Te.Utils = Te.Utils || {};
Te.Utils.crcTable = null;
Te.Utils.GUNZIP_MAGIC_COOKIE1 = 31;
Te.Utils.GUNZIP_MAGIC_COOKIE2 = 139;
Te.Utils.getStringAt = function(i, e, t) {
  var n = "", s, r;
  for (s = e; s < t; s += 1)
    r = i.getUint8(s), r !== 0 && (n += String.fromCharCode(r));
  return n;
};
Te.Utils.getByteAt = function(i, e) {
  return i.getInt8(e);
};
Te.Utils.getShortAt = function(i, e, t) {
  return i.getInt16(e, t);
};
Te.Utils.getIntAt = function(i, e, t) {
  return i.getInt32(e, t);
};
Te.Utils.getFloatAt = function(i, e, t) {
  return i.getFloat32(e, t);
};
Te.Utils.getDoubleAt = function(i, e, t) {
  return i.getFloat64(e, t);
};
Te.Utils.getLongAt = function(i, e, t) {
  var n, s = [], r = 0;
  for (n = 0; n < 8; n += 1)
    s[n] = Te.Utils.getByteAt(i, e + n, t);
  for (n = s.length - 1; n >= 0; n--)
    r = r * 256 + s[n];
  return r;
};
Te.Utils.toArrayBuffer = function(i) {
  var e, t, n;
  for (e = new ArrayBuffer(i.length), t = new Uint8Array(e), n = 0; n < i.length; n += 1)
    t[n] = i[n];
  return e;
};
Te.Utils.isString = function(i) {
  return typeof i == "string" || i instanceof String;
};
Te.Utils.formatNumber = function(i, e) {
  var t = 0;
  return Te.Utils.isString(i) ? t = Number(i) : t = i, e ? t = t.toPrecision(5) : t = t.toPrecision(7), parseFloat(t);
};
Te.Utils.makeCRCTable = function() {
  for (var i, e = [], t = 0; t < 256; t++) {
    i = t;
    for (var n = 0; n < 8; n++)
      i = i & 1 ? 3988292384 ^ i >>> 1 : i >>> 1;
    e[t] = i;
  }
  return e;
};
Te.Utils.crc32 = function(i) {
  for (var e = Te.Utils.crcTable || (Te.Utils.crcTable = Te.Utils.makeCRCTable()), t = -1, n = 0; n < i.byteLength; n++)
    t = t >>> 8 ^ e[(t ^ i.getUint8(n)) & 255];
  return (t ^ -1) >>> 0;
};
var pT = typeof Hr;
pT !== "undefined" && Hr.exports && (Hr.exports = Te.Utils);
var o4 = Hr.exports, Gr = {
  exports: {}
}, $ = $ || {};
$.Utils = $.Utils || o4;
$.NIFTI1 = $.NIFTI1 || function() {
  this.littleEndian = !1, this.dim_info = 0, this.dims = [], this.intent_p1 = 0, this.intent_p2 = 0, this.intent_p3 = 0, this.intent_code = 0, this.datatypeCode = 0, this.numBitsPerVoxel = 0, this.slice_start = 0, this.slice_end = 0, this.slice_code = 0, this.pixDims = [], this.vox_offset = 0, this.scl_slope = 1, this.scl_inter = 0, this.xyzt_units = 0, this.cal_max = 0, this.cal_min = 0, this.slice_duration = 0, this.toffset = 0, this.description = "", this.aux_file = "", this.intent_name = "", this.qform_code = 0, this.sform_code = 0, this.quatern_b = 0, this.quatern_c = 0, this.quatern_d = 0, this.qoffset_x = 0, this.qoffset_y = 0, this.qoffset_z = 0, this.affine = [
    [1, 0, 0, 0],
    [0, 1, 0, 0],
    [0, 0, 1, 0],
    [0, 0, 0, 1]
  ], this.magic = 0, this.isHDR = !1, this.extensionFlag = [0, 0, 0, 0], this.extensionSize = 0, this.extensionCode = 0;
};
$.NIFTI1.TYPE_NONE = 0;
$.NIFTI1.TYPE_BINARY = 1;
$.NIFTI1.TYPE_UINT8 = 2;
$.NIFTI1.TYPE_INT16 = 4;
$.NIFTI1.TYPE_INT32 = 8;
$.NIFTI1.TYPE_FLOAT32 = 16;
$.NIFTI1.TYPE_COMPLEX64 = 32;
$.NIFTI1.TYPE_FLOAT64 = 64;
$.NIFTI1.TYPE_RGB24 = 128;
$.NIFTI1.TYPE_INT8 = 256;
$.NIFTI1.TYPE_UINT16 = 512;
$.NIFTI1.TYPE_UINT32 = 768;
$.NIFTI1.TYPE_INT64 = 1024;
$.NIFTI1.TYPE_UINT64 = 1280;
$.NIFTI1.TYPE_FLOAT128 = 1536;
$.NIFTI1.TYPE_COMPLEX128 = 1792;
$.NIFTI1.TYPE_COMPLEX256 = 2048;
$.NIFTI1.XFORM_UNKNOWN = 0;
$.NIFTI1.XFORM_SCANNER_ANAT = 1;
$.NIFTI1.XFORM_ALIGNED_ANAT = 2;
$.NIFTI1.XFORM_TALAIRACH = 3;
$.NIFTI1.XFORM_MNI_152 = 4;
$.NIFTI1.SPATIAL_UNITS_MASK = 7;
$.NIFTI1.TEMPORAL_UNITS_MASK = 56;
$.NIFTI1.UNITS_UNKNOWN = 0;
$.NIFTI1.UNITS_METER = 1;
$.NIFTI1.UNITS_MM = 2;
$.NIFTI1.UNITS_MICRON = 3;
$.NIFTI1.UNITS_SEC = 8;
$.NIFTI1.UNITS_MSEC = 16;
$.NIFTI1.UNITS_USEC = 24;
$.NIFTI1.UNITS_HZ = 32;
$.NIFTI1.UNITS_PPM = 40;
$.NIFTI1.UNITS_RADS = 48;
$.NIFTI1.MAGIC_COOKIE = 348;
$.NIFTI1.STANDARD_HEADER_SIZE = 348;
$.NIFTI1.MAGIC_NUMBER_LOCATION = 344;
$.NIFTI1.MAGIC_NUMBER = [110, 43, 49];
$.NIFTI1.MAGIC_NUMBER2 = [110, 105, 49];
$.NIFTI1.EXTENSION_HEADER_SIZE = 8;
$.NIFTI1.prototype.readHeader = function(i) {
  var e = new DataView(i), t = $.Utils.getIntAt(e, 0, this.littleEndian), n, s, r, a;
  if (t !== $.NIFTI1.MAGIC_COOKIE && (this.littleEndian = !0, t = $.Utils.getIntAt(e, 0, this.littleEndian)), t !== $.NIFTI1.MAGIC_COOKIE)
    throw new Error("This does not appear to be a NIFTI file!");
  for (this.dim_info = $.Utils.getByteAt(e, 39), n = 0; n < 8; n += 1)
    a = 40 + n * 2, this.dims[n] = $.Utils.getShortAt(
      e,
      a,
      this.littleEndian
    );
  for (this.intent_p1 = $.Utils.getFloatAt(e, 56, this.littleEndian), this.intent_p2 = $.Utils.getFloatAt(e, 60, this.littleEndian), this.intent_p3 = $.Utils.getFloatAt(e, 64, this.littleEndian), this.intent_code = $.Utils.getShortAt(e, 68, this.littleEndian), this.datatypeCode = $.Utils.getShortAt(e, 70, this.littleEndian), this.numBitsPerVoxel = $.Utils.getShortAt(
    e,
    72,
    this.littleEndian
  ), this.slice_start = $.Utils.getShortAt(e, 74, this.littleEndian), n = 0; n < 8; n += 1)
    a = 76 + n * 4, this.pixDims[n] = $.Utils.getFloatAt(
      e,
      a,
      this.littleEndian
    );
  for (this.vox_offset = $.Utils.getFloatAt(e, 108, this.littleEndian), this.scl_slope = $.Utils.getFloatAt(e, 112, this.littleEndian), this.scl_inter = $.Utils.getFloatAt(e, 116, this.littleEndian), this.slice_end = $.Utils.getShortAt(e, 120, this.littleEndian), this.slice_code = $.Utils.getByteAt(e, 122), this.xyzt_units = $.Utils.getByteAt(e, 123), this.cal_max = $.Utils.getFloatAt(e, 124, this.littleEndian), this.cal_min = $.Utils.getFloatAt(e, 128, this.littleEndian), this.slice_duration = $.Utils.getFloatAt(
    e,
    132,
    this.littleEndian
  ), this.toffset = $.Utils.getFloatAt(e, 136, this.littleEndian), this.description = $.Utils.getStringAt(e, 148, 228), this.aux_file = $.Utils.getStringAt(e, 228, 252), this.qform_code = $.Utils.getShortAt(e, 252, this.littleEndian), this.sform_code = $.Utils.getShortAt(e, 254, this.littleEndian), this.quatern_b = $.Utils.getFloatAt(e, 256, this.littleEndian), this.quatern_c = $.Utils.getFloatAt(e, 260, this.littleEndian), this.quatern_d = $.Utils.getFloatAt(e, 264, this.littleEndian), this.qoffset_x = $.Utils.getFloatAt(e, 268, this.littleEndian), this.qoffset_y = $.Utils.getFloatAt(e, 272, this.littleEndian), this.qoffset_z = $.Utils.getFloatAt(e, 276, this.littleEndian), s = 0; s < 3; s += 1)
    for (r = 0; r < 4; r += 1)
      a = 280 + (s * 4 + r) * 4, this.affine[s][r] = $.Utils.getFloatAt(
        e,
        a,
        this.littleEndian
      );
  this.affine[3][0] = 0, this.affine[3][1] = 0, this.affine[3][2] = 0, this.affine[3][3] = 1, this.intent_name = $.Utils.getStringAt(e, 328, 344), this.magic = $.Utils.getStringAt(e, 344, 348), this.isHDR = this.magic === $.NIFTI1.MAGIC_NUMBER2, e.byteLength > $.NIFTI1.MAGIC_COOKIE && (this.extensionFlag[0] = $.Utils.getByteAt(e, 348), this.extensionFlag[1] = $.Utils.getByteAt(e, 348 + 1), this.extensionFlag[2] = $.Utils.getByteAt(e, 348 + 2), this.extensionFlag[3] = $.Utils.getByteAt(e, 348 + 3), this.extensionFlag[0] && (this.extensionSize = this.getExtensionSize(e), this.extensionCode = this.getExtensionCode(e)));
};
$.NIFTI1.prototype.toFormattedString = function() {
  var i = $.Utils.formatNumber, e = "";
  return e += "Dim Info = " + this.dim_info + `
`, e += "Image Dimensions (1-8): " + this.dims[0] + ", " + this.dims[1] + ", " + this.dims[2] + ", " + this.dims[3] + ", " + this.dims[4] + ", " + this.dims[5] + ", " + this.dims[6] + ", " + this.dims[7] + `
`, e += "Intent Parameters (1-3): " + this.intent_p1 + ", " + this.intent_p2 + ", " + this.intent_p3 + `
`, e += "Intent Code = " + this.intent_code + `
`, e += "Datatype = " + this.datatypeCode + " (" + this.getDatatypeCodeString(this.datatypeCode) + `)
`, e += "Bits Per Voxel = " + this.numBitsPerVoxel + `
`, e += "Slice Start = " + this.slice_start + `
`, e += "Voxel Dimensions (1-8): " + i(this.pixDims[0]) + ", " + i(this.pixDims[1]) + ", " + i(this.pixDims[2]) + ", " + i(this.pixDims[3]) + ", " + i(this.pixDims[4]) + ", " + i(this.pixDims[5]) + ", " + i(this.pixDims[6]) + ", " + i(this.pixDims[7]) + `
`, e += "Image Offset = " + this.vox_offset + `
`, e += "Data Scale:  Slope = " + i(this.scl_slope) + "  Intercept = " + i(this.scl_inter) + `
`, e += "Slice End = " + this.slice_end + `
`, e += "Slice Code = " + this.slice_code + `
`, e += "Units Code = " + this.xyzt_units + " (" + this.getUnitsCodeString(
    $.NIFTI1.SPATIAL_UNITS_MASK & this.xyzt_units
  ) + ", " + this.getUnitsCodeString(
    $.NIFTI1.TEMPORAL_UNITS_MASK & this.xyzt_units
  ) + `)
`, e += "Display Range:  Max = " + i(this.cal_max) + "  Min = " + i(this.cal_min) + `
`, e += "Slice Duration = " + this.slice_duration + `
`, e += "Time Axis Shift = " + this.toffset + `
`, e += 'Description: "' + this.description + `"
`, e += 'Auxiliary File: "' + this.aux_file + `"
`, e += "Q-Form Code = " + this.qform_code + " (" + this.getTransformCodeString(this.qform_code) + `)
`, e += "S-Form Code = " + this.sform_code + " (" + this.getTransformCodeString(this.sform_code) + `)
`, e += "Quaternion Parameters:  b = " + i(this.quatern_b) + "  c = " + i(this.quatern_c) + "  d = " + i(this.quatern_d) + `
`, e += "Quaternion Offsets:  x = " + this.qoffset_x + "  y = " + this.qoffset_y + "  z = " + this.qoffset_z + `
`, e += "S-Form Parameters X: " + i(this.affine[0][0]) + ", " + i(this.affine[0][1]) + ", " + i(this.affine[0][2]) + ", " + i(this.affine[0][3]) + `
`, e += "S-Form Parameters Y: " + i(this.affine[1][0]) + ", " + i(this.affine[1][1]) + ", " + i(this.affine[1][2]) + ", " + i(this.affine[1][3]) + `
`, e += "S-Form Parameters Z: " + i(this.affine[2][0]) + ", " + i(this.affine[2][1]) + ", " + i(this.affine[2][2]) + ", " + i(this.affine[2][3]) + `
`, e += 'Intent Name: "' + this.intent_name + `"
`, this.extensionFlag[0] && (e += "Extension: Size = " + this.extensionSize + "  Code = " + this.extensionCode + `
`), e;
};
$.NIFTI1.prototype.getDatatypeCodeString = function(i) {
  return i === $.NIFTI1.TYPE_UINT8 ? "1-Byte Unsigned Integer" : i === $.NIFTI1.TYPE_INT16 ? "2-Byte Signed Integer" : i === $.NIFTI1.TYPE_INT32 ? "4-Byte Signed Integer" : i === $.NIFTI1.TYPE_FLOAT32 ? "4-Byte Float" : i === $.NIFTI1.TYPE_FLOAT64 ? "8-Byte Float" : i === $.NIFTI1.TYPE_RGB24 ? "RGB" : i === $.NIFTI1.TYPE_INT8 ? "1-Byte Signed Integer" : i === $.NIFTI1.TYPE_UINT16 ? "2-Byte Unsigned Integer" : i === $.NIFTI1.TYPE_UINT32 ? "4-Byte Unsigned Integer" : i === $.NIFTI1.TYPE_INT64 ? "8-Byte Signed Integer" : i === $.NIFTI1.TYPE_UINT64 ? "8-Byte Unsigned Integer" : "Unknown";
};
$.NIFTI1.prototype.getTransformCodeString = function(i) {
  return i === $.NIFTI1.XFORM_SCANNER_ANAT ? "Scanner" : i === $.NIFTI1.XFORM_ALIGNED_ANAT ? "Aligned" : i === $.NIFTI1.XFORM_TALAIRACH ? "Talairach" : i === $.NIFTI1.XFORM_MNI_152 ? "MNI" : "Unknown";
};
$.NIFTI1.prototype.getUnitsCodeString = function(i) {
  return i === $.NIFTI1.UNITS_METER ? "Meters" : i === $.NIFTI1.UNITS_MM ? "Millimeters" : i === $.NIFTI1.UNITS_MICRON ? "Microns" : i === $.NIFTI1.UNITS_SEC ? "Seconds" : i === $.NIFTI1.UNITS_MSEC ? "Milliseconds" : i === $.NIFTI1.UNITS_USEC ? "Microseconds" : i === $.NIFTI1.UNITS_HZ ? "Hz" : i === $.NIFTI1.UNITS_PPM ? "PPM" : i === $.NIFTI1.UNITS_RADS ? "Rads" : "Unknown";
};
$.NIFTI1.prototype.getQformMat = function() {
  return this.convertNiftiQFormToNiftiSForm(
    this.quatern_b,
    this.quatern_c,
    this.quatern_d,
    this.qoffset_x,
    this.qoffset_y,
    this.qoffset_z,
    this.pixDims[1],
    this.pixDims[2],
    this.pixDims[3],
    this.pixDims[0]
  );
};
$.NIFTI1.prototype.convertNiftiQFormToNiftiSForm = function(i, e, t, n, s, r, a, o, c, l) {
  var h = [
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0]
  ], d, u = i, f = e, p = t, _, g, m;
  return h[3][0] = h[3][1] = h[3][2] = 0, h[3][3] = 1, d = 1 - (u * u + f * f + p * p), d < 1e-7 ? (d = 1 / Math.sqrt(u * u + f * f + p * p), u *= d, f *= d, p *= d, d = 0) : d = Math.sqrt(d), _ = a > 0 ? a : 1, g = o > 0 ? o : 1, m = c > 0 ? c : 1, l < 0 && (m = -m), h[0][0] = (d * d + u * u - f * f - p * p) * _, h[0][1] = 2 * (u * f - d * p) * g, h[0][2] = 2 * (u * p + d * f) * m, h[1][0] = 2 * (u * f + d * p) * _, h[1][1] = (d * d + f * f - u * u - p * p) * g, h[1][2] = 2 * (f * p - d * u) * m, h[2][0] = 2 * (u * p - d * f) * _, h[2][1] = 2 * (f * p + d * u) * g, h[2][2] = (d * d + p * p - f * f - u * u) * m, h[0][3] = n, h[1][3] = s, h[2][3] = r, h;
};
$.NIFTI1.prototype.convertNiftiSFormToNEMA = function(i) {
  var e, t, n, s, r, a, o, c, l, h, d, u, f, p, _, g, m, v, y, b, w, x, S, T, M, A, D, z, O, U, V, Y, W, X;
  if (_ = 0, D = [
    [0, 0, 0],
    [0, 0, 0],
    [0, 0, 0]
  ], z = [
    [0, 0, 0],
    [0, 0, 0],
    [0, 0, 0]
  ], e = i[0][0], t = i[0][1], n = i[0][2], s = i[1][0], r = i[1][1], a = i[1][2], o = i[2][0], c = i[2][1], l = i[2][2], h = Math.sqrt(e * e + s * s + o * o), h === 0 || (e /= h, s /= h, o /= h, h = Math.sqrt(t * t + r * r + c * c), h === 0))
    return null;
  if (t /= h, r /= h, c /= h, h = e * t + s * r + o * c, Math.abs(h) > 1e-4) {
    if (t -= h * e, r -= h * s, c -= h * o, h = Math.sqrt(t * t + r * r + c * c), h === 0)
      return null;
    t /= h, r /= h, c /= h;
  }
  if (h = Math.sqrt(n * n + a * a + l * l), h === 0 ? (n = s * c - o * r, a = o * t - c * e, l = e * r - s * t) : (n /= h, a /= h, l /= h), h = e * n + s * a + o * l, Math.abs(h) > 1e-4) {
    if (n -= h * e, a -= h * s, l -= h * o, h = Math.sqrt(n * n + a * a + l * l), h === 0)
      return null;
    n /= h, a /= h, l /= h;
  }
  if (h = t * n + r * a + c * l, Math.abs(h) > 1e-4) {
    if (n -= h * t, a -= h * r, l -= h * c, h = Math.sqrt(n * n + a * a + l * l), h === 0)
      return null;
    n /= h, a /= h, l /= h;
  }
  if (D[0][0] = e, D[0][1] = t, D[0][2] = n, D[1][0] = s, D[1][1] = r, D[1][2] = a, D[2][0] = o, D[2][1] = c, D[2][2] = l, d = this.nifti_mat33_determ(D), d === 0)
    return null;
  for (A = -666, y = x = S = T = 1, b = 2, w = 3, f = 1; f <= 3; f += 1)
    for (p = 1; p <= 3; p += 1)
      if (f !== p) {
        for (_ = 1; _ <= 3; _ += 1)
          if (!(f === _ || p === _))
            for (z[0][0] = z[0][1] = z[0][2] = z[1][0] = z[1][1] = z[1][2] = z[2][0] = z[2][1] = z[2][2] = 0, g = -1; g <= 1; g += 2)
              for (m = -1; m <= 1; m += 2)
                for (v = -1; v <= 1; v += 2)
                  z[0][f - 1] = g, z[1][p - 1] = m, z[2][_ - 1] = v, u = this.nifti_mat33_determ(z), u * d > 0 && (M = this.nifti_mat33_mul(z, D), h = M[0][0] + M[1][1] + M[2][2], h > A && (A = h, y = f, b = p, w = _, x = g, S = m, T = v));
      }
  switch (O = U = V = Y = W = X = 0, y * x) {
    case 1:
      O = "X", Y = "+";
      break;
    case -1:
      O = "X", Y = "-";
      break;
    case 2:
      O = "Y", Y = "+";
      break;
    case -2:
      O = "Y", Y = "-";
      break;
    case 3:
      O = "Z", Y = "+";
      break;
    case -3:
      O = "Z", Y = "-";
      break;
  }
  switch (b * S) {
    case 1:
      U = "X", W = "+";
      break;
    case -1:
      U = "X", W = "-";
      break;
    case 2:
      U = "Y", W = "+";
      break;
    case -2:
      U = "Y", W = "-";
      break;
    case 3:
      U = "Z", W = "+";
      break;
    case -3:
      U = "Z", W = "-";
      break;
  }
  switch (w * T) {
    case 1:
      V = "X", X = "+";
      break;
    case -1:
      V = "X", X = "-";
      break;
    case 2:
      V = "Y", X = "+";
      break;
    case -2:
      V = "Y", X = "-";
      break;
    case 3:
      V = "Z", X = "+";
      break;
    case -3:
      V = "Z", X = "-";
      break;
  }
  return O + U + V + Y + W + X;
};
$.NIFTI1.prototype.nifti_mat33_mul = function(i, e) {
  var t = [
    [0, 0, 0],
    [0, 0, 0],
    [0, 0, 0]
  ], n, s;
  for (n = 0; n < 3; n += 1)
    for (s = 0; s < 3; s += 1)
      t[n][s] = i[n][0] * e[0][s] + i[n][1] * e[1][s] + i[n][2] * e[2][s];
  return t;
};
$.NIFTI1.prototype.nifti_mat33_determ = function(i) {
  var e, t, n, s, r, a, o, c, l;
  return e = i[0][0], t = i[0][1], n = i[0][2], s = i[1][0], r = i[1][1], a = i[1][2], o = i[2][0], c = i[2][1], l = i[2][2], e * r * l - e * c * a - s * t * l + s * c * n + o * t * a - o * r * n;
};
$.NIFTI1.prototype.getExtensionLocation = function() {
  return $.NIFTI1.MAGIC_COOKIE + 4;
};
$.NIFTI1.prototype.getExtensionSize = function(i) {
  return $.Utils.getIntAt(
    i,
    this.getExtensionLocation(),
    this.littleEndian
  );
};
$.NIFTI1.prototype.getExtensionCode = function(i) {
  return $.Utils.getIntAt(
    i,
    this.getExtensionLocation() + 4,
    this.littleEndian
  );
};
var mT = typeof Gr;
mT !== "undefined" && Gr.exports && (Gr.exports = $.NIFTI1);
var kd = Gr.exports, Wr = {
  exports: {}
}, g0 = g0 || {};
g0.Utils = g0.Utils || o4;
g0.NIFTI1 = g0.NIFTI1 || kd;
g0.NIFTI2 = g0.NIFTI2 || function() {
  this.littleEndian = !1, this.dim_info = 0, this.dims = [], this.intent_p1 = 0, this.intent_p2 = 0, this.intent_p3 = 0, this.intent_code = 0, this.datatypeCode = 0, this.numBitsPerVoxel = 0, this.slice_start = 0, this.slice_end = 0, this.slice_code = 0, this.pixDims = [], this.vox_offset = 0, this.scl_slope = 1, this.scl_inter = 0, this.xyzt_units = 0, this.cal_max = 0, this.cal_min = 0, this.slice_duration = 0, this.toffset = 0, this.description = "", this.aux_file = "", this.intent_name = "", this.qform_code = 0, this.sform_code = 0, this.quatern_b = 0, this.quatern_c = 0, this.quatern_d = 0, this.qoffset_x = 0, this.qoffset_y = 0, this.qoffset_z = 0, this.affine = [
    [1, 0, 0, 0],
    [0, 1, 0, 0],
    [0, 0, 1, 0],
    [0, 0, 0, 1]
  ], this.magic = 0, this.extensionFlag = [0, 0, 0, 0];
};
g0.NIFTI2.MAGIC_COOKIE = 540;
g0.NIFTI2.MAGIC_NUMBER_LOCATION = 4;
g0.NIFTI2.MAGIC_NUMBER = [110, 43, 50, 0, 13, 10, 26, 10];
g0.NIFTI2.prototype.readHeader = function(i) {
  var e = new DataView(i), t = g0.Utils.getIntAt(e, 0, this.littleEndian), n, s, r, a;
  if (t !== g0.NIFTI2.MAGIC_COOKIE && (this.littleEndian = !0, t = g0.Utils.getIntAt(e, 0, this.littleEndian)), t !== g0.NIFTI2.MAGIC_COOKIE)
    throw new Error("This does not appear to be a NIFTI file!");
  for (this.datatypeCode = g0.Utils.getShortAt(e, 12, this.littleEndian), this.numBitsPerVoxel = g0.Utils.getShortAt(
    e,
    14,
    this.littleEndian
  ), n = 0; n < 8; n += 1)
    a = 16 + n * 8, this.dims[n] = g0.Utils.getLongAt(e, a, this.littleEndian);
  for (this.intent_p1 = g0.Utils.getDoubleAt(e, 80, this.littleEndian), this.intent_p2 = g0.Utils.getDoubleAt(e, 88, this.littleEndian), this.intent_p3 = g0.Utils.getDoubleAt(e, 96, this.littleEndian), n = 0; n < 8; n += 1)
    a = 104 + n * 8, this.pixDims[n] = g0.Utils.getDoubleAt(
      e,
      a,
      this.littleEndian
    );
  for (this.vox_offset = g0.Utils.getLongAt(e, 168, this.littleEndian), this.scl_slope = g0.Utils.getDoubleAt(e, 176, this.littleEndian), this.scl_inter = g0.Utils.getDoubleAt(e, 184, this.littleEndian), this.cal_max = g0.Utils.getDoubleAt(e, 192, this.littleEndian), this.cal_min = g0.Utils.getDoubleAt(e, 200, this.littleEndian), this.slice_duration = g0.Utils.getDoubleAt(
    e,
    208,
    this.littleEndian
  ), this.toffset = g0.Utils.getDoubleAt(e, 216, this.littleEndian), this.slice_start = g0.Utils.getLongAt(e, 224, this.littleEndian), this.slice_end = g0.Utils.getLongAt(e, 232, this.littleEndian), this.description = g0.Utils.getStringAt(e, 240, 240 + 80), this.aux_file = g0.Utils.getStringAt(e, 320, 320 + 24), this.qform_code = g0.Utils.getIntAt(e, 344, this.littleEndian), this.sform_code = g0.Utils.getIntAt(e, 348, this.littleEndian), this.quatern_b = g0.Utils.getDoubleAt(e, 352, this.littleEndian), this.quatern_c = g0.Utils.getDoubleAt(e, 360, this.littleEndian), this.quatern_d = g0.Utils.getDoubleAt(e, 368, this.littleEndian), this.qoffset_x = g0.Utils.getDoubleAt(e, 376, this.littleEndian), this.qoffset_y = g0.Utils.getDoubleAt(e, 384, this.littleEndian), this.qoffset_z = g0.Utils.getDoubleAt(e, 392, this.littleEndian), s = 0; s < 3; s += 1)
    for (r = 0; r < 4; r += 1)
      a = 400 + (s * 4 + r) * 8, this.affine[s][r] = g0.Utils.getDoubleAt(
        e,
        a,
        this.littleEndian
      );
  this.affine[3][0] = 0, this.affine[3][1] = 0, this.affine[3][2] = 0, this.affine[3][3] = 1, this.slice_code = g0.Utils.getIntAt(e, 496, this.littleEndian), this.xyzt_units = g0.Utils.getIntAt(e, 500, this.littleEndian), this.intent_code = g0.Utils.getIntAt(e, 504, this.littleEndian), this.intent_name = g0.Utils.getStringAt(e, 508, 508 + 16), this.dim_info = g0.Utils.getByteAt(e, 524), e.byteLength > g0.NIFTI2.MAGIC_COOKIE && (this.extensionFlag[0] = g0.Utils.getByteAt(e, 540), this.extensionFlag[1] = g0.Utils.getByteAt(e, 540 + 1), this.extensionFlag[2] = g0.Utils.getByteAt(e, 540 + 2), this.extensionFlag[3] = g0.Utils.getByteAt(e, 540 + 3), this.extensionFlag[0] && (this.extensionSize = this.getExtensionSize(e), this.extensionCode = this.getExtensionCode(e)));
};
g0.NIFTI2.prototype.toFormattedString = function() {
  var i = g0.Utils.formatNumber, e = "";
  return e += "Datatype = " + +this.datatypeCode + " (" + this.getDatatypeCodeString(this.datatypeCode) + `)
`, e += "Bits Per Voxel =  = " + this.numBitsPerVoxel + `
`, e += "Image Dimensions (1-8): " + this.dims[0] + ", " + this.dims[1] + ", " + this.dims[2] + ", " + this.dims[3] + ", " + this.dims[4] + ", " + this.dims[5] + ", " + this.dims[6] + ", " + this.dims[7] + `
`, e += "Intent Parameters (1-3): " + this.intent_p1 + ", " + this.intent_p2 + ", " + this.intent_p3 + `
`, e += "Voxel Dimensions (1-8): " + i(this.pixDims[0]) + ", " + i(this.pixDims[1]) + ", " + i(this.pixDims[2]) + ", " + i(this.pixDims[3]) + ", " + i(this.pixDims[4]) + ", " + i(this.pixDims[5]) + ", " + i(this.pixDims[6]) + ", " + i(this.pixDims[7]) + `
`, e += "Image Offset = " + this.vox_offset + `
`, e += "Data Scale:  Slope = " + i(this.scl_slope) + "  Intercept = " + i(this.scl_inter) + `
`, e += "Display Range:  Max = " + i(this.cal_max) + "  Min = " + i(this.cal_min) + `
`, e += "Slice Duration = " + this.slice_duration + `
`, e += "Time Axis Shift = " + this.toffset + `
`, e += "Slice Start = " + this.slice_start + `
`, e += "Slice End = " + this.slice_end + `
`, e += 'Description: "' + this.description + `"
`, e += 'Auxiliary File: "' + this.aux_file + `"
`, e += "Q-Form Code = " + this.qform_code + " (" + this.getTransformCodeString(this.qform_code) + `)
`, e += "S-Form Code = " + this.sform_code + " (" + this.getTransformCodeString(this.sform_code) + `)
`, e += "Quaternion Parameters:  b = " + i(this.quatern_b) + "  c = " + i(this.quatern_c) + "  d = " + i(this.quatern_d) + `
`, e += "Quaternion Offsets:  x = " + this.qoffset_x + "  y = " + this.qoffset_y + "  z = " + this.qoffset_z + `
`, e += "S-Form Parameters X: " + i(this.affine[0][0]) + ", " + i(this.affine[0][1]) + ", " + i(this.affine[0][2]) + ", " + i(this.affine[0][3]) + `
`, e += "S-Form Parameters Y: " + i(this.affine[1][0]) + ", " + i(this.affine[1][1]) + ", " + i(this.affine[1][2]) + ", " + i(this.affine[1][3]) + `
`, e += "S-Form Parameters Z: " + i(this.affine[2][0]) + ", " + i(this.affine[2][1]) + ", " + i(this.affine[2][2]) + ", " + i(this.affine[2][3]) + `
`, e += "Slice Code = " + this.slice_code + `
`, e += "Units Code = " + this.xyzt_units + " (" + this.getUnitsCodeString(
    g0.NIFTI1.SPATIAL_UNITS_MASK & this.xyzt_units
  ) + ", " + this.getUnitsCodeString(
    g0.NIFTI1.TEMPORAL_UNITS_MASK & this.xyzt_units
  ) + `)
`, e += "Intent Code = " + this.intent_code + `
`, e += 'Intent Name: "' + this.intent_name + `"
`, e += "Dim Info = " + this.dim_info + `
`, e;
};
g0.NIFTI2.prototype.getExtensionLocation = function() {
  return g0.NIFTI2.MAGIC_COOKIE + 4;
};
g0.NIFTI2.prototype.getExtensionSize = g0.NIFTI1.prototype.getExtensionSize;
g0.NIFTI2.prototype.getExtensionCode = g0.NIFTI1.prototype.getExtensionCode;
g0.NIFTI2.prototype.getDatatypeCodeString = g0.NIFTI1.prototype.getDatatypeCodeString;
g0.NIFTI2.prototype.getTransformCodeString = g0.NIFTI1.prototype.getTransformCodeString;
g0.NIFTI2.prototype.getUnitsCodeString = g0.NIFTI1.prototype.getUnitsCodeString;
g0.NIFTI2.prototype.getQformMat = g0.NIFTI1.prototype.getQformMat;
g0.NIFTI2.prototype.convertNiftiQFormToNiftiSForm = g0.NIFTI1.prototype.convertNiftiQFormToNiftiSForm;
g0.NIFTI2.prototype.convertNiftiSFormToNEMA = g0.NIFTI1.prototype.convertNiftiSFormToNEMA;
g0.NIFTI2.prototype.nifti_mat33_mul = g0.NIFTI1.prototype.nifti_mat33_mul;
g0.NIFTI2.prototype.nifti_mat33_determ = g0.NIFTI1.prototype.nifti_mat33_determ;
var gT = typeof Wr;
gT !== "undefined" && Wr.exports && (Wr.exports = g0.NIFTI2);
var _T = Wr.exports, X0 = X0 || {};
X0.NIFTI1 = X0.NIFTI1 || kd;
X0.NIFTI2 = X0.NIFTI2 || _T;
X0.Utils = X0.Utils || o4;
var Z5 = Z5 || (typeof require < "u" ? Z5 : null);
X0.isNIFTI1 = function(i) {
  var e, t, n, s;
  return i.byteLength < X0.NIFTI1.STANDARD_HEADER_SIZE ? !1 : (e = new DataView(i), e && (t = e.getUint8(X0.NIFTI1.MAGIC_NUMBER_LOCATION)), n = e.getUint8(X0.NIFTI1.MAGIC_NUMBER_LOCATION + 1), s = e.getUint8(X0.NIFTI1.MAGIC_NUMBER_LOCATION + 2), t === X0.NIFTI1.MAGIC_NUMBER[0] && n === X0.NIFTI1.MAGIC_NUMBER[1] && s === X0.NIFTI1.MAGIC_NUMBER[2]);
};
X0.isNIFTI2 = function(i) {
  var e, t, n, s;
  return i.byteLength < X0.NIFTI1.STANDARD_HEADER_SIZE ? !1 : (e = new DataView(i), t = e.getUint8(X0.NIFTI2.MAGIC_NUMBER_LOCATION), n = e.getUint8(X0.NIFTI2.MAGIC_NUMBER_LOCATION + 1), s = e.getUint8(X0.NIFTI2.MAGIC_NUMBER_LOCATION + 2), t === X0.NIFTI2.MAGIC_NUMBER[0] && n === X0.NIFTI2.MAGIC_NUMBER[1] && s === X0.NIFTI2.MAGIC_NUMBER[2]);
};
X0.isNIFTI = function(i) {
  return X0.isNIFTI1(i) || X0.isNIFTI2(i);
};
X0.isCompressed = function(i) {
  var e, t, n;
  return !!(i && (e = new DataView(i), t = e.getUint8(0), n = e.getUint8(1), t === X0.Utils.GUNZIP_MAGIC_COOKIE1 || n === X0.Utils.GUNZIP_MAGIC_COOKIE2));
};
X0.decompress = function(i) {
  return Z5.inflate(i).buffer;
};
X0.readHeader = function(i) {
  var e = null;
  return X0.isCompressed(i) && (i = X0.decompress(i)), X0.isNIFTI1(i) ? e = new X0.NIFTI1() : X0.isNIFTI2(i) && (e = new X0.NIFTI2()), e ? e.readHeader(i) : console.error("That file does not appear to be NIFTI!"), e;
};
X0.hasExtension = function(i) {
  return i.extensionFlag[0] != 0;
};
X0.readImage = function(i, e) {
  var t = i.vox_offset, n = 1, s = 1;
  i.dims[4] && (n = i.dims[4]), i.dims[5] && (s = i.dims[5]);
  var r = i.dims[1] * i.dims[2] * i.dims[3] * n * s * (i.numBitsPerVoxel / 8);
  return e.slice(t, t + r);
};
X0.readExtension = function(i, e) {
  var t = i.getExtensionLocation(), n = i.extensionSize;
  return e.slice(t, t + n);
};
X0.readExtensionData = function(i, e) {
  var t = i.getExtensionLocation(), n = i.extensionSize;
  return e.slice(t + 8, t + n - 8);
};
var dn = {};
(function(i) {
  var e = typeof Uint8Array < "u" && typeof Uint16Array < "u" && typeof Int32Array < "u";
  i.assign = function(s) {
    for (var r = Array.prototype.slice.call(arguments, 1); r.length; ) {
      var a = r.shift();
      if (a) {
        if (typeof a != "object")
          throw new TypeError(a + "must be non-object");
        for (var o in a)
          a.hasOwnProperty(o) && (s[o] = a[o]);
      }
    }
    return s;
  }, i.shrinkBuf = function(s, r) {
    return s.length === r ? s : s.subarray ? s.subarray(0, r) : (s.length = r, s);
  };
  var t = {
    arraySet: function(s, r, a, o, c) {
      if (r.subarray && s.subarray) {
        s.set(r.subarray(a, a + o), c);
        return;
      }
      for (var l = 0; l < o; l++)
        s[c + l] = r[a + l];
    },
    // Join array of chunks to single array.
    flattenChunks: function(s) {
      var r, a, o, c, l, h;
      for (o = 0, r = 0, a = s.length; r < a; r++)
        o += s[r].length;
      for (h = new Uint8Array(o), c = 0, r = 0, a = s.length; r < a; r++)
        l = s[r], h.set(l, c), c += l.length;
      return h;
    }
  }, n = {
    arraySet: function(s, r, a, o, c) {
      for (var l = 0; l < o; l++)
        s[c + l] = r[a + l];
    },
    // Join array of chunks to single array.
    flattenChunks: function(s) {
      return [].concat.apply([], s);
    }
  };
  i.setTyped = function(s) {
    s ? (i.Buf8 = Uint8Array, i.Buf16 = Uint16Array, i.Buf32 = Int32Array, i.assign(i, t)) : (i.Buf8 = Array, i.Buf16 = Array, i.Buf32 = Array, i.assign(i, n));
  }, i.setTyped(e);
})(dn);
var Js = {}, B1 = {}, c8 = {}, vT = dn, yT = 4, wl = 0, Ml = 1, xT = 2;
function h8(i) {
  for (var e = i.length; --e >= 0; )
    i[e] = 0;
}
var bT = 0, Bd = 1, wT = 2, MT = 3, ST = 258, l4 = 29, Ks = 256, Es = Ks + 1 + l4, Y9 = 30, c4 = 19, Vd = 2 * Es + 1, Ii = 15, O3 = 16, ET = 7, h4 = 256, Hd = 16, Gd = 17, Wd = 18, q5 = (
  /* extra bits for each length code */
  [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0]
), Cr = (
  /* extra bits for each distance code */
  [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]
), TT = (
  /* extra bits for each bit length code */
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7]
), Xd = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15], AT = 512, Q1 = new Array((Es + 2) * 2);
h8(Q1);
var j8 = new Array(Y9 * 2);
h8(j8);
var Ts = new Array(AT);
h8(Ts);
var As = new Array(ST - MT + 1);
h8(As);
var u4 = new Array(l4);
h8(u4);
var Xr = new Array(Y9);
h8(Xr);
function U3(i, e, t, n, s) {
  this.static_tree = i, this.extra_bits = e, this.extra_base = t, this.elems = n, this.max_length = s, this.has_stree = i && i.length;
}
var Yd, Zd, qd;
function F3(i, e) {
  this.dyn_tree = i, this.max_code = 0, this.stat_desc = e;
}
function $d(i) {
  return i < 256 ? Ts[i] : Ts[256 + (i >>> 7)];
}
function Cs(i, e) {
  i.pending_buf[i.pending++] = e & 255, i.pending_buf[i.pending++] = e >>> 8 & 255;
}
function At(i, e, t) {
  i.bi_valid > O3 - t ? (i.bi_buf |= e << i.bi_valid & 65535, Cs(i, i.bi_buf), i.bi_buf = e >> O3 - i.bi_valid, i.bi_valid += t - O3) : (i.bi_buf |= e << i.bi_valid & 65535, i.bi_valid += t);
}
function L1(i, e, t) {
  At(
    i,
    t[e * 2],
    t[e * 2 + 1]
    /*.Len*/
  );
}
function jd(i, e) {
  var t = 0;
  do
    t |= i & 1, i >>>= 1, t <<= 1;
  while (--e > 0);
  return t >>> 1;
}
function CT(i) {
  i.bi_valid === 16 ? (Cs(i, i.bi_buf), i.bi_buf = 0, i.bi_valid = 0) : i.bi_valid >= 8 && (i.pending_buf[i.pending++] = i.bi_buf & 255, i.bi_buf >>= 8, i.bi_valid -= 8);
}
function IT(i, e) {
  var t = e.dyn_tree, n = e.max_code, s = e.stat_desc.static_tree, r = e.stat_desc.has_stree, a = e.stat_desc.extra_bits, o = e.stat_desc.extra_base, c = e.stat_desc.max_length, l, h, d, u, f, p, _ = 0;
  for (u = 0; u <= Ii; u++)
    i.bl_count[u] = 0;
  for (t[i.heap[i.heap_max] * 2 + 1] = 0, l = i.heap_max + 1; l < Vd; l++)
    h = i.heap[l], u = t[t[h * 2 + 1] * 2 + 1] + 1, u > c && (u = c, _++), t[h * 2 + 1] = u, !(h > n) && (i.bl_count[u]++, f = 0, h >= o && (f = a[h - o]), p = t[h * 2], i.opt_len += p * (u + f), r && (i.static_len += p * (s[h * 2 + 1] + f)));
  if (_ !== 0) {
    do {
      for (u = c - 1; i.bl_count[u] === 0; )
        u--;
      i.bl_count[u]--, i.bl_count[u + 1] += 2, i.bl_count[c]--, _ -= 2;
    } while (_ > 0);
    for (u = c; u !== 0; u--)
      for (h = i.bl_count[u]; h !== 0; )
        d = i.heap[--l], !(d > n) && (t[d * 2 + 1] !== u && (i.opt_len += (u - t[d * 2 + 1]) * t[d * 2], t[d * 2 + 1] = u), h--);
  }
}
function Jd(i, e, t) {
  var n = new Array(Ii + 1), s = 0, r, a;
  for (r = 1; r <= Ii; r++)
    n[r] = s = s + t[r - 1] << 1;
  for (a = 0; a <= e; a++) {
    var o = i[a * 2 + 1];
    o !== 0 && (i[a * 2] = jd(n[o]++, o));
  }
}
function LT() {
  var i, e, t, n, s, r = new Array(Ii + 1);
  for (t = 0, n = 0; n < l4 - 1; n++)
    for (u4[n] = t, i = 0; i < 1 << q5[n]; i++)
      As[t++] = n;
  for (As[t - 1] = n, s = 0, n = 0; n < 16; n++)
    for (Xr[n] = s, i = 0; i < 1 << Cr[n]; i++)
      Ts[s++] = n;
  for (s >>= 7; n < Y9; n++)
    for (Xr[n] = s << 7, i = 0; i < 1 << Cr[n] - 7; i++)
      Ts[256 + s++] = n;
  for (e = 0; e <= Ii; e++)
    r[e] = 0;
  for (i = 0; i <= 143; )
    Q1[i * 2 + 1] = 8, i++, r[8]++;
  for (; i <= 255; )
    Q1[i * 2 + 1] = 9, i++, r[9]++;
  for (; i <= 279; )
    Q1[i * 2 + 1] = 7, i++, r[7]++;
  for (; i <= 287; )
    Q1[i * 2 + 1] = 8, i++, r[8]++;
  for (Jd(Q1, Es + 1, r), i = 0; i < Y9; i++)
    j8[i * 2 + 1] = 5, j8[i * 2] = jd(i, 5);
  Yd = new U3(Q1, q5, Ks + 1, Es, Ii), Zd = new U3(j8, Cr, 0, Y9, Ii), qd = new U3(new Array(0), TT, 0, c4, ET);
}
function Kd(i) {
  var e;
  for (e = 0; e < Es; e++)
    i.dyn_ltree[e * 2] = 0;
  for (e = 0; e < Y9; e++)
    i.dyn_dtree[e * 2] = 0;
  for (e = 0; e < c4; e++)
    i.bl_tree[e * 2] = 0;
  i.dyn_ltree[h4 * 2] = 1, i.opt_len = i.static_len = 0, i.last_lit = i.matches = 0;
}
function Qd(i) {
  i.bi_valid > 8 ? Cs(i, i.bi_buf) : i.bi_valid > 0 && (i.pending_buf[i.pending++] = i.bi_buf), i.bi_buf = 0, i.bi_valid = 0;
}
function RT(i, e, t, n) {
  Qd(i), n && (Cs(i, t), Cs(i, ~t)), vT.arraySet(i.pending_buf, i.window, e, t, i.pending), i.pending += t;
}
function Sl(i, e, t, n) {
  var s = e * 2, r = t * 2;
  return i[s] < i[r] || i[s] === i[r] && n[e] <= n[t];
}
function z3(i, e, t) {
  for (var n = i.heap[t], s = t << 1; s <= i.heap_len && (s < i.heap_len && Sl(e, i.heap[s + 1], i.heap[s], i.depth) && s++, !Sl(e, n, i.heap[s], i.depth)); )
    i.heap[t] = i.heap[s], t = s, s <<= 1;
  i.heap[t] = n;
}
function El(i, e, t) {
  var n, s, r = 0, a, o;
  if (i.last_lit !== 0)
    do
      n = i.pending_buf[i.d_buf + r * 2] << 8 | i.pending_buf[i.d_buf + r * 2 + 1], s = i.pending_buf[i.l_buf + r], r++, n === 0 ? L1(i, s, e) : (a = As[s], L1(i, a + Ks + 1, e), o = q5[a], o !== 0 && (s -= u4[a], At(i, s, o)), n--, a = $d(n), L1(i, a, t), o = Cr[a], o !== 0 && (n -= Xr[a], At(i, n, o)));
    while (r < i.last_lit);
  L1(i, h4, e);
}
function $5(i, e) {
  var t = e.dyn_tree, n = e.stat_desc.static_tree, s = e.stat_desc.has_stree, r = e.stat_desc.elems, a, o, c = -1, l;
  for (i.heap_len = 0, i.heap_max = Vd, a = 0; a < r; a++)
    t[a * 2] !== 0 ? (i.heap[++i.heap_len] = c = a, i.depth[a] = 0) : t[a * 2 + 1] = 0;
  for (; i.heap_len < 2; )
    l = i.heap[++i.heap_len] = c < 2 ? ++c : 0, t[l * 2] = 1, i.depth[l] = 0, i.opt_len--, s && (i.static_len -= n[l * 2 + 1]);
  for (e.max_code = c, a = i.heap_len >> 1; a >= 1; a--)
    z3(i, t, a);
  l = r;
  do
    a = i.heap[
      1
      /*SMALLEST*/
    ], i.heap[
      1
      /*SMALLEST*/
    ] = i.heap[i.heap_len--], z3(
      i,
      t,
      1
      /*SMALLEST*/
    ), o = i.heap[
      1
      /*SMALLEST*/
    ], i.heap[--i.heap_max] = a, i.heap[--i.heap_max] = o, t[l * 2] = t[a * 2] + t[o * 2], i.depth[l] = (i.depth[a] >= i.depth[o] ? i.depth[a] : i.depth[o]) + 1, t[a * 2 + 1] = t[o * 2 + 1] = l, i.heap[
      1
      /*SMALLEST*/
    ] = l++, z3(
      i,
      t,
      1
      /*SMALLEST*/
    );
  while (i.heap_len >= 2);
  i.heap[--i.heap_max] = i.heap[
    1
    /*SMALLEST*/
  ], IT(i, e), Jd(t, c, i.bl_count);
}
function Tl(i, e, t) {
  var n, s = -1, r, a = e[0 * 2 + 1], o = 0, c = 7, l = 4;
  for (a === 0 && (c = 138, l = 3), e[(t + 1) * 2 + 1] = 65535, n = 0; n <= t; n++)
    r = a, a = e[(n + 1) * 2 + 1], !(++o < c && r === a) && (o < l ? i.bl_tree[r * 2] += o : r !== 0 ? (r !== s && i.bl_tree[r * 2]++, i.bl_tree[Hd * 2]++) : o <= 10 ? i.bl_tree[Gd * 2]++ : i.bl_tree[Wd * 2]++, o = 0, s = r, a === 0 ? (c = 138, l = 3) : r === a ? (c = 6, l = 3) : (c = 7, l = 4));
}
function Al(i, e, t) {
  var n, s = -1, r, a = e[0 * 2 + 1], o = 0, c = 7, l = 4;
  for (a === 0 && (c = 138, l = 3), n = 0; n <= t; n++)
    if (r = a, a = e[(n + 1) * 2 + 1], !(++o < c && r === a)) {
      if (o < l)
        do
          L1(i, r, i.bl_tree);
        while (--o !== 0);
      else
        r !== 0 ? (r !== s && (L1(i, r, i.bl_tree), o--), L1(i, Hd, i.bl_tree), At(i, o - 3, 2)) : o <= 10 ? (L1(i, Gd, i.bl_tree), At(i, o - 3, 3)) : (L1(i, Wd, i.bl_tree), At(i, o - 11, 7));
      o = 0, s = r, a === 0 ? (c = 138, l = 3) : r === a ? (c = 6, l = 3) : (c = 7, l = 4);
    }
}
function PT(i) {
  var e;
  for (Tl(i, i.dyn_ltree, i.l_desc.max_code), Tl(i, i.dyn_dtree, i.d_desc.max_code), $5(i, i.bl_desc), e = c4 - 1; e >= 3 && i.bl_tree[Xd[e] * 2 + 1] === 0; e--)
    ;
  return i.opt_len += 3 * (e + 1) + 5 + 5 + 4, e;
}
function DT(i, e, t, n) {
  var s;
  for (At(i, e - 257, 5), At(i, t - 1, 5), At(i, n - 4, 4), s = 0; s < n; s++)
    At(i, i.bl_tree[Xd[s] * 2 + 1], 3);
  Al(i, i.dyn_ltree, e - 1), Al(i, i.dyn_dtree, t - 1);
}
function NT(i) {
  var e = 4093624447, t;
  for (t = 0; t <= 31; t++, e >>>= 1)
    if (e & 1 && i.dyn_ltree[t * 2] !== 0)
      return wl;
  if (i.dyn_ltree[9 * 2] !== 0 || i.dyn_ltree[10 * 2] !== 0 || i.dyn_ltree[13 * 2] !== 0)
    return Ml;
  for (t = 32; t < Ks; t++)
    if (i.dyn_ltree[t * 2] !== 0)
      return Ml;
  return wl;
}
var Cl = !1;
function OT(i) {
  Cl || (LT(), Cl = !0), i.l_desc = new F3(i.dyn_ltree, Yd), i.d_desc = new F3(i.dyn_dtree, Zd), i.bl_desc = new F3(i.bl_tree, qd), i.bi_buf = 0, i.bi_valid = 0, Kd(i);
}
function ef(i, e, t, n) {
  At(i, (bT << 1) + (n ? 1 : 0), 3), RT(i, e, t, !0);
}
function UT(i) {
  At(i, Bd << 1, 3), L1(i, h4, Q1), CT(i);
}
function FT(i, e, t, n) {
  var s, r, a = 0;
  i.level > 0 ? (i.strm.data_type === xT && (i.strm.data_type = NT(i)), $5(i, i.l_desc), $5(i, i.d_desc), a = PT(i), s = i.opt_len + 3 + 7 >>> 3, r = i.static_len + 3 + 7 >>> 3, r <= s && (s = r)) : s = r = t + 5, t + 4 <= s && e !== -1 ? ef(i, e, t, n) : i.strategy === yT || r === s ? (At(i, (Bd << 1) + (n ? 1 : 0), 3), El(i, Q1, j8)) : (At(i, (wT << 1) + (n ? 1 : 0), 3), DT(i, i.l_desc.max_code + 1, i.d_desc.max_code + 1, a + 1), El(i, i.dyn_ltree, i.dyn_dtree)), Kd(i), n && Qd(i);
}
function zT(i, e, t) {
  return i.pending_buf[i.d_buf + i.last_lit * 2] = e >>> 8 & 255, i.pending_buf[i.d_buf + i.last_lit * 2 + 1] = e & 255, i.pending_buf[i.l_buf + i.last_lit] = t & 255, i.last_lit++, e === 0 ? i.dyn_ltree[t * 2]++ : (i.matches++, e--, i.dyn_ltree[(As[t] + Ks + 1) * 2]++, i.dyn_dtree[$d(e) * 2]++), i.last_lit === i.lit_bufsize - 1;
}
c8._tr_init = OT;
c8._tr_stored_block = ef;
c8._tr_flush_block = FT;
c8._tr_tally = zT;
c8._tr_align = UT;
function kT(i, e, t, n) {
  for (var s = i & 65535 | 0, r = i >>> 16 & 65535 | 0, a = 0; t !== 0; ) {
    a = t > 2e3 ? 2e3 : t, t -= a;
    do
      s = s + e[n++] | 0, r = r + s | 0;
    while (--a);
    s %= 65521, r %= 65521;
  }
  return s | r << 16 | 0;
}
var tf = kT;
function BT() {
  for (var i, e = [], t = 0; t < 256; t++) {
    i = t;
    for (var n = 0; n < 8; n++)
      i = i & 1 ? 3988292384 ^ i >>> 1 : i >>> 1;
    e[t] = i;
  }
  return e;
}
var VT = BT();
function HT(i, e, t, n) {
  var s = VT, r = n + t;
  i ^= -1;
  for (var a = n; a < r; a++)
    i = i >>> 8 ^ s[(i ^ e[a]) & 255];
  return i ^ -1;
}
var nf = HT, d4 = {
  2: "need dictionary",
  /* Z_NEED_DICT       2  */
  1: "stream end",
  /* Z_STREAM_END      1  */
  0: "",
  /* Z_OK              0  */
  "-1": "file error",
  /* Z_ERRNO         (-1) */
  "-2": "stream error",
  /* Z_STREAM_ERROR  (-2) */
  "-3": "data error",
  /* Z_DATA_ERROR    (-3) */
  "-4": "insufficient memory",
  /* Z_MEM_ERROR     (-4) */
  "-5": "buffer error",
  /* Z_BUF_ERROR     (-5) */
  "-6": "incompatible version"
  /* Z_VERSION_ERROR (-6) */
}, yt = dn, jt = c8, sf = tf, Ln = nf, GT = d4, Ki = 0, WT = 1, XT = 3, Xn = 4, Il = 5, R1 = 0, Ll = 1, O1 = -2, YT = -3, k3 = -5, ZT = -1, qT = 1, ar = 2, $T = 3, jT = 4, JT = 0, KT = 2, x6 = 8, QT = 9, eA = 15, tA = 8, nA = 29, iA = 256, j5 = iA + 1 + nA, sA = 30, rA = 19, aA = 2 * j5 + 1, oA = 15, ie = 3, Bn = 258, a1 = Bn + ie + 1, lA = 32, b6 = 42, J5 = 69, Ir = 73, Lr = 91, Rr = 103, Li = 113, z8 = 666, it = 1, Qs = 2, Gi = 3, u8 = 4, cA = 3;
function Vn(i, e) {
  return i.msg = GT[e], e;
}
function Rl(i) {
  return (i << 1) - (i > 4 ? 9 : 0);
}
function On(i) {
  for (var e = i.length; --e >= 0; )
    i[e] = 0;
}
function Rn(i) {
  var e = i.state, t = e.pending;
  t > i.avail_out && (t = i.avail_out), t !== 0 && (yt.arraySet(i.output, e.pending_buf, e.pending_out, t, i.next_out), i.next_out += t, e.pending_out += t, i.total_out += t, i.avail_out -= t, e.pending -= t, e.pending === 0 && (e.pending_out = 0));
}
function st(i, e) {
  jt._tr_flush_block(i, i.block_start >= 0 ? i.block_start : -1, i.strstart - i.block_start, e), i.block_start = i.strstart, Rn(i.strm);
}
function ue(i, e) {
  i.pending_buf[i.pending++] = e;
}
function L8(i, e) {
  i.pending_buf[i.pending++] = e >>> 8 & 255, i.pending_buf[i.pending++] = e & 255;
}
function hA(i, e, t, n) {
  var s = i.avail_in;
  return s > n && (s = n), s === 0 ? 0 : (i.avail_in -= s, yt.arraySet(e, i.input, i.next_in, s, t), i.state.wrap === 1 ? i.adler = sf(i.adler, e, s, t) : i.state.wrap === 2 && (i.adler = Ln(i.adler, e, s, t)), i.next_in += s, i.total_in += s, s);
}
function rf(i, e) {
  var t = i.max_chain_length, n = i.strstart, s, r, a = i.prev_length, o = i.nice_match, c = i.strstart > i.w_size - a1 ? i.strstart - (i.w_size - a1) : 0, l = i.window, h = i.w_mask, d = i.prev, u = i.strstart + Bn, f = l[n + a - 1], p = l[n + a];
  i.prev_length >= i.good_match && (t >>= 2), o > i.lookahead && (o = i.lookahead);
  do
    if (s = e, !(l[s + a] !== p || l[s + a - 1] !== f || l[s] !== l[n] || l[++s] !== l[n + 1])) {
      n += 2, s++;
      do
        ;
      while (l[++n] === l[++s] && l[++n] === l[++s] && l[++n] === l[++s] && l[++n] === l[++s] && l[++n] === l[++s] && l[++n] === l[++s] && l[++n] === l[++s] && l[++n] === l[++s] && n < u);
      if (r = Bn - (u - n), n = u - Bn, r > a) {
        if (i.match_start = e, a = r, r >= o)
          break;
        f = l[n + a - 1], p = l[n + a];
      }
    }
  while ((e = d[e & h]) > c && --t !== 0);
  return a <= i.lookahead ? a : i.lookahead;
}
function Wi(i) {
  var e = i.w_size, t, n, s, r, a;
  do {
    if (r = i.window_size - i.lookahead - i.strstart, i.strstart >= e + (e - a1)) {
      yt.arraySet(i.window, i.window, e, e, 0), i.match_start -= e, i.strstart -= e, i.block_start -= e, n = i.hash_size, t = n;
      do
        s = i.head[--t], i.head[t] = s >= e ? s - e : 0;
      while (--n);
      n = e, t = n;
      do
        s = i.prev[--t], i.prev[t] = s >= e ? s - e : 0;
      while (--n);
      r += e;
    }
    if (i.strm.avail_in === 0)
      break;
    if (n = hA(i.strm, i.window, i.strstart + i.lookahead, r), i.lookahead += n, i.lookahead + i.insert >= ie)
      for (a = i.strstart - i.insert, i.ins_h = i.window[a], i.ins_h = (i.ins_h << i.hash_shift ^ i.window[a + 1]) & i.hash_mask; i.insert && (i.ins_h = (i.ins_h << i.hash_shift ^ i.window[a + ie - 1]) & i.hash_mask, i.prev[a & i.w_mask] = i.head[i.ins_h], i.head[i.ins_h] = a, a++, i.insert--, !(i.lookahead + i.insert < ie)); )
        ;
  } while (i.lookahead < a1 && i.strm.avail_in !== 0);
}
function uA(i, e) {
  var t = 65535;
  for (t > i.pending_buf_size - 5 && (t = i.pending_buf_size - 5); ; ) {
    if (i.lookahead <= 1) {
      if (Wi(i), i.lookahead === 0 && e === Ki)
        return it;
      if (i.lookahead === 0)
        break;
    }
    i.strstart += i.lookahead, i.lookahead = 0;
    var n = i.block_start + t;
    if ((i.strstart === 0 || i.strstart >= n) && (i.lookahead = i.strstart - n, i.strstart = n, st(i, !1), i.strm.avail_out === 0) || i.strstart - i.block_start >= i.w_size - a1 && (st(i, !1), i.strm.avail_out === 0))
      return it;
  }
  return i.insert = 0, e === Xn ? (st(i, !0), i.strm.avail_out === 0 ? Gi : u8) : (i.strstart > i.block_start && (st(i, !1), i.strm.avail_out), it);
}
function B3(i, e) {
  for (var t, n; ; ) {
    if (i.lookahead < a1) {
      if (Wi(i), i.lookahead < a1 && e === Ki)
        return it;
      if (i.lookahead === 0)
        break;
    }
    if (t = 0, i.lookahead >= ie && (i.ins_h = (i.ins_h << i.hash_shift ^ i.window[i.strstart + ie - 1]) & i.hash_mask, t = i.prev[i.strstart & i.w_mask] = i.head[i.ins_h], i.head[i.ins_h] = i.strstart), t !== 0 && i.strstart - t <= i.w_size - a1 && (i.match_length = rf(i, t)), i.match_length >= ie)
      if (n = jt._tr_tally(i, i.strstart - i.match_start, i.match_length - ie), i.lookahead -= i.match_length, i.match_length <= i.max_lazy_match && i.lookahead >= ie) {
        i.match_length--;
        do
          i.strstart++, i.ins_h = (i.ins_h << i.hash_shift ^ i.window[i.strstart + ie - 1]) & i.hash_mask, t = i.prev[i.strstart & i.w_mask] = i.head[i.ins_h], i.head[i.ins_h] = i.strstart;
        while (--i.match_length !== 0);
        i.strstart++;
      } else
        i.strstart += i.match_length, i.match_length = 0, i.ins_h = i.window[i.strstart], i.ins_h = (i.ins_h << i.hash_shift ^ i.window[i.strstart + 1]) & i.hash_mask;
    else
      n = jt._tr_tally(i, 0, i.window[i.strstart]), i.lookahead--, i.strstart++;
    if (n && (st(i, !1), i.strm.avail_out === 0))
      return it;
  }
  return i.insert = i.strstart < ie - 1 ? i.strstart : ie - 1, e === Xn ? (st(i, !0), i.strm.avail_out === 0 ? Gi : u8) : i.last_lit && (st(i, !1), i.strm.avail_out === 0) ? it : Qs;
}
function C9(i, e) {
  for (var t, n, s; ; ) {
    if (i.lookahead < a1) {
      if (Wi(i), i.lookahead < a1 && e === Ki)
        return it;
      if (i.lookahead === 0)
        break;
    }
    if (t = 0, i.lookahead >= ie && (i.ins_h = (i.ins_h << i.hash_shift ^ i.window[i.strstart + ie - 1]) & i.hash_mask, t = i.prev[i.strstart & i.w_mask] = i.head[i.ins_h], i.head[i.ins_h] = i.strstart), i.prev_length = i.match_length, i.prev_match = i.match_start, i.match_length = ie - 1, t !== 0 && i.prev_length < i.max_lazy_match && i.strstart - t <= i.w_size - a1 && (i.match_length = rf(i, t), i.match_length <= 5 && (i.strategy === qT || i.match_length === ie && i.strstart - i.match_start > 4096) && (i.match_length = ie - 1)), i.prev_length >= ie && i.match_length <= i.prev_length) {
      s = i.strstart + i.lookahead - ie, n = jt._tr_tally(i, i.strstart - 1 - i.prev_match, i.prev_length - ie), i.lookahead -= i.prev_length - 1, i.prev_length -= 2;
      do
        ++i.strstart <= s && (i.ins_h = (i.ins_h << i.hash_shift ^ i.window[i.strstart + ie - 1]) & i.hash_mask, t = i.prev[i.strstart & i.w_mask] = i.head[i.ins_h], i.head[i.ins_h] = i.strstart);
      while (--i.prev_length !== 0);
      if (i.match_available = 0, i.match_length = ie - 1, i.strstart++, n && (st(i, !1), i.strm.avail_out === 0))
        return it;
    } else if (i.match_available) {
      if (n = jt._tr_tally(i, 0, i.window[i.strstart - 1]), n && st(i, !1), i.strstart++, i.lookahead--, i.strm.avail_out === 0)
        return it;
    } else
      i.match_available = 1, i.strstart++, i.lookahead--;
  }
  return i.match_available && (n = jt._tr_tally(i, 0, i.window[i.strstart - 1]), i.match_available = 0), i.insert = i.strstart < ie - 1 ? i.strstart : ie - 1, e === Xn ? (st(i, !0), i.strm.avail_out === 0 ? Gi : u8) : i.last_lit && (st(i, !1), i.strm.avail_out === 0) ? it : Qs;
}
function dA(i, e) {
  for (var t, n, s, r, a = i.window; ; ) {
    if (i.lookahead <= Bn) {
      if (Wi(i), i.lookahead <= Bn && e === Ki)
        return it;
      if (i.lookahead === 0)
        break;
    }
    if (i.match_length = 0, i.lookahead >= ie && i.strstart > 0 && (s = i.strstart - 1, n = a[s], n === a[++s] && n === a[++s] && n === a[++s])) {
      r = i.strstart + Bn;
      do
        ;
      while (n === a[++s] && n === a[++s] && n === a[++s] && n === a[++s] && n === a[++s] && n === a[++s] && n === a[++s] && n === a[++s] && s < r);
      i.match_length = Bn - (r - s), i.match_length > i.lookahead && (i.match_length = i.lookahead);
    }
    if (i.match_length >= ie ? (t = jt._tr_tally(i, 1, i.match_length - ie), i.lookahead -= i.match_length, i.strstart += i.match_length, i.match_length = 0) : (t = jt._tr_tally(i, 0, i.window[i.strstart]), i.lookahead--, i.strstart++), t && (st(i, !1), i.strm.avail_out === 0))
      return it;
  }
  return i.insert = 0, e === Xn ? (st(i, !0), i.strm.avail_out === 0 ? Gi : u8) : i.last_lit && (st(i, !1), i.strm.avail_out === 0) ? it : Qs;
}
function fA(i, e) {
  for (var t; ; ) {
    if (i.lookahead === 0 && (Wi(i), i.lookahead === 0)) {
      if (e === Ki)
        return it;
      break;
    }
    if (i.match_length = 0, t = jt._tr_tally(i, 0, i.window[i.strstart]), i.lookahead--, i.strstart++, t && (st(i, !1), i.strm.avail_out === 0))
      return it;
  }
  return i.insert = 0, e === Xn ? (st(i, !0), i.strm.avail_out === 0 ? Gi : u8) : i.last_lit && (st(i, !1), i.strm.avail_out === 0) ? it : Qs;
}
function b1(i, e, t, n, s) {
  this.good_length = i, this.max_lazy = e, this.nice_length = t, this.max_chain = n, this.func = s;
}
var F9;
F9 = [
  /*      good lazy nice chain */
  new b1(0, 0, 0, 0, uA),
  /* 0 store only */
  new b1(4, 4, 8, 4, B3),
  /* 1 max speed, no lazy matches */
  new b1(4, 5, 16, 8, B3),
  /* 2 */
  new b1(4, 6, 32, 32, B3),
  /* 3 */
  new b1(4, 4, 16, 16, C9),
  /* 4 lazy matches */
  new b1(8, 16, 32, 32, C9),
  /* 5 */
  new b1(8, 16, 128, 128, C9),
  /* 6 */
  new b1(8, 32, 128, 256, C9),
  /* 7 */
  new b1(32, 128, 258, 1024, C9),
  /* 8 */
  new b1(32, 258, 258, 4096, C9)
  /* 9 max compression */
];
function pA(i) {
  i.window_size = 2 * i.w_size, On(i.head), i.max_lazy_match = F9[i.level].max_lazy, i.good_match = F9[i.level].good_length, i.nice_match = F9[i.level].nice_length, i.max_chain_length = F9[i.level].max_chain, i.strstart = 0, i.block_start = 0, i.lookahead = 0, i.insert = 0, i.match_length = i.prev_length = ie - 1, i.match_available = 0, i.ins_h = 0;
}
function mA() {
  this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = x6, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new yt.Buf16(aA * 2), this.dyn_dtree = new yt.Buf16((2 * sA + 1) * 2), this.bl_tree = new yt.Buf16((2 * rA + 1) * 2), On(this.dyn_ltree), On(this.dyn_dtree), On(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new yt.Buf16(oA + 1), this.heap = new yt.Buf16(2 * j5 + 1), On(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new yt.Buf16(2 * j5 + 1), On(this.depth), this.l_buf = 0, this.lit_bufsize = 0, this.last_lit = 0, this.d_buf = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0;
}
function af(i) {
  var e;
  return !i || !i.state ? Vn(i, O1) : (i.total_in = i.total_out = 0, i.data_type = KT, e = i.state, e.pending = 0, e.pending_out = 0, e.wrap < 0 && (e.wrap = -e.wrap), e.status = e.wrap ? b6 : Li, i.adler = e.wrap === 2 ? 0 : 1, e.last_flush = Ki, jt._tr_init(e), R1);
}
function of(i) {
  var e = af(i);
  return e === R1 && pA(i.state), e;
}
function gA(i, e) {
  return !i || !i.state || i.state.wrap !== 2 ? O1 : (i.state.gzhead = e, R1);
}
function lf(i, e, t, n, s, r) {
  if (!i)
    return O1;
  var a = 1;
  if (e === ZT && (e = 6), n < 0 ? (a = 0, n = -n) : n > 15 && (a = 2, n -= 16), s < 1 || s > QT || t !== x6 || n < 8 || n > 15 || e < 0 || e > 9 || r < 0 || r > jT)
    return Vn(i, O1);
  n === 8 && (n = 9);
  var o = new mA();
  return i.state = o, o.strm = i, o.wrap = a, o.gzhead = null, o.w_bits = n, o.w_size = 1 << o.w_bits, o.w_mask = o.w_size - 1, o.hash_bits = s + 7, o.hash_size = 1 << o.hash_bits, o.hash_mask = o.hash_size - 1, o.hash_shift = ~~((o.hash_bits + ie - 1) / ie), o.window = new yt.Buf8(o.w_size * 2), o.head = new yt.Buf16(o.hash_size), o.prev = new yt.Buf16(o.w_size), o.lit_bufsize = 1 << s + 6, o.pending_buf_size = o.lit_bufsize * 4, o.pending_buf = new yt.Buf8(o.pending_buf_size), o.d_buf = 1 * o.lit_bufsize, o.l_buf = (1 + 2) * o.lit_bufsize, o.level = e, o.strategy = r, o.method = t, of(i);
}
function _A(i, e) {
  return lf(i, e, x6, eA, tA, JT);
}
function vA(i, e) {
  var t, n, s, r;
  if (!i || !i.state || e > Il || e < 0)
    return i ? Vn(i, O1) : O1;
  if (n = i.state, !i.output || !i.input && i.avail_in !== 0 || n.status === z8 && e !== Xn)
    return Vn(i, i.avail_out === 0 ? k3 : O1);
  if (n.strm = i, t = n.last_flush, n.last_flush = e, n.status === b6)
    if (n.wrap === 2)
      i.adler = 0, ue(n, 31), ue(n, 139), ue(n, 8), n.gzhead ? (ue(
        n,
        (n.gzhead.text ? 1 : 0) + (n.gzhead.hcrc ? 2 : 0) + (n.gzhead.extra ? 4 : 0) + (n.gzhead.name ? 8 : 0) + (n.gzhead.comment ? 16 : 0)
      ), ue(n, n.gzhead.time & 255), ue(n, n.gzhead.time >> 8 & 255), ue(n, n.gzhead.time >> 16 & 255), ue(n, n.gzhead.time >> 24 & 255), ue(n, n.level === 9 ? 2 : n.strategy >= ar || n.level < 2 ? 4 : 0), ue(n, n.gzhead.os & 255), n.gzhead.extra && n.gzhead.extra.length && (ue(n, n.gzhead.extra.length & 255), ue(n, n.gzhead.extra.length >> 8 & 255)), n.gzhead.hcrc && (i.adler = Ln(i.adler, n.pending_buf, n.pending, 0)), n.gzindex = 0, n.status = J5) : (ue(n, 0), ue(n, 0), ue(n, 0), ue(n, 0), ue(n, 0), ue(n, n.level === 9 ? 2 : n.strategy >= ar || n.level < 2 ? 4 : 0), ue(n, cA), n.status = Li);
    else {
      var a = x6 + (n.w_bits - 8 << 4) << 8, o = -1;
      n.strategy >= ar || n.level < 2 ? o = 0 : n.level < 6 ? o = 1 : n.level === 6 ? o = 2 : o = 3, a |= o << 6, n.strstart !== 0 && (a |= lA), a += 31 - a % 31, n.status = Li, L8(n, a), n.strstart !== 0 && (L8(n, i.adler >>> 16), L8(n, i.adler & 65535)), i.adler = 1;
    }
  if (n.status === J5)
    if (n.gzhead.extra) {
      for (s = n.pending; n.gzindex < (n.gzhead.extra.length & 65535) && !(n.pending === n.pending_buf_size && (n.gzhead.hcrc && n.pending > s && (i.adler = Ln(i.adler, n.pending_buf, n.pending - s, s)), Rn(i), s = n.pending, n.pending === n.pending_buf_size)); )
        ue(n, n.gzhead.extra[n.gzindex] & 255), n.gzindex++;
      n.gzhead.hcrc && n.pending > s && (i.adler = Ln(i.adler, n.pending_buf, n.pending - s, s)), n.gzindex === n.gzhead.extra.length && (n.gzindex = 0, n.status = Ir);
    } else
      n.status = Ir;
  if (n.status === Ir)
    if (n.gzhead.name) {
      s = n.pending;
      do {
        if (n.pending === n.pending_buf_size && (n.gzhead.hcrc && n.pending > s && (i.adler = Ln(i.adler, n.pending_buf, n.pending - s, s)), Rn(i), s = n.pending, n.pending === n.pending_buf_size)) {
          r = 1;
          break;
        }
        n.gzindex < n.gzhead.name.length ? r = n.gzhead.name.charCodeAt(n.gzindex++) & 255 : r = 0, ue(n, r);
      } while (r !== 0);
      n.gzhead.hcrc && n.pending > s && (i.adler = Ln(i.adler, n.pending_buf, n.pending - s, s)), r === 0 && (n.gzindex = 0, n.status = Lr);
    } else
      n.status = Lr;
  if (n.status === Lr)
    if (n.gzhead.comment) {
      s = n.pending;
      do {
        if (n.pending === n.pending_buf_size && (n.gzhead.hcrc && n.pending > s && (i.adler = Ln(i.adler, n.pending_buf, n.pending - s, s)), Rn(i), s = n.pending, n.pending === n.pending_buf_size)) {
          r = 1;
          break;
        }
        n.gzindex < n.gzhead.comment.length ? r = n.gzhead.comment.charCodeAt(n.gzindex++) & 255 : r = 0, ue(n, r);
      } while (r !== 0);
      n.gzhead.hcrc && n.pending > s && (i.adler = Ln(i.adler, n.pending_buf, n.pending - s, s)), r === 0 && (n.status = Rr);
    } else
      n.status = Rr;
  if (n.status === Rr && (n.gzhead.hcrc ? (n.pending + 2 > n.pending_buf_size && Rn(i), n.pending + 2 <= n.pending_buf_size && (ue(n, i.adler & 255), ue(n, i.adler >> 8 & 255), i.adler = 0, n.status = Li)) : n.status = Li), n.pending !== 0) {
    if (Rn(i), i.avail_out === 0)
      return n.last_flush = -1, R1;
  } else if (i.avail_in === 0 && Rl(e) <= Rl(t) && e !== Xn)
    return Vn(i, k3);
  if (n.status === z8 && i.avail_in !== 0)
    return Vn(i, k3);
  if (i.avail_in !== 0 || n.lookahead !== 0 || e !== Ki && n.status !== z8) {
    var c = n.strategy === ar ? fA(n, e) : n.strategy === $T ? dA(n, e) : F9[n.level].func(n, e);
    if ((c === Gi || c === u8) && (n.status = z8), c === it || c === Gi)
      return i.avail_out === 0 && (n.last_flush = -1), R1;
    if (c === Qs && (e === WT ? jt._tr_align(n) : e !== Il && (jt._tr_stored_block(n, 0, 0, !1), e === XT && (On(n.head), n.lookahead === 0 && (n.strstart = 0, n.block_start = 0, n.insert = 0))), Rn(i), i.avail_out === 0))
      return n.last_flush = -1, R1;
  }
  return e !== Xn ? R1 : n.wrap <= 0 ? Ll : (n.wrap === 2 ? (ue(n, i.adler & 255), ue(n, i.adler >> 8 & 255), ue(n, i.adler >> 16 & 255), ue(n, i.adler >> 24 & 255), ue(n, i.total_in & 255), ue(n, i.total_in >> 8 & 255), ue(n, i.total_in >> 16 & 255), ue(n, i.total_in >> 24 & 255)) : (L8(n, i.adler >>> 16), L8(n, i.adler & 65535)), Rn(i), n.wrap > 0 && (n.wrap = -n.wrap), n.pending !== 0 ? R1 : Ll);
}
function yA(i) {
  var e;
  return !i || !i.state ? O1 : (e = i.state.status, e !== b6 && e !== J5 && e !== Ir && e !== Lr && e !== Rr && e !== Li && e !== z8 ? Vn(i, O1) : (i.state = null, e === Li ? Vn(i, YT) : R1));
}
function xA(i, e) {
  var t = e.length, n, s, r, a, o, c, l, h;
  if (!i || !i.state || (n = i.state, a = n.wrap, a === 2 || a === 1 && n.status !== b6 || n.lookahead))
    return O1;
  for (a === 1 && (i.adler = sf(i.adler, e, t, 0)), n.wrap = 0, t >= n.w_size && (a === 0 && (On(n.head), n.strstart = 0, n.block_start = 0, n.insert = 0), h = new yt.Buf8(n.w_size), yt.arraySet(h, e, t - n.w_size, n.w_size, 0), e = h, t = n.w_size), o = i.avail_in, c = i.next_in, l = i.input, i.avail_in = t, i.next_in = 0, i.input = e, Wi(n); n.lookahead >= ie; ) {
    s = n.strstart, r = n.lookahead - (ie - 1);
    do
      n.ins_h = (n.ins_h << n.hash_shift ^ n.window[s + ie - 1]) & n.hash_mask, n.prev[s & n.w_mask] = n.head[n.ins_h], n.head[n.ins_h] = s, s++;
    while (--r);
    n.strstart = s, n.lookahead = ie - 1, Wi(n);
  }
  return n.strstart += n.lookahead, n.block_start = n.strstart, n.insert = n.lookahead, n.lookahead = 0, n.match_length = n.prev_length = ie - 1, n.match_available = 0, i.next_in = c, i.input = l, i.avail_in = o, n.wrap = a, R1;
}
B1.deflateInit = _A;
B1.deflateInit2 = lf;
B1.deflateReset = of;
B1.deflateResetKeep = af;
B1.deflateSetHeader = gA;
B1.deflate = vA;
B1.deflateEnd = yA;
B1.deflateSetDictionary = xA;
B1.deflateInfo = "pako deflate (from Nodeca project)";
var Qi = {}, w6 = dn, cf = !0, hf = !0;
try {
  String.fromCharCode.apply(null, [0]);
} catch {
  cf = !1;
}
try {
  String.fromCharCode.apply(null, new Uint8Array(1));
} catch {
  hf = !1;
}
var Is = new w6.Buf8(256);
for (var wn = 0; wn < 256; wn++)
  Is[wn] = wn >= 252 ? 6 : wn >= 248 ? 5 : wn >= 240 ? 4 : wn >= 224 ? 3 : wn >= 192 ? 2 : 1;
Is[254] = Is[254] = 1;
Qi.string2buf = function(i) {
  var e, t, n, s, r, a = i.length, o = 0;
  for (s = 0; s < a; s++)
    t = i.charCodeAt(s), (t & 64512) === 55296 && s + 1 < a && (n = i.charCodeAt(s + 1), (n & 64512) === 56320 && (t = 65536 + (t - 55296 << 10) + (n - 56320), s++)), o += t < 128 ? 1 : t < 2048 ? 2 : t < 65536 ? 3 : 4;
  for (e = new w6.Buf8(o), r = 0, s = 0; r < o; s++)
    t = i.charCodeAt(s), (t & 64512) === 55296 && s + 1 < a && (n = i.charCodeAt(s + 1), (n & 64512) === 56320 && (t = 65536 + (t - 55296 << 10) + (n - 56320), s++)), t < 128 ? e[r++] = t : t < 2048 ? (e[r++] = 192 | t >>> 6, e[r++] = 128 | t & 63) : t < 65536 ? (e[r++] = 224 | t >>> 12, e[r++] = 128 | t >>> 6 & 63, e[r++] = 128 | t & 63) : (e[r++] = 240 | t >>> 18, e[r++] = 128 | t >>> 12 & 63, e[r++] = 128 | t >>> 6 & 63, e[r++] = 128 | t & 63);
  return e;
};
function uf(i, e) {
  if (e < 65537 && (i.subarray && hf || !i.subarray && cf))
    return String.fromCharCode.apply(null, w6.shrinkBuf(i, e));
  for (var t = "", n = 0; n < e; n++)
    t += String.fromCharCode(i[n]);
  return t;
}
Qi.buf2binstring = function(i) {
  return uf(i, i.length);
};
Qi.binstring2buf = function(i) {
  for (var e = new w6.Buf8(i.length), t = 0, n = e.length; t < n; t++)
    e[t] = i.charCodeAt(t);
  return e;
};
Qi.buf2string = function(i, e) {
  var t, n, s, r, a = e || i.length, o = new Array(a * 2);
  for (n = 0, t = 0; t < a; ) {
    if (s = i[t++], s < 128) {
      o[n++] = s;
      continue;
    }
    if (r = Is[s], r > 4) {
      o[n++] = 65533, t += r - 1;
      continue;
    }
    for (s &= r === 2 ? 31 : r === 3 ? 15 : 7; r > 1 && t < a; )
      s = s << 6 | i[t++] & 63, r--;
    if (r > 1) {
      o[n++] = 65533;
      continue;
    }
    s < 65536 ? o[n++] = s : (s -= 65536, o[n++] = 55296 | s >> 10 & 1023, o[n++] = 56320 | s & 1023);
  }
  return uf(o, n);
};
Qi.utf8border = function(i, e) {
  var t;
  for (e = e || i.length, e > i.length && (e = i.length), t = e - 1; t >= 0 && (i[t] & 192) === 128; )
    t--;
  return t < 0 || t === 0 ? e : t + Is[i[t]] > e ? t : e;
};
function bA() {
  this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0;
}
var df = bA, J8 = B1, K8 = dn, K5 = Qi, Q5 = d4, wA = df, ff = Object.prototype.toString, MA = 0, V3 = 4, Z9 = 0, Pl = 1, Dl = 2, SA = -1, EA = 0, TA = 8;
function Xi(i) {
  if (!(this instanceof Xi))
    return new Xi(i);
  this.options = K8.assign({
    level: SA,
    method: TA,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: EA,
    to: ""
  }, i || {});
  var e = this.options;
  e.raw && e.windowBits > 0 ? e.windowBits = -e.windowBits : e.gzip && e.windowBits > 0 && e.windowBits < 16 && (e.windowBits += 16), this.err = 0, this.msg = "", this.ended = !1, this.chunks = [], this.strm = new wA(), this.strm.avail_out = 0;
  var t = J8.deflateInit2(
    this.strm,
    e.level,
    e.method,
    e.windowBits,
    e.memLevel,
    e.strategy
  );
  if (t !== Z9)
    throw new Error(Q5[t]);
  if (e.header && J8.deflateSetHeader(this.strm, e.header), e.dictionary) {
    var n;
    if (typeof e.dictionary == "string" ? n = K5.string2buf(e.dictionary) : ff.call(e.dictionary) === "[object ArrayBuffer]" ? n = new Uint8Array(e.dictionary) : n = e.dictionary, t = J8.deflateSetDictionary(this.strm, n), t !== Z9)
      throw new Error(Q5[t]);
    this._dict_set = !0;
  }
}
Xi.prototype.push = function(i, e) {
  var t = this.strm, n = this.options.chunkSize, s, r;
  if (this.ended)
    return !1;
  r = e === ~~e ? e : e === !0 ? V3 : MA, typeof i == "string" ? t.input = K5.string2buf(i) : ff.call(i) === "[object ArrayBuffer]" ? t.input = new Uint8Array(i) : t.input = i, t.next_in = 0, t.avail_in = t.input.length;
  do {
    if (t.avail_out === 0 && (t.output = new K8.Buf8(n), t.next_out = 0, t.avail_out = n), s = J8.deflate(t, r), s !== Pl && s !== Z9)
      return this.onEnd(s), this.ended = !0, !1;
    (t.avail_out === 0 || t.avail_in === 0 && (r === V3 || r === Dl)) && (this.options.to === "string" ? this.onData(K5.buf2binstring(K8.shrinkBuf(t.output, t.next_out))) : this.onData(K8.shrinkBuf(t.output, t.next_out)));
  } while ((t.avail_in > 0 || t.avail_out === 0) && s !== Pl);
  return r === V3 ? (s = J8.deflateEnd(this.strm), this.onEnd(s), this.ended = !0, s === Z9) : (r === Dl && (this.onEnd(Z9), t.avail_out = 0), !0);
};
Xi.prototype.onData = function(i) {
  this.chunks.push(i);
};
Xi.prototype.onEnd = function(i) {
  i === Z9 && (this.options.to === "string" ? this.result = this.chunks.join("") : this.result = K8.flattenChunks(this.chunks)), this.chunks = [], this.err = i, this.msg = this.strm.msg;
};
function f4(i, e) {
  var t = new Xi(e);
  if (t.push(i, !0), t.err)
    throw t.msg || Q5[t.err];
  return t.result;
}
function AA(i, e) {
  return e = e || {}, e.raw = !0, f4(i, e);
}
function CA(i, e) {
  return e = e || {}, e.gzip = !0, f4(i, e);
}
Js.Deflate = Xi;
Js.deflate = f4;
Js.deflateRaw = AA;
Js.gzip = CA;
var e7 = {}, f1 = {}, or = 30, IA = 12, LA = function(i, e) {
  var t, n, s, r, a, o, c, l, h, d, u, f, p, _, g, m, v, y, b, w, x, S, T, M, A;
  t = i.state, n = i.next_in, M = i.input, s = n + (i.avail_in - 5), r = i.next_out, A = i.output, a = r - (e - i.avail_out), o = r + (i.avail_out - 257), c = t.dmax, l = t.wsize, h = t.whave, d = t.wnext, u = t.window, f = t.hold, p = t.bits, _ = t.lencode, g = t.distcode, m = (1 << t.lenbits) - 1, v = (1 << t.distbits) - 1;
  e:
    do {
      p < 15 && (f += M[n++] << p, p += 8, f += M[n++] << p, p += 8), y = _[f & m];
      t:
        for (; ; ) {
          if (b = y >>> 24, f >>>= b, p -= b, b = y >>> 16 & 255, b === 0)
            A[r++] = y & 65535;
          else if (b & 16) {
            w = y & 65535, b &= 15, b && (p < b && (f += M[n++] << p, p += 8), w += f & (1 << b) - 1, f >>>= b, p -= b), p < 15 && (f += M[n++] << p, p += 8, f += M[n++] << p, p += 8), y = g[f & v];
            n:
              for (; ; ) {
                if (b = y >>> 24, f >>>= b, p -= b, b = y >>> 16 & 255, b & 16) {
                  if (x = y & 65535, b &= 15, p < b && (f += M[n++] << p, p += 8, p < b && (f += M[n++] << p, p += 8)), x += f & (1 << b) - 1, x > c) {
                    i.msg = "invalid distance too far back", t.mode = or;
                    break e;
                  }
                  if (f >>>= b, p -= b, b = r - a, x > b) {
                    if (b = x - b, b > h && t.sane) {
                      i.msg = "invalid distance too far back", t.mode = or;
                      break e;
                    }
                    if (S = 0, T = u, d === 0) {
                      if (S += l - b, b < w) {
                        w -= b;
                        do
                          A[r++] = u[S++];
                        while (--b);
                        S = r - x, T = A;
                      }
                    } else if (d < b) {
                      if (S += l + d - b, b -= d, b < w) {
                        w -= b;
                        do
                          A[r++] = u[S++];
                        while (--b);
                        if (S = 0, d < w) {
                          b = d, w -= b;
                          do
                            A[r++] = u[S++];
                          while (--b);
                          S = r - x, T = A;
                        }
                      }
                    } else if (S += d - b, b < w) {
                      w -= b;
                      do
                        A[r++] = u[S++];
                      while (--b);
                      S = r - x, T = A;
                    }
                    for (; w > 2; )
                      A[r++] = T[S++], A[r++] = T[S++], A[r++] = T[S++], w -= 3;
                    w && (A[r++] = T[S++], w > 1 && (A[r++] = T[S++]));
                  } else {
                    S = r - x;
                    do
                      A[r++] = A[S++], A[r++] = A[S++], A[r++] = A[S++], w -= 3;
                    while (w > 2);
                    w && (A[r++] = A[S++], w > 1 && (A[r++] = A[S++]));
                  }
                } else if (b & 64) {
                  i.msg = "invalid distance code", t.mode = or;
                  break e;
                } else {
                  y = g[(y & 65535) + (f & (1 << b) - 1)];
                  continue n;
                }
                break;
              }
          } else if (b & 64)
            if (b & 32) {
              t.mode = IA;
              break e;
            } else {
              i.msg = "invalid literal/length code", t.mode = or;
              break e;
            }
          else {
            y = _[(y & 65535) + (f & (1 << b) - 1)];
            continue t;
          }
          break;
        }
    } while (n < s && r < o);
  w = p >> 3, n -= w, p -= w << 3, f &= (1 << p) - 1, i.next_in = n, i.next_out = r, i.avail_in = n < s ? 5 + (s - n) : 5 - (n - s), i.avail_out = r < o ? 257 + (o - r) : 257 - (r - o), t.hold = f, t.bits = p;
}, Nl = dn, I9 = 15, Ol = 852, Ul = 592, Fl = 0, H3 = 1, zl = 2, RA = [
  /* Length codes 257..285 base */
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  13,
  15,
  17,
  19,
  23,
  27,
  31,
  35,
  43,
  51,
  59,
  67,
  83,
  99,
  115,
  131,
  163,
  195,
  227,
  258,
  0,
  0
], PA = [
  /* Length codes 257..285 extra */
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  17,
  17,
  17,
  17,
  18,
  18,
  18,
  18,
  19,
  19,
  19,
  19,
  20,
  20,
  20,
  20,
  21,
  21,
  21,
  21,
  16,
  72,
  78
], DA = [
  /* Distance codes 0..29 base */
  1,
  2,
  3,
  4,
  5,
  7,
  9,
  13,
  17,
  25,
  33,
  49,
  65,
  97,
  129,
  193,
  257,
  385,
  513,
  769,
  1025,
  1537,
  2049,
  3073,
  4097,
  6145,
  8193,
  12289,
  16385,
  24577,
  0,
  0
], NA = [
  /* Distance codes 0..29 extra */
  16,
  16,
  16,
  16,
  17,
  17,
  18,
  18,
  19,
  19,
  20,
  20,
  21,
  21,
  22,
  22,
  23,
  23,
  24,
  24,
  25,
  25,
  26,
  26,
  27,
  27,
  28,
  28,
  29,
  29,
  64,
  64
], OA = function(i, e, t, n, s, r, a, o) {
  var c = o.bits, l = 0, h = 0, d = 0, u = 0, f = 0, p = 0, _ = 0, g = 0, m = 0, v = 0, y, b, w, x, S, T = null, M = 0, A, D = new Nl.Buf16(I9 + 1), z = new Nl.Buf16(I9 + 1), O = null, U = 0, V, Y, W;
  for (l = 0; l <= I9; l++)
    D[l] = 0;
  for (h = 0; h < n; h++)
    D[e[t + h]]++;
  for (f = c, u = I9; u >= 1 && D[u] === 0; u--)
    ;
  if (f > u && (f = u), u === 0)
    return s[r++] = 1 << 24 | 64 << 16 | 0, s[r++] = 1 << 24 | 64 << 16 | 0, o.bits = 1, 0;
  for (d = 1; d < u && D[d] === 0; d++)
    ;
  for (f < d && (f = d), g = 1, l = 1; l <= I9; l++)
    if (g <<= 1, g -= D[l], g < 0)
      return -1;
  if (g > 0 && (i === Fl || u !== 1))
    return -1;
  for (z[1] = 0, l = 1; l < I9; l++)
    z[l + 1] = z[l] + D[l];
  for (h = 0; h < n; h++)
    e[t + h] !== 0 && (a[z[e[t + h]]++] = h);
  if (i === Fl ? (T = O = a, A = 19) : i === H3 ? (T = RA, M -= 257, O = PA, U -= 257, A = 256) : (T = DA, O = NA, A = -1), v = 0, h = 0, l = d, S = r, p = f, _ = 0, w = -1, m = 1 << f, x = m - 1, i === H3 && m > Ol || i === zl && m > Ul)
    return 1;
  for (; ; ) {
    V = l - _, a[h] < A ? (Y = 0, W = a[h]) : a[h] > A ? (Y = O[U + a[h]], W = T[M + a[h]]) : (Y = 32 + 64, W = 0), y = 1 << l - _, b = 1 << p, d = b;
    do
      b -= y, s[S + (v >> _) + b] = V << 24 | Y << 16 | W | 0;
    while (b !== 0);
    for (y = 1 << l - 1; v & y; )
      y >>= 1;
    if (y !== 0 ? (v &= y - 1, v += y) : v = 0, h++, --D[l] === 0) {
      if (l === u)
        break;
      l = e[t + a[h]];
    }
    if (l > f && (v & x) !== w) {
      for (_ === 0 && (_ = f), S += d, p = l - _, g = 1 << p; p + _ < u && (g -= D[p + _], !(g <= 0)); )
        p++, g <<= 1;
      if (m += 1 << p, i === H3 && m > Ol || i === zl && m > Ul)
        return 1;
      w = v & x, s[w] = f << 24 | p << 16 | S - r | 0;
    }
  }
  return v !== 0 && (s[S + v] = l - _ << 24 | 64 << 16 | 0), o.bits = f, 0;
}, zt = dn, e2 = tf, w1 = nf, UA = LA, Q8 = OA, FA = 0, pf = 1, mf = 2, kl = 4, zA = 5, lr = 6, Yi = 0, kA = 1, BA = 2, on = -2, gf = -3, _f = -4, VA = -5, Bl = 8, vf = 1, Vl = 2, Hl = 3, Gl = 4, Wl = 5, Xl = 6, Yl = 7, Zl = 8, ql = 9, $l = 10, Yr = 11, j1 = 12, G3 = 13, jl = 14, W3 = 15, Jl = 16, Kl = 17, Ql = 18, ec = 19, cr = 20, hr = 21, tc = 22, nc = 23, ic = 24, sc = 25, rc = 26, X3 = 27, ac = 28, oc = 29, Me = 30, yf = 31, HA = 32, GA = 852, WA = 592, XA = 15, YA = XA;
function lc(i) {
  return (i >>> 24 & 255) + (i >>> 8 & 65280) + ((i & 65280) << 8) + ((i & 255) << 24);
}
function ZA() {
  this.mode = 0, this.last = !1, this.wrap = 0, this.havedict = !1, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new zt.Buf16(320), this.work = new zt.Buf16(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;
}
function xf(i) {
  var e;
  return !i || !i.state ? on : (e = i.state, i.total_in = i.total_out = e.total = 0, i.msg = "", e.wrap && (i.adler = e.wrap & 1), e.mode = vf, e.last = 0, e.havedict = 0, e.dmax = 32768, e.head = null, e.hold = 0, e.bits = 0, e.lencode = e.lendyn = new zt.Buf32(GA), e.distcode = e.distdyn = new zt.Buf32(WA), e.sane = 1, e.back = -1, Yi);
}
function bf(i) {
  var e;
  return !i || !i.state ? on : (e = i.state, e.wsize = 0, e.whave = 0, e.wnext = 0, xf(i));
}
function wf(i, e) {
  var t, n;
  return !i || !i.state || (n = i.state, e < 0 ? (t = 0, e = -e) : (t = (e >> 4) + 1, e < 48 && (e &= 15)), e && (e < 8 || e > 15)) ? on : (n.window !== null && n.wbits !== e && (n.window = null), n.wrap = t, n.wbits = e, bf(i));
}
function Mf(i, e) {
  var t, n;
  return i ? (n = new ZA(), i.state = n, n.window = null, t = wf(i, e), t !== Yi && (i.state = null), t) : on;
}
function qA(i) {
  return Mf(i, YA);
}
var cc = !0, Y3, Z3;
function $A(i) {
  if (cc) {
    var e;
    for (Y3 = new zt.Buf32(512), Z3 = new zt.Buf32(32), e = 0; e < 144; )
      i.lens[e++] = 8;
    for (; e < 256; )
      i.lens[e++] = 9;
    for (; e < 280; )
      i.lens[e++] = 7;
    for (; e < 288; )
      i.lens[e++] = 8;
    for (Q8(pf, i.lens, 0, 288, Y3, 0, i.work, { bits: 9 }), e = 0; e < 32; )
      i.lens[e++] = 5;
    Q8(mf, i.lens, 0, 32, Z3, 0, i.work, { bits: 5 }), cc = !1;
  }
  i.lencode = Y3, i.lenbits = 9, i.distcode = Z3, i.distbits = 5;
}
function Sf(i, e, t, n) {
  var s, r = i.state;
  return r.window === null && (r.wsize = 1 << r.wbits, r.wnext = 0, r.whave = 0, r.window = new zt.Buf8(r.wsize)), n >= r.wsize ? (zt.arraySet(r.window, e, t - r.wsize, r.wsize, 0), r.wnext = 0, r.whave = r.wsize) : (s = r.wsize - r.wnext, s > n && (s = n), zt.arraySet(r.window, e, t - n, s, r.wnext), n -= s, n ? (zt.arraySet(r.window, e, t - n, n, 0), r.wnext = n, r.whave = r.wsize) : (r.wnext += s, r.wnext === r.wsize && (r.wnext = 0), r.whave < r.wsize && (r.whave += s))), 0;
}
function jA(i, e) {
  var t, n, s, r, a, o, c, l, h, d, u, f, p, _, g = 0, m, v, y, b, w, x, S, T, M = new zt.Buf8(4), A, D, z = (
    /* permutation of code lengths */
    [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]
  );
  if (!i || !i.state || !i.output || !i.input && i.avail_in !== 0)
    return on;
  t = i.state, t.mode === j1 && (t.mode = G3), a = i.next_out, s = i.output, c = i.avail_out, r = i.next_in, n = i.input, o = i.avail_in, l = t.hold, h = t.bits, d = o, u = c, T = Yi;
  e:
    for (; ; )
      switch (t.mode) {
        case vf:
          if (t.wrap === 0) {
            t.mode = G3;
            break;
          }
          for (; h < 16; ) {
            if (o === 0)
              break e;
            o--, l += n[r++] << h, h += 8;
          }
          if (t.wrap & 2 && l === 35615) {
            t.check = 0, M[0] = l & 255, M[1] = l >>> 8 & 255, t.check = w1(t.check, M, 2, 0), l = 0, h = 0, t.mode = Vl;
            break;
          }
          if (t.flags = 0, t.head && (t.head.done = !1), !(t.wrap & 1) || /* check if zlib header allowed */
          (((l & 255) << 8) + (l >> 8)) % 31) {
            i.msg = "incorrect header check", t.mode = Me;
            break;
          }
          if ((l & 15) !== Bl) {
            i.msg = "unknown compression method", t.mode = Me;
            break;
          }
          if (l >>>= 4, h -= 4, S = (l & 15) + 8, t.wbits === 0)
            t.wbits = S;
          else if (S > t.wbits) {
            i.msg = "invalid window size", t.mode = Me;
            break;
          }
          t.dmax = 1 << S, i.adler = t.check = 1, t.mode = l & 512 ? $l : j1, l = 0, h = 0;
          break;
        case Vl:
          for (; h < 16; ) {
            if (o === 0)
              break e;
            o--, l += n[r++] << h, h += 8;
          }
          if (t.flags = l, (t.flags & 255) !== Bl) {
            i.msg = "unknown compression method", t.mode = Me;
            break;
          }
          if (t.flags & 57344) {
            i.msg = "unknown header flags set", t.mode = Me;
            break;
          }
          t.head && (t.head.text = l >> 8 & 1), t.flags & 512 && (M[0] = l & 255, M[1] = l >>> 8 & 255, t.check = w1(t.check, M, 2, 0)), l = 0, h = 0, t.mode = Hl;
        case Hl:
          for (; h < 32; ) {
            if (o === 0)
              break e;
            o--, l += n[r++] << h, h += 8;
          }
          t.head && (t.head.time = l), t.flags & 512 && (M[0] = l & 255, M[1] = l >>> 8 & 255, M[2] = l >>> 16 & 255, M[3] = l >>> 24 & 255, t.check = w1(t.check, M, 4, 0)), l = 0, h = 0, t.mode = Gl;
        case Gl:
          for (; h < 16; ) {
            if (o === 0)
              break e;
            o--, l += n[r++] << h, h += 8;
          }
          t.head && (t.head.xflags = l & 255, t.head.os = l >> 8), t.flags & 512 && (M[0] = l & 255, M[1] = l >>> 8 & 255, t.check = w1(t.check, M, 2, 0)), l = 0, h = 0, t.mode = Wl;
        case Wl:
          if (t.flags & 1024) {
            for (; h < 16; ) {
              if (o === 0)
                break e;
              o--, l += n[r++] << h, h += 8;
            }
            t.length = l, t.head && (t.head.extra_len = l), t.flags & 512 && (M[0] = l & 255, M[1] = l >>> 8 & 255, t.check = w1(t.check, M, 2, 0)), l = 0, h = 0;
          } else
            t.head && (t.head.extra = null);
          t.mode = Xl;
        case Xl:
          if (t.flags & 1024 && (f = t.length, f > o && (f = o), f && (t.head && (S = t.head.extra_len - t.length, t.head.extra || (t.head.extra = new Array(t.head.extra_len)), zt.arraySet(
            t.head.extra,
            n,
            r,
            // extra field is limited to 65536 bytes
            // - no need for additional size check
            f,
            /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
            S
          )), t.flags & 512 && (t.check = w1(t.check, n, f, r)), o -= f, r += f, t.length -= f), t.length))
            break e;
          t.length = 0, t.mode = Yl;
        case Yl:
          if (t.flags & 2048) {
            if (o === 0)
              break e;
            f = 0;
            do
              S = n[r + f++], t.head && S && t.length < 65536 && (t.head.name += String.fromCharCode(S));
            while (S && f < o);
            if (t.flags & 512 && (t.check = w1(t.check, n, f, r)), o -= f, r += f, S)
              break e;
          } else
            t.head && (t.head.name = null);
          t.length = 0, t.mode = Zl;
        case Zl:
          if (t.flags & 4096) {
            if (o === 0)
              break e;
            f = 0;
            do
              S = n[r + f++], t.head && S && t.length < 65536 && (t.head.comment += String.fromCharCode(S));
            while (S && f < o);
            if (t.flags & 512 && (t.check = w1(t.check, n, f, r)), o -= f, r += f, S)
              break e;
          } else
            t.head && (t.head.comment = null);
          t.mode = ql;
        case ql:
          if (t.flags & 512) {
            for (; h < 16; ) {
              if (o === 0)
                break e;
              o--, l += n[r++] << h, h += 8;
            }
            if (l !== (t.check & 65535)) {
              i.msg = "header crc mismatch", t.mode = Me;
              break;
            }
            l = 0, h = 0;
          }
          t.head && (t.head.hcrc = t.flags >> 9 & 1, t.head.done = !0), i.adler = t.check = 0, t.mode = j1;
          break;
        case $l:
          for (; h < 32; ) {
            if (o === 0)
              break e;
            o--, l += n[r++] << h, h += 8;
          }
          i.adler = t.check = lc(l), l = 0, h = 0, t.mode = Yr;
        case Yr:
          if (t.havedict === 0)
            return i.next_out = a, i.avail_out = c, i.next_in = r, i.avail_in = o, t.hold = l, t.bits = h, BA;
          i.adler = t.check = 1, t.mode = j1;
        case j1:
          if (e === zA || e === lr)
            break e;
        case G3:
          if (t.last) {
            l >>>= h & 7, h -= h & 7, t.mode = X3;
            break;
          }
          for (; h < 3; ) {
            if (o === 0)
              break e;
            o--, l += n[r++] << h, h += 8;
          }
          switch (t.last = l & 1, l >>>= 1, h -= 1, l & 3) {
            case 0:
              t.mode = jl;
              break;
            case 1:
              if ($A(t), t.mode = cr, e === lr) {
                l >>>= 2, h -= 2;
                break e;
              }
              break;
            case 2:
              t.mode = Kl;
              break;
            case 3:
              i.msg = "invalid block type", t.mode = Me;
          }
          l >>>= 2, h -= 2;
          break;
        case jl:
          for (l >>>= h & 7, h -= h & 7; h < 32; ) {
            if (o === 0)
              break e;
            o--, l += n[r++] << h, h += 8;
          }
          if ((l & 65535) !== (l >>> 16 ^ 65535)) {
            i.msg = "invalid stored block lengths", t.mode = Me;
            break;
          }
          if (t.length = l & 65535, l = 0, h = 0, t.mode = W3, e === lr)
            break e;
        case W3:
          t.mode = Jl;
        case Jl:
          if (f = t.length, f) {
            if (f > o && (f = o), f > c && (f = c), f === 0)
              break e;
            zt.arraySet(s, n, r, f, a), o -= f, r += f, c -= f, a += f, t.length -= f;
            break;
          }
          t.mode = j1;
          break;
        case Kl:
          for (; h < 14; ) {
            if (o === 0)
              break e;
            o--, l += n[r++] << h, h += 8;
          }
          if (t.nlen = (l & 31) + 257, l >>>= 5, h -= 5, t.ndist = (l & 31) + 1, l >>>= 5, h -= 5, t.ncode = (l & 15) + 4, l >>>= 4, h -= 4, t.nlen > 286 || t.ndist > 30) {
            i.msg = "too many length or distance symbols", t.mode = Me;
            break;
          }
          t.have = 0, t.mode = Ql;
        case Ql:
          for (; t.have < t.ncode; ) {
            for (; h < 3; ) {
              if (o === 0)
                break e;
              o--, l += n[r++] << h, h += 8;
            }
            t.lens[z[t.have++]] = l & 7, l >>>= 3, h -= 3;
          }
          for (; t.have < 19; )
            t.lens[z[t.have++]] = 0;
          if (t.lencode = t.lendyn, t.lenbits = 7, A = { bits: t.lenbits }, T = Q8(FA, t.lens, 0, 19, t.lencode, 0, t.work, A), t.lenbits = A.bits, T) {
            i.msg = "invalid code lengths set", t.mode = Me;
            break;
          }
          t.have = 0, t.mode = ec;
        case ec:
          for (; t.have < t.nlen + t.ndist; ) {
            for (; g = t.lencode[l & (1 << t.lenbits) - 1], m = g >>> 24, v = g >>> 16 & 255, y = g & 65535, !(m <= h); ) {
              if (o === 0)
                break e;
              o--, l += n[r++] << h, h += 8;
            }
            if (y < 16)
              l >>>= m, h -= m, t.lens[t.have++] = y;
            else {
              if (y === 16) {
                for (D = m + 2; h < D; ) {
                  if (o === 0)
                    break e;
                  o--, l += n[r++] << h, h += 8;
                }
                if (l >>>= m, h -= m, t.have === 0) {
                  i.msg = "invalid bit length repeat", t.mode = Me;
                  break;
                }
                S = t.lens[t.have - 1], f = 3 + (l & 3), l >>>= 2, h -= 2;
              } else if (y === 17) {
                for (D = m + 3; h < D; ) {
                  if (o === 0)
                    break e;
                  o--, l += n[r++] << h, h += 8;
                }
                l >>>= m, h -= m, S = 0, f = 3 + (l & 7), l >>>= 3, h -= 3;
              } else {
                for (D = m + 7; h < D; ) {
                  if (o === 0)
                    break e;
                  o--, l += n[r++] << h, h += 8;
                }
                l >>>= m, h -= m, S = 0, f = 11 + (l & 127), l >>>= 7, h -= 7;
              }
              if (t.have + f > t.nlen + t.ndist) {
                i.msg = "invalid bit length repeat", t.mode = Me;
                break;
              }
              for (; f--; )
                t.lens[t.have++] = S;
            }
          }
          if (t.mode === Me)
            break;
          if (t.lens[256] === 0) {
            i.msg = "invalid code -- missing end-of-block", t.mode = Me;
            break;
          }
          if (t.lenbits = 9, A = { bits: t.lenbits }, T = Q8(pf, t.lens, 0, t.nlen, t.lencode, 0, t.work, A), t.lenbits = A.bits, T) {
            i.msg = "invalid literal/lengths set", t.mode = Me;
            break;
          }
          if (t.distbits = 6, t.distcode = t.distdyn, A = { bits: t.distbits }, T = Q8(mf, t.lens, t.nlen, t.ndist, t.distcode, 0, t.work, A), t.distbits = A.bits, T) {
            i.msg = "invalid distances set", t.mode = Me;
            break;
          }
          if (t.mode = cr, e === lr)
            break e;
        case cr:
          t.mode = hr;
        case hr:
          if (o >= 6 && c >= 258) {
            i.next_out = a, i.avail_out = c, i.next_in = r, i.avail_in = o, t.hold = l, t.bits = h, UA(i, u), a = i.next_out, s = i.output, c = i.avail_out, r = i.next_in, n = i.input, o = i.avail_in, l = t.hold, h = t.bits, t.mode === j1 && (t.back = -1);
            break;
          }
          for (t.back = 0; g = t.lencode[l & (1 << t.lenbits) - 1], m = g >>> 24, v = g >>> 16 & 255, y = g & 65535, !(m <= h); ) {
            if (o === 0)
              break e;
            o--, l += n[r++] << h, h += 8;
          }
          if (v && !(v & 240)) {
            for (b = m, w = v, x = y; g = t.lencode[x + ((l & (1 << b + w) - 1) >> b)], m = g >>> 24, v = g >>> 16 & 255, y = g & 65535, !(b + m <= h); ) {
              if (o === 0)
                break e;
              o--, l += n[r++] << h, h += 8;
            }
            l >>>= b, h -= b, t.back += b;
          }
          if (l >>>= m, h -= m, t.back += m, t.length = y, v === 0) {
            t.mode = rc;
            break;
          }
          if (v & 32) {
            t.back = -1, t.mode = j1;
            break;
          }
          if (v & 64) {
            i.msg = "invalid literal/length code", t.mode = Me;
            break;
          }
          t.extra = v & 15, t.mode = tc;
        case tc:
          if (t.extra) {
            for (D = t.extra; h < D; ) {
              if (o === 0)
                break e;
              o--, l += n[r++] << h, h += 8;
            }
            t.length += l & (1 << t.extra) - 1, l >>>= t.extra, h -= t.extra, t.back += t.extra;
          }
          t.was = t.length, t.mode = nc;
        case nc:
          for (; g = t.distcode[l & (1 << t.distbits) - 1], m = g >>> 24, v = g >>> 16 & 255, y = g & 65535, !(m <= h); ) {
            if (o === 0)
              break e;
            o--, l += n[r++] << h, h += 8;
          }
          if (!(v & 240)) {
            for (b = m, w = v, x = y; g = t.distcode[x + ((l & (1 << b + w) - 1) >> b)], m = g >>> 24, v = g >>> 16 & 255, y = g & 65535, !(b + m <= h); ) {
              if (o === 0)
                break e;
              o--, l += n[r++] << h, h += 8;
            }
            l >>>= b, h -= b, t.back += b;
          }
          if (l >>>= m, h -= m, t.back += m, v & 64) {
            i.msg = "invalid distance code", t.mode = Me;
            break;
          }
          t.offset = y, t.extra = v & 15, t.mode = ic;
        case ic:
          if (t.extra) {
            for (D = t.extra; h < D; ) {
              if (o === 0)
                break e;
              o--, l += n[r++] << h, h += 8;
            }
            t.offset += l & (1 << t.extra) - 1, l >>>= t.extra, h -= t.extra, t.back += t.extra;
          }
          if (t.offset > t.dmax) {
            i.msg = "invalid distance too far back", t.mode = Me;
            break;
          }
          t.mode = sc;
        case sc:
          if (c === 0)
            break e;
          if (f = u - c, t.offset > f) {
            if (f = t.offset - f, f > t.whave && t.sane) {
              i.msg = "invalid distance too far back", t.mode = Me;
              break;
            }
            f > t.wnext ? (f -= t.wnext, p = t.wsize - f) : p = t.wnext - f, f > t.length && (f = t.length), _ = t.window;
          } else
            _ = s, p = a - t.offset, f = t.length;
          f > c && (f = c), c -= f, t.length -= f;
          do
            s[a++] = _[p++];
          while (--f);
          t.length === 0 && (t.mode = hr);
          break;
        case rc:
          if (c === 0)
            break e;
          s[a++] = t.length, c--, t.mode = hr;
          break;
        case X3:
          if (t.wrap) {
            for (; h < 32; ) {
              if (o === 0)
                break e;
              o--, l |= n[r++] << h, h += 8;
            }
            if (u -= c, i.total_out += u, t.total += u, u && (i.adler = t.check = /*UPDATE(state.check, put - _out, _out);*/
            t.flags ? w1(t.check, s, u, a - u) : e2(t.check, s, u, a - u)), u = c, (t.flags ? l : lc(l)) !== t.check) {
              i.msg = "incorrect data check", t.mode = Me;
              break;
            }
            l = 0, h = 0;
          }
          t.mode = ac;
        case ac:
          if (t.wrap && t.flags) {
            for (; h < 32; ) {
              if (o === 0)
                break e;
              o--, l += n[r++] << h, h += 8;
            }
            if (l !== (t.total & 4294967295)) {
              i.msg = "incorrect length check", t.mode = Me;
              break;
            }
            l = 0, h = 0;
          }
          t.mode = oc;
        case oc:
          T = kA;
          break e;
        case Me:
          T = gf;
          break e;
        case yf:
          return _f;
        case HA:
        default:
          return on;
      }
  return i.next_out = a, i.avail_out = c, i.next_in = r, i.avail_in = o, t.hold = l, t.bits = h, (t.wsize || u !== i.avail_out && t.mode < Me && (t.mode < X3 || e !== kl)) && Sf(i, i.output, i.next_out, u - i.avail_out), d -= i.avail_in, u -= i.avail_out, i.total_in += d, i.total_out += u, t.total += u, t.wrap && u && (i.adler = t.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
  t.flags ? w1(t.check, s, u, i.next_out - u) : e2(t.check, s, u, i.next_out - u)), i.data_type = t.bits + (t.last ? 64 : 0) + (t.mode === j1 ? 128 : 0) + (t.mode === cr || t.mode === W3 ? 256 : 0), (d === 0 && u === 0 || e === kl) && T === Yi && (T = VA), T;
}
function JA(i) {
  if (!i || !i.state)
    return on;
  var e = i.state;
  return e.window && (e.window = null), i.state = null, Yi;
}
function KA(i, e) {
  var t;
  return !i || !i.state || (t = i.state, !(t.wrap & 2)) ? on : (t.head = e, e.done = !1, Yi);
}
function QA(i, e) {
  var t = e.length, n, s, r;
  return !i || !i.state || (n = i.state, n.wrap !== 0 && n.mode !== Yr) ? on : n.mode === Yr && (s = 1, s = e2(s, e, t, 0), s !== n.check) ? gf : (r = Sf(i, e, t, t), r ? (n.mode = yf, _f) : (n.havedict = 1, Yi));
}
f1.inflateReset = bf;
f1.inflateReset2 = wf;
f1.inflateResetKeep = xf;
f1.inflateInit = qA;
f1.inflateInit2 = Mf;
f1.inflate = jA;
f1.inflateEnd = JA;
f1.inflateGetHeader = KA;
f1.inflateSetDictionary = QA;
f1.inflateInfo = "pako inflate (from Nodeca project)";
var Ef = {
  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH: 0,
  Z_PARTIAL_FLUSH: 1,
  Z_SYNC_FLUSH: 2,
  Z_FULL_FLUSH: 3,
  Z_FINISH: 4,
  Z_BLOCK: 5,
  Z_TREES: 6,
  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK: 0,
  Z_STREAM_END: 1,
  Z_NEED_DICT: 2,
  Z_ERRNO: -1,
  Z_STREAM_ERROR: -2,
  Z_DATA_ERROR: -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR: -5,
  //Z_VERSION_ERROR: -6,
  /* compression levels */
  Z_NO_COMPRESSION: 0,
  Z_BEST_SPEED: 1,
  Z_BEST_COMPRESSION: 9,
  Z_DEFAULT_COMPRESSION: -1,
  Z_FILTERED: 1,
  Z_HUFFMAN_ONLY: 2,
  Z_RLE: 3,
  Z_FIXED: 4,
  Z_DEFAULT_STRATEGY: 0,
  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY: 0,
  Z_TEXT: 1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN: 2,
  /* The deflate compression method */
  Z_DEFLATED: 8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};
function eC() {
  this.text = 0, this.time = 0, this.xflags = 0, this.os = 0, this.extra = null, this.extra_len = 0, this.name = "", this.comment = "", this.hcrc = 0, this.done = !1;
}
var tC = eC, es = f1, ts = dn, ur = Qi, Ge = Ef, Tf = d4, nC = df, iC = tC, hc = Object.prototype.toString;
function Zi(i) {
  if (!(this instanceof Zi))
    return new Zi(i);
  this.options = ts.assign({
    chunkSize: 16384,
    windowBits: 0,
    to: ""
  }, i || {});
  var e = this.options;
  e.raw && e.windowBits >= 0 && e.windowBits < 16 && (e.windowBits = -e.windowBits, e.windowBits === 0 && (e.windowBits = -15)), e.windowBits >= 0 && e.windowBits < 16 && !(i && i.windowBits) && (e.windowBits += 32), e.windowBits > 15 && e.windowBits < 48 && (e.windowBits & 15 || (e.windowBits |= 15)), this.err = 0, this.msg = "", this.ended = !1, this.chunks = [], this.strm = new nC(), this.strm.avail_out = 0;
  var t = es.inflateInit2(
    this.strm,
    e.windowBits
  );
  if (t !== Ge.Z_OK)
    throw new Error(Tf[t]);
  this.header = new iC(), es.inflateGetHeader(this.strm, this.header);
}
Zi.prototype.push = function(i, e) {
  var t = this.strm, n = this.options.chunkSize, s = this.options.dictionary, r, a, o, c, l, h, d = !1;
  if (this.ended)
    return !1;
  a = e === ~~e ? e : e === !0 ? Ge.Z_FINISH : Ge.Z_NO_FLUSH, typeof i == "string" ? t.input = ur.binstring2buf(i) : hc.call(i) === "[object ArrayBuffer]" ? t.input = new Uint8Array(i) : t.input = i, t.next_in = 0, t.avail_in = t.input.length;
  do {
    if (t.avail_out === 0 && (t.output = new ts.Buf8(n), t.next_out = 0, t.avail_out = n), r = es.inflate(t, Ge.Z_NO_FLUSH), r === Ge.Z_NEED_DICT && s && (typeof s == "string" ? h = ur.string2buf(s) : hc.call(s) === "[object ArrayBuffer]" ? h = new Uint8Array(s) : h = s, r = es.inflateSetDictionary(this.strm, h)), r === Ge.Z_BUF_ERROR && d === !0 && (r = Ge.Z_OK, d = !1), r !== Ge.Z_STREAM_END && r !== Ge.Z_OK)
      return this.onEnd(r), this.ended = !0, !1;
    t.next_out && (t.avail_out === 0 || r === Ge.Z_STREAM_END || t.avail_in === 0 && (a === Ge.Z_FINISH || a === Ge.Z_SYNC_FLUSH)) && (this.options.to === "string" ? (o = ur.utf8border(t.output, t.next_out), c = t.next_out - o, l = ur.buf2string(t.output, o), t.next_out = c, t.avail_out = n - c, c && ts.arraySet(t.output, t.output, o, c, 0), this.onData(l)) : this.onData(ts.shrinkBuf(t.output, t.next_out))), t.avail_in === 0 && t.avail_out === 0 && (d = !0);
  } while ((t.avail_in > 0 || t.avail_out === 0) && r !== Ge.Z_STREAM_END);
  return r === Ge.Z_STREAM_END && (a = Ge.Z_FINISH), a === Ge.Z_FINISH ? (r = es.inflateEnd(this.strm), this.onEnd(r), this.ended = !0, r === Ge.Z_OK) : (a === Ge.Z_SYNC_FLUSH && (this.onEnd(Ge.Z_OK), t.avail_out = 0), !0);
};
Zi.prototype.onData = function(i) {
  this.chunks.push(i);
};
Zi.prototype.onEnd = function(i) {
  i === Ge.Z_OK && (this.options.to === "string" ? this.result = this.chunks.join("") : this.result = ts.flattenChunks(this.chunks)), this.chunks = [], this.err = i, this.msg = this.strm.msg;
};
function p4(i, e) {
  var t = new Zi(e);
  if (t.push(i, !0), t.err)
    throw t.msg || Tf[t.err];
  return t.result;
}
function sC(i, e) {
  return e = e || {}, e.raw = !0, p4(i, e);
}
e7.Inflate = Zi;
e7.inflate = p4;
e7.inflateRaw = sC;
e7.ungzip = p4;
var rC = dn.assign, aC = Js, oC = e7, lC = Ef, cC = {};
rC(cC, aC, oC, lC);
let hC = class {
  constructor(i) {
    tt(this, "volumeData"), tt(this, "timePointIndex", 0), tt(this, "props"), tt(this, "getVoxelValByIndex", (e, t, n) => {
      if (e < 0 || e >= this.volumeData.imageDimensions.cols || t < 0 || t >= this.volumeData.imageDimensions.rows || n < 0 || n >= this.volumeData.imageDimensions.slices)
        return 0;
      const s = this.convertIndexToOffset(e, t, n);
      return s > 0 ? this.volumeData.imageData[s] : 0;
    }), tt(this, "getVoxelIndexRound", (e, t, n) => {
      const s = Math.round(e), r = Math.round(t), a = Math.round(n);
      return this.getVoxelValByIndex(s, r, a);
    }), tt(this, "getVoxelValByCoord", (e, t, n) => {
      const s = this.getIJK(e, t, n);
      return this.getVoxelIndex(s.x, s.y, s.z);
    }), tt(this, "getVoxelIndex", (e, t, n) => this.props.isOverlay ? this.getVoxelIndexRound(e, t, n) : this.getVoxelIndexLinear(e, t, n)), tt(this, "getIJK", (e, t, n) => this.volumeData.affineInv.transformXYZ({
      x: e,
      y: t,
      z: n
    })), tt(this, "getVoxelIndexLinear", (e, t, n) => {
      let s, r, a, o, c, l, h, d, u, f, p, _, g, m, v = [
        [0, 0],
        [0, 0]
      ], y = [0, 0];
      if (s = c = l = 0, h = Math.floor(e), d = Math.floor(t), u = Math.floor(n), r = e - h, a = t - d, o = n - u, f = r !== 0, p = a !== 0, _ = o !== 0, f && p && _) {
        for (g = 0; g < 2; g += 1)
          for (m = 0; m < 2; m += 1)
            c = this.getVoxelValByIndex(h + g, d + m, u) * (1 - o), l = this.getVoxelValByIndex(h + g, d + m, u + 1) * o, v[g][m] = c + l;
        y[0] = v[0][0] * (1 - a) + v[0][1] * a, y[1] = v[1][0] * (1 - a) + v[1][1] * a, s = y[0] * (1 - r) + y[1] * r;
      } else if (f && p && !_) {
        for (g = 0; g < 2; g += 1)
          c = this.getVoxelValByIndex(h + g, d, u) * (1 - a), l = this.getVoxelValByIndex(h + g, d + 1, u) * a, y[g] = c + l;
        s = y[0] * (1 - r) + y[1] * r;
      } else if (f && !p && _) {
        for (g = 0; g < 2; g += 1)
          c = this.getVoxelValByIndex(h + g, d, u) * (1 - o), l = this.getVoxelValByIndex(h + g, d, u + 1) * o, y[g] = c + l;
        s = y[0] * (1 - r) + y[1] * r;
      } else if (!f && p && _) {
        for (m = 0; m < 2; m += 1)
          c = this.getVoxelValByIndex(h, d + m, u) * (1 - o), l = this.getVoxelValByIndex(h, d + m, u + 1) * o, y[m] = c + l;
        s = y[0] * (1 - a) + y[1] * a;
      } else
        !f && !p && _ ? (c = this.getVoxelValByIndex(h, d, u) * (1 - o), l = this.getVoxelValByIndex(h, d, u + 1) * o, s = c + l) : !f && p && !_ ? (c = this.getVoxelValByIndex(h, d, u) * (1 - a), l = this.getVoxelValByIndex(h, d + 1, u) * a, s = c + l) : f && !p && !_ ? (c = this.getVoxelValByIndex(h, d, u) * (1 - r), l = this.getVoxelValByIndex(h + 1, d, u) * r, s = c + l) : s = this.getVoxelValByIndex(e, t, n);
      return s;
    }), tt(this, "convertIndexToOffset", (e, t, n) => {
      const s = this.getIncrement();
      return s != null ? this.volumeData.imageDimensions.getNumVoxelsVolume() * this.timePointIndex + e * s.xIncrement + t * s.yIncrement + n * s.zIncrement : -1;
    }), tt(this, "getIncrement", () => ({
      xIncrement: 1,
      yIncrement: this.volumeData.imageDimensions.cols,
      zIncrement: this.volumeData.imageDimensions.cols * this.volumeData.imageDimensions.rows
    })), this.props = i, this.volumeData = i.volumeData;
  }
};
var _i = /* @__PURE__ */ ((i) => (i.RLAP = "rlap", i.RLPA = "rlpa", i.LRAP = "lrap", i.LRPA = "lrpa", i))(_i || {});
/*!
 * EventEmitter v5.2.9 - git.io/ee
 * Unlicense - http://unlicense.org/
 * Oliver Caldwell - https://oli.me.uk/
 * @preserve
 */
function Zr() {
}
var Ne = Zr.prototype;
function Af(i, e) {
  for (var t = i.length; t--; )
    if (i[t].listener === e)
      return t;
  return -1;
}
function t7(i) {
  return function() {
    return this[i].apply(this, arguments);
  };
}
Ne.getListeners = function(i) {
  var e = this._getEvents(), t, n;
  if (i instanceof RegExp) {
    t = {};
    for (n in e)
      e.hasOwnProperty(n) && i.test(n) && (t[n] = e[n]);
  } else
    t = e[i] || (e[i] = []);
  return t;
};
Ne.flattenListeners = function(i) {
  var e = [], t;
  for (t = 0; t < i.length; t += 1)
    e.push(i[t].listener);
  return e;
};
Ne.getListenersAsObject = function(i) {
  var e = this.getListeners(i), t;
  return e instanceof Array && (t = {}, t[i] = e), t || e;
};
function Cf(i) {
  return typeof i == "function" || i instanceof RegExp ? !0 : i && typeof i == "object" ? Cf(i.listener) : !1;
}
Ne.addListener = function(i, e) {
  if (!Cf(e))
    throw new TypeError("listener must be a function");
  var t = this.getListenersAsObject(i), n = typeof e == "object", s;
  for (s in t)
    t.hasOwnProperty(s) && Af(t[s], e) === -1 && t[s].push(n ? e : {
      listener: e,
      once: !1
    });
  return this;
};
Ne.on = t7("addListener");
Ne.addOnceListener = function(i, e) {
  return this.addListener(i, {
    listener: e,
    once: !0
  });
};
Ne.once = t7("addOnceListener");
Ne.defineEvent = function(i) {
  return this.getListeners(i), this;
};
Ne.defineEvents = function(i) {
  for (var e = 0; e < i.length; e += 1)
    this.defineEvent(i[e]);
  return this;
};
Ne.removeListener = function(i, e) {
  var t = this.getListenersAsObject(i), n, s;
  for (s in t)
    t.hasOwnProperty(s) && (n = Af(t[s], e), n !== -1 && t[s].splice(n, 1));
  return this;
};
Ne.off = t7("removeListener");
Ne.addListeners = function(i, e) {
  return this.manipulateListeners(!1, i, e);
};
Ne.removeListeners = function(i, e) {
  return this.manipulateListeners(!0, i, e);
};
Ne.manipulateListeners = function(i, e, t) {
  var n, s, r = i ? this.removeListener : this.addListener, a = i ? this.removeListeners : this.addListeners;
  if (typeof e == "object" && !(e instanceof RegExp))
    for (n in e)
      e.hasOwnProperty(n) && (s = e[n]) && (typeof s == "function" ? r.call(this, n, s) : a.call(this, n, s));
  else
    for (n = t.length; n--; )
      r.call(this, e, t[n]);
  return this;
};
Ne.removeEvent = function(i) {
  var e = typeof i, t = this._getEvents(), n;
  if (e === "string")
    delete t[i];
  else if (i instanceof RegExp)
    for (n in t)
      t.hasOwnProperty(n) && i.test(n) && delete t[n];
  else
    delete this._events;
  return this;
};
Ne.removeAllListeners = t7("removeEvent");
Ne.emitEvent = function(i, e) {
  var t = this.getListenersAsObject(i), n, s, r, a, o;
  for (a in t)
    if (t.hasOwnProperty(a))
      for (n = t[a].slice(0), r = 0; r < n.length; r++)
        s = n[r], s.once === !0 && this.removeListener(i, s.listener), o = s.listener.apply(this, e || []), o === this._getOnceReturnValue() && this.removeListener(i, s.listener);
  return this;
};
Ne.trigger = t7("emitEvent");
Ne.emit = function(i) {
  var e = Array.prototype.slice.call(arguments, 1);
  return this.emitEvent(i, e);
};
Ne.setOnceReturnValue = function(i) {
  return this._onceReturnValue = i, this;
};
Ne._getOnceReturnValue = function() {
  return this.hasOwnProperty("_onceReturnValue") ? this._onceReturnValue : !0;
};
Ne._getEvents = function() {
  return this._events || (this._events = {});
};
Zr.noConflict = function() {
  return exports.EventEmitter = originalGlobalValue, Zr;
};
const If = new Zr();
function uC(i, e, t) {
  if (e == m4.MOUSEWHEEL) {
    const { deltaX: n, deltaY: s } = i, r = t.panelViewer.sliceType, a = t.panelViewer.coor;
    let o = { ...a };
    s > 0 ? (r == E1.AXIAL && (o.z = a.z + 1), r == E1.CORONAL && (o.y = a.y + 1), r == E1.SAGITTAL && (o.x = a.x + 1)) : (r == E1.AXIAL && (o.z = a.z - 1), r == E1.CORONAL && (o.y = a.y - 1), r == E1.SAGITTAL && (o.x = a.x - 1)), If.emit(a4.CoorChange, { coor: o });
  }
}
function uc(i, e, t) {
  if (e == m4.MOUSELEFT) {
    let { offsetX: n, offsetY: s } = i;
    const {
      panelViewer: { transform: r, el: a, RLAPType: o }
    } = t;
    r.current.scale;
    const c = r.current.transformX, l = r.current.transformY, h = t.panelViewer.sliceType;
    a.getBoundingClientRect(), n = n - c, s = s - l;
    const d = t.panelViewer.renderContext, u = d.sliceParams.x, f = d.sliceParams.y, p = 1, _ = 1, { xStart: g, yStart: m } = d.sliceParams, v = {
      ...t.panelViewer.coor
    };
    h == E1.AXIAL && (o == _i.RLAP || o == _i.RLPA ? v.x = (1 - n / (r.current.scaleX * u)) * p * u + g : v.x = n / (r.current.scaleX * u) * p * u + g, v.y = (1 - s / (r.current.scaleY * f)) * _ * f + m), h == E1.CORONAL && (o == _i.RLAP || o == _i.RLPA ? v.x = (1 - n / (r.current.scaleX * u)) * p * u + g : v.x = n / (r.current.scaleX * u) * p * u + g, v.z = (1 - s / (r.current.scaleY * f)) * _ * f + m), h == E1.SAGITTAL && (o == _i.RLAP || o == _i.LRAP ? v.y = (1 - n / (r.current.scaleX * u)) * p * u + g : v.y = n / (r.current.scaleX * u) * p * u + g, v.z = (1 - s / (r.current.scaleY * f)) * _ * f + m), If.emit(a4.CoorChange, {
      coor: {
        x: v.x,
        y: v.y,
        z: v.z
      }
    });
  }
}
function dC(i, e, t) {
  const {
    startMouseInfo: n,
    currentMouseInfo: s,
    panelViewer: r,
    nextMouseInfo: a
  } = t, { type: o } = i;
  if (o == "mousemove") {
    const { x: c, y: l } = n, { x: h, y: d } = s;
    let u = h - c, f = d - l;
    r.transformViewer.x = r.transformViewer.originX + u * 0.5, r.transformViewer.y = r.transformViewer.originY + f * 0.5, r.grayscaleRenderSlice();
  }
  o == "mouseup" && (r.transformViewer.originX = r.transformViewer.x, r.transformViewer.originY = r.transformViewer.y);
}
function fC(i, e, t) {
  const {
    startMouseInfo: n,
    currentMouseInfo: s,
    panelViewer: r,
    nextMouseInfo: a
  } = t, { type: o } = i;
  if (o == "wheel") {
    let c = 0.01;
    const { offsetX: l, offsetY: h, deltaY: d } = i;
    d < 0 && (c = -0.01);
    let { x: u, y: f, scale: p } = r.scaleViewer, { transformX: _, transformY: g, scaleX: m, scaleY: v } = r.transform.current;
    const y = [p, 0, 0, p, u, f];
    p = p + c;
    const b = fc(new We({ x: l / m - _, y: h / v - g }), p, y);
    r.scaleViewer = {
      x: b[4],
      y: b[5],
      scale: p
    }, r.grayscaleRenderSlice();
  }
  if (o == "mousemove") {
    const { offsetX: c, offsetY: l } = n, { offsetX: h, offsetY: d } = s;
    let u = h - c, f = d - l, p = 5e-3;
    Math.abs(u) > Math.abs(f) ? u < 0 && (p = -5e-3) : f < 0 && (p = -5e-3);
    let { x: _, y: g, scale: m } = r.scaleViewer, { transformX: v, transformY: y, scaleX: b, scaleY: w } = r.transform.current;
    const x = [m, 0, 0, m, _, g];
    m = m + p;
    const S = fc(new We({ x: u / b - v, y: f / w - y }), m, x);
    r.scaleViewer = {
      x: S[4],
      y: S[5],
      scale: m
    }, r.grayscaleRenderSlice();
  }
}
const dc = (i, e, t) => new We(i).transform(e, t);
function fc(i, e, t) {
  const n = i, s = [...t], r = dc(i, pC(s));
  s[0] = e, s[3] = e;
  const a = dc(r, s);
  return s[4] += n.x - a.x, s[5] += n.y - a.y, s;
}
const pC = (i) => {
  const e = 1 / (i[0] * i[3] - i[1] * i[2]), t = [e * i[3], -e * i[1], -e * i[2], e * i[0], 0, 0], { x: n, y: s } = new We(i[4], i[5]).transform(t, !0);
  return t[4] = -n, t[5] = -s, t;
};
class We {
  constructor(e = 0, t = 0) {
    typeof e == "object" ? (this.x = e.x, this.y = e.y) : (this.x = e, this.y = t);
  }
  /**
   * Adds another point to this one and returns another one
   * @param {XY} that
   * @return {Point} new Point instance with added values
   */
  add(e) {
    return new We(this.x + e.x, this.y + e.y);
  }
  /**
   * Adds another point to this one
   * @param {XY} that
   * @return {Point} thisArg
   * @chainable
   * @deprecated
   */
  addEquals(e) {
    return this.x += e.x, this.y += e.y, this;
  }
  /**
   * Adds value to this point and returns a new one
   * @param {Number} scalar
   * @return {Point} new Point with added value
   */
  scalarAdd(e) {
    return new We(this.x + e, this.y + e);
  }
  /**
   * Adds value to this point
   * @param {Number} scalar
   * @return {Point} thisArg
   * @chainable
   * @deprecated
   */
  scalarAddEquals(e) {
    return this.x += e, this.y += e, this;
  }
  /**
   * Subtracts another point from this point and returns a new one
   * @param {XY} that
   * @return {Point} new Point object with subtracted values
   */
  subtract(e) {
    return new We(this.x - e.x, this.y - e.y);
  }
  /**
   * Subtracts another point from this point
   * @param {XY} that
   * @return {Point} thisArg
   * @chainable
   * @deprecated
   */
  subtractEquals(e) {
    return this.x -= e.x, this.y -= e.y, this;
  }
  /**
   * Subtracts value from this point and returns a new one
   * @param {Number} scalar
   * @return {Point}
   */
  scalarSubtract(e) {
    return new We(this.x - e, this.y - e);
  }
  /**
   * Subtracts value from this point
   * @param {Number} scalar
   * @return {Point} thisArg
   * @chainable
   * @deprecated
   */
  scalarSubtractEquals(e) {
    return this.x -= e, this.y -= e, this;
  }
  /**
   * Multiplies this point by another value and returns a new one
   * @param {XY} that
   * @return {Point}
   */
  multiply(e) {
    return new We(this.x * e.x, this.y * e.y);
  }
  /**
   * Multiplies this point by a value and returns a new one
   * @param {Number} scalar
   * @return {Point}
   */
  scalarMultiply(e) {
    return new We(this.x * e, this.y * e);
  }
  /**
   * Multiplies this point by a value
   * @param {Number} scalar
   * @return {Point} thisArg
   * @chainable
   * @deprecated
   */
  scalarMultiplyEquals(e) {
    return this.x *= e, this.y *= e, this;
  }
  /**
   * Divides this point by another and returns a new one
   * @param {XY} that
   * @return {Point}
   */
  divide(e) {
    return new We(this.x / e.x, this.y / e.y);
  }
  /**
   * Divides this point by a value and returns a new one
   * @param {Number} scalar
   * @return {Point}
   */
  scalarDivide(e) {
    return new We(this.x / e, this.y / e);
  }
  /**
   * Divides this point by a value
   * @param {Number} scalar
   * @return {Point} thisArg
   * @chainable
   * @deprecated
   */
  scalarDivideEquals(e) {
    return this.x /= e, this.y /= e, this;
  }
  /**
   * Returns true if this point is equal to another one
   * @param {XY} that
   * @return {Boolean}
   */
  eq(e) {
    return this.x === e.x && this.y === e.y;
  }
  /**
   * Returns true if this point is less than another one
   * @param {XY} that
   * @return {Boolean}
   */
  lt(e) {
    return this.x < e.x && this.y < e.y;
  }
  /**
   * Returns true if this point is less than or equal to another one
   * @param {XY} that
   * @return {Boolean}
   */
  lte(e) {
    return this.x <= e.x && this.y <= e.y;
  }
  /**
  
       * Returns true if this point is greater another one
       * @param {XY} that
       * @return {Boolean}
       */
  gt(e) {
    return this.x > e.x && this.y > e.y;
  }
  /**
   * Returns true if this point is greater than or equal to another one
   * @param {XY} that
   * @return {Boolean}
   */
  gte(e) {
    return this.x >= e.x && this.y >= e.y;
  }
  /**
   * Returns new point which is the result of linear interpolation with this one and another one
   * @param {XY} that
   * @param {Number} t , position of interpolation, between 0 and 1 default 0.5
   * @return {Point}
   */
  lerp(e, t = 0.5) {
    return t = Math.max(Math.min(1, t), 0), new We(
      this.x + (e.x - this.x) * t,
      this.y + (e.y - this.y) * t
    );
  }
  /**
   * Returns distance from this point and another one
   * @param {XY} that
   * @return {Number}
   */
  distanceFrom(e) {
    const t = this.x - e.x, n = this.y - e.y;
    return Math.sqrt(t * t + n * n);
  }
  /**
   * Returns the point between this point and another one
   * @param {XY} that
   * @return {Point}
   */
  midPointFrom(e) {
    return this.lerp(e);
  }
  /**
   * Returns a new point which is the min of this and another one
   * @param {XY} that
   * @return {Point}
   */
  min(e) {
    return new We(Math.min(this.x, e.x), Math.min(this.y, e.y));
  }
  /**
   * Returns a new point which is the max of this and another one
   * @param {XY} that
   * @return {Point}
   */
  max(e) {
    return new We(Math.max(this.x, e.x), Math.max(this.y, e.y));
  }
  /**
   * Returns string representation of this point
   * @return {String}
   */
  toString() {
    return `${this.x},${this.y}`;
  }
  /**
   * Sets x/y of this point
   * @param {Number} x
   * @param {Number} y
   * @chainable
   */
  setXY(e, t) {
    return this.x = e, this.y = t, this;
  }
  /**
   * Sets x of this point
   * @param {Number} x
   * @chainable
   */
  setX(e) {
    return this.x = e, this;
  }
  /**
   * Sets y of this point
   * @param {Number} y
   * @chainable
   */
  setY(e) {
    return this.y = e, this;
  }
  /**
   * Sets x/y of this point from another point
   * @param {XY} that
   * @chainable
   */
  setFromPoint(e) {
    return this.x = e.x, this.y = e.y, this;
  }
  /**
   * Swaps x/y of this point and another point
   * @param {XY} that
   */
  swap(e) {
    const t = this.x, n = this.y;
    this.x = e.x, this.y = e.y, e.x = t, e.y = n;
  }
  /**
   * return a cloned instance of the point
   * @return {Point}
   */
  clone() {
    return new We(this.x, this.y);
  }
  /**
   * Rotates `point` around `origin` with `radians`
   * @static
   * @memberOf fabric.util
   * @param {XY} origin The origin of the rotation
   * @param {TRadian} radians The radians of the angle for the rotation
   * @return {Point} The new rotated point
   */
  rotate(e, t = mC) {
    const n = Math.sin(e), s = Math.cos(e), r = this.subtract(t);
    return new We(
      r.x * s - r.y * n,
      r.x * n + r.y * s
    ).add(t);
  }
  /**
   * Apply transform t to point p
   * @static
   * @memberOf fabric.util
   * @param  {TMat2D} t The transform
   * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied
   * @return {Point} The transformed point
   */
  transform(e, t = !1) {
    return new We(
      e[0] * this.x + e[2] * this.y + (t ? 0 : e[4]),
      e[1] * this.x + e[3] * this.y + (t ? 0 : e[5])
    );
  }
}
const mC = new We(0, 0);
var m4 = /* @__PURE__ */ ((i) => (i[i.MOUSEWHEEL = 3] = "MOUSEWHEEL", i[i.MOUSELEFT = 0] = "MOUSELEFT", i[i.MOUSERIGHT = 1] = "MOUSERIGHT", i))(m4 || {});
class gC {
  constructor() {
    tt(this, "panelViewer"), tt(this, "mouse"), tt(this, "handlerMap", /* @__PURE__ */ new Map()), tt(this, "execute", (e, t) => {
      const n = this.handlerMap.get(e);
      n != null && n(t, e, this.mouse);
    }), tt(this, "setMouseHandler", (e, t) => {
      t == 2 && this.handlerMap.set(e, uc), t == 1 && this.handlerMap.set(e, dC), t == 0 && this.handlerMap.set(e, fC);
    }), tt(this, "wheel", (e) => {
    }), this.handlerMap.set(3, uC), this.handlerMap.set(0, uc);
  }
}
new gC();
class _C {
  constructor(e) {
    I(this, "props");
    I(this, "handle", (e, t, n) => {
      const { data: s, options: r } = e, { volumeData: a } = s, { imageDimensions: o, imageData: c, imageRange: l, voxelDimensions: h, boundBox: d } = a, { colSize: u, rowSize: f, sliceSize: p } = h, { displayMax: _, displayMin: g } = l, m = this.transformData(a), v = new Float32Array(m.length);
      for (let x = 0; x < m.length; )
        v[x] = this.handleDataToRender(g, _, m[x]), x++;
      const y = Math.ceil((d.x1 - d.x0) / u), b = Math.ceil((d.y1 - d.y0) / f), w = Math.ceil((d.z1 - d.z0) / p);
      return {
        options: {},
        ...e,
        modelData: this.parse(
          {
            data: v,
            xLength: y,
            yLength: b,
            zLength: w
          },
          n
        )
      };
    });
    I(this, "transformData", (e) => {
      const { imageDimensions: t, imageData: n, imageRange: s, boundBox: r, voxelDimensions: a } = e, { colSize: o, rowSize: c, sliceSize: l } = a, { x0: h, x1: d, y0: u, y1: f, z0: p, z1: _ } = r;
      let g = [];
      const m = new hC({
        volumeData: e,
        isOverlay: !1
      });
      for (let v = p; v < _; ) {
        for (let y = u; y < f; ) {
          for (let b = h; b < d; ) {
            const w = m.getVoxelValByCoord(b, y, v);
            g.push(w), b = b + o;
          }
          y = y + c;
        }
        v = v + l;
      }
      return g;
    });
    /**
     * 将ImageRange的数据转化为0到1之间的数值
     */
    I(this, "handleDataToRender", (e, t, n) => {
      let s = 0;
      if (n < e)
        return 0;
      if (n > t)
        return 1;
      const r = t - e;
      return s = (n - e) / r, s;
    });
    I(this, "parse", (e, t) => {
      const n = new Qr(
        e.data,
        e.xLength,
        e.yLength,
        e.zLength
      );
      n.format = l2, n.type = P1, n.minFilter = n.magFilter = Pe, n.unpackAlignment = 1, n.needsUpdate = !0;
      const s = {
        viridis: new P5().load("/cm_viridis.png", () => {
          t.updated = !0;
        }),
        gray: new P5().load("/cm_gray.png", () => {
          t.updated = !0;
        })
      }, r = hT, a = m2.clone(r.uniforms);
      a.u_data.value = n, a.u_size.value.set(e.xLength, e.yLength, e.zLength), a.u_clim.value.set(-1, 1), a.u_renderstyle.value = 1, a.u_renderthreshold.value = 0.89, a.u_cmdata.value = s.viridis;
      const o = new l1({
        uniforms: a,
        vertexShader: r.vertexShader,
        fragmentShader: r.fragmentShader,
        side: ut
        // The volume shader uses the backface as its "reference point"
      }), c = new ct(e.xLength, e.yLength, e.zLength);
      c.translate(e.xLength / 2, e.yLength / 2, e.zLength / 2);
      const l = new y0(c, o), h = new G0();
      h.add(l);
      const d = new Kn();
      return d.type = oe.VOLUME, d.mesh = h, d.volumeMaterial = o, h.translateX(-(e.xLength / 2)), h.translateY(-(e.yLength / 2)), h.translateZ(-(e.zLength / 2)), d;
    });
    this.props = e;
  }
}
class qr {
  constructor(e) {
    I(this, "props");
    I(this, "handle", (e, t, n) => {
      const { data: s, options: r } = e, {
        header: a,
        tracks: o
      } = qr.parse(s), c = new G0(), { VOX_TO_RAS: l, origin: h } = a, d = [];
      for (let p = 0; p < l.length; p++) {
        const _ = l[p];
        for (let g = 0; g < _.length; g++) {
          const m = _[g];
          d.push(parseFloat(m));
        }
      }
      const u = new k0(
        d[0],
        d[1],
        d[2],
        d[3],
        d[4],
        d[5],
        d[6],
        d[7],
        d[8],
        d[9],
        d[10],
        d[11],
        d[12],
        d[13],
        d[14],
        d[15]
      );
      o.map((p) => {
        const { geometry: _ } = p, g = new Ae({
          // color: '#ff0000',
          vertexColors: !0
          // wireframe:true
        }), m = new W0(_, g);
        m.applyMatrix4(u), c.add(m);
      });
      const f = new Kn({ name: r.name, type: oe.TRK });
      return c.translateX(-h[0]), c.translateY(-h[1]), c.translateZ(-h[2]), f.mesh = c, {
        data: s,
        options: r,
        modelData: f
      };
    });
    this.props = e;
  }
  static littleEndian() {
    const e = new ArrayBuffer(2);
    return new DataView(e).setInt16(0, 256, !0), new Int16Array(e)[0] === 256;
  }
  static parse(e) {
    const t = qr.littleEndian(), n = new DataView(e);
    let s = 0;
    const r = {};
    r.ID_STRING = [];
    for (let o = 0; o < 6; o++)
      r.ID_STRING.push(String.fromCharCode(n.getUint8(s))), s++;
    r.dim = [];
    for (let o = 0; o < 3; o++)
      r.dim.push(n.getInt16(s, t)), s += 2;
    r.VOXEL_SIZE = [];
    for (let o = 0; o < 3; o++)
      r.VOXEL_SIZE.push(n.getFloat32(s, t)), s += 4;
    r.origin = [];
    for (let o = 0; o < 3; o++)
      r.origin.push(n.getFloat32(s, t)), s += 4;
    r.N_SCALARS = [];
    for (let o = 0; o < 1; o++)
      r.N_SCALARS.push(n.getInt16(s, t)), s += 2;
    r.SCALAR_NAME = [];
    for (let o = 0; o < 10; o++) {
      r.SCALAR_NAME.push([]);
      for (let c = 0; c < 20; c++)
        r.SCALAR_NAME[o].push(
          String.fromCharCode(n.getUint8(s))
        ), s++;
    }
    r.N_PROPERTIES = [];
    for (let o = 0; o < 1; o++)
      r.N_PROPERTIES.push(n.getInt16(s, t)), s += 2;
    r.PROPERTY_NAME = [];
    for (let o = 0; o < 10; o++) {
      r.PROPERTY_NAME.push([]);
      for (let c = 0; c < 20; c++)
        r.PROPERTY_NAME[o].push(
          String.fromCharCode(n.getUint8(s))
        ), s++;
    }
    r.VOX_TO_RAS = [];
    for (let o = 0; o < 4; o++) {
      r.VOX_TO_RAS.push([]);
      for (let c = 0; c < 4; c++)
        r.VOX_TO_RAS[o].push(n.getFloat32(s)), s += 4;
    }
    s += 444, r.VOXEL_ORDER = [];
    for (let o = 0; o < 4; o++)
      r.VOXEL_ORDER.push(String.fromCharCode(n.getUint8(s))), s++;
    r.pad2 = [];
    for (let o = 0; o < 4; o++)
      r.pad2.push(String.fromCharCode(n.getUint8(s))), s++;
    r.IMAGE_ORIENTATION_PATIENT = [];
    for (let o = 0; o < 6; o++)
      r.IMAGE_ORIENTATION_PATIENT.push(
        n.getFloat32(s, t)
      ), s += 4;
    r.pad1 = [];
    for (let o = 0; o < 2; o++)
      r.pad2.push(String.fromCharCode(n.getUint8(s))), s++;
    r.INVERT_X = [];
    for (let o = 0; o < 1; o++)
      r.INVERT_X.push(String.fromCharCode(n.getUint8(s))), s++;
    r.INVERT_Y = [];
    for (let o = 0; o < 1; o++)
      r.INVERT_Y.push(String.fromCharCode(n.getUint8(s))), s++;
    r.INVERT_Z = [];
    for (let o = 0; o < 1; o++)
      r.INVERT_Z.push(String.fromCharCode(n.getUint8(s))), s++;
    r.SWAP_XY = [];
    for (let o = 0; o < 1; o++)
      r.SWAP_XY.push(String.fromCharCode(n.getUint8(s))), s++;
    r.SWAP_YZ = [];
    for (let o = 0; o < 1; o++)
      r.SWAP_YZ.push(String.fromCharCode(n.getUint8(s))), s++;
    r.SWAP_ZX = [];
    for (let o = 0; o < 1; o++)
      r.SWAP_ZX.push(String.fromCharCode(n.getUint8(s))), s++;
    r.N_COUNT = [];
    for (let o = 0; o < 1; o++)
      r.N_COUNT.push(n.getUint32(s, t)), s += 4;
    r.version = [];
    for (let o = 0; o < 1; o++)
      r.version.push(n.getUint32(s, t)), s += 4;
    r.HDR_SIZE = [];
    for (let o = 0; o < 1; o++)
      r.HDR_SIZE.push(n.getUint32(s, t)), s += 4;
    const a = [];
    for (; s < n.byteLength; ) {
      let o = -1;
      o = n.getUint32(s, t), s += 4;
      const c = {
        points: [],
        scalars: [],
        properties: [],
        geometry: new F0(),
        vertices: [],
        xProperties: {}
      };
      let l = 0;
      for (let u = 0; u < o; u++) {
        c.points[u] = [], c.points[u].push(n.getFloat32(s, t)), s += 4, c.points[u].push(n.getFloat32(s, t)), s += 4, c.points[u].push(n.getFloat32(s, t)), s += 4, c.vertices.push(
          c.points[u][0],
          c.points[u][1],
          c.points[u][2]
        ), c.scalars[u] = [];
        for (let f = 0; f < r.N_SCALARS[0]; f++)
          c.scalars[u][f] = [], c.scalars[u][f].push(n.getFloat32(s, t)), s += 4, c.scalars[u][f].push(n.getFloat32(s, t)), s += 4, c.scalars[u][f].push(n.getFloat32(s, t)), s += 4;
        if (u !== 0) {
          const f = c.points[u - 1], p = c.points[u], _ = p[0] - f[0], g = p[1] - f[1], m = p[2] - f[2], v = Math.sqrt(
            Math.pow(_, 2) + Math.pow(g, 2) + Math.pow(m, 2)
          );
          l += v;
        }
      }
      const h = new ee(new Float32Array(c.vertices), 3);
      c.geometry.setAttribute("position", h), c.xProperties.length = l;
      const d = [];
      for (let u = 0; u < o; u++) {
        let f = c.points[0];
        u > 1 && (f = c.points[u - 1]);
        let p = c.points[o - 1];
        u < o - 2 && (p = c.points[u + 1]);
        const _ = [
          Math.abs(p[0] - f[0]),
          Math.abs(p[1] - f[1]),
          Math.abs(p[2] - f[2])
        ], g = Math.sqrt(
          _[0] * _[0] + _[1] * _[1] + _[2] * _[2]
        );
        _[0] /= g, _[1] /= g, _[2] /= g, d.push(_[0]), d.push(_[1]), d.push(_[2]);
      }
      c.geometry.setAttribute("color", new v0(d, 3));
      for (let u = 0; u < r.N_PROPERTIES[0]; u++)
        c.properties[u] = [], c.properties[u].push(n.getFloat32(s, t)), s += 4, c.properties[u].push(n.getFloat32(s, t)), s += 4, c.properties[u].push(n.getFloat32(s, t)), s += 4;
      a.push(c);
    }
    return {
      header: r,
      tracks: a
    };
  }
}
class vC {
  constructor(e) {
    I(this, "props");
    I(this, "giftiHandler");
    I(this, "giftiIntensityHandler");
    I(this, "nodeModelDataHandler");
    I(this, "countourHandler");
    I(this, "createModelHandler");
    I(this, "applyColorHandler");
    I(this, "objHandler");
    I(this, "volumeHandler");
    I(this, "TRKHandler");
    I(this, "getHandler", (e) => e == oe.GIFTI ? this.giftiHandler : e == oe.GIFTIINTENSITY ? this.giftiIntensityHandler : e == oe.NODE ? this.nodeModelDataHandler : e == oe.CONTOUR ? this.countourHandler : e == oe.CREATEMODEL ? this.createModelHandler : e == oe.APPLYCOLOR ? this.applyColorHandler : e == oe.VOLUME ? this.volumeHandler : e == oe.OBJ ? this.objHandler : e == oe.TRK ? this.TRKHandler : null);
    this.props = e, this.giftiHandler = new ZE(), this.giftiIntensityHandler = new JE(), this.nodeModelDataHandler = new QE(), this.countourHandler = new eT(), this.createModelHandler = new tT(), this.applyColorHandler = new nT(), this.objHandler = new cT(), this.volumeHandler = new _C({}), this.TRKHandler = new qr();
  }
}
const R8 = new C(), P8 = new C(), pc = new $0();
class yC extends xt {
  constructor(e, t = 1, n = 16711680) {
    let s = 0;
    const r = e.geometry;
    if (r && r.isGeometry) {
      console.error(
        "THREE.VertexNormalsHelper no longer supports Geometry. Use BufferGeometry instead."
      );
      return;
    } else
      r && r.isBufferGeometry && (s = r.attributes.normal.count);
    const a = new F0(), o = new v0(s * 2 * 3, 3);
    a.setAttribute("position", o), super(a, new Ae({ color: n, toneMapped: !1 })), this.object = e, this.size = t, this.type = "VertexNormalsHelper", this.matrixAutoUpdate = !1, this.update();
  }
  update() {
    this.object.updateMatrixWorld(!0), pc.getNormalMatrix(this.object.matrixWorld);
    const e = this.object.matrixWorld, t = this.geometry.attributes.position, n = this.object.geometry;
    if (n && n.isGeometry) {
      console.error(
        "THREE.VertexNormalsHelper no longer supports Geometry. Use BufferGeometry instead."
      );
      return;
    } else if (n && n.isBufferGeometry) {
      const s = n.attributes.position, r = n.attributes.normal;
      let a = 0;
      for (let o = 0, c = s.count; o < c; o++)
        R8.set(s.getX(o), s.getY(o), s.getZ(o)).applyMatrix4(e), P8.set(r.getX(o), r.getY(o), r.getZ(o)), P8.applyMatrix3(pc).normalize().multiplyScalar(this.size).add(R8), t.setXYZ(a, R8.x, R8.y, R8.z), a = a + 1, t.setXYZ(a, P8.x, P8.y, P8.z), a = a + 1;
    }
    t.needsUpdate = !0;
  }
}
var mt = /* @__PURE__ */ ((i) => (i.MESH = "mesh", i.GROUP = "group", i))(mt || {});
class Kn {
  constructor(e) {
    I(this, "props");
    I(this, "name");
    I(this, "normals");
    I(this, "data");
    I(this, "vertices");
    I(this, "indices");
    I(this, "colors");
    I(this, "colorMap");
    I(this, "normal_help");
    I(this, "mesh");
    I(this, "options");
    I(this, "normalHelp");
    I(this, "volumeMaterial");
    I(this, "imageRange", null);
    I(this, "edgeImageRange", null);
    I(this, "sizeRange", null);
    I(this, "intensityValues");
    I(this, "added");
    I(this, "opacity", 1);
    I(this, "type");
    I(this, "intensityHeightIndex", []);
    //需要高亮的数据集
    I(this, "intensityIndex", 0);
    I(this, "normalList", null);
    I(this, "showBoundBox", (e) => {
      if (this.getViewModelIsMeshOrObject() == mt.MESH)
        if (e) {
          if (this.mesh != null) {
            const n = this.mesh.getObjectByName("boundingBox");
            if (n != null)
              n.visible = !0;
            else {
              const { center: s, radius: r } = this.mesh.geometry.boundingSphere, a = new hn(r, 32, 32), o = new c1({ color: 16776960, wireframe: !0 }), c = new y0(a, o);
              c.name = "boundingBox", c.position.set(s.x, s.y, s.z), this.mesh.add(c);
            }
          }
        } else {
          const n = this.mesh.getObjectByName("boundingBox");
          n.visible = !1;
        }
    });
    I(this, "showArrowHelp", (e) => {
      const { showArrow: t } = this.options;
      if (this.getViewModelIsMeshOrObject() == mt.MESH)
        if (e) {
          if (this.mesh != null) {
            const s = this.mesh.getObjectByName("arrowHelper");
            if (s != null)
              s.visible = !0;
            else {
              let { arrowList: r } = t;
              r == null && (r = [
                {
                  x: 1,
                  y: 0,
                  z: 0,
                  name: "x",
                  color: "#f0f",
                  length
                },
                {
                  x: 0,
                  y: 1,
                  z: 0,
                  name: "y",
                  color: "#ff0",
                  length
                },
                {
                  x: 0,
                  y: 0,
                  z: 1,
                  name: "z",
                  color: "#0ff",
                  length
                }
              ]);
              const a = new G0();
              this.mesh.geometry.computeBoundingSphere();
              const { center: o, radius: c } = this.mesh.geometry.boundingSphere;
              r.map(({ x: l, y: h, z: d, name: u, color: f, length: p }) => {
                const _ = new C(l, h, d);
                _.normalize();
                const g = new C(0, 0, 0), m = f || 16776960, v = c * 1.2, y = new fu(_, g, v, m), b = document.createElement("div");
                b.className = "label", b.textContent = u, b.style.marginTop = "-1em", b.style.color = f || 16776960;
                const w = new Z2(b);
                w.position.set(l * v, h * v, d * v), a.add(w), y.name = u, a.add(y);
              }), a.name = "arrowHelper", this.mesh.add(a);
            }
          }
        } else {
          const s = this.mesh.getObjectByName("arrowHelper");
          s.visible = !1;
        }
    });
    I(this, "updateOpacity", (e, t, n) => {
      if (this.mesh != null) {
        if (this.getViewModelIsMeshOrObject() == mt.GROUP)
          this.mesh.children.forEach((a) => {
            a.material.opacity = e, a.material.transparent = !0;
          });
        else if (t) {
          const r = this.mesh.material;
          r.opacity = e, r.transparent = !0;
        } else {
          const r = this.mesh.material;
          r.transparent = !0;
          const { handlerFactory: a } = n;
          a.getHandler(oe.APPLYCOLOR).applyColorToMesh(this, e);
        }
        this.opacity = e;
      }
    });
    I(this, "updateIsWireframe", (e) => {
      if (this.mesh != null)
        if (this.getViewModelIsMeshOrObject() == mt.GROUP)
          this.mesh.children.forEach((s) => {
            s.material.wireframe = e;
          });
        else {
          const n = this.mesh.material;
          n.wireframe = e;
        }
    });
    I(this, "updateVisitable", (e) => {
      this.mesh != null && (this.getViewModelIsMeshOrObject() == mt.GROUP ? this.iteratorUpdateVisitable(this.mesh, e) : this.mesh.visible = e);
    });
    I(this, "toggleVisitable", () => {
      if (this.mesh != null) {
        const e = !this.mesh.visible;
        this.iteratorUpdateVisitable(this.mesh, e);
      }
    });
    I(this, "iteratorUpdateVisitable", (e, t) => {
      e.children && e.children.length > 0 && e.children.forEach((n) => {
        this.iteratorUpdateVisitable(n, t);
      }), e.visible = t;
    });
    I(this, "remove", (e) => {
      if (this.getViewModelIsMeshOrObject() == mt.MESH)
        this.mesh != null && this.mesh.removeFromParent();
      else if (e != null && e.name != null) {
        const n = this.mesh.getObjectByName(e.name);
        if (n != null) {
          const { iterator: s } = e || {};
          s && this.removeChildren(n), this.mesh.remove(n);
        }
      } else {
        const { iterator: n } = e || {};
        n && this.removeChildren(this.mesh), this.mesh.removeFromParent();
      }
    });
    I(this, "removeChildren", (e) => {
      if (e.children)
        for (let t = 0; t < e.children.length; ) {
          const n = e.children[t];
          n.children && this.removeChildren(n), n.removeFromParent && n.removeFromParent();
        }
    });
    I(this, "updateNormalHelpStatus", (e) => {
      if (this.getViewModelIsMeshOrObject() == mt.MESH) {
        if (this.normalHelp != null)
          this.normalHelp.visible = e;
        else if (e) {
          const n = new yC(this.mesh, 5, 65280, 1);
          this.normalHelp = n, this.mesh.add(n);
        }
      }
    });
    I(this, "updateColorMap", (e, t) => {
      if (this.getViewModelIsMeshOrObject() == mt.MESH) {
        const { handlerFactory: s } = t, r = s.getHandler(oe.APPLYCOLOR);
        this.colorMap = e, r.applyColorToMesh(this, this.opacity);
      }
    });
    //如果当前的colorMap是具有时间点的数据,那么可以设置时间点切换的功能
    I(this, "updateIntensityIndex", (e, t) => {
      this.intensityIndex = e, this.updateColorMap(this.colorMap, t);
    });
    I(this, "updateImageRange", (e, t, n) => {
      this.getViewModelIsMeshOrObject() == mt.MESH && this.imageRange != null && (this.imageRange.displayMin = e, this.imageRange.displayMax = t, this.updateColorMap(this.colorMap, n));
    });
    I(this, "updateImagePosRange", (e, t, n) => {
      if (this.getViewModelIsMeshOrObject() == mt.MESH && this.imageRange != null) {
        const r = this.imageRange.originData.posMin, o = this.imageRange.originData.posMax - r;
        this.imageRange.posMin = e / 100 * o + r, this.imageRange.posMax = t / 100 * o + r, this.updateColorMap(this.colorMap, n);
      }
    });
    I(this, "updateImageNegRange", (e, t, n) => {
      if (this.getViewModelIsMeshOrObject() == mt.MESH && this.imageRange != null) {
        const r = this.imageRange.originData.negMin, o = this.imageRange.originData.negMax - r;
        this.imageRange.negMin = e / 100 * o + r, this.imageRange.negMax = t / 100 * o + r, this.updateColorMap(this.colorMap, n);
      }
    });
    /**
     * 修改球模型的大小
     */
    I(this, "updateNodeSizeRange", (e, t, n) => {
      if (this.sizeRange != null && this.mesh.children && this.mesh.children.length > 0) {
        const {
          NodeCoord: s = [],
          NodeSize: r = [],
          NodeColor: a = [],
          EdgeSize: o = [],
          EdgeColor: c = []
        } = this.data, l = this.sizeRange.originMax - this.sizeRange.originMin;
        this.sizeRange.min = this.sizeRange.originMin + e / 100 * l, this.sizeRange.max = this.sizeRange.originMax - (100 - t) / 100 * l;
        let h = 1, d = 1;
        this.mesh.children.forEach((u, f) => {
          u.name == "node" && this.sizeRange != null && (u.renderSize < this.sizeRange.min || u.renderSize == this.sizeRange.min ? (h = this.sizeRange.min / u.renderSize, d = this.sizeRange.min) : u.renderSize > this.sizeRange.max || u.renderSize == this.sizeRange.max ? (h = this.sizeRange.max / u.renderSize, d = this.sizeRange.max) : (h = r[f] / u.renderSize, d = r[f]), isNaN(h) || d != 0 && (u.geometry.scale(h, h, h), u.renderSize = d));
        });
      }
    });
    I(this, "updateNodeColor", () => {
    });
    I(this, "updateVolumeRenderContext", (e) => {
      this.type == oe.VOLUME && this.volumeMaterial != null && Object.keys(e).forEach((t) => {
        const n = e[t];
        t == "u_clim" ? this.volumeMaterial.uniforms[t].value.set(n[0], n[1]) : this.volumeMaterial.uniforms[t].value = n;
      });
    });
    /**
     * 根据type判断的mesh是一个Object3d还是一个ObjectGroup
     */
    I(this, "getViewModelIsMeshOrObject", () => this.type == oe.NODE ? mt.GROUP : mt.MESH);
    I(this, "handlePickOnChange", (e, t) => {
      if (this.getViewModelIsMeshOrObject() == mt.MESH) {
        const { intensityValues: n } = this;
        let s = null;
        const { index: r, intensityValue: a } = e;
        a != null ? s = a : s = n[r];
        const o = [];
        for (let c = 0; c < n.length; c++)
          n[c] == s && o.push(c);
        return this.intensityHeightIndex = o, this.updateColorMap(this.colorMap, t), t.updated = !0, {
          targetIntensityValue: s
        };
      }
      return null;
    });
    const { colors: t } = e || {};
    if (this.colors = t || [0.9, 0.9, 0.9, 1], this.props = e, this.added = !1, e != null) {
      const { name: n, colors: s, type: r } = e;
      this.colors = s || this.colors, this.name = n, this.type = r;
    }
  }
}
/*!
 * hold-event
 * https://github.com/yomotsu/hold-event
 * (c) 2020 @yomotsu
 * Released under the MIT License.
 */
var ns;
(function(i) {
  i.HOLD_START = "holdStart", i.HOLD_END = "holdEnd", i.HOLDING = "holding";
})(ns || (ns = {}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var t2 = function(i, e) {
  return t2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t, n) {
    t.__proto__ = n;
  } || function(t, n) {
    for (var s in n)
      Object.prototype.hasOwnProperty.call(n, s) && (t[s] = n[s]);
  }, t2(i, e);
};
function g4(i, e) {
  if (typeof e != "function" && e !== null)
    throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
  t2(i, e);
  function t() {
    this.constructor = i;
  }
  i.prototype = e === null ? Object.create(e) : (t.prototype = e.prototype, new t());
}
var xC = function() {
  function i() {
    this._listeners = {};
  }
  return i.prototype.addEventListener = function(e, t) {
    var n = this._listeners;
    n[e] === void 0 && (n[e] = []), n[e].indexOf(t) === -1 && n[e].push(t);
  }, i.prototype.removeEventListener = function(e, t) {
    var n = this._listeners, s = n[e];
    if (s !== void 0) {
      var r = s.indexOf(t);
      r !== -1 && s.splice(r, 1);
    }
  }, i.prototype.dispatchEvent = function(e) {
    var t = this._listeners, n = t[e.type];
    if (n !== void 0) {
      e.target = this;
      for (var s = n.slice(0), r = 0, a = s.length; r < a; r++)
        s[r].call(this, e);
    }
  }, i;
}(), Lf = function(i) {
  g4(e, i);
  function e(t) {
    var n = i.call(this) || this;
    return n._enabled = !0, n._holding = !1, n._intervalId = -1, n._deltaTime = 0, n._elapsedTime = 0, n._lastTime = 0, n._holdStart = function(s) {
      if (n._enabled && !n._holding) {
        n._deltaTime = 0, n._elapsedTime = 0, n._lastTime = performance.now(), n.dispatchEvent({
          type: ns.HOLD_START,
          deltaTime: n._deltaTime,
          elapsedTime: n._elapsedTime,
          originalEvent: s
        }), n._holding = !0;
        var r = function() {
          n._intervalId = n.holdIntervalDelay ? window.setTimeout(r, n.holdIntervalDelay) : window.requestAnimationFrame(r);
          var a = performance.now();
          n._deltaTime = a - n._lastTime, n._elapsedTime += n._deltaTime, n._lastTime = performance.now(), n.dispatchEvent({
            type: ns.HOLDING,
            deltaTime: n._deltaTime,
            elapsedTime: n._elapsedTime
          });
        };
        n._intervalId = n.holdIntervalDelay ? window.setTimeout(r, n.holdIntervalDelay) : window.requestAnimationFrame(r);
      }
    }, n._holdEnd = function(s) {
      if (n._enabled && n._holding) {
        var r = performance.now();
        n._deltaTime = r - n._lastTime, n._elapsedTime += n._deltaTime, n._lastTime = performance.now(), n.dispatchEvent({
          type: ns.HOLD_END,
          deltaTime: n._deltaTime,
          elapsedTime: n._elapsedTime,
          originalEvent: s
        }), window.clearTimeout(n._intervalId), window.cancelAnimationFrame(n._intervalId), n._holding = !1;
      }
    }, n.holdIntervalDelay = t, n;
  }
  return Object.defineProperty(e.prototype, "enabled", {
    get: function() {
      return this._enabled;
    },
    set: function(t) {
      this._enabled !== t && (this._enabled = t, this._enabled || this._holdEnd());
    },
    enumerable: !1,
    configurable: !0
  }), e;
}(xC);
(function(i) {
  g4(e, i);
  function e(t, n) {
    var s = i.call(this, n) || this;
    s._holdStart = s._holdStart.bind(s), s._holdEnd = s._holdEnd.bind(s);
    var r = s._holdStart, a = s._holdEnd;
    return t.addEventListener("mousedown", r), document.addEventListener("mouseup", a), window.addEventListener("blur", s._holdEnd), s;
  }
  return e;
})(Lf);
var J1 = function(i) {
  g4(e, i);
  function e(t, n) {
    var s = i.call(this, n) || this;
    s._holdStart = s._holdStart.bind(s), s._holdEnd = s._holdEnd.bind(s);
    var r = function(o) {
      bC(o) || o.keyCode === t && s._holdStart(o);
    }, a = function(o) {
      o.keyCode === t && s._holdEnd(o);
    };
    return document.addEventListener("keydown", r), document.addEventListener("keyup", a), window.addEventListener("blur", s._holdEnd), s;
  }
  return e;
}(Lf);
function bC(i) {
  var e = i.target;
  return e.tagName === "INPUT" || e.tagName === "SELECT" || e.tagName === "TEXTAREA" || e.isContentEditable;
}
class wC {
  constructor() {
    I(this, "transformControls");
    I(this, "transformMouseModel", Pn.X);
    I(this, "transformModel", n2.TRANSLATE);
    I(this, "mouseMove", (e) => this.handlerObjectByMouseInfo(e));
    I(this, "mouseDown", (e) => (this.transformControls != null && this.transformControls._onPointerDown(e, !0), !0));
    I(this, "mouseUpEvent", (e) => !0);
    /**
     * 根据鼠标滑动信息，处理相关移动数据
     * @param evt 
     */
    I(this, "handlerObjectByMouseInfo", (e) => {
      const { dir: t, left: n, right: s, abs: r } = e;
      if (this.transformControls != null)
        if (this.transformModel == n2.TRANSLATE)
          this.transformControls.setMode("translate"), s && (this.transformMouseModel == Pn.X ? this.transformControls._onPointerMove(e, !0, "X") : this.transformMouseModel == Pn.Y ? this.transformControls._onPointerMove(e, !0, "Y") : this.transformMouseModel == Pn.Z && this.transformControls._onPointerMove(e, !0, "Z"));
        else {
          const a = this.transformControls.object;
          this.transformControls.setMode("rotate"), a != null && s && (this.transformMouseModel == Pn.X ? this.transformControls._onPointerMove(e, !0, "X") : this.transformMouseModel == Pn.Y ? this.transformControls._onPointerMove(e, !0, "Y") : this.transformMouseModel == Pn.Z && this.transformControls._onPointerMove(e, !0, "Z"));
        }
      return !1;
    });
  }
  updateTransformMouseModel(e) {
    this.transformControls != null, this.transformMouseModel = e;
  }
  updateTransformModel(e) {
    this.transformControls != null && this.transformControls.setMode(e), this.transformModel = e;
  }
}
var n2 = /* @__PURE__ */ ((i) => (i.TRANSLATE = "translate", i.ROTATE = "rotate", i))(n2 || {}), Pn = /* @__PURE__ */ ((i) => (i.X = "x", i.Y = "y", i.Z = "z", i))(Pn || {});
class mc {
  constructor(e) {
    I(this, "canvas");
    I(this, "last_x", null);
    I(this, "last_y", null);
    I(this, "x", 0);
    I(this, "y", 0);
    I(this, "accuracy", 1);
    I(this, "viewerModel");
    I(this, "movement", "rotate");
    I(this, "mouseInfo");
    I(this, "viewer");
    I(this, "enabled", !0);
    I(this, "props");
    // mouseMoveEvent: any = null
    I(this, "transformControls", null);
    I(this, "transformControlsEnable", !0);
    I(this, "mouseTransform", new wC());
    I(this, "event", () => {
      const e = {
        W: 87,
        A: 65,
        S: 83,
        D: 68,
        Space: 32,
        ARROW_LEFT: 37,
        ARROW_UP: 38,
        ARROW_RIGHT: 39,
        ARROW_DOWN: 40
      }, t = new J1(e.W, 100), n = new J1(e.A, 100), s = new J1(e.S, 100), r = new J1(e.D, 100), a = new J1(e.Space, 100);
      new J1(e.ARROW_LEFT, 100), new J1(e.ARROW_UP, 100), new J1(e.ARROW_RIGHT, 100), new J1(e.ARROW_DOWN, 100);
      const o = this, { keyCameraControl: c } = this.props;
      c && (n.addEventListener("holding", function(l) {
        o.viewer.cameraControls.rotate(-0.1 * D8.DEG2RAD * l.deltaTime, 0, !0);
      }), r.addEventListener("holding", function(l) {
        o.viewer.cameraControls.rotate(0.1 * D8.DEG2RAD * l.deltaTime, 0, !0);
      }), t.addEventListener("holding", function(l) {
        o.viewer.cameraControls.rotate(0, -0.05 * D8.DEG2RAD * l.deltaTime, !0);
      }), s.addEventListener("holding", function(l) {
        o.viewer.cameraControls.rotate(0, 0.05 * D8.DEG2RAD * l.deltaTime, !0);
      })), a.addEventListener("holdEnd", function(l) {
        o.viewer.cameraControls.reset(!0);
      });
    });
    I(this, "handleEvent", (e) => {
      e.addEventListener(
        "mousedown",
        (t) => {
          document.addEventListener("mousemove", this.mouseDrag, !1), document.addEventListener("mouseup", this.mouseDragEnd, !1), this.movement = t.which === 1 ? "rotate" : "translate";
        },
        !1
      );
    });
    //处理鼠标事件
    I(this, "mouseDragEnd", () => {
      this.enabled && (document.removeEventListener("mousemove", this.mouseDrag, !1), document.removeEventListener("mouseup", this.mouseDragEnd, !1), this.last_x = null, this.last_y = null);
    });
    I(this, "mouseDrag", (e) => {
      this.enabled && (e.preventDefault(), this.drag(this.mouseInfo, 1.1));
    });
    I(this, "drag", (e, t) => {
      const n = this.viewerModel, s = new k0(), r = e.x, a = e.y;
      this.x = r, this.y = a;
      let o, c;
      if (this.last_x !== null && this.last_y != null && (o = r - this.last_x, c = a - this.last_y, this.movement === "rotate")) {
        s.copy(n.matrix).invert();
        let l = new C(1, 0, 0).applyMatrix4(s).normalize();
        n.rotateOnAxis(l, c / 150), s.copy(n.matrix).invert(), l = new C(0, 1, 0).applyMatrix4(s).normalize(), n.rotateOnAxis(l, o / 150);
      }
      this.last_x = r, this.last_y = a, this.viewer.updated = !0;
    });
    I(this, "mouseMoveEvent", (e) => {
      const { mouseMoveEvent: t } = this.props;
      this.transformControls != null && this.transformControlsEnable && this.mouseTransform.mouseMove(e) && (this.viewer.updated = !0), t && t(e);
    });
    I(this, "mouseDownEvent", (e) => {
      const { mouseDownEvent: t } = this.props;
      this.transformControls != null && this.transformControlsEnable && this.mouseTransform.mouseDown(e) && (this.viewer.updated = !0), t && t(e);
    });
    I(this, "mouseUpEvent", (e) => {
      this.transformControls != null && this.transformControlsEnable && this.mouseTransform.mouseUpEvent(e) && (this.viewer.updated = !0);
    });
    I(this, "contextmenuEvent", (e) => {
      const { contextmenuEvent: t } = this.props;
      t && t(e);
    });
    this.canvas = e.canvas, this.viewerModel = e.viewerModel, this.props = e, this.transformControls = e.transformControls, this.transformControls != null && (this.mouseTransform.transformControls = this.transformControls), this.mouseInfo = this.captureMouse(e.canvas), this.handleEvent(e.canvas), this.viewer = e.viewer, this.event();
  }
  captureMouse(e) {
    const t = { x: 0, y: 0, left: !1, middle: !1, right: !1 };
    return e.addEventListener(
      "mousemove",
      (n) => {
        const s = this.getOffset(e);
        let r, a;
        if (n.pageX !== void 0 ? (r = n.pageX, a = n.pageY) : (r = n.clientX + window.pageXOffset, a = n.clientY + window.pageYOffset), this.mouseMoveEvent) {
          const { type: o, abs: c } = jE({ x: t.x, y: t.y }, { x: r - s.left, y: a - s.top }, null);
          t.x = r - s.left, t.y = a - s.top, this.mouseMoveEvent({ type: "mousemove", clientX: n.clientX, clientY: n.clientY, button: n.button, buttons: n.buttons, ...t, dir: o, abs: c });
        } else
          t.x = r - s.left, t.y = a - s.top;
      },
      !1
    ), e.addEventListener(
      "mousedown",
      (n) => {
        n.preventDefault(), n.button === 0 && (t.left = !0), n.button === 1 && (t.middle = !0), n.button === 2 && (t.right = !0), this.mouseDownEvent(n);
      },
      !1
    ), e.addEventListener(
      "mouseup",
      (n) => {
        n.preventDefault(), n.button === 0 && (t.left = !1), n.button === 1 && (t.middle = !1), n.button === 2 && (t.right = !1), this.mouseUpEvent(n);
      },
      !1
    ), e.addEventListener(
      "mouseleave",
      function(n) {
        n.preventDefault(), t.left = t.middle = t.right = !1;
      },
      !1
    ), e.addEventListener(
      "contextmenu",
      (n) => {
        this.contextmenuEvent(n), n.preventDefault();
      },
      !1
    ), e.addEventListener("click", (n) => {
      if (!(!n.shiftKey && !n.ctrlKey)) {
        if (this.viewer.pickOnChange) {
          const s = this.viewer.pick(this.mouseInfo.x, this.mouseInfo.y, null);
          this.viewer.pickOnChange(s, this.viewer);
        }
        n.preventDefault();
      }
    }), t;
  }
  getOffset(e) {
    let t = 0, n = 0;
    for (; e.offsetParent; )
      t += e.offsetTop, n += e.offsetLeft, e = e.offsetParent;
    return { top: t, left: n };
  }
  // getMouseDir(oldPointer, newPointer, time) {
  // 	let { x: preX, y: preY }: any = oldPointer
  // 	let { x, y } = newPointer
  // 	if (Math.abs(preX - x) > Math.abs(preY - y)) {
  // 		if (preX - x > this.accuracy - 1) {
  // 			return 'X-'
  // 		} else if (x - preX > this.accuracy - 1) {
  // 			return 'X+'
  // 		} else {
  // 			return '='
  // 		}
  // 	} else {
  // 		if (preY - y > this.accuracy - 1) {
  // 			return 'Y-'
  // 		} else if (y - preY > this.accuracy - 1) {
  // 			return 'Y+'
  // 		} else {
  // 			return '='
  // 		}
  // 	}
  // }
  updateTransformMouseModel(e) {
    this.transformControls != null && this.mouseTransform.updateTransformMouseModel(e);
  }
  updateTransformModel(e) {
    this.transformControls != null && this.mouseTransform.updateTransformModel(e);
  }
  setTransformControlsEnable(e) {
    this.transformControlsEnable = e;
  }
}
var Pr = /* @__PURE__ */ ((i) => (i.DirectionalLight = "DirectionalLight", i.PointLight = "PointLight", i.AmbientLight = "AmbientLight", i))(Pr || {});
class MC {
  parse(e, t, n) {
    t && typeof t == "object" && (console.warn('THREE.PLYExporter: The options parameter is now the third argument to the "parse" function. See the documentation for the new API.'), n = t, t = void 0);
    function s(y) {
      e.traverse(function(b) {
        if (b.isMesh === !0) {
          const w = b, x = w.geometry;
          if (x.isBufferGeometry !== !0)
            throw new Error("THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.");
          x.hasAttribute("position") === !0 && y(w, x);
        }
      });
    }
    n = Object.assign({
      binary: !1,
      excludeAttributes: [],
      // normal, uv, color, index
      littleEndian: !1
    }, n);
    const a = n.excludeAttributes;
    let o = !1, c = !1, l = !1, h = 0, d = 0;
    e.traverse(function(y) {
      if (y.isMesh === !0) {
        const w = y.geometry;
        if (w.isBufferGeometry !== !0)
          throw new Error("THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.");
        const x = w.getAttribute("position"), S = w.getAttribute("normal"), T = w.getAttribute("uv"), M = w.getAttribute("color"), A = w.getIndex();
        if (x === void 0)
          return;
        h += x.count, d += A ? A.count / 3 : x.count / 3, S !== void 0 && (o = !0), T !== void 0 && (l = !0), M !== void 0 && (c = !0);
      }
    });
    const u = new f0(), f = a.indexOf("index") === -1;
    if (o = o && a.indexOf("normal") === -1, c = c && a.indexOf("color") === -1, l = l && a.indexOf("uv") === -1, f && d !== Math.floor(d))
      return console.error(
        "PLYExporter: Failed to generate a valid PLY file with triangle indices because the number of indices is not divisible by 3."
      ), null;
    const p = 4;
    let _ = `ply
format ${n.binary ? n.littleEndian ? "binary_little_endian" : "binary_big_endian" : "ascii"} 1.0
element vertex ${h}
property float x
property float y
property float z
`;
    o === !0 && (_ += `property float nx
property float ny
property float nz
`), l === !0 && (_ += `property float s
property float t
`), c === !0 && (_ += `property uchar red
property uchar green
property uchar blue
`), f === !0 && (_ += `element face ${d}
property list uchar int vertex_index
`), _ += `end_header
`;
    const g = new C(), m = new $0();
    let v = null;
    if (n.binary === !0) {
      const y = new TextEncoder().encode(_), b = h * (4 * 3 + (o ? 4 * 3 : 0) + (c ? 3 : 0) + (l ? 4 * 2 : 0)), w = f ? d * (p * 3 + 1) : 0, x = new DataView(new ArrayBuffer(y.length + b + w));
      new Uint8Array(x.buffer).set(y, 0);
      let S = y.length, T = y.length + b, M = 0;
      s(function(A, D) {
        const z = D.getAttribute("position"), O = D.getAttribute("normal"), U = D.getAttribute("uv"), V = D.getAttribute("color"), Y = D.getIndex();
        m.getNormalMatrix(A.matrixWorld);
        for (let W = 0, X = z.count; W < X; W++)
          g.fromBufferAttribute(z, W), g.applyMatrix4(A.matrixWorld), x.setFloat32(S, g.x, n.littleEndian), S += 4, x.setFloat32(S, g.y, n.littleEndian), S += 4, x.setFloat32(S, g.z, n.littleEndian), S += 4, o === !0 && (O != null ? (g.fromBufferAttribute(O, W), g.applyMatrix3(m).normalize(), x.setFloat32(S, g.x, n.littleEndian), S += 4, x.setFloat32(S, g.y, n.littleEndian), S += 4, x.setFloat32(S, g.z, n.littleEndian), S += 4) : (x.setFloat32(S, 0, n.littleEndian), S += 4, x.setFloat32(S, 0, n.littleEndian), S += 4, x.setFloat32(S, 0, n.littleEndian), S += 4)), l === !0 && (U != null ? (x.setFloat32(S, U.getX(W), n.littleEndian), S += 4, x.setFloat32(S, U.getY(W), n.littleEndian), S += 4) : (x.setFloat32(S, 0, n.littleEndian), S += 4, x.setFloat32(S, 0, n.littleEndian), S += 4)), c === !0 && (V != null ? (u.fromBufferAttribute(V, W).convertLinearToSRGB(), x.setUint8(S, Math.floor(u.r * 255)), S += 1, x.setUint8(S, Math.floor(u.g * 255)), S += 1, x.setUint8(S, Math.floor(u.b * 255)), S += 1) : (x.setUint8(S, 255), S += 1, x.setUint8(S, 255), S += 1, x.setUint8(S, 255), S += 1));
        if (f === !0)
          if (Y !== null)
            for (let W = 0, X = Y.count; W < X; W += 3)
              x.setUint8(T, 3), T += 1, x.setUint32(T, Y.getX(W + 0) + M, n.littleEndian), T += p, x.setUint32(T, Y.getX(W + 1) + M, n.littleEndian), T += p, x.setUint32(T, Y.getX(W + 2) + M, n.littleEndian), T += p;
          else
            for (let W = 0, X = z.count; W < X; W += 3)
              x.setUint8(T, 3), T += 1, x.setUint32(T, M + W, n.littleEndian), T += p, x.setUint32(T, M + W + 1, n.littleEndian), T += p, x.setUint32(T, M + W + 2, n.littleEndian), T += p;
        M += z.count;
      }), v = x.buffer;
    } else {
      let y = 0, b = "", w = "";
      s(function(x, S) {
        const T = S.getAttribute("position"), M = S.getAttribute("normal"), A = S.getAttribute("uv"), D = S.getAttribute("color"), z = S.getIndex();
        m.getNormalMatrix(x.matrixWorld);
        for (let O = 0, U = T.count; O < U; O++) {
          g.fromBufferAttribute(T, O), g.applyMatrix4(x.matrixWorld);
          let V = g.x + " " + g.y + " " + g.z;
          o === !0 && (M != null ? (g.fromBufferAttribute(M, O), g.applyMatrix3(m).normalize(), V += " " + g.x + " " + g.y + " " + g.z) : V += " 0 0 0"), l === !0 && (A != null ? V += " " + A.getX(O) + " " + A.getY(O) : V += " 0 0"), c === !0 && (D != null ? (u.fromBufferAttribute(D, O).convertLinearToSRGB(), V += " " + Math.floor(u.r * 255) + " " + Math.floor(u.g * 255) + " " + Math.floor(u.b * 255)) : V += " 255 255 255"), b += V + `
`;
        }
        if (f === !0) {
          if (z !== null)
            for (let O = 0, U = z.count; O < U; O += 3)
              w += `3 ${z.getX(O + 0) + y}`, w += ` ${z.getX(O + 1) + y}`, w += ` ${z.getX(O + 2) + y}
`;
          else
            for (let O = 0, U = T.count; O < U; O += 3)
              w += `3 ${y + O} ${y + O + 1} ${y + O + 2}
`;
          d += z ? z.count / 3 : T.count / 3;
        }
        y += T.count;
      }), v = `${_}${b}${f ? `${w}
` : `
`}`;
    }
    return typeof t == "function" && requestAnimationFrame(() => t(v)), v;
  }
}
U8.install({ THREE: mu });
class CC {
  constructor(e) {
    I(this, "props");
    I(this, "modelMap");
    //原型数据
    I(this, "meshList");
    I(this, "camera");
    //相机
    I(this, "scene");
    //场景
    I(this, "lightMap");
    I(this, "renderer");
    //渲染器
    I(this, "labelRenderer");
    //labelRenderer渲染器
    I(this, "cameraControls");
    //相机控制器
    I(this, "clock");
    I(this, "viewerModel");
    I(this, "defaultLight");
    I(this, "mouse");
    I(this, "containerId");
    I(this, "autorotate");
    I(this, "current_frame");
    I(this, "transformControls");
    I(this, "handlerFactory");
    I(this, "updated", !0);
    I(this, "gridX");
    I(this, "gridY");
    I(this, "gridZ");
    I(this, "helper");
    I(this, "pickOnChange");
    /**
     * 创建three场景，根据相关参数设定相机，光照点初始位置
     */
    I(this, "initialScene", (e) => {
      const {
        containerId: t,
        cameraOption: n,
        backgroundColor: s,
        webglRebderOptions: r = {}
      } = e, a = document.getElementById(t), o = a == null ? void 0 : a.children;
      if (o != null)
        for (let c = 0; c < o.length; c++) {
          const l = o[c];
          a == null || a.removeChild(l);
        }
      if (a != null) {
        const c = a.offsetWidth, l = a.offsetHeight;
        this.camera = this.initCamera(n, c, l), this.clock = new H2(), this.scene = new x2(), this.viewerModel = new G0(), this.scene.add(this.viewerModel), this.renderer = new y2({ antialias: !0, ...r }), this.renderer.setSize(c, l), this.renderer.sortObjects = !1, this.renderer.setClearColor(s || 0), this.applyDefaultLight(), this.props.labelRender && (this.labelRenderer = new nM(), a.appendChild(this.labelRenderer.domElement), this.labelRenderer.setSize(c, l), this.labelRenderer.domElement.style.position = "absolute", this.labelRenderer.domElement.style.top = "0px", this.cameraControls = new U8(this.camera, this.labelRenderer.domElement)), a.appendChild(this.renderer.domElement);
        let h = null;
        if (this.props.labelRender ? h = this.labelRenderer.domElement : h = this.renderer.domElement, this.cameraControls = new U8(this.camera, h), this.props.transformControl) {
          const d = new vu(this.camera, h, this.props.transformControl);
          d.addEventListener("change", () => {
            this.updated = !0;
          }), d.addEventListener("dragging-changed", function(u) {
          }), this.transformControls = d, this.transformControls.enabled = !1, this.scene.add(d);
        }
        this.cameraControls.minDistance = 5, this.cameraControls.maxDistance = 1e4, this.cameraControls.mouseButtons.left = U8.ACTION.NONE, this.cameraControls.mouseButtons.right = U8.ACTION.NONE, this.props.axesShow && this.viewerModel.add(new pu(this.props.axesShow)), this.animation();
      }
    });
    I(this, "initCamera", (e, t, n) => {
      const s = new Qe(2, t / n, 1, 4e4), r = 500;
      return s.position.z = r, s;
    });
    I(this, "addEventListener", () => {
      window.addEventListener("resize", () => {
        const e = document.getElementById(this.containerId);
        e != null && this.updateViewerByWithAndHeight(e.clientWidth, e.clientHeight);
      });
    });
    I(this, "updateViewerByWithAndHeight", (e, t) => {
      this.renderer.setSize(e, t), this.props.labelRender && this.labelRenderer.setSize(e, t), this.camera.aspect = e / t, this.camera.updateProjectionMatrix();
    });
    I(this, "updateSize", (e, t) => {
      this.updateViewerByWithAndHeight(e, t);
    });
    /**
     * 设置默认光源
     */
    I(this, "applyDefaultLight", () => {
      const {
        defaultLightType: e = "PointLight"
        /* PointLight */
      } = this.props;
      this.defaultLight = new mu[e](16777215, 1), (e == "PointLight" || e == "DirectionalLight") && this.defaultLight.position.set(0, 0, 500), this.lightMap.set("default", this.defaultLight), this.scene.add(this.defaultLight);
    });
    I(this, "updateLightIntensity", (e) => {
      this.lightMap != null && this.lightMap.forEach((t) => {
        t.intensity = e;
      });
    });
    /**
     * 只能修改默认的光源位置
     */
    I(this, "updateLightPosition", (e, t) => {
      const n = this.lightMap.get(e);
      n != null && n.position.set(t.x, t.y, t.z);
    });
    /**
     * 添加光源
     */
    I(this, "addLight", ({
      coordinate: e,
      index: t,
      type: n,
      intensity: s,
      color: r
    }) => {
      if (t == "default")
        throw Error("index not allow is default");
      if (this.lightMap.get(t) != null)
        throw Error("index is exit");
      let a = null;
      n == Pr.DirectionalLight ? (a = new k2(r || 16772829, s || 1), a.position.set(e.x, e.y, e.z)) : n == Pr.PointLight ? (a = new z2(r || 16772829), a.position.set(e.x, e.y, e.z)) : n == Pr.AmbientLight && (a = new B2(r || 16772829), a.position.set(e.x, e.y, e.z)), this.lightMap.set(t, a);
    });
    I(this, "updateLookPostion", ({ x: e, y: t, z: n }) => {
      this.viewerModel != null && this.viewerModel.lookAt(new C(e, t, n)), this.updated = !0;
    });
    I(this, "animation", () => {
      const e = this.viewerModel;
      let t;
      this.camera.position, window.requestAnimationFrame(this.animation);
      const n = this.clock.getDelta();
      t = n * 0.05, this.autorotate.x && (e.rotation.x += t, this.updated = !0), this.autorotate.y && (e.rotation.y += t, this.updated = !0), this.autorotate.z && (e.rotation.z += t, this.updated = !0), (this.cameraControls.update(n) || this.updated) && (this.props.labelRender && this.labelRenderer.render(this.scene, this.camera), this.renderer.render(this.scene, this.camera)), this.updated = !1;
    });
    I(this, "updateAutorotate", (e) => {
      this.autorotate = {
        ...this.autorotate,
        ...e
      };
    });
    /**
     * 获取相机
     */
    I(this, "getCamera", () => this.camera);
    /**
     * 获取相机控制器
     */
    I(this, "getCameraControll", () => this.cameraControls);
    I(this, "addModelToViewer", (e, t, n) => {
      (n || !e.added) && (this.viewerModel.add(e.mesh), e.added = !0), t.transformControl && this.transformControls != null && this.transformControls.attach(e.mesh), t && t.grid && e.mesh && this.gridInit(e.mesh), t && t.showArrow && this.arrowInit(e), this.updated = !0;
    });
    I(this, "handleGiftiFile", (e, t, n = {}) => this.handleModelByFile(e, {
      name: t,
      handlerTypes: [oe.GIFTI, oe.CREATEMODEL],
      options: n
    }).then((s) => {
      const { modelData: r } = s;
      r != null && (r.name = t, this.addModelToViewer(r, n)), this.modelMap.set(t, s);
    }));
    /**
     * 处理强度文件，需要指定使用的模型索引值，isNoumenon标志是重创建还是复制模式
     */
    I(this, "handleGiftiIntensityFile", (e, t, n = {}) => {
      const { modelName: s } = n, r = this.modelMap.get(s);
      let a = r.modelData;
      const o = [];
      return n.isNoumenon || (a = new Kn({ name: t, type: oe.GIFTIINTENSITY }), a.indices = r.modelData.indices, a.vertices = r.modelData.vertices, a.normals = r.modelData.normals, a.added = !1, o.push(oe.CREATEMODEL)), o.push(oe.GIFTIINTENSITY), o.push(oe.APPLYCOLOR), this.handleModelByFile(e, {
        name: t,
        options: n,
        initialHandledResult: { modelData: a },
        handlerTypes: o
      }).then((c) => {
        const { modelData: l } = c;
        l != null && (l.name = t, this.addModelToViewer(l, n), this.modelMap.set(t, c));
      });
    });
    I(this, "handleModelJson", (e, t, n = {}) => {
      const { indices: s, vertices: r, normals: a, intensityValues: o } = e, c = new Kn({
        type: oe.GIFTI
      });
      c.indices = s, c.vertices = r, c.name = t, c.normals = a;
      const l = [oe.CREATEMODEL];
      if (o != null) {
        const d = y6(o);
        l.push(oe.APPLYCOLOR), c.imageRange = d, c.intensityValues = o;
      }
      const h = this.handlerData(e, { ...n, name: t }, l, {
        modelData: c
      });
      this.addModelToViewer(h.modelData, n || {}), this.modelMap.set(t, h);
    });
    /**
     * 球棍模型
     * @param data
     * @param name
     * @param options
     */
    I(this, "handleNodeJson", (e, t, n = {}) => {
      const s = this.handlerData(e, { ...n, name: t }, [oe.NODE]);
      this.addModelToViewer(s.modelData, n), this.modelMap.set(t, s);
    });
    /**
     * 等高线
     * @param data
     * @param name
     * @param options
     */
    I(this, "handleContourJson", (e, t, n) => {
      const s = this.handlerData(e, { ...n, name: t }, [
        oe.CONTOUR,
        oe.APPLYCOLOR
      ]);
      this.addModelToViewer(s.modelData, n), this.modelMap.set(t, s);
    });
    I(this, "handleTRK", (e, t, n = {}) => {
      const s = this.handlerData(e, { ...n, name: t }, [
        oe.TRK
      ]);
      this.addModelToViewer(s.modelData, n), this.modelMap.set(t, s);
    });
    I(this, "handleNiftiVolume", (e, t, n = {}) => {
      const s = this.handlerData(e, { ...n, name: t }, [oe.VOLUME]);
      this.addModelToViewer(s.modelData, n), this.modelMap.set(t, s);
    });
    I(this, "handleModelByFile", (e, {
      name: t,
      handlerTypes: n,
      options: s,
      initialHandledResult: r
    }) => new Promise((o, c) => {
      const l = new FileReader();
      l.onload = (h) => {
        const d = h.target.result, u = this.handlerData(
          d,
          { ...s, name: t },
          n,
          r
        );
        o(u);
      }, l.readAsText(e, "UTF-8");
    }));
    I(this, "handlerData", (e, t, n, s) => {
      const r = { ...s, data: e, options: t };
      return n.reduce(
        (o, c, l, h) => this.handlerFactory.getHandler(c).handle(o, r, this),
        r
      );
    });
    I(this, "handlerOBJ", (e, t) => {
      const { name: n } = t;
      this.handlerFactory.getHandler(oe.OBJ).handle({ OBJFileURL: e }, { ...t, name: n }, this).then((r) => {
        this.addModelToViewer(r.modelData, t), this.modelMap.set(n, r);
      });
    });
    /**
     * 修改透明度
     * 默认修改模型所有的透明度，可以指定index索引值，改值是加载模型是指定的index
     * @param alpha
     * @param options
     */
    I(this, "updateOpacity", (e, t) => {
      const { name: n, forceTransparent: s = !0 } = t, r = this.modelMap.get(n);
      if (r != null) {
        const a = r.modelData;
        a && a.updateOpacity(e, s, this);
      }
      this.updated = !0;
    });
    /**
     * 是否显示线框模型
     * @param isWireframe
     * @param shape_name
     */
    I(this, "updateWireframe", (e, t) => {
      const { name: n } = t, s = this.modelMap.get(n);
      if (s != null) {
        const { modelData: r } = s;
        r && r.updateIsWireframe(e);
      }
      this.updated = !0;
    });
    I(this, "showBoundBox", (e, t) => {
      const { name: n } = t, s = this.modelMap.get(n);
      if (s != null) {
        const { modelData: r } = s;
        r && r.showBoundBox(e);
      }
      this.updated = !0;
    });
    I(this, "setVisitable", (e, t) => {
      const { name: n } = t, s = this.modelMap.get(n);
      if (s != null) {
        const { modelData: r } = s;
        r && r.updateVisitable(e);
      }
      this.updated = !0;
    });
    I(this, "toggleVisitable", (e) => {
      const t = this.modelMap.get(e);
      if (t != null) {
        const { modelData: n } = t;
        n && n.toggleVisitable();
      }
      this.updated = !0;
    });
    I(this, "getModelDataByName", (e) => {
      const t = this.modelMap.get(e);
      return t != null ? t.modelData : null;
    });
    I(this, "updateNormalHelpStatus", (e, t) => {
      const { name: n } = t, s = this.modelMap.get(n);
      if (s != null) {
        const { modelData: r } = s;
        r && r.updateNormalHelpStatus(e);
      }
      this.updated = !0;
    });
    I(this, "updateColorMap", (e, t) => {
      const { name: n } = t, s = this.modelMap.get(n);
      if (s != null) {
        const { modelData: r } = s;
        r && r.updateColorMap(e, this);
      }
      this.updated = !0;
    });
    I(this, "updateImagePosRange", (e, t, n) => {
      const { name: s } = n, r = this.modelMap.get(s);
      if (r != null) {
        const a = r.modelData;
        a && a.updateImagePosRange(e, t, this);
      }
      this.updated = !0;
    });
    I(this, "updateImageNegRange", (e, t, n) => {
      const { name: s } = n, r = this.modelMap.get(s);
      if (r != null) {
        const { modelData: a } = r;
        a && a.updateImageNegRange(e, t, this);
      }
      this.updated = !0;
    });
    I(this, "updateIntensityIndex", (e, t) => {
      const { name: n } = t, s = this.modelMap.get(n);
      if (s != null) {
        const { modelData: r } = s;
        r && r.updateIntensityIndex(e, this);
      }
      this.updated = !0;
    });
    I(this, "updateNodeSizeRange", (e, t, n) => {
      const { name: s } = n, r = this.modelMap.get(s);
      if (r != null) {
        const { modelData: a } = r;
        a && a.updateNodeSizeRange(e, t, this);
      }
      this.updated = !0;
    });
    I(this, "updateVolumeRenderContext", (e, t) => {
      const { name: n } = t, s = this.modelMap.get(n);
      if (s != null) {
        const { modelData: r } = s;
        r && r.updateVolumeRenderContext(e);
      }
      this.updated = !0;
    });
    I(this, "updateGrid", (e) => {
      const { x: t, y: n, z: s } = e;
      this.gridX != null && this.gridY != null && this.gridZ != null && (this.gridZ.position.set(t, 0, 0), this.gridY.position.set(0, n, 0), this.gridX.position.set(0, 0, s)), this.updated = !0;
    });
    I(this, "clear", () => {
      this.modelMap.clear(), this.viewerModel.clear(), this.props.labelRender && this.labelRenderer.clear(), this.gridX = null, this.gridY = null, this.gridZ = null, this.updated = !0;
    });
    I(this, "arrowInit", (e) => {
      e.showArrowHelp(!0);
    });
    I(this, "gridInit", (e) => {
      if (e && e.geometry) {
        e.geometry.boundingBox == null && e.geometry.computeBoundingBox();
        const { max: t, min: n } = e.geometry.boundingBox, r = Math.round(100 / 10), a = r, o = new C(0, 0, 0), c = this.getColorAxes(), l = r * Math.floor(n.x / r), h = r * Math.ceil(t.x / r), d = r * Math.floor(n.y / r), u = r * Math.ceil(t.y / r), f = r * Math.floor(n.z / r), p = r * Math.ceil(t.z / r), _ = this.gridHelp(
          -u + o.y,
          // horizontal_from
          -d + o.y,
          // horizontal_to
          l - o.x,
          // x1
          h - o.x,
          // x2
          c.three_x,
          // horizontal_color
          l - o.x,
          // vertical_from
          h - o.x,
          // vertical_to
          -d + o.y,
          // z1
          -u + o.y,
          // z2
          a
        );
        _.name = "gridXY";
        const g = this.gridHelp(
          f - o.z,
          // horizontal_from
          p - o.z,
          // horizontal_to
          l - o.x,
          // x1
          h - o.x,
          // x2
          c.three_y,
          // horizontal_color
          l - o.x,
          // vertical_from
          h - o.x,
          // vertical_to
          f - o.z,
          // z1
          p - o.z,
          // z2
          a
        );
        g.name = "gridXZ";
        const m = this.gridHelp(
          f - o.z,
          // horizontal_from
          p - o.z,
          // horizontal_to
          d - o.y,
          // x1
          u - o.y,
          // x2
          c.three_z,
          // horizontal_color
          d - o.y,
          // vertical_from
          u - o.y,
          // vertical_to
          f - o.z,
          // z1
          p - o.z,
          // z2
          a
        );
        m.name = "gridYZ", _.rotation.x = Math.PI / 2, m.rotation.z = Math.PI / 2, this.gridX = _, this.gridY = g, this.gridZ = m, this.viewerModel.add(_), this.viewerModel.add(g), this.viewerModel.add(m);
      }
    });
    I(this, "getColorAxes", () => {
      const e = {};
      return e.x = "#f0f", e.y = "#ff0", e.z = "#0ff", e.three_x = new f0(e.x), e.three_y = new f0(e.y), e.three_z = new f0(e.z), e;
    });
    /**
     * 修改鼠标运动方式
     */
    I(this, "updateMouseModel", (e) => {
      this.mouse != null && this.mouse.updateTransformMouseModel(e);
    });
    /**
     * 修改鼠标运动方式
     */
    I(this, "updateTransformMouseModel", (e) => {
      this.mouse != null && this.mouse.updateTransformModel(e);
    });
    I(this, "remove", (e, t) => {
      const n = this.modelMap.get(e);
      if (n != null) {
        const { modelData: s } = n;
        s && s.remove(t);
      }
      this.updated = !0;
    });
    I(this, "getObjectPosition", (e) => {
      const t = this.modelMap.get(e);
      if (t != null) {
        const n = this.viewerModel.getObjectByName(e);
        if (n != null) {
          const { modelData: s } = t;
          s.mesh.geometry.computeBoundingSphere();
          const { center: r, radius: a } = s.mesh.geometry.boundingSphere;
          return {
            position: n.position,
            quaternion: n.quaternion,
            center: r,
            radius: a,
            matrix: n.matrix
          };
        }
      }
    });
    I(this, "exportObjectByName", (e) => {
      const t = this.viewerModel.getObjectByName(e);
      t != null && new MC().parse(t, { excludeAttributes: ["color", "normal", "uv"] });
    });
    I(this, "gridHelp", (e, t, n, s, r, a, o, c, l, h) => {
      const d = [];
      for (let g = e; g <= t; g += h)
        d.push(n), d.push(0), d.push(g), d.push(s), d.push(0), d.push(g);
      for (let g = a; g <= o; g += h)
        d.push(g), d.push(0), d.push(c), d.push(g), d.push(0), d.push(l);
      const u = new Ae({
        color: r
        // vertexColors: true
      }), f = new ee(new Float32Array(d), 3), p = new F0();
      return p.setAttribute("position", f), new xt(p, u);
    });
    I(this, "normalHelp", () => {
      const e = new s8(2, 10, 3);
      e.translate(0, 5, 0), e.rotateX(Math.PI / 2), this.helper = new y0(e, new R2()), this.viewerModel.add(this.helper);
    });
    I(this, "pick", (e, t, n) => {
      e = e === void 0 ? this.mouse.x : e, t = t === void 0 ? this.mouse.y : t, e = e / this.renderer.domElement.offsetWidth * 2 - 1, t = -t / this.renderer.domElement.offsetHeight * 2 + 1;
      const s = this.viewerModel, r = new Y2(), a = new C(e, t, this.camera.near);
      let o = null, c, l, h, d, u, f, p, _, g, m, v, y, b, w, x, S, T, M, A, D = new k0();
      for (a.unproject(this.camera), r.set(this.camera.position, a.sub(this.camera.position).normalize()), c = r.intersectObject(s, !0), w = 0; w < c.length; w++)
        if (!c[w].object.userData.pick_ignore) {
          o = c[w];
          break;
        }
      if (o !== null)
        if (h = o.object, f = o.face, u = [f.a, f.b, f.c], h.userData.annotation_info)
          l = {
            index: h.userData.annotation_info.vertex,
            point: h.userData.annotation_info.position,
            object: h
          };
        else {
          for (h.userData.recentered ? (S = h.userData.centroid, T = S.x, M = S.y, A = S.z) : T = M = A = 0, D = h.matrixWorld.invert(), d = o.point.applyMatrix4(D), m = h.userData.original_data.vertices, h.userData.original_data.indices, p = v, _ = new C(
            m[v * 3],
            m[v * 3 + 1],
            m[v * 3 + 2]
          ), g = d.distanceTo(
            new C(
              _.x - T,
              _.y - M,
              _.z - A
            )
          ), w = 1, x = u.length; w < x; w++)
            v = u[w], y = new C(
              m[v * 3],
              m[v * 3 + 1],
              m[v * 3 + 2]
            ), b = d.distanceTo(
              new C(y.x - T, y.y - M, y.z - A)
            ), b < g && (p = v, _ = y, g = b);
          l = {
            index: p,
            point: _,
            object: h
          };
          const {
            userData: { original_data: z }
          } = h;
          z.intensity && (l.intensity = z.intensity[p]);
        }
      else
        l = null;
      return l;
    });
    I(this, "setTransformControlMeshByKey", ({ name: e }) => {
      const t = this.modelMap.get(e);
      if (this.props.transformControl != null && t != null) {
        const n = t.modelData;
        this.transformControls.attach(n.mesh);
      }
    });
    I(this, "setTransformControlsEnable", (e) => {
      this.mouse != null && this.mouse.setTransformControlsEnable(e);
    });
    I(this, "setPickOnChange", (e) => {
      this.pickOnChange = e;
    });
    this.props = e, this.modelMap = /* @__PURE__ */ new Map(), this.lightMap = /* @__PURE__ */ new Map(), this.handlerFactory = new vC(), this.meshList = [];
    const t = {
      containerId: e.containerId,
      backgroundColor: e.backgroundColor,
      ...e.initialSceneParams
    };
    this.containerId = e.containerId, this.autorotate = {
      x: !1,
      y: !1,
      z: !1
    }, this.initialScene(t), this.props.labelRender ? this.mouse = new mc({
      canvas: this.labelRenderer.domElement,
      viewerModel: this.viewerModel,
      viewer: this,
      transformControls: this.transformControls,
      contextmenuEvent: this.props.contextmenuEvent,
      keyCameraControl: this.props.keyCameraControl
    }) : this.mouse = new mc({
      canvas: this.renderer.domElement,
      viewerModel: this.viewerModel,
      viewer: this,
      transformControls: this.transformControls,
      contextmenuEvent: this.props.contextmenuEvent,
      keyCameraControl: this.props.keyCameraControl
    });
  }
}
export {
  EC as ColorMaps,
  CC as SurfaceViewer,
  mu as THREE
};
